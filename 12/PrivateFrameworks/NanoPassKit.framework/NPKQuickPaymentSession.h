<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NPKQuickPaymentSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NanoPassKit.framework/NPKQuickPaymentSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit (1)
 */

@interface NPKQuickPaymentSession : NSObject <PKContactlessInterfaceSessionDelegate> {
    unsigned long long  _authorizationValidity;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    bool  _confirmed;
    PKContactlessInterfaceSession * _contactlessSession;
    PKPaymentSessionHandle * _contactlessSessionHandle;
    unsigned long long  _contactlessValidity;
    NSData * _credential;
    PKPass * _currentPass;
    bool  _deactivated;
    bool  _deactivating;
    NSMutableArray * _deactivationCompletionBlocks;
    bool  _deferAuthorization;
    <NPKQuickPaymentSessionDelegate> * _delegate;
    PKFieldDetector * _fieldDetector;
    bool  _inServiceMode;
    NSObject<OS_dispatch_queue> * _internalQueue;
    NSObject<OS_dispatch_queue> * _paymentSessionQueue;
    NSDictionary * _vasPasses;
}

@property (nonatomic) unsigned long long authorizationValidity;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;
@property (getter=isConfirmed, nonatomic) bool confirmed;
@property (nonatomic, retain) PKContactlessInterfaceSession *contactlessSession;
@property (nonatomic, retain) PKPaymentSessionHandle *contactlessSessionHandle;
@property (nonatomic) unsigned long long contactlessValidity;
@property (nonatomic, retain) PKPass *currentPass;
@property (getter=isDeactivated, nonatomic) bool deactivated;
@property (getter=isDeactivating, nonatomic) bool deactivating;
@property (nonatomic, retain) NSMutableArray *deactivationCompletionBlocks;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool deferAuthorization;
@property (nonatomic) <NPKQuickPaymentSessionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) PKFieldDetector *fieldDetector;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inServiceMode;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *internalQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *paymentSessionQueue;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSDictionary *vasPasses;

+ (void)_handleNewContactlessSession:(id)arg1;
+ (id)_outstandingSessionHashTable;
+ (bool)hasOutstandingSessions;

- (void).cxx_destruct;
- (void)_checkContactlessValidity:(unsigned long long)arg1 authorizationValidity:(unsigned long long)arg2 performWork:(id /* block */)arg3;
- (void)_checkContactlessValidity:(unsigned long long)arg1 performWork:(id /* block */)arg2;
- (void)_handleConventionalTransactionWithContext:(id)arg1;
- (void)_handleTransitTransactionWithContext:(id)arg1;
- (void)_internalQueue_deactivateSessionWithCompletion:(id /* block */)arg1;
- (void)_internalQueue_getContactlessAndAuthorizationValidityAndPerformWork:(id /* block */)arg1;
- (void)_internalQueue_invokeDeactivationCompletionBlocks;
- (void)_internalQueue_updateContactlessSessionForPass:(id)arg1 vasPasses:(id)arg2;
- (void)_internalQueue_updateContactlessValidityAndPerformWork:(id /* block */)arg1;
- (void)_internalQueue_updateSessionWithCurrentPassAndLoyaltyState;
- (void)_loyaltyEngineConfigurationChanged:(id)arg1;
- (bool)_sessionQueue_authorizeWithDeferredAuthorization:(bool)arg1 useCredential:(bool)arg2;
- (bool)_sessionQueue_enablePersistentCardEmulation;
- (void)_sessionQueue_invokeAppropriateCallbackForActivationWithSuccess:(bool)arg1 invokeOnSuccess:(bool)arg2 contactlessValidity:(unsigned long long)arg3 forPass:(id)arg4;
- (bool)_sessionQueue_startContactlessSessionWithSuccessfulCompletionOnInternalQueue:(id /* block */)arg1;
- (bool)_sessionQueue_updateContactlessSessionForPass:(id)arg1 paymentApplication:(id)arg2 vasPasses:(id)arg3 sessionConfirmed:(bool)arg4 deferAuthorization:(bool)arg5;
- (void)_updateAuthorizationValidity;
- (unsigned long long)authorizationValidity;
- (id)callbackQueue;
- (void)confirmOrRenewSession;
- (void)contactlessInterfaceSession:(id)arg1 didEndPersistentCardEmulationWithContext:(id)arg2;
- (void)contactlessInterfaceSession:(id)arg1 didFinishTransactionWithContext:(id)arg2;
- (void)contactlessInterfaceSessionDidEnterField:(id)arg1 withProperties:(id)arg2;
- (void)contactlessInterfaceSessionDidExitField:(id)arg1;
- (void)contactlessInterfaceSessionDidFail:(id)arg1 forPaymentApplication:(id)arg2 paymentPass:(id)arg3 valueAddedServicePasses:(id)arg4;
- (void)contactlessInterfaceSessionDidFailDeferredAuthorization:(id)arg1;
- (void)contactlessInterfaceSessionDidFailTransaction:(id)arg1 forPaymentApplication:(id)arg2 paymentPass:(id)arg3;
- (void)contactlessInterfaceSessionDidReceiveActivityTimeout:(id)arg1;
- (void)contactlessInterfaceSessionDidSelectPayment:(id)arg1;
- (void)contactlessInterfaceSessionDidSelectValueAddedService:(id)arg1;
- (void)contactlessInterfaceSessionDidStartTransaction:(id)arg1;
- (void)contactlessInterfaceSessionDidTimeout:(id)arg1 forPaymentApplication:(id)arg2 paymentPass:(id)arg3 valueAddedServicePasses:(id)arg4;
- (void)contactlessInterfaceSessionHasPendingServerRequest:(id)arg1;
- (id)contactlessSession;
- (id)contactlessSessionHandle;
- (unsigned long long)contactlessValidity;
- (id)currentPass;
- (void)deactivateSessionWithCompletion:(id /* block */)arg1;
- (id)deactivationCompletionBlocks;
- (void)dealloc;
- (bool)deferAuthorization;
- (id)delegate;
- (id)fieldDetector;
- (bool)inServiceMode;
- (id)initWithQueue:(id)arg1;
- (id)internalQueue;
- (bool)isConfirmed;
- (bool)isDeactivated;
- (bool)isDeactivating;
- (id)paymentSessionQueue;
- (void)setAuthorizationValidity:(unsigned long long)arg1;
- (void)setCallbackQueue:(id)arg1;
- (void)setConfirmed:(bool)arg1;
- (void)setContactlessSession:(id)arg1;
- (void)setContactlessSessionHandle:(id)arg1;
- (void)setContactlessValidity:(unsigned long long)arg1;
- (void)setCredential:(id)arg1;
- (void)setCurrentPass:(id)arg1;
- (void)setDeactivated:(bool)arg1;
- (void)setDeactivating:(bool)arg1;
- (void)setDeactivationCompletionBlocks:(id)arg1;
- (void)setDeferAuthorization:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFieldDetector:(id)arg1;
- (void)setInServiceMode:(bool)arg1;
- (void)setInternalQueue:(id)arg1;
- (void)setPaymentSessionQueue:(id)arg1;
- (void)setVasPasses:(id)arg1;
- (bool)startSession;
- (id)vasPasses;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
