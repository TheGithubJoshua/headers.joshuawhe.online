<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NoteContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Notes.framework/NoteContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Notes.framework/Notes (1349.30)
 */

@interface NoteContext : NSObject <ICLegacyContext> {
    AccountUtilities * _accountUtilities;
    bool  _hasPriorityInSaveConflicts;
    bool  _inMigrator;
    bool  _indexInBatches;
    bool  _isMainContext;
    NoteAccountObject * _localAccount;
    NoteStoreObject * _localStore;
    bool  _logChanges;
    NSManagedObjectContext * _managedObjectContext;
    NSNumber * _nextId;
    NSManagedObjectContext * _nextIdContext;
    CPExclusiveLock * _nextIdLock;
    NSMutableDictionary * _notePropertyObjectsRealized;
    unsigned long long  _notificationCount;
    CPExclusiveLock * _objectCreationLock;
    bool  _usePrivateQueue;
}

@property (nonatomic, retain) AccountUtilities *accountUtilities;
@property (nonatomic) bool isMainContext;
@property (nonatomic, readonly, retain) NSManagedObjectContext *managedObjectContext;
@property (nonatomic) bool usePrivateQueue;

// Image: /System/Library/PrivateFrameworks/Notes.framework/Notes

+ (id)allVisibleNotesMatchingPredicate:(id)arg1 context:(id)arg2;
+ (id)allVisibleNotesMatchingPredicate:(id)arg1 sorted:(bool)arg2 context:(id)arg3;
+ (id)allVisibleNotesMatchingPredicate:(id)arg1 sorted:(bool)arg2 context:(id)arg3 fetchLimit:(unsigned long long)arg4;
+ (void)clearTestsNotesRootPath;
+ (bool)databaseIsCorrupt:(id)arg1;
+ (id)defaultNotesSortDescriptors;
+ (id)fileProtectionOption;
+ (id)generateGUID;
+ (id)managedObjectModel;
+ (id)newFetchRequestForNotes;
+ (id)newLegacyContext;
+ (id)newManagedObjectContext;
+ (id)newlyAddedAttachmentInContext:(id)arg1;
+ (id)pathForIndex;
+ (id)pathForPersistentStore;
+ (id)persistentStoreCoordinator;
+ (void)removeConflictingSqliteAndIdxFiles;
+ (void)removeSqliteAndIdxFiles;
+ (id)searchIndexerDataSource;
+ (void)setTestsNotesRootPath:(id)arg1;
+ (bool)shouldLogIndexing;
+ (id)storeOptions;
+ (id)urlForPersistentStore;
+ (id)visibleNotesPredicate;

- (void).cxx_destruct;
- (void)_createLocalAccount:(id*)arg1 andStore:(id*)arg2;
- (id)_notePropertyObjectForKey:(id)arg1;
- (id)accountForAccountId:(id)arg1;
- (id)accountUtilities;
- (id)allAccounts;
- (id)allAccountsAsFaults:(bool)arg1 prefechedRelationshipKeyPaths:(id)arg2;
- (id)allNotes;
- (id)allNotesInCollection:(id)arg1;
- (id)allNotesMatchingPredicate:(id)arg1;
- (id)allNotesWithoutBodiesInCollection:(id)arg1;
- (id)allStores;
- (id)allVisibleNoteObjectIDsForAccountWithObjectID:(id)arg1;
- (id)allVisibleNotes;
- (id)allVisibleNotesForAccountWithObjectID:(id)arg1;
- (id)allVisibleNotesInCollection:(id)arg1;
- (id)allVisibleNotesInCollection:(id)arg1 sorted:(bool)arg2;
- (id)allVisibleNotesMatchingPredicate:(id)arg1;
- (id)allVisibleNotesMatchingPredicate:(id)arg1 sorted:(bool)arg2;
- (void)batchFaultNotes:(id)arg1;
- (void)cleanUpLocks;
- (void)clearCaches;
- (id)collectionForInfo:(id)arg1;
- (id)collectionForObjectID:(id)arg1;
- (long long)context:(id)arg1 shouldHandleInaccessibleFault:(id)arg2 forObjectID:(id)arg3 andTrigger:(id)arg4;
- (unsigned long long)countOfNotes;
- (unsigned long long)countOfNotesInCollection:(id)arg1;
- (unsigned long long)countOfNotesMatchingPredicate:(id)arg1;
- (unsigned long long)countOfStores;
- (unsigned long long)countOfVisibleNotes;
- (unsigned long long)countOfVisibleNotesForAccountWithObjectID:(id)arg1;
- (unsigned long long)countOfVisibleNotesInCollection:(id)arg1;
- (unsigned long long)countOfVisibleNotesMatchingPredicate:(id)arg1;
- (void)dealloc;
- (id)defaultStoreForNewNote;
- (bool)deleteAccount:(id)arg1;
- (void)deleteChanges:(id)arg1;
- (void)deleteNote:(id)arg1;
- (void)deleteNoteRegardlessOfConstraints:(id)arg1;
- (bool)deleteStore:(id)arg1;
- (void)enableChangeLogging:(bool)arg1;
- (id)existingObjectWithID:(id)arg1 error:(id*)arg2;
- (id)faultedInStoresForAccounts:(id)arg1;
- (bool)forceDeleteAccount:(id)arg1;
- (void)forceSetUpUniqueObjects;
- (id)getNextIdObject;
- (void)handleMigration;
- (bool)hasMultipleEnabledStores;
- (id)init;
- (id)initForMainContext;
- (id)initForMigrator;
- (id)initWithAccountUtilities:(id)arg1;
- (id)initWithAccountUtilities:(id)arg1 inMigrator:(bool)arg2;
- (id)initWithAccountUtilities:(id)arg1 inMigrator:(bool)arg2 isMainContext:(bool)arg3 usePrivateQueue:(bool)arg4;
- (id)initWithPrivateQueue;
- (void)invalidate;
- (bool)isMainContext;
- (id)liveNotesNeedingBodiesPredicate;
- (id)localAccount;
- (id)localStore;
- (id)managedObjectContext;
- (void)managedObjectContextWillSaveNotification:(id)arg1;
- (id)mostRecentlyModifiedNoteInCollection:(id)arg1;
- (id)newFRCForCollection:(id)arg1 delegate:(id)arg2;
- (id)newFRCForCollection:(id)arg1 delegate:(id)arg2 performFetch:(bool)arg3;
- (id)newFetchRequestForNotes;
- (id)newlyAddedAccount;
- (id)newlyAddedAttachment;
- (id)newlyAddedNote;
- (id)newlyAddedNoteWithGUID:(id)arg1;
- (id)newlyAddedStore;
- (id)nextIndex;
- (bool)nonEmptyNoteExistsForLegacyAccountWithObjectID:(id)arg1;
- (id)noteChangeWithType:(int)arg1 store:(id)arg2;
- (id)noteForObjectID:(id)arg1;
- (id)notesForIntegerIds:(id)arg1;
- (void)performBlock:(id /* block */)arg1;
- (void)performBlockAndWait:(id /* block */)arg1;
- (id)propertyValueForKey:(id)arg1;
- (void)receiveDarwinNotificationWithChangeLogging:(bool)arg1;
- (void)reset;
- (void)resetNotificationCount;
- (bool)save:(id*)arg1;
- (bool)saveOutsideApp:(id*)arg1;
- (bool)saveSilently:(id*)arg1;
- (void)setAccountUtilities:(id)arg1;
- (void)setHasPriorityInSaveConflicts:(bool)arg1;
- (void)setIsMainContext:(bool)arg1;
- (void)setPropertyValue:(id)arg1 forKey:(id)arg2;
- (bool)setUpCoreDataStack;
- (bool)setUpLastIndexTid;
- (bool)setUpLocalAccountAndStore;
- (void)setUpUniqueObjects;
- (void)setUsePrivateQueue:(bool)arg1;
- (bool)shouldDisableLocalStore;
- (bool)shouldObserveDarwinNotifications;
- (void)sortNotes:(id)arg1;
- (id)storeForObjectID:(id)arg1;
- (void)tearDownCoreDataStack;
- (void)trackChanges:(id)arg1;
- (bool)usePrivateQueue;
- (id)visibleNoteForObjectID:(id)arg1;
- (id)visibleNotesForIntegerIds:(id)arg1;
- (id)visibleNotesPredicate;

// Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared

+ (id)mainContextObjectFromObject:(id)arg1;
+ (id)sharedContext;

// Image: /System/Library/PrivateFrameworks/NotesUI.framework/NotesUI

- (bool)sourceIsManagedForAccountWithIdentifier:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
