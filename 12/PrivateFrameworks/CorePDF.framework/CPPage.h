<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPPage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CorePDF.framework/CPPage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF (414)
 */

@interface CPPage : CPChunk <CPDisposable> {
    void * _layout;
    CPChunk * background;
    NSMutableArray * columnsOnPage;
    float  complexity;
    bool  contextOwner;
    NSMutableArray * graphicsOnPage;
    bool  hasTextLines;
    bool  hasZones;
    id  hitTest;
    NSMutableArray * imagesOnPage;
    bool  isDirty;
    bool  isStartOfSection;
    long long  maxLayoutZOrder;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  mutex;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  pageCropBox;
    int  pageNumber;
    struct CPPDFContext { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; unsigned int x2; struct CPPDFGraphicState {} *x3; struct CPPDFGraphicState {} *x4; struct CGPDFContentStream {} *x5[250]; unsigned int x6; struct PrimitiveBuffer { void *x_7_1_1; void *x_7_1_2; void *x_7_1_3; unsigned int x_7_1_4; unsigned int x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; int x_7_1_8; } x7; struct PrimitiveBuffer { void *x_8_1_1; void *x_8_1_2; void *x_8_1_3; unsigned int x_8_1_4; unsigned int x_8_1_5; unsigned int x_8_1_6; unsigned int x_8_1_7; int x_8_1_8; } x8; struct PrimitiveBuffer { void *x_9_1_1; void *x_9_1_2; void *x_9_1_3; unsigned int x_9_1_4; unsigned int x_9_1_5; unsigned int x_9_1_6; unsigned int x_9_1_7; int x_9_1_8; } x9; struct CPPDFClipBuffer { unsigned int x_10_1_1; unsigned int x_10_1_2; unsigned int x_10_1_3; struct CPPDFClipSequence {} *x_10_1_4; } x10; struct __CFDictionary {} *x11; struct __CFDictionary {} *x12; struct __CFDictionary {} *x13; } * pdfContext;
    struct CGPDFPage { } * pdfPage;
    bool  reconstructed;
    int  rotation;
    NSMutableArray * shapesOnPage;
    NSMutableArray * textLinesOnPage;
}

+ (void)sortByReadingOrder:(id)arg1;

- (struct CPPDFContext { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; unsigned int x2; struct CPPDFGraphicState {} *x3; struct CPPDFGraphicState {} *x4; struct CGPDFContentStream {} *x5[250]; unsigned int x6; struct PrimitiveBuffer { void *x_7_1_1; void *x_7_1_2; void *x_7_1_3; unsigned int x_7_1_4; unsigned int x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; int x_7_1_8; } x7; struct PrimitiveBuffer { void *x_8_1_1; void *x_8_1_2; void *x_8_1_3; unsigned int x_8_1_4; unsigned int x_8_1_5; unsigned int x_8_1_6; unsigned int x_8_1_7; int x_8_1_8; } x8; struct PrimitiveBuffer { void *x_9_1_1; void *x_9_1_2; void *x_9_1_3; unsigned int x_9_1_4; unsigned int x_9_1_5; unsigned int x_9_1_6; unsigned int x_9_1_7; int x_9_1_8; } x9; struct CPPDFClipBuffer { unsigned int x_10_1_1; unsigned int x_10_1_2; unsigned int x_10_1_3; struct CPPDFClipSequence {} *x_10_1_4; } x10; struct __CFDictionary {} *x11; struct __CFDictionary {} *x12; struct __CFDictionary {} *x13; }*)PDFContext;
- (void)accept:(id)arg1;
- (void)addColumns:(id)arg1;
- (void)addImage:(id)arg1;
- (void)addShape:(id)arg1;
- (id)background;
- (id)bodyZone;
- (id)children;
- (struct CPPDFClipBuffer { unsigned int x1; unsigned int x2; unsigned int x3; struct CPPDFClipSequence {} *x4; }*)clipBuffer;
- (id)columnsOnPage;
- (float)complexity;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)dispose;
- (void)finalize;
- (id)graphicsOnPage;
- (bool)hasTextLines;
- (bool)hasZones;
- (id)hitTest;
- (id)imagesOnPage;
- (id)init;
- (id)initWithPDFPage:(struct CGPDFPage { }*)arg1;
- (bool)isStartOfSection;
- (void)layDownObjectsOnPage;
- (void)layDownObjectsOnPageOld;
- (struct CGPDFLayout { }*)layout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pageCropBox;
- (int)pageNumber;
- (id)parent;
- (struct CGPDFPage { }*)pdfPage;
- (bool)populatePDFLayout:(struct CGPDFLayout { }*)arg1;
- (void)reconstruct;
- (void)restoreBackGroundObjectToPage;
- (int)rotation;
- (void)setBackground:(id)arg1;
- (unsigned int)setCellPositionsOf:(id)arg1 from:(unsigned int)arg2;
- (void)setComplexity:(float)arg1;
- (unsigned int)setGraphicPositions:(id)arg1 from:(unsigned int)arg2;
- (void)setHasTextLines:(bool)arg1;
- (void)setHasZones:(bool)arg1;
- (void)setIsStartOfSection:(bool)arg1;
- (void)setPDFContext:(struct CPPDFContext { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; unsigned int x2; struct CPPDFGraphicState {} *x3; struct CPPDFGraphicState {} *x4; struct CGPDFContentStream {} *x5[250]; unsigned int x6; struct PrimitiveBuffer { void *x_7_1_1; void *x_7_1_2; void *x_7_1_3; unsigned int x_7_1_4; unsigned int x_7_1_5; unsigned int x_7_1_6; unsigned int x_7_1_7; int x_7_1_8; } x7; struct PrimitiveBuffer { void *x_8_1_1; void *x_8_1_2; void *x_8_1_3; unsigned int x_8_1_4; unsigned int x_8_1_5; unsigned int x_8_1_6; unsigned int x_8_1_7; int x_8_1_8; } x8; struct PrimitiveBuffer { void *x_9_1_1; void *x_9_1_2; void *x_9_1_3; unsigned int x_9_1_4; unsigned int x_9_1_5; unsigned int x_9_1_6; unsigned int x_9_1_7; int x_9_1_8; } x9; struct CPPDFClipBuffer { unsigned int x_10_1_1; unsigned int x_10_1_2; unsigned int x_10_1_3; struct CPPDFClipSequence {} *x_10_1_4; } x10; struct __CFDictionary {} *x11; struct __CFDictionary {} *x12; struct __CFDictionary {} *x13; }*)arg1;
- (void)setPageCropBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPageNumber:(int)arg1;
- (unsigned int)setPositionsOf:(id)arg1 from:(unsigned int)arg2;
- (unsigned int)setReadingOrder:(id)arg1 from:(unsigned int)arg2;
- (void)setRotation:(int)arg1;
- (id)shapesOnPage;
- (void)sortByReadingOrder;
- (id)textLinesOnPage;
- (unsigned int)traverse:(id)arg1 ordinal:(unsigned int)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
