<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIPDFAnnotationController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CorePDF.framework/UIPDFAnnotationController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF (414)
 */

@interface UIPDFAnnotationController : NSObject <UIGestureRecognizerDelegate> {
    bool  _allowEditing;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedMarginNoteSize;
    UIPDFMarkupAnnotation * _currentAnnotation;
    UIColor * _currentColor;
    <NSObject><UIPDFAnnotationControllerDelegate> * _delegate;
    CALayer * _drawingSurface;
    struct { 
        long long location; 
        long long length; 
    }  _initialRange;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    bool  _moving;
    UIPDFPageView * _pageView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _startPoint;
    bool  _tracking;
    bool  makeUnderlineAnnotation;
}

@property (nonatomic) bool allowEditing;
@property (nonatomic, retain) UIPDFAnnotation *currentAnnotation;
@property (nonatomic) UIColor *currentColor;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NSObject><UIPDFAnnotationControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) CALayer *drawingSurface;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool makeUnderlineAnnotation;
@property (nonatomic, readonly) UIPDFPageView *pageView;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool tracking;

+ (id)newAnnotation:(struct CGPDFDictionary { }*)arg1 type:(const char *)arg2;
+ (struct CGImage { }*)newMaskImage:(struct CGPDFPage { }*)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (bool)pageHasAnnotations:(id)arg1;

- (void)_addAnnotationViewFor:(id)arg1;
- (void)_addLinkAnnotationViewFor:(id)arg1;
- (void)_addRecognizers:(id)arg1;
- (void)_initialRange:(struct CGPoint { double x1; double x2; })arg1;
- (id)_linkAnnotationViewAt:(struct CGPoint { double x1; double x2; })arg1;
- (void)addAnnotation:(id)arg1;
- (void)addDrawingSurface:(id)arg1 view:(id)arg2;
- (void)addLinkAnnotationViews;
- (bool)allowEditing;
- (id)annotatePageSelection;
- (id)annotationAt:(struct CGPoint { double x1; double x2; })arg1;
- (bool)annotationBriefPressRecognized:(id)arg1;
- (bool)annotationLongPressRecognized:(id)arg1;
- (bool)annotationSingleTapRecognized:(id)arg1;
- (void)annotationTapRecognized:(id)arg1;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toSurfaceLayer:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toSurfaceLayer:(id)arg2;
- (void)copyAttributesOf:(id)arg1 to:(id)arg2;
- (id)currentAnnotation;
- (id)currentColor;
- (void)dealloc;
- (id)delegate;
- (void)didEndTrackingAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)doubleTapRecognized:(id)arg1;
- (void)drawAnnotations:(struct CGContext { }*)arg1;
- (id)drawingSurface;
- (void)endTrackingAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)hostViewDidScroll;
- (id)init;
- (id)initWithPageView:(id)arg1;
- (bool)intersects:(struct CGPDFSelection { }*)arg1 with:(struct CGPDFSelection { }*)arg2;
- (bool)isLinkAnnotationAt:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isSelection:(struct CGPDFSelection { }*)arg1 equalTo:(struct CGPDFSelection { }*)arg2;
- (void)layoutAnnotationViews:(id)arg1;
- (id)linkAnnotationAt:(struct CGPoint { double x1; double x2; })arg1;
- (bool)linkAnnotationShouldBegin:(id)arg1;
- (void)linkPressRecognized:(id)arg1;
- (void)lock;
- (bool)madeInstantAnnotation;
- (bool)makeUnderlineAnnotation;
- (id)marginNoteImage:(id)arg1;
- (struct CGSize { double x1; double x2; })marginNoteImageSize;
- (void)mergeSelectionOfAnnotation:(id)arg1;
- (struct CGImage { }*)newHighlightMaskImageFor:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)pageView;
- (void)resetBeingPressedForRecognizer:(id)arg1 withDelegate:(id)arg2 withAnnotation:(id)arg3;
- (void)setAllowEditing:(bool)arg1;
- (void)setCurrentAnnotation:(id)arg1;
- (void)setCurrentColor:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDrawingSurface:(id)arg1;
- (void)setMakeUnderlineAnnotation:(bool)arg1;
- (void)setNeedsDisplay;
- (void)setSurfacePosition:(id)arg1;
- (void)setView:(id)arg1;
- (void)startTracking:(struct CGPoint { double x1; double x2; })arg1;
- (bool)trackMoved:(struct CGPoint { double x1; double x2; })arg1;
- (bool)tracking;
- (void)tracking:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGImage { }*)underlineImageFor:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)unlock;
- (bool)willDoSomethingWithTap:(struct CGPoint { double x1; double x2; })arg1;
- (bool)willHandleTouchGestureAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)willTrackAtPoint:(struct CGPoint { double x1; double x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
