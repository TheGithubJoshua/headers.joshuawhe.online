<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPChunk.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CorePDF.framework/CPChunk.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF (414)
 */

@interface CPChunk : CPObject {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  bounds;
    bool  dirtyBounds;
    long long  insertionOrder;
    unsigned int  position;
    bool  shrinksWithChildren;
}

+ (float)chooseReferenceFontSizeFrom:(float)arg1 and:(float)arg2;

- (float)absoluteGapTo:(id)arg1;
- (void)accept:(id)arg1;
- (void)add:(id)arg1;
- (void)add:(id)arg1 atIndex:(unsigned int)arg2;
- (void)addChildrenOf:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })adjustToPointBoundary:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })advance;
- (float)advanceDeltaAfterSpace;
- (struct CGPoint { double x1; double x2; })anchor;
- (double)bottom;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (bool)boundsEqualsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 accuracy:(double)arg2;
- (double)center;
- (unsigned int)chunkPosition;
- (float)clusterGapTo:(id)arg1;
- (int)clusterLevelHint;
- (long long)compareAnchorX:(id)arg1;
- (long long)compareAnchorY:(id)arg1;
- (long long)compareAnchorYDescending:(id)arg1;
- (long long)compareChunkPosition:(id)arg1;
- (long long)compareCommonAnchorX:(id)arg1;
- (long long)compareInsertionOrder:(id)arg1;
- (long long)compareLinearBounds:(id)arg1;
- (long long)compareTopDescending:(id)arg1;
- (long long)compareX:(id)arg1;
- (long long)compareXBounds:(id)arg1;
- (long long)compareY:(id)arg1;
- (long long)compareYBounds:(id)arg1;
- (long long)compareYDescending:(id)arg1;
- (long long)compareYDescendingX:(id)arg1;
- (long long)compareZ:(id)arg1;
- (long long)compareZDescending:(id)arg1;
- (id)copyAndSplitChildrenAtIndex:(unsigned int)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)describeBounds;
- (void)fitBoundsToChildren;
- (float)fontSize;
- (bool)geometricallyContains:(id)arg1;
- (id)init;
- (long long)insertionOrder;
- (bool)intersectsChild:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)left;
- (id)newTakeChildren;
- (id)newTakeChildrenAmong:(id)arg1;
- (float)opticalLeading;
- (void)orderedInsert:(id)arg1 usingSelector:(SEL)arg2;
- (bool)overlapsHorizontallyWith:(id)arg1;
- (bool)overlapsVerticallyWith:(id)arg1;
- (float)referenceAdvanceWidth;
- (void)remove:(id)arg1;
- (void)removeAll;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })renderedBounds;
- (void)resizeWith:(id)arg1;
- (double)right;
- (double)rotationAngle;
- (void)setAnchor:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setChildren:(id)arg1;
- (void)setChunkPosition:(unsigned int)arg1;
- (void)setInsertionOrder:(long long)arg1;
- (void)setShrinksWithChildren:(bool)arg1;
- (bool)shrinksWithChildren;
- (void)sortUsingSelector:(SEL)arg1;
- (double)top;
- (void)translateObjectYBy:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
