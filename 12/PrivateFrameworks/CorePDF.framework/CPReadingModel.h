<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPReadingModel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CorePDF.framework/CPReadingModel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CorePDF.framework/CorePDF (414)
 */

@interface CPReadingModel : NSObject {
    NSAttributedString * _cachedAttributedString;
    NSString * _cachedString;
    long long  _count;
    CPRMList * _currentList;
    struct CGPDFDocument { } * _document;
    NSMutableArray * _headings;
    NSMutableArray * _lists;
    long long  _numberOfColumns;
    long long  _numberOfLayoutAreas;
    long long  _numberOfLines;
    long long  _numberOfParagraphs;
    long long  _pageNumber;
    long long  _pageNumberMemo;
    long long * _pageNumbers;
    struct { 
        long long location; 
        long long length; 
    }  _pageRange;
    long long  _pos;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _rangeMemo;
    struct { long long x1; long long x2; } * _stringLineRanges;
    NSMutableArray * _tables;
    struct { long long x1; long long x2; } * _textLineRanges;
    struct { 
        long long location; 
        long long length; 
    }  _textRangeMemo;
}

- (void)addListsInColumn:(struct CGPDFNode { }*)arg1;
- (void)addRange:(struct { long long x1; long long x2; })arg1;
- (unsigned long long)addRangeForLine:(unsigned long long)arg1 from:(unsigned long long)arg2;
- (void)addTable:(struct CGPDFNode { }*)arg1 layout:(struct CGPDFLayout { }*)arg2;
- (id)attributedString;
- (id)attributedStringForLine:(unsigned long long)arg1;
- (id)attributedStringForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)buildModel:(struct CGPDFDocument { }*)arg1;
- (void)buildModel:(struct CGPDFDocument { }*)arg1 pageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)clearCache;
- (void)dealloc;
- (long long)findParagraph:(struct CGPDFNode { }*)arg1 inListArray:(id)arg2;
- (struct CGPDFNode { }*)firstParagraphInList:(id)arg1;
- (id)headings;
- (void)headings:(struct CGPDFNode { }*)arg1 layout:(struct CGPDFLayout { }*)arg2;
- (void)increamentLayoutAreaCount;
- (void)incrementColumnCount;
- (void)incrementLineCount;
- (void)incrementParagraphCount;
- (long long)indexOfFirstLineOnPage:(unsigned long long)arg1;
- (id)initWithDocument:(struct CGPDFDocument { }*)arg1;
- (id)initWithDocument:(struct CGPDFDocument { }*)arg1 withPageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)lineCount;
- (unsigned long long)lineForIndex:(unsigned long long)arg1;
- (long long)lineIndexForPoint:(struct CGPoint { double x1; double x2; })arg1 onPage:(unsigned long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })linesForPage:(unsigned long long)arg1;
- (id)lists;
- (void)lists:(struct CGPDFNode { }*)arg1 layout:(struct CGPDFLayout { }*)arg2;
- (struct { long long x1; long long x2; })mapStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (unsigned long long)pageNumberForLine:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })pageRangeForStringRange:(struct { long long x1; long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pdfBoundsForCursor:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pdfBoundsForLine:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pdfBoundsForNewLine:(struct { long long x1; long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pdfBoundsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeForLine:(unsigned long long)arg1;
- (id)string;
- (id)stringForLine:(unsigned long long)arg1;
- (id)stringForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)stringLineRanges;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })stringRangeForLine:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })stringRangeForTextRange:(struct { long long x1; long long x2; })arg1 onPageNumber:(unsigned long long)arg2;
- (id)tables;
- (void)tables:(struct CGPDFNode { }*)arg1 layout:(struct CGPDFLayout { }*)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })textRangeForLine:(unsigned long long)arg1;
- (struct { long long x1; long long x2; })textRangeForStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)visitColumns:(struct CGPDFNode { }*)arg1 completion:(id /* block */)arg2;
- (void)visitLayoutAreas:(struct CGPDFNode { }*)arg1 completion:(id /* block */)arg2;
- (void)visitParagraphs:(struct CGPDFNode { }*)arg1 completion:(id /* block */)arg2;
- (void)visitTextLines:(struct CGPDFNode { }*)arg1 completion:(id /* block */)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
