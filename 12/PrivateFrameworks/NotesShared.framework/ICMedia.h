<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ICMedia.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NotesShared.framework/ICMedia.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared (1349.30)
 */

@interface ICMedia : ICCloudSyncingObject <ICCloudObject>

@property (nonatomic, retain) NSData *assetCryptoInitializationVector;
@property (nonatomic, retain) NSData *assetCryptoTag;
@property (nonatomic, retain) ICAttachment *attachment;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSString *filename;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)allMediaInContext:(id)arg1;
+ (id)containerDirectoryURLForMediaWithIdentifier:(id)arg1;
+ (void)deleteMedia:(id)arg1;
+ (id)existingCloudObjectForRecordID:(id)arg1 context:(id)arg2;
+ (id)exportableContainerDirectoryURLForMediaWithIdentifier:(id)arg1;
+ (id)exportableMediaDirectoryURL;
+ (id)exportableMediaURLForMediaWithIdentifier:(id)arg1 filename:(id)arg2;
+ (id)keyPathsForValuesAffectingParentCloudObject;
+ (id)mediaDirectoryURL;
+ (id)mediaIdentifiersForAccount:(id)arg1;
+ (id)mediaURLForMediaWithIdentifier:(id)arg1 filename:(id)arg2;
+ (id)mediaWithIdentifier:(id)arg1 context:(id)arg2;
+ (id)newCloudObjectForRecord:(id)arg1 context:(id)arg2;
+ (id)newMediaWithAttachment:(id)arg1 context:(id)arg2;
+ (id)newMediaWithAttachment:(id)arg1 forData:(id)arg2 filename:(id)arg3 context:(id)arg4 error:(id*)arg5;
+ (id)newMediaWithAttachment:(id)arg1 forFileWrapper:(id)arg2 context:(id)arg3 error:(id*)arg4;
+ (id)newMediaWithAttachment:(id)arg1 forURL:(id)arg2 context:(id)arg3 error:(id*)arg4;
+ (id)newMediaWithIdentifier:(id)arg1 context:(id)arg2;
+ (void)purgeAllMediaFiles;
+ (void)purgeAllMediaInContext:(id)arg1;
+ (void)purgeMedia:(id)arg1;
+ (void)purgeMediaFilesForIdentifiers:(id)arg1;
+ (void)undeleteMedia:(id)arg1;

- (id)containerDirectoryURL;
- (id)data;
- (id)dataWithoutImageMarkupMetadata:(bool)arg1;
- (id)decryptedData;
- (void)deleteExportableMedia;
- (void)deleteFromLocalDatabase;
- (id)encryptedMediaURL;
- (id)exportableContainerDirectoryURL;
- (id)exportableMediaURL;
- (id)exportableMediaURLWithUpdatedFileIfNecessary;
- (id)filename;
- (void)fixBrokenReferences;
- (bool)hasAllMandatoryFields;
- (bool)hasFile;
- (id)ic_loggingValues;
- (bool)isArchivedDirectory;
- (bool)isInICloudAccount;
- (bool)isValid;
- (bool)makeSureExportableMediaDirectoryExists:(id*)arg1;
- (bool)makeSureMediaDirectoryExists:(id*)arg1;
- (id)mediaArchiveURL;
- (id)mediaTarArchiveURL;
- (id)mediaURL;
- (void)mergeDataFromRecord:(id)arg1;
- (bool)needsToBePushedToCloud;
- (id)newlyCreatedRecord;
- (void)objectWasPushedToCloudWithOperation:(id)arg1 serverRecord:(id)arg2;
- (id)objectsToBeDeletedBeforeThisObject;
- (id)parentCloudObject;
- (id)parentEncryptableObject;
- (void)prepareForDeletion;
- (id)recordType;
- (id)recordZoneName;
- (void)resetUniqueIdentifier;
- (void)saveAndClearDecryptedData;
- (void)setAttachment:(id)arg1;
- (void)setFilename:(id)arg1;
- (bool)shouldFallBackToCheckAllCryptoKeys;
- (bool)supportsDeletionByTTL;
- (void)updateFlagToExcludeFromCloudBackup;
- (bool)writeData:(id)arg1 error:(id*)arg2;
- (bool)writeDataFromAsset:(id)arg1 isArchivedDirectory:(bool)arg2 error:(id*)arg3;
- (bool)writeDataFromFileURL:(id)arg1 error:(id*)arg2;
- (bool)writeDataFromFileWrapper:(id)arg1 error:(id*)arg2;
- (void)writeDataFromItemProvider:(id)arg1 checkForMarkupData:(bool)arg2 completionBlock:(id /* block */)arg3;
- (bool)writeDataWithBlock:(id /* block */)arg1 error:(id*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
