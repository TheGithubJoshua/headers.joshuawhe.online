<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ICDocCamImageQuad.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NotesShared.framework/ICDocCamImageQuad.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared (1349.30)
 */

@interface ICDocCamImageQuad : NSObject <ICDocCamImageQuad> {
    struct CGPoint { 
        double x; 
        double y; 
    }  _bottomLeft;
    struct CGPoint { 
        double x; 
        double y; 
    }  _bottomRight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _boundingBox;
    struct CGPoint { 
        double x; 
        double y; 
    }  _topLeft;
    struct CGPoint { 
        double x; 
        double y; 
    }  _topRight;
}

@property (nonatomic) struct CGPoint { double x1; double x2; } bottomLeft;
@property (nonatomic) struct CGPoint { double x1; double x2; } bottomRight;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } boundingBox;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic, readonly) bool containsAngleOutOfValidThreshold;
@property (nonatomic, readonly) bool containsIntersectingLines;
@property (nonatomic, readonly) bool containsPointOutsideOfExtendedImageBounds;
@property (nonatomic, readonly) bool containsPointsLessThanDistanceThreshold;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isConvex;
@property (nonatomic, readonly) bool isValid;
@property (nonatomic, readonly) double mininumAllowedDistanceBetweenPoints;
@property (readonly) Class superclass;
@property (nonatomic) struct CGPoint { double x1; double x2; } topLeft;
@property (nonatomic) struct CGPoint { double x1; double x2; } topRight;

// Image: /System/Library/PrivateFrameworks/NotesShared.framework/NotesShared

+ (id)quadFromCGRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)quadFromVNRectangle:(id)arg1;

- (void)addPointToQuadPoints:(struct CGPoint { double x1; double x2; })arg1;
- (void)applyOrientation:(long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGPoint { double x1; double x2; })bottomLeft;
- (struct CGPoint { double x1; double x2; })bottomRight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (void)clampQuadToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)containsAngleOutOfValidThreshold;
- (bool)containsIntersectingLines;
- (bool)containsPointOutsideOfExtendedImageBounds;
- (bool)containsPointsLessThanDistanceThreshold;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)flipPointsWithSourceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)flippedQuadFromSourceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)imageQuadByScalingBy:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithBottomLeft:(struct CGPoint { double x1; double x2; })arg1 bottomRight:(struct CGPoint { double x1; double x2; })arg2 topLeft:(struct CGPoint { double x1; double x2; })arg3 topRight:(struct CGPoint { double x1; double x2; })arg4;
- (id)intersectionOfLineFrom:(struct CGPoint { double x1; double x2; })arg1 to:(struct CGPoint { double x1; double x2; })arg2 withLineFrom:(struct CGPoint { double x1; double x2; })arg3 to:(struct CGPoint { double x1; double x2; })arg4;
- (bool)isConvex;
- (bool)isEqual:(id)arg1;
- (bool)isValid;
- (double)mininumAllowedDistanceBetweenPoints;
- (void)orientIfNecessary;
- (struct CGSize { double x1; double x2; })perspectiveCorrectedSize;
- (struct CGPoint { double x1; double x2; })pointRotatedClockwiseAroundOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)removeOrientation:(long long)arg1 boundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)rotatePointsByOrientation:(long long)arg1;
- (void)rotatePointsClockwise;
- (void)rotatePointsRemovingOrientation:(long long)arg1;
- (void)setBottomLeft:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBottomRight:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBoundingBox:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTopLeft:(struct CGPoint { double x1; double x2; })arg1;
- (void)setTopRight:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })topLeft;
- (struct CGPoint { double x1; double x2; })topRight;

// Image: /System/Library/PrivateFrameworks/NotesUI.framework/NotesUI

- (id)normalizedQuadByConvertingFromView:(struct UIView { Class x1; }*)arg1 toView:(struct UIView { Class x1; }*)arg2 toViewSize:(struct CGSize { double x1; double x2; })arg3;
- (id)quadByConvertingFromView:(struct UIView { Class x1; }*)arg1 toView:(struct UIView { Class x1; }*)arg2 isNormalized:(bool)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
