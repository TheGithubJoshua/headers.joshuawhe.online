<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TPPhonePad.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TelephonyUI.framework/TPPhonePad.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TelephonyUI.framework/TelephonyUI (1.0)
 */

@interface TPPhonePad : UIControl <TPDialerKeypadProtocol> {
    double  _bottomHeight;
    <TPDialerKeypadDelegate> * _delegate;
    unsigned int  _delegateSoundCallbacks;
    long long  _downKey;
    long long  _highlightKey;
    unsigned int  _incompleteSounds;
    struct __CFSet { } * _inflightSounds;
    struct __CFDictionary { } * _keyToButtonMap;
    double  _leftWidth;
    double  _midHeight;
    double  _midWidth;
    bool  _playsSounds;
    double  _rightWidth;
    unsigned int  _soundsActivated;
    double  _topHeight;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)_delayedDeactivate;
+ (bool)launchFieldTestIfNeeded:(id)arg1;
+ (bool)shouldStringAutoDial:(id)arg1 givenLastChar:(BOOL)arg2;

- (void).cxx_destruct;
- (void)_activateSounds:(bool)arg1;
- (void)_appResumed;
- (void)_appSuspended;
- (id)_buttonForKeyAtIndex:(unsigned long long)arg1;
- (void)_handleKey:(id)arg1 forUIEvent:(id)arg2;
- (void)_handleKeyPressAndHoldForDownKey:(id)arg1;
- (void)_handleKeyPressAndHoldForHighlightedKey:(id)arg1;
- (void)_handleKeyPressAndHoldForKey:(long long)arg1;
- (id)_highlightedImage;
- (id)_imageByCroppingImage:(id)arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (int)_keyForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_keypadImage;
- (struct CGPoint { double x1; double x2; })_keypadOrigin;
- (void)_notifySoundCompletionIfNecessary:(unsigned int)arg1;
- (void)_playSoundForKey:(unsigned long long)arg1;
- (id)_pressedImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rectForKey:(unsigned long long)arg1;
- (void)_stopAllSoundsForcingCallbacks:(bool)arg1;
- (void)_stopSoundForKey:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_updateRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withScale:(double)arg2;
- (double)_yFudge;
- (bool)cancelTouchTracking;
- (void)dealloc;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)highlightKeyAtIndex:(long long)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (long long)indexForHighlightedKey;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)movedFromWindow:(id)arg1;
- (void)movedToWindow:(id)arg1;
- (void)performTapActionCancelForHighlightedKey;
- (void)performTapActionDownForHighlightedKey;
- (void)performTapActionEndForHighlightedKey;
- (bool)pointMostlyInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)removeFromSuperview;
- (void)setButton:(id)arg1 forKeyAtIndex:(unsigned long long)arg2;
- (void)setDelegate:(id)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setNeedsDisplayForKey:(int)arg1;
- (void)setPlaysSounds:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
