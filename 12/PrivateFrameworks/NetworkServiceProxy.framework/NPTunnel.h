<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NPTunnel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NetworkServiceProxy.framework/NPTunnel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NetworkServiceProxy.framework/NetworkServiceProxy (1)
 */

@interface NPTunnel : NSObject {
    NSPAppRule * _appRule;
    NSDate * _connectionStartDate;
    long long  _connectionState;
    <NPTunnelDelegate> * _delegate;
    NSObject<OS_nw_endpoint> * _endpoint;
    bool  _eof;
    int  _error;
    long long  _fallbackReason;
    NSMutableDictionary * _flows;
    bool  _handledDisconnected;
    NSUUID * _identifier;
    void * _idleTimer;
    bool  _isCancelled;
    bool  _isReadyForData;
    bool  _isTFOProbeSucceeded;
    NSObject<OS_nw_endpoint> * _localEndpoint;
    NSObject<OS_nw_parameters> * _parameters;
    NSObject<OS_nw_path> * _path;
    bool  _persistMetrics;
    struct nw_protocol { 
        unsigned char flow_id[16]; 
        struct nw_protocol_identifier {} *identifier; 
        struct nw_protocol_callbacks {} *callbacks; 
        struct nw_protocol {} *output_handler; 
        void *handle; 
        struct nw_protocol {} *default_input_handler; 
        void *output_handler_context; 
    }  _protocol;
    NSObject<OS_dispatch_data> * _savedData;
    NetworkServiceProxyConnectionStats * _stats;
    double  _timeIntervalSinceLastUsage;
    double  _timeToFirstByte;
    double  _timeToFirstRequest;
    unsigned long long * _timestamps;
}

@property (readonly) NSPAppRule *appRule;
@property (readonly) bool canHandleMoreData;
@property (retain) NSDate *connectionStartDate;
@property long long connectionState;
@property (readonly) <NPTunnelDelegate> *delegate;
@property (readonly) NSObject<OS_nw_endpoint> *endpoint;
@property bool eof;
@property int error;
@property long long fallbackReason;
@property (readonly) NSMutableDictionary *flows;
@property bool handledDisconnected;
@property (readonly) NSUUID *identifier;
@property void*idleTimer;
@property (readonly) unsigned long long initialWindowSize;
@property bool isCancelled;
@property (readonly) bool isConnectionAlive;
@property bool isReadyForData;
@property (readonly) bool isTFOProbeSucceeded;
@property (retain) NSObject<OS_nw_endpoint> *localEndpoint;
@property (readonly) NSObject<OS_nw_interface> *outputInterface;
@property (readonly) NSObject<OS_nw_parameters> *parameters;
@property (retain) NSObject<OS_nw_path> *path;
@property bool persistMetrics;
@property (readonly) struct nw_protocol { unsigned char x1[16]; struct nw_protocol_identifier {} *x2; struct nw_protocol_callbacks {} *x3; struct nw_protocol {} *x4; void *x5; struct nw_protocol {} *x6; void *x7; }*protocol;
@property (retain) NSObject<OS_dispatch_data> *savedData;
@property (retain) NetworkServiceProxyConnectionStats *stats;
@property (readonly) double timeIntervalSinceLastUsage;
@property double timeToFirstByte;
@property double timeToFirstRequest;
@property (readonly) unsigned long long*timestamps;

+ (void)initializeProtocol;

- (void).cxx_destruct;
- (void)acknowledgeData:(unsigned long long)arg1 sentToFlow:(id)arg2;
- (bool)addNewFlow:(id)arg1;
- (unsigned long long)allocateFlowID;
- (id)appRule;
- (bool)canHandleMoreData;
- (void)cancelConnection;
- (void)closeFlow:(id)arg1;
- (id)connectionStartDate;
- (long long)connectionState;
- (id)createConnectionInfo;
- (void)dealloc;
- (id)delegate;
- (void)destroyConnection;
- (id)endpoint;
- (bool)eof;
- (int)error;
- (long long)fallbackReason;
- (bool)flowIsFirstFlow:(id)arg1;
- (id)flows;
- (void)handleCanHandleMoreData;
- (void)handleConnected;
- (void)handleConnectionIsDisconnected;
- (void)handleDataWrittenWithError:(int)arg1;
- (void)handleDisconnected;
- (void)handleEOF;
- (void)handleFallbackForFlow:(id)arg1;
- (id)handleFlowClosed:(unsigned long long)arg1 withFallbackReason:(long long)arg2;
- (void)handleFlowUsedTunnel;
- (void)handleInputAvailable;
- (void)handleOutputAvailable;
- (void)handleReadData:(struct nw_frame_array_s { struct nw_frame {} *x1; struct nw_frame {} **x2; }*)arg1;
- (bool)handledDisconnected;
- (bool)hasFlow:(unsigned long long)arg1;
- (id)identifier;
- (void*)idleTimer;
- (void)increaseWindowSizeForFlow:(unsigned long long)arg1 byBytes:(unsigned long long)arg2;
- (id)initWithEndpoint:(id)arg1 parameters:(id)arg2 appRule:(id)arg3 flowProperties:(id)arg4 delegate:(id)arg5;
- (unsigned long long)initialWindowSize;
- (bool)isCancelled;
- (bool)isConnectionAlive;
- (bool)isReadyForData;
- (bool)isTFOProbeSucceeded;
- (id)localEndpoint;
- (unsigned long long)maxDataSendSizeForFlow:(id)arg1;
- (id)outputInterface;
- (id)parameters;
- (id)path;
- (bool)persistMetrics;
- (struct nw_protocol { unsigned char x1[16]; struct nw_protocol_identifier {} *x2; struct nw_protocol_callbacks {} *x3; struct nw_protocol {} *x4; void *x5; struct nw_protocol {} *x6; void *x7; }*)protocol;
- (void)readMinimumLength:(unsigned long long)arg1 maximumLength:(unsigned long long)arg2;
- (void)removeFlow:(unsigned long long)arg1;
- (id)savedData;
- (long long)sendData:(id)arg1 forFlow:(id)arg2;
- (void)sendData:(id)arg1 toClientFlow:(unsigned long long)arg2;
- (void)setConnectionStartDate:(id)arg1;
- (void)setConnectionState:(long long)arg1;
- (void)setEof:(bool)arg1;
- (void)setError:(int)arg1;
- (void)setFallbackReason:(long long)arg1;
- (void)setHandledDisconnected:(bool)arg1;
- (void)setIdleTimer:(void*)arg1;
- (void)setIsCancelled:(bool)arg1;
- (void)setIsReadyForData:(bool)arg1;
- (void)setLocalEndpoint:(id)arg1;
- (void)setPath:(id)arg1;
- (void)setPersistMetrics:(bool)arg1;
- (void)setSavedData:(id)arg1;
- (void)setStats:(id)arg1;
- (void)setTimeToFirstByte:(double)arg1;
- (void)setTimeToFirstRequest:(double)arg1;
- (bool)start;
- (void)startIdleTimer;
- (id)stats;
- (void)teardownOutputHandler;
- (double)timeIntervalSinceLastUsage;
- (double)timeToFirstByte;
- (double)timeToFirstRequest;
- (unsigned long long*)timestamps;
- (void)write:(id)arg1;
- (void)writeInitialData;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
