<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NPTuscanyOnRamp.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NetworkServiceProxy.framework/NPTuscanyOnRamp.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NetworkServiceProxy.framework/NetworkServiceProxy (1)
 */

@interface NPTuscanyOnRamp : NSObject <NSPNetworkAgentDelegate, NSSecureCoding> {
    long long  _TFOStatus;
    NSPKeyNetworkAgent * _agent;
    NWNetworkAgentRegistration * _agentRegistration;
    NSData * _dayPass;
    NSDate * _dayPassCreationDate;
    bool  _dayPassFailed;
    double  _dayPassHardExpiry;
    bool  _dayPassPending;
    NSURLSession * _dayPassSession;
    NSUUID * _dayPassUUID;
    NWEndpoint * _daypassEndpoint;
    NPKeyBag * _keybag;
    unsigned long long  _maxFrameSize;
    NPWaldo * _parentWaldo;
    NSDate * _retryDate;
    unsigned long long  _rtt;
    NPTunnelTuscanyEndpoint * _tuscanyEndpoint;
}

@property (readonly) long long TFOStatus;
@property (retain) NSPKeyNetworkAgent *agent;
@property (retain) NWNetworkAgentRegistration *agentRegistration;
@property (readonly) long long currentEdgeType;
@property (readonly) long long currentFallbackReason;
@property unsigned int currentTimestamp;
@property (retain) NSData *dayPass;
@property (retain) NSDate *dayPassCreationDate;
@property bool dayPassFailed;
@property double dayPassHardExpiry;
@property bool dayPassPending;
@property (readonly) bool dayPassRefreshAllowed;
@property (retain) NSURLSession *dayPassSession;
@property unsigned int dayPassSessionCounter;
@property (retain) NSUUID *dayPassUUID;
@property (readonly) NWEndpoint *daypassEndpoint;
@property (readonly) NSDictionary *descriptionDictionary;
@property (readonly) bool isDayPassExpired;
@property (readonly) bool isTFOEnabled;
@property (retain) NPKeyBag *keybag;
@property (readonly) unsigned long long maxFrameSize;
@property NPWaldo *parentWaldo;
@property (retain) NSDate *retryDate;
@property (readonly) unsigned long long rtt;
@property (readonly) NSString *shortDescription;
@property (readonly) double timeSinceLastUsed;
@property (retain) NPTunnelTuscanyEndpoint *tuscanyEndpoint;

+ (id)currentOnRamp;
+ (void)logKeybag:(id)arg1 message:(id)arg2 identifier:(id)arg3;
+ (id)resetWithOnRamps:(id)arg1 currentTimestamp:(unsigned int)arg2 currentNetworkInfo:(id)arg3 currentEdgeIndex:(long long)arg4 currentEdgeList:(id)arg5 lastFailureReason:(unsigned int)arg6 generation:(unsigned int)arg7 identifier:(id)arg8 updateHash:(id)arg9;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (long long)TFOStatus;
- (id)agent;
- (id)agentRegistration;
- (id)copyCurrentEndpointReturnUUID:(id*)arg1;
- (unsigned int)copyValue:(void*)arg1 ofSize:(unsigned int)arg2 fromOffset:(unsigned int)arg3 base:(const char *)arg4 totalLength:(unsigned int)arg5;
- (long long)currentEdgeType;
- (long long)currentFallbackReason;
- (unsigned int)currentTimestamp;
- (id)dayPass;
- (id)dayPassCreationDate;
- (bool)dayPassFailed;
- (double)dayPassHardExpiry;
- (bool)dayPassPending;
- (bool)dayPassRefreshAllowed;
- (id)dayPassSession;
- (unsigned int)dayPassSessionCounter;
- (id)dayPassUUID;
- (id)daypassEndpoint;
- (void)dealloc;
- (id)description;
- (id)descriptionDictionary;
- (void)encodeWithCoder:(id)arg1;
- (bool)fillTestDaypass;
- (id)getDayPassForUUID:(id)arg1;
- (unsigned int)getNextSessionCounterForUUID:(id)arg1;
- (id)getTuscanyEndpoint:(id)arg1;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithEndpoint:(id)arg1;
- (void)invalidateDayPass;
- (bool)isDayPassExpired;
- (bool)isDayPassPastExpiry:(double)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isTFOEnabled;
- (id)keybag;
- (unsigned long long)maxFrameSize;
- (id)parentWaldo;
- (void)receiveAssertionForUUID:(id)arg1;
- (void)receiveUnassertionForUUID:(id)arg1;
- (void)refreshDayPassWithWaldoDelegate:(id)arg1 softExpiry:(double)arg2 retryInterval:(double)arg3 edge:(id)arg4 completionHandler:(id /* block */)arg5;
- (bool)registerAgentWithKey:(id)arg1;
- (void)reportUsageOfUUID:(id)arg1 withResult:(bool)arg2 rtt:(unsigned long long)arg3 geohash:(id)arg4 fallbackReason:(long long)arg5 signingIdentifier:(id)arg6 remoteEndpoint:(id)arg7;
- (bool)resetAgent:(id)arg1;
- (void)resetFromCurrentInfo;
- (void)resetParentWaldo:(id)arg1;
- (id)retryDate;
- (unsigned long long)rtt;
- (void)setAgent:(id)arg1;
- (void)setAgentRegistration:(id)arg1;
- (void)setCurrentTimestamp:(unsigned int)arg1;
- (void)setDayPass:(id)arg1;
- (void)setDayPassCreationDate:(id)arg1;
- (void)setDayPassFailed:(bool)arg1;
- (void)setDayPassHardExpiry:(double)arg1;
- (void)setDayPassPending:(bool)arg1;
- (void)setDayPassSession:(id)arg1;
- (void)setDayPassSessionCounter:(unsigned int)arg1;
- (void)setDayPassUUID:(id)arg1;
- (void)setKeybag:(id)arg1;
- (void)setParentWaldo:(id)arg1;
- (void)setRetryDate:(id)arg1;
- (void)setTuscanyEndpoint:(id)arg1;
- (id)shortDescription;
- (void)stopUsingUUID:(id)arg1;
- (double)timeSinceLastUsed;
- (id)tuscanyEndpoint;
- (void)unregisterAgent;
- (bool)updateHashMatchesEdgeSet:(id)arg1;
- (void)updateSessionCounterFromKernel;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
