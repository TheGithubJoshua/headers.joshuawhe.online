<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GKMatch.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GameCenterFoundation.framework/GKMatch.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GameCenterFoundation.framework/GameCenterFoundation (577.8)
 */

@interface GKMatch : NSObject <GKSessionDelegate, GKSessionPrivateDelegate> {
    id /* block */  _chooseHostCompletion;
    NSMutableSet * _connectedPlayerIDs;
    GKConnection * _connection;
    <GKMatchDelegate> * _delegateWeak;
    unsigned long long  _expectedPlayerCount;
    NSMutableDictionary * _guestConnections;
    NSMutableDictionary * _guestSessions;
    bool  _hostScoreForQuery;
    NSMutableDictionary * _hostScores;
    <GKMatchDelegate> * _inviteDelegateWeak;
    bool  _needHostScore;
    NSDictionary * _networkStatistics;
    NSMutableArray * _opponentIDs;
    unsigned int  _packetSequenceNumber;
    NSMutableDictionary * _playerEventQueues;
    NSMutableDictionary * _playerPushTokens;
    GKThreadsafeDictionary * _playersByIdentifier;
    bool  _recentlyBecameActive;
    NSMutableArray * _reinvitedPlayers;
    long long  _rematchCount;
    NSString * _rematchID;
    NSData * _selfBlob;
    GKSession * _session;
    NSObject<OS_dispatch_queue> * _stateChangeQueue;
    unsigned char  _version;
}

@property (nonatomic, copy) id /* block */ chooseHostCompletion;
@property (nonatomic, retain) NSMutableSet *connectedPlayerIDs;
@property (nonatomic, retain) GKConnection *connection;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <GKMatchDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long expectedPlayerCount;
@property (nonatomic, retain) NSMutableDictionary *guestConnections;
@property (nonatomic, retain) NSMutableDictionary *guestSessions;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hostScoreForQuery;
@property (nonatomic, retain) NSMutableDictionary *hostScores;
@property (nonatomic) <GKMatchDelegate> *inviteDelegate;
@property (nonatomic) bool needHostScore;
@property (nonatomic, retain) NSDictionary *networkStatistics;
@property (nonatomic, retain) NSMutableArray *opponentIDs;
@property (nonatomic) unsigned int packetSequenceNumber;
@property (nonatomic, retain) NSMutableDictionary *playerEventQueues;
@property (nonatomic, retain) NSMutableDictionary *playerPushTokens;
@property (nonatomic, readonly) NSArray *players;
@property (nonatomic, retain) GKThreadsafeDictionary *playersByIdentifier;
@property (nonatomic) bool recentlyBecameActive;
@property (nonatomic, retain) NSMutableArray *reinvitedPlayers;
@property (nonatomic) long long rematchCount;
@property (nonatomic, retain) NSString *rematchID;
@property (nonatomic, retain) NSData *selfBlob;
@property (nonatomic, retain) GKSession *session;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *stateChangeQueue;
@property (readonly) Class superclass;
@property (nonatomic) unsigned char version;

- (void)_delegate:(id)arg1 didReceiveData:(id)arg2 forRecipient:(id)arg3 fromPlayer:(id)arg4;
- (void)acceptRelayResponse:(id)arg1 player:(id)arg2;
- (void)addHostScore:(int)arg1 forPlayer:(id)arg2;
- (void)addPlayers:(id)arg1;
- (id)allIDs;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)calculateHostScore;
- (void)chooseBestHostPlayerWithCompletionHandler:(id /* block */)arg1;
- (void)chooseBestHostingPlayerWithCompletionHandler:(id /* block */)arg1;
- (id /* block */)chooseHostCompletion;
- (void)conditionallyReinvitePlayer:(id)arg1 sessionToken:(id)arg2;
- (void)conditionallyRelaunchPlayer:(id)arg1;
- (void)connectToGuestPlayer:(id)arg1 withHostPlayer:(id)arg2;
- (void)connectToNearbyPlayer:(id)arg1 withConnectionData:(id)arg2;
- (void)connectToPlayers:(id)arg1 withPeerDictionaries:(id)arg2 version:(unsigned char)arg3 sessionToken:(id)arg4 cdxTicket:(id)arg5;
- (bool)connected:(id)arg1;
- (id)connectedPlayerIDs;
- (id)connection;
- (id)dataFromBase64String:(id)arg1;
- (void)dealloc;
- (void)deferStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (id)delegate;
- (id)description;
- (void)disconnect;
- (void)disconnectGuestSessions;
- (unsigned long long)expectedPlayerCount;
- (void)getLocalConnectionDataWithCompletionHandler:(id /* block */)arg1;
- (id)guestConnections;
- (id)guestPlayers;
- (id)guestSessions;
- (bool)haveAllHostScores;
- (bool)hostScoreForQuery;
- (id)hostScores;
- (id)init;
- (void)initRelayConnectionForPlayer:(id)arg1;
- (void)initRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayInfoFromPush:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayInfoFromServerResponse:(id)arg1 forPlayer:(id)arg2;
- (void)initRelayResponse:(id)arg1 player:(id)arg2;
- (id)inviteDelegate;
- (void)inviteeComboMatched:(long long)arg1;
- (void)localPlayerDidChange:(id)arg1;
- (id)nearbyConnectionData;
- (bool)needHostScore;
- (id)networkStatistics;
- (id)opponentIDs;
- (id)packet:(unsigned char)arg1 data:(id)arg2;
- (unsigned int)packetSequenceNumber;
- (id)peerFromPlayer:(id)arg1;
- (id)playerEventQueues;
- (id)playerForSession:(id)arg1;
- (id)playerFromPeer:(id)arg1;
- (id)playerIDs;
- (id)playerPushTokens;
- (id)players;
- (id)playersByIdentifier;
- (void)preLoadInviter:(id)arg1 sessionToken:(id)arg2;
- (void)preemptRelay:(id)arg1;
- (void)queueData:(id)arg1 withEventQueueForPlayer:(id)arg2 forRecipient:(id)arg3;
- (void)receiveData:(id)arg1 fromPeer:(id)arg2 inSession:(id)arg3 context:(void*)arg4;
- (void)receivedChooseHostData:(id)arg1 fromPlayer:(id)arg2;
- (bool)recentlyBecameActive;
- (id)reinvitedPlayers;
- (void)reinviteeAcceptedNotification:(id)arg1;
- (void)reinviteeDeclinedNotification:(id)arg1;
- (void)relayPush:(id)arg1;
- (void)relayPushNotification:(id)arg1;
- (long long)rematchCount;
- (id)rematchID;
- (void)rematchWithCompletionHandler:(id /* block */)arg1;
- (void)requestRelayInitForPlayer:(id)arg1;
- (void)requestRelayUpdateForPlayer:(id)arg1;
- (bool)selectHostIfRequestedAndAllScored;
- (id)selfBlob;
- (void)sendData:(id)arg1 forRecipient:(id)arg2 fromPlayer:(id)arg3;
- (bool)sendData:(id)arg1 toPlayers:(id)arg2 dataMode:(long long)arg3 error:(id*)arg4;
- (bool)sendData:(id)arg1 toPlayers:(id)arg2 withDataMode:(long long)arg3 error:(id*)arg4;
- (bool)sendDataToAllPlayers:(id)arg1 withDataMode:(long long)arg2 error:(id*)arg3;
- (void)sendHostScoreAsQuery:(bool)arg1;
- (bool)sendInviteData:(id)arg1 error:(id*)arg2;
- (void)sendQueuedPacketsForPlayer:(id)arg1;
- (void)sendStateCallbackForPlayer:(id)arg1 state:(long long)arg2;
- (void)sendStateCallbackToDelegate:(id)arg1 forPlayer:(id)arg2 state:(long long)arg3;
- (void)sendVersionData:(unsigned char)arg1;
- (void)sendVersionData:(unsigned char)arg1 toPeer:(id)arg2;
- (id)session;
- (void)session:(id)arg1 connectionWithPeerFailed:(id)arg2 withError:(id)arg3;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (void)session:(id)arg1 initiateRelay:(id)arg2 forPeer:(id)arg3;
- (void)session:(id)arg1 networkStatisticsChanged:(id)arg2;
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;
- (void)session:(id)arg1 updateRelay:(id)arg2 forPeer:(id)arg3;
- (void)setChooseHostCompletion:(id /* block */)arg1;
- (void)setConnectedPlayerIDs:(id)arg1;
- (void)setConnection:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGuestConnections:(id)arg1;
- (void)setGuestSessions:(id)arg1;
- (void)setHostScoreForQuery:(bool)arg1;
- (void)setHostScores:(id)arg1;
- (void)setInviteDelegate:(id)arg1;
- (void)setNeedHostScore:(bool)arg1;
- (void)setNetworkStatistics:(id)arg1;
- (void)setOpponentIDs:(id)arg1;
- (void)setPacketSequenceNumber:(unsigned int)arg1;
- (void)setPlayerEventQueues:(id)arg1;
- (void)setPlayerPushTokens:(id)arg1;
- (void)setPlayersByIdentifier:(id)arg1;
- (void)setRecentlyBecameActive:(bool)arg1;
- (void)setReinvitedPlayers:(id)arg1;
- (void)setRematchCount:(long long)arg1;
- (void)setRematchID:(id)arg1;
- (void)setSelfBlob:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setStateChangeQueue:(id)arg1;
- (void)setVersion:(unsigned char)arg1;
- (bool)shouldStartRelay:(id)arg1;
- (id)stateChangeQueue;
- (void)updateRelayConnectionForPlayer:(id)arg1;
- (void)updateRelayInfo:(id)arg1 forPlayer:(id)arg2;
- (void)updateRelayInfoFromCallback:(id)arg1 forPlayer:(id)arg2;
- (void)updateRematchID;
- (void)updateStateForPlayer:(id)arg1 state:(long long)arg2;
- (unsigned char)version;
- (id)voiceChatWithName:(id)arg1;
- (void)withEventQueueForPlayer:(id)arg1 create:(id /* block */)arg2 perform:(id /* block */)arg3;
- (void)withEventQueueForPlayer:(id)arg1 createIfNeeded:(bool)arg2 perform:(id /* block */)arg3;
- (void)withEventQueueForPlayer:(id)arg1 perform:(id /* block */)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
