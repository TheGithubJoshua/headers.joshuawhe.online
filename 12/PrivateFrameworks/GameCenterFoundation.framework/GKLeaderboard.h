<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GKLeaderboard.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GameCenterFoundation.framework/GKLeaderboard.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GameCenterFoundation.framework/GameCenterFoundation (577.8)
 */

@interface GKLeaderboard : NSObject {
    GKLeaderboardInternal * _internal;
    int  _loadingCount;
    GKScore * _localPlayerScore;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    long long  _playerScope;
    NSArray * _players;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _range;
    NSArray * _scores;
    long long  _timeScope;
    <GKLeaderboardDelegate> * _weakDelegate;
}

@property (nonatomic, copy) NSString *category;
@property (nonatomic) <GKLeaderboardDelegate> *delegate;
@property (nonatomic, readonly) long long friendRank;
@property (nonatomic, readonly) long long friendRankCount;
@property (nonatomic, readonly, retain) NSString *groupIdentifier;
@property (nonatomic, copy) NSString *identifier;
@property (retain) GKLeaderboardInternal *internal;
@property (getter=isLoading, readonly) bool loading;
@property (nonatomic) int loadingCount;
@property (nonatomic, retain) GKScore *localPlayerScore;
@property (nonatomic, readonly, retain) NSString *localizedTitle;
@property (nonatomic) struct os_unfair_lock_s { unsigned int x1; } lock;
@property (nonatomic, readonly) unsigned long long maxRange;
@property (nonatomic, readonly) long long overallRank;
@property (nonatomic, readonly) long long overallRankCount;
@property (nonatomic) long long playerScope;
@property (nonatomic, retain) NSArray *players;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } range;
@property (nonatomic, retain) NSArray *scores;
@property (nonatomic) long long timeScope;
@property (nonatomic, readonly, copy) NSString *title;

// Image: /System/Library/PrivateFrameworks/GameCenterFoundation.framework/GameCenterFoundation

+ (id)instanceMethodSignatureForSelector:(SEL)arg1;
+ (bool)instancesRespondToSelector:(SEL)arg1;
+ (void)loadCategoriesWithCompletionHandler:(id /* block */)arg1;
+ (void)loadLeaderboardWithIdentifier:(id)arg1 forGame:(id)arg2 withPlayer:(id)arg3 withCompletionHandler:(id /* block */)arg4;
+ (void)loadLeaderboardsForGame:(id)arg1 forSet:(id)arg2 withPlayer:(id)arg3 withCompletionHandler:(id /* block */)arg4;
+ (void)loadLeaderboardsForGame:(id)arg1 withCompletionHandler:(id /* block */)arg2;
+ (void)loadLeaderboardsForGame:(id)arg1 withPlayer:(id)arg2 withCompletionHandler:(id /* block */)arg3;
+ (void)loadLeaderboardsWithCompletionHandler:(id /* block */)arg1;
+ (void)setDefaultLeaderboard:(id)arg1 withCompletionHandler:(id /* block */)arg2;

- (void)dealloc;
- (void)decrementLoadingCountAtomically;
- (id)delegate;
- (id)description;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (unsigned long long)hash;
- (void)incrementLoadingCountAtomically;
- (id)init;
- (id)initWithInternalRepresentation:(id)arg1;
- (id)initWithPlayerIDs:(id)arg1;
- (id)initWithPlayers:(id)arg1;
- (id)internal;
- (bool)isEqual:(id)arg1;
- (bool)isLoading;
- (void)loadScoresForGame:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)loadScoresForRequest:(id)arg1 handler:(id /* block */)arg2;
- (void)loadScoresWithCompletionHandler:(id /* block */)arg1;
- (int)loadingCount;
- (id)localPlayerScore;
- (struct os_unfair_lock_s { unsigned int x1; })lock;
- (id)methodSignatureForSelector:(SEL)arg1;
- (long long)playerScope;
- (id)players;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })range;
- (bool)respondsToSelector:(SEL)arg1;
- (id)scoreRequestForGame:(id)arg1;
- (id)scores;
- (void)setDelegate:(id)arg1;
- (void)setInternal:(id)arg1;
- (void)setLoadingCount:(int)arg1;
- (void)setLocalPlayerScore:(id)arg1;
- (void)setLock:(struct os_unfair_lock_s { unsigned int x1; })arg1;
- (void)setPlayerScope:(long long)arg1;
- (void)setPlayers:(id)arg1;
- (void)setRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setScores:(id)arg1;
- (void)setTimeScope:(long long)arg1;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;
- (long long)timeScope;
- (id)valueForUndefinedKey:(id)arg1;

// Image: /System/Library/PrivateFrameworks/GameCenterUI.framework/GameCenterUI

+ (id)localizedStringForTimeScope:(long long)arg1;

- (id)imageURL;
- (void)loadImageWithCompletionHandler:(id /* block */)arg1;
- (id)miniImageURL;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
