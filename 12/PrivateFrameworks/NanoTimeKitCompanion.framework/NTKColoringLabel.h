<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NTKColoringLabel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NanoTimeKitCompanion.framework/NTKColoringLabel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NanoTimeKitCompanion.framework/NanoTimeKitCompanion (1)
 */

@interface NTKColoringLabel : NTKLegibilityLabel <CLKUILabel, NTKColoringView, NTKTimeTravelState> {
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _cachedOpticalEdgeInsets;
    bool  _cachedOpticalEdgeInsetsIsValid;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedSingleLineSize;
    bool  _cachedSizeIsValid;
    _NTKColorManager * _colorManager;
    CLKDevice * _device;
    bool  _inTimeTravel;
    double  _maxWidth;
    id /* block */  _needsResizeHandler;
    id /* block */  _nowProvider;
    unsigned long long  _options;
    UIColor * _overrideColor;
    NSParagraphStyle * _paragraphStyle;
    CLKFont * _preTimeTravelFont;
    CLKTextProvider * _textProvider;
    CLKFont * _textProviderFont;
    CLKFont * _textProviderSmallCapsBaseFont;
    double  _tracking;
    struct NSNumber { Class x1; } * _updateToken;
    bool  _updatedAfterTimeTravelStateChange;
    bool  _uppercase;
    bool  _usesTextProviderSize;
    bool  _usesTextProviderTintColoring;
}

@property (nonatomic, readonly) double _lastLineBaseline;
@property (nonatomic, copy) NSAttributedString *attributedText;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } cachedOpticalEdgeInsets;
@property (nonatomic) bool cachedOpticalEdgeInsetsIsValid;
@property (nonatomic) struct CGSize { double x1; double x2; } cachedSingleLineSize;
@property (nonatomic) bool cachedSizeIsValid;
@property (nonatomic, retain) UIColor *color;
@property (nonatomic, readonly) UIColor *contentColor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIFont *font;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inTimeTravel;
@property (nonatomic) double maxWidth;
@property (nonatomic, copy) id /* block */ needsResizeHandler;
@property (nonatomic, copy) id /* block */ nowProvider;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } opticalInsets;
@property (nonatomic, readonly) unsigned long long options;
@property (nonatomic, retain) UIColor *overrideColor;
@property (nonatomic, copy) NSParagraphStyle *paragraphStyle;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) long long textAlignment;
@property (nonatomic, retain) UIColor *textColor;
@property (nonatomic, retain) CLKTextProvider *textProvider;
@property (nonatomic, retain) CLKFont *textProviderFont;
@property (nonatomic, retain) CLKFont *textProviderSmallCapsBaseFont;
@property (nonatomic) double tracking;
@property (nonatomic) bool uppercase;
@property (nonatomic) bool usesLegibility;
@property (nonatomic) bool usesTextProviderSize;
@property (nonatomic) bool usesTextProviderTintColoring;

+ (id)labelWithOptions:(unsigned long long)arg1;

- (void).cxx_destruct;
- (id)_activeFont;
- (double)_firstLineBaseline;
- (id)_font;
- (id)_fontWithMonospaceNumbers:(id)arg1;
- (double)_lastLineBaseline;
- (void)_requeryTextProviderAndNotify:(bool)arg1;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (void)_updateDynamicTracking;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })cachedOpticalEdgeInsets;
- (bool)cachedOpticalEdgeInsetsIsValid;
- (struct CGSize { double x1; double x2; })cachedSingleLineSize;
- (bool)cachedSizeIsValid;
- (id)color;
- (id)forwardingTargetForSelector:(SEL)arg1;
- (bool)inTimeTravel;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(unsigned long long)arg2;
- (void)invalidateCachedSize;
- (double)maxWidth;
- (double)minimumWidth;
- (double)minimumWithFont:(id)arg1;
- (double)minimumWithFont:(id)arg1 smallCapsBaseFont:(id)arg2;
- (id /* block */)needsResizeHandler;
- (id /* block */)nowProvider;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })opticalInsets;
- (unsigned long long)options;
- (id)overrideColor;
- (id)paragraphStyle;
- (void)setAttributedText:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCachedOpticalEdgeInsetsIsValid:(bool)arg1;
- (void)setCachedSingleLineSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCachedSizeIsValid:(bool)arg1;
- (void)setColor:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setInTimeTravel:(bool)arg1;
- (void)setMaxWidth:(double)arg1;
- (void)setNeedsResizeHandler:(id /* block */)arg1;
- (void)setNowProvider:(id /* block */)arg1;
- (void)setNumberOfLines:(long long)arg1;
- (void)setOverrideColor:(id)arg1;
- (void)setParagraphStyle:(id)arg1;
- (void)setShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setText:(id)arg1;
- (void)setTextProvider:(id)arg1;
- (void)setTextProviderFont:(id)arg1;
- (void)setTextProviderSmallCapsBaseFont:(id)arg1;
- (void)setTracking:(double)arg1;
- (void)setUppercase:(bool)arg1;
- (void)setUsesLegibility:(bool)arg1;
- (void)setUsesTextProviderSize:(bool)arg1;
- (void)setUsesTextProviderTintColoring:(bool)arg1;
- (void)setusesTextProviderTintColoring:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)sizeToFit;
- (id)textProvider;
- (id)textProviderFont;
- (id)textProviderSmallCapsBaseFont;
- (double)tracking;
- (bool)uppercase;
- (bool)usesLegibility:(bool)arg1;
- (bool)usesTextProviderSize;
- (bool)usesTextProviderTintColoring;
- (double)widthForMaxWidth:(double)arg1;
- (double)widthForMaxWidth:(double)arg1 withFont:(id)arg2;
- (double)widthForMaxWidth:(double)arg1 withFont:(id)arg2 smallCapsBaseFont:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
