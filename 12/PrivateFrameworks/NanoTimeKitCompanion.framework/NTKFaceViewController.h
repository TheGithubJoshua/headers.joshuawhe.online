<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NTKFaceViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NanoTimeKitCompanion.framework/NTKFaceViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NanoTimeKitCompanion.framework/NanoTimeKitCompanion (1)
 */

@interface NTKFaceViewController : UIViewController <NTKClockHardwareInput, NTKClockIconZoomAnimator, NTKComplicationPickerViewDataSource, NTKFaceEditViewDelegate, NTKFaceObserver, NTKFaceViewDelegate> {
    bool  _animatingVariant;
    NSCache * _appearanceVariantsCache;
    bool  _becomeLiveOnUnfreeze;
    long long  _dataMode;
    unsigned long long  _delayedAnimationValue;
    NTKDelayedBlock * _delayedFreezeBlock;
    <NTKFaceViewControllerDelegate> * _delegate;
    NSMutableDictionary * _detachedComplicationControllers;
    bool  _deviceLocked;
    NTKFaceEditView * _editView;
    bool  _editingComplications;
    NTKFace * _face;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _faceLaunchRect;
    NTKFaceView * _faceView;
    bool  _frozen;
    bool  _hasGoneLive;
    bool  _hasRemovedUnadornedSnapshot;
    bool  _hasUsedUnadornedSnapshot;
    NSCache * _informationVariantsCache;
    NSString * _lastTappedSlotIdentifier;
    bool  _newValueWhileAnimating;
    NSMutableDictionary * _normalComplicationControllers;
    NSDate * _pauseDate;
    NTKComplicationController * _pptComplicationController;
    NTKComplicationDisplayWrapperView * _pptComplicationDisplay;
    bool  _readyToApplyConfiguration;
    NSDate * _scrubDate;
    bool  _shouldShowSnapshot;
    bool  _showContentForUnadornedSnapshot;
    bool  _showsCanonicalContent;
    bool  _showsLockedUI;
    UIImageView * _snapshotView;
    UIViewController<NTKClockStatusBarViewController> * _statusBarViewController;
    bool  _supressesNonSnapshotUI;
    NSObject<OS_dispatch_source> * _time_travel_update_timer;
    bool  _wantsRemoveUnadorned;
    UIView * _zoomingContainerView;
    UIView * _zoomingIconCircleView;
    UIView * _zoomingIconTimeView;
}

@property (nonatomic) long long dataMode;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NTKFaceViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NTKFace *face;
@property (nonatomic, readonly) NTKFaceView *faceView;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSDate *pauseDate;
@property (nonatomic) bool shouldShowSnapshot;
@property (nonatomic) bool showContentForUnadornedSnapshot;
@property (nonatomic) bool showsCanonicalContent;
@property (nonatomic) bool showsLockedUI;
@property (nonatomic, retain) UIViewController<NTKClockStatusBarViewController> *statusBarViewController;
@property (readonly) Class superclass;
@property (nonatomic) bool supressesNonSnapshotUI;

+ (double)_complicationPickerAlphaForTransitionFraction:(double)arg1;
+ (void)initialize;

- (void).cxx_destruct;
- (void)PPTCleanupLastComplication;
- (void)PPTCreateComplication:(id)arg1 forSlot:(id)arg2 synchronously:(bool)arg3;
- (id)PPTDescriptionForComplication:(id)arg1;
- (void)PPTPrepareComplicationTest;
- (id)PPTUniqueComplicationsToSlotForCurrentFace;
- (void)_applyConfigurationWithDuration:(double)arg1;
- (void)_clearFaceLaunchRect;
- (void)_clearLastTappedComplication;
- (void)_configureBackgroundFillAlpha:(double)arg1 fromEditMode:(long long)arg2 toEditMode:(long long)arg3;
- (void)_configureForEditMode:(long long)arg1;
- (void)_configureForTransitionFraction:(double)arg1 fromEditMode:(long long)arg2 toEditMode:(long long)arg3;
- (void)_configureLisaForSelectedSlot:(id)arg1 editMode:(long long)arg2 animated:(bool)arg3;
- (void)_configureViewsForSelectedSlot:(id)arg1 editMode:(long long)arg2;
- (id)_controllerForComplication:(id)arg1 slot:(id)arg2;
- (id)_dailySnapshot;
- (id)_deactivatePickerViewForSlot:(id)arg1;
- (void)_defaultCleanupAfterZoom;
- (void)_defaultPrepareToZoomWithIconView:(id)arg1 minDiameter:(double)arg2 maxDiameter:(double)arg3;
- (void)_defaultSetZoomFraction:(double)arg1 iconDiameter:(double)arg2;
- (void)_endTransitionToValue:(long long)arg1 forEditMode:(long long)arg2;
- (void)_ensureComplication:(id)arg1 forSlot:(id)arg2;
- (void)_ensureDetachedComplication:(id)arg1;
- (void)_ensureNormalComplication:(id)arg1 forSlot:(id)arg2;
- (void)_ensureNotLive;
- (void)_ensurePauseDate;
- (id)_ensurePickerViewForSlot:(id)arg1;
- (void)_faceSnapshotDidChange:(id)arg1;
- (void)_handleDeviceLockChange;
- (bool)_handlePhysicalButton:(unsigned long long)arg1 event:(unsigned long long)arg2;
- (void)_handleStatusBarChange;
- (void)_insertDetachedComplicationDisplay:(id)arg1 controller:(id)arg2 forSlot:(id)arg3;
- (void)_insertNormalComplicationDisplay:(id)arg1 controller:(id)arg2 forSlot:(id)arg3;
- (id)_keylineLabelTextForOption:(id)arg1 customEditMode:(long long)arg2;
- (void)_loadInitialComplicationVisibilityFromFace;
- (id)_newNormalDisplayForComplicationController:(id)arg1 slot:(id)arg2;
- (void)_populateFaceViewEditOptionsFromFace;
- (void)_removeComplicationForSlot:(id)arg1;
- (void)_removeDetachedComplicationForSlot:(id)arg1 andDisconnectDisplay:(bool)arg2;
- (void)_removeNormalComplicationForSlot:(id)arg1 andDisconnectDisplay:(bool)arg2;
- (id)_selectedVisibleSlotForEditMode:(long long)arg1;
- (void)_setDataMode:(long long)arg1 becomeLiveOnUnfreeze:(bool)arg2;
- (void)_setFaceViewResourceDirectoryFromFace;
- (void)_setupEditViewForComplications;
- (void)_setupEditViewForCustomEditMode:(long long)arg1;
- (void)_setupEditViewForHiddenComplications;
- (void)_setupEditing;
- (bool)_shouldHideUI;
- (bool)_shouldShowComplicationPickerForSlot:(id)arg1;
- (void)_showStatusBarAfterWake;
- (void)_tearDownEditing;
- (void)_transitionFraction:(double)arg1 fromValue:(long long)arg2 toValue:(long long)arg3 forEditMode:(long long)arg4;
- (id)_unadornedSnapshot;
- (void)_updateComplicationLisaGesture;
- (void)_updateFaceAndViewWithOption:(id)arg1 forMode:(long long)arg2 resourcePath:(id)arg3 slot:(id)arg4;
- (void)_updateInteractivityOfComplicationDisplays;
- (bool)_wheelChangedWithEvent:(id)arg1;
- (void)_wrapperViewTapped:(id)arg1;
- (bool)becomeFirstResponder;
- (id)blurSourceImage;
- (bool)canBecomeFirstResponder;
- (bool)canStopEditing;
- (void)cleanupAfterOrb:(bool)arg1;
- (void)cleanupAfterZoom;
- (void)complicationPickerView:(id)arg1 getDisplay:(id*)arg2 controller:(id*)arg3 forComplication:(id)arg4;
- (id)complicationPickerView:(id)arg1 layoutRuleForComplicationDisplay:(id)arg2;
- (void)configureWithDuration:(double)arg1 block:(id /* block */)arg2;
- (id)currentOrderedComplicationApplicationIdentifiers;
- (id)customEditOptionContainerViewForComplicationPickerView:(id)arg1;
- (bool)dailySnapshotShowsComplication:(id)arg1 forSlot:(id)arg2;
- (long long)dataMode;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)disableSlowMode;
- (void)editView:(id)arg1 didScrollToFraction:(double)arg2 fromEditMode:(long long)arg3 toEditMode:(long long)arg4;
- (void)editView:(id)arg1 didStopAtEditMode:(long long)arg2;
- (void)editView:(id)arg1 didTapKeylineForKey:(id)arg2 editMode:(long long)arg3;
- (void)editView:(id)arg1 keylineDidBreathe:(double)arg2 forKey:(id)arg3 editMode:(long long)arg4;
- (void)editView:(id)arg1 keylineDidRubberBand:(double)arg2 forKey:(id)arg3 editMode:(long long)arg4;
- (void)editViewWillBeginScrolling:(id)arg1;
- (void)enableSlowMode;
- (void)enumerateComplicationControllersAndDisplaysWithBlock:(id /* block */)arg1;
- (id)face;
- (void)face:(id)arg1 didChangeOptionsForEditMode:(long long)arg2;
- (void)faceConfigurationDidChange:(id)arg1;
- (void)faceResourceDirectoryDidChange:(id)arg1;
- (id)faceView;
- (bool)faceView:(id)arg1 wantsToDismissPresentedViewControllerAnimated:(bool)arg2;
- (id)faceViewComplicationAppIdentifierForSlot:(id)arg1;
- (id)faceViewComplicationForSlot:(id)arg1;
- (bool)faceViewComplicationIsEmptyForSlot:(id)arg1;
- (id)faceViewComplicationSlots;
- (void)faceViewDidChangeVerticalPaddingForStatusBar;
- (void)faceViewDidChangeWantsStatusBarIconShadow;
- (void)faceViewDidHideOrShowComplicationSlot;
- (void)faceViewDidLayoutSubviews;
- (void)faceViewDidReloadSnapshotContentViews;
- (void)faceViewDidScrubToDate:(id)arg1 forced:(bool)arg2;
- (void)faceViewRequestedLaunchFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)faceViewUpdatedResourceDirectory:(id)arg1 wantsToTransferOwnership:(bool)arg2;
- (void)faceViewWantsComplicationKeylineFramesReloaded;
- (void)faceViewWantsCustomKeylineFramesReloadedForEditMode:(long long)arg1;
- (void)faceViewWantsStatusBarHidden:(bool)arg1 animated:(bool)arg2;
- (void)faceViewWantsToPresentViewController:(id)arg1;
- (void)faceViewWantsUnadornedSnapshotViewRemoved;
- (void)faceViewWillEnterTimeTravel;
- (void)faceViewWillExitTimeTravel;
- (void)faceViewWillUnloadSnapshotContentViews;
- (void)finalizeForSnapshotting:(id /* block */)arg1;
- (void)freeze;
- (void)freezeAfterDelay:(double)arg1;
- (void)getComplicationController:(id*)arg1 andDisplay:(id*)arg2 forSlot:(id)arg3;
- (void)handleOrdinaryScreenWake;
- (void)handleWristRaiseScreenWake;
- (void)hideFaceEditingUIAnimated:(bool)arg1;
- (void)hideFaceEditingUIAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (id)initWithFace:(id)arg1 configuration:(id /* block */)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })launchRectForComplicationApplicationIdentifier:(id)arg1;
- (void)loadView;
- (id)pauseDate;
- (void)performComplicationBackgroundDataRefresh;
- (void)performWristRaiseAnimation;
- (void)prepareForOrb;
- (void)prepareForSnapshotting;
- (void)prepareToZoomWithIconView:(id)arg1 minDiameter:(double)arg2 maxDiameter:(double)arg3;
- (void)prepareWristRaiseAnimation;
- (void)setDataMode:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setNextRenderIsFirstAfterWake;
- (void)setPauseDate:(id)arg1;
- (void)setShouldShowSnapshot:(bool)arg1;
- (void)setShowContentForUnadornedSnapshot:(bool)arg1;
- (void)setShowsCanonicalContent:(bool)arg1;
- (void)setShowsLockedUI:(bool)arg1;
- (void)setStatusBarViewController:(id)arg1;
- (void)setSupressesNonSnapshotUI:(bool)arg1;
- (void)setZoomFraction:(double)arg1 iconDiameter:(double)arg2;
- (bool)shouldLoadLiveFaceAtNextScreenOff;
- (bool)shouldShowSnapshot;
- (bool)showContentForUnadornedSnapshot;
- (void)showEditingUIAnimated:(bool)arg1;
- (bool)showsCanonicalContent;
- (bool)showsLockedUI;
- (id)statusBarViewController;
- (bool)supressesNonSnapshotUI;
- (void)unfreeze;
- (void)viewDidLayoutSubviews;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
