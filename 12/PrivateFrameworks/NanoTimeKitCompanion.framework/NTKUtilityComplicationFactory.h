<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NTKUtilityComplicationFactory.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NanoTimeKitCompanion.framework/NTKUtilityComplicationFactory.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NanoTimeKitCompanion.framework/NanoTimeKitCompanion (1)
 */

@interface NTKUtilityComplicationFactory : NSObject {
    bool  _accommodatesTwoTopComplications;
    long long  _bottomCenterLayout;
    double  _crownIndicatorGap;
    double  _dateHorizontalCenterOffset;
    double  _dateKeylineMaxWidth;
    double  _dateVerticalCenterOffset;
    <NTKUtilityComplicationFactoryDelegate> * _delegate;
    double  _deselectedKeylineCircularInnerPadding;
    double  _deselectedKeylineSideInnerPadding;
    double  _deselectedKeylineVerticalInnerPadding;
    CLKDevice * _device;
    double  _foregroundAlpha;
    double  _foregroundImageAlpha;
    double  _maxNormalLongWidth;
    struct CGSize { 
        double width; 
        double height; 
    }  _normalCircularPadding;
    double  _normalSidePadding;
    double  _normalVerticalPadding;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _screenEdgeInsets;
    double  _selectedKeylineHeight;
    double  _selectedKeylineSideInnerPadding;
}

@property (nonatomic) bool accommodatesTwoTopComplications;
@property (nonatomic) long long bottomCenterLayout;
@property (nonatomic) double crownIndicatorGap;
@property (nonatomic) double dateHorizontalCenterOffset;
@property (nonatomic) double dateKeylineMaxWidth;
@property (nonatomic) double dateVerticalCenterOffset;
@property (nonatomic) <NTKUtilityComplicationFactoryDelegate> *delegate;
@property (nonatomic) double deselectedKeylineCircularInnerPadding;
@property (nonatomic) double deselectedKeylineSideInnerPadding;
@property (nonatomic) double deselectedKeylineVerticalInnerPadding;
@property (nonatomic, readonly) CLKDevice *device;
@property (nonatomic) double foregroundAlpha;
@property (nonatomic) double foregroundImageAlpha;
@property (nonatomic) double maxNormalLongWidth;
@property (nonatomic) struct CGSize { double x1; double x2; } normalCircularPadding;
@property (nonatomic) double normalSidePadding;
@property (nonatomic) double normalVerticalPadding;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } screenEdgeInsets;
@property (nonatomic) double selectedKeylineHeight;
@property (nonatomic) double selectedKeylineSideInnerPadding;

+ (void)curvedCircleRadius:(double*)arg1 centerAngle:(double*)arg2 maxAngularWidth:(double*)arg3 circleCenter:(struct CGPoint { double x1; double x2; }*)arg4 interior:(bool*)arg5 forSlot:(long long)arg6 forDevice:(id)arg7;
+ (unsigned long long)placementForSlot:(long long)arg1;

- (void).cxx_destruct;
- (void)_configureBottomCenterLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 variant:(bool)arg3;
- (void)_configureBottomLeftLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 variant:(bool)arg3;
- (void)_configureBottomRightAboveLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_configureBottomRightBelowLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_configureBottomRightLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 variant:(bool)arg3;
- (void)_configureBottomRightLongLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_configureDateLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_configureLayout:(id)arg1 withNormalSize:(struct CGSize { double x1; double x2; })arg2 editingSize:(struct CGSize { double x1; double x2; })arg3 variant:(bool)arg4 addCircleOverrides:(bool)arg5 makeRuleBlock:(id /* block */)arg6;
- (void)_configureTopLeftLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 variant:(bool)arg3;
- (void)_configureTopRightAboveLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_configureTopRightBelowLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_configureTopRightLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 variant:(bool)arg3;
- (void)_configureUpNextTopRightLayout:(id)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_curvedImageForSlot:(long long)arg1 filled:(bool)arg2;
- (id)_curvedKeylineImageForSlot:(long long)arg1;
- (id)_curvedMaskImageForSlot:(long long)arg1;
- (double)_maxBottomCenterWidthLeavingRoomForKeylines:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_maxBottomCornerWidthLeavingRoomForKeylines:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_maxDateWidthLeavingRoomForKeylines;
- (double)_maxTopCornerWidthLeavingRoomForKeylines:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_maxWidthForKeylineAndPadding;
- (id)_viewForDateComplication:(id)arg1;
- (bool)accommodatesTwoTopComplications;
- (long long)bottomCenterLayout;
- (void)configureComplicationLayout:(id)arg1 forSlot:(long long)arg2 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)crownIndicatorGap;
- (id)curvedMaskForSlot:(long long)arg1;
- (double)dateHorizontalCenterOffset;
- (double)dateKeylineMaxWidth;
- (double)dateVerticalCenterOffset;
- (id)delegate;
- (double)deselectedKeylineCircularInnerPadding;
- (double)deselectedKeylineSideInnerPadding;
- (double)deselectedKeylineVerticalInnerPadding;
- (id)device;
- (double)foregroundAlpha;
- (double)foregroundAlphaForEditing:(bool)arg1;
- (double)foregroundAlphaForTransitionFraction:(double)arg1 fromEditMode:(long long)arg2 toEditMode:(long long)arg3;
- (double)foregroundImageAlpha;
- (double)foregroundImageAlphaForEditing:(bool)arg1;
- (double)foregroundImageAlphaForTransitionFraction:(double)arg1 fromEditMode:(long long)arg2 toEditMode:(long long)arg3;
- (id)initForDevice:(id)arg1;
- (double)keylineCornerRadiusForSlot:(long long)arg1;
- (unsigned long long)keylineLabelAlignmentForSlot:(long long)arg1;
- (id)keylineViewForSlot:(long long)arg1;
- (long long)layoutOverrideForComplicationType:(unsigned long long)arg1 inSlot:(long long)arg2;
- (double)maxNormalLongWidth;
- (id)newViewForComplication:(id)arg1 family:(long long)arg2 forSlot:(long long)arg3;
- (struct CGSize { double x1; double x2; })normalCircularPadding;
- (double)normalSidePadding;
- (double)normalVerticalPadding;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })screenEdgeInsets;
- (double)selectedKeylineHeight;
- (double)selectedKeylineSideInnerPadding;
- (void)setAccommodatesTwoTopComplications:(bool)arg1;
- (void)setBottomCenterLayout:(long long)arg1;
- (void)setCrownIndicatorGap:(double)arg1;
- (void)setDateHorizontalCenterOffset:(double)arg1;
- (void)setDateKeylineMaxWidth:(double)arg1;
- (void)setDateVerticalCenterOffset:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeselectedKeylineCircularInnerPadding:(double)arg1;
- (void)setDeselectedKeylineSideInnerPadding:(double)arg1;
- (void)setDeselectedKeylineVerticalInnerPadding:(double)arg1;
- (void)setForegroundAlpha:(double)arg1;
- (void)setForegroundImageAlpha:(double)arg1;
- (void)setMaxNormalLongWidth:(double)arg1;
- (void)setNormalCircularPadding:(struct CGSize { double x1; double x2; })arg1;
- (void)setNormalSidePadding:(double)arg1;
- (void)setNormalVerticalPadding:(double)arg1;
- (void)setScreenEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setSelectedKeylineHeight:(double)arg1;
- (void)setSelectedKeylineSideInnerPadding:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
