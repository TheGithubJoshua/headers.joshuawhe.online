<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPMLModelEvaluate.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CorePrediction.framework/CPMLModelEvaluate.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CorePrediction.framework/CorePrediction (1)
 */

@interface CPMLModelEvaluate : NSObject {
    struct CPMLDelegate { void *x1; void *x2; } * _cpmlDelegate;
    <CPMLAlgorithmProtocol> * _delegateAlgorithm;
    struct CPMLDelegateEngine { void *x1; void *x2; } * _delegateEngine;
    CPMLStorageManager * _storageManager;
    struct vector<int, std::__1::allocator<int> > { 
        int *__begin_; 
        int *__end_; 
        struct __compressed_pair<int *, std::__1::allocator<int> > { 
            int *__value_; 
        } __end_cap_; 
    }  boundedRemappedValues;
    int  countRows;
    struct CPMLAlgorithm { int (**x1)(); BOOL x2[32]; void *x3; struct CPMLCDB {} *x4; struct CPMLDelegate {} *x5; struct CPMLDelegateEngine {} *x6; struct CPMLTunableData {} *x7; struct CPMLIterator {} *x8; struct CPMLSerialization {} *x9; } * cpMLAlgo;
    struct CPMLRemapper { bool x1; bool x2; bool x3; struct sqlite3 {} *x4; struct CPMLStatistics {} *x5; struct vector<int, std::__1::allocator<int> > {} *x6; struct vector<int, std::__1::allocator<int> > {} *x7; } * cpRemapper;
    struct CPMLTunableData { int x1; void *x2; void *x3; } * cpTuneableData;
    CPMLSchema * cpmlSchema;
    struct sqlite3 { } * db;
    bool  enableCacheString;
    bool  keepInMemory;
    NSString * machineLearningAlgo;
    int  mapFunction;
    NSNumber * maxRemoveTrainingRow;
    NSMutableArray * modelSchema;
    NSString * serializeFunction;
    bool  shouldFail;
    struct CPMLSerialization { int (**x1)(); bool x2; int x3; int x4; void *x5; struct sqlite3 {} *x6; } * trainerCPDeSerializer;
    struct CPMLStatistics { struct vector<int, std::__1::allocator<int> > { int *x_1_1_1; int *x_1_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_1_1_3; } x1; struct vector<double, std::__1::allocator<double> > { double *x_2_1_1; double *x_2_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_2_1_3; } x2; struct vector<int, std::__1::allocator<int> > { int *x_3_1_1; int *x_3_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_3_1_3; } x3; struct vector<int, std::__1::allocator<int> > { int *x_4_1_1; int *x_4_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_4_1_3; } x4; struct vector<int, std::__1::allocator<int> > { int *x_5_1_1; int *x_5_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_5_1_3; } x5; int x6; int x7; int x8; int x9; bool x10; struct vector<double, std::__1::allocator<double> > { double *x_11_1_1; double *x_11_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_11_1_3; } x11; } * trainerCPStatistics;
    NSMutableArray * vectorPositions;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)boundResult:(id)arg1;
- (void)buildEvaluateMachineLearningAlgorithm;
- (void)constructVector:(struct CPMLFeatureVector { int x1; struct VectorClass { struct vector<int, std::__1::allocator<int> > {} *x_2_1_1; struct vector<double, std::__1::allocator<double> > {} *x_2_1_2; } x2; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_1_1; struct VectorClass {} *x_3_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_3_1_3; } x3; double x4; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_5_1_1; struct VectorClass {} *x_5_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_5_1_3; } x5; struct vector<ProbIndex, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_6_1_1; struct ProbIndex {} *x_6_1_2; struct __compressed_pair<ProbIndex *, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1 withColumnPosition:(unsigned long long)arg2 maxColNumber:(unsigned long long)arg3 withValue:(id)arg4;
- (void)dealloc;
- (id)doEvaluate:(struct CPMLFeatureVector { int x1; struct VectorClass { struct vector<int, std::__1::allocator<int> > {} *x_2_1_1; struct vector<double, std::__1::allocator<double> > {} *x_2_1_2; } x2; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_1_1; struct VectorClass {} *x_3_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_3_1_3; } x3; double x4; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_5_1_1; struct VectorClass {} *x_5_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_5_1_3; } x5; struct vector<ProbIndex, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_6_1_1; struct ProbIndex {} *x_6_1_2; struct __compressed_pair<ProbIndex *, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1 withBoundedList:(struct vector<int, std::__1::allocator<int> > { int *x1; int *x2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_1_1; } x3; }*)arg2;
- (void)doRemapToFeatureVector:(struct CPMLFeatureVector { int x1; struct VectorClass { struct vector<int, std::__1::allocator<int> > {} *x_2_1_1; struct vector<double, std::__1::allocator<double> > {} *x_2_1_2; } x2; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_1_1; struct VectorClass {} *x_3_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_3_1_3; } x3; double x4; struct vector<VectorClass, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_5_1_1; struct VectorClass {} *x_5_1_2; struct __compressed_pair<VectorClass *, std::__1::allocator<VectorClass> > { struct VectorClass {} *x_3_2_1; } x_5_1_3; } x5; struct vector<ProbIndex, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_6_1_1; struct ProbIndex {} *x_6_1_2; struct __compressed_pair<ProbIndex *, std::__1::allocator<ProbIndex> > { struct ProbIndex {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1 withPositionID:(unsigned long long)arg2 withMaxCol:(unsigned long long)arg3 withValue:(id)arg4;
- (id)evalArray:(id)arg1;
- (id)evalCTypesV:(char *)arg1;
- (id)evalDict:(id)arg1;
- (id)evalNSObjectV:(id)arg1;
- (id)evalString:(id)arg1;
- (id)fileProtectionClassRequest:(id)arg1;
- (int)getAttributeType:(id)arg1;
- (void*)getModelData;
- (id)initWithModel:(id)arg1 withPropertyList:(id)arg2;
- (void)setCPMLAlgorithm:(id)arg1;
- (void)setCPMLAlgorithmEngine:(id)arg1;
- (bool)updateModel:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
