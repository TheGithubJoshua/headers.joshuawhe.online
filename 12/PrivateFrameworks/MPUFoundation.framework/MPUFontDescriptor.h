<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPUFontDescriptor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MPUFoundation.framework/MPUFontDescriptor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MPUFoundation.framework/MPUFoundation (1)
 */

@interface MPUFontDescriptor : NSObject <NSCopying, NSMutableCopying> {
    MPULayoutInterpolator * _customFontPointSizeLayoutInterpolator;
    UIFont * _defaultFont;
    struct { 
        double ascender; 
        bool isAscenderInitialized; 
        double bodyLeading; 
        bool isBodyLeadingInitialized; 
        double capHeight; 
        bool isCapHeightInitialized; 
        double descender; 
        bool isDescenderInitialized; 
        double lineHeight; 
        bool isLineHeightInitialized; 
    }  _defaultFontMetrics;
    double  _defaultPointSizeAdjustment;
    long long  _leadingAdjustment;
    UIFont * _preferredFont;
    struct { 
        double ascender; 
        bool isAscenderInitialized; 
        double bodyLeading; 
        bool isBodyLeadingInitialized; 
        double capHeight; 
        bool isCapHeightInitialized; 
        double descender; 
        bool isDescenderInitialized; 
        double lineHeight; 
        bool isLineHeightInitialized; 
    }  _preferredFontMetrics;
    double  _systemFontSize;
    long long  _textStyle;
    bool  _usesCondensedMetrics;
    bool  _usesItalic;
    bool  _wantsMonospaceNumbers;
    long long  _weight;
}

@property (nonatomic, readonly) UIFont *defaultFont;
@property (nonatomic, readonly) double defaultFontLineHeight;
@property (nonatomic, readonly) double defaultPointSizeAdjustment;
@property (nonatomic, readonly) long long leadingAdjustment;
@property (nonatomic, readonly) UIFont *preferredFont;
@property (nonatomic, readonly) double preferredFontAscender;
@property (nonatomic, readonly) double preferredFontBodyLeading;
@property (nonatomic, readonly) double preferredFontCapHeight;
@property (nonatomic, readonly) double preferredFontDescender;
@property (nonatomic, readonly) double preferredFontLineHeight;
@property (nonatomic, readonly) double systemFontSize;
@property (nonatomic, readonly) long long textStyle;
@property (nonatomic, readonly) bool usesCondensedMetrics;
@property (nonatomic, readonly) bool usesItalic;
@property (nonatomic, readonly) bool wantsMonospaceNumbers;
@property (nonatomic, readonly) long long weight;

+ (id)_adjustedNativeFontDescriptorWithBaseNativeFontDescriptor:(id)arg1 forCustomTextStyle:(long long)arg2;
+ (id)_baseNativeTextStyleForTextStyle:(long long)arg1;
+ (id)_fontDescriptorWithTextStyle:(long long)arg1 leadingAdjustment:(long long)arg2 weight:(long long)arg3 systemFontSize:(double)arg4 defaultPointSizeAdjustment:(double)arg5;
+ (id)_fontPointSizeLayoutInterpolatorForTextStyle:(long long)arg1;
+ (void)_getNativeFontDescriptorSymbolicTraits:(unsigned int*)arg1 nativeTextStyleAttribute:(id*)arg2 forWeight:(long long)arg3 textStyle:(long long)arg4;
+ (double)_layoutInterpolatorReferenceMetricForContentSizeCategory:(id)arg1;
+ (unsigned int)_nativeFontDescriptorSymbolicTraitsForLeadingAdjustment:(long long)arg1;
+ (unsigned int)_nativeFontDescriptorSymbolicTraitsForUsingItalic:(bool)arg1 isCondensedMetrics:(bool)arg2;
+ (id)fontDescriptorWithSystemFontSize:(double)arg1;
+ (id)fontDescriptorWithSystemFontSize:(double)arg1 leadingAdjustment:(long long)arg2;
+ (id)fontDescriptorWithSystemFontSize:(double)arg1 leadingAdjustment:(long long)arg2 weight:(long long)arg3;
+ (id)fontDescriptorWithSystemFontSize:(double)arg1 weight:(long long)arg2;
+ (id)fontDescriptorWithTextStyle:(long long)arg1;
+ (id)fontDescriptorWithTextStyle:(long long)arg1 leadingAdjustment:(long long)arg2;
+ (id)fontDescriptorWithTextStyle:(long long)arg1 leadingAdjustment:(long long)arg2 weight:(long long)arg3;
+ (id)fontDescriptorWithTextStyle:(long long)arg1 leadingAdjustment:(long long)arg2 weight:(long long)arg3 defaultPointSizeAdjustment:(double)arg4;
+ (id)fontDescriptorWithTextStyle:(long long)arg1 weight:(long long)arg2;
+ (id)invalidationHandler;

- (void).cxx_destruct;
- (id)_defaultFontDescriptorForTextStyle:(long long)arg1;
- (id)_fontPointSizeLayoutInterpolator;
- (id)_fontWithBaseNativeFontDescriptorProvider:(id /* block */)arg1;
- (void)_handleFontDescriptorDidInvalidateCachedFontsAndMetricsNotification:(id)arg1;
- (void)_invalidateCachedFontsAndMetrics;
- (id)_preferredFontDescriptorForTextStyle:(long long)arg1;
- (void)_resetToDefaultValues;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)defaultFont;
- (double)defaultFontAscender;
- (double)defaultFontBodyLeading;
- (double)defaultFontCapHeight;
- (double)defaultFontDescender;
- (double)defaultFontLineHeight;
- (double)defaultPointSizeAdjustment;
- (id)description;
- (unsigned long long)hash;
- (id)init;
- (bool)isEqual:(id)arg1;
- (long long)leadingAdjustment;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)preferredFont;
- (double)preferredFontAscender;
- (double)preferredFontBodyLeading;
- (double)preferredFontCapHeight;
- (double)preferredFontDescender;
- (double)preferredFontLineHeight;
- (double)scaledValueForValue:(double)arg1;
- (double)systemFontSize;
- (long long)textStyle;
- (bool)usesCondensedMetrics;
- (bool)usesItalic;
- (bool)wantsMonospaceNumbers;
- (long long)weight;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
