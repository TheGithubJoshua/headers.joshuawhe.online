<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PCConnectionManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PersistentConnection.framework/PCConnectionManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PersistentConnection.framework/PersistentConnection (1.0)
 */

@interface PCConnectionManager : NSObject <PCCarrierBundleHelperDelegate, PCInterfaceMonitorDelegate> {
    bool  _alwaysWantsInterfaceChangeCallbacks;
    int  _connectionClass;
    int  _currentAddressFamily;
    int  _currentGrowthStage;
    double  _defaultPollingInterval;
    PCPersistentTimer * _delayTimer;
    <PCConnectionManagerDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    NSRunLoop * _delegateRunLoop;
    bool  _deviceUnderGoodCondition;
    bool  _disableEarlyFire;
    id  _duetContextRegistration;
    NSString * _duetIdentifier;
    bool  _enableNonCellularConnections;
    bool  _forceManualWhenRoaming;
    unsigned long long  _guidancePriority;
    bool  _hasStarted;
    bool  _inCallback;
    long long  _interfaceIdentifier;
    PCPersistentTimer * _intervalTimer;
    bool  _isInReconnectMode;
    bool  _isReachable;
    bool  _isRunning;
    double  _keepAliveGracePeriod;
    double  _lastElapsedInterval;
    int  _lastProcessedAction;
    double  _lastReachableTime;
    double  _lastReconnectTime;
    double  _lastResumeTime;
    <PCGrowthAlgorithm> * _lastScheduledGrowthAlgorithm;
    double  _lastScheduledIntervalTime;
    double  _lastStartTime;
    double  _lastStopTime;
    NSObject<OS_os_log> * _logObject;
    bool  _minimumIntervalFallbackEnabled;
    double  _nonCellularEarlyFireConstantInterval;
    double  _onTimeKeepAliveTime;
    int  _onlyAllowedStyle;
    bool  _onlyAllowedStyleSet;
    bool  _operatorMinimumIntervalFallbackAllowed;
    double  _pollingIntervalOverride;
    bool  _pollingIntervalOverrideSet;
    unsigned int  _powerAssertionID;
    bool  _powerOptimizationsForExpensiveNetworkingDisabled;
    int  _prefsChangedToken;
    int  _prefsStyle;
    int  _pushIsConnectedToken;
    unsigned int  _reconnectIteration;
    PCPersistentTimer * _reconnectWakeTimer;
    bool  _reconnectWithKeepAliveDelay;
    NSString * _serviceIdentifier;
    double  _timerGuidance;
    int  _timerGuidanceToken;
    <PCGrowthAlgorithm> * _wifiGrowthAlgorithm;
    <PCGrowthAlgorithm> * _wwanGrowthAlgorithm;
}

@property (nonatomic) bool alwaysWantsInterfaceChangeCallbacks;
@property (nonatomic, readonly) unsigned long long countOfGrowthActions;
@property (nonatomic) int currentAddressFamily;
@property (nonatomic, readonly) int currentGrowthStage;
@property (nonatomic, readonly) double currentKeepAliveInterval;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PCConnectionManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableEarlyFire;
@property (nonatomic, copy) NSString *duetIdentifier;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long interfaceIdentifier;
@property (nonatomic, readonly) bool isRunning;
@property (nonatomic) double keepAliveGracePeriod;
@property (nonatomic, readonly) int lastProcessedAction;
@property double maximumKeepAliveInterval;
@property (nonatomic) bool minimumIntervalFallbackEnabled;
@property (nonatomic) double minimumKeepAliveInterval;
@property (nonatomic) double nonCellularEarlyFireConstantInterval;
@property (nonatomic, readonly) double pollingInterval;
@property (nonatomic) bool powerOptimizationsForExpensiveNetworkingDisabled;
@property (readonly) Class superclass;

+ (bool)_isCachedKeepAliveIntervalStillValid:(double)arg1 date:(id)arg2;
+ (id)_keepAliveCachePath;
+ (Class)growthAlgorithmClass;
+ (id)intervalCacheDictionaries;

- (void).cxx_destruct;
- (void)_adjustInterfaceAssertions;
- (void)_adjustMinimumIntervalFallback;
- (void)_adjustPollTimerIfNecessary;
- (void)_callDelegateWithEventAndContext:(id)arg1;
- (void)_calloutWithEvent:(int)arg1 context:(id)arg2;
- (void)_clearTimers;
- (void)_clearTimersReleasingPowerAssertion:(bool)arg1;
- (id)_currentGrowthAlgorithm;
- (void)_delayTimerFired;
- (void)_deregisterForDeviceConditionsNotifications;
- (id)_getCachedWWANKeepAliveIntervalForAddressFamily:(int)arg1;
- (id)_growthAlgorithmOnInterface:(long long)arg1;
- (void)_handleDeviceConditionChangeCallback;
- (bool)_hasBudgetRemaining;
- (id)_initWithConnectionClass:(int)arg1 interfaceIdentifier:(long long)arg2 guidancePriority:(unsigned long long)arg3 delegate:(id)arg4 delegateQueue:(id)arg5 serviceIdentifier:(id)arg6;
- (void)_intervalTimerFired;
- (bool)_isPushConnected;
- (void)_loadPreferencesGeneratingEvent:(bool)arg1;
- (void)_pauseTimers;
- (void)_preferencesChanged;
- (void)_processDeviceConditionChanges;
- (void)_registerForDeviceConditionsNotifications;
- (void)_releasePowerAssertion;
- (void)_resolveStateWithAction:(int)arg1;
- (void)_saveWWANKeepAliveInterval;
- (void)_setMaximumKeepAliveInterval:(double)arg1 onInterface:(long long)arg2;
- (void)_setTimerGuidance:(double)arg1;
- (void)_setupKeepAliveForReconnect;
- (void)_setupTimerForPollForAdjustment:(bool)arg1;
- (void)_setupTimerForPushWithKeepAliveInterval:(double)arg1;
- (id)_stringForAction:(int)arg1;
- (id)_stringForAddressFamily:(int)arg1;
- (id)_stringForEvent:(int)arg1;
- (id)_stringForStyle:(int)arg1;
- (void)_takePowerAssertionWithTimeout:(double)arg1;
- (void)_validateActionForCurrentStyle:(int)arg1;
- (bool)alwaysWantsInterfaceChangeCallbacks;
- (void)cancelPollingIntervalOverride;
- (void)carrierBundleDidChange;
- (unsigned long long)countOfGrowthActions;
- (int)currentAddressFamily;
- (int)currentGrowthStage;
- (double)currentKeepAliveInterval;
- (int)currentStyle;
- (void)dealloc;
- (id)delegate;
- (bool)disableEarlyFire;
- (id)duetIdentifier;
- (id)initWithConnectionClass:(int)arg1 delegate:(id)arg2 delegateQueue:(id)arg3 serviceIdentifier:(id)arg4;
- (id)initWithConnectionClass:(int)arg1 delegate:(id)arg2 serviceIdentifier:(id)arg3;
- (id)initWithConnectionClass:(int)arg1 interfaceIdentifier:(long long)arg2 guidancePriority:(unsigned long long)arg3 delegate:(id)arg4 serviceIdentifier:(id)arg5;
- (long long)interfaceIdentifier;
- (void)interfaceLinkQualityChanged:(id)arg1 previousLinkQuality:(int)arg2;
- (void)interfaceManagerInHomeCountryStatusChanged:(id)arg1;
- (void)interfaceManagerInternetReachabilityChanged:(id)arg1;
- (void)interfaceManagerWWANInterfaceStatusChanged:(id)arg1;
- (bool)isRunning;
- (double)keepAliveGracePeriod;
- (int)lastProcessedAction;
- (double)maximumKeepAliveInterval;
- (bool)minimumIntervalFallbackEnabled;
- (double)minimumKeepAliveInterval;
- (double)nonCellularEarlyFireConstantInterval;
- (bool)operatorMinimumIntervalFallbackAllowed;
- (id)persistentInterfaceManager;
- (double)pollingInterval;
- (bool)powerOptimizationsForExpensiveNetworkingDisabled;
- (void)resumeManagerWithAction:(int)arg1;
- (void)resumeManagerWithAction:(int)arg1 forceGrow:(bool)arg2;
- (void)setAlwaysWantsInterfaceChangeCallbacks:(bool)arg1;
- (void)setCurrentAddressFamily:(int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableEarlyFire:(bool)arg1;
- (void)setDuetIdentifier:(id)arg1;
- (void)setEnableNonCellularConnections:(bool)arg1;
- (void)setInterfaceIdentifier:(long long)arg1;
- (void)setKeepAliveGracePeriod:(double)arg1;
- (void)setMaximumKeepAliveInterval:(double)arg1;
- (void)setMinimumIntervalFallbackEnabled:(bool)arg1;
- (void)setMinimumKeepAliveInterval:(double)arg1;
- (void)setNonCellularEarlyFireConstantInterval:(double)arg1;
- (void)setOnlyAllowedStyle:(int)arg1;
- (void)setOperatorMinimumIntervalFallbackAllowed:(bool)arg1;
- (void)setPollingIntervalOverride:(double)arg1;
- (void)setPowerOptimizationsForExpensiveNetworkingDisabled:(bool)arg1;
- (bool)shouldClientScheduleReconnectDueToFailure;
- (void)startManager;
- (void)stopAndResetManager;
- (void)stopManager;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
