<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_DKNetworkQualityMonitor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/KnowledgeMonitor.framework/_DKNetworkQualityMonitor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/KnowledgeMonitor.framework/KnowledgeMonitor (1)
 */

@interface _DKNetworkQualityMonitor : _DKMonitor <NWNetworkOfInterestManagerDelegate> {
    _CDContextualKeyPath * _discretionaryInvitedKeyPath;
    bool  _enabled;
    bool  _initialized;
    long long  _interfaceType;
    NWNetworkOfInterest * _noi;
    NSArray * _noiKeyPaths;
    NWNetworkOfInterestManager * _noiManager;
    NSObject<OS_dispatch_queue> * _noiManagerQueue;
    _CDContextualKeyPath * _predictedQualityKeyPath;
    long long  _previousQuality;
    _CDContextualKeyPath * _qualityKeyPath;
    NSMutableDictionary * _statusDictionary;
    _CDContextualKeyPath * _statusKeyPath;
}

@property (nonatomic, retain) _CDContextualKeyPath *discretionaryInvitedKeyPath;
@property (nonatomic) bool enabled;
@property (nonatomic) bool initialized;
@property (nonatomic) long long interfaceType;
@property (nonatomic, retain) NWNetworkOfInterest *noi;
@property (nonatomic, retain) NSArray *noiKeyPaths;
@property (nonatomic, retain) NWNetworkOfInterestManager *noiManager;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *noiManagerQueue;
@property (nonatomic, retain) _CDContextualKeyPath *predictedQualityKeyPath;
@property (nonatomic) long long previousQuality;
@property (nonatomic, retain) _CDContextualKeyPath *qualityKeyPath;
@property (nonatomic, retain) NSMutableDictionary *statusDictionary;
@property (nonatomic, retain) _CDContextualKeyPath *statusKeyPath;

+ (id)entitlements;

- (void).cxx_destruct;
- (void)didStartTrackingNOI:(id)arg1;
- (void)didStopTrackingAllNOIs:(id)arg1;
- (void)didStopTrackingNOI:(id)arg1;
- (id)discretionaryInvitedKeyPath;
- (bool)enabled;
- (id)initForInterfaceType:(long long)arg1 connectionStatusKeyPath:(id)arg2 qualityKeyPath:(id)arg3 predictedQualityKeyPath:(id)arg4 discretionaryInvitedPath:(id)arg5;
- (bool)initialized;
- (long long)interfaceType;
- (id)loadState;
- (id)noi;
- (id)noiKeyPaths;
- (id)noiManager;
- (id)noiManagerQueue;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)predictedQualityKeyPath;
- (id)predictionTimelineFromNOIPredictions:(id)arg1;
- (long long)previousQuality;
- (id)qualityKeyPath;
- (void)saveState;
- (void)setDiscretionaryInvitedKeyPath:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setInitialized:(bool)arg1;
- (void)setInterfaceType:(long long)arg1;
- (void)setNoi:(id)arg1;
- (void)setNoiKeyPaths:(id)arg1;
- (void)setNoiManager:(id)arg1;
- (void)setNoiManagerQueue:(id)arg1;
- (void)setPredictedQualityKeyPath:(id)arg1;
- (void)setPreviousQuality:(long long)arg1;
- (void)setQualityKeyPath:(id)arg1;
- (void)setStatusDictionary:(id)arg1;
- (void)setStatusKeyPath:(id)arg1;
- (void)start;
- (id)statusDictionary;
- (id)statusKeyPath;
- (void)stop;
- (void)synchronouslyReflectCurrentValue;
- (void)updateDiscretionaryTrafficInvited;
- (void)updateInstantQuality;
- (void)updatePowerCostDL;
- (void)updatePowerCostUL;
- (void)updatePredictionAsync;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
