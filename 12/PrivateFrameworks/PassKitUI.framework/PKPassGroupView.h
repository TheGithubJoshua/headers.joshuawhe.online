<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKPassGroupView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PassKitUI.framework/PKPassGroupView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI (1)
 */

@interface PKPassGroupView : UIView <PKGroupDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate, WLCardViewDelegate> {
    unsigned short  _animationCounter;
    bool  _canPan;
    NSMutableArray * _delayedAnimations;
    <PKPassGroupViewDelegate> * _delegate;
    UIViewController * _detailsVC;
    double  _dimmerValue;
    bool  _effectivePaused;
    unsigned short  _frontFaceContentModePinningCounter;
    PKPassView * _frontmostPassView;
    PKGroup * _group;
    bool  _groupWasMarkedDeleted;
    UIScrollView * _horizontalScrollView;
    bool  _invalidated;
    bool  _isAuthenticating;
    struct { 
        unsigned int showingPageControl : 1; 
        unsigned int scrollingEnabled : 1; 
        unsigned int indeterminateState : 1; 
        unsigned int fanningEnabled : 1; 
        unsigned int overridePriorContentOffset : 1; 
        unsigned int delegateOverridesFrontmostContentWhileStacked : 1; 
        unsigned int delegateOverridesFrontmostContentWhilePiled : 1; 
        unsigned int delegateOverridesAllowPanning : 1; 
        struct CGPoint { 
            double x; 
            double y; 
        } priorContentOffset; 
        struct CGPoint { 
            double x; 
            double y; 
        } instantaneousContentOffsetDelta; 
        unsigned long long numberOfPasses; 
        unsigned long long selectedIndex; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } bounds; 
    }  _layoutState;
    bool  _loaned;
    UILongPressGestureRecognizer * _longPressGestureRecognizer;
    bool  _modallyPresented;
    UIMotionEffectGroup * _motionEffectGroup;
    UIPageControl * _pageControl;
    unsigned short  _pageControlAnimationCounter;
    UIPanGestureRecognizer * _panGestureRecognizer;
    NSString * _passBeingPresented;
    bool  _passBeingPresentedWasDeleted;
    PKReusablePassViewQueue * _passViewQueue;
    NSMutableDictionary * _passViewsByUniqueID;
    bool  _paused;
    long long  _presentationState;
    UILongPressGestureRecognizer * _pressGestureRecognizer;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKPassGroupViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long displayIndex;
@property (nonatomic, retain) PKPassView *frontmostPassView;
@property (nonatomic, readonly) PKGroup *group;
@property (readonly) unsigned long long hash;
@property (getter=isLoaned, nonatomic) bool loaned;
@property (getter=isModallyPresented, nonatomic) bool modallyPresented;
@property (nonatomic, readonly) struct UIOffset { double x1; double x2; } offsetForFrontmostPassWhileStacked;
@property (nonatomic, readonly) UIPageControl *pageControl;
@property (nonatomic) PKReusablePassViewQueue *passViewQueue;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic) long long presentationState;
@property (nonatomic, readonly) UILongPressGestureRecognizer *pressGestureRecognizer;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_addDelayedAnimation:(id)arg1 toLayer:(id)arg2 withRemovalAction:(id /* block */)arg3;
- (void)_addPanAndLongPressGestureRecognizers;
- (void)_applyContentMode:(long long)arg1 toPassView:(id)arg2 animated:(bool)arg3;
- (void)_beginTrackingAnimation;
- (struct CGSize { double x1; double x2; })_contentSize;
- (long long)_defaultContentModeForIndex:(unsigned long long)arg1;
- (void)_endTrackingAnimation;
- (void)_enumerateIndicesInStackOrderWithHandler:(id /* block */)arg1;
- (void)_enumeratePassViewsInStackOrderWithHandler:(id /* block */)arg1;
- (void)_handleLongPress:(id)arg1;
- (void)_handlePanGesture:(id)arg1;
- (void)_handlePress:(id)arg1;
- (bool)_isOurGestureRecognizer:(id)arg1;
- (id)_loadCardViewForIndex:(unsigned long long)arg1 contentMode:(long long)arg2;
- (void)_pageControlChanged:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pagingFrameForCardView:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)_preparePageControlForReuse;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfPagingIndices;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfVisibleIndices;
- (void)_removeDelayedAnimationTrackerWithKey:(id)arg1;
- (void)_removeDelayedAnimations;
- (void)_removePanAndLongPressGestureRecognizers;
- (struct CGPoint { double x1; double x2; })_stackingPositionForPassViewLayer:(id)arg1 atStackIndex:(unsigned long long)arg2 withSeparation:(bool)arg3;
- (void)_updateCachedGroupState;
- (void)_updateCachedLayoutState;
- (void)_updateDelegateResponderCache;
- (void)_updateFrontmostPassViewIfNecessary;
- (void)_updateLoadedViews:(bool)arg1;
- (void)_updatePageControlVisibilityWithDelay:(double)arg1;
- (void)_updatePageControlWithDisplayIndex;
- (void)_updatePausedState;
- (void)applyContentModesAnimated:(bool)arg1;
- (void)beginPinningFrontFaceContentMode;
- (double)continuousShadowIndex;
- (void)dealloc;
- (id)delegate;
- (void)dismissBackOfPassIfNecessaryForUniqueID:(id)arg1;
- (unsigned long long)displayIndex;
- (void)endPinningFrontFaceContentMode;
- (id)frontmostPassView;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)group;
- (void)group:(id)arg1 didInsertPass:(id)arg2 atIndex:(unsigned long long)arg3;
- (void)group:(id)arg1 didMovePassFromIndex:(unsigned long long)arg2 toIndex:(unsigned long long)arg3;
- (void)group:(id)arg1 didRemovePass:(id)arg2 atIndex:(unsigned long long)arg3;
- (void)group:(id)arg1 didUpdatePass:(id)arg2 atIndex:(unsigned long long)arg3;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithGroup:(id)arg1 delegate:(id)arg2 presentationState:(long long)arg3;
- (void)invalidate;
- (bool)isLoaned;
- (bool)isModallyPresented;
- (bool)isPaused;
- (void)layoutPagesAnimated:(bool)arg1;
- (void)layoutStackAnimated:(bool)arg1;
- (void)layoutSubviews;
- (void)layoutSubviewsAnimated:(bool)arg1;
- (void)markGroupDeleted;
- (struct UIOffset { double x1; double x2; })offsetForFrontmostPassWhileStacked;
- (id)pageControl;
- (bool)passView:(id)arg1 deleteButtonEnabledForPass:(id)arg2;
- (void)passView:(id)arg1 deleteButtonPressedForPass:(id)arg2;
- (void)passView:(id)arg1 didPresentPassDetailsViewController:(id)arg2;
- (void)passView:(id)arg1 willPresentPassDetailsViewController:(id)arg2;
- (bool)passViewCanShowBarcode:(id)arg1;
- (id)passViewForIndex:(unsigned long long)arg1;
- (id)passViewQueue;
- (void)passViewTapped:(id)arg1;
- (void)passViewUpdateBarcodeVisibility:(id)arg1 animated:(bool)arg2;
- (void)presentDiff:(id)arg1 completion:(id /* block */)arg2;
- (void)presentPassWithUniqueID:(id)arg1;
- (void)presentPassWithUniqueID:(id)arg1 withContext:(id)arg2;
- (long long)presentationState;
- (id)pressGestureRecognizer;
- (void)removeFromSuperview;
- (void)resizePassViewForPass:(id)arg1 animated:(bool)arg2;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDimmer:(double)arg1 animated:(bool)arg2;
- (void)setFrontmostPassView:(id)arg1;
- (void)setFrontmostPassView:(id)arg1 withContext:(id)arg2;
- (void)setFrontmostPassViewFromPassIndex:(long long)arg1;
- (void)setFrontmostPassViewFromPassIndex:(long long)arg1 withContext:(id)arg2;
- (void)setLoaned:(bool)arg1;
- (void)setModallyPresented:(bool)arg1;
- (void)setPassViewQueue:(id)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPresentationState:(long long)arg1;
- (void)setPresentationState:(long long)arg1 animated:(bool)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)sizeToFit;
- (void)updatePageControlFrame;
- (void)updateToStackWithProgress:(double)arg1 originalPosition:(struct CGPoint { double x1; double x2; })arg2 timingFunction:(id /* block */)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
