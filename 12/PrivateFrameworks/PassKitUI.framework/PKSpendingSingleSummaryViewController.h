<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKSpendingSingleSummaryViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PassKitUI.framework/PKSpendingSingleSummaryViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI (1)
 */

@interface PKSpendingSingleSummaryViewController : UICollectionViewController <PKAccountServiceAccountResolutionControllerDelegate, PKPaymentDataProviderDelegate, PKSpendingSummaryFooterViewDelegate, PKSpendingSummaryResponder, UICollectionViewDelegateFlowLayout, UIGestureRecognizerDelegate> {
    PKAccount * _account;
    PKAccountService * _accountService;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInset;
    long long  _contentInsetAdjustmentBehavior;
    NSCalendar * _currentCalendar;
    PKSpendingSummaryFooterView * _currentFooter;
    NSArray * _currentMonthTransactions;
    NSDate * _endDate;
    unsigned long long  _feature;
    bool  _footerNeedsConfiguration;
    NSDateFormatter * _formatterDay;
    NSDateFormatter * _formatterFullMonth;
    NSDateFormatter * _formatterMonth;
    NSDateFormatter * _formatterMonthNoYear;
    NSDateFormatter * _formatterShortMonthNoYear;
    UIGestureRecognizer * _gestureRecognizerRequiredToFail;
    bool  _hasTransactions;
    bool  _isLowEndDevice;
    PKSpendingSummaryLayout * _layout;
    NSString * _navTitle;
    PKPaymentPass * _paymentPass;
    PKAccountServiceAccountResolutionController * _resolutionController;
    PKDashboardFooterTextView * _sampleFooterView;
    PKDashboardTitleHeaderView * _sampleHeaderView;
    <PKSpendingSingleSummaryViewControllerDelegate> * _scrollingDelegate;
    unsigned long long  _selectionType;
    NSDate * _startDate;
    PKSpendingSummary * _summary;
    PKSpendingSummaryPresenter * _summaryPresenter;
    unsigned long long  _summaryType;
    PKTransactionGroupItemPresenter * _transactionGroupPresenter;
    double  _transitionAlpha;
    NSArray * _upcomingScheduledPayments;
    bool  _visible;
}

@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInset;
@property (nonatomic) long long contentInsetAdjustmentBehavior;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIGestureRecognizer *gestureRecognizerRequiredToFail;
@property (readonly) unsigned long long hash;
@property (nonatomic) <PKSpendingSingleSummaryViewControllerDelegate> *scrollingDelegate;
@property (nonatomic) unsigned long long selectionType;
@property (nonatomic, readonly) PKSpendingSummary *summary;
@property (readonly) Class superclass;
@property (getter=isVisible, nonatomic) bool visible;

- (void).cxx_destruct;
- (void)_accountsChanged:(id)arg1;
- (unsigned long long)_aggregateCellAtIndex:(unsigned long long)arg1;
- (void)_applyMaskToCell:(id)arg1 firstInSection:(bool)arg2 lastInSection:(bool)arg3;
- (void)_configureFooter;
- (void)_configureFooterView:(id)arg1 inSection:(unsigned long long)arg2;
- (void)_configureHeaderView:(id)arg1 inSection:(unsigned long long)arg2;
- (bool)_hasFooterForSection:(unsigned long long)arg1;
- (bool)_hasHeaderForSection:(unsigned long long)arg1;
- (void)accountServiceAccountResolutionController:(id)arg1 requestsDismissCurrentViewControllerAnimated:(bool)arg2;
- (void)accountServiceAccountResolutionController:(id)arg1 requestsPresentViewController:(id)arg2 animated:(bool)arg3;
- (void)buttonTappedInFooterView:(id)arg1;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 referenceSizeForFooterInSection:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 referenceSizeForHeaderInSection:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (bool)collectionView:(id)arg1 shouldHighlightItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 viewForSupplementaryElementOfKind:(id)arg2 atIndexPath:(id)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInset;
- (long long)contentInsetAdjustmentBehavior;
- (void)dealloc;
- (id)footer;
- (bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (id)gestureRecognizerRequiredToFail;
- (id)indexPathForSummary;
- (id)initWithPaymentPass:(id)arg1 account:(id)arg2 transactionGroupPresenter:(id)arg3 summaryPresenter:(id)arg4 currentMonthTransactions:(id)arg5 upcomingScheduledPayments:(id)arg6;
- (bool)isVisible;
- (id)navigationTitle;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (id)scrollingDelegate;
- (unsigned long long)selectionType;
- (void)setAlphaForTransition:(double)arg1;
- (void)setContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentInsetAdjustmentBehavior:(long long)arg1;
- (void)setGestureRecognizerRequiredToFail:(id)arg1;
- (void)setScrollingDelegate:(id)arg1;
- (void)setSelectionType:(unsigned long long)arg1;
- (void)setSummary:(id)arg1 swap:(bool)arg2;
- (void)setVisible:(bool)arg1;
- (id)summary;
- (void)traitCollectionDidChange:(id)arg1;
- (void)viewDidLoad;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
