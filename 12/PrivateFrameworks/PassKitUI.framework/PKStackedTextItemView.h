<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKStackedTextItemView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PassKitUI.framework/PKStackedTextItemView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI (1)
 */

@interface PKStackedTextItemView : UIView {
    bool  _animated;
    struct CGSize { 
        double width; 
        double height; 
    }  _boundsSize;
    PKStackedTextItem * _content;
    struct { 
        struct CGSize { 
            double width; 
            double height; 
        } boundingSize; 
        struct { 
            struct CGRect { 
                struct CGPoint { 
                    double x; 
                    double y; 
                } origin; 
                struct CGSize { 
                    double width; 
                    double height; 
                } size; 
            } frame; 
            bool widthConstrained; 
        } textMetrics[4]; 
    }  _contentConstraints;
    UIFont * _idealPrimaryFont;
    UIFont * _idealSecondaryFont;
    UIFont * _idealTertiaryFont;
    UIFont * _idealTitleFont;
    UIFont * _layoutPrimaryFont;
    UILabel * _primary;
    UIFont * _primaryFont;
    UILabel * _secondary;
    UIFont * _significantPrimaryFont;
    NSMutableSet * _snapshots;
    long long  _style;
    UILabel * _tertiary;
    long long  _textAlignment;
    UILabel * _title;
}

@property (nonatomic, copy) PKStackedTextItem *content;
@property (nonatomic) struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_2_1_1; bool x_2_1_2; } x2[4]; } contentConstraints;
@property (nonatomic, readonly) long long style;
@property (nonatomic) long long textAlignment;

- (void).cxx_destruct;
- (id)_attributedStringWithText:(id)arg1 strikethrough:(bool)arg2;
- (double)_prepareViewForReuse:(id)arg1;
- (struct { double x1; double x2; double x3; double x4; double x5; double x6; bool x7; double x8; double x9; bool x10; double x11; double x12; })_titleFontMetrics;
- (void)_updateAlignmentAnimated:(bool)arg1;
- (void)_updateSubviewsAnimated:(bool)arg1;
- (struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_2_1_1; bool x_2_1_2; } x2[4]; })boundingMetricForWidth:(double)arg1;
- (id)content;
- (struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_2_1_1; bool x_2_1_2; } x2[4]; })contentConstraints;
- (double)headerPadding;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithStyle:(long long)arg1;
- (void)layoutIfNeededAnimated:(bool)arg1;
- (void)layoutSubviews;
- (void)prepareForReuse;
- (void)setContent:(id)arg1;
- (void)setContent:(id)arg1 animated:(bool)arg2;
- (void)setContentConstraints:(struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct { struct CGRect { struct CGPoint { double x_1_3_1; double x_1_3_2; } x_1_2_1; struct CGSize { double x_2_3_1; double x_2_3_2; } x_1_2_2; } x_2_1_1; bool x_2_1_2; } x2[4]; })arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTextAlignment:(long long)arg1 animated:(bool)arg2;
- (long long)style;
- (long long)textAlignment;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
