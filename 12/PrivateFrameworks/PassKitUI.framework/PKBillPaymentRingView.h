<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKBillPaymentRingView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PassKitUI.framework/PKBillPaymentRingView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI (1)
 */

@interface PKBillPaymentRingView : UIView <PKRenderLoopDelegate, UIGestureRecognizerDelegate> {
    double  _amountRoundingUnit;
    struct { 
        double target; 
        double position; 
        double velocity; 
        double positionThreshold; 
        double velocityThreshold; 
        bool running; 
    }  _angleState;
    PKCurvedTextLabel * _bottomCurvedTextLabel;
    NSDictionary * _colorStops;
    <PKBillPaymentRingViewDataSource> * _dataSource;
    <PKBillPaymentRingViewDelegate> * _delegate;
    NSDecimalNumber * _displayAmount;
    bool  _dotsVisible;
    long long  _dragCapture;
    UIPanGestureRecognizer * _dragRecognizer;
    bool  _dragging;
    PKEnterCurrencyAmountView * _enterCurrencyAmountView;
    UISelectionFeedbackGenerator * _feedbackGenerator;
    PKBillPaymentCircularView * _handleView;
    PKBillPaymentSuggestedAmount * _highlightedSuggestedAmount;
    bool  _ignoreTouches;
    NSDecimalNumber * _initialDisplayAmount;
    UILabel * _interestLabel;
    double  _interestLabelAlpha;
    bool  _isSmall;
    double  _lastDrawTime;
    double  _maximumPaymentAmount;
    double  _minimumPaymentAmount;
    bool  _needsInitialDisplay;
    double  _overrideGradientStartAngle;
    PKBillPaymentRingGradientState * _overrideGradientState;
    NSDecimalNumber * _pinnedAmount;
    double  _pinnedAmountAngle;
    unsigned long long  _pinnedAmountAngleIndex;
    UILongPressGestureRecognizer * _pressRecognizer;
    bool  _pressed;
    PKRenderLoop * _renderLoop;
    struct { 
        double mass; 
        double stiffness; 
        double damping; 
        double beta; 
        double omega0; 
        double scratch; 
        bool dirty; 
    }  _responseSpring;
    double  _responseSpringElapsedDuration;
    struct { 
        double target; 
        double position; 
        double velocity; 
        double positionThreshold; 
        double velocityThreshold; 
        bool running; 
    }  _responseState;
    PKRingGradientView * _ringView;
    struct { 
        double mass; 
        double stiffness; 
        double damping; 
        double beta; 
        double omega0; 
        double scratch; 
        bool dirty; 
    }  _scaleSpring;
    struct { 
        double target; 
        double position; 
        double velocity; 
        double positionThreshold; 
        double velocityThreshold; 
        bool running; 
    }  _scaleState;
    unsigned long long  _screenType;
    PKBillPaymentSuggestedAmount * _selectedSuggestedAmount;
    bool  _selectedSuggestedAmountIsTarget;
    struct { 
        double mass; 
        double stiffness; 
        double damping; 
        double beta; 
        double omega0; 
        double scratch; 
        bool dirty; 
    }  _spring;
    NSDictionary * _standardRingStates;
    NSArray * _suggestedAmountAngles;
    PKBillPaymentSuggestedAmountList * _suggestedAmountList;
    NSArray * _suggestedAmountViews;
    NSDictionary * _suggestedAmountsForAngle;
    NSDictionary * _suggestedAmoutImages;
    UITapGestureRecognizer * _tapRecognizer;
    PKCurvedTextLabel * _topCurvedTextLabel;
}

@property (nonatomic, readonly, copy) NSDecimalNumber *amount;
@property (nonatomic, readonly, copy) UIColor *currentEndColor;
@property (nonatomic, readonly, copy) UIColor *currentStartColor;
@property (nonatomic) <PKBillPaymentRingViewDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKBillPaymentRingViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isSmall;
@property (nonatomic, readonly) double ringWidth;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double targetAngle;

- (void).cxx_destruct;
- (double)_amountLabelMaximumFontSize;
- (double)_angleForAmount:(id)arg1;
- (double)_angleForAngleIndex:(unsigned long long)arg1;
- (double)_angleForPosition:(struct CGPoint { double x1; double x2; })arg1;
- (double)_angleForRecognizer:(id)arg1;
- (id)_blendFromGradientState:(id)arg1 toState:(id)arg2 withProgress:(double)arg3;
- (id)_blendFromLinearColor:(id)arg1 toLinearColor:(id)arg2 withProgress:(double)arg3;
- (struct CGPoint { double x1; double x2; })_center;
- (struct CGPoint { double x1; double x2; })_centerPointAtAngle:(double)arg1;
- (void)_createStandardColors;
- (void)_createSuggestedAmountAngles;
- (void)_createSuggestedAmountRingColorStops;
- (void)_createSuggestedAmountsImageDictionary;
- (void)_dragEnded:(id)arg1;
- (void)_dragMoved:(id)arg1;
- (void)_dragMovedToAngle:(double)arg1 normalizedRadius:(double)arg2;
- (void)_dragRecognizerChanged:(id)arg1;
- (void)_dragStarted:(id)arg1;
- (id)_gradientStateForSuggestedAmount:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_insetBounds;
- (bool)_isAmount:(id)arg1 withinRoundingUnitOfAmount:(id)arg2;
- (double)_offsetAngle:(double)arg1;
- (double)_offsetCurrentAngle;
- (void)_pauseRenderLoop;
- (bool)_preferredPausedState;
- (void)_pressRecognized:(id)arg1;
- (double)_ringWidth;
- (id)_roundedAmountForAngle:(double)arg1;
- (unsigned long long)_segmentEndAngleIndexForAngle:(double)arg1;
- (bool)_setDisplayAmount:(id)arg1;
- (void)_setDotsVisible:(bool)arg1 animated:(bool)arg2;
- (void)_setHighlightedSuggestedAmount:(id)arg1;
- (void)_setResponse:(double)arg1;
- (void)_setSelectedSuggestedAmount:(id)arg1;
- (id)_suggestedAmountForAngleIndex:(unsigned long long)arg1;
- (id)_suggestedAmountImageForSuggestedAmount:(id)arg1;
- (void)_tapRecognized:(id)arg1;
- (id)_targetGradientStateForAngle:(double)arg1;
- (unsigned long long)_unnormalizedAngleIndexForAngle:(double)arg1;
- (void)_updateHandleImage;
- (void)_updateInterestText;
- (void)_updatePausedState;
- (void)_updateScaleTarget;
- (id)amount;
- (void)completeInitialDisplayAnimated:(bool)arg1;
- (id)currentEndColor;
- (id)currentStartColor;
- (id)dataSource;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToWindow;
- (void)didUpdateAngleSpringPosition;
- (void)didUpdateAngleSpringTarget;
- (void)didUpdateScaleSpringPosition;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithSuggestedAmountList:(id)arg1 delegate:(id)arg2 dataSource:(id)arg3;
- (bool)isSmall;
- (void)layoutSubviews;
- (void)prepareForInitialDisplayWithAmount:(id)arg1;
- (void)renderLoop:(id)arg1 drawAtTime:(double)arg2;
- (struct CGSize { double x1; double x2; })ringSizeWhenIsSmall:(bool)arg1;
- (double)ringWidth;
- (void)setAmount:(id)arg1 animated:(bool)arg2;
- (void)setAngle:(double)arg1 animated:(bool)arg2 forExplicitAmount:(id)arg3 userInitiated:(bool)arg4;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHandleScale:(double)arg1 animated:(bool)arg2;
- (void)setIsSmall:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })smallRingSize;
- (double)targetAngle;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
