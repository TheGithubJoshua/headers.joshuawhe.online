<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PGPictureInPictureViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Pegasus.framework/PGPictureInPictureViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Pegasus.framework/Pegasus (111.14)
 */

@interface PGPictureInPictureViewController : UIViewController <PGPictureInPictureControlsViewControllerDelegate> {
    PGPictureInPictureApplication * _application;
    bool  _canStartShowingChrome;
    UIView * _containerView;
    <PGPictureInPictureViewControllerContentContainer> * _contentContainer;
    PGLayerHostView * _contentView;
    long long  _controlsStyle;
    PGPictureInPictureControlsViewController * _controlsViewController;
    <PGPictureInPictureViewControllerDelegate> * _delegate;
    struct { 
        unsigned int pictureInPictureViewController_updateHostedWindowSize_animationType_initialSpringVelocity : 1; 
        unsigned int pictureInPictureViewControllerHostedWindowSizeChangeBegan : 1; 
        unsigned int pictureInPictureViewControllerHostedWindowSizeChangeEnded : 1; 
        unsigned int pictureInPictureViewControllerStopButtonTapped : 1; 
        unsigned int pictureInPictureViewControllerActionButtonTapped : 1; 
        unsigned int pictureInPictureViewControllerCancelButtonTapped : 1; 
    }  _delegateRespondsTo;
    PGHostedWindowHostingHandle * _hostedWindowHostingHandle;
    bool  _initialLayerFrameIsNull;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _layerHostTransform;
    NSArray * _loadedTimeRanges;
    PGLoadingIndicatorView * _loadingIndicatorView;
    PGPlaybackProgress * _playbackProgress;
    struct CGSize { 
        double width; 
        double height; 
    }  _preferredContentSize;
    bool  _showsAlternateActionButtonImage;
    bool  _showsLoadingIndicator;
    long long  _stashState;
    PGStashedView * _stashedView;
    UIView * _styleViewAbove;
    UIView * _styleViewBelow;
    id /* block */  _waitForUIFinalizationCompletionBlock;
}

@property (nonatomic, readonly) PGPictureInPictureApplication *application;
@property (nonatomic) bool canStartShowingChrome;
@property (nonatomic) <PGPictureInPictureViewControllerContentContainer> *contentContainer;
@property (nonatomic, readonly) UIView *contentContainerView;
@property (nonatomic, readonly) long long controlsStyle;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PGPictureInPictureViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PGHostedWindowHostingHandle *hostedWindowHostingHandle;
@property (nonatomic, retain) NSArray *loadedTimeRanges;
@property (nonatomic, retain) PGPlaybackProgress *playbackProgress;
@property (nonatomic) bool showsAlternateActionButtonImage;
@property (nonatomic) bool showsLoadingIndicator;
@property (nonatomic) long long stashState;
@property (readonly) Class superclass;
@property (nonatomic, copy) id /* block */ waitForUIFinalizationCompletionBlock;

+ (void)animateViewWithAnimationType:(long long)arg1 initialSpringVelocity:(double)arg2 animations:(id /* block */)arg3 completion:(id /* block */)arg4;
+ (double)contentViewCornerRadius;

- (void).cxx_destruct;
- (void)_handleTapGestureRecognizer:(id)arg1;
- (void)_performStartAnimationWithCompletionHandler:(id /* block */)arg1;
- (void)_performStopAnimationWithFinalInterfaceOrientation:(long long)arg1 finalLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)_stopShowingControlsAnimated:(bool)arg1;
- (void)acquireInterfaceOrientationLock;
- (id)application;
- (bool)canStartShowingChrome;
- (id)contentContainer;
- (id)contentContainerView;
- (long long)controlsStyle;
- (void)dealloc;
- (id)delegate;
- (id)hostedWindowHostingHandle;
- (void)hostedWindowSizeChangeBegan;
- (void)hostedWindowSizeChangeEnded;
- (id)initWithApplication:(id)arg1 controlsStyle:(long long)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)loadView;
- (id)loadedTimeRanges;
- (void)performResumeAnimationWithCompletionHandler:(id /* block */)arg1;
- (void)performRotateAnimationWithRotation:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)performStartAnimated:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)performStopAnimated:(bool)arg1 withFinalInterfaceOrientation:(long long)arg2 finalLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)performSuspendAnimationWithCompletionHandler:(id /* block */)arg1;
- (void)pictureInPictureControlsViewControllerActionButtonTapped:(id)arg1;
- (void)pictureInPictureControlsViewControllerCancelButtonTapped:(id)arg1;
- (bool)pictureInPictureControlsViewControllerShouldHandleDoubleTapGesture:(id)arg1;
- (bool)pictureInPictureControlsViewControllerShouldHandleTapGesture:(id)arg1;
- (void)pictureInPictureControlsViewControllerStopButtonTapped:(id)arg1;
- (id)playbackProgress;
- (struct CGSize { double x1; double x2; })preferredContentSize;
- (void)prepareStartAnimationWithInitialInterfaceOrientation:(long long)arg1 initialLayerFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 completionHandler:(id /* block */)arg3;
- (void)prepareStopAnimationWithCompletionHandler:(id /* block */)arg1;
- (void)relinquishInterfaceOrientationLock;
- (void)setCanStartShowingChrome:(bool)arg1;
- (void)setContentContainer:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHostedWindowHostingHandle:(id)arg1;
- (void)setLoadedTimeRanges:(id)arg1;
- (void)setPlaybackProgress:(id)arg1;
- (void)setPreferredContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setShowsAlternateActionButtonImage:(bool)arg1;
- (void)setShowsLoadingIndicator:(bool)arg1;
- (void)setStashState:(long long)arg1;
- (void)setStashState:(long long)arg1 animated:(bool)arg2;
- (void)setWaitForUIFinalizationCompletionBlock:(id /* block */)arg1;
- (void)showChrome:(bool)arg1 animated:(bool)arg2;
- (bool)showsAlternateActionButtonImage;
- (bool)showsLoadingIndicator;
- (long long)stashState;
- (void)updateHostedWindowSize:(struct CGSize { double x1; double x2; })arg1;
- (void)updateLayerHostTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (id /* block */)waitForUIFinalizationCompletionBlock;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
