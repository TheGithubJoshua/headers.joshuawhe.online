/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSKAccessController : NSObject {
    NSCondition * _cond;
    TSUWeakReference * _delegate;
    unsigned int  _outstandingTicketCount;
    NSObject<OS_dispatch_semaphore> * _outstandingTicketReadLock;
    NSMutableArray * _pendingPrimaryThreadBlocks;
    NSThread * _primaryThread;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _primaryThreadIVarLock;
    struct __CFRunLoopSource { } * _primaryThreadPingSource;
    _Atomic unsigned int  _primaryThreadQualityOfServiceClass;
    struct { 
        unsigned int useCount; 
        id ticket; 
    }  _primaryThreadTicketInfo;
    unsigned long long  _primaryThreadWriteCount;
    unsigned int  _readerCount;
    struct { 
        struct _opaque_pthread_t {} *threadId; 
        unsigned int count; 
        struct { 
            unsigned int useCount; 
            id ticket; 
        } ticketInfo; 
    }  _readerInfo;
    _Atomic struct __CFRunLoop {} * _runLoop;
    _Atomic long long  _runLoopReadCount;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  _rwLock;
    bool  _secondaryThreadWriting;
    NSMutableDictionary * _signalIdentifiers;
    bool  _thenReadingOnPrimaryThread;
    NSMutableDictionary * _waitIdentifiers;
    unsigned long long  _writeBlockedPrimaryThreadCount;
    bool  _writeLockHeld;
    NSMutableArray * _writerQueue;
}

@property (readonly) bool hasRead;
@property (readonly) bool hasWrite;
@property (readonly) bool isPrimaryThread;
@property (readonly) NSThread *primaryThread;
@property (readonly) unsigned int primaryThreadQualityOfServiceClass;
@property struct __CFRunLoop { }*runLoop;

- (void)assertHasRead;
- (void)assertHasReadOrWrite;
- (void)assertHasWrite;
- (void)dealloc;
- (bool)hasRead;
- (bool)hasWrite;
- (void)i_finishReadForTicket:(id)arg1;
- (void)i_startReadForTicket:(id)arg1;
- (id)init;
- (id)initWithDelegate:(id)arg1;
- (id)initWithPrimaryRunloop:(struct __CFRunLoop { }*)arg1 delegate:(id)arg2;
- (bool)isPrimaryThread;
- (void)p_asyncPerformBlockOnPrimaryThread:(id /* block */)arg1;
- (void)p_blockPrimaryThread;
- (void)p_blockPrimaryThreadForWrite;
- (void)p_dequeueWrite;
- (void)p_didAcquireReadLock;
- (void)p_didAcquireWriteLock;
- (void)p_enqueueWriteAndBlockAllowingPendingWrites:(bool)arg1;
- (void)p_finishReadForTicketInfo:(struct { unsigned int x1; id x2; }*)arg1;
- (void)p_flushPendingPrimaryThreadBlocksQueueAcquiringLock:(bool)arg1;
- (bool)p_hasRead;
- (bool)p_hasWrite;
- (void)p_performRead:(id /* block */)arg1 eagerlyBlockingPrimaryThread:(bool)arg2 thenWrite:(id /* block */)arg3 allowingPendingWrites:(bool)arg4 thenReadOnPrimaryThread:(id /* block */)arg5;
- (void)p_performReadOnPrimaryThread:(id /* block */)arg1 result:(bool)arg2;
- (void)p_readLock;
- (void)p_readLockTakingRealLock:(bool)arg1;
- (void)p_readUnlock;
- (void)p_readUnlockReleasingRealLock:(bool)arg1;
- (void)p_releaseRunLoop:(struct __CFRunLoop { }*)arg1;
- (void)p_schedulePrimaryThreadRead:(id /* block */)arg1 result:(bool)arg2;
- (void)p_setPrimaryThreadIfNeeded;
- (void)p_signalPrimaryThreadWriteComplete;
- (void)p_signalThread:(id)arg1;
- (struct NSThread { Class x1; id x2; unsigned char x3[44]; }*)p_threadIdentifier;
- (struct { unsigned int x1; id x2; }*)p_ticketInfoForCurrentThread;
- (struct { unsigned int x1; id x2; }*)p_ticketInfoForTicket:(id)arg1;
- (void)p_unblockPrimaryThread;
- (bool)p_waitWithCondition:(id)arg1 untilDate:(id)arg2;
- (void)p_willAcquireReadLock;
- (void)p_willAcquireWriteLock;
- (void)p_willRelinquishReadLock;
- (void)p_willRelinquishWriteLock;
- (void)p_writeLockAndBlockPrimaryThread:(bool)arg1;
- (void)p_writeUnlock;
- (unsigned long long)p_writerQueueIndexOfThreadIdentifier:(struct NSThread { Class x1; id x2; unsigned char x3[44]; }*)arg1;
- (void)performRead:(id /* block */)arg1;
- (void)performRead:(id /* block */)arg1 thenWrite:(id /* block */)arg2 thenReadOnPrimaryThread:(id /* block */)arg3;
- (void)performRead:(id /* block */)arg1 thenWriteBeforePendingWrites:(id /* block */)arg2 thenReadOnPrimaryThread:(id /* block */)arg3;
- (void)performReadAllowingOverlappingImplicitRead:(id /* block */)arg1 thenWrite:(id /* block */)arg2 thenReadOnPrimaryThread:(id /* block */)arg3;
- (void)performReadGrantingTicket:(id /* block */)arg1;
- (void)performReadWithTicket:(id)arg1 block:(id /* block */)arg2;
- (void)performWrite:(id /* block */)arg1;
- (void)performWrite:(id /* block */)arg1 blockPrimaryThread:(bool)arg2;
- (id)primaryThread;
- (unsigned int)primaryThreadQualityOfServiceClass;
- (struct __CFRunLoop { }*)runLoop;
- (void)setRunLoop:(struct __CFRunLoop { }*)arg1;
- (void)signalIdentifier:(id)arg1;
- (void)waitOnIdentifier:(id)arg1;
- (bool)waitOnIdentifier:(id)arg1 untilDate:(id)arg2 releaseReadWhileWaiting:(bool)arg3;

@end
