/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSPDataManager : NSObject {
    TSPObjectContext * _context;
    NSObject<OS_dispatch_queue> * _datasQueue;
    struct unordered_map<const std::__1::array<unsigned char, 20>, TSPData *__weak, TSP::DigestHash, TSP::DigestEqualTo, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak> > > { 
        struct __hash_table<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, std::__1::__unordered_map_hasher<const std::__1::array<unsigned char, 20>, std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestHash, true>, std::__1::__unordered_map_equal<const std::__1::array<unsigned char, 20>, std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestEqualTo, true>, std::__1::allocator<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak> > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const std::__1::array<unsigned char, 20>, std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestHash, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<const std::__1::array<unsigned char, 20>, std::__1::__hash_value_type<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DigestEqualTo, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _digestToDataMap;
    NSObject<OS_dispatch_group> * _externalReferenceRemovalGroup;
    NSObject<OS_dispatch_queue> * _externalReferenceRemovalQueue;
    bool  _hasExternalReferences;
    struct unordered_map<const long long, TSPData *__weak, TSP::ObjectIdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSPData *__weak> > > { 
        struct __hash_table<std::__1::__hash_value_type<const long long, TSPData *__weak>, std::__1::__unordered_map_hasher<const long long, std::__1::__hash_value_type<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true>, std::__1::__unordered_map_equal<const long long, std::__1::__hash_value_type<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::__hash_value_type<const long long, TSPData *__weak> > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const long long, TSPData *__weak>, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const long long, std::__1::__hash_value_type<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<const long long, std::__1::__hash_value_type<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  _identifierToDataMap;
    long long  _nextNewIdentifier;
    TSUTemporaryDirectory * _temporaryDirectory;
    TSUPathSet * _temporaryDirectoryPathSet;
    NSObject<OS_dispatch_queue> * _temporaryDirectoryQueue;
}

@property (nonatomic, readonly) TSPObjectContext *context;

+ (bool)isSupportedURL:(id)arg1;
+ (void)readWithChannel:(id)arg1 handler:(id /* block */)arg2;
+ (void)readWithChannelImpl:(id)arg1 handler:(id /* block */)arg2;
+ (void)readWithURL:(id)arg1 handler:(id /* block */)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addData:(id)arg1;
- (void)addDataFromPackage:(id)arg1 packageURL:(id)arg2 dataInfo:(const struct DataInfo { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_7_1_1; } x7; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_8_1_1; } x8; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_9_1_1; } x9; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_10_1_1; } x10; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_11_1_1; } x11; }*)arg3 packageMetadata:(id)arg4 documentResourceInfo:(id)arg5 areExternalReferencesAllowed:(bool)arg6;
- (id)addNewDataForStorage:(id)arg1 digest:(id)arg2 filename:(id)arg3;
- (bool)attemptToMaterializeData:(id)arg1 dataURL:(id)arg2 dataURLType:(long long)arg3;
- (id)checkForPersistenceWarningsWithPackageURL:(id)arg1;
- (id)context;
- (void)coordinateReadingNewFileURL:(id)arg1 byAccessor:(id /* block */)arg2;
- (id)copyData:(id)arg1;
- (id)dataForDigest:(id)arg1;
- (void)dataForDigest:(id)arg1 queue:(id)arg2 completion:(id /* block */)arg3;
- (id)dataForDigestImpl:(id)arg1 documentResourceInfo:(id)arg2 skipDocumentResourcesLookup:(bool)arg3 expectedLength:(unsigned long long)arg4 accessorBlock:(id /* block */)arg5;
- (id)dataForDocumentResourceInfo:(id)arg1;
- (id)dataForExistingData:(id)arg1 digest:(id)arg2 filename:(id)arg3 temporaryDataStorageURL:(id)arg4;
- (id)dataForIdentifier:(long long)arg1;
- (id)dataForIdentifierImpl:(long long)arg1;
- (id)dataFromExternalReferenceURL:(id)arg1 filename:(id)arg2 useFileCoordination:(bool)arg3;
- (void)dataFromFileURL:(id)arg1 filename:(id)arg2 context:(id)arg3 completionQueue:(id)arg4 completion:(id /* block */)arg5;
- (id)dataFromFileURL:(id)arg1 filename:(id)arg2 useFileCoordination:(bool)arg3;
- (id)dataFromNSData:(id)arg1 filename:(id)arg2;
- (id)dataFromReadChannel:(id)arg1 filename:(id)arg2;
- (id)dataFromReadChannel:(id)arg1 filename:(id)arg2 dataURLOrNil:(id)arg3 canLink:(bool)arg4;
- (void)dataFromReadChannel:(id)arg1 filename:(id)arg2 dataURLOrNil:(id)arg3 canLink:(bool)arg4 completion:(id /* block */)arg5;
- (id)dataFromURL:(id)arg1 filename:(id)arg2 useFileCoordination:(bool)arg3;
- (id)dataOrNilForIdentifier:(long long)arg1;
- (id)dataWithStorage:(id)arg1 digest:(id)arg2 filename:(id)arg3 skipDocumentResourcesLookup:(bool)arg4 accessorBlock:(id /* block */)arg5;
- (id)dataWithTemporaryDataStorageURL:(id)arg1 digest:(id)arg2 filename:(id)arg3;
- (void)didCloseDocument;
- (void)didSaveWithSaveOperationState:(id)arg1;
- (id)documentResourceDataForInfo:(id)arg1 withStorage:(id)arg2 filename:(id)arg3;
- (void)enumerateDatasUsingBlock:(id /* block */)arg1;
- (void)findExistingDataForReadChannel:(id)arg1 dataURL:(id)arg2 dataURLType:(long long)arg3 readHandler:(id /* block */)arg4 completion:(id /* block */)arg5;
- (void)findExistingDataForReadChannel:(id)arg1 dataURL:(id)arg2 dataURLType:(long long)arg3 temporaryDataStorageURL:(id)arg4 keepTemporaryFileOnSuccess:(bool)arg5 completion:(id /* block */)arg6;
- (id)init;
- (id)initWithContext:(id)arg1;
- (bool)linkOrCloneTemporaryURL:(id)arg1 fromURL:(id)arg2 canLink:(bool)arg3;
- (void)loadFromPackage:(id)arg1 packageURL:(id)arg2 packageMetadata:(id)arg3 areExternalReferencesAllowed:(bool)arg4;
- (bool)migrateDataToTemporaryStorageFromPackage:(id)arg1;
- (int)openTemporaryURL:(id)arg1;
- (id)preferredFilenameForDocumentResourceInfo:(id)arg1;
- (bool)prepareSaveWithOldPackage:(id)arg1 saveOperationState:(id)arg2;
- (bool)prepareTemporaryDataStorageForData:(id)arg1 temporaryDataStorage:(id*)arg2;
- (id)remoteDataWithURL:(id)arg1 digest:(id)arg2 filename:(id)arg3 canDownload:(bool)arg4 downloadPriority:(long long)arg5;
- (void)removeExternalReferenceForData:(id)arg1 storage:(id)arg2;
- (void)removeExternalReferences;
- (void)removeFileAtURL:(id)arg1;
- (bool)shouldAttemptToMaterializeData:(id)arg1 expectedLength:(unsigned long long)arg2;
- (id)temporaryDataStorageURLForFilename:(id)arg1;
- (void)waitForRemoveExternalReferencesToComplete;
- (void)willCreateData;

@end
