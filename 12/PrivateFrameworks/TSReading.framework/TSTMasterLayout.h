<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTMasterLayout.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTMasterLayout.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTMasterLayout : NSObject <TSTTableHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding> {
    bool  _bandedFillIsValid;
    TSDFill * _bandedFillObject;
    NSPointerArray * _bottomRowStrokes;
    unsigned long long  _cachedMaxNumberOfColumns;
    unsigned long long  _cachedMaxNumberOfRows;
    unsigned int  _cachedNumberOfColumns;
    unsigned int  _cachedNumberOfFooterRows;
    unsigned int  _cachedNumberOfHeaderColumns;
    unsigned int  _cachedNumberOfHeaderRows;
    unsigned int  _cachedNumberOfRows;
    double  _cachedTableNameHeight;
    TSTWPColumnCache * _cellIDToWPColumnCache;
    TSTCellRegion * _cellRegionForClearedMergeStrokes;
    NSMutableArray * _changeDescriptors;
    TSKChangeNotifier * _changeNotifier;
    TSTStrokeWidthCache * _columnToStrokeWidthCache;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  _contentRWLock;
    NSMutableSet * _contentReadingThreads;
    TSWPColumnStyle * _defaultColumnStyle;
    TSTDupContentCache * _dupContentCache;
    double  _dynamicAddOrRemoveColumnElementSize;
    double  _dynamicAddOrRemoveRowElementSize;
    bool  _dynamicBandedFill;
    bool  _dynamicBandedFillSetting;
    <TSTLayoutDynamicCellFillProtocol> * _dynamicCellFillDelegate;
    int  _dynamicColumnAdjustment;
    double  _dynamicColumnTabSize;
    <TSTLayoutDynamicContentProtocol> * _dynamicContentDelegate;
    TSUColor * _dynamicFontColor;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicFontColorCellRange;
    double  _dynamicHeightResize;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicHidingContent;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicHidingRowsCols;
    long long  _dynamicHidingRowsColsDirection;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicHidingText;
    TSDInfoGeometry * _dynamicInfoGeometry;
    TSTLayout * _dynamicLayout;
    NSMutableSet * _dynamicLayoutParticipants;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicRemovingText;
    bool  _dynamicRepResize;
    bool  _dynamicRepressFrozenHeaderColumns;
    bool  _dynamicRepressFrozenHeaderRows;
    TSTLayoutDynamicResizeInfo * _dynamicResizeInfo;
    double  _dynamicResizingColumnAdjustment;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicResizingColumnRange;
    bool  _dynamicResizingColumns;
    double  _dynamicResizingRowAdjustment;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicResizingRowRange;
    bool  _dynamicResizingRows;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dynamicRevealingRowsCols;
    long long  _dynamicRevealingRowsColsDirection;
    int  _dynamicRowAdjustment;
    double  _dynamicRowTabSize;
    TSDLayoutGeometry * _dynamicSavedLayoutGeometry;
    TSTCellSelection * _dynamicSelection;
    struct TSUCellCoord { 
        unsigned int row; 
        unsigned short column; 
        bool _preserveRow; 
        bool _preserveColumn; 
    }  _dynamicSuppressingConditionalStylesCellID;
    double  _dynamicTableNameResize;
    double  _dynamicWidthResize;
    bool  _emptyFilteredTable;
    bool  _headerColumnsFrozen;
    bool  _headerColumnsRepeat;
    bool  _headerRowsFrozen;
    bool  _headerRowsRepeat;
    TSTHiddenRowsColumnsCache * _hiddenRowsColumnsCache;
    bool  _inDynamicLayoutMode;
    bool  _isGrouped;
    NSObject<OS_dispatch_group> * _layoutInFlight;
    TSUWidthLimitedQueue * _layoutQueue;
    NSPointerArray * _leftColumnStrokes;
    unsigned int  _maxConcurrentTasks;
    struct CGSize { 
        double width; 
        double height; 
    }  _maximumPartitionSize;
    TSTMergeRangeSortedSet * _mergeRanges;
    unsigned int  _numCellsPerTask;
    TSTRWRetainedPointerKeyDictionary * _paraStyleToHeightCache;
    bool  _processHiddenRowsForExport;
    NSPointerArray * _rightColumnStrokes;
    TSTStrokeWidthCache * _rowToStrokeHeightCache;
    TSTConcurrentMutableIndexSet * _spillStrokeColumns;
    TSTStrokeDefaultVendor * _strokesDefaultVendor;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  _strokesRWLock;
    double  _tableDefaultFontHeightForArea;
    bool  _tableDefaultFontHeightsAreValid;
    int  _tableEnvironment;
    TSTTableInfo * _tableInfo;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _tableNameBounds;
    bool  _tableNameEnabled;
    bool  _tableNameHeightValid;
    int  _tableRowsBehavior;
    TSTWPColumnCache * _tempWPColumnCache;
    NSPointerArray * _topRowStrokes;
    bool  _useBandedFill;
    TSTWidthHeightCache * _widthHeightCache;
}

@property (nonatomic) bool bandedFillIsValid;
@property (nonatomic, retain) TSDFill *bandedFillObject;
@property (nonatomic, retain) NSPointerArray *bottomRowStrokes;
@property (nonatomic) unsigned long long cachedMaxNumberOfColumns;
@property (nonatomic) unsigned long long cachedMaxNumberOfRows;
@property (nonatomic) unsigned int cachedNumberOfColumns;
@property (nonatomic) unsigned int cachedNumberOfFooterRows;
@property (nonatomic) unsigned int cachedNumberOfHeaderColumns;
@property (nonatomic) unsigned int cachedNumberOfHeaderRows;
@property (nonatomic) unsigned int cachedNumberOfRows;
@property (nonatomic) double cachedTableNameHeight;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } categoryColumnsCellRange;
@property (nonatomic, retain) TSTWPColumnCache *cellIDToWPColumnCache;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } cellRange;
@property (nonatomic, retain) TSTCellRegion *cellRegionForClearedMergeStrokes;
@property (nonatomic, retain) NSMutableArray *changeDescriptors;
@property (nonatomic) TSKChangeNotifier *changeNotifier;
@property (nonatomic, retain) TSTStrokeWidthCache *columnToStrokeWidthCache;
@property (nonatomic, retain) NSMutableSet *contentReadingThreads;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) TSWPColumnStyle *defaultColumnStyle;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) TSTDupContentCache *dupContentCache;
@property (nonatomic) double dynamicAddOrRemoveColumnElementSize;
@property (nonatomic) double dynamicAddOrRemoveRowElementSize;
@property (nonatomic) bool dynamicBandedFill;
@property (nonatomic) bool dynamicBandedFillSetting;
@property (nonatomic, retain) <TSTLayoutDynamicCellFillProtocol> *dynamicCellFillDelegate;
@property (nonatomic) int dynamicColumnAdjustment;
@property (nonatomic) double dynamicColumnTabSize;
@property (nonatomic, retain) <TSTLayoutDynamicContentProtocol> *dynamicContentDelegate;
@property (nonatomic, retain) TSUColor *dynamicFontColor;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicFontColorCellRange;
@property (nonatomic) double dynamicHeightResize;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicHidingContent;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicHidingRowsCols;
@property (nonatomic) long long dynamicHidingRowsColsDirection;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicHidingText;
@property (nonatomic, retain) TSDInfoGeometry *dynamicInfoGeometry;
@property (nonatomic, retain) TSTLayout *dynamicLayout;
@property (nonatomic, retain) NSMutableSet *dynamicLayoutParticipants;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicRemovingText;
@property (nonatomic) bool dynamicRepResize;
@property (nonatomic) bool dynamicRepressFrozenHeaderColumns;
@property (nonatomic) bool dynamicRepressFrozenHeaderRows;
@property (nonatomic, retain) TSTLayoutDynamicResizeInfo *dynamicResizeInfo;
@property (nonatomic) double dynamicResizingColumnAdjustment;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicResizingColumnRange;
@property (nonatomic) bool dynamicResizingColumns;
@property (nonatomic) double dynamicResizingRowAdjustment;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicResizingRowRange;
@property (nonatomic) bool dynamicResizingRows;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dynamicRevealingRowsCols;
@property (nonatomic) long long dynamicRevealingRowsColsDirection;
@property (nonatomic) int dynamicRowAdjustment;
@property (nonatomic) double dynamicRowTabSize;
@property (nonatomic, copy) TSDLayoutGeometry *dynamicSavedLayoutGeometry;
@property (nonatomic, retain) TSTCellSelection *dynamicSelection;
@property (nonatomic) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } dynamicSuppressingConditionalStylesCellID;
@property (nonatomic) double dynamicTableNameResize;
@property (nonatomic) double dynamicWidthResize;
@property (nonatomic) bool emptyFilteredTable;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } entireActualHeaderColumnsCellRange;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } entireBodyCellRange;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } entireBodyRowsCellRange;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } entireFooterRowsCellRange;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } entireHeaderColumnsCellRange;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } entireHeaderRowsCellRange;
@property (nonatomic, readonly) bool hasActiveFilters;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool headerColumnsFrozen;
@property (nonatomic) bool headerColumnsRepeat;
@property (nonatomic) bool headerRowsFrozen;
@property (nonatomic) bool headerRowsRepeat;
@property (nonatomic, readonly) NSIndexSet *hiddenColumnIndices;
@property (nonatomic, readonly) NSIndexSet *hiddenRowIndices;
@property (nonatomic, retain) TSTHiddenRowsColumnsCache *hiddenRowsColumnsCache;
@property (getter=isInDynamicLayoutMode, nonatomic) bool inDynamicLayoutMode;
@property (nonatomic) bool isGrouped;
@property (nonatomic, retain) TSUWidthLimitedQueue *layoutQueue;
@property (nonatomic, retain) NSPointerArray *leftColumnStrokes;
@property (nonatomic) unsigned int maxConcurrentTasks;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumPartitionSize;
@property (nonatomic, retain) TSTMergeRangeSortedSet *mergeRanges;
@property (nonatomic) unsigned int numCellsPerTask;
@property (nonatomic, readonly) unsigned short numberOfColumns;
@property (nonatomic, readonly) unsigned int numberOfFooterRows;
@property (nonatomic, readonly) unsigned int numberOfHeaderColumns;
@property (nonatomic, readonly) unsigned int numberOfHeaderRows;
@property (nonatomic, readonly) unsigned int numberOfNonHiddenFooterRows;
@property (nonatomic, readonly) unsigned int numberOfRows;
@property (nonatomic, retain) TSTRWRetainedPointerKeyDictionary *paraStyleToHeightCache;
@property (nonatomic) bool processHiddenRowsForExport;
@property (nonatomic, retain) NSPointerArray *rightColumnStrokes;
@property (nonatomic, retain) TSTStrokeWidthCache *rowToStrokeHeightCache;
@property (nonatomic, retain) TSTConcurrentMutableIndexSet *spillStrokeColumns;
@property (nonatomic, retain) TSTStrokeDefaultVendor *strokesDefaultVendor;
@property (readonly) Class superclass;
@property (nonatomic) bool tableDefaultFontHeightsAreValid;
@property (nonatomic) int tableEnvironment;
@property (nonatomic) TSTTableInfo *tableInfo;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } tableNameBounds;
@property (nonatomic) bool tableNameEnabled;
@property (nonatomic) bool tableNameHeightValid;
@property (nonatomic) int tableRowsBehavior;
@property (nonatomic, retain) TSTWPColumnCache *tempWPColumnCache;
@property (nonatomic, retain) NSPointerArray *topRowStrokes;
@property (nonatomic) bool useBandedFill;
@property (nonatomic, readonly) NSIndexSet *visibleColumnIndices;
@property (nonatomic, readonly) NSIndexSet *visibleRowIndices;
@property (nonatomic, retain) TSTWidthHeightCache *widthHeightCache;

+ (double)effectiveTableNameHeightForTable:(id)arg1;
+ (id)tableNameTextEngine:(id)arg1;
+ (struct CGSize { double x1; double x2; })tableNameTextSize:(id)arg1;
+ (int)tableRowsBehaviorForTable:(id)arg1 andEnvironment:(int)arg2;

- (void).cxx_destruct;
- (void)addChangeDescriptor:(id)arg1;
- (void)addChangeDescriptorWithType:(int)arg1 andCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;
- (void)addChangeDescriptorWithType:(int)arg1 andCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2 andStrokeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg3;
- (bool)adjustGridColumnForVisibility:(unsigned int*)arg1 isLeft:(bool)arg2;
- (bool)adjustGridRowForVisibility:(unsigned int*)arg1 isTop:(bool)arg2;
- (bool)anyHiddenColumnsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)anyHiddenRowsInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)anyRowsUserHiddenInCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)bandedFillIsValid;
- (id)bandedFillObject;
- (void)beginDynamicMode:(id)arg1;
- (id)bottomRowStrokes;
- (unsigned long long)cachedMaxNumberOfColumns;
- (unsigned long long)cachedMaxNumberOfRows;
- (unsigned int)cachedNumberOfColumns;
- (unsigned int)cachedNumberOfFooterRows;
- (unsigned int)cachedNumberOfHeaderColumns;
- (unsigned int)cachedNumberOfHeaderRows;
- (unsigned int)cachedNumberOfRows;
- (double)cachedTableNameHeight;
- (double)calculatedTableNameHeight;
- (double)calculatedTableNameHeightIncludingDynamicResize:(bool)arg1;
- (void)captureDynamicResizeInfo;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })categoryColumnsCellRange;
- (unsigned char)categoryGroupLevelAtLabelRow:(unsigned int)arg1;
- (unsigned char)categoryGroupLevelAtSummaryRow:(unsigned int)arg1;
- (bool)cell:(id*)arg1 forCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (id)cellIDToWPColumnCache;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })cellRange;
- (id)cellRegionForClearedMergeStrokes;
- (id)changeDescriptors;
- (id)changeNotifier;
- (void)clearDynamicStrokesForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)clearModelHeightWidthCacheForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)columnToStrokeWidthCache;
- (bool)containsAnyContentInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (double)contentHeightForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 skipDynamicSwap:(bool)arg2;
- (id)contentReadingThreads;
- (struct CGSize { double x1; double x2; })contentSizeForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 skipDynamicSwap:(bool)arg2;
- (double)contentWidthForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 skipDynamicSwap:(bool)arg2;
- (id)customStrokeProvider;
- (void)dealloc;
- (id)defaultColumnStyle;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })defaultPaddingForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)description;
- (id)dupContentCache;
- (double)dynamicAddOrRemoveColumnElementSize;
- (double)dynamicAddOrRemoveRowElementSize;
- (bool)dynamicBandedFill;
- (bool)dynamicBandedFillSetting;
- (id)dynamicCellFillDelegate;
- (int)dynamicColumnAdjustment;
- (double)dynamicColumnTabSize;
- (id)dynamicContentDelegate;
- (id)dynamicFontColor;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicFontColorCellRange;
- (double)dynamicHeightResize;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicHidingContent;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicHidingRowsCols;
- (long long)dynamicHidingRowsColsDirection;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicHidingText;
- (id)dynamicInfoGeometry;
- (id)dynamicLayout;
- (id)dynamicLayoutParticipants;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicRemovingText;
- (bool)dynamicRepResize;
- (bool)dynamicRepressFrozenHeaderColumns;
- (bool)dynamicRepressFrozenHeaderRows;
- (id)dynamicResizeInfo;
- (double)dynamicResizingColumnAdjustment;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicResizingColumnRange;
- (bool)dynamicResizingColumns;
- (double)dynamicResizingRowAdjustment;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicResizingRowRange;
- (bool)dynamicResizingRows;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dynamicRevealingRowsCols;
- (long long)dynamicRevealingRowsColsDirection;
- (int)dynamicRowAdjustment;
- (double)dynamicRowTabSize;
- (id)dynamicSavedLayoutGeometry;
- (id)dynamicSelection;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })dynamicSuppressingConditionalStylesCellID;
- (double)dynamicTableNameResize;
- (double)dynamicWidthResize;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })edgeInsetsFromPadding:(id)arg1;
- (bool)emptyFilteredTable;
- (void)endDynamicMode;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })entireActualHeaderColumnsCellRange;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })entireBodyCellRange;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })entireBodyRowsCellRange;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })entireFooterRowsCellRange;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })entireHeaderColumnsCellRange;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })entireHeaderRowsCellRange;
- (void)enumerateMergedStrokesAndCapsForGridColumn:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateMergedStrokesAndCapsForGridRow:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateMergedStrokesForGridColumn:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(id /* block */)arg4;
- (void)enumerateMergedStrokesForGridRow:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(id /* block */)arg4;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })expandCellRangeToCoverMergedCells:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })expandCellRangeToVisibleNeighbors:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)expandCellRegionToCoverMergedCells:(id)arg1;
- (unsigned int)firstEmptyBodyRow;
- (double)fontHeightOfParagraphStyle:(id)arg1;
- (id)formattedDataParagraphStylePropertyMapForCell:(id)arg1 atCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (bool)hasActiveFilters;
- (bool)hasHiddenColumnAtIndex:(unsigned short)arg1;
- (bool)hasHiddenRowAtIndex:(unsigned int)arg1;
- (bool)hasRangeSpanningRowsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)hasStrokeSpillForLeftGridColumn:(unsigned int)arg1 inRow:(unsigned int)arg2;
- (bool)headerColumnsFrozen;
- (bool)headerColumnsRepeat;
- (bool)headerRowsFrozen;
- (bool)headerRowsRepeat;
- (double)heightOfRow:(unsigned int)arg1 skipDynamicSwap:(bool)arg2 withStrokeHeights:(bool)arg3 returnZeroIfHidden:(bool)arg4 clampToPartitionSize:(bool)arg5 outIsFitting:(bool*)arg6;
- (double)heightOfRowIgnoringFitting:(unsigned int)arg1 withStrokeHeights:(bool)arg2;
- (id)hiddenColumnIndices;
- (id)hiddenRowIndices;
- (id)hiddenRowsColumnsCache;
- (bool)hintIsValid:(id)arg1;
- (unsigned short)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleColumnAfterColumnAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned short)arg1;
- (unsigned int)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfVisibleRowAfterRowAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned int)arg1;
- (unsigned int)indexOfVisibleRowBeforeRowAtIndex:(unsigned int)arg1;
- (id)indexesForCategoryColumns;
- (id)indexesForCategoryColumnsInRegion:(id)arg1;
- (id)indexesForLabelRows;
- (id)indexesForLabelRowsInRegion:(id)arg1;
- (id)indexesForSummaryAndLabelRows;
- (id)indexesForSummaryRows;
- (id)indexesForSummaryRowsInRegion:(id)arg1;
- (id)initWithInfo:(id)arg1;
- (void)invalidateBandedFill;
- (void)invalidateDefaultFontHeights;
- (void)invalidateDynamicResizeInfo;
- (void)invalidateStrokeDefaults;
- (void)invalidateStrokeSpills;
- (void)invalidateTableNameHeight;
- (bool)isCategorized;
- (bool)isCategoryColumn:(unsigned short)arg1;
- (bool)isCategoryColumnUneditableCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isCategoryGroupValueCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isCategoryGroupValueLabelCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isCategoryLabelCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isCategoryLastSummaryRowCollapsed;
- (bool)isCategorySummaryCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isCategorySummaryOrLabelRow:(unsigned int)arg1;
- (bool)isCategorySummaryRow:(unsigned int)arg1;
- (bool)isCategorySummaryRowCollapsed:(unsigned int)arg1;
- (bool)isDynamicallyChangingCellFill;
- (bool)isDynamicallyChangingColumnCount;
- (bool)isDynamicallyChangingContent;
- (bool)isDynamicallyChangingFontColorOfCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isDynamicallyChangingInfoGeometry;
- (bool)isDynamicallyChangingRowCount;
- (bool)isDynamicallyChangingRowOrColumnCount;
- (bool)isDynamicallyChangingSelection;
- (bool)isDynamicallyColumnTabResizing;
- (bool)isDynamicallyHidingContentOfCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isDynamicallyHidingRowsCols;
- (bool)isDynamicallyHidingRowsCols:(long long)arg1 rowColIndex:(unsigned int)arg2;
- (bool)isDynamicallyHidingRowsColsCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isDynamicallyHidingTextOfCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isDynamicallyRemovingTextOfCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isDynamicallyRepressingFrozenHeaderColumns;
- (bool)isDynamicallyRepressingFrozenHeaderRows;
- (bool)isDynamicallyResizing:(long long)arg1;
- (bool)isDynamicallyResizing:(long long)arg1 rowColIndex:(unsigned int)arg2;
- (bool)isDynamicallyResizingCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)isDynamicallyResizingTableName;
- (bool)isDynamicallyRevealingRowsCols;
- (bool)isDynamicallyRevealingRowsCols:(long long)arg1 rowColIndex:(unsigned int)arg2;
- (bool)isDynamicallyRowTabResizing;
- (bool)isDynamicallySettingBandedFill;
- (bool)isEntireCellRangeHidden:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)isGrouped;
- (bool)isInDynamicLayoutMode;
- (bool)isRowUserHidden:(unsigned int)arg1;
- (void)iterateCellsAndTerminateWithIterator:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(id /* block */)arg4;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })layoutCellIDForModelCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)layoutCellRegionForModelCellRegion:(id)arg1;
- (unsigned short)layoutColumnForModelColumn:(unsigned short)arg1;
- (id)layoutQueue;
- (unsigned int)layoutRowForModelRow:(unsigned int)arg1;
- (id)leftColumnStrokes;
- (unsigned int)maxConcurrentTasks;
- (struct CGSize { double x1; double x2; })maximumPartitionSize;
- (void)measureTextForLayoutState:(id)arg1;
- (id)mergeRanges;
- (id)mergeRangesProppingRowHeightsInRegion:(id)arg1;
- (id)mergedStrokesForGridColumn:(unsigned int)arg1;
- (id)mergedStrokesForGridRow:(unsigned int)arg1;
- (id)mergesIntersectingCellRegion:(id)arg1;
- (id)mergesIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })modelCellIDForLayoutCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)modelCellRegionForLayoutCellRegion:(id)arg1;
- (unsigned short)modelColumnForLayoutColumn:(unsigned short)arg1;
- (unsigned int)modelRowForLayoutRow:(unsigned int)arg1;
- (void)modifySafelyUsingBlock:(id /* block */)arg1;
- (id)newLayoutHint;
- (id)newTextEngineForCell:(id)arg1 atCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (unsigned int)nonUserHiddenRowAfterAndIncludingRow:(unsigned int)arg1;
- (unsigned int)numCellsPerTask;
- (unsigned int)numberOfCategoryLevels;
- (unsigned short)numberOfColumns;
- (unsigned int)numberOfFooterRows;
- (unsigned int)numberOfHeaderColumns;
- (unsigned int)numberOfHeaderRows;
- (unsigned int)numberOfNonHiddenFooterRows;
- (unsigned int)numberOfRows;
- (void)p_clearStrokesForMergesInCellRegion:(id)arg1;
- (double)p_defaultFontHeightForTableStyleArea:(unsigned long long)arg1;
- (bool)p_deferredMergeExpansionForChangeDescriptorType:(int)arg1;
- (void)p_invalidateClearedStrokesForCellRegion:(id)arg1;
- (void)p_setDefaultFontHeight:(double)arg1 forTableStyleArea:(unsigned long long)arg2;
- (void)p_setDynamicStroke:(id)arg1 strokeOrder:(int)arg2 forGridColumn:(unsigned int)arg3 isLeft:(bool)arg4 beginRow:(unsigned int)arg5 endRow:(unsigned int)arg6;
- (void)p_setDynamicStroke:(id)arg1 strokeOrder:(int)arg2 forGridRow:(unsigned int)arg3 isTop:(bool)arg4 beginColumn:(unsigned int)arg5 endColumn:(unsigned int)arg6;
- (id)p_strokesForGridColumn:(unsigned int)arg1 isLeft:(bool)arg2 takeStrokeWriteLock:(bool)arg3;
- (id)p_strokesForGridRow:(unsigned int)arg1 isTop:(bool)arg2 takeStrokeWriteLock:(bool)arg3;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })p_validateFittingInfoForEmptyCellsBetween:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 andCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2 inRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg3 widthHeightCollection:(id)arg4;
- (void)p_validateFittingInfoForEmptyCellsOnSingleRowBetween:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 andEndCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2 widthHeightCollection:(id)arg3;
- (void)p_validateFittingInfoForEmptyMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)p_validateStrokesForRegion:(id)arg1;
- (id)p_validationFittingCellRegionForColumnsDeleted:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForColumnsInserted:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForColumnsMovedFrom:(id)arg1 toColumnIndex:(unsigned short)arg2 currentRegionToValidate:(id)arg3;
- (id)p_validationFittingCellRegionForColumnsVisibility:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForRangeMergeUnmerge:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForRowsDeleted:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForRowsInserted:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForRowsMovedFrom:(id)arg1 toRowIndex:(unsigned int)arg2 currentRegionToValidate:(id)arg3;
- (id)p_validationFittingCellRegionForStrokesChanged:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingForChangeDescriptorType:(int)arg1 regionFromChangeDescriptor:(id)arg2 currentRegionToValidate:(id)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paddingForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)paraStyleToHeightCache;
- (bool)processHiddenRowsForExport;
- (void)processLayoutTask:(id)arg1;
- (void)queueCellForValidation:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 cell:(id)arg2 modelMergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg3 wrap:(bool)arg4 verticalAlignment:(int)arg5 padding:(id)arg6 prop:(bool)arg7 layoutCacheFlags:(int)arg8 layoutTask:(id)arg9;
- (void)readSafelyUsingBlock:(id /* block */)arg1;
- (void)resetModelHeightWidthCache;
- (id)rightColumnStrokes;
- (id)rowToStrokeHeightCache;
- (void)setBandedFillIsValid:(bool)arg1;
- (void)setBandedFillObject:(id)arg1;
- (void)setBottomRowStrokes:(id)arg1;
- (void)setCachedMaxNumberOfColumns:(unsigned long long)arg1;
- (void)setCachedMaxNumberOfRows:(unsigned long long)arg1;
- (void)setCachedNumberOfColumns:(unsigned int)arg1;
- (void)setCachedNumberOfFooterRows:(unsigned int)arg1;
- (void)setCachedNumberOfHeaderColumns:(unsigned int)arg1;
- (void)setCachedNumberOfHeaderRows:(unsigned int)arg1;
- (void)setCachedNumberOfRows:(unsigned int)arg1;
- (void)setCachedTableNameHeight:(double)arg1;
- (void)setCellIDToWPColumnCache:(id)arg1;
- (void)setCellRegionForClearedMergeStrokes:(id)arg1;
- (void)setChangeDescriptors:(id)arg1;
- (void)setChangeNotifier:(id)arg1;
- (void)setClearedStrokeForGridColumn:(unsigned int)arg1 beginRow:(unsigned int)arg2 endRow:(unsigned int)arg3;
- (void)setClearedStrokeForGridRow:(unsigned int)arg1 beginColumn:(unsigned int)arg2 endColumn:(unsigned int)arg3;
- (void)setColumnToStrokeWidthCache:(id)arg1;
- (void)setContentReadingThreads:(id)arg1;
- (void)setDupContentCache:(id)arg1;
- (void)setDynamicAddOrRemoveColumnElementSize:(double)arg1;
- (void)setDynamicAddOrRemoveRowElementSize:(double)arg1;
- (void)setDynamicBandedFill:(bool)arg1;
- (void)setDynamicBandedFillSetting:(bool)arg1;
- (void)setDynamicCellBorder:(id)arg1 forCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)setDynamicCellFillDelegate:(id)arg1;
- (void)setDynamicColumnAdjustment:(int)arg1;
- (void)setDynamicColumnTabSize:(double)arg1;
- (void)setDynamicContentDelegate:(id)arg1;
- (void)setDynamicFontColor:(id)arg1;
- (void)setDynamicFontColorCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicHeightResize:(double)arg1;
- (void)setDynamicHidingContent:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicHidingRowsCols:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicHidingRowsColsDirection:(long long)arg1;
- (void)setDynamicHidingText:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicInfoGeometry:(id)arg1;
- (void)setDynamicLayout:(id)arg1;
- (void)setDynamicLayoutParticipants:(id)arg1;
- (void)setDynamicRemovingText:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicRepResize:(bool)arg1;
- (void)setDynamicRepressFrozenHeaderColumns:(bool)arg1;
- (void)setDynamicRepressFrozenHeaderRows:(bool)arg1;
- (void)setDynamicResizeInfo:(id)arg1;
- (void)setDynamicResizingColumnAdjustment:(double)arg1;
- (void)setDynamicResizingColumnRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicResizingColumns:(bool)arg1;
- (void)setDynamicResizingRowAdjustment:(double)arg1;
- (void)setDynamicResizingRowRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicResizingRows:(bool)arg1;
- (void)setDynamicRevealingRowsCols:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setDynamicRevealingRowsColsDirection:(long long)arg1;
- (void)setDynamicRowAdjustment:(int)arg1;
- (void)setDynamicRowTabSize:(double)arg1;
- (void)setDynamicSavedLayoutGeometry:(id)arg1;
- (void)setDynamicSelection:(id)arg1;
- (void)setDynamicSuppressingConditionalStylesCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (void)setDynamicTableNameResize:(double)arg1;
- (void)setDynamicWidthResize:(double)arg1;
- (void)setEmptyFilteredTable:(bool)arg1;
- (void)setHeaderColumnsFrozen:(bool)arg1;
- (void)setHeaderColumnsRepeat:(bool)arg1;
- (void)setHeaderRowsFrozen:(bool)arg1;
- (void)setHeaderRowsRepeat:(bool)arg1;
- (void)setHiddenRowsColumnsCache:(id)arg1;
- (void)setInDynamicLayoutMode:(bool)arg1;
- (void)setIsGrouped:(bool)arg1;
- (void)setLayoutQueue:(id)arg1;
- (void)setLeftColumnStrokes:(id)arg1;
- (void)setMaxConcurrentTasks:(unsigned int)arg1;
- (void)setMaximumPartitionSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMergeRanges:(id)arg1;
- (void)setNumCellsPerTask:(unsigned int)arg1;
- (void)setParaStyleToHeightCache:(id)arg1;
- (void)setProcessHiddenRowsForExport:(bool)arg1;
- (void)setRightColumnStrokes:(id)arg1;
- (void)setRowToStrokeHeightCache:(id)arg1;
- (void)setSpillStrokeColumns:(id)arg1;
- (void)setStrokeSpillForRightGridColumn:(unsigned int)arg1 leftGridColumn:(unsigned int)arg2 inRow:(unsigned int)arg3;
- (void)setStrokesDefaultVendor:(id)arg1;
- (void)setTableDefaultFontHeightsAreValid:(bool)arg1;
- (void)setTableEnvironment:(int)arg1;
- (void)setTableInfo:(id)arg1;
- (void)setTableNameBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTableNameEnabled:(bool)arg1;
- (void)setTableNameHeightValid:(bool)arg1;
- (void)setTableRowsBehavior:(int)arg1;
- (void)setTempWPColumnCache:(id)arg1;
- (void)setTopRowStrokes:(id)arg1;
- (void)setUseBandedFill:(bool)arg1;
- (void)setWidthHeightCache:(id)arg1;
- (bool)shouldRowUseBandedFill:(unsigned int)arg1;
- (id)spillStrokeColumns;
- (double)strokeHeightOfGridRow:(unsigned int)arg1 atColumnIndex:(unsigned int)arg2;
- (double)strokeHeightOfGridRow:(unsigned int)arg1 beginColumn:(unsigned int)arg2 endColumn:(unsigned int)arg3;
- (double)strokeWidthOfGridColumn:(unsigned int)arg1 atRowIndex:(unsigned int)arg2;
- (double)strokeWidthOfGridColumn:(unsigned int)arg1 beginRow:(unsigned int)arg2 endRow:(unsigned int)arg3;
- (id)strokesDefaultVendor;
- (void)strokesForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 top:(id*)arg2 left:(id*)arg3 bottom:(id*)arg4 right:(id*)arg5;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)tableDefaultFontHeightsAreValid;
- (int)tableEnvironment;
- (id)tableInfo;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })tableNameBounds;
- (bool)tableNameEnabled;
- (double)tableNameHeight;
- (bool)tableNameHeightValid;
- (id)tableNameTextEngine;
- (struct CGSize { double x1; double x2; })tableNameTextSize;
- (int)tableRowsBehavior;
- (id)tableStrokeProvider;
- (unsigned long long)tableStyleAreaForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)tempWPColumnCache;
- (id)topRowStrokes;
- (double)unwrappedFittingWidthsForColumnInCellRegionWorker:(id)arg1;
- (id)unwrappedFittingWidthsForColumnsInCellRegion:(id)arg1;
- (void)updateCellRange;
- (void)updateDynamicFontColor:(id)arg1 andRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;
- (void)updateDynamicResizeInfo:(id)arg1;
- (void)updateDynamicTableNameSize:(double)arg1;
- (void)updateWHCForMergeRanges;
- (bool)useBandedFill;
- (void)validate;
- (void)validateBandedFill;
- (id)validateCellForDrawing:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 cell:(id)arg2 contents:(id)arg3 wrap:(bool)arg4 verticalAlignment:(int)arg5 padding:(id)arg6 layoutCacheFlags:(int)arg7 pageNumber:(unsigned long long)arg8 pageCount:(unsigned long long)arg9;
- (void)validateChangeDescriptorQueue;
- (void)validateDefaultFontHeights;
- (void)validateDynamicResizeInfo;
- (void)validateFittingInfoForCell:(id)arg1 cellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2 mergeRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg3 setFitting:(bool)arg4 layoutTask:(id)arg5 widthHeightCollection:(id)arg6;
- (void)validateFittingInfoForChangeDescriptors:(id)arg1 rowsNeedingFittingInfo:(id)arg2;
- (void)validateFittingInfoWithCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)validateFittingInfoWithCellRangeWorker:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)validateFittingWidthsForRegion:(id)arg1;
- (bool)validateLayoutHint:(id)arg1;
- (void)validateMasterLayoutForChangeDescriptors:(id)arg1;
- (void)validateRowVisibility:(id)arg1;
- (void)validateStrokesArrays:(id)arg1;
- (void)validateStrokesForChangeDescriptors:(id)arg1;
- (void)validateTableNameHeight;
- (id)visibleColumnIndices;
- (id)visibleRowIndices;
- (void)waitForLayoutToComplete;
- (id)widthHeightCache;
- (double)widthOfColumn:(unsigned short)arg1 skipDynamicSwap:(bool)arg2 returnZeroIfHidden:(bool)arg3 outIsFitting:(bool*)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
