<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTTableRep.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTTableRep.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTTableRep : TSWPTextHostRep <CALayerDelegate, TSTTableRepInternal, UITextFieldDelegate> {
    <TSTTableAnimationController> * _animationController;
    NSMutableArray * _animationStack;
    bool  _aspectOperationIsInProgress;
    <TSTCanvasReferenceController> * _canvasReferenceController;
    TSTSelectionDragController * _cellDragController;
    CAShapeLayer * _cellEditingMaskLayer;
    NSMutableDictionary * _childTextReps;
    double  _currentScreenScale;
    <TSTTableRepDelegate> * _delegate;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _dirtyCellRange;
    bool  _dragByHandleOnly;
    CAShapeLayer * _findSelectionHighlightLayer;
    bool  _isZoomToEditOperationInProgress;
    TSDTilingLayer * _overlayFrozenHeaderColumns;
    CALayer * _overlayFrozenHeaderColumnsMask;
    TSDTilingLayer * _overlayFrozenHeaderCorner;
    TSDTilingLayer * _overlayFrozenHeaderRows;
    CALayer * _overlayFrozenHeaderRowsMask;
    CALayer * _overlayFrozenHeaderTableBodyMask;
    CALayer * _overlayFrozenHeaderTableNameMask;
    TSDTilingLayer * _overlayTableName;
    struct TSUCellCoord { 
        unsigned int row; 
        unsigned short column; 
        bool _preserveRow; 
        bool _preserveColumn; 
    }  _ratingsDragCellID;
    bool  _recursivelyDrawingInContext;
    TSTTableReferences * _references;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _searchSelectionBounds;
    bool  _selectionDragAbortedOnNewSelection;
    bool  _selectionUsesBezierPath;
    bool  _selectsCellOnInitialTap;
    bool  _shouldRepositionStockPopover;
    <TSTTableChromeProvider> * _tableChrome;
    bool  _tableNameValid;
    bool  _tableRepIsBeingRemovedFromBackgroundLayout;
    bool  _usesWholeChromeResizer;
    NSSet * _visibleFillKnobs;
    bool  _zoomOperationIsInProgress;
    bool  _zoomToEditOperationIsInProgress;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _zoomToEditVisibleCellRange;
}

@property (nonatomic) <TSTTableAnimationController> *animationController;
@property (nonatomic, readonly) NSMutableArray *animationStack;
@property (nonatomic) bool aspectOperationIsInProgress;
@property (nonatomic, readonly) <TSTCanvasReferenceController> *canvasReferenceController;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } canvasVisibleRect;
@property (nonatomic) TSTSelectionDragController *cellDragController;
@property (nonatomic, retain) CAShapeLayer *cellEditingMaskLayer;
@property (nonatomic, readonly) NSMutableDictionary *childTextReps;
@property (nonatomic, readonly) TSTAnimation *currentAnimation;
@property (nonatomic) double currentScreenScale;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <TSTTableRepDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } dirtyCellRange;
@property (nonatomic, readonly) bool dragByHandleOnly;
@property (nonatomic, retain) CAShapeLayer *findSelectionHighlightLayer;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isZoomToEditOperationInProgress;
@property (nonatomic, readonly) bool layoutDirectionIsLeftToRight;
@property (nonatomic, readonly) TSTMasterLayout *masterLayout;
@property (nonatomic, retain) TSDTilingLayer *overlayFrozenHeaderColumns;
@property (nonatomic, retain) CALayer *overlayFrozenHeaderColumnsMask;
@property (nonatomic, retain) TSDTilingLayer *overlayFrozenHeaderCorner;
@property (nonatomic, retain) TSDTilingLayer *overlayFrozenHeaderRows;
@property (nonatomic, retain) CALayer *overlayFrozenHeaderRowsMask;
@property (nonatomic, retain) CALayer *overlayFrozenHeaderTableBodyMask;
@property (nonatomic, retain) CALayer *overlayFrozenHeaderTableNameMask;
@property (nonatomic, retain) TSDTilingLayer *overlayTableName;
@property (nonatomic) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } ratingsDragCellID;
@property (getter=isRecursivelyDrawingInContext, nonatomic) bool recursivelyDrawingInContext;
@property (nonatomic, readonly) TSTTableReferences *references;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } searchSelectionBounds;
@property (nonatomic, readonly) TSTCellSelection *selection;
@property (nonatomic) bool selectionDragAbortedOnNewSelection;
@property (nonatomic, readonly) long long selectionType;
@property (nonatomic, readonly) bool selectionUsesBezierPath;
@property (nonatomic, readonly) bool selectsCellOnInitialTap;
@property (nonatomic) bool shouldRepositionStockPopover;
@property (readonly) Class superclass;
@property (nonatomic, readonly) <TSTTableChromeProvider> *tableChrome;
@property (nonatomic, readonly) TSTTableInfo *tableInfo;
@property (nonatomic, readonly) TSTLayout *tableLayout;
@property (nonatomic, readonly) TSTTableInfo *tableModel;
@property (getter=isTableNameValid, nonatomic) bool tableNameValid;
@property bool tableRepIsBeingRemovedFromBackgroundLayout;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromCanvas;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToCanvas;
@property (nonatomic, readonly) bool usesWholeChromeResizer;
@property (nonatomic, copy) NSSet *visibleFillKnobs;
@property (nonatomic) bool zoomOperationIsInProgress;
@property (nonatomic) bool zoomToEditOperationIsInProgress;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } zoomToEditVisibleCellRange;

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;
+ (unsigned long long)p_countOfIdenticalCellsBetweenOutgoingTableInfo:(id)arg1 incomingTableInfo:(id)arg2;
+ (Class)tableRepDelegateClass;

- (void).cxx_destruct;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (id)animationController;
- (id)animationStack;
- (bool)aspectOperationIsInProgress;
- (void)asyncPostTextChangedInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForCellSelection:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)canDrawInBackgroundDuringScroll;
- (bool)canDrawInParallel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasBoundsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)canvasReferenceController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasVisibleRect;
- (id)cellDragController;
- (id)cellEditingMaskLayer;
- (id)childReps;
- (id)childTextReps;
- (void)contentsRectForCellRangeAcrossSpaces:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 contentsCenterInfo:(struct { bool x1; double x2; double x3; double x4; double x5; double x6; double x7; }*)arg2 canvasFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 contentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (id)currentAnimation;
- (double)currentScreenScale;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })deviceBoundsForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)didDrawCellImageFill:(id)arg1 inCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })dirtyCellRange;
- (bool)dragByHandleOnly;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (id)editorSelection;
- (id)findSelectionHighlightLayer;
- (id)hitRep:(struct CGPoint { double x1; double x2; })arg1 withPrecision:(bool)arg2;
- (id)hitRepChrome:(struct CGPoint { double x1; double x2; })arg1;
- (id)hyperlinkContainerRep;
- (id)hyperlinkRegions;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (void)invalidateEditingCell;
- (void)invalidateFrozenHeaders;
- (bool)isDraggable;
- (bool)isFullyVisibleWithBorder:(int)arg1;
- (bool)isRecursivelyDrawingInContext;
- (bool)isTableNameValid;
- (bool)isZoomToEditOperationInProgress;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layerFrameInScaledCanvas;
- (bool)layoutDirectionIsLeftToRight;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })logicalCellIDForUnscaledCanvasPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)masterLayout;
- (bool)mustDrawOnMainThreadForInteractiveCanvas;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })naturalBoundsRectForHyperlinkField:(id)arg1;
- (id)overlayFrozenHeaderColumns;
- (id)overlayFrozenHeaderColumnsMask;
- (id)overlayFrozenHeaderCorner;
- (id)overlayFrozenHeaderRows;
- (id)overlayFrozenHeaderRowsMask;
- (id)overlayFrozenHeaderTableBodyMask;
- (id)overlayFrozenHeaderTableNameMask;
- (id)overlayTableName;
- (void)p_addObservers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_alignedLayerFrameForLayoutSpace:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })p_cellIDForHyperlinkField:(id)arg1;
- (id)p_columnForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })p_horizontalAlignmentTransformForHyperlinkWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)p_removeObservers;
- (void)p_resetDynamicModePropertiesForContainedTextEditing;
- (bool)p_shouldPerformOnChildTextReps:(SEL)arg1;
- (void)p_updateDynamicModePropertiesForContainedTextEditing;
- (void)p_updateDynamicModePropertiesForContainedTextEditingWithSpillingTextRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)popAnimation;
- (void)pushAnimation:(id)arg1;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })ratingsDragCellID;
- (void)recursivelyDrawInContext:(struct CGContext { }*)arg1 keepingChildrenPassingTest:(id /* block */)arg2;
- (void)recursivelyPerformSelector:(SEL)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2;
- (id)references;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })searchSelectionBounds;
- (id)selection;
- (bool)selectionDragAbortedOnNewSelection;
- (long long)selectionType;
- (bool)selectionUsesBezierPath;
- (bool)selectsCellOnInitialTap;
- (void)setAnimationController:(id)arg1;
- (void)setAspectOperationIsInProgress:(bool)arg1;
- (void)setCellDragController:(id)arg1;
- (void)setCellEditingMaskLayer:(id)arg1;
- (void)setCurrentScreenScale:(double)arg1;
- (void)setDirtyCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setFindSelectionHighlightLayer:(id)arg1;
- (void)setOverlayFrozenHeaderColumns:(id)arg1;
- (void)setOverlayFrozenHeaderColumnsMask:(id)arg1;
- (void)setOverlayFrozenHeaderCorner:(id)arg1;
- (void)setOverlayFrozenHeaderRows:(id)arg1;
- (void)setOverlayFrozenHeaderRowsMask:(id)arg1;
- (void)setOverlayFrozenHeaderTableBodyMask:(id)arg1;
- (void)setOverlayFrozenHeaderTableNameMask:(id)arg1;
- (void)setOverlayTableName:(id)arg1;
- (void)setRatingsDragCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (void)setRecursivelyDrawingInContext:(bool)arg1;
- (void)setSearchSelectionBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSelectionDragAbortedOnNewSelection:(bool)arg1;
- (void)setShouldRepositionStockPopover:(bool)arg1;
- (void)setTableChrome:(id)arg1;
- (void)setTableNameValid:(bool)arg1;
- (void)setTableRepIsBeingRemovedFromBackgroundLayout:(bool)arg1;
- (void)setVisibleFillKnobs:(id)arg1;
- (void)setZoomOperationIsInProgress:(bool)arg1;
- (void)setZoomToEditOperationIsInProgress:(bool)arg1;
- (void)setZoomToEditVisibleCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)shouldRepositionStockPopover;
- (id)tableChrome;
- (id)tableInfo;
- (id)tableLayout;
- (id)tableModel;
- (bool)tableRepIsBeingRemovedFromBackgroundLayout;
- (id)textureForDescription:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromCanvas;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToCanvas;
- (void)updateChildrenFromLayout;
- (void)updateFromLayout;
- (bool)usesWholeChromeResizer;
- (void)validateFrozenHeaderColumns;
- (void)validateFrozenHeaderCorner;
- (void)validateFrozenHeaderRows;
- (void)validateFrozenHeaderTableBodyMask;
- (void)validateStrokesInEditingSpillingTextRange;
- (void)validateVisibleRect;
- (id)visibleFillKnobs;
- (bool)wantsActivityLine;
- (void)willBeRemoved;
- (bool)zoomOperationIsInProgress;
- (bool)zoomToEditOperationIsInProgress;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })zoomToEditVisibleCellRange;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
