<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSPData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSPData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSPData : NSObject <TSPRemoteDataStorageDelegate, TSPSplitableData> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    TSPDataAttributes * _attributes;
    _Atomic int  _didCull;
    TSPDigest * _digest;
    NSString * _filename;
    long long  _identifier;
    bool  _isDeallocating;
    NSDate * _lastModificationDate;
    TSPDataManager * _manager;
    TSPDataMetadata * _metadata;
    <TSPDataStorage> * _storage;
}

@property (getter=isAcknowledgedByServer, nonatomic) bool acknowledgedByServer;
@property (copy) TSPDataAttributes *attributes;
@property (nonatomic, readonly) TSPObjectContext *context;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TSPDigest *digest;
@property (nonatomic, readonly) NSString *digestString;
@property (nonatomic, readonly) NSString *documentResourceLocator;
@property (nonatomic, readonly) unsigned long long encodedLength;
@property (nonatomic, readonly) unsigned long long encodedLengthIfLocal;
@property (nonatomic, readonly) NSString *filename;
@property (nonatomic, readonly) bool gilligan_isRemote;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long identifier;
@property (nonatomic, readonly) bool isApplicationData;
@property (nonatomic, readonly) bool isEncrypted;
@property (nonatomic, readonly) bool isExternalData;
@property (nonatomic, readonly) bool isReadable;
@property (nonatomic, readonly) NSDate *lastModificationDate;
@property (nonatomic, readonly) unsigned long long length;
@property (nonatomic, readonly) unsigned long long lengthIfLocal;
@property (nonatomic, readonly) TSPDataManager *manager;
@property (nonatomic, retain) TSPDataMetadata *metadata;
@property (nonatomic, readonly) bool needsDownload;
@property (nonatomic, readonly) NSString *normalizedExtension;
@property (nonatomic, readonly) unsigned char packageIdentifier;
@property (nonatomic, readonly) NSString *packageLocator;
@property (nonatomic, retain) <TSPDataStorage> *storage;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool tsd_allowedToConvertDataAlreadyInDocument;
@property (setter=tsd_setShouldBeInterpretedAsGenericIfUntagged:, nonatomic) bool tsd_shouldBeInterpretedAsGenericIfUntagged;
@property (nonatomic, readonly) unsigned long long tsp_length;
@property (nonatomic, readonly) NSString *type;
@property (nonatomic, copy) TSPDataAttributes *unsafeAttributes;

+ (void)addCullingListener:(id)arg1;
+ (id)cullingListeners;
+ (id)cullingListenersQueue;
+ (id)dataFromDataRep:(id)arg1 filename:(id)arg2 context:(id)arg3;
+ (id)dataFromNSData:(id)arg1 filename:(id)arg2 context:(id)arg3;
+ (id)dataFromReadChannel:(id)arg1 filename:(id)arg2 context:(id)arg3;
+ (id)dataFromURL:(id)arg1 context:(id)arg2;
+ (id)dataFromURL:(id)arg1 useExternalReferenceIfAllowed:(bool)arg2 context:(id)arg3;
+ (id)dataFromURL:(id)arg1 useExternalReferenceIfAllowed:(bool)arg2 useFileCoordination:(bool)arg3 context:(id)arg4;
+ (id)dataFromURL:(id)arg1 useExternalReferenceIfAllowed:(bool)arg2 useFileCoordination:(bool)arg3 filename:(id)arg4 context:(id)arg5;
+ (id)dataWithPattern4:(const char *)arg1 filename:(id)arg2 context:(id)arg3;
+ (id)digestForDataWithPattern4:(const char *)arg1;
+ (id)digestStringForDataWithPattern4:(const char *)arg1;
+ (bool)isSupportedURL:(id)arg1;
+ (id)normalizedExtensionForFilename:(id)arg1;
+ (id)nsDataWithPattern4:(const char *)arg1;
+ (id)null;
+ (id)pasteboardTypeForIdentifier:(long long)arg1;
+ (id)readOnlyDataFromNSData:(id)arg1 filename:(id)arg2;
+ (id)readOnlyDataFromURL:(id)arg1;
+ (id)readOnlyDataWithPattern4:(const char *)arg1 filename:(id)arg2;
+ (id)remoteDataWithURL:(id)arg1 digest:(id)arg2 filename:(id)arg3 canDownload:(bool)arg4 downloadPriority:(long long)arg5 context:(id)arg6;
+ (void)removeCullingListener:(id)arg1;
+ (id)requiredAVAssetOptions;
+ (id)resourceNameForFilename:(id)arg1 identifier:(long long)arg2;
+ (void)temporaryNSDataWithPattern4:(const char *)arg1 accessor:(id /* block */)arg2;
+ (id)typeForFilename:(id)arg1;
+ (bool)writeStorage:(id)arg1 toURL:(id)arg2 error:(id*)arg3;

- (void).cxx_destruct;
- (id)AVAsset;
- (id)AVAssetWithOptions:(id)arg1;
- (id)NSData;
- (id)UIImage;
- (void)addDownloadObserver:(id)arg1 options:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (bool)archiveInfoMessage:(struct DataInfo { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_7_1_1; } x7; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_8_1_1; } x8; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_9_1_1; } x9; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_10_1_1; } x10; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_11_1_1; } x11; }*)arg1 archiver:(id)arg2 packageWriter:(id)arg3;
- (id)attributes;
- (bool)bookmarkDataNeedsWriteWithContext:(id)arg1;
- (id)context;
- (id)copyWithContext:(id)arg1;
- (id)createMetadataIfNeeded;
- (void)dealloc;
- (id)description;
- (void)didReceiveRemoteData:(id)arg1 decryptionInfo:(id)arg2 completionQueue:(id)arg3 completion:(id /* block */)arg4;
- (void)didReceiveRemoteDataAtURL:(id)arg1 canMove:(bool)arg2 decryptionInfo:(id)arg3 completionQueue:(id)arg4 completion:(id /* block */)arg5;
- (void)didReceiveRemoteDataWithHandler:(id /* block */)arg1 completionQueue:(id)arg2 completion:(id /* block */)arg3;
- (void)didReceiveRemoteDataWithReadChannel:(id)arg1 completionQueue:(id)arg2 completion:(id /* block */)arg3;
- (void)didReplaceDataContents;
- (id)digest;
- (id)digestString;
- (id)documentResourceLocator;
- (unsigned long long)encodedLength;
- (unsigned long long)encodedLengthIfLocal;
- (id)fallbackColor;
- (id)filename;
- (bool)gilligan_isRemote;
- (unsigned long long)hash;
- (long long)identifier;
- (id)init;
- (id)initWithIdentifier:(long long)arg1 digest:(id)arg2 filename:(id)arg3 lastModificationDate:(id)arg4 storage:(id)arg5 manager:(id)arg6;
- (bool)isAcknowledgedByServer;
- (bool)isApplicationData;
- (bool)isEncrypted;
- (bool)isEqual:(id)arg1;
- (bool)isExternalData;
- (bool)isLengthLikelyToBeGreaterThan:(unsigned long long)arg1;
- (bool)isReadable;
- (bool)isStorageInPackage:(id)arg1;
- (id)lastModificationDate;
- (unsigned long long)length;
- (unsigned long long)lengthIfLocal;
- (id)makeBookmarkDataWithContext:(id)arg1 filename:(id)arg2 error:(out id*)arg3;
- (id)manager;
- (id)metadata;
- (bool)needsDownload;
- (struct CGDataProvider { }*)newCGDataProvider;
- (struct CGImage { }*)newCGImage;
- (struct CGImageSource { }*)newCGImageSource;
- (id)normalizedExtension;
- (unsigned char)packageIdentifier;
- (id)packageLocator;
- (id)pasteboardType;
- (void)performIOChannelReadWithAccessor:(id /* block */)arg1;
- (void)performInputStreamReadWithAccessor:(id /* block */)arg1;
- (id)preferredFilename;
- (void)setAcknowledgedByServer:(bool)arg1;
- (void)setAttributes:(id)arg1;
- (void)setFallbackColor:(id)arg1;
- (void)setFilename:(id)arg1 storage:(id)arg2;
- (void)setFilename:(id)arg1 storage:(id)arg2 ifStorageIs:(id)arg3;
- (void)setMetadata:(id)arg1;
- (void)setStorage:(id)arg1;
- (void)setToCopyOfMetadataIfNil:(id)arg1;
- (void)setUnsafeAttributes:(id)arg1;
- (id)storage;
- (id)temporaryDataStorageURLForRemoteDataStorage:(id)arg1;
- (bool)tsd_allowedToConvertDataAlreadyInDocument;
- (void)tsd_setShouldBeInterpretedAsGenericIfUntagged:(bool)arg1;
- (bool)tsd_shouldBeInterpretedAsGenericIfUntagged;
- (unsigned long long)tsp_length;
- (void)tsp_splitDataWithMaxSize:(unsigned long long)arg1 subdataHandlerBlock:(id /* block */)arg2;
- (id)type;
- (id)unsafeAttributes;
- (void)upgradeFallbackColorIfNeeded;
- (void)willCull;
- (bool)writeToURL:(id)arg1 error:(id*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
