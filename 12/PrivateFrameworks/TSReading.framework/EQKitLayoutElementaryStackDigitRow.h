<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EQKitLayoutElementaryStackDigitRow.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/EQKitLayoutElementaryStackDigitRow.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface EQKitLayoutElementaryStackDigitRow : NSObject <EQKitLayoutElementaryStackRow> {
    long long  mAlignmentShift;
    NSArray * mColumnBoxes;
    unsigned long long  mFirstColumnIndex;
    double  mFollowingSpace;
}

@property (nonatomic, readonly) long long alignmentShift;
@property (nonatomic, readonly) unsigned long long columnCount;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long firstColumnIndex;
@property (nonatomic, readonly) double followingSpace;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool spansStack;
@property (readonly) Class superclass;

- (long long)alignmentShift;
- (unsigned long long)columnCount;
- (void)dealloc;
- (unsigned long long)firstColumnIndex;
- (double)followingSpace;
- (id)initWithChildren:(id)arg1 decimalPoint:(unsigned long long)arg2 position:(long long)arg3 followingSpace:(double)arg4;
- (id)newBoxWithStackWidth:(double)arg1 columnWidthIter:(struct __wrap_iter<double *> { double *x1; })arg2 iterMax:(struct __wrap_iter<double *> { double *x1; })arg3 previousRow:(id)arg4 layoutManager:(const struct EQKitLayoutManager { id x1; double x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; struct __CFString {} *x4; struct Manager {} *x5; struct Config {} *x6; struct EQKitLayoutContext { int (**x_7_1_1)(); struct Info { unsigned long long x_2_2_1; bool x_2_2_2; bool x_2_2_3; bool x_2_2_4; int x_2_2_5; double x_2_2_6; int x_2_2_7; struct __CFString {} *x_2_2_8; } x_7_1_2; double x_7_1_3; double x_7_1_4; double x_7_1_5; id x_7_1_6; double x_7_1_7; struct Collection {} *x_7_1_8; struct __CTFont {} *x_7_1_9; struct CGColor {} *x_7_1_10; struct { unsigned int x_11_2_1 : 1; unsigned int x_11_2_2 : 1; unsigned int x_11_2_3 : 1; } x_7_1_11; struct { double x_12_2_1; double x_12_2_2; double x_12_2_3; } x_7_1_12; } x7; struct stack<unsigned long, std::__1::deque<unsigned long, std::__1::allocator<unsigned long> > > { struct deque<unsigned long, std::__1::allocator<unsigned long> > { struct __split_buffer<unsigned long *, std::__1::allocator<unsigned long *> > { unsigned long long **x_1_3_1; unsigned long long **x_1_3_2; unsigned long long **x_1_3_3; struct __compressed_pair<unsigned long **, std::__1::allocator<unsigned long *> > { unsigned long long **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_8_1_1; } x8; }*)arg5;
- (id)p_crossoutDigitBox:(id)arg1 crossout:(int)arg2 layoutManager:(const struct EQKitLayoutManager { id x1; double x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; struct __CFString {} *x4; struct Manager {} *x5; struct Config {} *x6; struct EQKitLayoutContext { int (**x_7_1_1)(); struct Info { unsigned long long x_2_2_1; bool x_2_2_2; bool x_2_2_3; bool x_2_2_4; int x_2_2_5; double x_2_2_6; int x_2_2_7; struct __CFString {} *x_2_2_8; } x_7_1_2; double x_7_1_3; double x_7_1_4; double x_7_1_5; id x_7_1_6; double x_7_1_7; struct Collection {} *x_7_1_8; struct __CTFont {} *x_7_1_9; struct CGColor {} *x_7_1_10; struct { unsigned int x_11_2_1 : 1; unsigned int x_11_2_2 : 1; unsigned int x_11_2_3 : 1; } x_7_1_11; struct { double x_12_2_1; double x_12_2_2; double x_12_2_3; } x_7_1_12; } x7; struct stack<unsigned long, std::__1::deque<unsigned long, std::__1::allocator<unsigned long> > > { struct deque<unsigned long, std::__1::allocator<unsigned long> > { struct __split_buffer<unsigned long *, std::__1::allocator<unsigned long *> > { unsigned long long **x_1_3_1; unsigned long long **x_1_3_2; unsigned long long **x_1_3_3; struct __compressed_pair<unsigned long **, std::__1::allocator<unsigned long *> > { unsigned long long **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long x_3_3_1; } x_1_2_3; } x_8_1_1; } x8; }*)arg3;
- (void)populateMaxColumnWidths:(struct __wrap_iter<double *> { double *x1; })arg1;
- (void)setFirstColumnIndex:(unsigned long long)arg1;
- (bool)spansStack;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
