<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTLayoutSpace.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTLayoutSpace.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTLayoutSpace : NSObject {
    TSTLayoutSpaceBezierPathCache * mBezierPathCache;
    TSTCoordinateArray * mBodyColumnCoordinates;
    TSTCoordinateArray * mBodyRowCoordinates;
    TSTLayoutSpaceBundle * mBundle;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mCachedAlignedFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mCachedAlignedStrokeFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mCachedFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mCachedStrokeFrame;
    bool  mDrawBlackAndWhite;
    bool  mDrawPreventAntialias;
    struct { 
        struct { 
            unsigned int column; 
            unsigned int row; 
        } topLeft; 
        struct { 
            unsigned int column; 
            unsigned int row; 
        } bottomRight; 
    }  mGridRange;
    TSTCoordinateArray * mHeaderColumnRowCoordinates;
    bool  mHeaderColumnsRepeat;
    TSTCoordinateArray * mHeaderRowColumnCoordinates;
    bool  mHeaderRowsRepeat;
    unsigned short  mInvalidColumnIndex;
    unsigned int  mInvalidRowIndex;
    bool  mInvalidTableOffset;
    bool  mLayoutDirectionIsLeftToRight;
    int  mLayoutSpaceType;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  mLock;
    struct CGPoint { 
        double x; 
        double y; 
    }  mTableOffset;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mTransformFromCanvas;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mTransformFromDevice;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mTransformToCanvas;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mTransformToDevice;
    double  mViewScale;
}

@property (nonatomic, readonly) TSTLayoutSpaceBezierPathCache *bezierPathCache;
@property (nonatomic, readonly) TSTLayoutSpaceBundle *bundle;
@property (nonatomic) bool drawBlackAndWhite;
@property (nonatomic) bool drawPreventAntialias;
@property (nonatomic) bool headerColumnsRepeat;
@property (nonatomic) bool headerRowsRepeat;
@property (nonatomic, readonly) bool isColumns;
@property (nonatomic, readonly) bool isCorner;
@property (nonatomic, readonly) bool isFrozen;
@property (nonatomic, readonly) bool isMain;
@property (nonatomic, readonly) bool isRepeat;
@property (nonatomic, readonly) bool isRows;
@property (nonatomic, readonly) TSTLayout *layout;
@property (nonatomic, readonly) bool layoutDirectionIsLeftToRight;
@property (nonatomic, readonly) int layoutSpaceType;
@property (nonatomic, readonly) TSTMasterLayout *masterLayout;
@property (nonatomic) struct CGPoint { double x1; double x2; } tableOffset;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromCanvas;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromDevice;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToCanvas;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToDevice;
@property (nonatomic) double viewScale;

- (id)bezierPathCache;
- (id)bundle;
- (void)dealloc;
- (id)description;
- (bool)drawBlackAndWhite;
- (bool)drawPreventAntialias;
- (void)drawStrokesInGridRange:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 clearStrokes:(bool)arg2 context:(struct CGContext { }*)arg3;
- (bool)headerColumnsRepeat;
- (bool)headerRowsRepeat;
- (id)initWithLayoutSpaceBundle:(id)arg1 type:(int)arg2;
- (void)invalidateCoordinates;
- (void)invalidateCoordinatesAfterColumn:(unsigned short)arg1;
- (void)invalidateCoordinatesAfterRow:(unsigned int)arg1;
- (void)invalidateTableOffset;
- (bool)isColumns;
- (bool)isCorner;
- (bool)isFrozen;
- (bool)isMain;
- (bool)isRepeat;
- (bool)isRows;
- (id)layout;
- (bool)layoutDirectionIsLeftToRight;
- (int)layoutSpaceType;
- (void)lockForRead;
- (void)lockForWrite;
- (id)masterLayout;
- (void)p_drawStrokeForGridColumn:(unsigned int)arg1 strokeRect:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2 clearStroke:(bool)arg3 shadowType:(int)arg4 context:(struct CGContext { }*)arg5;
- (void)p_drawStrokeForGridRow:(unsigned int)arg1 strokeRect:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2 clearStroke:(bool)arg3 shadowType:(int)arg4 context:(struct CGContext { }*)arg5;
- (bool)p_getLayoutDirectionLeftToRight;
- (void)setDrawBlackAndWhite:(bool)arg1;
- (void)setDrawPreventAntialias:(bool)arg1;
- (void)setHeaderColumnsRepeat:(bool)arg1;
- (void)setHeaderRowsRepeat:(bool)arg1;
- (void)setTableOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setTransformFromCanvas:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setTransformFromDevice:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setTransformToCanvas:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setTransformToDevice:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setViewScale:(double)arg1;
- (struct CGPoint { double x1; double x2; })tableOffset;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromCanvas;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromDevice;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToCanvas;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToDevice;
- (void)unlock;
- (int)validate:(id)arg1;
- (void)validateCachedFrames;
- (int)validateCoordinateCache:(id)arg1;
- (void)validateCoordinateDirection;
- (int)validateTableOffset:(id)arg1;
- (double)viewScale;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
