<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDShapeLayout.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDShapeLayout.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDShapeLayout : TSDStyledLayout {
    struct { 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } cachedRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } originalCachedRect; 
        unsigned int isValid; 
    }  mCachedAlignmentFrame;
    struct { 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } cachedRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } originalCachedRect; 
        unsigned int isValid; 
    }  mCachedAlignmentFrameInRoot;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mCachedAlignmentFrameInRootTransformInRoot;
    TSUBezierPath * mCachedClippedPath;
    struct { 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } cachedRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } originalCachedRect; 
        unsigned int isValid; 
    }  mCachedClippedPathRotatedStroked;
    struct { 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } cachedRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } originalCachedRect; 
        unsigned int isValid; 
    }  mCachedClippedPathStroked;
    TSDEditableBezierPathSource * mCachedEditableBezierPathSource;
    TSUBezierPath * mCachedPath;
    struct { 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } cachedRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } originalCachedRect; 
        unsigned int isValid; 
    }  mCachedPathBoundsStruct;
    struct { 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } cachedRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } originalCachedRect; 
        unsigned int isValid; 
    }  mCachedPathBoundsWithoutStrokeStruct;
    bool  mCachedPathIsLineSegment;
    bool  mCachedPathIsOpen;
    TSDPathSource * mCachedPathSource;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mClippedPathRotatedTransform;
    TSDFill * mDynamicFill;
    TSDMutableStroke * mDynamicStroke;
    NSArray * mDynamicStrokeOffsetArray;
    long long  mHeadCutSegment;
    double  mHeadCutT;
    double  mHeadLineEndAngle;
    struct CGPoint { 
        double x; 
        double y; 
    }  mHeadLineEndPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  mHeadPoint;
    TSDInfoGeometry * mInitialInfoGeometry;
    bool  mIsDynamicallyInvisible;
    TSDPathSource * mOriginalShrunkenPathSource;
    TSDInfoGeometry * mResizeInfoGeometry;
    TSDPathSource * mResizePathSource;
    struct { 
        unsigned int path : 1; 
        unsigned int pathIsOpen : 1; 
        unsigned int pathIsLineSegment : 1; 
        unsigned int headAndTail : 1; 
        unsigned int headLineEnd : 1; 
        unsigned int tailLineEnd : 1; 
        unsigned int clippedPath : 1; 
    }  mShapeInvalidFlags;
    TSDPathSource * mShrunkenPathSource;
    long long  mTailCutSegment;
    double  mTailCutT;
    double  mTailLineEndAngle;
    struct CGPoint { 
        double x; 
        double y; 
    }  mTailLineEndPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  mTailPoint;
}

@property (nonatomic, readonly) TSUBezierPath *clippedPathForLineEnds;
@property (nonatomic, readonly) TSDFill *fill;
@property (nonatomic, readonly) double headLineEndAngle;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } headLineEndPoint;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } headPoint;
@property (nonatomic, readonly) bool isFreehandDrawingSpacerShape;
@property (nonatomic, readonly) bool isTailEndOnLeft;
@property (nonatomic, readonly) TSDInfoGeometry *layoutInfoGeometry;
@property (nonatomic, readonly) TSUBezierPath *path;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } pathBounds;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } pathBoundsWithoutStroke;
@property (nonatomic, readonly) bool pathIsLineSegment;
@property (nonatomic, readonly) bool pathIsOpen;
@property (nonatomic, readonly) TSDPathSource *pathSource;
@property (nonatomic, readonly) TSDShapeInfo *shapeInfo;
@property (nonatomic, readonly) TSDLineEnd *strokeHeadLineEnd;
@property (nonatomic, readonly) TSDLineEnd *strokeTailLineEnd;
@property (nonatomic, readonly) double tailLineEndAngle;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } tailLineEndPoint;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } tailPoint;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } unclippedHeadPoint;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } unclippedTailPoint;

- (void).cxx_destruct;
- (void)aliasPathForScale:(double)arg1 adjustedStroke:(id*)arg2 adjustedPath:(id*)arg3 startDelta:(struct CGPoint { double x1; double x2; }*)arg4 endDelta:(struct CGPoint { double x1; double x2; }*)arg5;
- (void)aliasPathForScale:(double)arg1 originalStroke:(id)arg2 adjustedStroke:(id*)arg3 adjustedPath:(id*)arg4 startDelta:(struct CGPoint { double x1; double x2; }*)arg5 endDelta:(struct CGPoint { double x1; double x2; }*)arg6;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })aliasedAlignmentFrameForScale:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentFrameInRoot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForStandardKnobs;
- (bool)canBeIntersected;
- (bool)canResetTextAndObjectHandles;
- (struct CGPoint { double x1; double x2; })centerForConnecting;
- (id)clippedPathForLineEnds;
- (id)computeLayoutGeometry;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })computeLayoutTransform;
- (void)dealloc;
- (id)editablePathSource;
- (id)fill;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForCulling;
- (double)headLineEndAngle;
- (struct CGPoint { double x1; double x2; })headLineEndPoint;
- (struct CGPoint { double x1; double x2; })headPoint;
- (id)i_computeWrapPath;
- (id)i_computeWrapPathClosed:(bool)arg1;
- (id)initWithInfo:(id)arg1;
- (void)invalidate;
- (void)invalidateFrame;
- (void)invalidatePath;
- (void)invalidatePathBounds;
- (bool)isFreehandDrawingSpacerShape;
- (bool)isInvisible;
- (bool)isInvisibleAutosizingShape;
- (bool)isTailEndOnLeft;
- (id)layoutGeometryFromInfo;
- (id)layoutInfoGeometry;
- (double)lineEndScale:(bool)arg1;
- (struct CGSize { double x1; double x2; })minimumSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_boundsOfLineEndForHead:(bool)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_cachedClippedPathStroked;
- (id)p_cachedPath;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_cachedPathBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_cachedPathBoundsWithoutStroke;
- (bool)p_cachedPathIsLineSegment;
- (bool)p_cachedPathIsOpen;
- (id)p_createClippedPath;
- (void)p_invalidateClippedPath;
- (void)p_invalidateHead;
- (void)p_invalidateTail;
- (id)p_unitePath:(id)arg1 withLineEndForHead:(bool)arg2 stroke:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_updatedCachedClipRectIfNeededForRotation:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)p_validateHeadAndTail;
- (void)p_validateHeadLineEnd;
- (void)p_validateTailLineEnd;
- (id)path;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pathBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pathBoundsWithoutStroke;
- (bool)pathIsLineSegment;
- (bool)pathIsOpen;
- (id)pathSource;
- (void)processChangedProperty:(int)arg1;
- (id)reliedOnLayouts;
- (void)setGeometry:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })shapeFrameWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })shapeFrameWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 strokeDrawOptions:(unsigned long long)arg2;
- (id)shapeInfo;
- (bool)shouldAdjustForStrokeWidthForCollabCursor;
- (bool)shouldBeDisplayedInShowMode;
- (id)smartPathSource;
- (id)stroke;
- (id)strokeHeadLineEnd;
- (id)strokeTailLineEnd;
- (bool)supportsCalloutAttributes;
- (bool)supportsResize;
- (bool)supportsRotation;
- (double)tailLineEndAngle;
- (struct CGPoint { double x1; double x2; })tailLineEndPoint;
- (struct CGPoint { double x1; double x2; })tailPoint;
- (id)textWrapperForExteriorWrap;
- (void)transferLayoutGeometryToInfo:(id)arg1 withAdditionalTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 assertIfInDocument:(bool)arg3;
- (struct CGPoint { double x1; double x2; })unclippedHeadPoint;
- (struct CGPoint { double x1; double x2; })unclippedTailPoint;
- (void)validate;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
