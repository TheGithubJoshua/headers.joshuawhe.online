<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTWidthHeightCache.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTWidthHeightCache.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTWidthHeightCache : NSObject {
    struct vector<TSTWidthHeightCache_Private::WHCCol, std::__1::allocator<TSTWidthHeightCache_Private::WHCCol> > { 
        struct WHCCol {} *__begin_; 
        struct WHCCol {} *__end_; 
        struct __compressed_pair<TSTWidthHeightCache_Private::WHCCol *, std::__1::allocator<TSTWidthHeightCache_Private::WHCCol> > { 
            struct WHCCol {} *__value_; 
        } __end_cap_; 
    }  _fittingColumnWidth;
    struct vector<TSTWidthHeightCache_Private::WHCRow, std::__1::allocator<TSTWidthHeightCache_Private::WHCRow> > { 
        struct WHCRow {} *__begin_; 
        struct WHCRow {} *__end_; 
        struct __compressed_pair<TSTWidthHeightCache_Private::WHCRow *, std::__1::allocator<TSTWidthHeightCache_Private::WHCRow> > { 
            struct WHCRow {} *__value_; 
        } __end_cap_; 
    }  _fittingRowHeight;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  _lock;
    struct vector<double, std::__1::allocator<double> > { 
        double *__begin_; 
        double *__end_; 
        struct __compressed_pair<double *, std::__1::allocator<double> > { 
            double *__value_; 
        } __end_cap_; 
    }  _modelColumnWidth;
    struct vector<double, std::__1::allocator<double> > { 
        double *__begin_; 
        double *__end_; 
        struct __compressed_pair<double *, std::__1::allocator<double> > { 
            double *__value_; 
        } __end_cap_; 
    }  _modelRowHeight;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_increaseColCapacity:(unsigned int)arg1;
- (void)_increaseRowCapacity:(unsigned int)arg1;
- (void)_resetToRows:(unsigned int)arg1 andNumCols:(unsigned int)arg2;
- (void)dealloc;
- (double)getFitHeightForRow:(unsigned int)arg1;
- (double)getFitWidthForCol:(unsigned short)arg1;
- (double)getModelHeightForRow:(unsigned int)arg1;
- (double)getModelWidthForColumn:(unsigned short)arg1;
- (id)init;
- (id)initWithNumRows:(unsigned int)arg1 andNumCols:(unsigned int)arg2;
- (void)logInternalState;
- (void)p_deleteColsStartingWith:(unsigned short)arg1 upToColumn:(unsigned short)arg2;
- (void)p_deleteRowsStartingWith:(unsigned int)arg1 upToRow:(unsigned int)arg2;
- (void)p_insertCols:(unsigned int)arg1 atColumn:(unsigned short)arg2;
- (void)p_insertRows:(unsigned int)arg1 atRow:(unsigned int)arg2;
- (void)p_moveColsFrom:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 toCol:(unsigned short)arg2;
- (void)p_moveRowsFrom:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 toRow:(unsigned int)arg2;
- (void)p_moveRowsUsingShuffleMapping:(id)arg1;
- (void)p_resetFittingWidthsHeightsForRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)resetAllFittingColumnWidths;
- (void)resetFittingColumnWidthsStartingWith:(unsigned short)arg1 upToColumn:(unsigned short)arg2;
- (void)resetFittingHeightsFromCollection:(id)arg1;
- (void)resetFittingRowHeightsStartingWith:(unsigned int)arg1 upToRow:(unsigned int)arg2;
- (void)resetModelCache;
- (void)resetModelCacheRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setFitDims:(struct CGSize { double x1; double x2; })arg1 forCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)setFitHeight:(double)arg1 forCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)setFitWidth:(double)arg1 forCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)setFittingHeightsFromCollection:(id)arg1;
- (void)setModelHeight:(double)arg1 forRow:(unsigned int)arg2;
- (void)setModelWidth:(double)arg1 forColumn:(unsigned short)arg2;
- (id)validateChangeDescriptors:(id)arg1 numberOfRows:(unsigned int)arg2 numberOfColumns:(unsigned short)arg3;
- (bool)verifyDims:(struct CGSize { double x1; double x2; })arg1 forCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
