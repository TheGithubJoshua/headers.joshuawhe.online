<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDBitmapImageProvider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDBitmapImageProvider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDBitmapImageProvider : TSDImageProvider {
    TSUOnce * mCheckIfValidOnce;
    unsigned long long  mDPI;
    unsigned long long  mEstimatedSize;
    NSObject<OS_dispatch_semaphore> * mFlushableContentLock;
    bool  mHasFlushableContent;
    struct CGImage { } * mImage;
    unsigned long long  mImageGamut;
    NSObject<OS_dispatch_queue> * mImageQueue;
    struct CGImageSource { } * mImageSource;
    bool  mIsOpaque;
    bool  mIsValid;
    struct CGSize { 
        double width; 
        double height; 
    }  mNaturalSize;
    long long  mOrientation;
    NSMutableDictionary * mResampledImages;
    unsigned long long  mValidationStatus;
}

@property (nonatomic, readonly) struct CGImageSource { }*CGImageSource;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } dpiAdjustedFillSize;
@property (nonatomic, readonly) unsigned long long imageDPI;
@property (nonatomic, readonly) bool isOpaque;
@property (nonatomic, readonly) long long orientation;
@property (nonatomic, readonly) unsigned long long validationStatus;

+ (struct CGImage { }*)CGImageForImageData:(id)arg1;
+ (id)TSUImageForImageData:(id)arg1;
+ (void)clearCacheForData:(id)arg1;
+ (void)initialize;
+ (struct CGSize { double x1; double x2; })naturalSizeForImageData:(id)arg1;
+ (id)p_cacheDirectoryForData:(id)arg1;
+ (id)p_cacheStringForData:(id)arg1;
+ (struct CGImageSource { }*)p_newImageSourceFromCacheForData:(id)arg1 withFilenameSuffix:(id)arg2;
+ (struct CGImageSource { }*)p_newImageSourceFromFilePath:(id)arg1;

- (void).cxx_destruct;
- (struct CGImage { }*)CGImageForNaturalSize;
- (struct CGImage { }*)CGImageForSize:(struct CGSize { double x1; double x2; })arg1 inContext:(struct CGContext { }*)arg2 orContentsScaleProvider:(id)arg3;
- (struct CGImage { }*)CGImageResampledToSize:(struct CGSize { double x1; double x2; })arg1 lowQuality:(bool)arg2;
- (struct CGImageSource { }*)CGImageSource;
- (void)dealloc;
- (struct CGSize { double x1; double x2; })dpiAdjustedFillSize;
- (struct CGSize { double x1; double x2; })dpiAdjustedNaturalSize;
- (void)drawImageInContext:(struct CGContext { }*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)flush;
- (void)i_commonInit;
- (unsigned long long)i_flushableMemoryEstimate;
- (bool)i_hasFlushableContent;
- (unsigned long long)imageDPI;
- (unsigned long long)imageGamut;
- (bool)isOpaque;
- (bool)isValid;
- (struct CGSize { double x1; double x2; })naturalSize;
- (long long)orientation;
- (id)p_cacheSuffixForScale:(unsigned long long)arg1;
- (void)p_configureOrientationAndSizeFromImageSource:(struct CGImageSource { }*)arg1 andImage:(struct CGImage { }*)arg2;
- (void)p_loadFullSizedImageIfNecessary;
- (void)p_loadImageMetadata;
- (struct CGImage { }*)p_loadOrCreateResampledImageWithReciprocalScale:(unsigned long long)arg1;
- (void)p_loadSourceRefIfNecessary;
- (struct CGImageSource { }*)p_newCGImageSource;
- (struct CGImageSource { }*)p_newCGImageSourceForTemporaryUse;
- (struct CGImage { }*)p_newImageFromSource:(struct CGImageSource { }*)arg1;
- (struct CGImageSource { }*)p_newImageOfSize:(struct CGSize { double x1; double x2; })arg1 andWriteToCacheWithSuffix:(id)arg2;
- (long long)p_reciprocalScaleForImageSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGImage { }*)p_resampledImageOfReciprocalScale:(unsigned long long)arg1;
- (bool)p_shouldScaleRetinaScreenshots;
- (void)p_updateEstimatedSize;
- (unsigned long long)validationStatus;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
