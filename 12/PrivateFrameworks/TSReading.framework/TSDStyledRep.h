<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDStyledRep.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDStyledRep.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDStyledRep : TSDRep <CALayerDelegate> {
    struct { 
        unsigned int shadowInvalid : 1; 
    }  mFlags;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isInvisible;
@property (nonatomic, readonly) double opacity;
@property (nonatomic, readonly) TSDReflection *reflection;
@property (nonatomic, readonly) TSDShadow *shadow;
@property (nonatomic, readonly) bool shouldShowReflection;
@property (nonatomic, readonly) bool shouldShowShadow;
@property (nonatomic, readonly) TSDStyledInfo *styledInfo;
@property (nonatomic, readonly) TSDStyledLayout *styledLayout;
@property (readonly) Class superclass;

- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)calculateTextureClipBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 andOffset:(struct CGPoint { double x1; double x2; }*)arg2 withTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 andRectOnCanvas:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 textureDescription:(id)arg5 isUsingImageTexture:(bool)arg6;
- (bool)canDrawShadowInOneStepWithChildren:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clipRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clipRectWithoutEffects;
- (void)dealloc;
- (id)description;
- (void)drawGradientWithAlphaOverReflection:(struct CGContext { }*)arg1 applyingOpacity:(bool)arg2 reflectionSize:(struct CGSize { double x1; double x2; })arg3;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1 withContent:(bool)arg2 strokeDrawOptions:(unsigned long long)arg3 withOpacity:(bool)arg4 forAlphaOnly:(bool)arg5 drawChildren:(bool)arg6 keepingChildrenPassingTest:(id /* block */)arg7;
- (void)drawInContextWithoutEffectsForAlphaOnly:(struct CGContext { }*)arg1;
- (void)drawInContextWithoutEffectsOrChildren:(struct CGContext { }*)arg1;
- (void)drawInContextWithoutEffectsOrChildrenForAlphaOnly:(struct CGContext { }*)arg1;
- (void)drawReflectionInContext:(struct CGContext { }*)arg1 drawChildren:(bool)arg2;
- (void)drawReflectionInContext:(struct CGContext { }*)arg1 withTransparencyLayer:(bool)arg2 applyingOpacity:(bool)arg3 shouldClipGradient:(bool)arg4 withBlock:(id /* block */)arg5;
- (void)drawReflectionIntoReflectionFrameInContext:(struct CGContext { }*)arg1 withTransparencyLayer:(bool)arg2 applyingOpacity:(bool)arg3 drawChildren:(bool)arg4;
- (void)drawShadowInContext:(struct CGContext { }*)arg1 withChildren:(bool)arg2 withDrawableOpacity:(bool)arg3;
- (bool)isInvisible;
- (struct CGImage { }*)newFrameMaskForViewScale:(double)arg1 frameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (struct CGImage { }*)newShadowImageWithSize:(struct CGSize { double x1; double x2; })arg1 shadow:(id)arg2 drawSelector:(SEL)arg3 unflipped:(bool)arg4;
- (struct CGImage { }*)newShadowImageWithSize:(struct CGSize { double x1; double x2; })arg1 unflipped:(bool)arg2 withChildren:(bool)arg3;
- (double)opacity;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_clipRectInRootForTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 includeShadow:(bool)arg2 includeReflection:(bool)arg3;
- (void)p_drawReflectionInContext:(struct CGContext { }*)arg1;
- (void)p_drawReflectionIntoReflectionFrameInContext:(struct CGContext { }*)arg1 withTransparencyLayer:(bool)arg2 applyingOpacity:(bool)arg3 shouldClipGradient:(bool)arg4 withBlock:(id /* block */)arg5;
- (struct CGImage { }*)p_newReflectionImageWithSize:(struct CGSize { double x1; double x2; })arg1 applyOpacity:(bool)arg2 viewScale:(double)arg3 withBlock:(id /* block */)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_rectWithEffectsAppliedToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 additionalTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 includeShadow:(bool)arg3 includeReflection:(bool)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_reflectionRenderableFrameInRoot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectWithEffectsAppliedToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)reflection;
- (void)setTextureAttributes:(id)arg1 textureBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)shadow;
- (bool)shouldShowReflection;
- (bool)shouldShowShadow;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })strokeBoundsWithOptions:(unsigned long long)arg1 fallbackBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)styledInfo;
- (id)styledLayout;
- (id)textureForDescription:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
