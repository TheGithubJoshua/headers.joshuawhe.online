<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSSStylesheet.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSSStylesheet.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSSStylesheet : TSPObject <TSKTransformableObject> {
    bool  mBaseStyleSetUpdated;
    bool  mCanCullStyles;
    TSSStylesheet * mChild;
    NSMutableDictionary * mIdentifierToStyleMap;
    bool  mIsLocked;
    TSSStylesheet * mParent;
    TSURetainedPointerKeyDictionary * mParentToChildrenStyleMap;
    TSUMutableRetainedPointerSet * mStyles;
    NSMutableDictionary * mUUIDToStyleMap;
}

@property (nonatomic, readonly) bool baseStyleSetUpdated;
@property (nonatomic, readonly) NSSet *baseStyles;
@property (nonatomic) bool canCullStyles;
@property (nonatomic) TSSStylesheet *child;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) TSWPParagraphStyle *defaultPresenterNotesParagraphStyle;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isLocked;
@property (nonatomic, readonly) TSSStylesheet *parent;
@property (nonatomic, readonly) NSSet *styles;
@property (readonly) Class superclass;

+ (id)p_presenterNotesListStyleIdentifierForListLabelType:(int)arg1;
+ (id)presenterNotesParagraphStyleIdentifier;
+ (id)variationMapForVaryingCharacterStyle:(id)arg1 overParagraphStyle:(id)arg2 withPropertyMap:(id)arg3;

- (void).cxx_destruct;
- (id)_defaultCharacterStyleWasCreated:(bool*)arg1;
- (id)_defaultColumnStyleWasCreated:(bool*)arg1;
- (id)_defaultListStyleWasCreated:(bool*)arg1;
- (id)_defaultParagraphStyleWasCreated:(bool*)arg1;
- (id)_defaultStyleOfClass:(Class)arg1 withIdentifier:(id)arg2 wasCreated:(bool*)arg3 usingBlock:(id /* block */)arg4;
- (id)_defaultTOCEntryStyleWasCreated:(bool*)arg1;
- (id)_hyperlinkStyleWasCreated:(bool*)arg1;
- (void)addDefaultPresenterNotesStylesIfAbsent;
- (id)addDuplicateOfStyle:(id)arg1 withIdentifier:(id)arg2;
- (void)addStyle:(id)arg1;
- (void)addStyle:(id)arg1 withIdentifier:(id)arg2;
- (void)addStyle:(id)arg1 withParent:(id)arg2;
- (void)addStyle:(id)arg1 withParent:(id)arg2 identifier:(id)arg3;
- (void)addStyle:(id)arg1 withParent:(id)arg2 identifier:(id)arg3 shouldDoDOLC:(bool)arg4;
- (id)allPresenterNotesStyles;
- (bool)baseStyleSetUpdated;
- (id)baseStyles;
- (bool)canCullStyles;
- (bool)cascadedContainsStyle:(id)arg1;
- (id)cascadedStyleWithIdentifier:(id)arg1;
- (id)cascadedStyleWithIdentifier:(id)arg1 componentMask:(int)arg2;
- (id)cascadedStylesPassingTest:(id /* block */)arg1;
- (id)child;
- (id)childrenOfStyle:(id)arg1;
- (bool)containsStyle:(id)arg1;
- (id)defaultCharacterStyle;
- (id)defaultColumnStyle;
- (id)defaultEquationStyle;
- (id)defaultListStyle;
- (id)defaultParagraphStyle;
- (id)defaultPresenterNotesParagraphStyle;
- (id)defaultTOCEntryStyle;
- (unsigned int)delayedArchivingPriority;
- (unsigned long long)descendantCount;
- (void)didLoadChildObjectFromDocumentSupport:(id)arg1;
- (void)enumerateCascadedStylesUsingBlock:(id /* block */)arg1;
- (void)enumerateStylesUsingBlock:(id /* block */)arg1;
- (id)firstCascadedStylePassingTest:(id /* block */)arg1;
- (id)firstUnidentifiedRootStyleOfClass:(Class)arg1 withOverridePropertyMap:(id)arg2;
- (unsigned long long)hash;
- (id)headerAndFooterStyle;
- (id)hyperlinkStyle;
- (id)identifiedStyles;
- (id)identifiedStylesOfClass:(Class)arg1;
- (id)initWithContext:(id)arg1;
- (id)initWithContext:(id)arg1 canCullStyles:(bool)arg2;
- (bool)isAncestorOf:(id)arg1;
- (bool)isChildOf:(id)arg1;
- (bool)isDescendentOf:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isLocked;
- (bool)isParentOf:(id)arg1;
- (void)loadFromUnarchiver:(id)arg1;
- (void)moveAllStylestoStylesheet:(id)arg1 stripIdentifiers:(bool)arg2;
- (void)moveStyle:(id)arg1 toStylesheet:(id)arg2 stripIdentifiers:(bool)arg3 overwriteIdentifiers:(bool)arg4;
- (id)namedStylesOfClass:(Class)arg1;
- (id)pVariationOfStyle:(id)arg1 propertyMap:(id)arg2 matchStyles:(id)arg3 context:(id)arg4;
- (void)p_addStyle:(id)arg1 withParent:(id)arg2 identifier:(id)arg3;
- (void)p_addStyle:(id)arg1 withParent:(id)arg2 identifier:(id)arg3 shouldDoDOLC:(bool)arg4;
- (void)p_addStyleToParentChildren:(id)arg1;
- (struct set<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree<long long, std::__1::less<long long>, std::__1::allocator<long long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<long long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)p_allFilteredIdentifiersInArchive:(const struct StylesheetArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct RepeatedPtrField<TSS::StylesheetArchive_IdentifiedStyleEntry> { struct Arena {} *x_6_1_1; int x_6_1_2; int x_6_1_3; struct Rep {} *x_6_1_4; } x6; struct RepeatedPtrField<TSS::StylesheetArchive_StyleChildrenEntry> { struct Arena {} *x_7_1_1; int x_7_1_2; int x_7_1_3; struct Rep {} *x_7_1_4; } x7; struct Reference {} *x8; bool x9; bool x10; }*)arg1 unarchiver:(id)arg2;
- (id)p_boxedLabelTypesForNotesListStyles;
- (id)p_defaultPresenterNotesListStylePropertyMapForListLabelType:(int)arg1;
- (id)p_defaultPresenterNotesParagraphStylePropertyMap;
- (id)p_defaultPresenterNotesParagraphStyleWithContext:(id)arg1;
- (id)p_newDefaultPresenterNotesListStyleWithContext:(id)arg1 forListLabelType:(int)arg2;
- (void)p_removeStyle:(id)arg1;
- (void)p_removeStyleFromParentChildren:(id)arg1;
- (void)p_setIdentifier:(id)arg1 ofStyle:(id)arg2;
- (void)p_setParent:(id)arg1 ofStyle:(id)arg2;
- (bool)p_shouldDoDOLCForStyle:(id)arg1;
- (id)p_stylesPassingTest:(id /* block */)arg1 cascade:(bool)arg2;
- (void)p_upgradeDefaultPresenterNotesStylesResetExisting:(bool)arg1;
- (id)packageLocator;
- (id)parent;
- (void)removeStyle:(id)arg1;
- (id)repairOrReplaceErrantStyle:(id)arg1;
- (void)resetBaseStyleSetUpdatedFlag;
- (id)rootAncestor;
- (void)saveStyles:(id)arg1 toArchiver:(id)arg2;
- (void)saveToArchiver:(id)arg1;
- (void)setCanCullStyles:(bool)arg1;
- (void)setChild:(id)arg1;
- (void)setIdentifier:(id)arg1 ofStyle:(id)arg2;
- (void)setIsLocked:(bool)arg1;
- (void)setParent:(id)arg1;
- (void)setParent:(id)arg1 ofStyle:(id)arg2;
- (bool)shouldDelayArchiving;
- (id)stickyCommentStyles;
- (void)style:(id)arg1 didChangeUUIDToValue:(id)arg2 fromValue:(id)arg3;
- (id)styleWithIdentifier:(id)arg1;
- (id)styleWithIdentifier:(id)arg1 componentMask:(int)arg2;
- (id)styleWithUUIDIfAvailable:(id)arg1;
- (id)styles;
- (id)stylesOfClass:(Class)arg1;
- (id)stylesPassingTest:(id /* block */)arg1;
- (id)stylesWithName:(id)arg1;
- (void)unlockStylesheetForDurationOfBlock:(id /* block */)arg1;
- (id)unusedStyleIdentifierWithPackageString:(id)arg1 styleDescriptor:(id)arg2 contentTag:(id)arg3;
- (void)upgradeDefaultPresenterNotesStyles;
- (id)variationOfCharacterStyle:(id)arg1 paragraphStyle:(id)arg2 propertyMap:(id)arg3;
- (id)variationOfStyle:(id)arg1 exactPropertyMap:(id)arg2;
- (id)variationOfStyle:(id)arg1 propertyMap:(id)arg2;
- (id)variationOfStyle:(id)arg1 propertyMap:(id)arg2 context:(id)arg3;
- (id)variationOfStyle:(id)arg1 propertyMap:(id)arg2 matchStyles:(id)arg3 context:(id)arg4;
- (id)variationOfStyleMatchingStyle:(id)arg1 withNewParentStyle:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
