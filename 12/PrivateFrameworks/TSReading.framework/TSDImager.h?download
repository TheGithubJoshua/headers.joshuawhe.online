/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDImager : NSObject <TSDCanvasDelegate, TSDDynamicOverridingCanvasDelegate> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mActualScaledClipRect;
    TSUColor * mBackgroundColor;
    TSDCanvas * mCanvas;
    bool  mDistortedToMatch;
    TSKDocumentRoot * mDocumentRoot;
    bool  mDrawingIntoPDF;
    NSMapTable * mDynamicOverrides;
    bool  mHasBeenUsed;
    bool  mImageIsRenderingForMovie;
    bool  mImageMustHaveEvenDimensions;
    NSObject<TSDInfo> * mInfoToDrawBeneath;
    id /* block */  mInfoToDrawBeneathFilter;
    NSArray * mInfos;
    bool  mIsPrinting;
    struct CGSize { 
        double width; 
        double height; 
    }  mMaximumScaledImageSize;
    bool  mMayBeReused;
    id /* block */  mPostRenderAction;
    NSSet * mPreviousRenderDatasNeedingDownload;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mReusableActualScaledClipRect;
    struct CGContext { } * mReusableBitmapContext;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mReusableBounds;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mReusableIntegralBounds;
    struct CGSize { 
        double width; 
        double height; 
    }  mReusableScaledImageSize;
    struct CGSize { 
        double width; 
        double height; 
    }  mScaledImageSize;
    bool  mShouldReuseBitmapContext;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mUnscaledClipRect;
    bool  mUseScaledImageSize;
    double  mViewScale;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } actualScaledClipRect;
@property (nonatomic, copy) TSUColor *backgroundColor;
@property (nonatomic, readonly) TSDCanvas *canvas;
@property (nonatomic, readonly) <TSDCanvasProxyDelegate> *canvasProxyDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool distortedToMatch;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool imageIsRenderingForMovie;
@property (nonatomic) bool imageMustHaveEvenDimensions;
@property (nonatomic, retain) NSArray *infos;
@property (nonatomic) bool isPrinting;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumScaledImageSize;
@property (nonatomic) bool mayBeReused;
@property (nonatomic, copy) NSSet *previousRenderDatasNeedingDownload;
@property (nonatomic) struct CGSize { double x1; double x2; } scaledImageSize;
@property (nonatomic) bool shouldReuseBitmapContext;
@property (readonly) Class superclass;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unscaledClipRect;
@property (nonatomic) double viewScale;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })actualScaledClipRect;
- (id)backgroundColor;
- (id)canvas;
- (void)dealloc;
- (bool)distortedToMatch;
- (id)documentRoot;
- (bool)drawPageInContext:(struct CGContext { }*)arg1 createPage:(bool)arg2;
- (id)dynamicOverrideForRep:(id)arg1;
- (void)i_setDrawsOnlyBelowInfo:(id)arg1;
- (bool)imageIsRenderingForMovie;
- (bool)imageMustHaveEvenDimensions;
- (id)infos;
- (id)init;
- (id)initWithDocumentRoot:(id)arg1;
- (id)initWithDocumentRoot:(id)arg1 renderForWideGamut:(bool)arg2;
- (bool)isCanvasDrawingIntoPDF:(id)arg1;
- (bool)isPrinting;
- (bool)isPrintingCanvas;
- (struct CGSize { double x1; double x2; })maximumScaledImageSize;
- (bool)mayBeReused;
- (struct CGImage { }*)newImage;
- (void)p_assertHasReadLock;
- (bool)p_configureCanvas;
- (void)p_drawPageInContext:(struct CGContext { }*)arg1 createPage:(bool)arg2;
- (struct CGSize { double x1; double x2; })p_evenDimensionsWithSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGImage { }*)p_newImageInReusableContext;
- (id)pdfData;
- (id)pngData;
- (id)previousRenderDatasNeedingDownload;
- (struct CGSize { double x1; double x2; })scaledImageSize;
- (void)setBackgroundColor:(id)arg1;
- (void)setDistortedToMatch:(bool)arg1;
- (void)setDynamicOverride:(id)arg1 forInfo:(id)arg2;
- (void)setImageIsRenderingForMovie:(bool)arg1;
- (void)setImageMustHaveEvenDimensions:(bool)arg1;
- (void)setInfos:(id)arg1;
- (void)setInfos:(id)arg1 allowLayoutIfNeeded:(bool)arg2;
- (void)setIsPrinting:(bool)arg1;
- (void)setMaximumScaledImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMayBeReused:(bool)arg1;
- (void)setPostRenderAction:(id /* block */)arg1;
- (void)setPreviousRenderDatasNeedingDownload:(id)arg1;
- (void)setScaledImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setShouldReuseBitmapContext:(bool)arg1;
- (void)setUnscaledClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setViewScale:(double)arg1;
- (bool)shouldReuseBitmapContext;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unscaledClipRect;
- (double)viewScale;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleScaledBoundsForClippingRepsOnCanvas:(id)arg1;

@end
