/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSWPStorageMeasurer : NSObject <TSWPColumnMetrics, TSWPLayoutOwner, TSWPLayoutTarget> {
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchor;
    NSMutableArray * _columns;
    unsigned int  _flags;
    struct CGSize { 
        double width; 
        double height; 
    }  _maxSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _minSize;
    TSWPStorage * _storage;
}

@property (nonatomic, readonly) bool alwaysStartsNewTarget;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } anchorPoint;
@property (nonatomic, retain) NSMutableArray *anchoredDrawablesForRelayout;
@property (nonatomic, readonly) unsigned long long autosizeFlags;
@property (nonatomic, readonly) TSDCanvas *canvas;
@property (nonatomic, readonly) unsigned long long columnCount;
@property (nonatomic, readonly) NSMutableArray *columns;
@property (nonatomic, readonly) bool columnsAreLeftToRight;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } currentSize;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <TSWPFootnoteHeightMeasurer> *footnoteHeightMeasurer;
@property (nonatomic, readonly) <TSWPFootnoteMarkProvider> *footnoteMarkProvider;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct __CFLocale { }*hyphenationLocale;
@property (nonatomic, readonly) bool isInstructional;
@property (nonatomic, readonly) bool isLinked;
@property (nonatomic, readonly) bool layoutIsValid;
@property (nonatomic, readonly) TSWPPadding *layoutMargins;
@property (nonatomic, readonly) bool marginsAreMirrored;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } maskRect;
@property (nonatomic, readonly) double maxAnchorInBlockDirection;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maxSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } minSize;
@property (nonatomic, readonly) int naturalAlignment;
@property (nonatomic, readonly) int naturalDirection;
@property (nonatomic, readonly) TSPObject<TSDHint> *nextTargetFirstChildHint;
@property (nonatomic, readonly) <TSWPOffscreenColumn> *nextTargetFirstColumn;
@property (nonatomic, readonly) NSObject<TSWPTopicNumberHints> *nextTargetTopicNumbers;
@property (nonatomic, readonly) unsigned long long pageCount;
@property (nonatomic, readonly) unsigned long long pageNumber;
@property (nonatomic, readonly) TSDLayout *parentLayoutForInlineAttachments;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } position;
@property (nonatomic, readonly) <TSWPOffscreenColumn> *previousTargetLastColumn;
@property (nonatomic, readonly) NSObject<TSWPTopicNumberHints> *previousTargetTopicNumbers;
@property (nonatomic, readonly) bool repShouldPreventCaret;
@property (nonatomic, readonly) bool shouldHyphenate;
@property (nonatomic, readonly) bool shouldWrapAroundExternalDrawables;
@property (nonatomic, readonly) bool shrinkTextToFit;
@property (nonatomic, readonly) TSWPStorage *storage;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool textIsVertical;
@property (nonatomic, readonly) double textScaleFactor;
@property (nonatomic, readonly) int verticalAlignment;
@property (nonatomic, readonly) bool wantsLineFragments;

- (void).cxx_destruct;
- (void)addAttachmentLayout:(id)arg1;
- (struct CGSize { double x1; double x2; })adjustedInsetsForTarget:(id)arg1;
- (bool)alwaysStartsNewTarget;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (unsigned long long)autosizeFlags;
- (bool)caresAboutStorageChanges;
- (unsigned long long)columnCount;
- (id)columnMetricsForCharIndex:(unsigned long long)arg1 outRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)columns;
- (bool)columnsAreLeftToRight;
- (id)currentAnchoredDrawableLayouts;
- (id)currentInlineDrawableLayouts;
- (struct CGSize { double x1; double x2; })currentSize;
- (void)didLayoutChangingDirtyRanges;
- (id)footnoteHeightMeasurer;
- (id)footnoteMarkProvider;
- (double)gapForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;
- (id)initWithStorage:(id)arg1;
- (bool)isInstructional;
- (bool)isLastTarget;
- (bool)isLayoutOffscreen;
- (bool)layoutIsValid;
- (void)layoutManager:(id)arg1 didClearDirtyRangeWithDelta:(long long)arg2 afterCharIndex:(unsigned long long)arg3;
- (void)layoutManagerNeedsLayout:(id)arg1;
- (id)layoutMargins;
- (double)maxAnchorInBlockDirection;
- (struct CGSize { double x1; double x2; })maxSize;
- (struct CGSize { double x1; double x2; })measuredSizeWithFlags:(unsigned int)arg1;
- (struct CGSize { double x1; double x2; })measuredSizeWithFlags:(unsigned int)arg1 minSize:(struct CGSize { double x1; double x2; })arg2 maxSize:(struct CGSize { double x1; double x2; })arg3;
- (struct CGSize { double x1; double x2; })minSize;
- (int)naturalAlignment;
- (int)naturalDirection;
- (id)nextTargetFirstChildHint;
- (id)nextTargetFirstColumn;
- (id)nextTargetTopicNumbers;
- (id)pLayoutWithMinSize:(struct CGSize { double x1; double x2; })arg1 maxSize:(struct CGSize { double x1; double x2; })arg2 anchor:(struct CGPoint { double x1; double x2; })arg3 flags:(unsigned int)arg4;
- (unsigned long long)pageCount;
- (unsigned long long)pageNumber;
- (struct CGPoint { double x1; double x2; })position;
- (double)positionForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2 target:(id)arg3 outWidth:(double*)arg4 outGap:(double*)arg5;
- (id)previousTargetLastColumn;
- (id)previousTargetTopicNumbers;
- (void)setNeedsDisplayInTargetRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)shouldWrapAroundExternalDrawables;
- (bool)shrinkTextToFit;
- (id)storage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetRectForCanvasRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)textIsVertical;
- (id)textWrapper;
- (id)validatedLayoutForAnchoredDrawable:(id)arg1;
- (id)validatedLayoutForInlineDrawable:(id)arg1;
- (int)verticalAlignment;
- (bool)wantsLineFragments;
- (double)widthForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;

@end
