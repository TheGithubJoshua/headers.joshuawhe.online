/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSWPLayout : TSDLayout <TSDWrapInvalidationParent, TSWPLayoutOwner, TSWPLayoutTarget> {
    NSMutableArray * _columns;
    unsigned long long  _lastLayoutMgrChangeCount;
    TSWPLayoutManager * _layoutManager;
    TSWPStorage * _storage;
    bool  _textLayoutValid;
    bool  _useBlackTextColor;
    TSDLayout<TSWPLayoutParent> * _wpLayoutParent;
}

@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } anchorPoint;
@property (nonatomic, retain) NSMutableArray *anchoredDrawablesForRelayout;
@property (nonatomic, readonly) unsigned long long autosizeFlags;
@property (nonatomic, readonly) TSDCanvas *canvas;
@property (nonatomic, readonly) NSMutableArray *columns;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } containedTextRange;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } currentSize;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <TSWPFootnoteHeightMeasurer> *footnoteHeightMeasurer;
@property (nonatomic, readonly) <TSWPFootnoteMarkProvider> *footnoteMarkProvider;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct __CFLocale { }*hyphenationLocale;
@property (nonatomic, readonly) TSUBezierPath *interiorClippingPath;
@property (nonatomic, readonly) bool isInstructional;
@property (nonatomic, readonly) bool isLinked;
@property (nonatomic, readonly) bool isOverflowing;
@property (nonatomic, readonly) bool layoutIsValid;
@property (nonatomic, readonly) TSWPLayoutManager *layoutManager;
@property (nonatomic, readonly) bool marginsAreMirrored;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } maskRect;
@property (nonatomic, readonly) double maxAnchorInBlockDirection;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maxSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } minSize;
@property (nonatomic, readonly) int naturalAlignment;
@property (nonatomic, readonly) int naturalDirection;
@property (nonatomic, readonly) TSPObject<TSDHint> *nextTargetFirstChildHint;
@property (nonatomic, readonly) <TSWPOffscreenColumn> *nextTargetFirstColumn;
@property (nonatomic, readonly) NSObject<TSWPTopicNumberHints> *nextTargetTopicNumbers;
@property (nonatomic, readonly) unsigned long long pageCount;
@property (nonatomic, readonly) unsigned long long pageNumber;
@property (nonatomic, readonly) TSDLayout *parentLayoutForInlineAttachments;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } position;
@property (nonatomic, readonly) <TSWPOffscreenColumn> *previousTargetLastColumn;
@property (nonatomic, readonly) NSObject<TSWPTopicNumberHints> *previousTargetTopicNumbers;
@property (nonatomic, readonly) bool repShouldPreventCaret;
@property (nonatomic, readonly) bool shouldHyphenate;
@property (nonatomic, readonly) bool shouldWrapAroundExternalDrawables;
@property (nonatomic, readonly) TSWPStorage *storage;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool textIsVertical;
@property (nonatomic, readonly) bool textLayoutValid;
@property (nonatomic) bool useBlackTextColor;
@property (nonatomic, readonly) int verticalAlignment;
@property (nonatomic, readonly) bool wantsLineFragments;

- (void).cxx_destruct;
- (void)addAttachmentLayout:(id)arg1;
- (id)additionalReliedOnLayoutsForTextWrap;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (unsigned long long)autosizeFlags;
- (void)beginResizeWrapInvalidationCluster;
- (id)canvas;
- (struct CGPoint { double x1; double x2; })capturedInfoPositionForAttachment;
- (bool)caresAboutStorageChanges;
- (id)columnMetricsForCharIndex:(unsigned long long)arg1 outRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)columns;
- (id)computeLayoutGeometry;
- (id)containedPencilAnnotations;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })containedTextRange;
- (bool)containsStartOfPencilAnnotation:(id)arg1;
- (id)currentAnchoredDrawableLayouts;
- (id)currentInlineDrawableLayouts;
- (struct CGSize { double x1; double x2; })currentSize;
- (id)dependentLayouts;
- (void)didLayoutChangingDirtyRanges;
- (void)didLayoutWithLayoutManager:(id)arg1;
- (void)endResizeWrapInvalidationCluster;
- (id)footnoteHeightMeasurer;
- (id)footnoteMarkProvider;
- (void)i_setTextLayoutValid:(bool)arg1;
- (void)i_validateTextLayout;
- (id)initWithInfo:(id)arg1;
- (id)initWithInfo:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)initWithInfo:(id)arg1 storage:(id)arg2 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void*)initialLayoutState;
- (id)interiorClippingPath;
- (id)interiorWrapSegments;
- (void)invalidateForFootnoteNumberingChange;
- (bool)invalidateForPageCountChange;
- (void)invalidateForcingFullReLayOut;
- (void)invalidateInlineSize;
- (void)invalidateParentForAutosizing;
- (void)invalidateSize;
- (void)invalidateTextLayout;
- (bool)isInstructional;
- (bool)isLastTarget;
- (bool)isLayoutOffscreen;
- (bool)isLinked;
- (bool)isOverflowing;
- (bool)layoutIsValid;
- (id)layoutManager;
- (void)layoutManager:(id)arg1 didClearDirtyRangeWithDelta:(long long)arg2 afterCharIndex:(unsigned long long)arg3;
- (void)layoutManagerNeedsLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })maskRect;
- (double)maxAnchorInBlockDirection;
- (struct CGSize { double x1; double x2; })maxSize;
- (struct CGSize { double x1; double x2; })maximumFrameSizeForChild:(id)arg1;
- (struct CGSize { double x1; double x2; })minSize;
- (int)naturalAlignment;
- (int)naturalDirection;
- (id)nextTargetFirstChildHint;
- (id)nextTargetFirstColumn;
- (id)nextTargetTopicNumbers;
- (void)p_clearOutLayoutManager;
- (id)p_firstAncestorRespondingToSelector:(SEL)arg1;
- (void)p_invalidateTextLayout;
- (bool)p_parentAutosizes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_protectedRectWithinLayoutForSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_rectForSelectionPath:(id)arg1 useParagraphModeRects:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_rectInRootForSelectionPath:(id)arg1 useParagraphModeRects:(bool)arg2 forZoom:(bool)arg3;
- (id)p_wpLayoutParent;
- (unsigned long long)pageCount;
- (unsigned long long)pageNumber;
- (void)parentDidChange;
- (void)parentWillChangeTo:(id)arg1;
- (struct CGPoint { double x1; double x2; })position;
- (id)previousTargetLastColumn;
- (id)previousTargetTopicNumbers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootForPresentingAnnotationPopoverForSelectionPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootForSelectionPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootForZoomingToSelectionPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootOfAutoZoomContextOfSelectionPath:(id)arg1;
- (id)reliedOnLayouts;
- (Class)repClassOverride;
- (bool)selectionMustBeEntirelyOnscreenToCountAsVisibleInSelectionPath:(id)arg1;
- (void)setNeedsDisplayInTargetRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUseBlackTextColor:(bool)arg1;
- (bool)shouldDisplayGuides;
- (bool)shouldProvideSizingGuides;
- (bool)shouldWrapAroundExternalDrawables;
- (id)storage;
- (id)styleProvider;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetRectForCanvasRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)textColorOverride;
- (bool)textIsVertical;
- (bool)textLayoutValid;
- (id)textWrapper;
- (id)unscaledAnchorRectsForPencilAnnotationSelectionPath:(id)arg1 attachedType:(long long)arg2;
- (bool)useBlackTextColor;
- (void)validate;
- (void)validateTextLayoutForcibly;
- (id)validatedLayoutForAnchoredDrawable:(id)arg1;
- (id)validatedLayoutForInlineDrawable:(id)arg1;
- (int)verticalAlignment;
- (double)viewScaleForZoomingToSelectionPath:(id)arg1 targetPointSize:(double)arg2;
- (bool)wantsLineFragments;
- (void)willBeAddedToLayoutController:(id)arg1;
- (void)willBeRemovedFromLayoutController:(id)arg1;
- (void)wrappableChildInvalidated:(id)arg1;

@end
