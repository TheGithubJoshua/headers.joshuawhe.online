/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDImageFill : TSDFill <NSCopying, NSMutableCopying, TSDMixing, TSSPresetSource> {
    struct CGSize { 
        double width; 
        double height; 
    }  mFillSize;
    TSDImageFillCachedImage * mHalfSizeTintedImage;
    bool  mHasIndicatedInterestInProvider;
    TSPData * mImageData;
    TSDImageFillCachedImage * mQuarterSizeTintedImage;
    TSUColor * mReferenceColor;
    struct CGImage { } * mSourceOfTempRenderCopy;
    TSDImageFillCachedImage * mStandardSizeTintedImage;
    int  mTechnique;
    struct CGImage { } * mTempRenderCopy;
    long long  mTempRenderCount;
    NSObject<OS_dispatch_queue> * mTempRenderLock;
    TSUColor * mTintColor;
}

@property (nonatomic, readonly) struct CGSize { double x1; double x2; } fillSize;
@property (nonatomic, readonly, retain) TSPData *imageData;
@property (setter=p_setFillSize:, nonatomic) struct CGSize { double x1; double x2; } p_fillSize;
@property (setter=p_setImageData:, nonatomic, retain) TSPData *p_imageData;
@property (setter=p_setTechnique:, nonatomic) int p_technique;
@property (setter=p_setTintColor:, nonatomic, retain) TSUColor *p_tintColor;
@property (nonatomic, readonly) double scale;
@property (nonatomic) int technique;
@property (nonatomic, readonly, copy) TSUColor *tintColor;

+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3;
+ (id)instanceWithArchive:(const struct FillArchive { int (**x1)(); struct ExtensionSet { struct Arena {} *x_2_1_1; unsigned short x_2_1_2; unsigned short x_2_1_3; union AllocatedData { struct KeyValue {} *x_4_2_1; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > {} *x_4_2_2; } x_2_1_4; } x2; struct InternalMetadataWithArena { void *x_3_1_1; } x3; struct HasBits<1> { unsigned int x_4_1_1[1]; } x4; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_5_1_1; } x5; struct Color {} *x6; struct GradientArchive {} *x7; struct ImageFillArchive {} *x8; }*)arg1 unarchiver:(id)arg2;
+ (id)presetKinds;

- (void).cxx_destruct;
- (bool)canApplyToRenderable;
- (bool)canApplyToRenderableByAddingSubrenderables;
- (id)copyWithNewImageData:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)drawFillInContext:(struct CGContext { }*)arg1 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 clippingToPath:(struct CGPath { }*)arg3;
- (void)drawSwatchInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (bool)drawsInOneStep;
- (struct CGSize { double x1; double x2; })fillSize;
- (int)fillType;
- (void)flushImageCache;
- (unsigned long long)hash;
- (void)i_commonInit;
- (id)imageData;
- (id)imageDataAtFillSize;
- (id)initWithArchive:(const struct FillArchive { int (**x1)(); struct ExtensionSet { struct Arena {} *x_2_1_1; unsigned short x_2_1_2; unsigned short x_2_1_3; union AllocatedData { struct KeyValue {} *x_4_2_1; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > {} *x_4_2_2; } x_2_1_4; } x2; struct InternalMetadataWithArena { void *x_3_1_1; } x3; struct HasBits<1> { unsigned int x_4_1_1[1]; } x4; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_5_1_1; } x5; struct Color {} *x6; struct GradientArchive {} *x7; struct ImageFillArchive {} *x8; }*)arg1 unarchiver:(id)arg2;
- (id)initWithImageData:(id)arg1 technique:(int)arg2 tintColor:(id)arg3 size:(struct CGSize { double x1; double x2; })arg4;
- (bool)isEqual:(id)arg1;
- (bool)isOpaque;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)p_cachedImageForSize:(struct CGSize { double x1; double x2; })arg1 inContext:(struct CGContext { }*)arg2 orContentsScaleProvider:(id)arg3;
- (void)p_clearTintedImageCache;
- (void)p_drawBitmapImage:(struct CGImage { }*)arg1 withOrientation:(long long)arg2 inContext:(struct CGContext { }*)arg3 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4;
- (void)p_drawPDFWithProvider:(id)arg1 inContext:(struct CGContext { }*)arg2 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_drawnRectForImageSize:(struct CGSize { double x1; double x2; })arg1 destRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3;
- (struct CGSize { double x1; double x2; })p_fillSize;
- (id)p_halfSizeCachedImage;
- (id)p_imageData;
- (void)p_paintPath:(struct CGPath { }*)arg1 inContext:(struct CGContext { }*)arg2 rectForFill:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (id)p_quarterSizeCachedImage;
- (void)p_setFillSize:(struct CGSize { double x1; double x2; })arg1;
- (void)p_setFillSizeForApplicationData;
- (void)p_setImageData:(id)arg1;
- (void)p_setTechnique:(int)arg1;
- (void)p_setTintColor:(id)arg1;
- (bool)p_shouldApplyTintedImage;
- (bool)p_shouldPersistFillSizeForData:(id)arg1;
- (struct CGSize { double x1; double x2; })p_sizeOfFillImageForDestRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (id)p_standardSizeCachedImage;
- (int)p_technique;
- (id)p_tintColor;
- (id)p_tintedImageWithScale:(double)arg1;
- (id)p_validatedImageProvider;
- (void)paintPath:(struct CGPath { }*)arg1 inContext:(struct CGContext { }*)arg2;
- (void)paintPath:(struct CGPath { }*)arg1 naturalBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContext:(struct CGContext { }*)arg3 isPDF:(bool)arg4;
- (id)presetKind;
- (id)referenceColor;
- (struct CGSize { double x1; double x2; })renderedImageSizeForObjectSize:(struct CGSize { double x1; double x2; })arg1;
- (void)saveToArchive:(struct FillArchive { int (**x1)(); struct ExtensionSet { struct Arena {} *x_2_1_1; unsigned short x_2_1_2; unsigned short x_2_1_3; union AllocatedData { struct KeyValue {} *x_4_2_1; struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > {} *x_4_2_2; } x_2_1_4; } x2; struct InternalMetadataWithArena { void *x_3_1_1; } x3; struct HasBits<1> { unsigned int x_4_1_1[1]; } x4; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_5_1_1; } x5; struct Color {} *x6; struct GradientArchive {} *x7; struct ImageFillArchive {} *x8; }*)arg1 archiver:(id)arg2;
- (double)scale;
- (void)setTechnique:(int)arg1;
- (int)technique;
- (id)tintColor;
- (bool)tsch_hasAllResources;

@end
