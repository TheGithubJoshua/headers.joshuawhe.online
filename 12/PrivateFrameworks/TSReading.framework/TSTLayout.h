<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTLayout.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTLayout.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTLayout : TSWPTextHostLayout <TSWPColumnMetrics, TSWPLayoutParent, TSWPStorageObserver> {
    struct CGSize { 
        double width; 
        double height; 
    }  mAdjustableTableSize;
    NSMutableDictionary * mAttachmentCellLayouts;
    struct { 
        double tableNameHeight; 
        struct CGSize { 
            double width; 
            double height; 
        } scaleToFitParent; 
        struct CGSize { 
            double width; 
            double height; 
        } scaleToFitEnclosingTextColumn; 
    }  mCached;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  mCachedPaddingForEditingCell;
    int  mCachedVerticalAlignmentForEditingCell;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mCanvasSafeRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mCanvasVisibleRect;
    struct CGSize { 
        double width; 
        double height; 
    }  mCapturedStrokeFrameSizeForInline;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mComputedEditingCellContentFrame;
    TSWPLayout * mContainedTextEditingLayout;
    int  mContainedTextEditorParagraphAlignment;
    bool  mContainedTextEditorSpills;
    bool  mContainedTextEditorTextWraps;
    int  mCoordinatesChangedMaskForChrome;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  mEditingSpillingTextRange;
    struct CGSize { 
        double width; 
        double height; 
    }  mFixedTableSize;
    bool  mLayoutDirectionIsLeftToRight;
    TSTLayoutHint * mLayoutHint;
    TSTMasterLayout * mMasterLayout;
    bool  mNewCanvasRevealedHorizontally;
    bool  mNewCanvasRevealedVertically;
    unsigned long long  mPageCount;
    unsigned long long  mPageNumber;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  mPrevEditingSpillingTextRange;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mPreviousVisibleStrokeFrame;
    bool  mProcessChangesFiltering;
    bool  mRemovingContainedTextEditorLayout;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mRenderingFrameForLayoutGeometryFromInfo;
    bool  mShouldUpdateAttachmentChildren;
    TSTLayoutSpaceBundle * mSpaceBundle;
    struct CGSize { 
        double width; 
        double height; 
    }  mSpillingTextSize;
    bool  mTableNameVisibilityIsValid;
    bool  mTableNameVisible;
    bool  mTabsVisible;
}

@property (nonatomic, readonly) bool alwaysStartsNewTarget;
@property (nonatomic, readonly) unsigned long long columnCount;
@property (nonatomic, readonly) bool columnsAreLeftToRight;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } computedEditingCellContentFrame;
@property (nonatomic, retain) TSWPLayout *containedTextEditingLayout;
@property (nonatomic, readonly) bool containedTextEditorSpills;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } editingSpillingTextRange;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool layoutDirectionIsLeftToRight;
@property (nonatomic, retain) TSTLayoutHint *layoutHint;
@property (nonatomic, readonly) TSWPPadding *layoutMargins;
@property (nonatomic, retain) TSTMasterLayout *masterLayout;
@property (nonatomic) bool newCanvasRevealedHorizontally;
@property (nonatomic) bool newCanvasRevealedVertically;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } paddingForEditingCell;
@property (nonatomic, readonly) unsigned long long pageCount;
@property (nonatomic, readonly) unsigned long long pageNumber;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } prevEditingSpillingTextRange;
@property (nonatomic) bool processChangesFiltering;
@property (nonatomic) struct CGSize { double x1; double x2; } scaleToFit;
@property (nonatomic, readonly) bool shrinkTextToFit;
@property (nonatomic, retain) TSTLayoutSpaceBundle *spaceBundle;
@property (readonly) Class superclass;
@property (nonatomic, readonly) TSTTableInfo *tableInfo;
@property (nonatomic, readonly) TSTTableInfo *tableModel;
@property (nonatomic, readonly) double textScaleFactor;

- (struct CGPoint { double x1; double x2; })activityLineUnscaledEndPointForSearchReference:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })adjustRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forScrollingToSelectionPath:(id)arg2 forZoom:(bool)arg3;
- (struct CGSize { double x1; double x2; })adjustedInsetsForTarget:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentFrame;
- (bool)alwaysStartsNewTarget;
- (unsigned long long)autosizeFlagsForTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })autosizedFrameForTextLayout:(id)arg1 textSize:(struct CGSize { double x1; double x2; })arg2;
- (void)bezierPathsForCellRegion:(id)arg1 selectionMask:(unsigned int)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 viewScale:(double)arg4 inset:(double)arg5 clipToVisibleRect:(bool)arg6 block:(id /* block */)arg7;
- (struct CGPoint { double x1; double x2; })calculatePointFromSearchReference:(id)arg1;
- (bool)canAspectRatioLockBeChangedByUser;
- (bool)canRotateChildLayout:(id)arg1;
- (bool)canvasShouldScrollForSelectionPath:(id)arg1;
- (struct CGPoint { double x1; double x2; })capturedInfoPositionForAttachment;
- (id)cellIteratorWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3;
- (id)children;
- (unsigned long long)columnCount;
- (bool)columnsAreLeftToRight;
- (id)computeInfoGeometryFromPureLayoutGeometry:(id)arg1;
- (id)computeLayoutGeometry;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })computedEditingCellContentFrame;
- (id)containedTextEditingLayout;
- (bool)containedTextEditorSpills;
- (void)dealloc;
- (id)dependentLayouts;
- (id)dependentsOfTextLayout:(id)arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })editingSpillingTextRange;
- (double)gapForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;
- (bool)inFindReplaceMode;
- (bool)inPrintPreviewMode;
- (id)initWithInfo:(id)arg1;
- (id)initWithInfo:(id)arg1 layoutHint:(id)arg2;
- (id)initialInfoGeometry;
- (struct CGSize { double x1; double x2; })initialTextSize;
- (id)inspectorGeometry;
- (void)invalidate;
- (void)invalidateForAutosizingTextLayout:(id)arg1;
- (void)invalidateLayoutSpaceCoordinates;
- (void)invalidateLayoutSpaceCoordinatesAfterColumn:(unsigned short)arg1;
- (void)invalidateLayoutSpaceCoordinatesAfterRow:(unsigned int)arg1;
- (void)invalidateLayoutSpaceTableOffsets;
- (void)invalidatePosition;
- (void)invalidateSize;
- (void)invalidateTableNameVisibility;
- (bool)isBeingManipulated;
- (bool)isDraggable;
- (bool)isStrokeEditing;
- (void)iterateCellsAndTerminateWithIterator:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)iterateCellsInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(id /* block */)arg4;
- (bool)layoutDirectionIsLeftToRight;
- (id)layoutGeometryFromInfo;
- (id)layoutHint;
- (id)layoutMargins;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })maskRectForTextLayout:(id)arg1;
- (id)masterLayout;
- (double)maxAutoGrowLineWidthForTextLayout:(id)arg1;
- (struct CGSize { double x1; double x2; })maximumFrameSizeForChild:(id)arg1;
- (int)naturalAlignmentForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (int)naturalAlignmentForTextLayout:(id)arg1;
- (bool)newCanvasRevealedHorizontally;
- (bool)newCanvasRevealedVertically;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nonAutosizedFrameForTextLayout:(id)arg1;
- (void)offsetGeometryBy:(struct CGPoint { double x1; double x2; })arg1;
- (bool)orderedBefore:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_autosizedFrameForRichTextLayout:(id)arg1 textSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_autosizedFrameForTextEditingLayout:(id)arg1 textSize:(struct CGSize { double x1; double x2; })arg2;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })p_cellIDForWPLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_computeSpillingTextFrameForEditingLayout:(id)arg1 textSize:(struct CGSize { double x1; double x2; })arg2 editingSpillRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; }*)arg3;
- (int)p_defaultAlignmentForTableWritingDirection;
- (bool)p_getLayoutDirectionLeftToRight;
- (bool)p_layoutWhollyContainsGridRange:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_maskRectForRichTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_maskRectForTextEditingLayout:(id)arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })p_maximumSpillRangeForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_nonAutosizedFrameForRichTextLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_nonAutosizedFrameForTextEditingLayout:(id)arg1;
- (void)p_prepareAttachmentCells;
- (struct CGSize { double x1; double x2; })p_rangeUpAndLeftOfIntersectionRangeOfGridRange:(struct { struct { unsigned int x_1_1_1; unsigned int x_1_1_2; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })p_spillRangeForMaskingRichTextLayout:(id)arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })p_spillRangeToRightForCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_textFrameForWrappingCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 defaultRowHeight:(bool*)arg2;
- (void)p_updateCachedStyleInformationFromCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paddingForEditingCell;
- (unsigned long long)pageCount;
- (unsigned long long)pageNumber;
- (double)positionForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2 target:(id)arg3 outWidth:(double*)arg4 outGap:(double*)arg5;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })prevEditingSpillingTextRange;
- (bool)processChangesFiltering;
- (int)reapCoordinatesChangedMaskForChrome;
- (void)removeAttachmentCellLayouts;
- (void)removeContainedTextEditingLayout;
- (Class)repClassForTextLayout:(id)arg1;
- (bool)resizeMayChangeAspectRatio;
- (struct CGSize { double x1; double x2; })scaleToFit;
- (void)setContainedTextEditingLayout:(id)arg1;
- (void)setLayoutHint:(id)arg1;
- (void)setMasterLayout:(id)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNewCanvasRevealedHorizontally:(bool)arg1;
- (void)setNewCanvasRevealedVertically:(bool)arg1;
- (void)setPrevEditingSpillingTextRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setProcessChangesFiltering:(bool)arg1;
- (void)setScaleToFit:(struct CGSize { double x1; double x2; })arg1;
- (void)setSpaceBundle:(id)arg1;
- (void)setupContainedTextEditingLayout:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)shrinkTextToFit;
- (id)spaceBundle;
- (bool)supportsRotation;
- (bool)suppressFrozenHeadersForEditing;
- (id)tableInfo;
- (id)tableModel;
- (bool)textIsVertical;
- (void)updateChildrenFromInfo;
- (void)validate;
- (void)validatePageNumberCount;
- (void)validateTableNameVisibility;
- (int)verticalAlignmentForTextLayout:(id)arg1;
- (double)viewScaleForZoomingToSelectionPath:(id)arg1 targetPointSize:(double)arg2;
- (double)widthForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;
- (int)wrapFitType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
