/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDFrameRep : NSObject {
    TSDBitmapImageProvider * _adornment;
    TSDFrame * _frame;
    NSArray * _images;
    CALayer * _maskLayer;
    NSArray * _masks;
    bool  _missingImageProviders;
    bool  _shouldEnableBlendMode;
}

@property (nonatomic, readonly) TSDFrame *frame;

- (void).cxx_destruct;
- (void)applyMaskForRectWithCoverage:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toContext:(struct CGContext { }*)arg2;
- (void)blendMaskBeforeRenderingImageInContext:(struct CGContext { }*)arg1;
- (void)dealloc;
- (id)frame;
- (void)frameRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2 withTotalScale:(double)arg3;
- (id)init;
- (id)initWithTSDFrame:(id)arg1;
- (struct CGImage { }*)newFrameForMask:(bool)arg1 size:(struct CGSize { double x1; double x2; })arg2 forCALayer:(bool)arg3 viewScale:(double)arg4;
- (void)p_drawFrameIntoRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2 withImages:(id)arg3 atViewScale:(double)arg4 isMask:(bool)arg5;
- (void)p_drawTiles:(id)arg1 inContext:(struct CGContext { }*)arg2 rect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 start:(double)arg4 end:(double)arg5 vertical:(bool)arg6;
- (struct CGImage { }*)p_newRenderedFrameForMask:(bool)arg1 size:(struct CGSize { double x1; double x2; })arg2 forCALayer:(bool)arg3 viewScale:(double)arg4;
- (bool)p_shouldRender;
- (bool)p_shouldRenderForRectWithCoverage:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)p_shouldRenderForRectWithoutCoverage:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)p_willRenderForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end
