<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSWPRangeMap.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSWPRangeMap.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSWPRangeMap : NSObject {
    struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> > { 
        struct _TSWPCharIndexAndAffinity {} *__begin_; 
        struct _TSWPCharIndexAndAffinity {} *__end_; 
        struct __compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > { 
            struct _TSWPCharIndexAndAffinity {} *__value_; 
        } __end_cap_; 
    }  _mappedIndexes;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _subRange;
    struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> > { 
        struct _TSWPCharIndexAndAffinity {} *__begin_; 
        struct _TSWPCharIndexAndAffinity {} *__end_; 
        struct __compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > { 
            struct _TSWPCharIndexAndAffinity {} *__value_; 
        } __end_cap_; 
    }  _unmappedIndexes;
}

@property (nonatomic) /* Warning: unhandled struct encoding: '{vector<_TSWPCharIndexAndAffinity' */ struct  mappedIndexes; /* unknown property attribute:  std::__1::allocator<_TSWPCharIndexAndAffinity> >=^{_TSWPCharIndexAndAffinity}}} */
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } subRange;
@property (nonatomic) /* Warning: unhandled struct encoding: '{vector<_TSWPCharIndexAndAffinity' */ struct  unmappedIndexes; /* unknown property attribute:  std::__1::allocator<_TSWPCharIndexAndAffinity> >=^{_TSWPCharIndexAndAffinity}}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)adjustByDelta:(long long)arg1 startingAt:(unsigned long long)arg2;
- (id)initWithSubRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 unmappedIndexes:(const struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; }*)arg2 affinity:(int)arg3;
- (id)initWithSubRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 unmappedIndexes:(const struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; }*)arg2 isBackwardAffinities:(const struct vector<bool, std::__1::allocator<bool> > { unsigned long long *x1; unsigned long long x2; struct __compressed_pair<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long x_3_1_1; } x3; }*)arg3;
- (id)initWithSubRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 unmappedPairIndexes:(const struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; }*)arg2;
- (unsigned long long)mappedCharIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })mappedCharRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x1; struct _TSWPCharIndexAndAffinity {} *x2; struct __compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x_3_1_1; } x3; })mappedIndexes;
- (unsigned long long)p_extendLeftMappedIndex:(unsigned long long)arg1;
- (unsigned long long)p_extendRightMappedIndex:(unsigned long long)arg1;
- (void)setMappedIndexes:(struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x1; struct _TSWPCharIndexAndAffinity {} *x2; struct __compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x_3_1_1; } x3; })arg1;
- (void)setSubRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setUnmappedIndexes:(struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x1; struct _TSWPCharIndexAndAffinity {} *x2; struct __compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x_3_1_1; } x3; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })subRange;
- (unsigned long long)unmappedCharIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })unmappedCharRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x1; struct _TSWPCharIndexAndAffinity {} *x2; struct __compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > { struct _TSWPCharIndexAndAffinity {} *x_3_1_1; } x3; })unmappedIndexes;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
