<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSWPSelection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSWPSelection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSWPSelection : TSKSelection <TSDTextSelection> {
    int  _caretAffinity;
    unsigned long long  _headCharIndex;
    unsigned long long  _leadingCharIndex;
    bool  _leadingEdge;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _range;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _smartFieldRange;
    int  _styleInsertionBehavior;
    unsigned long long  _tailCharIndex;
    int  _type;
    bool  _validVisualRanges;
    TSWPRangeArray * _visualRanges;
}

@property (nonatomic, readonly) int caretAffinity;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long headCharIndex;
@property (nonatomic, readonly) bool isAtEndOfLine;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) bool isInsertionPoint;
@property (nonatomic, readonly) bool isRange;
@property (nonatomic, readonly) bool isValid;
@property (nonatomic, readonly) bool isVisual;
@property (nonatomic, readonly) unsigned long long leadingCharIndex;
@property (nonatomic, readonly) bool leadingEdge;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } range;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } rawRange;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } smartFieldRange;
@property (nonatomic, readonly) int styleInsertionBehavior;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long tailCharIndex;
@property (nonatomic, readonly) int type;
@property (nonatomic, readonly) bool validVisualRanges;

+ (Class)archivedSelectionClass;
+ (bool)p_checkEndOfLineFlagForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1 leadingEdge:(bool*)arg2 type:(int*)arg3 endOfLine:(bool)arg4 storage:(id)arg5;
+ (id)selectionFromWPSelection:(id)arg1;
+ (id)selectionWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
+ (id)selectionWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 type:(int)arg2 leadingEdge:(bool)arg3 storage:(id)arg4;

- (void).cxx_destruct;
- (int)caretAffinity;
- (long long)compare:(id)arg1;
- (id)constrainToRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)containsCharacterAtIndex:(unsigned long long)arg1;
- (id)copyWithNewRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)copyWithNewRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 newCaretAffinity:(int)arg2;
- (id)copyWithNewStyleInsertionBehavior:(int)arg1 newCaretAffinity:(int)arg2;
- (id)copyWithNewType:(int)arg1;
- (id)copyWithNewType:(int)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)copyWithNewType:(int)arg1 smartFieldRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)copyWithNewVisualRanges:(id)arg1;
- (id)copyWithNewVisualTypeRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 head:(unsigned long long)arg2 tail:(unsigned long long)arg3;
- (id)copyWithVisualRanges:(id)arg1 headCharIndex:(unsigned long long)arg2 tailCharIndex:(unsigned long long)arg3 rightToLeft:(bool)arg4 sameLine:(bool)arg5;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (unsigned long long)end;
- (unsigned long long)hash;
- (unsigned long long)headCharIndex;
- (void)i_setVisualRanges:(id)arg1;
- (id)i_visualRanges;
- (id)initWithArchive:(const struct SelectionArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Range {} *x5; struct Range {} *x6; int x7; int x8; int x9; }*)arg1;
- (id)initWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)initWithType:(int)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 styleInsertionBehavior:(int)arg3 caretAffinity:(int)arg4;
- (id)initWithType:(int)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 styleInsertionBehavior:(int)arg3 caretAffinity:(int)arg4 smartFieldRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 leadingEdge:(bool)arg6 leadingCharIndex:(unsigned long long)arg7;
- (id)initWithType:(int)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 styleInsertionBehavior:(int)arg3 caretAffinity:(int)arg4 smartFieldRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 leadingEdge:(bool)arg6 storage:(id)arg7;
- (unsigned long long)insertionChar;
- (bool)intersectsRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)isAtEndOfLine;
- (bool)isEmpty;
- (bool)isEqual:(id)arg1;
- (bool)isEquivalentForInsertionStyle:(id)arg1;
- (bool)isInsertionPoint;
- (bool)isRange;
- (bool)isValid;
- (bool)isVisual;
- (unsigned long long)leadingCharIndex;
- (bool)leadingEdge;
- (bool)p_isEqual:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })range;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rawRange;
- (void)saveToArchive:(struct SelectionArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Range {} *x5; struct Range {} *x6; int x7; int x8; int x9; }*)arg1 archiver:(id)arg2;
- (void)setHeadCharIndex:(unsigned long long)arg1;
- (void)setHeadCharIndex:(unsigned long long)arg1 tailCharIndex:(unsigned long long)arg2;
- (void)setTailCharIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })smartFieldRange;
- (unsigned long long)start;
- (int)styleInsertionBehavior;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })superRange;
- (unsigned long long)tailCharIndex;
- (int)type;
- (bool)validVisualRanges;
- (unsigned long long)visualRangeCount;
- (id)visualRanges;
- (id)visualRangesArray;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
