<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSWPShapeRep.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSWPShapeRep.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSWPShapeRep : TSDShapeRep <TSDMagicMoveMatching, TSWPContainerTextEditingRep, TSWPShapeLayoutDelegate> {
    TSWPRep * _containedRep;
    bool  _editingContainedRep;
    struct CGPoint { 
        double x; 
        double y; 
    }  _originalAutosizePositionOffset;
    CALayer * _overflowGlyphLayer;
}

@property (nonatomic, readonly) NSArray *childReps;
@property (nonatomic, readonly) TSWPRep *containedRep;
@property (nonatomic, readonly) NSObject<TSDContainerInfo> *containerInfo;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isShapeInvisible;
@property (readonly) Class superclass;
@property (nonatomic, readonly) TSWPStorage *textStorageForTexture;

+ (id)magicMoveAnimationMatchesFromMatches:(id)arg1 description:(id)arg2;
+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;
+ (id)magicMoveTextMatchesBetweenOutgoingObjects:(id)arg1 andIncomingObjects:(id)arg2 textureDescription:(id)arg3 textDeliveryType:(long long)arg4 repToOpacityTextRangeDictMap:(id)arg5;
+ (void)p_getOutgoingTextureSet:(id*)arg1 incomingTextureSet:(id*)arg2 withOutgoingRep:(id)arg3 outgoingChunkRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 outgoingTextureByGlyphStyle:(int)arg5 incomingRep:(id)arg6 incomingChunkRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg7 incomingTextureByGlyphStyle:(int)arg8 includeListLabels:(bool)arg9;
+ (bool)p_listLabelsAreEqualWithOutgoingStorage:(id)arg1 outgoingCharIndex:(long long)arg2 incomingStorage:(id)arg3 incomingCharIndex:(long long)arg4 shouldMatch:(bool*)arg5;
+ (unsigned long long)p_longestChunkInOutgoingObjects:(id)arg1 incomingObjects:(id)arg2 textDeliveryType:(long long)arg3 addOutgoingChunksToArray:(id)arg4 addIncomingChunksToArray:(id)arg5 textureDescription:(id)arg6;
+ (double)p_mmAttributeMatchPercentWithOutgoingTextChunk:(id)arg1 incomingTextChunk:(id)arg2;
+ (id)p_potentialMatchesWithChunkLength:(unsigned long long)arg1 outgoingTextChunks:(id)arg2 incomingTextChunks:(id)arg3 textureDescription:(id)arg4 textDeliveryType:(long long)arg5;
+ (bool)p_shouldDisableTextMorphingBetweenOutgoingRep:(id)arg1 outgoingChunkRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 incomingRep:(id)arg3 incomingChunkRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
+ (id)p_stringByApplyingCapitalizationPropertyFromStorage:(id)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 toString:(id)arg3;
+ (id)p_textureSetFromRep:(id)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 textureByGlyphStyle:(int)arg3 includeListLabel:(bool)arg4 desiredContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5;

- (void).cxx_destruct;
- (void)addAdditionalChildLayersToArray:(id)arg1;
- (bool)canSelectChildRep:(id)arg1;
- (id)childReps;
- (id)containedRep;
- (id)containerInfo;
- (void)dealloc;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (bool)isShapeInvisible;
- (id)newTextureRenderableForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 includeListLabel:(bool)arg2 isMagicMove:(bool)arg3 desiredContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 textureByGlyphStyle:(int)arg5 includeGroupedShadow:(bool)arg6 groupedShadowOnly:(bool)arg7 textureBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg8;
- (void)p_drawRubyInContext:(struct CGContext { }*)arg1 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)p_getBoundsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg3 applyReflection:(bool*)arg4 applyShadow:(bool*)arg5 forRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 includeListLabel:(bool)arg7 isMagicMove:(bool)arg8;
- (bool)p_hasContentForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 labelOnly:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_rectForRubyFields:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)recursivelyPerformSelector:(SEL)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2;
- (void)selectChildRep:(id)arg1 extendingSelection:(bool)arg2;
- (id)stageChunksForDeliveryStyle:(unsigned long long)arg1 byGlyphStyle:(int)arg2;
- (long long)stageIndexForStorageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 forTextureDescription:(id)arg2 stageChunks:(id)arg3;
- (id)textStorageForTexture;
- (id)textureForDescription:(id)arg1;
- (void)updateChildrenFromLayout;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
