<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDStroke.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDStroke.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDStroke : NSObject <NSCopying, NSMutableCopying, TSDMixing, TSDPathPainter, TSSPropertyCommandSerializing> {
    double  _actualWidth;
    int  _cap;
    TSUColor * _color;
    int  _join;
    double  _miterLimit;
    TSDStrokePattern * _pattern;
    double  _width;
}

@property (nonatomic, readonly) double actualWidth;
@property (nonatomic, readonly) int cap;
@property (nonatomic, readonly, copy) TSUColor *color;
@property (nonatomic, readonly) double dashSpacing;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool dontClearBackground;
@property (nonatomic, readonly) bool drawsInOneStep;
@property (nonatomic, readonly) bool drawsOutsideStrokeBounds;
@property (nonatomic, readonly) bool empty;
@property (readonly) unsigned long long hash;
@property (nonatomic) double i_actualWidth;
@property (setter=i_setCap:, nonatomic) int i_cap;
@property (nonatomic, copy) TSUColor *i_color;
@property (nonatomic) int i_join;
@property (nonatomic) double i_miterLimit;
@property (setter=i_setPattern:, nonatomic, copy) TSDStrokePattern *i_pattern;
@property (nonatomic) double i_width;
@property (nonatomic, readonly) bool isDash;
@property (nonatomic, readonly) bool isFrame;
@property (nonatomic, readonly) bool isNearlyWhite;
@property (nonatomic, readonly) bool isNullStroke;
@property (nonatomic, readonly) bool isRoundDash;
@property (nonatomic, readonly) int join;
@property (nonatomic, readonly) double miterLimit;
@property (nonatomic, readonly) bool needsToExtendJoinsForBoundsCalculation;
@property (nonatomic, readonly) struct _TSDStrokeOutsets { double x1; double x2; double x3; double x4; } outsets;
@property (nonatomic, readonly, copy) TSDStrokePattern *pattern;
@property (nonatomic, readonly) double renderedWidth;
@property (nonatomic, readonly) bool shouldAntialiasDefeat;
@property (nonatomic, readonly) bool shouldRender;
@property (nonatomic, readonly) bool solid;
@property (nonatomic, readonly) double suggestedMinimumLineWidth;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsColor;
@property (nonatomic, readonly) bool supportsLineOptions;
@property (nonatomic, readonly) bool supportsPattern;
@property (nonatomic, readonly) bool supportsWidth;
@property (nonatomic, readonly) bool usesOpenGL;
@property (nonatomic, readonly) double width;

+ (bool)canMixWithNilObjects;
+ (id)editedStrokeFromModelStroke:(id)arg1 selectedStroke:(id)arg2;
+ (id)emptyStroke;
+ (id)emptyStrokeWithWidth:(double)arg1;
+ (id)i_newEmptyStroke;
+ (id)i_newStroke;
+ (long long)indexOfStroke:(id)arg1 strokeArray:(id)arg2;
+ (id)instanceWithArchive:(const struct StrokeArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Color {} *x5; struct StrokePatternArchive {} *x6; struct SmartStrokeArchive {} *x7; struct FrameArchive {} *x8; struct PatternedStrokeArchive {} *x9; float x10; int x11; int x12; float x13; }*)arg1 unarchiver:(id)arg2;
+ (id)mergeRangeEmptyStroke;
+ (Class)mutableClass;
+ (id)portalStroke;
+ (id)stroke;
+ (id)strokeWithColor:(id)arg1 width:(double)arg2;
+ (id)strokeWithColor:(id)arg1 width:(double)arg2 cap:(int)arg3 join:(int)arg4 pattern:(id)arg5;
+ (id)zeroWidthEmptyStroke;

- (void).cxx_destruct;
- (void)aaDefeatedPaintLineEnd:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 atAngle:(double)arg3 withScale:(double)arg4 inContext:(struct CGContext { }*)arg5;
- (double)actualWidth;
- (void)applyInteriorWrapPropertiesToContext:(struct CGContext { }*)arg1 insideStroke:(bool)arg2;
- (void)applyToContext:(struct CGContext { }*)arg1;
- (void)applyToContext:(struct CGContext { }*)arg1 insideStroke:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForLineEnd:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 atAngle:(double)arg3 withScale:(double)arg4 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForPath:(id)arg1;
- (bool)canDrawWithOtherStroke:(id)arg1;
- (int)cap;
- (id)color;
- (id)colorForCGContext:(struct CGContext { }*)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)dashSpacing;
- (id)description;
- (bool)dontClearBackground;
- (void)drawSwatchInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (bool)drawsInOneStep;
- (bool)drawsOutsideStrokeBounds;
- (bool)empty;
- (unsigned long long)hash;
- (double)horizontalMarginForSwatch;
- (double)i_actualWidth;
- (int)i_cap;
- (id)i_color;
- (int)i_join;
- (double)i_miterLimit;
- (id)i_pattern;
- (void)i_setCap:(int)arg1;
- (void)i_setPattern:(id)arg1;
- (void)i_setPatternPropertiesFromStroke:(id)arg1;
- (void)i_setPropertiesFromStroke:(id)arg1;
- (double)i_width;
- (id)init;
- (id)initFromPropertyCommandMessage:(const struct Message { int (**x1)(); }*)arg1 unarchiver:(id)arg2;
- (id)initWithArchive:(const struct StrokeArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Color {} *x5; struct StrokePatternArchive {} *x6; struct SmartStrokeArchive {} *x7; struct FrameArchive {} *x8; struct PatternedStrokeArchive {} *x9; float x10; int x11; int x12; float x13; }*)arg1 unarchiver:(id)arg2;
- (id)initWithColor:(id)arg1 width:(double)arg2 cap:(int)arg3 join:(int)arg4 pattern:(id)arg5;
- (id)initWithColor:(id)arg1 width:(double)arg2 cap:(int)arg3 join:(int)arg4 pattern:(id)arg5 miterLimit:(double)arg6;
- (bool)isDash;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToStroke:(id)arg1;
- (bool)isFrame;
- (bool)isNearlyWhite;
- (bool)isNullStroke;
- (bool)isPortalStroke;
- (bool)isRoundDash;
- (int)join;
- (double)lineEndInsetAdjustment;
- (double)miterLimit;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (bool)needsToExtendJoinsForBoundsCalculation;
- (struct _TSDStrokeOutsets { double x1; double x2; double x3; double x4; })outsets;
- (void)paintLineEnd:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 atAngle:(double)arg3 withScale:(double)arg4 inContext:(struct CGContext { }*)arg5;
- (void)paintLineEnd:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 atAngle:(double)arg3 withScale:(double)arg4 inContext:(struct CGContext { }*)arg5 useFastDrawing:(bool)arg6;
- (void)paintPath:(const struct CGPath { }*)arg1 inContext:(struct CGContext { }*)arg2;
- (void)paintPath:(const struct CGPath { }*)arg1 wantsInteriorStroke:(bool)arg2 inContext:(struct CGContext { }*)arg3;
- (void)paintPath:(const struct CGPath { }*)arg1 wantsInteriorStroke:(bool)arg2 inContext:(struct CGContext { }*)arg3 useFastDrawing:(bool)arg4 parameterized:(bool)arg5 shouldReverseDrawOrder:(bool)arg6;
- (void)paintPathWithNormalClip:(const struct CGPath { }*)arg1 wantsInteriorStroke:(bool)arg2 inContext:(struct CGContext { }*)arg3;
- (void)paintRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (void)paintRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 wantsInteriorStroke:(bool)arg2 inContext:(struct CGContext { }*)arg3;
- (id)pathForLineEnd:(id)arg1 wrapPath:(bool)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3 atAngle:(double)arg4 withScale:(double)arg5;
- (const struct CGPath { }*)pathToStrokeFromCGPath:(const struct CGPath { }*)arg1;
- (id)pathToStrokeFromTSUBezierPath:(id)arg1;
- (id)pattern;
- (double)renderedWidth;
- (bool)requiresOutlineOnBackgroundWithAppearance:(unsigned long long)arg1;
- (void)saveToArchive:(struct StrokeArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Color {} *x5; struct StrokePatternArchive {} *x6; struct SmartStrokeArchive {} *x7; struct FrameArchive {} *x8; struct PatternedStrokeArchive {} *x9; float x10; int x11; int x12; float x13; }*)arg1 archiver:(id)arg2;
- (void)saveToPropertyCommandMessage:(struct Message { int (**x1)(); }*)arg1 archiver:(id)arg2;
- (void)setI_actualWidth:(double)arg1;
- (void)setI_color:(id)arg1;
- (void)setI_join:(int)arg1;
- (void)setI_miterLimit:(double)arg1;
- (void)setI_width:(double)arg1;
- (bool)shouldAntialiasDefeat;
- (bool)shouldRender;
- (bool)solid;
- (id)strokeByTransformingByTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (id)strokeLineEnd:(id)arg1;
- (double)suggestedMinimumLineWidth;
- (bool)supportsColor;
- (bool)supportsLineOptions;
- (bool)supportsPattern;
- (bool)supportsWidth;
- (bool)usesOpenGL;
- (double)width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
