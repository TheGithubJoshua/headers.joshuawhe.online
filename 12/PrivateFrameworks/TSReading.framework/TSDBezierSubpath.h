<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDBezierSubpath.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDBezierSubpath.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDBezierSubpath : NSObject {
    bool  mClosed;
    NSMutableArray * mNodes;
}

@property (nonatomic, readonly) bool allNodesSelected;
@property (nonatomic, readonly) TSUBezierPath *bezierPath;
@property (nonatomic, readonly) bool canDeleteSelectedNodes;
@property (nonatomic, readonly) bool closeIfEndpointsAreEqual;
@property (getter=isClosed, nonatomic) bool closed;
@property (nonatomic, readonly) TSDBezierNode *firstNode;
@property (nonatomic, readonly) bool hasSelectedNode;
@property (nonatomic, readonly) bool isRectangular;
@property (nonatomic, readonly) TSDBezierNode *lastNode;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } nodeBounds;
@property (nonatomic, copy) NSArray *nodes;

- (void).cxx_destruct;
- (void)addNode:(id)arg1;
- (void)addNodesToArray:(id)arg1;
- (void)addTemporarySmoothNodes;
- (bool)allNodesSelected;
- (void)appendToBezierPath:(id)arg1;
- (void)appendToBezierPath:(id)arg1 selectedNodesOnly:(bool)arg2 fromIndex:(unsigned long long)arg3;
- (id)bezierNodeUnderPoint:(struct CGPoint { double x1; double x2; })arg1 withTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 andTolerance:(double)arg3 returningType:(long long*)arg4;
- (id)bezierPath;
- (struct CGPoint { double x1; double x2; })calculateNewControlFromOriginalDelta:(struct CGPoint { double x1; double x2; })arg1 currentDelta:(struct CGPoint { double x1; double x2; })arg2 originalSmoothDelta:(struct CGPoint { double x1; double x2; })arg3 node:(struct CGPoint { double x1; double x2; })arg4;
- (bool)canDeleteSelectedNodes;
- (bool)closeIfEndpointsAreEqual;
- (void)convertToHobby;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)deleteSelectedNodes;
- (id)description;
- (void)deselectAllNodes;
- (double)distanceToPoint:(struct CGPoint { double x1; double x2; })arg1 elementIndex:(unsigned long long*)arg2 tValue:(double*)arg3 threshold:(double)arg4;
- (id)firstNode;
- (bool)hasSelectedNode;
- (id)init;
- (bool)isCircular;
- (bool)isClosed;
- (bool)isRectangular;
- (id)lastNode;
- (void)morphWithMorphInfo:(id)arg1;
- (id)nodeAfterNode:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nodeBounds;
- (id)nodePriorToNode:(id)arg1;
- (id)nodes;
- (void)offsetSelectedEdgesByDelta:(struct CGPoint { double x1; double x2; })arg1;
- (void)offsetSelectedNodesByDelta:(struct CGPoint { double x1; double x2; })arg1;
- (void)removeLastNode;
- (void)removeNode:(id)arg1;
- (void)removeTemporaryNodes;
- (void)reverseDirection;
- (void)selectAllNodes;
- (void)setClosed:(bool)arg1;
- (void)setNodes:(id)arg1;
- (void)sharpenAllNodes;
- (void)smoothAllNodes;
- (void)smoothNode:(id)arg1;
- (id)splitEdgeAtIndex:(unsigned long long)arg1 atPercentage:(double)arg2;
- (void)transformUsingAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)updateReflectedState;
- (void)updateSmoothNodes;
- (void)updateSmoothNodes:(id)arg1 addTemporaryNodes:(bool)arg2;
- (long long)updateSmoothNodes:(id)arg1 from:(long long)arg2 to:(long long)arg3 closed:(bool)arg4 addTemporaryNodes:(bool)arg5;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
