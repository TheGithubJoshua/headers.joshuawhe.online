/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDCanvas : NSObject {
    double  i_viewScaleForAudioObjectsInNonInteractiveCanvas;
    NSSet * mAllReps;
    NSArray * mAllRepsOrdered;
    bool  mAllowsFontSubpixelQuantization;
    TSUColor * mBackgroundColor;
    NSMutableArray * mBlocksToPerform;
    NSObject<OS_dispatch_queue> * mBlocksToPerformAccessQueue;
    TSDInteractiveCanvasController * mCanvasController;
    NSHashTable * mCanvasLayoutObservers;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  mContentInset;
    double  mContentsScale;
    <TSDCanvasDelegate> * mDelegate;
    bool  mIgnoringClickThrough;
    bool  mInLayout;
    NSArray * mInfos;
    struct { 
        unsigned int layout : 1; 
        unsigned int reps : 1; 
        unsigned int visibleBounds : 1; 
        unsigned int layers : 1; 
    }  mInvalidFlags;
    bool  mIsAnchoredAtRight;
    bool  mIsTemporaryForLayout;
    TSDLayoutController * mLayoutController;
    NSArray * mPreviouslyVisibleLayouts;
    TSUPointerKeyDictionary * mRepsByLayout;
    bool  mShouldRenderInvisibleContentForNonInteractiveCanvas;
    bool  mShouldUpdateLayersDuringLayout;
    bool  mSuppressesShadowsAndReflections;
    bool  mSuppressesShapeText;
    NSArray * mTopLevelReps;
    struct CGSize { 
        double width; 
        double height; 
    }  mUnscaledSize;
    double  mViewScale;
    bool  mWideGamut;
}

@property (nonatomic, readonly) TSKAccessController *accessController;
@property (nonatomic, readonly) NSSet *allReps;
@property (nonatomic, readonly) NSArray *allRepsOrdered;
@property (nonatomic) bool allowsFontSubpixelQuantization;
@property (nonatomic, copy) TSUColor *backgroundColor;
@property (nonatomic, readonly) TSDInteractiveCanvasController *canvasController;
@property (nonatomic, readonly) bool canvasIsWideGamut;
@property (nonatomic, readonly) TSKChangeNotifier *changeNotifier;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInset;
@property (nonatomic, readonly) double contentsScale;
@property (nonatomic) <TSDCanvasDelegate> *delegate;
@property (nonatomic, readonly) TSKDocumentRoot *documentRoot;
@property (nonatomic) double i_viewScaleForAudioObjectsInNonInteractiveCanvas;
@property (nonatomic, copy) NSArray *infosToDisplay;
@property (nonatomic) bool isAnchoredAtRight;
@property (nonatomic, readonly) bool isCanvasInteractive;
@property (nonatomic, readonly) bool isTemporaryForLayout;
@property (nonatomic, readonly) TSDLayoutController *layoutController;
@property (nonatomic, readonly) TSPObjectContext *objectContext;
@property (nonatomic) bool shouldRenderInvisibleContentForNonInteractiveCanvas;
@property (nonatomic, readonly) bool supportsAdaptiveLayout;
@property (nonatomic) bool suppressesShadowsAndReflections;
@property (nonatomic) bool suppressesShapeText;
@property (nonatomic, readonly) NSArray *topLevelReps;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unscaledRectOfLayouts;
@property (nonatomic) struct CGSize { double x1; double x2; } unscaledSize;
@property (nonatomic) double viewScale;

+ (void)p_recursivelyAddOrderedChildrenOfRep:(id)arg1 toArray:(id)arg2;

- (void).cxx_destruct;
- (id)accessController;
- (void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (id)allReps;
- (id)allRepsOrdered;
- (bool)allowsFontSubpixelQuantization;
- (id)backgroundColor;
- (id)canvasController;
- (bool)canvasIsWideGamut;
- (id)changeNotifier;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInset;
- (double)contentsScale;
- (struct CGPoint { double x1; double x2; })convertBoundsToUnscaledPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertBoundsToUnscaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })convertBoundsToUnscaledSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertUnscaledToBoundsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertUnscaledToBoundsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })convertUnscaledToBoundsSize:(struct CGSize { double x1; double x2; })arg1;
- (void)dealloc;
- (id)delegate;
- (id)documentRoot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_approximateScaledFrameOfEditingMenuAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_clipRectForCreatingRepsFromLayouts;
- (struct CGContext { }*)i_createContextToDrawImageInScaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withTargetIntegralSize:(struct CGSize { double x1; double x2; })arg2 distortedToMatch:(bool)arg3 returningBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 integralBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg5;
- (void)i_drawBackgroundInContext:(struct CGContext { }*)arg1;
- (void)i_drawBackgroundInContext:(struct CGContext { }*)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)i_drawRepsInContext:(struct CGContext { }*)arg1 passingTest:(id /* block */)arg2;
- (void)i_drawRepsInContext:(struct CGContext { }*)arg1 passingTest:(id /* block */)arg2 distort:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3;
- (struct CGImage { }*)i_image;
- (struct CGImage { }*)i_imageInScaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 keepingChildrenPassingTest:(id /* block */)arg2;
- (struct CGImage { }*)i_imageInScaledRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withTargetIntegralSize:(struct CGSize { double x1; double x2; })arg2 distortedToMatch:(bool)arg3 keepingChildrenPassingTest:(id /* block */)arg4;
- (void)i_layoutIfNeeded;
- (void)i_layoutIfNeededUpdatingLayerTree;
- (bool)i_needsLayout;
- (struct CGImage { }*)i_newImageInContext:(struct CGContext { }*)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 integralBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 distortedToMatch:(bool)arg4 keepingChildrenPassingTest:(id /* block */)arg5;
- (void)i_performBlockWhileIgnoringClickThrough:(id /* block */)arg1;
- (void)i_registerCanvasLayoutObserver:(id)arg1;
- (void)i_registerRep:(id)arg1;
- (void)i_setCanvasController:(id)arg1;
- (void)i_setCanvasIsWideGamut:(bool)arg1;
- (void)i_setContentsScale:(double)arg1;
- (void)i_setInfosToDisplay:(id)arg1 updatingLayoutController:(bool)arg2;
- (bool)i_shouldIgnoreClickThrough;
- (void)i_unregisterCanvasLayoutObserver:(id)arg1;
- (void)i_unregisterRep:(id)arg1;
- (void)i_updateInfosInLayoutController;
- (double)i_viewScaleForAudioObjectsInNonInteractiveCanvas;
- (id)infosToDisplay;
- (id)init;
- (id)initForTemporaryLayout;
- (id)initWithLayoutControllerClass:(Class)arg1 delegate:(id)arg2;
- (void)invalidateLayers;
- (void)invalidateReps;
- (void)invalidateVisibleBounds;
- (bool)isAnchoredAtRight;
- (bool)isCanvasInteractive;
- (bool)isDrawingIntoPDF;
- (bool)isExportingFixedLayoutEPUB;
- (bool)isPrinting;
- (bool)isRenderingForKPF;
- (bool)isTemporaryForLayout;
- (id)layoutController;
- (void)layoutInvalidated;
- (void)nonInteractiveLayoutIfNeeded;
- (id)objectContext;
- (void)orderRepsForLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_bounds;
- (void)p_layoutWithReadLock;
- (void)p_removeAllReps;
- (bool)p_updateRepsFromLayouts;
- (void)performBlockAfterLayoutIfNecessary:(id /* block */)arg1;
- (void)recreateAllLayoutsAndReps;
- (id)repForLayout:(id)arg1;
- (Class)rootLayoutClass;
- (void)setAllowsFontSubpixelQuantization:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setI_viewScaleForAudioObjectsInNonInteractiveCanvas:(double)arg1;
- (void)setInfosToDisplay:(id)arg1;
- (void)setIsAnchoredAtRight:(bool)arg1;
- (void)setShouldRenderInvisibleContentForNonInteractiveCanvas:(bool)arg1;
- (void)setSuppressesShadowsAndReflections:(bool)arg1;
- (void)setSuppressesShapeText:(bool)arg1;
- (void)setUnscaledSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setViewScale:(double)arg1;
- (bool)shouldRenderInvisibleContentForNonInteractiveCanvas;
- (bool)shouldShowInstructionalText;
- (bool)shouldShowTextOverflowGlyphs;
- (bool)shouldSuppressBackgrounds;
- (bool)spellCheckingSupported;
- (bool)spellCheckingSuppressed;
- (bool)supportsAdaptiveLayout;
- (bool)suppressesShadowsAndReflections;
- (bool)suppressesShapeText;
- (void)teardown;
- (id)textRendererForLayer:(id)arg1 context:(struct CGContext { }*)arg2;
- (id)topLevelReps;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unscaledRectOfLayouts;
- (struct CGSize { double x1; double x2; })unscaledSize;
- (double)viewScale;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleUnscaledRectForClippingReps;
- (bool)wantsEditingLayoutsForOffscreenInfos;

@end
