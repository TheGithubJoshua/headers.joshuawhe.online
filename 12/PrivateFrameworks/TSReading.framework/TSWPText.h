<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSWPText.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSWPText.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSWPText : NSObject <TSWPColumnMetrics, TSWPLayoutOwner, TSWPLayoutTarget> {
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchor;
    TSWPColumnStyle * _columnStyle;
    NSMutableArray * _columns;
    NSObject<TSWPTextDelegate> * _delegate;
    int  _flags;
    TSWPListStyle * _listStyle;
    struct CGSize { 
        double width; 
        double height; 
    }  _maxSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _minSize;
    int  _naturalAlignment;
    int  _naturalDirection;
    unsigned long long  _pageCount;
    unsigned long long  _pageNumber;
    TSWPParagraphStyle * _paragraphStyle;
    TSWPTextParentInfo * _parentInfo;
    TSWPTextParentLayout * _parentLayout;
    TSWPStorage * _storage;
    TSSStylesheet * _stylesheet;
    TSUColor * _textColorOverride;
    bool  _vertical;
}

@property (nonatomic, readonly) bool alwaysStartsNewTarget;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } anchorPoint;
@property (nonatomic, retain) NSMutableArray *anchoredDrawablesForRelayout;
@property (nonatomic, readonly) unsigned long long autosizeFlags;
@property (nonatomic, readonly) TSDCanvas *canvas;
@property (nonatomic, readonly) NSArray *childLayouts;
@property (nonatomic, readonly) unsigned long long columnCount;
@property (nonatomic, readonly) NSMutableArray *columns;
@property (nonatomic, readonly) bool columnsAreLeftToRight;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } currentSize;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) NSObject<TSWPTextDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <TSWPFootnoteHeightMeasurer> *footnoteHeightMeasurer;
@property (nonatomic, readonly) <TSWPFootnoteMarkProvider> *footnoteMarkProvider;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct __CFLocale { }*hyphenationLocale;
@property (nonatomic, readonly) bool isInstructional;
@property (nonatomic, readonly) bool isLinked;
@property (nonatomic, readonly) bool layoutIsValid;
@property (nonatomic, readonly) TSWPPadding *layoutMargins;
@property (nonatomic, readonly) TSULocale *locale;
@property (nonatomic, readonly) bool marginsAreMirrored;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } maskRect;
@property (nonatomic, readonly) double maxAnchorInBlockDirection;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maxSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } minSize;
@property (nonatomic, readonly) int naturalAlignment;
@property (nonatomic, readonly) int naturalDirection;
@property (nonatomic, readonly) TSPObject<TSDHint> *nextTargetFirstChildHint;
@property (nonatomic, readonly) <TSWPOffscreenColumn> *nextTargetFirstColumn;
@property (nonatomic, readonly) NSObject<TSWPTopicNumberHints> *nextTargetTopicNumbers;
@property (nonatomic, readonly) unsigned long long pageCount;
@property (nonatomic, readonly) unsigned long long pageNumber;
@property (nonatomic, readonly) TSWPParagraphStyle *paragraphStyle;
@property (nonatomic, readonly) TSDLayout *parentLayoutForInlineAttachments;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } position;
@property (nonatomic, readonly) <TSWPOffscreenColumn> *previousTargetLastColumn;
@property (nonatomic, readonly) NSObject<TSWPTopicNumberHints> *previousTargetTopicNumbers;
@property (nonatomic, readonly) bool repShouldPreventCaret;
@property (nonatomic, readonly) bool shouldHyphenate;
@property (nonatomic, readonly) bool shouldWrapAroundExternalDrawables;
@property (nonatomic, readonly) bool shrinkTextToFit;
@property (nonatomic, readonly) TSWPStorage *storage;
@property (readonly) Class superclass;
@property (nonatomic, retain) TSUColor *textColorOverride;
@property (nonatomic, readonly) bool textIsVertical;
@property (nonatomic, readonly) double textScaleFactor;
@property (nonatomic) bool vertical;
@property (nonatomic, readonly) int verticalAlignment;
@property (nonatomic, readonly) bool wantsLineFragments;

- (void).cxx_destruct;
- (void)addAttachmentLayout:(id)arg1;
- (struct CGSize { double x1; double x2; })adjustedInsetsForTarget:(id)arg1;
- (bool)alwaysStartsNewTarget;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (unsigned long long)autosizeFlags;
- (bool)caresAboutStorageChanges;
- (id)childLayouts;
- (unsigned long long)columnCount;
- (id)columnMetricsForCharIndex:(unsigned long long)arg1 outRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)columns;
- (bool)columnsAreLeftToRight;
- (id)currentAnchoredDrawableLayouts;
- (id)currentInlineDrawableLayouts;
- (struct CGSize { double x1; double x2; })currentSize;
- (id)delegate;
- (void)didLayoutChangingDirtyRanges;
- (void)drawColumn:(id)arg1 inContext:(struct CGContext { }*)arg2 isFlipped:(bool)arg3 viewScale:(double)arg4;
- (void)drawColumn:(id)arg1 selection:(id)arg2 inContext:(struct CGContext { }*)arg3 isFlipped:(bool)arg4 viewScale:(double)arg5;
- (void)drawColumn:(id)arg1 selection:(id)arg2 inContext:(struct CGContext { }*)arg3 isFlipped:(bool)arg4 viewScale:(double)arg5 renderMode:(int)arg6;
- (void)drawText:(id)arg1 inContext:(struct CGContext { }*)arg2 minSize:(struct CGSize { double x1; double x2; })arg3 maxSize:(struct CGSize { double x1; double x2; })arg4 anchor:(struct CGPoint { double x1; double x2; })arg5 flags:(int)arg6 isFlipped:(bool)arg7 viewScale:(double)arg8;
- (id)footnoteHeightMeasurer;
- (id)footnoteMarkProvider;
- (bool)forceWesternLineBreaking;
- (double)gapForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;
- (struct __CFLocale { }*)hyphenationLocale;
- (id)init;
- (id)initWithParagraphStyle:(id)arg1 columnStyle:(id)arg2;
- (id)initWithParagraphStyle:(id)arg1 listStyle:(id)arg2 columnStyle:(id)arg3;
- (id)initWithStylesheet:(id)arg1 paragraphStyle:(id)arg2 listStyle:(id)arg3 columnStyle:(id)arg4 alignmentForNaturalAlignment:(int)arg5 naturalDirection:(int)arg6;
- (bool)isInstructional;
- (bool)isLastTarget;
- (bool)isLayoutOffscreen;
- (bool)layoutIsValid;
- (void)layoutManager:(id)arg1 didClearDirtyRangeWithDelta:(long long)arg2 afterCharIndex:(unsigned long long)arg3;
- (void)layoutManagerNeedsLayout:(id)arg1;
- (id)layoutMargins;
- (id)layoutText:(id)arg1 context:(id)arg2 kind:(int)arg3 minSize:(struct CGSize { double x1; double x2; })arg4 maxSize:(struct CGSize { double x1; double x2; })arg5 anchor:(struct CGPoint { double x1; double x2; })arg6 flags:(int)arg7;
- (id)layoutText:(id)arg1 minSize:(struct CGSize { double x1; double x2; })arg2 maxSize:(struct CGSize { double x1; double x2; })arg3 anchor:(struct CGPoint { double x1; double x2; })arg4 flags:(int)arg5;
- (id)layoutTextStorage:(id)arg1 minSize:(struct CGSize { double x1; double x2; })arg2 maxSize:(struct CGSize { double x1; double x2; })arg3 anchor:(struct CGPoint { double x1; double x2; })arg4 flags:(int)arg5;
- (id)layoutTextStorage:(id)arg1 minSize:(struct CGSize { double x1; double x2; })arg2 maxSize:(struct CGSize { double x1; double x2; })arg3 anchor:(struct CGPoint { double x1; double x2; })arg4 pageNumber:(unsigned long long)arg5 pageCount:(unsigned long long)arg6 flags:(int)arg7;
- (id)locale;
- (double)maxAnchorInBlockDirection;
- (struct CGSize { double x1; double x2; })maxSize;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1;
- (struct CGSize { double x1; double x2; })minSize;
- (int)naturalAlignment;
- (int)naturalDirection;
- (id)nextTargetFirstChildHint;
- (id)nextTargetFirstColumn;
- (id)nextTargetTopicNumbers;
- (void)p_setParentLayoutMaximumFrameSizeForChildren;
- (unsigned long long)pageCount;
- (unsigned long long)pageNumber;
- (id)paragraphStyle;
- (struct CGPoint { double x1; double x2; })position;
- (double)positionForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2 target:(id)arg3 outWidth:(double*)arg4 outGap:(double*)arg5;
- (id)previousTargetLastColumn;
- (id)previousTargetTopicNumbers;
- (void)setDelegate:(id)arg1;
- (void)setNeedsDisplayInTargetRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTextColorOverride:(id)arg1;
- (void)setVertical:(bool)arg1;
- (bool)shouldHyphenate;
- (bool)shouldWrapAroundExternalDrawables;
- (bool)shrinkTextToFit;
- (id)storage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetRectForCanvasRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)textColorOverride;
- (bool)textIsVertical;
- (id)textWrapper;
- (id)validatedLayoutForAnchoredDrawable:(id)arg1;
- (id)validatedLayoutForInlineDrawable:(id)arg1;
- (bool)vertical;
- (int)verticalAlignment;
- (bool)wantsLineFragments;
- (double)widthForColumnIndex:(unsigned long long)arg1 bodyWidth:(double)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
