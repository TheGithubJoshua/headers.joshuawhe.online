/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDImageRep : TSDMediaRep <CALayerDelegate, TSDImageDrawingDataSource, TSDMagicMoveMatching> {
    TSDImageDrawingHelper * _drawingHelper;
    bool  _frameInUnscaledCanvasIsValid;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frameInUnscaledCanvasRelativeToSuper;
    TSDLayoutGeometry * _lastImageGeometryInRoot;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _lastLayoutToImageTransform;
    TSDLayoutGeometry * _lastMaskGeometryInRoot;
    NSMutableArray * _updateFromLayoutBlocks;
    NSObject<OS_dispatch_semaphore> * _updateFromLayoutBlocksLock;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) TSPData *imageDataForRendering;
@property (nonatomic, readonly) TSDImageInfo *imageInfo;
@property (nonatomic, readonly) TSDImageLayout *imageLayout;
@property (nonatomic, readonly) TSDMaskInfo *maskInfo;
@property (nonatomic, readonly) TSDMaskLayout *maskLayout;
@property (readonly) Class superclass;

+ (double)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 mixingTypeContext:(id)arg3;

- (void).cxx_destruct;
- (bool)canDrawInParallel;
- (bool)canDrawShadowInOneStepWithChildren:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clipRect;
- (void)dealloc;
- (id)downloadProgressPlaceholderImage;
- (void)drawInContextWithoutEffects:(struct CGContext { }*)arg1 withContent:(bool)arg2 strokeDrawOptions:(unsigned long long)arg3 withOpacity:(bool)arg4 forAlphaOnly:(bool)arg5 drawChildren:(bool)arg6 keepingChildrenPassingTest:(id /* block */)arg7;
- (void)drawInLayerContext:(struct CGContext { }*)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInUnscaledCanvas;
- (id)imageDataForRendering;
- (id)imageDrawingHelperAdjustedImageData:(id)arg1;
- (id)imageDrawingHelperImageData:(id)arg1;
- (bool)imageDrawingHelperImageHasAlpha:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageDrawingHelperImageRect:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })imageDrawingHelperImageTransformInRootForAntialiasingDefeat:(id)arg1;
- (id)imageDrawingHelperThumbnailAdjustedImageData:(id)arg1;
- (id)imageDrawingHelperThumbnailImageData:(id)arg1;
- (id)imageInfo;
- (id)imageLayout;
- (id)imageOfStroke:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (bool)isDataCurrentlyDownloading;
- (id)maskInfo;
- (id)maskLayout;
- (void)p_drawInContext:(struct CGContext { }*)arg1 withContent:(bool)arg2 strokeDrawOptions:(unsigned long long)arg3 withOpacity:(double)arg4 withMask:(bool)arg5 withIAMask:(bool)arg6 forLayer:(bool)arg7 forShadow:(bool)arg8 forHitTest:(bool)arg9;
- (bool)p_drawsInOneStep;
- (bool)p_shouldUseSourceImageForDescription:(id)arg1 clipBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 image:(struct CGImage { }*)arg4;
- (id)p_validatedBitmapImageProvider;
- (id)p_validatedImageProvider;
- (void)setTextureAttributes:(id)arg1 textureBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)shouldShowCheckerboard;
- (id)textureForDescription:(id)arg1;
- (void)willBeRemoved;

@end
