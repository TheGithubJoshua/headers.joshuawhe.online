<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTAnimation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTAnimation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTAnimation : NSObject <NSCopying> {
    bool  mByCell;
    bool  mByCellRange;
    bool  mByColumn;
    bool  mByContent;
    bool  mByMissingCellRange;
    bool  mByRow;
    unsigned long long  mCellRangeCount;
    struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } * mCellRanges;
    bool  mDrawsBlackAndWhite;
    bool  mExpandBackgroundFill;
    bool  mFinal;
    int  mKind;
    TSTLayout * mLayout;
    bool  mReverse;
    bool  mShowsOverlayLayers;
    bool  mShowsTableChrome;
    unsigned long long  mStage;
    unsigned long long  mStageCount;
}

@property (readonly) unsigned long long cellRangeCount;
@property (readonly) bool clipStrokes;
@property (readonly) bool drawCellBackground;
@property (readonly) bool drawCellContent;
@property (readonly) bool drawStrokes;
@property (readonly) bool drawTableBackground;
@property (readonly) bool drawTableName;
@property bool drawsBlackAndWhite;
@property (readonly) bool enabled;
@property bool expandBackgroundFill;
@property (readonly) bool final;
@property (nonatomic) TSTLayout *layout;
@property bool showsOverlayLayers;
@property bool showsTableChrome;
@property (readonly) unsigned long long stage;
@property (readonly) unsigned long long stageCount;

+ (bool)deliveryStyleSupportedForExport:(unsigned long long)arg1;
+ (id)newAnimationWithLayout:(id)arg1 andCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;
+ (id)newAnimationWithLayout:(id)arg1 andDeliveryStyle:(unsigned long long)arg2;
+ (unsigned long long)p_NumberOfCellBuilds:(id)arg1;
+ (unsigned long long)p_NumberOfColumnBuilds:(id)arg1;
+ (unsigned long long)p_NumberOfRowBuilds:(id)arg1;
+ (unsigned long long)p_stageCountForProvider:(id)arg1 withAnimationKind:(int)arg2;
+ (unsigned long long)stageCountForTextureDeliveryStyle:(unsigned long long)arg1 tableProvider:(id)arg2;
+ (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)arg1;
+ (id)textureDeliveryStylesLocalized:(bool)arg1;

- (void)addCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })cellRangeAtIndex:(unsigned long long)arg1;
- (unsigned long long)cellRangeCount;
- (void)clearCellRanges;
- (bool)clipStrokes;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (bool)drawCellBackground;
- (bool)drawCellContent;
- (bool)drawStrokes;
- (bool)drawTableBackground;
- (bool)drawTableName;
- (bool)drawsBlackAndWhite;
- (bool)enabled;
- (bool)expandBackgroundFill;
- (bool)final;
- (bool)isHidingContentOfCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)layout;
- (void)setDrawsBlackAndWhite:(bool)arg1;
- (void)setExpandBackgroundFill:(bool)arg1;
- (void)setLayout:(id)arg1;
- (void)setShowsOverlayLayers:(bool)arg1;
- (void)setShowsTableChrome:(bool)arg1;
- (void)setStage:(unsigned long long)arg1 andFinal:(bool)arg2;
- (bool)showsOverlayLayers;
- (bool)showsTableChrome;
- (unsigned long long)stage;
- (unsigned long long)stageCount;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
