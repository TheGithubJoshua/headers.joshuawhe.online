<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSADocumentRoot.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSADocumentRoot.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSADocumentRoot : TSWPDocumentRoot <TSDImportExportDelegate, TSDScrollingAwareChangeSource, TSKPencilAnnotationSupportedDocument> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    SFUCryptoKey * _accessQueue_documentCacheDecryptionKey;
    NSArray * _buildVersionHistory;
    TSCECalculationEngine * _calculationEngine;
    bool  _canUseHEVC;
    bool  _collaborativeMediaCompatibilityUpgradeDidFail;
    TSTCustomFormatList * _deprecatedTablesCustomFormatList;
    bool  _didLoadControllers;
    bool  _didLoadDocumentFromRevert;
    bool  _didLoadDocumentFromTemplate;
    bool  _documentCurrentlyImporting;
    NSString * _documentLanguage;
    unsigned long long  _documentLanguageWritingDirection;
    bool  _documentLocaleWasUpdated;
    TSAFunctionBrowserState * _functionBrowserState;
    bool  _hasPreUFFVersion;
    bool  _isClosed;
    TSPDocumentRevision * _lastSyncRevision;
    bool  _needsMediaCompatibilityUpgrade;
    _Atomic int  _needsToCaptureViewState;
    TSAShortcutController * _shortcutController;
    TSKCustomFormatList * _tablesCustomFormatList;
    NSString * _templateIdentifier;
    NSMutableDictionary * _upgradeState;
    TSPLazyReference * _viewStateReference;
    NSMutableSet * _warnings;
}

@property (nonatomic, copy) NSArray *buildVersionHistory;
@property (nonatomic, retain) TSCECalculationEngine *calculationEngine;
@property (nonatomic) bool canUseHEVC;
@property (nonatomic) bool collaborativeMediaCompatibilityUpgradeDidFail;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *defaultDraftName;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didLoadDocumentFromRevert;
@property (nonatomic) bool didLoadDocumentFromTemplate;
@property (getter=isDocumentCurrentlyImporting, nonatomic) bool documentCurrentlyImporting;
@property (nonatomic, readonly) TSADocumentInfo *documentInfo;
@property (nonatomic, readonly) bool documentLocaleWasUpdated;
@property (nonatomic, readonly) TSDFreehandDrawingToolkitUIState *freehandDrawingToolkitUIState;
@property (nonatomic, readonly) bool hasFloatingLocale;
@property (nonatomic) bool hasPreUFFVersion;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSMapTable *incompatibleMediaContainersWithDataUnsupportedOnAllDevices;
@property (nonatomic, readonly) NSMapTable *incompatibleMediaContainersWithDataUnsupportedOnThisDevice;
@property (nonatomic, readonly) bool isBrowsingVersions;
@property (nonatomic, readonly) bool isClosed;
@property (nonatomic, readonly) bool isLoaded;
@property (nonatomic, readonly) bool isMultiPageForQuickLook;
@property (nonatomic, readonly) NSDictionary *missingFontNamesAndWarningMessages;
@property (nonatomic, readonly) NSSet *missingFontWarningMessages;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic) bool needsMediaCompatibilityUpgrade;
@property (nonatomic, readonly) NSDictionary *packageDataForWrite;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *templateIdentifier;
@property (nonatomic, readonly) TSKViewState *viewState;

+ (id)buildVersionHistoryPath;
+ (id)buildVersionHistoryPathPreUFF;
+ (void)localizeChartInfo:(id)arg1 withTemplateBundle:(id)arg2 andLocale:(id)arg3;
+ (void)localizeModelObject:(id)arg1 withTemplateBundle:(id)arg2 andLocale:(id)arg3;
+ (void)localizeTableInfo:(id)arg1 withTemplateBundle:(id)arg2 andLocale:(id)arg3;
+ (void)localizeTextStorage:(id)arg1 withTemplateBundle:(id)arg2 andLocale:(id)arg3;
+ (id)persistenceWarningsForData:(id)arg1 flags:(unsigned long long)arg2;
+ (struct CGSize { double x1; double x2; })previewImageMaxSizeForType:(unsigned long long)arg1;
+ (struct CGSize { double x1; double x2; })previewImageSizeForType:(unsigned long long)arg1;
+ (unsigned long long)previewTypeForCurrentDevice;
+ (void)removeExistingPreviewsForDocumentAtPath:(id)arg1;
+ (id)scaledPreviewImageForType:(unsigned long long)arg1 scalableImage:(id)arg2;
+ (bool)shouldShowImportedDataNotificationsOnOpen;
+ (id)supportedPreviewImageExtensions;
+ (id)supportedScalablePreviewNames;
+ (void)writePreviewImage:(id)arg1 group:(id)arg2 queue:(id)arg3 dataConsumerProvider:(id /* block */)arg4 completion:(id /* block */)arg5;
+ (void)writePreviewImage:(id)arg1 toPath:(id)arg2 withIntermediateDirectories:(bool)arg3 name:(id)arg4 group:(id)arg5 queue:(id)arg6 completion:(id /* block */)arg7;
+ (bool)writePreviewImagesToPackageDataWriter:(id)arg1 scalableImage:(id)arg2;
+ (bool)writePreviewImagesToPackageDataWriter:(id)arg1 scalableImage:(id)arg2 group:(id)arg3 queue:(id)arg4;
+ (bool)writePreviewImagesToPath:(id)arg1 scalableImage:(id)arg2;
+ (bool)writePreviewImagesToPath:(id)arg1 scalableImage:(id)arg2 group:(id)arg3 queue:(id)arg4;

- (void).cxx_destruct;
- (void)addWarning:(id)arg1;
- (id)additionalDocumentPropertiesForWrite;
- (id)additionalResourceRequestsForObjectContext:(id)arg1;
- (id)allPencilAnnotations;
- (void)applyViewState:(id)arg1;
- (void)blockForRecalcWithTimeout:(double)arg1;
- (id)buildVersionHistory;
- (id)calculationEngine;
- (bool)canBeAnnotatedWithPencil;
- (bool)canUseHEVC;
- (id)captureViewState;
- (id)captureViewStateForImport;
- (void)captureViewStateIfNeeded;
- (bool)childrenCanBeAnnotatedWithPencil;
- (void)cleanupForImportFailure;
- (bool)collaborativeMediaCompatibilityUpgradeDidFail;
- (void)collectDocumentCloseAnalyticsWithLogger:(id)arg1;
- (void)collectDocumentOpenAnalyticsWithLogger:(id)arg1;
- (id)commandForPropagatingPresetChangeCommand:(id)arg1 alwaysPreserveAppearance:(bool)arg2;
- (void)commonInit;
- (long long)compareLocationSortingInfo:(id)arg1 toSortingInfo:(id)arg2;
- (id)consolidatedDocumentWarningsFromWarnings:(id)arg1;
- (id)createViewStateRootForContinuation:(bool)arg1;
- (double)currentDesiredPencilAnnotationDrawingScale;
- (id)customFormatList;
- (id)dataFromDocumentCachePath:(id)arg1;
- (void)dealloc;
- (id)defaultDraftName;
- (void)didDownloadDocumentResources:(id)arg1;
- (void)didDownloadRemoteData:(id)arg1;
- (void)didEnterBackground;
- (bool)didLoadDocumentFromRevert;
- (bool)didLoadDocumentFromTemplate;
- (void)didSaveWithEncryptionChange;
- (id)documentCachePath;
- (void)documentCacheWasInvalidated;
- (void)documentDidLoad;
- (id)documentInfo;
- (id)documentLanguage;
- (bool)documentLocaleWasUpdated;
- (void)enumeratePencilAnnotationsFromRootObject:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)enumeratePencilAnnotationsUsingBlock:(id /* block */)arg1;
- (void)enumerateStylesheetsUsingBlock:(id /* block */)arg1;
- (bool)exportToPath:(id)arg1 exporter:(id)arg2 delegate:(id)arg3 error:(id*)arg4;
- (bool)exportToPath:(id)arg1 exporter:(id)arg2 error:(id*)arg3;
- (void)fontUpdatedForStyleClient:(id)arg1;
- (id)freehandDrawingToolkitUIState;
- (void)fulfillPasteboardPromises;
- (id)functionBrowserState;
- (bool)hasFloatingLocale;
- (bool)hasICloudConflict;
- (bool)hasPencilAnnotations;
- (bool)hasPreUFFVersion;
- (void)importerDidFinish:(id)arg1;
- (id)initWithContext:(id)arg1;
- (void)initializeForImport;
- (void)insertTextPresetDisplayItemsPreservingGrouping:(id)arg1 insertAtBeginningOfGroup:(bool)arg2;
- (void)invalidateViewState;
- (bool)isClosed;
- (bool)isDocumentCurrentlyImporting;
- (bool)isLoaded;
- (bool)isMultiPageForQuickLook;
- (void)loadFromArchive:(const struct DocumentArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSWP::TextPresetDisplayItemArchive> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_7_1_1; } x7; struct DocumentArchive {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct Reference {} *x11; struct Reference {} *x12; struct Reference {} *x13; struct Reference {} *x14; struct Reference {} *x15; struct Reference {} *x16; bool x17; bool x18; bool x19; }*)arg1 unarchiver:(id)arg2;
- (id)makeIsolatedStyleMapper;
- (id)makeStyleMapper;
- (id)missingFontNamesAndWarningMessages;
- (id)missingFontWarningMessages;
- (id)name;
- (id)namedTextStyles;
- (bool)needsMediaCompatibilityUpgrade;
- (id)newExporterForType:(id)arg1 options:(id)arg2 preferredType:(id*)arg3;
- (struct CGImageSource { }*)newImageSourceForDocumentCachePath:(id)arg1;
- (bool)objectsNeedToBeMigrated:(id)arg1;
- (void)pUpgradeHyperlinks;
- (void)pUpgradeHyperlinksInStorage:(id)arg1;
- (id)p_captureViewStateForImport:(bool)arg1;
- (void)p_cleanupColumnStyles;
- (id)p_parseNumberOutOfBasename:(id)arg1 hasNumber:(bool*)arg2 number:(unsigned long long*)arg3;
- (void)p_registerAllFormulasAfterImport;
- (void)p_removeStyles:(id)arg1;
- (void)p_replaceStyle:(id)arg1 andChildrenWithVariationOfStyle:(id)arg2;
- (void)p_replaceStyles:(id)arg1 andChildrenWithVariationOfStyle:(id)arg2;
- (void)p_updateBuildVersionHistoryWithVersionOfTemplateBundle:(id)arg1;
- (bool)p_updateDocumentLanguageToCurrentIfNeeded;
- (void)p_updateViewStateWithRoot:(id)arg1;
- (void)p_upgradeCustomFormatList;
- (void)p_upgradeDocumentCreationLocale;
- (void)p_upgradeTablesIfNeeded:(unsigned long long)arg1;
- (id)packageDataForWrite;
- (void)pauseRecalculation;
- (void)pauseRecalculationSometimeSoon;
- (id)pencilAnnotationEnumeratorFromRootObect:(id)arg1;
- (void)performHyperlinkUpgradesIfNecessaryForVersion:(unsigned long long)arg1;
- (void)performStylesheetUpdatesIfNecessaryForVersion:(unsigned long long)arg1;
- (void)prepareForSavingAsTemplate;
- (void)prepareNewDocumentWithTemplateBundle:(id)arg1 documentLocale:(id)arg2;
- (void)prepareToGeneratePreview;
- (id)previewImage;
- (id)previewImageForSize:(struct CGSize { double x1; double x2; })arg1;
- (id)protected_defaultTextPresetOrdering;
- (id)readBuildVersionHistoryFromDiskHasPreUFFVersion:(bool)arg1;
- (id)referencedStylesOfClass:(Class)arg1;
- (void)removePencilAnnotations;
- (void)removePencilAnnotationsFromDrawables:(id)arg1;
- (void)removeRedundantStyleOverridesAndEnsureReferencedStylesAreInStylesheet;
- (void)removeWarning:(id)arg1;
- (void)resetViewState;
- (void)resumeBackgroundActivities;
- (void)resumeRecalculation;
- (void)resumeThumbnailing;
- (void)saveToArchive:(struct DocumentArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSWP::TextPresetDisplayItemArchive> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_7_1_1; } x7; struct DocumentArchive {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct Reference {} *x11; struct Reference {} *x12; struct Reference {} *x13; struct Reference {} *x14; struct Reference {} *x15; struct Reference {} *x16; bool x17; bool x18; bool x19; }*)arg1 archiver:(id)arg2;
- (void)setBuildVersionHistory:(id)arg1;
- (void)setCalculationEngine:(id)arg1;
- (void)setCanUseHEVC:(bool)arg1;
- (void)setCollaborativeMediaCompatibilityUpgradeDidFail:(bool)arg1;
- (void)setCustomFormatListToUpgrade:(id)arg1;
- (void)setDidLoadDocumentFromRevert:(bool)arg1;
- (void)setDidLoadDocumentFromTemplate:(bool)arg1;
- (void)setDocumentCreationLocale:(id)arg1;
- (void)setDocumentCurrentlyImporting:(bool)arg1;
- (void)setDocumentLanguage:(id)arg1;
- (void)setFunctionBrowserState:(id)arg1;
- (void)setHasPreUFFVersion:(bool)arg1;
- (void)setNeedsMediaCompatibilityUpgrade:(bool)arg1;
- (void)setShortcutController:(id)arg1;
- (void)setTemplateIdentifier:(id)arg1;
- (id)shortcutController;
- (bool)shouldAllowDrawableInGroups:(id)arg1 forImport:(bool)arg2;
- (bool)shouldCancelScrollingToSelectionPath:(id)arg1 forChanges:(id)arg2;
- (bool)shouldShowFontWarningNotificationForWarnings:(id)arg1;
- (void)stashUpgradeState:(const struct DocumentArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSWP::TextPresetDisplayItemArchive> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_7_1_1; } x7; struct DocumentArchive {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct Reference {} *x11; struct Reference {} *x12; struct Reference {} *x13; struct Reference {} *x14; struct Reference {} *x15; struct Reference {} *x16; bool x17; bool x18; bool x19; }*)arg1 unarchiver:(id)arg2;
- (void)suspendBackgroundActivities;
- (void)suspendThumbnailing;
- (id)tableToShowImportedDataNotificationOnOpenFor;
- (id)templateIdentifier;
- (id)tsa_delegate;
- (id)uniqueDocumentCachePathForProposedPath:(id)arg1;
- (void)updateViewStateWithRoot:(id)arg1;
- (void)updateWritingDirection:(unsigned long long)arg1;
- (void)upgradeCellStyles;
- (id)upgradeState;
- (void)upgradeTextStylesForUnityAfterSingleStylesheetUpgrade;
- (void)upgradeTextStylesForUnityBeforeSingleStylesheetUpgrade;
- (void)upgradeTextStylesForUnityPlusFromFileFormatVersion:(unsigned long long)arg1;
- (void)upgradeTextboxPresets;
- (void)upgradeToFixNonVariationChildStylesWithFileFormatVersion:(unsigned long long)arg1;
- (void)upgradeToSingleStylesheet;
- (id)viewState;
- (id)warningLocationDescriptionForAffectedObjects:(id)arg1 sortingInfo:(id*)arg2;
- (id)warnings;
- (id)warningsByCombiningSortedWarnings:(id)arg1 withWarnings:(id)arg2;
- (void)willClose;
- (void)willEnterForeground;
- (void)willUnload;
- (bool)writeData:(id)arg1 atDocumentCachePath:(id)arg2;
- (unsigned long long)writingDirection;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
