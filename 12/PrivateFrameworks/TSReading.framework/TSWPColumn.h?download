/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSWPColumn : NSObject <TSWPOffscreenColumn> {
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _anchoredAttachmentRange;
    unsigned long long  _characterCount;
    unsigned long long  _columnIndex;
    double  _contentBottom;
    double  _erasableContentBottom;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frameBounds;
    unsigned long long  _layoutResultFlags;
    struct shared_ptr<TSWPLineFragmentArray> { 
        struct TSWPLineFragmentArray {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _lineFragmentArray;
    double  _nextLinePosition;
    unsigned long long  _nextWidowPullsDownFromCharIndex;
    unsigned long long  _pageNumber;
    NSMutableArray * _paragraphAdornments;
    unsigned long long  _scaleTextPercent;
    unsigned long long  _startCharIndex;
    TSWPStorage * _storage;
    unsigned long long  _storageChangeCount;
    <TSWPStyleProvider> * _styleProvider;
    bool  _textIsVertical;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _transform;
}

@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } anchoredRange;
@property (nonatomic) unsigned long long characterCount;
@property (nonatomic) unsigned long long columnIndex;
@property (nonatomic) double contentBlockBottom;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) double erasableContentBottom;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameBounds;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool lastLineIsEmptyAndHasListLabel;
@property (nonatomic) unsigned long long layoutResultFlags;
@property (nonatomic, readonly) unsigned long long lineCount;
@property (nonatomic) double nextLinePosition;
@property (nonatomic) unsigned long long nextWidowPullsDownFromCharIndex;
@property (nonatomic) unsigned long long pageNumber;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } range;
@property (nonatomic) unsigned long long scaleTextPercent;
@property (nonatomic) unsigned long long startCharIndex;
@property (nonatomic, readonly) TSWPStorage *storage;
@property (nonatomic) unsigned long long storageChangeCount;
@property (nonatomic) <TSWPStyleProvider> *styleProvider;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double textBlockBottom;
@property (nonatomic) bool textIsVertical;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromWP;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToWP;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } typographicBounds;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } wpBounds;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsRectForSelection:(id)arg1 columnArray:(id)arg2 includeRuby:(bool)arg3 includePaginatedAttachments:(bool)arg4;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForInsertionPoint:(id)arg1 withColumns:(id)arg2;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x1; double x2; })arg1 inColumnsArray:(id)arg2 allowPastBreak:(bool)arg3 allowNotFound:(bool)arg4 ignoreEmptyColumns:(bool)arg5 isAtEndOfLine:(bool*)arg6 leadingEdge:(bool*)arg7;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x1; double x2; })arg1 inColumnsArray:(id)arg2 allowPastBreak:(bool)arg3 allowNotFound:(bool)arg4 pastCenterGoesToNextChar:(bool)arg5 constrainToAscentAndDescent:(bool)arg6 ignoreEmptyColumns:(bool)arg7 isAtEndOfLine:(bool*)arg8 leadingEdge:(bool*)arg9;
+ (unsigned long long)charIndexForPoint:(struct CGPoint { double x1; double x2; })arg1 inColumnsArray:(id)arg2 allowPastBreak:(bool)arg3 allowNotFound:(bool)arg4 pastCenterGoesToNextChar:(bool)arg5 ignoreEmptyColumns:(bool)arg6 isAtEndOfLine:(bool*)arg7 leadingEdge:(bool*)arg8;
+ (unsigned long long)charIndexForPointWithPinning:(struct CGPoint { double x1; double x2; })arg1 constrainToAscentAndDescent:(bool)arg2 inLayoutTarget:(id)arg3;
+ (unsigned long long)charIndexForPointWithPinning:(struct CGPoint { double x1; double x2; })arg1 inLayoutTarget:(id)arg2;
+ (unsigned long long)charIndexForPointWithPinning:(struct CGPoint { double x1; double x2; })arg1 isTail:(bool)arg2 selectionType:(int)arg3 inLayoutTarget:(id)arg4;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 allowNotFound:(bool)arg3 constrainToAscentAndDescent:(bool)arg4 isAtEndOfLine:(bool*)arg5 leadingEdge:(bool*)arg6 inLayoutTarget:(id)arg7;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 allowNotFound:(bool)arg3 isAtEndOfLine:(bool*)arg4 leadingEdge:(bool*)arg5 inLayoutTarget:(id)arg6;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 allowNotFound:(bool)arg3 pastCenterGoesToNextChar:(bool)arg4 constrainToAscentAndDescent:(bool)arg5 isAtEndOfLine:(bool*)arg6 leadingEdge:(bool*)arg7 ignoreEmptyColumns:(bool)arg8 inLayoutTarget:(id)arg9;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 allowNotFound:(bool)arg3 pastCenterGoesToNextChar:(bool)arg4 constrainToAscentAndDescent:(bool)arg5 isAtEndOfLine:(bool*)arg6 leadingEdge:(bool*)arg7 inLayoutTarget:(id)arg8;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 allowNotFound:(bool)arg3 pastCenterGoesToNextChar:(bool)arg4 isAtEndOfLine:(bool*)arg5 leadingEdge:(bool*)arg6 inLayoutTarget:(id)arg7;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 constrainToAscentAndDescent:(bool)arg3 isAtEndOfLine:(bool*)arg4 inLayoutTarget:(id)arg5;
+ (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 isAtEndOfLine:(bool*)arg3 inLayoutTarget:(id)arg4;
+ (struct _NSRange { unsigned long long x1; unsigned long long x2; })charRangeOnSingleLineFragmentFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 inLayoutTarget:(id)arg3;
+ (id)closestColumnInColumnsArray:(id)arg1 forPoint:(struct CGPoint { double x1; double x2; })arg2 ignoreEmptyColumns:(bool)arg3 ignoreDrawableOnlyColumns:(bool)arg4;
+ (id)columnForCharIndex:(unsigned long long)arg1 allowEndOfColumn:(bool)arg2 withColumns:(id)arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })columnRectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withColumns:(id)arg2;
+ (id)commentKnobBaseOriginForHighlightAtTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withColumns:(id)arg2;
+ (struct CGPoint { double x1; double x2; })connectionLinePointForChangeRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withColumns:(id)arg2 layoutTarget:(id)arg3;
+ (id)footnoteMarkAttachmentInColumnArray:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
+ (id)footnoteReferenceAttachmentInColumnArray:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
+ (struct CGSize { double x1; double x2; })layoutSizeForParagraphEnumerator:(const struct TSWPParagraphEnumerator { id x1; id x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; bool x7; struct _NSRange { unsigned long long x_8_1_1; unsigned long long x_8_1_2; } x8; }*)arg1 inColumns:(id)arg2 lineCount:(out unsigned long long*)arg3 nextLineOffset:(out double*)arg4;
+ (struct CGPoint { double x1; double x2; })p_pinPoint:(struct CGPoint { double x1; double x2; })arg1 toRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (bool)partitionedAttachmentStartsAtCharIndex:(unsigned long long)arg1 withColumns:(id)arg2;
+ (id)pathForHighlightWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 columnArray:(id)arg2 pathStyle:(int)arg3;
+ (struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; double x_3_1_4; double x_3_1_5; double x_3_1_6; double x_3_1_7; } x3; double x4; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_5_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_5_1_2; } x5; double x6; struct { double x_7_1_1; double x_7_1_2; double x_7_1_3; double x_7_1_4; double x_7_1_5; double x_7_1_6; double x_7_1_7; } x7; struct CGAffineTransform { double x_8_1_1; double x_8_1_2; double x_8_1_3; double x_8_1_4; double x_8_1_5; double x_8_1_6; } x8; })pencilAnnotationLineMetricsAtCharIndex:(unsigned long long)arg1 withColumns:(id)arg2;
+ (id)pencilAnnotationRectsForSelection:(id)arg1 withColumns:(id)arg2 outRanges:(id*)arg3;
+ (struct CGPoint { double x1; double x2; })pinPoint:(struct CGPoint { double x1; double x2; })arg1 toBottomOfLineFragmentInColumns:(id)arg2;
+ (struct CGPoint { double x1; double x2; })pinToNaturalBounds:(struct CGPoint { double x1; double x2; })arg1 andLastLineFragment:(bool)arg2 inLayoutTarget:(id)arg3;
+ (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfColumns:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForSelection:(id)arg1 withColumns:(id)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForSelection:(id)arg1 withColumns:(id)arg2 useParagraphModeRects:(bool)arg3;
+ (id)selectionRectsforColumns:(id)arg1 forSelection:(id)arg2;
+ (id)smartFieldWithAttributeKind:(unsigned long long)arg1 inColumnArray:(id)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3;
+ (id)unscaledAnchorRectsForPencilAnnotationAtTextSelection:(id)arg1 withType:(long long)arg2 inLayout:(id)arg3;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)addAdornmentRect:(id)arg1;
- (unsigned long long)anchoredCharCount;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })anchoredRange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsOfLineFragmentAtIndex:(unsigned long long)arg1;
- (struct _TSWPCharIndexAndPosition { unsigned long long x1; int x2; double x3; int x4; double x5; })calcAttachmentPositionForDrawable:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 inTextLayoutTarget:(id)arg3 startOfBoundsInfluencingWrap:(struct CGPoint { double x1; double x2; })arg4 wrapOutset:(struct CGSize { double x1; double x2; })arg5 wrapMargin:(double)arg6 makeInline:(bool)arg7;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForSelection:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })changeBarRectForLineFragment:(const struct TSWPLineFragment { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; double x5; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_6_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_6_1_2; } x6; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_7_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_7_1_2; } x7; struct { double x_8_1_1; double x_8_1_2; double x_8_1_3; double x_8_1_4; double x_8_1_5; double x_8_1_6; double x_8_1_7; } x8; id x9; id x10; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_11_1_1; struct TSWPLineRef {} *x_11_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_11_1_3; } x11; double x12; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_13_1_1; struct TSWPLineRef {} *x_13_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_13_1_3; } x13; }*)arg1 layoutTarget:(id)arg2;
- (unsigned long long)charIndexForSelectionFromPoint:(struct CGPoint { double x1; double x2; })arg1 isTail:(bool)arg2;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 pastCenterGoesToNextChar:(bool)arg3 allowNotFound:(bool)arg4 constrainToAscentAndDescent:(bool)arg5 isAtEndOfLine:(bool*)arg6 leadingEdge:(bool*)arg7;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 pastCenterGoesToNextChar:(bool)arg3 allowNotFound:(bool)arg4 constrainToAscentAndDescent:(bool)arg5 isAtEndOfLine:(bool*)arg6 outFragment:(const struct TSWPLineFragment {}**)arg7 leadingEdge:(bool*)arg8;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 pastCenterGoesToNextChar:(bool)arg3 allowNotFound:(bool)arg4 isAtEndOfLine:(bool*)arg5 leadingEdge:(bool*)arg6;
- (unsigned long long)charIndexFromPoint:(struct CGPoint { double x1; double x2; })arg1 allowPastBreak:(bool)arg2 pastCenterGoesToNextChar:(bool)arg3 allowNotFound:(bool)arg4 isAtEndOfLine:(bool*)arg5 outFragment:(const struct TSWPLineFragment {}**)arg6 leadingEdge:(bool*)arg7;
- (unsigned long long)charIndexFromWPPoint:(struct CGPoint { double x1; double x2; })arg1 pastCenterGoesToNextChar:(bool)arg2 allowNotFound:(bool)arg3 constrainToAscentAndDescent:(bool)arg4 outFragment:(const struct TSWPLineFragment {}**)arg5 leadingEdge:(bool*)arg6;
- (unsigned long long)characterCount;
- (void)clearAdornments;
- (unsigned long long)columnIndex;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })columnRectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (double)contentBlockBottom;
- (void)dealloc;
- (id)drawableIntersectionRectsForSelection:(id)arg1 inTarget:(id)arg2;
- (void)enumerateParagraphAdornmentsUsingBlock:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })erasableBounds:(unsigned long long)arg1;
- (double)erasableContentBottom;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })erasableRectForSelectionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForSelection:(id)arg1 includeSpaceAfter:(bool)arg2 includeSpaceBefore:(bool)arg3 includeLeading:(bool)arg4;
- (unsigned int)fontTraitsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 includingLabel:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameBounds;
- (unsigned long long)glyphCountForRubyFieldAtCharIndex:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })glyphRectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 includingLabel:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })glyphRectForRubyFieldAtCharIndex:(unsigned long long)arg1 glyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)hasPartitionedAttachmentAtStart:(bool)arg1;
- (double)horizontalOffsetForCharIndex:(unsigned long long)arg1 lineFragmentIndex:(unsigned long long)arg2 bumpPastHyphen:(bool)arg3 allowPastLineBounds:(bool)arg4;
- (unsigned int)hyphenCharOfLineFragmentAtIndex:(unsigned long long)arg1;
- (void)incrementRanges:(long long)arg1 startingAt:(unsigned long long)arg2;
- (id)initForTestingWithStorage:(id)arg1 frameBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)initWithStorage:(id)arg1 frameBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)isLastLineFragmentPartitioned;
- (bool)lastLineIsEmptyAndHasListLabel;
- (unsigned long long)layoutResultFlags;
- (id)layoutsForInlineDrawables:(id)arg1;
- (unsigned long long)lineCount;
- (const struct shared_ptr<TSWPLineFragmentArray> { struct TSWPLineFragmentArray {} *x1; struct __shared_weak_count {} *x2; }*)lineFragmentArray;
- (const struct shared_ptr<TSWPLineFragmentArray> { struct TSWPLineFragmentArray {} *x1; struct __shared_weak_count {} *x2; }*)lineFragmentArrayForUnitTests;
- (const struct TSWPLineFragment { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; double x5; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_6_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_6_1_2; } x6; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_7_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_7_1_2; } x7; struct { double x_8_1_1; double x_8_1_2; double x_8_1_3; double x_8_1_4; double x_8_1_5; double x_8_1_6; double x_8_1_7; } x8; id x9; id x10; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_11_1_1; struct TSWPLineRef {} *x_11_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_11_1_3; } x11; double x12; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_13_1_1; struct TSWPLineRef {} *x_13_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_13_1_3; } x13; }*)lineFragmentAtIndex:(unsigned long long)arg1;
- (unsigned long long)lineFragmentCountForBaseline:(double)arg1;
- (unsigned long long)lineIndexForCharIndex:(unsigned long long)arg1 eol:(bool)arg2;
- (struct { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; struct { double x_3_1_1; double x_3_1_2; double x_3_1_3; double x_3_1_4; double x_3_1_5; double x_3_1_6; double x_3_1_7; } x3; double x4; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_5_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_5_1_2; } x5; double x6; struct { double x_7_1_1; double x_7_1_2; double x_7_1_3; double x_7_1_4; double x_7_1_5; double x_7_1_6; double x_7_1_7; } x7; struct CGAffineTransform { double x_8_1_1; double x_8_1_2; double x_8_1_3; double x_8_1_4; double x_8_1_5; double x_8_1_6; } x8; })lineMetricsAtCharIndex:(unsigned long long)arg1 allowEndOfLine:(bool)arg2;
- (id)lineSelectionsForSelection:(id)arg1;
- (double)logicalBoundsBottom;
- (double)logicalBoundsTop;
- (void)makeEmpty:(unsigned long long)arg1 anchoredRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 layoutResultFlags:(unsigned long long)arg3;
- (struct CGSize { double x1; double x2; })maxSize;
- (double)minimumHeightForLayoutOnPage;
- (const struct TSWPLineFragment { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; double x5; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_6_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_6_1_2; } x6; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_7_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_7_1_2; } x7; struct { double x_8_1_1; double x_8_1_2; double x_8_1_3; double x_8_1_4; double x_8_1_5; double x_8_1_6; double x_8_1_7; } x8; id x9; id x10; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_11_1_1; struct TSWPLineRef {} *x_11_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_11_1_3; } x11; double x12; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_13_1_1; struct TSWPLineRef {} *x_13_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_13_1_3; } x13; }*)nearestLineFragmentWithSameVerticalPositionAs:(unsigned long long)arg1 xPos:(double)arg2;
- (double)nextLinePosition;
- (unsigned long long)nextWidowPullsDownFromCharIndex;
- (void)offsetLineFragmentsBy:(struct CGSize { double x1; double x2; })arg1;
- (bool)onlyHasAnchoredDrawable;
- (bool)onlyHasPartitionedAttachments;
- (const struct TSWPLineFragment { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; double x5; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_6_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_6_1_2; } x6; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_7_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_7_1_2; } x7; struct { double x_8_1_1; double x_8_1_2; double x_8_1_3; double x_8_1_4; double x_8_1_5; double x_8_1_6; double x_8_1_7; } x8; id x9; id x10; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_11_1_1; struct TSWPLineRef {} *x_11_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_11_1_3; } x11; double x12; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_13_1_1; struct TSWPLineRef {} *x_13_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_13_1_3; } x13; }*)pColumnEndingPartitionedLineFragmentInSelectionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)pInfoForCharIndex:(unsigned long long)arg1 isAtStart:(out bool*)arg2 isAtEnd:(out bool*)arg3;
- (id)pMutableRectsForSelectionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 selectionType:(int)arg2 includeSpaceAfter:(bool)arg3 includeSpaceBefore:(bool)arg4 includeLeading:(bool)arg5 forParagraphMode:(bool)arg6 includeRuby:(bool)arg7 includePaginatedAttachments:(bool)arg8 inranges:(id)arg9 outranges:(id*)arg10;
- (unsigned long long)pRemapCharIndex:(unsigned long long)arg1 outIsAfterBreak:(out bool*)arg2 outWithTextSource:(out id*)arg3;
- (id)pTransformReturnRects:(id)arg1;
- (unsigned long long)p_charIndexWithTextClosestToWPPoint:(struct CGPoint { double x1; double x2; })arg1 pastCenterGoesToNextChar:(bool)arg2 outFragment:(const struct TSWPLineFragment {}**)arg3 leadingEdge:(bool*)arg4;
- (bool)p_isFirstPartitionForCharIndex:(unsigned long long)arg1;
- (bool)p_pencilAnnotationsShouldSkipLineFragment:(const struct TSWPLineFragment { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned int x4; double x5; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_6_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_6_1_2; } x6; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_7_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_7_1_2; } x7; struct { double x_8_1_1; double x_8_1_2; double x_8_1_3; double x_8_1_4; double x_8_1_5; double x_8_1_6; double x_8_1_7; } x8; id x9; id x10; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_11_1_1; struct TSWPLineRef {} *x_11_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_11_1_3; } x11; double x12; struct vector<TSWPLineRef, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_13_1_1; struct TSWPLineRef {} *x_13_1_2; struct __compressed_pair<TSWPLineRef *, std::__1::allocator<TSWPLineRef> > { struct TSWPLineRef {} *x_3_2_1; } x_13_1_3; } x13; }*)arg1;
- (unsigned long long)pageNumber;
- (id)partitionedLayoutForInfo:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })range;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfLineFragmentAtIndex:(unsigned long long)arg1;
- (id)rectsForSelection:(id)arg1 ranges:(id*)arg2;
- (id)rectsForSelection:(id)arg1 ranges:(id*)arg2 includePaginatedAttachments:(bool)arg3;
- (id)rectsForSelectionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 selectionType:(int)arg2 forParagraphMode:(bool)arg3 includeRuby:(bool)arg4 includePaginatedAttachments:(bool)arg5;
- (id)rectsForSelectionRanges:(id)arg1 selectionType:(int)arg2;
- (void)renderWithRenderer:(id)arg1 currentSelection:(id)arg2 limitSelection:(id)arg3 listRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 rubyGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 isCanvasInteractive:(bool)arg6 isInDrawingMode:(bool)arg7 suppressedMisspellingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg8 blackAndWhite:(bool)arg9 dictationInterpretations:(id)arg10 autocorrections:(id)arg11 markedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg12 markedText:(id)arg13 renderMode:(int)arg14 pageCount:(unsigned long long)arg15 suppressInvisibles:(bool)arg16 suppressFontSmoothing:(bool)arg17 currentCanvasSelection:(id)arg18;
- (bool)requiresGlyphVectorsForHeightMeasurement;
- (unsigned long long)scaleTextPercent;
- (void)setAnchoredRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setCharacterCount:(unsigned long long)arg1;
- (void)setColumnIndex:(unsigned long long)arg1;
- (void)setContentBlockBottom:(double)arg1;
- (void)setErasableContentBottom:(double)arg1;
- (void)setLayoutResultFlags:(unsigned long long)arg1;
- (void)setLineFragmentArray:(const struct shared_ptr<TSWPLineFragmentArray> { struct TSWPLineFragmentArray {} *x1; struct __shared_weak_count {} *x2; }*)arg1;
- (void)setNextLinePosition:(double)arg1;
- (void)setNextWidowPullsDownFromCharIndex:(unsigned long long)arg1;
- (void)setPageNumber:(unsigned long long)arg1;
- (void)setRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setScaleTextPercent:(unsigned long long)arg1;
- (void)setStartCharIndex:(unsigned long long)arg1;
- (void)setStorageChangeCount:(unsigned long long)arg1;
- (void)setStyleProvider:(id)arg1;
- (void)setTextIsVertical:(bool)arg1;
- (void)setTransformFromWP:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setWpBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)singleLinePartitionedInfoAtStart:(bool)arg1;
- (id)smartFieldAtCharIndex:(unsigned long long)arg1 attributeKind:(unsigned long long)arg2;
- (unsigned long long)startAnchoredCharIndex;
- (unsigned long long)startCharIndex;
- (id)storage;
- (unsigned long long)storageChangeCount;
- (id)styleProvider;
- (double)textBlockBottom;
- (double)textHeight;
- (bool)textIsVertical;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromWP;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToWP;
- (void)trimToCharIndex:(unsigned long long)arg1 inTarget:(id)arg2 removeFootnoteReferenceCount:(unsigned long long)arg3 removeAutoNumberFootnoteCount:(unsigned long long)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })typographicBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })wpBounds;

@end
