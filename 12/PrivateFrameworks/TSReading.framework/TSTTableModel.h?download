/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTTableModel : TSPObject <TSCECalculationEngineRegistration, TSCEColumnRowUIDMapping, TSCEFormulaOwning, TSCEReferenceResolving, TSDMixing, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableStrokeProviding, TSTTableTileCreating> {
    TSTCellStyle * _bodyCellStyle;
    TSWPParagraphStyle * _bodyTextStyle;
    TSCECalculationEngine * _calcEngine;
    TSTCellStyle * _categoryLevel1CellStyle;
    TSWPParagraphStyle * _categoryLevel1TextStyle;
    TSTCellStyle * _categoryLevel2CellStyle;
    TSWPParagraphStyle * _categoryLevel2TextStyle;
    TSTCellStyle * _categoryLevel3CellStyle;
    TSWPParagraphStyle * _categoryLevel3TextStyle;
    TSTCellStyle * _categoryLevel4CellStyle;
    TSWPParagraphStyle * _categoryLevel4TextStyle;
    TSTCellStyle * _categoryLevel5CellStyle;
    TSWPParagraphStyle * _categoryLevel5TextStyle;
    TSTCategoryOwner * _categoryOwner;
    TSTCellWillChangeDistributor * _cellWillChangeDistributor;
    TSTCellDictionary * _cellsPendingWrite;
    TSTConcurrentMutableCellUIDSet * _cellsToInvalidateAfterRecalc;
    TSTConcurrentMutableCellUIDSet * _cellsToInvalidateNonoverflowingAfterRecalc;
    TSTColumnRowUIDMap * _columnRowUIDMap;
    NSMapTable * _commentHostingMap;
    TSTConditionalStyleFormulaOwner * _conditionalStyleFormulaOwner;
    TSTTableDataStore * _dataStore;
    double  _defaultColumnWidth;
    double  _defaultRowHeight;
    TSWPStorage * _deprecatedProvider;
    TSTCellStyle * _footerRowCellStyle;
    TSWPParagraphStyle * _footerRowTextStyle;
    struct UUIDData<TSP::UUIDData> { 
        union { 
            unsigned char _uuid[16]; 
            struct { 
                unsigned char byte0; 
                unsigned char byte1; 
                unsigned char byte2; 
                unsigned char byte3; 
                unsigned char byte4; 
                unsigned char byte5; 
                unsigned char byte6; 
                unsigned char byte7; 
                unsigned char byte8; 
                unsigned char byte9; 
                unsigned char byte10; 
                unsigned char byte11; 
                unsigned char byte12; 
                unsigned char byte13; 
                unsigned char byte14; 
                unsigned char byte15; 
            } _cfuuid; 
            struct { 
                unsigned long long _lower; 
                unsigned long long _upper; 
            } ; 
        } ; 
    }  _fromTableUID;
    TSTCellStyle * _headerColumnCellStyle;
    TSWPParagraphStyle * _headerColumnTextStyle;
    bool  _headerColumnsFrozen;
    TSTCellStyle * _headerRowCellStyle;
    TSWPParagraphStyle * _headerRowTextStyle;
    bool  _headerRowsFrozen;
    TSTHiddenStateFormulaOwner * _hiddenStateFormulaOwnerForColumns;
    TSTHiddenStateFormulaOwner * _hiddenStateFormulaOwnerForRows;
    TSTHiddenStatesOwner * _hiddenStatesOwner;
    TSTCellStyle * _labelLevel1CellStyle;
    TSWPParagraphStyle * _labelLevel1TextStyle;
    TSTCellStyle * _labelLevel2CellStyle;
    TSWPParagraphStyle * _labelLevel2TextStyle;
    TSTCellStyle * _labelLevel3CellStyle;
    TSWPParagraphStyle * _labelLevel3TextStyle;
    TSTCellStyle * _labelLevel4CellStyle;
    TSWPParagraphStyle * _labelLevel4TextStyle;
    TSTCellStyle * _labelLevel5CellStyle;
    TSWPParagraphStyle * _labelLevel5TextStyle;
    TSTMergeOwner * _mergeOwner;
    struct TSUModelRowIndex { 
        unsigned int _row; 
    }  _numberOfFooterRows;
    struct TSUModelColumnIndex { 
        unsigned short _column; 
    }  _numberOfHeaderColumns;
    struct TSUModelRowIndex { 
        unsigned int _row; 
    }  _numberOfHeaderRows;
    TSTPencilAnnotationOwner * _pencilAnnotationOwner;
    unsigned long long  _presetIDForUpgrade;
    bool  _presetNeedsStrongOwnership;
    bool  _repeatingHeaderColumnsEnabled;
    bool  _repeatingHeaderRowsEnabled;
    TSTTableSortOrder * _sortOrder;
    TSTSortRuleReferenceTracker * _sortRuleReferenceTracker;
    TSTStrokeSidecar * _strokeSidecar;
    bool  _styleApplyClearsAll;
    TSTTableInfo * _tableInfo;
    NSString * _tableName;
    bool  _tableNameBorderEnabled;
    bool  _tableNameEnabled;
    double  _tableNameHeight;
    TSWPShapeStyle * _tableNameShapeStyle;
    TSWPParagraphStyle * _tableNameStyle;
    TSTTableStyle * _tableStyle;
    TSTTableStylePreset * _tableStylePreset;
    struct UUIDData<TSP::UUIDData> { 
        union { 
            unsigned char _uuid[16]; 
            struct { 
                unsigned char byte0; 
                unsigned char byte1; 
                unsigned char byte2; 
                unsigned char byte3; 
                unsigned char byte4; 
                unsigned char byte5; 
                unsigned char byte6; 
                unsigned char byte7; 
                unsigned char byte8; 
                unsigned char byte9; 
                unsigned char byte10; 
                unsigned char byte11; 
                unsigned char byte12; 
                unsigned char byte13; 
                unsigned char byte14; 
                unsigned char byte15; 
            } _cfuuid; 
            struct { 
                unsigned long long _lower; 
                unsigned long long _upper; 
            } ; 
        } ; 
    }  _tableUID;
    TSTStructuredTextImportRecord * _textImportRecord;
    TSTTableFilterSet * _upgradeFilterSet;
    unsigned long long  _versionAtUnarchive;
    bool  _wasCut;
    bool  _wasUnarchivedFromAProvidedTable;
}

@property (nonatomic, retain) TSTCellStyle *bodyCellStyle;
@property (nonatomic, readonly) TSDStroke *bodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *bodyRowStroke;
@property (nonatomic, readonly) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property (nonatomic, retain) TSWPParagraphStyle *bodyTextStyle;
@property (nonatomic) TSCECalculationEngine *calcEngine;
@property (nonatomic, readonly) TSDStroke *categoryLevel1BottomStroke;
@property (nonatomic, retain) TSTCellStyle *categoryLevel1CellStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel1InteriorStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel1LabelSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *categoryLevel1TextStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel1TopStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel2BottomStroke;
@property (nonatomic, retain) TSTCellStyle *categoryLevel2CellStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel2InteriorStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel2LabelSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *categoryLevel2TextStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel2TopStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel3BottomStroke;
@property (nonatomic, retain) TSTCellStyle *categoryLevel3CellStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel3InteriorStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel3LabelSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *categoryLevel3TextStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel3TopStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel4BottomStroke;
@property (nonatomic, retain) TSTCellStyle *categoryLevel4CellStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel4InteriorStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel4LabelSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *categoryLevel4TextStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel4TopStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel5BottomStroke;
@property (nonatomic, retain) TSTCellStyle *categoryLevel5CellStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel5InteriorStroke;
@property (nonatomic, readonly) TSDStroke *categoryLevel5LabelSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *categoryLevel5TextStyle;
@property (nonatomic, readonly) TSDStroke *categoryLevel5TopStroke;
@property (nonatomic, readonly) TSTCategoryOwner *categoryOwner;
@property (nonatomic, readonly) TSTCellWillChangeDistributor *cellWillChangeDistributor;
@property (nonatomic, readonly) TSTCellDictionary *cellsPendingWrite;
@property (nonatomic, readonly) TSTConcurrentMutableCellUIDSet *cellsToInvalidateAfterRecalc;
@property (nonatomic, readonly) TSTConcurrentMutableCellUIDSet *cellsToInvalidateNonoverflowingAfterRecalc;
@property (nonatomic, retain) TSTColumnRowUIDMap *columnRowUIDMap;
@property (nonatomic, readonly, retain) NSArray *columnWidths;
@property (nonatomic, readonly, retain) NSMapTable *commentHostingMap;
@property (nonatomic, retain) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner;
@property (nonatomic, readonly) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } conditionalStyleFormulaOwnerUID;
@property (nonatomic, retain) TSTTableDataStore *dataStore;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double defaultColumnWidth;
@property (nonatomic, readonly) TSDStroke *defaultHorizontalBorderStroke;
@property (nonatomic, readonly) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property (nonatomic) double defaultRowHeight;
@property (nonatomic, readonly) TSDStroke *defaultVerticalBorderStroke;
@property (nonatomic, retain) TSWPStorage *deprecatedProvider;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) TSDStroke *footerRowBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *footerRowBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *footerRowBorderStroke;
@property (nonatomic, retain) TSTCellStyle *footerRowCellStyle;
@property (nonatomic, readonly) TSDStroke *footerRowSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *footerRowTextStyle;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } fromTableUID;
@property (nonatomic, readonly) bool hasAlternatingRows;
@property (nonatomic, readonly) bool hasTableBorder;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) TSDStroke *headerColumnBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *headerColumnBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *headerColumnBorderStroke;
@property (nonatomic, retain) TSTCellStyle *headerColumnCellStyle;
@property (nonatomic, readonly) TSDStroke *headerColumnSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *headerColumnTextStyle;
@property (nonatomic) bool headerColumnsFrozen;
@property (nonatomic, readonly) TSDStroke *headerRowBodyColumnStroke;
@property (nonatomic, readonly) TSDStroke *headerRowBodyRowStroke;
@property (nonatomic, readonly) TSDStroke *headerRowBorderStroke;
@property (nonatomic, retain) TSTCellStyle *headerRowCellStyle;
@property (nonatomic, readonly) TSDStroke *headerRowSeparatorStroke;
@property (nonatomic, retain) TSWPParagraphStyle *headerRowTextStyle;
@property (nonatomic) bool headerRowsFrozen;
@property (nonatomic, readonly) TSTHiddenStatesOwner *hiddenStatesOwner;
@property (nonatomic, readonly) TSCEOwnerUidMapper *identityOwnerUIDMapper;
@property (nonatomic, retain) TSTCellStyle *labelLevel1CellStyle;
@property (nonatomic, retain) TSWPParagraphStyle *labelLevel1TextStyle;
@property (nonatomic, retain) TSTCellStyle *labelLevel2CellStyle;
@property (nonatomic, retain) TSWPParagraphStyle *labelLevel2TextStyle;
@property (nonatomic, retain) TSTCellStyle *labelLevel3CellStyle;
@property (nonatomic, retain) TSWPParagraphStyle *labelLevel3TextStyle;
@property (nonatomic, retain) TSTCellStyle *labelLevel4CellStyle;
@property (nonatomic, retain) TSWPParagraphStyle *labelLevel4TextStyle;
@property (nonatomic, retain) TSTCellStyle *labelLevel5CellStyle;
@property (nonatomic, retain) TSWPParagraphStyle *labelLevel5TextStyle;
@property (nonatomic, readonly) TSTMergeOwner *mergeOwner;
@property (nonatomic, readonly) NSUUID *nsTableUID;
@property (nonatomic, readonly) struct TSUModelColumnIndex { unsigned short x1; } numberOfColumns;
@property (nonatomic) struct TSUModelRowIndex { unsigned int x1; } numberOfFooterRows;
@property (nonatomic) struct TSUModelColumnIndex { unsigned short x1; } numberOfHeaderColumns;
@property (nonatomic) struct TSUModelRowIndex { unsigned int x1; } numberOfHeaderRows;
@property (nonatomic, readonly) struct TSUModelRowIndex { unsigned int x1; } numberOfRows;
@property (nonatomic, readonly) TSCEOwnerUidMapper *ownerUIDMapper;
@property (nonatomic, readonly) TSTPencilAnnotationOwner *pencilAnnotationOwner;
@property (nonatomic) unsigned long long presetIDForUpgrade;
@property (nonatomic) bool presetNeedsStrongOwnership;
@property (nonatomic) bool repeatingHeaderColumnsEnabled;
@property (nonatomic) bool repeatingHeaderRowsEnabled;
@property (nonatomic, readonly, retain) NSArray *rowHeights;
@property (nonatomic, copy) TSTTableSortOrder *sortOrder;
@property (nonatomic, readonly) TSTSortRuleReferenceTracker *sortRuleReferenceTracker;
@property (nonatomic, retain) TSTStrokeSidecar *strokeSidecar;
@property (nonatomic) bool styleApplyClearsAll;
@property (readonly) Class superclass;
@property (nonatomic) TSTTableInfo *tableInfo;
@property (nonatomic, retain) NSString *tableName;
@property (nonatomic) bool tableNameBorderEnabled;
@property (nonatomic, readonly) TSDStroke *tableNameBorderStroke;
@property (nonatomic) bool tableNameEnabled;
@property (nonatomic) double tableNameHeight;
@property (nonatomic, retain) TSWPShapeStyle *tableNameShapeStyle;
@property (nonatomic, retain) TSWPParagraphStyle *tableNameStyle;
@property (nonatomic, retain) TSTTableStyle *tableStyle;
@property (nonatomic, retain) TSTTableStylePreset *tableStylePreset;
@property (nonatomic) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } tableUID;
@property (nonatomic, readonly) int tableWritingDirection;
@property (nonatomic, retain) TSTStructuredTextImportRecord *textImportRecord;
@property (nonatomic, retain) TSTTableFilterSet *upgradeFilterSet;
@property (nonatomic, readonly) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } upgradeHiddenFormulaOwnerForColumnsUID;
@property (nonatomic, readonly) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } upgradeHiddenFormulaOwnerForRowsUID;
@property (nonatomic, readonly) bool upgradeNeedsToUpdateFilterSetForImport;
@property (nonatomic, readonly) unsigned long long versionAtUnarchive;
@property (nonatomic) bool wasCut;
@property (nonatomic) bool wasUnarchivedFromAProvidedTable;

+ (bool)needsObjectUUID;
+ (id)tableModelForTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1 withCalcEngine:(id)arg2;

- (id).cxx_construct;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })UIDForIndex:(unsigned int)arg1 isRows:(bool)arg2;
- (id)UIDSetForIndexes:(id)arg1 isRows:(bool)arg2;
- (id)UIDSetForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 isRows:(bool)arg2;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })UIDsForIndexes:(id)arg1 isRows:(bool)arg2;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })UIDsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 isRows:(bool)arg2;
- (void)_removeAnnotationsFromDeleteRange:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })actualHeaderColumnRange;
- (void)addPasteboardCustomFormatFromCell:(id)arg1;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)allRichTextStorages;
- (void)assertCollaborationConvergence;
- (bool)auditDatalistDuplicationReturningResult:(id*)arg1;
- (bool)auditRowInfoCellCountsReturningResult:(id*)arg1;
- (bool)auditTilesForRowOverlapAndExtensionPastTableBounds:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 result:(id*)arg2;
- (struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })baseCellCoordForCellContainingRichTextStorage:(id)arg1;
- (id)bodyCellStyle;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })bodyColumnRange;
- (id)bodyColumnStroke;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })bodyRange;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })bodyRowRange;
- (id)bodyRowStroke;
- (id)bodyRowStrokeEvenIfNotVisible;
- (id)bodyTextStyle;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })bottomCornerRange;
- (id)calcEngine;
- (id)categoryLevel1BottomStroke;
- (id)categoryLevel1CellStyle;
- (id)categoryLevel1InteriorStroke;
- (id)categoryLevel1LabelSeparatorStroke;
- (id)categoryLevel1TextStyle;
- (id)categoryLevel1TopStroke;
- (id)categoryLevel2BottomStroke;
- (id)categoryLevel2CellStyle;
- (id)categoryLevel2InteriorStroke;
- (id)categoryLevel2LabelSeparatorStroke;
- (id)categoryLevel2TextStyle;
- (id)categoryLevel2TopStroke;
- (id)categoryLevel3BottomStroke;
- (id)categoryLevel3CellStyle;
- (id)categoryLevel3InteriorStroke;
- (id)categoryLevel3LabelSeparatorStroke;
- (id)categoryLevel3TextStyle;
- (id)categoryLevel3TopStroke;
- (id)categoryLevel4BottomStroke;
- (id)categoryLevel4CellStyle;
- (id)categoryLevel4InteriorStroke;
- (id)categoryLevel4LabelSeparatorStroke;
- (id)categoryLevel4TextStyle;
- (id)categoryLevel4TopStroke;
- (id)categoryLevel5BottomStroke;
- (id)categoryLevel5CellStyle;
- (id)categoryLevel5InteriorStroke;
- (id)categoryLevel5LabelSeparatorStroke;
- (id)categoryLevel5TextStyle;
- (id)categoryLevel5TopStroke;
- (id)categoryOwner;
- (id)cellAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (id)cellBorderAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)cellExistsAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })cellRangeForTableArea:(unsigned long long)arg1;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })cellRangeForUIDRange:(const struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; }*)arg1;
- (bool)cellStyle:(id)arg1 isEqualToDefaultCellStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (id)cellStyleAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 isDefault:(out bool*)arg2;
- (id)cellStyleForCellWithEmptyStyleAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 isDefault:(out bool*)arg2;
- (id)cellStyleOfColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg1 isDefault:(out bool*)arg2;
- (id)cellStyleOfRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1 isDefault:(out bool*)arg2;
- (struct UUIDRect<TSP::UUIDRect> { struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_1_1_1; struct UUIDData<TSP::UUIDData> {} *x_1_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_2_1_1; struct UUIDData<TSP::UUIDData> {} *x_2_1_2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_2_1; } x_2_1_3; } x2; })cellUIDRangeForCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)cellValueAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (id)cellValueFromCell:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (int)cellValueTypeAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (id)cellWillChangeDistributor;
- (struct TSCECellCoordSet { struct unordered_map<unsigned short, TSUIndexSet, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSUIndexSet> > > { struct __hash_table<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSUIndexSet>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSUIndexSet>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, TSUIndexSet> > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUIndexSet>, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; })cellsModifiedInCurrentRecalcCycle;
- (id)cellsPendingWrite;
- (id)cellsToInvalidateAfterRecalc;
- (id)cellsToInvalidateNonoverflowingAfterRecalc;
- (void)clearCommentHostingMapForCommentStorage:(id)arg1;
- (void)clearFromTableUID;
- (void)clearPasteboardCustomFormatsListsAndMaps;
- (unsigned short)columnIndexForColumnUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (id)columnIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })columnRangeForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (id)columnRowUIDMap;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })columnUIDForColumnIndex:(unsigned short)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })columnUIDs;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })columnUIDsForColumnIndexes:(id)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })columnUIDsForColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)columnWidths;
- (id)commentHostingAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (id)commentHostingAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 forCommentStorage:(id)arg2;
- (id)commentHostingMap;
- (double)computeDefaultFontHeightForTableStyleArea:(unsigned long long)arg1;
- (void)computeDefaultRowHeight;
- (id)conditionalStyleFormulaOwner;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })conditionalStyleFormulaOwnerUID;
- (id)conditionalStyleSetAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (bool)confirmRefCountsReturningResult:(id*)arg1;
- (void)copyPasteboardCustomFormatsFromTableModel:(id)arg1;
- (id)dataStore;
- (void)dealloc;
- (id)defaultCellStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (id)defaultCellStyleForTableStyleArea:(unsigned long long)arg1;
- (double)defaultColumnWidth;
- (id)defaultHorizontalBorderStroke;
- (id)defaultHorizontalBorderStrokeEvenIfNotVisible;
- (double)defaultRowHeight;
- (id)defaultTextStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (id)defaultTextStyleForTableStyleArea:(unsigned long long)arg1;
- (id)defaultVerticalBorderStroke;
- (id)deprecatedProvider;
- (id)description;
- (id)drawableInfo;
- (void)enumerateDataStoreCellsWithBlock:(id /* block */)arg1;
- (id)fillForColumn:(struct TSUModelColumnIndex { unsigned short x1; })arg1;
- (id)fillForRow:(struct TSUModelRowIndex { unsigned int x1; })arg1;
- (id)fontColorAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 optionalCell:(id)arg2;
- (id)footerRowBodyColumnStroke;
- (id)footerRowBodyRowStroke;
- (id)footerRowBorderStroke;
- (id)footerRowCellStyle;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })footerRowRange;
- (id)footerRowSeparatorStroke;
- (id)footerRowTextStyle;
- (id)formatAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 formatIsExplicitOut:(bool*)arg2;
- (struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*)formulaAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })formulaOwnerUID;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })fromTableUID;
- (int)getCell:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (int)getCell:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2 suppressCellBorder:(bool)arg3;
- (int)getDefaultCell:(out id)arg1 forBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (int)getDefaultCell:(out id)arg1 forTableStyleArea:(unsigned long long)arg2;
- (int)getValue:(out struct TSCEValue { unsigned long long x1[18]; int x2; }*)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2 fetchRichTextAttributesIfPlainText:(bool)arg3;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })groupByUID;
- (bool)hasAlternatingRows;
- (bool)hasCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)hasCommentAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (bool)hasCommentStorageAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (bool)hasControls;
- (bool)hasFormulaAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (bool)hasFormulas;
- (bool)hasImportWarnings;
- (bool)hasNamesInHeaders;
- (bool)hasTableBorder;
- (id)headerColumnBodyColumnStroke;
- (id)headerColumnBodyRowStroke;
- (id)headerColumnBorderStroke;
- (id)headerColumnCellStyle;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })headerColumnRange;
- (id)headerColumnSeparatorStroke;
- (id)headerColumnTextStyle;
- (bool)headerColumnsFrozen;
- (unsigned char)headerInfo_hidingActionForColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg1;
- (unsigned char)headerInfo_hidingActionForRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1;
- (id)headerRowBodyColumnStroke;
- (id)headerRowBodyRowStroke;
- (id)headerRowBorderStroke;
- (id)headerRowCellStyle;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })headerRowRange;
- (id)headerRowSeparatorStroke;
- (id)headerRowTextStyle;
- (bool)headerRowsFrozen;
- (double)heightOfRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1 isDefault:(out bool*)arg2;
- (id)hiddenStateFormulaOwnerForColumns;
- (id)hiddenStateFormulaOwnerForRows;
- (id)hiddenStatesOwner;
- (id)identityOwnerUIDMapper;
- (id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4 waitForCalcEngine:(bool)arg5;
- (id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4 waitForCalcEngine:(bool)arg5 formulaCoordSpace:(long long)arg6;
- (id)initWithContext:(id)arg1 rowUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 columnUids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6;
- (id)initWithContext:(id)arg1 rows:(unsigned int)arg2 columns:(unsigned int)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6;
- (id)initWithContext:(id)arg1 tableUID:(struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })arg2 columnRowUIDMap:(id)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6;
- (int)insertColumnsAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg1 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 metadatas:(id)arg3 tableArea:(unsigned long long)arg4;
- (int)insertRowsAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 metadatas:(id)arg3 tableArea:(unsigned long long)arg4 unsetFilterHidingAction:(bool)arg5;
- (int)insertRowsInBaseRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 uids:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg2 metadata:(id)arg3 unsetFilterHidingAction:(bool)arg4;
- (void)invalidateForCalcEngine:(id)arg1;
- (bool)isRegisteredWithCalcEngine:(id)arg1;
- (id)labelLevel1CellStyle;
- (id)labelLevel1TextStyle;
- (id)labelLevel2CellStyle;
- (id)labelLevel2TextStyle;
- (id)labelLevel3CellStyle;
- (id)labelLevel3TextStyle;
- (id)labelLevel4CellStyle;
- (id)labelLevel4TextStyle;
- (id)labelLevel5CellStyle;
- (id)labelLevel5TextStyle;
- (id)linkedResolver;
- (void)loadFromUnarchiver:(id)arg1;
- (void)makePasteboardCustomFormatList;
- (void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2;
- (int)maxStrokeOrder;
- (id)mergeOwner;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })mergedRangeForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (id)metadataForColumnIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg1 hidingAction:(unsigned char)arg2;
- (id)metadataForRowIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1 hidingAction:(unsigned char)arg2;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (void)moveBaseColumnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toColumnIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg2;
- (void)moveBaseRowRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toRowIndex:(struct TSUModelRowIndex { unsigned int x1; })arg2;
- (id)mutableColumnIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(bool)arg2;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(bool)arg2 notFoundUIDs:(id)arg3;
- (id)mutableIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1 isRows:(bool)arg2;
- (id)mutableRowIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (id)newCell;
- (void)notifyTableOfNewResults;
- (id)nsTableUID;
- (struct TSUModelColumnIndex { unsigned short x1; })numberOfColumns;
- (unsigned long long)numberOfComments;
- (struct TSUModelRowIndex { unsigned int x1; })numberOfFooterRows;
- (struct TSUModelColumnIndex { unsigned short x1; })numberOfHeaderColumns;
- (struct TSUModelRowIndex { unsigned int x1; })numberOfHeaderRows;
- (unsigned long long)numberOfPopulatedCells;
- (struct TSUModelRowIndex { unsigned int x1; })numberOfRows;
- (id)objectToArchiveInDependencyTracker;
- (unsigned short)ownerKind;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })ownerUID;
- (id)ownerUIDMapper;
- (bool)p_auditTableHealthUpgradingFromVersion:(unsigned long long)arg1;
- (bool)p_auditTilesForRowOverlapAndExtensionPastTableBoundsWithVersion:(unsigned long long)arg1;
- (void)p_clearDefaultStyles;
- (void)p_iterateDataStoreCellsInRegion:(id)arg1 searchFlags:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (int)p_preflightApplyBaseCellMap:(id)arg1;
- (int)p_preflightSetCell:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (void)p_rebuildTheTable:(id)arg1;
- (struct { unsigned int x1; unsigned int x2; })p_tableSize;
- (void)p_upgradeDefaultCellStylesForStrokeSidecar;
- (void)p_upgradeMerges;
- (id)pencilAnnotationOwner;
- (void)performReadForOneOffFormulaEvaluation:(id)arg1 forCellCoord:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)postCommentNotificationForStorage:(id)arg1 baseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2 notificationKey:(id)arg3;
- (void)prepareForPasteWithCalculationEngine:(id)arg1 sourceOffset:(struct TSUColumnRowOffset { int x1; int x2; })arg2;
- (unsigned long long)presetIDForUpgrade;
- (bool)presetNeedsStrongOwnership;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })prunedColumnUIDsFromColumnUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })prunedRowUIDsFromRowUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })range;
- (void)reassignPasteboardCustomFormatKeys;
- (struct { bool x1; bool x2; bool x3; })recalculateForCalcEngine:(id)arg1 atFormulaCoord:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2 recalcOptions:(struct { bool x1; bool x2; })arg3;
- (id)regionForValueOrCommentCellsInBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1 wasCrossDocumentPaste:(bool)arg2 infoIsCategorized:(bool)arg3 wasUndo:(bool)arg4;
- (bool)registerLast;
- (int)registerWithCalcEngine:(id)arg1;
- (void)registerWithCalcEngineForDocumentLoad:(id)arg1;
- (void)remapTableUIDsInFormulasWithMap:(const struct UUIDMap<TSP::UUIDMap> { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; }*)arg1 calcEngine:(id)arg2 bakeForBadRefs:(bool)arg3;
- (void)removeAnnotationsFromColumnsAtBaseIndexes:(id)arg1;
- (void)removeAnnotationsFromRowsAtBaseIndexes:(id)arg1;
- (void)removeColumnsAtBaseIndexes:(id)arg1;
- (void)removeColumnsAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg1 count:(struct TSUModelColumnIndex { unsigned short x1; })arg2;
- (int)removeCommentStorageAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (void)removeRowsAtBaseIndexes:(id)arg1;
- (void)removeRowsAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1 count:(struct TSUModelRowIndex { unsigned int x1; })arg2;
- (bool)repeatingHeaderColumnsEnabled;
- (bool)repeatingHeaderRowsEnabled;
- (void)resetDependenciesForCell:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (void)resetSortRuleReferenceTrackerForInsert;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })resolverUID;
- (id)rowHeights;
- (unsigned int)rowIndexForRowUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (id)rowIndexesForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rowRangeForUIDs:(const struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; }*)arg1;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })rowUIDForRowIndex:(unsigned int)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })rowUIDs;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })rowUIDsForRowIndexes:(id)arg1;
- (struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x1; struct UUIDData<TSP::UUIDData> {} *x2; struct __compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > { struct UUIDData<TSP::UUIDData> {} *x_3_1_1; } x3; })rowUIDsForRowRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)saveToArchiver:(id)arg1;
- (void)setBodyCellStyle:(id)arg1;
- (void)setBodyTextStyle:(id)arg1;
- (void)setCalcEngine:(id)arg1;
- (void)setCategoryLevel1CellStyle:(id)arg1;
- (void)setCategoryLevel1TextStyle:(id)arg1;
- (void)setCategoryLevel2CellStyle:(id)arg1;
- (void)setCategoryLevel2TextStyle:(id)arg1;
- (void)setCategoryLevel3CellStyle:(id)arg1;
- (void)setCategoryLevel3TextStyle:(id)arg1;
- (void)setCategoryLevel4CellStyle:(id)arg1;
- (void)setCategoryLevel4TextStyle:(id)arg1;
- (void)setCategoryLevel5CellStyle:(id)arg1;
- (void)setCategoryLevel5TextStyle:(id)arg1;
- (int)setCell:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2 ignoreFormula:(bool)arg3 clearImportWarnings:(bool)arg4;
- (int)setCellStyle:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (int)setCellStyle:(id)arg1 ofColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg2;
- (int)setCellStyle:(id)arg1 ofRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg2;
- (int)setCellsWithBaseCellMap:(id)arg1 ignoreFormulas:(bool)arg2 skipDirtyingNonFormulaCells:(bool)arg3;
- (void)setColumnRowUIDMap:(id)arg1;
- (void)setColumnWidths:(id)arg1;
- (int)setCommentStorage:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (void)setConditionalStyleFormulaOwner:(id)arg1;
- (void)setDataStore:(id)arg1;
- (void)setDefaultColumnWidth:(double)arg1;
- (void)setDefaultRowHeight:(double)arg1;
- (void)setDeprecatedProvider:(id)arg1;
- (void)setFooterRowCellStyle:(id)arg1;
- (void)setFooterRowTextStyle:(id)arg1;
- (void)setFormulaOwnerUIDsWithMap:(id)arg1 shouldStealReferences:(bool)arg2;
- (void)setFromTableUID:(struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })arg1;
- (void)setHeaderColumnCellStyle:(id)arg1;
- (void)setHeaderColumnTextStyle:(id)arg1;
- (void)setHeaderColumnsFrozen:(bool)arg1;
- (void)setHeaderRowCellStyle:(id)arg1;
- (void)setHeaderRowTextStyle:(id)arg1;
- (void)setHeaderRowsFrozen:(bool)arg1;
- (void)setHeight:(double)arg1 ofRow:(struct TSUModelRowIndex { unsigned int x1; })arg2;
- (void)setHeight:(double)arg1 ofRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg2;
- (void)setHidingState:(unsigned char)arg1 atColumnIndex:(const struct TSUModelColumnIndex { unsigned short x1; }*)arg2;
- (void)setHidingState:(unsigned char)arg1 atRowIndex:(const struct TSUModelRowIndex { unsigned int x1; }*)arg2;
- (void)setLabelLevel1CellStyle:(id)arg1;
- (void)setLabelLevel1TextStyle:(id)arg1;
- (void)setLabelLevel2CellStyle:(id)arg1;
- (void)setLabelLevel2TextStyle:(id)arg1;
- (void)setLabelLevel3CellStyle:(id)arg1;
- (void)setLabelLevel3TextStyle:(id)arg1;
- (void)setLabelLevel4CellStyle:(id)arg1;
- (void)setLabelLevel4TextStyle:(id)arg1;
- (void)setLabelLevel5CellStyle:(id)arg1;
- (void)setLabelLevel5TextStyle:(id)arg1;
- (void)setNewFormulaOwnerUIDsForDuplicatesWithCalcEngine:(id)arg1;
- (void)setNumberOfFooterRows:(struct TSUModelRowIndex { unsigned int x1; })arg1;
- (void)setNumberOfHeaderColumns:(struct TSUModelColumnIndex { unsigned short x1; })arg1;
- (void)setNumberOfHeaderRows:(struct TSUModelRowIndex { unsigned int x1; })arg1;
- (void)setPresetIDForUpgrade:(unsigned long long)arg1;
- (void)setPresetNeedsStrongOwnership:(bool)arg1;
- (void)setRepeatingHeaderColumnsEnabled:(bool)arg1;
- (void)setRepeatingHeaderRowsEnabled:(bool)arg1;
- (void)setRowHeights:(id)arg1;
- (void)setSortOrder:(id)arg1;
- (void)setStorageParentToInfo:(id)arg1;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned int)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned int)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg4;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned short)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg4;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned short)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg4;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned int)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned int)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg4;
- (void)setStrokeSidecar:(id)arg1;
- (void)setStyleApplyClearsAll:(bool)arg1;
- (void)setStyleNetwork:(id)arg1;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)arg1;
- (void)setTableInfo:(id)arg1;
- (void)setTableName:(id)arg1;
- (void)setTableNameBorderEnabled:(bool)arg1;
- (void)setTableNameEnabled:(bool)arg1;
- (void)setTableNameHeight:(double)arg1;
- (void)setTableNameShapeStyle:(id)arg1;
- (void)setTableNameStyle:(id)arg1;
- (void)setTableStyle:(id)arg1;
- (void)setTableStylePreset:(id)arg1;
- (void)setTableUID:(struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })arg1;
- (void)setTextImportRecord:(id)arg1;
- (int)setTextStyle:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (int)setTextStyle:(id)arg1 ofColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg2;
- (int)setTextStyle:(id)arg1 ofRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg2;
- (void)setUpgradeFilterSet:(id)arg1;
- (void)setWasCut:(bool)arg1;
- (void)setWasUnarchivedFromAProvidedTable:(bool)arg1;
- (void)setWidth:(double)arg1 ofColumn:(struct TSUModelColumnIndex { unsigned short x1; })arg2;
- (void)setWidth:(double)arg1 ofColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg2;
- (void)setlabelLevel1CellStyle:(id)arg1;
- (void)setlabelLevel1TextStyle:(id)arg1;
- (void)setlabelLevel2CellStyle:(id)arg1;
- (void)setlabelLevel2TextStyle:(id)arg1;
- (void)setlabelLevel3CellStyle:(id)arg1;
- (void)setlabelLevel3TextStyle:(id)arg1;
- (void)setlabelLevel4CellStyle:(id)arg1;
- (void)setlabelLevel4TextStyle:(id)arg1;
- (void)setlabelLevel5CellStyle:(id)arg1;
- (void)setlabelLevel5TextStyle:(id)arg1;
- (id)sheetName;
- (id)sortOrder;
- (id)sortRuleReferenceTracker;
- (id)stringAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 optionalCell:(id)arg2;
- (id)strokeLayerForBottomOfRow:(unsigned int)arg1;
- (id)strokeLayerForLeftSideOfColumn:(unsigned short)arg1;
- (id)strokeLayerForRightSideOfColumn:(unsigned short)arg1;
- (id)strokeLayerForTopOfRow:(unsigned int)arg1;
- (id)strokeSidecar;
- (bool)styleApplyClearsAll;
- (void)swapRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1 withRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg2;
- (unsigned long long)tableAreaForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (unsigned long long)tableAreaForColumn:(struct TSUModelColumnIndex { unsigned short x1; })arg1;
- (unsigned long long)tableAreaForRow:(struct TSUModelRowIndex { unsigned int x1; })arg1;
- (id)tableAreasForBaseCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)tableInfo;
- (id)tableName;
- (bool)tableNameBorderEnabled;
- (id)tableNameBorderStroke;
- (bool)tableNameEnabled;
- (double)tableNameHeight;
- (id)tableNameShapeStyle;
- (id)tableNameStyle;
- (struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct TSUCellCoord { unsigned int x_2_1_1; unsigned short x_2_1_2; bool x_2_1_3; bool x_2_1_4; } x2; })tableRangeCoordinate;
- (id)tableStyle;
- (unsigned long long)tableStyleAreaForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (unsigned long long)tableStyleAreaForRow:(struct TSUModelRowIndex { unsigned int x1; })arg1;
- (id)tableStylePreset;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })tableUID;
- (int)tableWritingDirection;
- (id)textImportRecord;
- (bool)textStyle:(id)arg1 isEqualToDefaultTextStyleForBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (id)textStyleAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 isDefault:(out bool*)arg2;
- (id)textStyleForCellWithEmptyStyleAtBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1 isDefault:(out bool*)arg2;
- (id)textStyleOfColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg1 isDefault:(out bool*)arg2;
- (id)textStyleOfRowAtIndex:(struct TSUModelRowIndex { unsigned int x1; })arg1 isDefault:(out bool*)arg2;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })topCornerRange;
- (struct TSCEValue { unsigned long long x1[18]; int x2; })tsceValueFromCell:(id)arg1 atBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2 fetchRichTextAttributesIfPlainText:(bool)arg3;
- (id)unnamedTableString;
- (void)unregisterFromCalcEngine:(id)arg1;
- (void)updateCalculationEngineForFormula:(struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*)arg1 inBaseCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg2;
- (void)updateTableRowColumnStylesWithBlock:(id /* block */)arg1;
- (void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)arg1 tableInfo:(id)arg2;
- (id)upgradeFilterSet;
- (void)upgradeFormatsForCustomFormatListU2_0;
- (void)upgradeFromPreUFF;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })upgradeHiddenFormulaOwnerForColumnsUID;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })upgradeHiddenFormulaOwnerForRowsUID;
- (void)upgradeHiddenStates;
- (bool)upgradeNeedsToUpdateFilterSetForImport;
- (void)validate;
- (unsigned long long)versionAtUnarchive;
- (bool)wasCut;
- (bool)wasUnarchivedFromAProvidedTable;
- (double)widthOfColumnAtIndex:(struct TSUModelColumnIndex { unsigned short x1; })arg1 isDefault:(out bool*)arg2;
- (void)willClose;
- (void)writeResultsForCalcEngine:(id)arg1;

@end
