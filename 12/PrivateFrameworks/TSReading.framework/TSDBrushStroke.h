<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDBrushStroke.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDBrushStroke.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDBrushStroke : TSDSmartStroke

+ (bool)brushStrokeUsesOpenGL;
+ (Class)mutableClass;
+ (void)p_clearFrameBuffers:(id)arg1;
+ (void)p_drawFrameBuffers:(id)arg1 intoFrameBuffer:(id)arg2 withAlpha:(double)arg3 usingDataBuffer:(id)arg4;
+ (id)p_glBrushShaderForCurrentContext;
+ (id)p_glContextArray;
+ (unsigned long long)p_glContextCount;
+ (id)p_glContextQueue;
+ (id)p_glContextSemaphore;
+ (id)p_glOpacityShaderForCurrentContext;
+ (bool)p_usesMetal;

- (bool)canApplyToShapeRenderable;
- (int)cap;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (bool)drawsInOneStep;
- (double)horizontalMarginForSwatch;
- (void)i_setCap:(int)arg1;
- (id)initWithArchive:(const struct StrokeArchive { }*)arg1 unarchiver:(id)arg2;
- (id)initWithName:(id)arg1 color:(id)arg2 width:(double)arg3 cap:(int)arg4 join:(int)arg5 pattern:(id)arg6 miterLimit:(double)arg7;
- (double)lineEndInsetAdjustment;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (bool)needsToExtendJoinsForBoundsCalculation;
- (void)p_brushPath:(struct CGPath { }*)arg1 inContext:(struct CGContext { }*)arg2 orDirectly:(id)arg3 parameterized:(bool)arg4 drawRasterized:(bool)arg5 shouldReverseDrawOrder:(bool)arg6 withLayoutOptions:(id)arg7;
- (void)p_brushPath:(id)arg1 withScaling:(struct { double x1; double x2; })arg2 inElementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 intoPath:(id)arg4 orIntoVector:(struct vector<TSDBrushVertexData, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<TSDBrushVertexData *, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg5 sectionIndex:(unsigned long long*)arg6 viewScale:(double)arg7 withLayoutOptions:(id)arg8 currentSubpathIndex:(unsigned long long)arg9 cachedCurrentElementPercentage:(struct { id x1; unsigned long long x2; double x3; }*)arg10;
- (void)p_brushSection:(id)arg1 sectionIndex:(unsigned long long)arg2 ontoPath:(id)arg3 inElementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 intoPath:(id)arg5 orIntoVector:(struct vector<TSDBrushVertexData, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<TSDBrushVertexData *, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg6 viewScale:(double)arg7 strokeTileLayout:(struct { double x1; double x2; double x3; double x4; })arg8 cachedCurrentElementPercentage:(struct { id x1; unsigned long long x2; double x3; }*)arg9;
- (bool)p_drawsToPDFAsBitmap;
- (long long)p_fastElementPercentage:(double*)arg1 forOverallPercentage:(double)arg2 onPath:(id)arg3 withCachedCurrentElementPercentage:(struct { id x1; unsigned long long x2; double x3; }*)arg4;
- (void)p_finishOpenGLRenderInContext:(struct CGContext { }*)arg1 orDirectly:(id)arg2 pathVertexData:(struct vector<TSDBrushVertexData, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<TSDBrushVertexData *, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg3 parameterized:(bool)arg4 shouldReverseDrawOrder:(bool)arg5 withLayoutOptions:(id)arg6;
- (id)p_glTextureForCurrentStrokeAndContext;
- (bool)p_isFreehandDrawingStrokeWithFixedTileWidth;
- (struct CGImage { }*)p_newCGImageFromGLWithWidth:(int)arg1 height:(int)arg2;
- (void)p_rasterBrushPath:(struct CGPath { }*)arg1 inContext:(struct CGContext { }*)arg2 orDirectly:(id)arg3 parameterized:(bool)arg4 shouldReverseDrawOrder:(bool)arg5 withLayoutOptions:(id)arg6;
- (void)p_rasterRenderSection:(id)arg1 sectionIndex:(unsigned long long)arg2 ontoPath:(id)arg3 inElementRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 into:(struct vector<TSDBrushVertexData, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<TSDBrushVertexData *, std::__1::allocator<TSDBrushVertexData> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg5 viewScale:(double)arg6 strokeTileLayout:(struct { double x1; double x2; double x3; double x4; })arg7 cachedCurrentElementPercentage:(struct { id x1; unsigned long long x2; double x3; }*)arg8;
- (void)paintLineEnd:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 atAngle:(double)arg3 withScale:(double)arg4 inContext:(struct CGContext { }*)arg5 useFastDrawing:(bool)arg6;
- (void)paintPath:(struct CGPath { }*)arg1 wantsInteriorStroke:(bool)arg2 inContext:(struct CGContext { }*)arg3 useFastDrawing:(bool)arg4 parameterized:(bool)arg5 shouldReverseDrawOrder:(bool)arg6;
- (void)paintPath:(struct CGPath { }*)arg1 wantsInteriorStroke:(bool)arg2 inContext:(struct CGContext { }*)arg3 useFastDrawing:(bool)arg4 parameterized:(bool)arg5 shouldReverseDrawOrder:(bool)arg6 withLayoutOptions:(id)arg7;
- (bool)prefersToApplyToShapeRenderableDuringManipulation;
- (id)strokeLineEnd:(id)arg1;
- (double)suggestedMinimumLineWidth;
- (bool)supportsPattern;
- (bool)usesOpenGL;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
