/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDFrame : TSDStroke {
    struct CGSize { 
        double width; 
        double height; 
    }  _adornmentSize;
    double  _assetScale;
    double  _bottomHeight;
    NSString * _frameName;
    double  _leftWidth;
    double  _rightWidth;
    TSDFrameSpec * _spec;
    double  _topHeight;
}

@property (nonatomic, readonly) NSString *archivableFrameName;
@property (nonatomic, readonly) double assetScale;
@property (nonatomic, readonly) NSString *frameName;
@property (nonatomic, readonly) TSDFrameSpec *frameSpec;
@property (nonatomic, readonly) bool hasMask;
@property (nonatomic, readonly) double minimumAssetScale;

+ (Class)mutableClass;

- (void).cxx_destruct;
- (id)archivableFrameName;
- (double)assetScale;
- (bool)canApplyDirectlyToRepRenderable;
- (bool)canApplyToShapeRenderable;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1 whenStrokingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })coverageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })coverageRectWithoutAdornment:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)description;
- (void)drawSwatchInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (bool)drawsInOneStep;
- (double)equivalentStrokeWidth;
- (id)frameName;
- (id)frameSpec;
- (bool)hasMask;
- (unsigned long long)hash;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_adornmentRectForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)i_bottomHeight;
- (double)i_leftWidth;
- (double)i_rightWidth;
- (double)i_topHeight;
- (bool)i_willRenderForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithArchive:(const struct StrokeArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Color {} *x5; struct StrokePatternArchive {} *x6; struct SmartStrokeArchive {} *x7; struct FrameArchive {} *x8; struct PatternedStrokeArchive {} *x9; float x10; int x11; int x12; float x13; }*)arg1 unarchiver:(id)arg2;
- (id)initWithFrameName:(id)arg1;
- (id)initWithFrameSpec:(id)arg1;
- (id)initWithFrameSpec:(id)arg1 assetScale:(double)arg2;
- (id)initWithFrameSpec:(id)arg1 assetScale:(double)arg2 archivableFrameName:(id)arg3;
- (bool)isEqual:(id)arg1;
- (bool)isFrame;
- (bool)isNearlyWhite;
- (bool)isNullStroke;
- (double)minimumAssetScale;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (struct _TSDStrokeOutsets { double x1; double x2; double x3; double x4; })outsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_coverageRectWithAdornment:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_coverageRectWithoutAdornment:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })p_minimumRenderedSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_uncoveredRectWithoutAdornment:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)paintPath:(const struct CGPath { }*)arg1 wantsInteriorStroke:(bool)arg2 inContext:(struct CGContext { }*)arg3 useFastDrawing:(bool)arg4;
- (bool)prefersToApplyToShapeRenderableDuringManipulation;
- (void)saveToArchive:(struct StrokeArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Color {} *x5; struct StrokePatternArchive {} *x6; struct SmartStrokeArchive {} *x7; struct FrameArchive {} *x8; struct PatternedStrokeArchive {} *x9; float x10; int x11; int x12; float x13; }*)arg1 archiver:(id)arg2;
- (bool)shouldRender;
- (bool)shouldRenderForSizeIncludingCoverage:(struct CGSize { double x1; double x2; })arg1;
- (id)strokeByTransformingByTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (bool)supportsColor;
- (bool)supportsLineOptions;
- (bool)supportsPattern;

@end
