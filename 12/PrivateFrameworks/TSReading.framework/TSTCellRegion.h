<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTCellRegion.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTCellRegion.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTCellRegion : NSObject <NSCopying> {
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  _boundingCellRange;
    unsigned long long  _cellCount;
    struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { 
        struct TSUCellRect {} *__begin_; 
        struct TSUCellRect {} *__end_; 
        struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { 
            struct TSUCellRect {} *__value_; 
        } __end_cap_; 
    }  _cellRanges;
    struct TSUCellCoord { 
        unsigned int row; 
        unsigned short column; 
        bool _preserveRow; 
        bool _preserveColumn; 
    }  _firstCellID;
    NSIndexSet * _intersectingColumnsIndexSet;
    NSIndexSet * _intersectingRowsIndexSet;
    struct TSUCellCoord { 
        unsigned int row; 
        unsigned short column; 
        bool _preserveRow; 
        bool _preserveColumn; 
    }  _lastCellID;
}

@property (nonatomic, readonly) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } boundingBottomRightCellID;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } boundingCellRange;
@property (nonatomic, readonly) struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; } boundingModelCellRect;
@property (nonatomic, readonly) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } boundingTopLeftCellID;
@property (nonatomic, readonly) struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; } boundingViewCellRect;
@property (nonatomic) unsigned long long cellCount;
@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{vector<TSUCellRect' */ struct *cellRanges; /* unknown property attribute:  std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}} */
@property (nonatomic) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } firstCellID;
@property (nonatomic, retain) NSIndexSet *intersectingColumnsIndexSet;
@property (nonatomic, retain) NSIndexSet *intersectingRowsIndexSet;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) bool isRectangle;
@property (nonatomic) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } lastCellID;
@property (nonatomic, readonly) unsigned int numberOfIntersectingColumns;
@property (nonatomic, readonly) unsigned int numberOfIntersectingRows;

+ (id)invalidRegion;
+ (id)region:(id)arg1 addingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;
+ (id)region:(id)arg1 addingRegion:(id)arg2;
+ (id)region:(id)arg1 intersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;
+ (id)region:(id)arg1 intersectingRegion:(id)arg2;
+ (id)region:(id)arg1 subtractingColumnIndexes:(id)arg2;
+ (id)region:(id)arg1 subtractingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;
+ (id)region:(id)arg1 subtractingRegion:(id)arg2;
+ (id)region:(id)arg1 subtractingRowIndexes:(id)arg2;
+ (id)regionFillingColumnsFromRegion:(id)arg1;
+ (id)regionFillingRowsFromRegion:(id)arg1;
+ (id)regionFromCellDiffMap:(id)arg1 withTableInfo:(id)arg2;
+ (id)regionFromCellIDVector:(const struct vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> > { struct TSUCellCoord {} *x1; struct TSUCellCoord {} *x2; struct __compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> > { struct TSUCellCoord {} *x_3_1_1; } x3; }*)arg1;
+ (id)regionFromCellMap:(id)arg1 withTableInfo:(id)arg2;
+ (id)regionFromCellMap:(id)arg1 withTableInfo:(id)arg2 passingTest:(id /* block */)arg3;
+ (id)regionFromCellRangeVector:(const struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x1; struct TSUCellRect {} *x2; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x_3_1_1; } x3; }*)arg1;
+ (id)regionFromCellUIDVector:(const struct vector<TSTCellUID, std::__1::allocator<TSTCellUID> > { struct TSTCellUID {} *x1; struct TSTCellUID {} *x2; struct __compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> > { struct TSTCellUID {} *x_3_1_1; } x3; }*)arg1 withTableInfo:(id)arg2;
+ (id)regionFromColumnIndexes:(id)arg1 rowIndexes:(id)arg2;
+ (id)regionFromColumnIndices:(id)arg1;
+ (id)regionFromColumnIndices:(id)arg1 rowRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
+ (id)regionFromMergeActionArray:(id)arg1 withTableInfo:(id)arg2;
+ (id)regionFromMergeList:(const struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x1; struct TSUCellRect {} *x2; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x_3_1_1; } x3; }*)arg1;
+ (id)regionFromModelCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
+ (id)regionFromModelMergeList:(const struct vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect {} *x1; struct TSUModelCellRect {} *x2; struct __compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect {} *x_3_1_1; } x3; }*)arg1;
+ (id)regionFromPropertyListRepresentation:(id)arg1;
+ (id)regionFromRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
+ (id)regionFromRowIndices:(id)arg1;
+ (id)regionFromRowIndices:(id)arg1 columnRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
+ (id)unionEveryRangeInRegion:(id)arg1 withRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })boundingBottomRightCellID;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })boundingCellRange;
- (struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })boundingModelCellRect;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })boundingTopLeftCellID;
- (struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })boundingViewCellRect;
- (unsigned long long)cellCount;
- (const struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x1; struct TSUCellRect {} *x2; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x_3_1_1; } x3; }*)cellRanges;
- (bool)containsCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)containsCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)containsCellRegion:(id)arg1;
- (bool)containsModelCellCoord:(struct TSUModelCellCoord { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; })arg1;
- (bool)containsModelCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)enumerateCellIDsUsingBlock:(id /* block */)arg1;
- (void)enumerateCellRangesUsingBlock:(id /* block */)arg1;
- (void)enumerateColumnRangesInReverseUsingBlock:(id /* block */)arg1;
- (void)enumerateColumnRangesUsingBlock:(id /* block */)arg1;
- (void)enumerateColumnsInReverseUsingBlock:(id /* block */)arg1;
- (void)enumerateColumnsIntersectingCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateColumnsUsingBlock:(id /* block */)arg1;
- (void)enumerateGridColumnsUsingBlock:(id /* block */)arg1;
- (void)enumerateGridRowsUsingBlock:(id /* block */)arg1;
- (void)enumerateInDirection:(long long)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateMissingColumnsIntersectingCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateMissingRowsIntersectingCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateModelCellRectsUsingBlock:(id /* block */)arg1;
- (void)enumerateRowRangesInReverseUsingBlock:(id /* block */)arg1;
- (void)enumerateRowRangesUsingBlock:(id /* block */)arg1;
- (void)enumerateRowsInReverseUsingBlock:(id /* block */)arg1;
- (void)enumerateRowsIntersectingCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateRowsUsingBlock:(id /* block */)arg1;
- (bool)equalsCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)equalsCellRegion:(id)arg1;
- (void)fillCellRangeRowMajorSet:(struct set<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect> > { struct __tree<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUCellRect, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, TSTCellRangeRowMajorLess> { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg1 leftToRight:(bool)arg2;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })firstCellID;
- (unsigned long long)hash;
- (id)init;
- (id)initFromMessage:(const struct CellRegion { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TST::CellRange> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; }*)arg1;
- (id)intersectingColumnsInRow:(unsigned int)arg1;
- (id)intersectingColumnsIndexSet;
- (id)intersectingRowsIndexSet;
- (bool)intersectsCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)intersectsCellRegion:(id)arg1;
- (bool)intersectsColumn:(unsigned short)arg1;
- (bool)intersectsModelCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (bool)intersectsRow:(unsigned int)arg1;
- (bool)isEmpty;
- (bool)isEqual:(id)arg1;
- (bool)isRectangle;
- (bool)isValid;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })largestRangeContainingCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })lastCellID;
- (struct vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect {} *x1; struct TSUModelCellRect {} *x2; struct __compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> > { struct TSUModelCellRect {} *x_3_1_1; } x3; })modelCellRanges;
- (struct NSObject { Class x1; }*)newIterator;
- (struct NSObject { Class x1; }*)newRightToLeftIterator;
- (unsigned int)numberOfIntersectingColumns;
- (unsigned int)numberOfIntersectingRows;
- (void)p_calculateAncillaryInformation;
- (void)p_calculateIntersectingColumns;
- (void)p_calculateIntersectingRows;
- (void)p_calculateUpperLeftAndBottomRightCellIDAndBoundingCellRange;
- (id)p_copy;
- (void)p_insertRangeIntoRegion:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)partiallyIntersectsCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (bool)partiallyIntersectsModelCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)propertyListRepresentation;
- (id)prunedCellRegionAgainstTable:(id)arg1 behavior:(unsigned long long)arg2;
- (id)prunedCellRegionAgainstTable:(id)arg1 behavior:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (id)regionAfterColumnIndex:(unsigned short)arg1;
- (id)regionAfterColumnIndexRtoL:(unsigned short)arg1;
- (id)regionAfterRowIndex:(unsigned int)arg1;
- (id)regionByAddingColumns:(id)arg1;
- (id)regionByAddingModelCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)regionByAddingModelCellRegion:(id)arg1;
- (id)regionByAddingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)regionByAddingRegion:(id)arg1;
- (id)regionByAddingRows:(id)arg1;
- (id)regionByAddingViewCellRect:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)regionByAddingViewCellRegion:(id)arg1;
- (id)regionByApplyingRowMapping:(id)arg1;
- (id)regionByCollapsingRangesForRemovedColumns:(id)arg1;
- (id)regionByCollapsingRangesForRemovedRows:(id)arg1;
- (id)regionByIntersectingColumnIndices:(id)arg1;
- (id)regionByIntersectingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)regionByIntersectingRegion:(id)arg1;
- (id)regionByIntersectingRowIndices:(id)arg1;
- (id)regionByMovingColumnsFromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toIndex:(unsigned short)arg2;
- (id)regionByMovingRowsFromRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toIndex:(unsigned int)arg2;
- (id)regionByRemovingColumns:(id)arg1;
- (id)regionByRemovingRows:(id)arg1;
- (id)regionBySubtractingColumnIndexes:(id)arg1;
- (id)regionBySubtractingModelCellRect:(struct TSUModelCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)regionBySubtractingModelCellRegion:(id)arg1;
- (id)regionBySubtractingRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)regionBySubtractingRegion:(id)arg1;
- (id)regionBySubtractingRowIndexes:(id)arg1;
- (id)regionBySubtractingViewCellRect:(struct TSUViewCellRect { struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; } x_1_1_2; } x1; })arg1;
- (id)regionBySubtractingViewCellRegion:(id)arg1;
- (id)regionByTrimmingAroundColumnIndices:(id)arg1;
- (id)regionByTrimmingAroundRowIndices:(id)arg1;
- (id)regionByUnioningEveryRangeInRegionWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)regionOffsetBy:(struct TSUColumnRowOffset { int x1; int x2; })arg1;
- (id)regionUpToColumnIndex:(unsigned short)arg1;
- (id)regionUpToColumnIndexRtoL:(unsigned short)arg1 maxColumnIndex:(unsigned short)arg2;
- (id)regionUpToRowIndex:(unsigned int)arg1;
- (void)saveToMessage:(struct CellRegion { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TST::CellRange> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; }*)arg1;
- (void)setBoundingCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setCellCount:(unsigned long long)arg1;
- (void)setFirstCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (void)setIntersectingColumnsIndexSet:(id)arg1;
- (void)setIntersectingRowsIndexSet:(id)arg1;
- (void)setLastCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })suitableAnchor;
- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })suitableCursor;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
