<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDCalloutPathSource.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDCalloutPathSource.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDCalloutPathSource : TSDPathSource <TSDMixing, TSDSmartPathSource> {
    double  mCornerRadius;
    bool  mIsTailAtCenter;
    struct CGSize { 
        double width; 
        double height; 
    }  mNaturalSize;
    struct CGPoint { 
        double x; 
        double y; 
    }  mTailPosition;
    double  mTailSize;
}

@property (nonatomic) double cornerRadius;
@property (nonatomic, readonly) bool isTailAtCenter;
@property (nonatomic, readonly) double maxCornerRadius;
@property (nonatomic, readonly) double maxTailSize;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } tailCenter;
@property (nonatomic) struct CGPoint { double x1; double x2; } tailKnobPosition;
@property (nonatomic) double tailSize;
@property (nonatomic) struct CGPoint { double x1; double x2; } tailSizeKnobPosition;

+ (id)calloutWithCornerRadius:(double)arg1 tailPosition:(struct CGPoint { double x1; double x2; })arg2 tailSize:(double)arg3 naturalSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)quoteBubbleWithTailPosition:(struct CGPoint { double x1; double x2; })arg1 tailSize:(double)arg2 naturalSize:(struct CGSize { double x1; double x2; })arg3;

- (id)bezierPathWithoutFlips;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)cornerRadius;
- (id)description;
- (struct CGPoint { double x1; double x2; })getControlKnobPosition:(unsigned long long)arg1;
- (unsigned long long)hash;
- (id)init;
- (id)initWithArchive:(const struct PathSourceArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct PointPathSourceArchive {} *x7; struct ScalarPathSourceArchive {} *x8; struct BezierPathSourceArchive {} *x9; struct CalloutPathSourceArchive {} *x10; struct ConnectionLinePathSourceArchive {} *x11; struct EditableBezierPathSourceArchive {} *x12; bool x13; bool x14; }*)arg1;
- (id)initWithCornerRadius:(double)arg1 tailPosition:(struct CGPoint { double x1; double x2; })arg2 tailSize:(double)arg3 naturalSize:(struct CGSize { double x1; double x2; })arg4 tailAtCenter:(bool)arg5;
- (id)interiorWrapPath;
- (bool)isCircular;
- (bool)isEqual:(id)arg1;
- (bool)isOval;
- (bool)isRectangular;
- (bool)isTailAtCenter;
- (double)maxCornerRadius;
- (double)maxTailSize;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (struct CGSize { double x1; double x2; })naturalSize;
- (unsigned long long)numberOfControlKnobs;
- (struct CGPoint { double x1; double x2; })p_adjustedCenterForPath:(id)arg1;
- (id)p_basePath;
- (id)p_buildPath;
- (struct CGPoint { double x1; double x2; })p_getControlKnobPointForRoundedRect;
- (void)p_getTailPath:(id)arg1 center:(struct CGPoint { double x1; double x2; }*)arg2 tailSize:(double*)arg3 intersections:(struct CGPoint { double x1; double x2; })arg4;
- (void)p_setControlKnobPointForRoundedRect:(struct CGPoint { double x1; double x2; })arg1;
- (void)p_setCornerRadius:(double)arg1;
- (void)p_setNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)p_setTailAtCenter:(bool)arg1;
- (void)p_setTailPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)p_setTailSize:(double)arg1;
- (struct CGPoint { double x1; double x2; })p_tailPosition;
- (void)saveToArchive:(struct PathSourceArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct PointPathSourceArchive {} *x7; struct ScalarPathSourceArchive {} *x8; struct BezierPathSourceArchive {} *x9; struct CalloutPathSourceArchive {} *x10; struct ConnectionLinePathSourceArchive {} *x11; struct EditableBezierPathSourceArchive {} *x12; bool x13; bool x14; }*)arg1;
- (void)scaleToNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCornerRadius:(double)arg1;
- (void)setNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTailKnobPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setTailSize:(double)arg1;
- (void)setTailSizeKnobPosition:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })tailCenter;
- (struct CGPoint { double x1; double x2; })tailKnobPosition;
- (double)tailSize;
- (struct CGPoint { double x1; double x2; })tailSizeKnobPosition;
- (id)valueForSetSelector:(SEL)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
