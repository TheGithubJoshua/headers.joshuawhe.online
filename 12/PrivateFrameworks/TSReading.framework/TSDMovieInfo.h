<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDMovieInfo.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDMovieInfo.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDMovieInfo : TSDMediaInfo <KNImplicitAmbientAnimating, TSDCompatibilityAwareMediaContainer, TSDMixing, TSDPlayableInfo> {
    bool  mAudioOnly;
    TSPData * mAudioOnlyImageData;
    double  mEndTime;
    TSPData * mImportedAuxiliaryMovieData;
    NSString * mImportedAuxiliaryMovieDataOriginalFilename;
    long long  mLoopOption;
    TSPData * mMovieData;
    NSURL * mMovieRemoteURL;
    bool  mNativeAudioRecording;
    struct CGSize { 
        double width; 
        double height; 
    }  mNaturalSize;
    TSPData * mPosterImageData;
    bool  mPosterImageGeneratedWithAlphaSupport;
    double  mPosterTime;
    double  mStartTime;
    bool  mStreaming;
    TSDMediaStyle * mStyle;
    float  mVolume;
}

@property (getter=isAudioOnly, nonatomic) bool audioOnly;
@property (nonatomic, retain) TSPData *audioOnlyImageData;
@property (nonatomic, readonly) bool canAddImplicitAmbientAnimations;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) double endTime;
@property (readonly) unsigned long long hash;
@property (getter=isImplicitAmbientAnimationInteractive, nonatomic, readonly) bool implicitAmbientAnimationInteractive;
@property (nonatomic, retain) TSPData *importedAuxiliaryMovieData;
@property (nonatomic, copy) NSString *importedAuxiliaryMovieDataOriginalFilename;
@property (nonatomic) long long loopOption;
@property (nonatomic, retain) TSPData *movieData;
@property (nonatomic, retain) NSURL *movieRemoteURL;
@property (getter=isNativeAudioRecording, nonatomic) bool nativeAudioRecording;
@property (nonatomic, retain) TSPData *posterImageData;
@property (nonatomic) double posterTime;
@property (nonatomic) double startTime;
@property (getter=isStreaming, nonatomic) bool streaming;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsLooping;
@property (nonatomic, readonly) bool supportsLoopingBackAndForth;
@property (nonatomic, readonly) bool supportsStartTimeAndEndTime;
@property (nonatomic) float volume;

+ (double)defaultPosterTimeForDuration:(double)arg1;
+ (id)presetKinds;

- (void).cxx_destruct;
- (void)acceptVisitor:(id)arg1;
- (id)animationFilters;
- (id)audioOnlyImageData;
- (bool)canAddImplicitAmbientAnimations;
- (bool)canBeMediaPlaceholder;
- (bool)canBeReplaced;
- (bool)canChangeWrapType;
- (bool)canResetMediaSize;
- (bool)containsProperty:(int)arg1;
- (id)copyWithContext:(id)arg1;
- (double)doubleValueForProperty:(int)arg1;
- (double)endTime;
- (float)floatValueForProperty:(int)arg1;
- (id)generateEmptyPosterImageForContext:(id)arg1;
- (id)importedAuxiliaryMovieData;
- (id)importedAuxiliaryMovieDataOriginalFilename;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 style:(id)arg3;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 style:(id)arg3 movieData:(id)arg4 loadedAsset:(id)arg5;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 style:(id)arg3 movieRemoteURL:(id)arg4 loadedAsset:(id)arg5;
- (int)intValueForProperty:(int)arg1;
- (bool)isAllowedInGroups;
- (bool)isAudioOnly;
- (bool)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1;
- (bool)isImplicitAmbientAnimationInteractive;
- (bool)isNativeAudioRecording;
- (bool)isStreaming;
- (Class)layoutClass;
- (void)loadFromArchive:(const struct MovieArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct DrawableArchive {} *x7; struct Reference {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct DataReference {} *x11; struct DataReference {} *x12; struct DataReference {} *x13; struct Reference {} *x14; struct Size {} *x15; struct Size {} *x16; struct DataReference {} *x17; struct Attribution {} *x18; float x19; float x20; float x21; unsigned int x22; float x23; unsigned int x24; unsigned int x25; bool x26; bool x27; bool x28; bool x29; bool x30; int x31; }*)arg1 unarchiver:(id)arg2;
- (void)loadFromUnarchiver:(id)arg1;
- (long long)loopOption;
- (id)makeAVAsset;
- (id)makeAVAssetWithOptions:(id)arg1;
- (id)makePosterImageGeneratorWithAVAsset:(id)arg1;
- (id)mediaDataForDragging;
- (id)mediaDisplayName;
- (id)mediaFileType;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (id)movieData;
- (id)movieRemoteURL;
- (bool)needsDownload;
- (id)newImplicitAmbientBuildRendererWithAnimatedBuild:(id)arg1 buildChunk:(id)arg2 session:(id)arg3 animatedSlideView:(id)arg4;
- (id)objectForProperty:(int)arg1;
- (id)p_makePosterImageDataWithAVAsset:(id)arg1 inContext:(id)arg2 time:(double)arg3;
- (void)p_setPropertiesFromLoadedAsset:(id)arg1;
- (id)posterImageData;
- (double)posterTime;
- (id)presetKind;
- (id)promisedDataForType:(id)arg1;
- (id)promisedTSPDataForType:(id)arg1;
- (struct CGSize { double x1; double x2; })rawDataSize;
- (Class)repClass;
- (void)saveToArchive:(struct MovieArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct DrawableArchive {} *x7; struct Reference {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct DataReference {} *x11; struct DataReference {} *x12; struct DataReference {} *x13; struct Reference {} *x14; struct Size {} *x15; struct Size {} *x16; struct DataReference {} *x17; struct Attribution {} *x18; float x19; float x20; float x21; unsigned int x22; float x23; unsigned int x24; unsigned int x25; bool x26; bool x27; bool x28; bool x29; bool x30; int x31; }*)arg1 archiver:(id)arg2;
- (void)saveToArchiver:(id)arg1;
- (void)setAudioOnly:(bool)arg1;
- (void)setAudioOnlyImageData:(id)arg1;
- (void)setEndTime:(double)arg1;
- (void)setImportedAuxiliaryMovieData:(id)arg1;
- (void)setImportedAuxiliaryMovieDataOriginalFilename:(id)arg1;
- (void)setLoopOption:(long long)arg1;
- (void)setMovieData:(id)arg1;
- (void)setMovieRemoteURL:(id)arg1;
- (void)setNativeAudioRecording:(bool)arg1;
- (void)setPosterImageData:(id)arg1;
- (void)setPosterTime:(double)arg1;
- (void)setStartTime:(double)arg1;
- (void)setStreaming:(bool)arg1;
- (void)setStyle:(id)arg1;
- (void)setVolume:(float)arg1;
- (double)startTime;
- (id)style;
- (Class)styleClass;
- (id)styleIdentifierTemplateForNewPreset;
- (bool)supportsAttachedComments;
- (bool)supportsHyperlinks;
- (bool)supportsLooping;
- (bool)supportsLoopingBackAndForth;
- (bool)supportsStartTimeAndEndTime;
- (bool)supportsStyleInspecting;
- (id)synchronouslyGenerateDefaultPosterImageForContext:(id)arg1;
- (id)synchronouslyGenerateNewPosterImageForAsset:(id)arg1 time:(double)arg2;
- (void)takePropertiesFromReplacedMediaInfo:(id)arg1;
- (id)typesToPromiseWhenCopyingSingleDrawable;
- (float)volume;
- (bool)willRenderContentViaImager;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
