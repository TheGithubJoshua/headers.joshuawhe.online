<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTLayoutHint.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTLayoutHint.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTLayoutHint : NSObject <TSDHint> {
    struct TSUCellCoord { 
        unsigned int row; 
        unsigned short column; 
        bool _preserveRow; 
        bool _preserveColumn; 
    }  mCacheHintID;
    struct TSUCellRect { 
        struct TSUCellCoord { 
            unsigned int row; 
            unsigned short column; 
            bool _preserveRow; 
            bool _preserveColumn; 
        } origin; 
        struct { 
            unsigned int numberOfColumns; 
            unsigned int numberOfRows; 
        } size; 
    }  mCellRange;
    struct CGSize { 
        double width; 
        double height; 
    }  mEffectiveSize;
    bool  mHorizontal;
    bool  mIsValid;
    TSTLayout * mLayout;
    struct CGSize { 
        double width; 
        double height; 
    }  mMaximumSize;
    unsigned int  mPartitionPosition;
    NSNumber * mPartitioningPass;
}

@property (nonatomic) struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; } cacheHintID;
@property (nonatomic) struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; } cellRange;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct CGSize { double x1; double x2; } effectiveSize;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool horizontal;
@property (nonatomic) bool isValid;
@property (nonatomic) TSTLayout *layout;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumSize;
@property (nonatomic) unsigned int partitionPosition;
@property (nonatomic, retain) NSNumber *partitioningPass;
@property (readonly) Class superclass;

+ (Class)archivedHintClass;

- (struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })cacheHintID;
- (struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })cellRange;
- (id)copyForArchiving;
- (void)dealloc;
- (id)description;
- (struct CGSize { double x1; double x2; })effectiveSize;
- (id)firstChildHint;
- (bool)horizontal;
- (id)init;
- (id)initWithArchive:(const struct LayoutHintArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct CellRange {} *x5; struct CellID {} *x6; struct Size {} *x7; struct Size {} *x8; bool x9; bool x10; unsigned int x11; unsigned int x12; }*)arg1;
- (id)initWithRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 hintId:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2 partitionPosition:(unsigned int)arg3 maximumSize:(struct CGSize { double x1; double x2; })arg4 effectiveSize:(struct CGSize { double x1; double x2; })arg5 layout:(id)arg6 validity:(bool)arg7 horizontal:(bool)arg8;
- (void)invalidate;
- (bool)isFirstHint;
- (bool)isValid;
- (id)lastChildHint;
- (id)layout;
- (struct CGSize { double x1; double x2; })maximumSize;
- (void)offsetByDelta:(int)arg1;
- (bool)overlapsWithSelectionPath:(id)arg1;
- (unsigned int)partitionPosition;
- (id)partitioningPass;
- (oneway void)release;
- (void)saveToArchive:(struct LayoutHintArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct CellRange {} *x5; struct CellID {} *x6; struct Size {} *x7; struct Size {} *x8; bool x9; bool x10; unsigned int x11; unsigned int x12; }*)arg1;
- (void)setCacheHintID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (void)setCellRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (void)setEffectiveSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHorizontal:(bool)arg1;
- (void)setIsValid:(bool)arg1;
- (void)setLayout:(id)arg1;
- (void)setMaximumSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPartitionPosition:(unsigned int)arg1;
- (void)setPartitioningPass:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
