<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTTableDataStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSTTableDataStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTTableDataStore : TSPContainedObject {
    unsigned int  _cellCount;
    bool  _cellCountValid;
    TSTTableHeaderStorage * _columnHeaderStorage;
    TSTTableDataList * _commentStorageDataList;
    TSPLazyReference * _commentStorageTableReference;
    TSTTableDataList * _conditionalStyleSetDataList;
    TSPLazyReference * _conditionalStyleSetTableReference;
    TSTTableDataList * _controlCellSpecDataList;
    TSPLazyReference * _controlCellSpecTableReference;
    TSTTableDataList * _formatDataList;
    TSPLazyReference * _formatTableReference;
    TSTTableDataList * _formulaDataList;
    TSTTableDataList * _formulaErrorDataList;
    TSPLazyReference * _formulaErrorTableReference;
    TSPLazyReference * _formulaTableReference;
    TSTTableDataList * _importWarningSetDataList;
    TSPLazyReference * _importWarningSetTableReference;
    _Atomic int  _iteratorRunningCount;
    TSTMergeRegionMap * _mergedCellRanges;
    struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { 
        struct TSUCellRect {} *__begin_; 
        struct TSUCellRect {} *__end_; 
        struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { 
            struct TSUCellRect {} *__value_; 
        } __end_cap_; 
    }  _mergedRects;
    bool  _missingPostBNCDatalists;
    TSTTableDataList * _multipleChoiceListFormatDataList;
    TSKCustomFormatList * _pasteboardCustomFormatList;
    NSMutableDictionary * _pasteboardCustomFormatMap;
    TSTTableDataList * _preBNCFormatDataList;
    TSPLazyReference * _preBNCFormatTableReference;
    TSTTableDataList * _richTextDataList;
    NSObject<TSDContainerInfo><TSWPStorageParent> * _richTextParentInfo;
    TSPLazyReference * _richTextTableReference;
    TSTTableHeaderStorage * _rowHeaderStorage;
    unsigned char  _storageVersionPreBNC;
    TSTTableDataList * _stringDataList;
    TSPLazyReference * _stringTableReference;
    TSTTableDataList * _styleDataList;
    TSPLazyReference * _styleTableReference;
    TSTTableTileStorage * _tileStorage;
    bool  _upgrading;
}

@property (nonatomic) unsigned int cellCount;
@property (nonatomic) bool cellCountValid;
@property (nonatomic, retain) TSTTableHeaderStorage *columnHeaderStorage;
@property (nonatomic, retain) TSPLazyReference *commentStorageTableReference;
@property (nonatomic, retain) TSPLazyReference *conditionalStyleSetTableReference;
@property (nonatomic, retain) TSPLazyReference *controlCellSpecTableReference;
@property (nonatomic, retain) TSPLazyReference *formatTableReference;
@property (nonatomic, retain) TSPLazyReference *formulaErrorTableReference;
@property (nonatomic, retain) TSPLazyReference *formulaTableReference;
@property (nonatomic, readonly) bool hasPasteboardCustomFormats;
@property (nonatomic, retain) TSPLazyReference *importWarningSetTableReference;
@property (nonatomic, retain) TSTMergeRegionMap *mergedCellRanges;
@property (nonatomic) bool missingPostBNCDatalists;
@property (nonatomic, readonly) TSTTableDataList *multipleChoiceListFormatDataList;
@property (nonatomic, readonly) unsigned long long numberOfComments;
@property (nonatomic, readonly) unsigned int numberOfConditionalStyles;
@property (nonatomic, readonly) unsigned int numberOfPopulatedCells;
@property (nonatomic, retain) TSKCustomFormatList *pasteboardCustomFormatList;
@property (nonatomic, retain) NSMutableDictionary *pasteboardCustomFormatMap;
@property (nonatomic, retain) TSPLazyReference *preBNCFormatTableReference;
@property (nonatomic) NSObject<TSDContainerInfo><TSWPStorageParent> *richTextParentInfo;
@property (nonatomic, retain) TSPLazyReference *richTextTableReference;
@property (nonatomic, retain) TSTTableHeaderStorage *rowHeaderStorage;
@property (nonatomic) unsigned char storageVersionPreBNC;
@property (nonatomic, retain) TSPLazyReference *stringTableReference;
@property (nonatomic, retain) TSPLazyReference *styleTableReference;
@property (nonatomic, retain) TSTTableTileStorage *tileStorage;
@property (nonatomic) bool upgrading;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_needToUpgradeCellStorage;
- (id)addPasteboardCustomFormat:(id)arg1 toDocument:(id)arg2 updatingPasteboardFormat:(bool)arg3;
- (id)allRichTextStorages;
- (void)assertIsNotIterating;
- (bool)auditDatalistDuplicationReturningResult:(id*)arg1;
- (bool)auditRowInfoCellCountsReturningResult:(id*)arg1;
- (bool)auditTilesForRowOverlapAndExtensionPastTableBounds:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 result:(id*)arg2;
- (void)beginIteration;
- (unsigned int)cellCount;
- (unsigned long long)cellCountOfColumnAtIndex:(unsigned short)arg1;
- (unsigned long long)cellCountOfRowAtIndex:(unsigned int)arg1;
- (bool)cellCountValid;
- (bool)cellExistsAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (struct TSTCellStorage { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 32; } x1; unsigned char x2[0]; }*)cellStorageRefAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)cellStyleAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)cellStyleOfColumnAtIndex:(unsigned short)arg1;
- (id)cellStyleOfRowAtIndex:(unsigned int)arg1;
- (void)clearPasteboardCustomFormatMap;
- (id)columnHeaderStorage;
- (id)commentStorageAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)commentStorageDataList;
- (id)commentStorageTableReference;
- (id)conditionalStyleSetAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)conditionalStyleSetDataList;
- (id)conditionalStyleSetTableReference;
- (bool)confirmRefCountsReturningResult:(id*)arg1;
- (bool)containsControlCellSpecs;
- (bool)containsFormulas;
- (bool)containsImportWarnings;
- (id)controlCellSpecDataList;
- (id)controlCellSpecTableReference;
- (void)copyPasteboardCustomFormatsFromDataStore:(id)arg1;
- (id)copyWithOwner:(id)arg1;
- (void)decrementCellCountsAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (void)decrementColumnCellCount:(unsigned short)arg1 byAmount:(unsigned long long)arg2;
- (void)endIteration;
- (void)enumerateCellStoragesInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1 withBlock:(id /* block */)arg2;
- (void)enumerateCellStoragesRowByRowToMaxID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 getPreBNC:(bool)arg2 withBlock:(id /* block */)arg3;
- (void)forceLoadHeaderStorages;
- (id)formatDataList;
- (id)formatForCalcEngineAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 formatIsExplicitOut:(bool*)arg2 refIfAvailable:(struct TSTCellStorage { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 32; } x1; unsigned char x2[0]; }*)arg3;
- (id)formatTableReference;
- (struct TSCEFormula { struct TSCEASTNodeArray {} *x1; struct TSCEFormulaTranslationFlags { unsigned char x_2_1_1; } x2; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_3_1_1; } x3; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_4_1_1; } x4; }*)formulaAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)formulaDataList;
- (id)formulaErrorDataList;
- (id)formulaErrorTableReference;
- (id)formulaSpecAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)formulaTableReference;
- (bool)getCell:(id)arg1 atCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (bool)hasFormulaAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (bool)hasPasteboardCustomFormats;
- (double)heightOfRowAtIndex:(unsigned int)arg1;
- (unsigned char)hidingStateOfColumnAtIndex:(unsigned short)arg1;
- (unsigned char)hidingStateOfRowAtIndex:(unsigned int)arg1;
- (id)i_tileStartingAtOrAfterRowIndex:(unsigned int)arg1 outTileRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)i_tileStartingAtOrBeforeRowIndex:(unsigned int)arg1 outTileRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2;
- (id)importWarningSetDataList;
- (id)importWarningSetTableReference;
- (void)incrementCellCountsAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)initWithArchive:(const struct DataStore { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct HeaderStorage {} *x5; struct Reference {} *x6; struct TileStorage {} *x7; struct Reference {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct TableRBTree {} *x11; struct TableRBTree {} *x12; struct Reference {} *x13; struct Reference {} *x14; struct Reference {} *x15; struct Reference {} *x16; struct Reference {} *x17; struct Reference {} *x18; struct Reference {} *x19; struct Reference {} *x20; struct Reference {} *x21; struct Reference {} *x22; struct Reference {} *x23; unsigned int x24; unsigned int x25; unsigned int x26; }*)arg1 unarchiver:(id)arg2 owner:(id)arg3;
- (id)initWithOwner:(id)arg1;
- (void)insertColumns:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)insertRows:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)makePasteboardCustomFormatList;
- (id)mergedCellRanges;
- (struct vector<TSUCellRect, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x1; struct TSUCellRect {} *x2; struct __compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> > { struct TSUCellRect {} *x_3_1_1; } x3; })mergedRects;
- (id)metadataForColumnIndex:(unsigned short)arg1 hidingAction:(unsigned char)arg2 uuid:(struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })arg3 defaultColumnWidth:(double)arg4;
- (id)metadataForRowIndex:(unsigned int)arg1 hidingAction:(unsigned char)arg2 uuid:(struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })arg3;
- (bool)missingPostBNCDatalists;
- (void)moveColumnIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toIndex:(unsigned short)arg2;
- (void)moveRowIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 toIndex:(unsigned int)arg2;
- (id)multipleChoiceListFormatDataList;
- (unsigned long long)numberOfComments;
- (unsigned int)numberOfConditionalStyles;
- (unsigned int)numberOfPopulatedCells;
- (id)p_cellMapForUpgradingToBraveNewCell;
- (void)p_clearDataListEntriesForStorageRef:(struct TSTCellStorage { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 32; } x1; unsigned char x2[0]; }*)arg1 cellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)p_clearDataListEntriesInRange:(struct TSUCellRect { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; } x2; })arg1;
- (id)p_loadDatalist:(id*)arg1 forLazyReference:(id)arg2;
- (id)p_loadDatalist:(id*)arg1 forLazyReference:(id)arg2 completionBlock:(id /* block */)arg3;
- (id)p_makeALazyDatalistOfType:(int)arg1;
- (id)p_makeALazyDatalistOfType:(int)arg1 isNewForBNC:(bool)arg2;
- (id)p_pasteboardCustomFormatList;
- (id)p_pasteboardCustomFormatMap;
- (id)p_populatedMultipleChoiceListFormat:(id)arg1;
- (struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned short x10; })p_preBNCKeysForCell:(id)arg1 atCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2;
- (void)p_updateNumberOfPopulatedCells;
- (id)pasteboardCustomFormatList;
- (id)pasteboardCustomFormatMap;
- (id)populatedCustomFormat:(id)arg1 value:(double)arg2;
- (id)preBNCFormatDataList;
- (id)preBNCFormatTableReference;
- (void)reassignPasteboardCustomFormatKeys;
- (void)removeColumns:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)removeRows:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)replaceConditionalStyleSetsUsingBlock:(id /* block */)arg1;
- (void)replaceFormulasUsingBlock:(id /* block */)arg1;
- (void)resetAlmostEverything;
- (void)resolveDataListKeysForCell:(id)arg1 suppressTransmutation:(bool)arg2 sourceStorageVersion:(unsigned char)arg3;
- (void)resolveDataListKeysForPreBNCCell:(id)arg1 suppressTransmutation:(bool)arg2 sourceStorageVersion:(unsigned char)arg3;
- (id)richTextDataList;
- (id)richTextParentInfo;
- (id)richTextStorageForCalcEngineAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 refIfAvailable:(struct TSTCellStorage { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 32; } x1; unsigned char x2[0]; }*)arg2;
- (id)richTextTableReference;
- (id)rowHeaderStorage;
- (void)saveToArchive:(struct DataStore { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct HeaderStorage {} *x5; struct Reference {} *x6; struct TileStorage {} *x7; struct Reference {} *x8; struct Reference {} *x9; struct Reference {} *x10; struct TableRBTree {} *x11; struct TableRBTree {} *x12; struct Reference {} *x13; struct Reference {} *x14; struct Reference {} *x15; struct Reference {} *x16; struct Reference {} *x17; struct Reference {} *x18; struct Reference {} *x19; struct Reference {} *x20; struct Reference {} *x21; struct Reference {} *x22; struct Reference {} *x23; unsigned int x24; unsigned int x25; unsigned int x26; }*)arg1 archiver:(id)arg2 isInTheDocument:(bool)arg3;
- (void)setCell:(id)arg1 atCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg2 tableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg3 calculationEngine:(id)arg4 conditionalStyleOwner:(id)arg5 ignoreFormula:(bool)arg6 clearImportWarnings:(bool)arg7 doRichTextDOLC:(bool)arg8;
- (void)setCellCount:(unsigned int)arg1;
- (void)setCellCountValid:(bool)arg1;
- (void)setCellMap:(id)arg1 tableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg2 calculationEngine:(id)arg3 conditionalStyleOwner:(id)arg4 ignoreFormulas:(bool)arg5 skipDirtyingNonFormulaCells:(bool)arg6 doRichTextDOLC:(bool)arg7;
- (void)setCellStyle:(id)arg1 ofColumnAtIndex:(unsigned short)arg2;
- (void)setCellStyle:(id)arg1 ofRowAtIndex:(unsigned int)arg2;
- (void)setColumnHeaderStorage:(id)arg1;
- (void)setCommentStorageTableReference:(id)arg1;
- (void)setConditionalStyleSetTableReference:(id)arg1;
- (void)setControlCellSpecTableReference:(id)arg1;
- (void)setFormatTableReference:(id)arg1;
- (void)setFormulaErrorTableReference:(id)arg1;
- (void)setFormulaTableReference:(id)arg1;
- (void)setHeight:(double)arg1 ofRowAtIndex:(unsigned int)arg2;
- (void)setHidingState:(unsigned char)arg1 ofColumnAtIndex:(unsigned short)arg2;
- (void)setHidingState:(unsigned char)arg1 ofRowAtIndex:(unsigned int)arg2;
- (void)setImportWarningSetTableReference:(id)arg1;
- (void)setMergedCellRanges:(id)arg1;
- (void)setMissingPostBNCDatalists:(bool)arg1;
- (void)setPasteboardCustomFormatList:(id)arg1;
- (void)setPasteboardCustomFormatMap:(id)arg1;
- (void)setPreBNCFormatTableReference:(id)arg1;
- (void)setRichTextParentInfo:(id)arg1;
- (void)setRichTextTableReference:(id)arg1;
- (void)setRowHeaderStorage:(id)arg1;
- (void)setStorageParentToInfo:(id)arg1;
- (void)setStorageVersionPreBNC:(unsigned char)arg1;
- (void)setStringTableReference:(id)arg1;
- (void)setStyleTableReference:(id)arg1;
- (void)setTextStyle:(id)arg1 ofColumnAtIndex:(unsigned short)arg2;
- (void)setTextStyle:(id)arg1 ofRowAtIndex:(unsigned int)arg2;
- (void)setTileStorage:(id)arg1;
- (void)setUpgrading:(bool)arg1;
- (void)setWidth:(double)arg1 ofColumnAtIndex:(unsigned short)arg2;
- (id)setupEmptyPasteboardCustomFormatList;
- (unsigned char)storageVersionPreBNC;
- (id)stringAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)stringDataList;
- (id)stringForCalcEngineAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1 refIfAvailable:(struct TSTCellStorage { struct { unsigned char x_1_1_1; unsigned int x_1_1_2 : 8; unsigned int x_1_1_3 : 16; unsigned int x_1_1_4 : 16; unsigned int x_1_1_5 : 16; unsigned int x_1_1_6 : 32; } x1; unsigned char x2[0]; }*)arg2;
- (id)stringTableReference;
- (id)styleDataList;
- (id)styleTableReference;
- (void)swapRowAtIndex:(unsigned int)arg1 withRowAtIndex:(unsigned int)arg2;
- (id)textStyleAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (id)textStyleOfColumnAtIndex:(unsigned short)arg1;
- (id)textStyleOfRowAtIndex:(unsigned int)arg1;
- (id)tileStorage;
- (void)updateColumnHeaderAtIndex:(unsigned short)arg1 fromMetadata:(id)arg2;
- (void)updateHeaderStorageStylesWithBlock:(id /* block */)arg1;
- (void)updateRowHeaderAtIndex:(unsigned int)arg1 fromMetadata:(id)arg2;
- (void)upgradeCellFormatsU2_0;
- (void)upgradeConditionalStylesToLinkedRefWithTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (void)upgradeDataStoreCellStorageIfNeededWithTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1 conditionalStyleOwner:(id)arg2;
- (bool)upgrading;
- (int)valueTypeAtCellID:(struct TSUCellCoord { unsigned int x1; unsigned short x2; bool x3; bool x4; })arg1;
- (double)widthOfColumnAtIndex:(unsigned short)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
