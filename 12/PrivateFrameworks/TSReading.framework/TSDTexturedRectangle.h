<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDTexturedRectangle.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDTexturedRectangle.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDTexturedRectangle : NSObject <NSCopying> {
    struct CGImage { } * _bakedImage;
    TSUBezierPath * _bakedShapePath;
    TSDBitmapRenderingQualityInfo * _bitmapRenderingQualityInfo;
    struct CGColorSpace { } * _colorSpace;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentRect;
    bool  _didInitFromGPUTexture;
    bool  _didInitFromLayer;
    NSMapTable * _eventIndexToViewLayerMap;
    bool  _isFlattenedRepresentation;
    bool  _isIncomingContent;
    bool  _isVerticalText;
    CALayer * _layer;
    <TSDLiveTexturedRectangleSource> * _liveTexturedRectangleSource;
    <MTLTexture> * _metalTexture;
    struct CGPoint { 
        double x; 
        double y; 
    }  _offset;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _originalFrame;
    struct CGPoint { 
        double x; 
        double y; 
    }  _originalPosition;
    TSDTextureSet * _parent;
    id /* block */  _renderBlock;
    NSOperation * _renderingOperation;
    NSOperation * _renderingOperationMetal;
    NSOperation * _renderingOperationOpenGL;
    TSUBezierPath * _shapePath;
    bool  _shouldCleanUpSingleTexture;
    bool  _shouldGenerateMipmap;
    bool  _singleTextureContainsMipmaps;
    unsigned int  _singleTextureName;
    struct CGSize { 
        double width; 
        double height; 
    }  _singleTextureSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    struct CGImage { } * _sourceImage;
    NSString * _text;
    double  _textBaseline;
    TSUColor * _textColor;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _textRange;
    double  _textXHeight;
    double  _textureOpacity;
    long long  _textureType;
}

@property struct CGImage { }*bakedImage;
@property (nonatomic) TSDBitmapRenderingQualityInfo *bitmapRenderingQualityInfo;
@property (nonatomic) struct CGColorSpace { }*colorSpace;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameOnCanvas;
@property (nonatomic, readonly) struct CGImage { }*image;
@property (nonatomic, readonly) bool isBackgroundTexture;
@property (nonatomic, readonly) bool isBaked;
@property (nonatomic) bool isFlattenedRepresentation;
@property (nonatomic, readonly) bool isImageSource;
@property (nonatomic) bool isIncomingContent;
@property (nonatomic, readonly) bool isRenderable;
@property (nonatomic, readonly) bool isRendered;
@property (nonatomic, readonly) bool isSingleTextureSetup;
@property (nonatomic, readonly) bool isValid;
@property (nonatomic) bool isVerticalText;
@property (nonatomic, readonly) CALayer *layer;
@property (retain) <TSDLiveTexturedRectangleSource> *liveTexturedRectangleSource;
@property (nonatomic, readonly) <MTLTexture> *metalTexture;
@property (nonatomic) struct CGPoint { double x1; double x2; } offset;
@property (nonatomic) struct CGPoint { double x1; double x2; } originalPosition;
@property (nonatomic) TSDTextureSet *parent;
@property (nonatomic, readonly) CALayer *parentLayer;
@property NSOperation *renderingOperation;
@property NSOperation *renderingOperationMetal;
@property NSOperation *renderingOperationOpenGL;
@property (nonatomic, copy) TSUBezierPath *shapePath;
@property (nonatomic) bool shouldGenerateMipmap;
@property (nonatomic, readonly) unsigned int singleTextureName;
@property (nonatomic, readonly) double singleTextureOpacity;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } singleTextureSize;
@property (nonatomic, readonly) unsigned int singleTextureTarget;
@property (nonatomic) struct CGSize { double x1; double x2; } size;
@property struct CGImage { }*sourceImage;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) double textBaseline;
@property (nonatomic, copy) TSUColor *textColor;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } textRange;
@property (nonatomic) double textXHeight;
@property (nonatomic) double textureOpacity;
@property (nonatomic) long long textureType;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectForTextures:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectOnCanvasForTextures:(id)arg1;
+ (id)setupMetalShaderForContext:(id)arg1;

- (void).cxx_destruct;
- (void)adjustAnchorRelativeToCenterOfRotation:(struct CGPoint { double x1; double x2; })arg1 atEventIndex:(unsigned long long)arg2;
- (void)bakeLayerWithAngle:(double)arg1 scale:(double)arg2 layer:(id)arg3;
- (struct CGImage { }*)bakedImage;
- (id)bitmapRenderingQualityInfo;
- (struct CGColorSpace { }*)colorSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertToCanvasCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)drawFrameWithMetalContext:(id)arg1;
- (void)evictRenderedResources;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameOnCanvas;
- (struct CGImage { }*)image;
- (id)init;
- (id)initWithCGImage:(struct CGImage { }*)arg1;
- (id)initWithLayer:(id)arg1;
- (id)initWithLayer:(id)arg1 forGLTexture:(id)arg2;
- (id)initWithLayer:(id)arg1 forMetalTexture:(id)arg2;
- (id)initWithMetalTexture:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 offset:(struct CGPoint { double x1; double x2; })arg2 renderBlock:(id /* block */)arg3;
- (id)initWithTextureInfo:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)isBackgroundTexture;
- (bool)isBaked;
- (bool)isFlattenedRepresentation;
- (bool)isImageSource;
- (bool)isIncomingContent;
- (bool)isMetalTextureSetup;
- (bool)isRenderable;
- (bool)isRendered;
- (bool)isSingleTextureSetup;
- (bool)isValid;
- (bool)isVerticalText;
- (id)layer;
- (id)liveTexturedRectangleSource;
- (id)metalTexture;
- (id)metalTextureWithContext:(id)arg1;
- (id)metalTextureWithContext:(id)arg1 cpuReadable:(bool)arg2;
- (struct CGPoint { double x1; double x2; })offset;
- (struct CGPoint { double x1; double x2; })originalPosition;
- (id)p_allocateMetalTextureForDevice:(id)arg1 renderTarget:(bool)arg2 private:(bool)arg3;
- (void)p_bakeLayerWithAngle:(double)arg1 scale:(double)arg2 layer:(id)arg3;
- (struct CGColorSpace { }*)p_colorSpace;
- (void)p_initializeMap;
- (id)p_latestTextureNotAfterLayerTime:(double)arg1;
- (void)p_makeMetalTextureCPUReadable:(id)arg1 metalContext:(id)arg2;
- (struct CGImage { }*)p_newImageAndBufferWithAngle:(double)arg1 scale:(double)arg2 offset:(struct CGPoint { double x1; double x2; })arg3 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg4;
- (void)p_renderIntoContext:(struct CGContext { }*)arg1 viewLayer:(id)arg2 shouldApplyAlpha:(bool)arg3 shouldIgnoreLayerVisibility:(bool)arg4 shouldClipToBounds:(bool)arg5;
- (void)p_setupSingleTextureAndGenerateMipMaps:(bool)arg1 withContext:(id)arg2;
- (char *)p_setupTextureDataWithSize:(struct CGSize { double x1; double x2; })arg1 isBGRA:(bool)arg2;
- (void)p_updateFrame;
- (id)parent;
- (id)parentLayer;
- (void)releaseMetalTexture;
- (void)releaseSingleTexture;
- (void)renderIntoContext:(struct CGContext { }*)arg1 eventIndex:(unsigned long long)arg2 shouldApplyAlpha:(bool)arg3 shouldClipToBounds:(bool)arg4;
- (void)renderIntoContext:(struct CGContext { }*)arg1 shouldApplyAlpha:(bool)arg2;
- (void)renderIntoContext:(struct CGContext { }*)arg1 shouldApplyAlpha:(bool)arg2 shouldIgnoreLayerVisibility:(bool)arg3;
- (void)renderLayerContentsIfNeeded;
- (id)renderingOperation;
- (id)renderingOperationMetal;
- (id)renderingOperationOpenGL;
- (void)resetAnchorPointAtEventIndex:(unsigned long long)arg1;
- (void)resetToSourceImageAtEventIndex:(unsigned long long)arg1;
- (void)setBakedImage:(struct CGImage { }*)arg1;
- (void)setBitmapRenderingQualityInfo:(id)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIsFlattenedRepresentation:(bool)arg1;
- (void)setIsIncomingContent:(bool)arg1;
- (void)setIsVerticalText:(bool)arg1;
- (void)setLiveTexturedRectangleSource:(id)arg1;
- (void)setOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOriginalPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setParent:(id)arg1;
- (void)setRenderingOperation:(id)arg1;
- (void)setRenderingOperationMetal:(id)arg1;
- (void)setRenderingOperationOpenGL:(id)arg1;
- (void)setShapePath:(id)arg1;
- (void)setShouldGenerateMipmap:(bool)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSourceImage:(struct CGImage { }*)arg1;
- (void)setText:(id)arg1;
- (void)setTextBaseline:(double)arg1;
- (void)setTextColor:(id)arg1;
- (void)setTextRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setTextXHeight:(double)arg1;
- (void)setTextureOpacity:(double)arg1;
- (void)setTextureType:(long long)arg1;
- (void)setupMetalTextureForContext:(id)arg1;
- (void)setupMetalTextureForDevice:(id)arg1 commandQueue:(id)arg2;
- (void)setupSingleTexture;
- (void)setupSingleTextureWithContext:(id)arg1;
- (id)shapePath;
- (bool)shouldGenerateMipmap;
- (unsigned int)singleTextureName;
- (double)singleTextureOpacity;
- (struct CGSize { double x1; double x2; })singleTextureSize;
- (unsigned int)singleTextureTarget;
- (struct CGSize { double x1; double x2; })size;
- (struct CGImage { }*)sourceImage;
- (void)teardown;
- (id)text;
- (double)textBaseline;
- (id)textColor;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })textRange;
- (double)textXHeight;
- (double)textureOpacity;
- (long long)textureType;
- (id)viewLayerAtEventIndex:(unsigned long long)arg1;
- (void)waitUntilAsyncRenderingIsCompleteShouldCancel:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
