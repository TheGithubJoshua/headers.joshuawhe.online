<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDDrawableInfo.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDDrawableInfo.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDDrawableInfo : TSPObject <TSDChangeableInfo, TSDScrollingAwareChangeSource, TSKDocumentObject, TSKSearchable, TSKTransformableObject> {
    NSString * mAccessibilityDescription;
    bool  mAspectRatioLocked;
    TSSPropertySetChangeDetails * mChanges;
    TSDDrawableComment * mComment;
    TSDDefaultPartitioner * mDefaultPartitioner;
    TSDExteriorTextWrap * mExteriorTextWrap;
    TSDInfoGeometry * mGeometry;
    NSURL * mHyperlinkURL;
    bool  mLocked;
    TSPObject<TSDOwningAttachment> * mOwningAttachment;
    NSObject<TSDContainerInfo> * mParentInfo;
    TSPLazyReference * mParentInfoReference;
    NSArray * mPencilAnnotations;
}

@property (nonatomic, readonly) KNAbstractSlide *abstractSlide;
@property (nonatomic, copy) NSString *accessibilityDescription;
@property (nonatomic, readonly) NSArray *actionBuildChunks;
@property (nonatomic, readonly) NSSet *actionBuilds;
@property (nonatomic, readonly) NSArray *activeBuildChunks;
@property (getter=isAllowedInFreehandDrawings, nonatomic, readonly) bool allowedInFreehandDrawings;
@property (getter=isAllowedInGroups, nonatomic, readonly) bool allowedInGroups;
@property (nonatomic, readonly) bool allowsParentGroupToBeResizedWithoutAspectRatioLock;
@property (getter=isAnchoredToText, nonatomic, readonly) bool anchoredToText;
@property (nonatomic, readonly) NSSet *animationFilters;
@property (nonatomic) bool aspectRatioLocked;
@property (getter=isAttachedToBodyText, nonatomic, readonly) bool attachedToBodyText;
@property (nonatomic, readonly) NSArray *buildChunks;
@property (nonatomic, readonly) unsigned long long buildCount;
@property (nonatomic, readonly) KNBuild *buildIn;
@property (nonatomic, readonly) KNBuild *buildOut;
@property (nonatomic, readonly) NSSet *builds;
@property (nonatomic, readonly) bool canAnchor;
@property (nonatomic, readonly) bool canAspectRatioLockBeChangedByUser;
@property (nonatomic, readonly) bool canBeDefinedAsMediaPlaceholder;
@property (nonatomic, readonly) bool canBeDefinedAsTextPlaceholder;
@property (nonatomic, readonly) bool canChangeWrapType;
@property (nonatomic, readonly) bool canSizeBeChangedIncrementally;
@property (nonatomic, retain) TSDDrawableComment *comment;
@property (nonatomic, readonly) TSDGroupInfo *containingGroup;
@property (nonatomic, readonly) NSSet *contentBuilds;
@property (nonatomic, readonly) bool contentsAreRightToLeft;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) int elementKind;
@property (nonatomic, copy) TSDExteriorTextWrap *exteriorTextWrap;
@property (getter=isFloatingAboveText, nonatomic, readonly) bool floatingAboveText;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } fullTransformInRoot;
@property (nonatomic, copy) TSDInfoGeometry *geometry;
@property (nonatomic, readonly) NSArray *ghostInfos;
@property (nonatomic, readonly) bool hasActionBuilds;
@property (nonatomic, readonly) bool hasBuilds;
@property (nonatomic, readonly) bool hasContentBuilds;
@property (nonatomic, readonly) bool hasPDFDataForCopy;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSURL *hyperlinkURL;
@property (getter=isInlineWithText, nonatomic, readonly) bool inlineWithText;
@property (nonatomic, readonly) bool isRightToLeft;
@property (getter=isLockable, nonatomic, readonly) bool lockable;
@property (getter=isLocked, nonatomic) bool locked;
@property (nonatomic) bool matchesObjectPlaceholderGeometry;
@property (nonatomic, readonly) bool mayHaveImplicitBuildEvents;
@property (nonatomic, readonly) bool needsDownload;
@property (nonatomic, readonly) NSData *originalPDFDataForCopy;
@property (nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment;
@property (nonatomic, readonly) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse;
@property (nonatomic) NSObject<TSDContainerInfo> *parentInfo;
@property (nonatomic, retain) NSArray *pencilAnnotations;
@property (nonatomic, readonly) NSString *presetKind;
@property (nonatomic, readonly) bool requiresStagesBuildingInReverse;
@property (nonatomic, readonly) bool shouldBeIgnoredWhenCopying;
@property (nonatomic, readonly) KNSlide *slide;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool suppliesFinalTextures;
@property (nonatomic, readonly) bool supportsAttachedComments;
@property (nonatomic, readonly) bool supportsHyperlinks;
@property (nonatomic, readonly) bool supportsParentRotation;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformInRoot;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } transformableObjectAnchorPoint;
@property (nonatomic, readonly) bool wantsPositionFixedWhenCopying;
@property (nonatomic, readonly) bool willRenderContentViaImager;

+ (bool)canPartition;
+ (Class)classForUnarchiver:(id)arg1;
+ (void)load;
+ (bool)needsObjectUUID;
+ (void)setShouldPartitionByDefault:(bool)arg1;

- (void).cxx_destruct;
- (id)abstractSlide;
- (id)accessibilityDescription;
- (id)actionBuildChunks;
- (id)actionBuilds;
- (id)activeBuildChunks;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (bool)allowsParentGroupToBeResizedWithoutAspectRatioLock;
- (id)animationFilters;
- (bool)aspectRatioLocked;
- (struct CGPoint { double x1; double x2; })autosizePositionOffsetForGeometry:(id)arg1 dynamicallyDraggedLayout:(id)arg2;
- (void)beginCollectingChanges;
- (id)buildChunks;
- (id)buildChunksForAnimationType:(long long)arg1;
- (unsigned long long)buildCount;
- (id)buildIn;
- (id)buildOut;
- (id)builds;
- (bool)canAnchor;
- (bool)canAspectRatioLockBeChangedByUser;
- (bool)canBeDefinedAsMediaPlaceholder;
- (bool)canBeDefinedAsTextPlaceholder;
- (bool)canChangeWrapType;
- (bool)canSizeBeChangedIncrementally;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)arg1 animationFilter:(id)arg2;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)arg1 byGlyphStyle:(int)arg2 animationFilter:(id)arg3;
- (void)clearBackPointerToParentInfoIfNeeded:(id)arg1;
- (void)coalesceChanges:(id)arg1;
- (id)comment;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })computeFullTransform;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })computeLayoutFullTransform;
- (id)containingGroup;
- (id)contentBuilds;
- (bool)contentsAreRightToLeft;
- (id)copyWithContext:(id)arg1;
- (id)descriptionForPasteboard;
- (id)descriptionForPasteboardWithSource:(id)arg1;
- (void)didCopy;
- (int)elementKind;
- (id)endCollectingChanges;
- (id)exteriorTextWrap;
- (id)exteriorTextWrapForMovingToFloating;
- (void)finalizeDataOnDeepCopyBeforeSerializingForDragAndDrop;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })fullTransformInRoot;
- (id)geometry;
- (id)ghostInfos;
- (bool)hasActionBuilds;
- (bool)hasBuildOfAnimationType:(long long)arg1;
- (bool)hasBuilds;
- (bool)hasContentBuilds;
- (bool)hasPDFDataForCopy;
- (id)hyperlinkURL;
- (id)initWithContext:(id)arg1 geometry:(id)arg2;
- (bool)isAllowedInFreehandDrawings;
- (bool)isAllowedInGroups;
- (bool)isAnchoredToText;
- (bool)isAttachedToBodyText;
- (bool)isFloatingAboveText;
- (bool)isInlineWithText;
- (bool)isLockable;
- (bool)isLocked;
- (bool)isLockedForSpecificInfo;
- (bool)isRightToLeft;
- (bool)isSelectable;
- (bool)isThemeContent;
- (Class)layoutClass;
- (void)loadFromArchive:(const struct DrawableArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_7_1_1; } x7; struct GeometryArchive {} *x8; struct Reference {} *x9; struct ExteriorTextWrapArchive {} *x10; struct Reference {} *x11; bool x12; bool x13; }*)arg1 unarchiver:(id)arg2;
- (bool)matchesObjectPlaceholderGeometry;
- (bool)mayHaveImplicitBuildEvents;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (bool)needsDownload;
- (id)objectUUIDPath;
- (id)originalPDFDataForCopy;
- (id)owningAttachment;
- (id)owningAttachmentNoRecurse;
- (id)parentInfo;
- (id)partitioner;
- (id)pencilAnnotations;
- (void)performBlockWithTemporaryLayout:(id /* block */)arg1;
- (id)presetKind;
- (id)promisedDataForType:(id)arg1;
- (id)promisedTSPDataForType:(id)arg1;
- (Class)repClass;
- (bool)requiresStagesBuildingInReverse;
- (void)saveToArchive:(struct DrawableArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSP::Reference> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_7_1_1; } x7; struct GeometryArchive {} *x8; struct Reference {} *x9; struct ExteriorTextWrapArchive {} *x10; struct Reference {} *x11; bool x12; bool x13; }*)arg1 archiver:(id)arg2;
- (void)setAccessibilityDescription:(id)arg1;
- (void)setAspectRatioLocked:(bool)arg1;
- (void)setComment:(id)arg1;
- (void)setExteriorTextWrap:(id)arg1;
- (void)setGeometry:(id)arg1;
- (void)setHyperlinkURL:(id)arg1;
- (void)setInsertionCenterPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLocked:(bool)arg1;
- (void)setMatchesObjectPlaceholderGeometry:(bool)arg1;
- (void)setOwningAttachment:(id)arg1;
- (void)setParentInfo:(id)arg1;
- (void)setParentInfoDuringUnarchiving:(id)arg1 inDocument:(bool)arg2;
- (void)setPencilAnnotations:(id)arg1;
- (void)setPrimitiveGeometry:(id)arg1;
- (bool)shouldBeIgnoredWhenCopying;
- (bool)shouldCancelScrollingToSelectionPath:(id)arg1 forChanges:(id)arg2;
- (bool)shouldPreventCopyOperationWithOtherInfos:(id)arg1;
- (id)slide;
- (bool)suppliesFinalTextures;
- (bool)supportsAttachedComments;
- (bool)supportsHyperlinks;
- (bool)supportsParentRotation;
- (bool)swizzled_matchesObjectPlaceholderGeometry;
- (void)swizzled_setMatchesObjectPlaceholderGeometry:(bool)arg1;
- (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)arg1;
- (id)textureDeliveryStylesLocalized:(bool)arg1 animationFilter:(id)arg2;
- (double)transformGeometryRatioForTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformInRoot;
- (struct CGPoint { double x1; double x2; })transformableObjectAnchorPoint;
- (id)transformedGeometryWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 inBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)typesToPromiseWhenCopyingSingleDrawable;
- (id)uuidPathPrefixComponentsProvider;
- (id)validBuildsInBuilds:(id)arg1;
- (bool)wantsPositionFixedWhenCopying;
- (void)wasAddedToDocumentRoot:(id)arg1 dolcContext:(id)arg2;
- (void)wasRemovedFromDocumentRoot:(id)arg1;
- (void)willBeAddedToDocumentRoot:(id)arg1 dolcContext:(id)arg2;
- (void)willBeRemovedFromDocumentRoot:(id)arg1;
- (void)willChangeProperties:(id)arg1;
- (void)willChangeProperty:(int)arg1;
- (void)willCopyWithOtherDrawables:(id)arg1;
- (bool)willRenderContentViaImager;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
