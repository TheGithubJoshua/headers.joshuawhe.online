<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDCanvasLayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDCanvasLayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading (261)
 */

@interface TSDCanvasLayer : TSDNoDefaultImplicitActionLayer <TSKKeyboardObserver> {
    bool  _createdByPresentationLayer;
    bool  _torndown;
    bool  mAllowsPinchZoom;
    bool  mAvoidKeyboardWhenVerticallyCenteredInScrollView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  mContentInset;
    TSDInteractiveCanvasController * mController;
    bool  mHorizontallyCenteredInScrollView;
    bool  mIsInfinite;
    unsigned long long  mLayoutDisabledDepth;
    double  mMaximumPinchViewScale;
    double  mMinimumPinchViewScale;
    bool  mShowsScaleFeedback;
    struct CGSize { 
        double width; 
        double height; 
    }  mUnscaledSize;
    bool  mVerticallyCenteredInScrollView;
    double  mViewScale;
    unsigned long long  mViewScaleAnimationCount;
}

@property (nonatomic) bool allowsPinchZoom;
@property (nonatomic) bool avoidKeyboardWhenVerticallyCenteredInScrollView;
@property (nonatomic, readonly) TSDCanvasView *canvasView;
@property (nonatomic) bool centeredInScrollView;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInset;
@property (nonatomic) TSDInteractiveCanvasController *controller;
@property (nonatomic) bool createdByPresentationLayer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isLayoutDisabled, nonatomic, readonly) bool disableLayout;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool horizontallyCenteredInScrollView;
@property (getter=isInfinite, nonatomic) bool infinite;
@property (nonatomic) double maximumPinchViewScale;
@property (nonatomic) double minimumPinchViewScale;
@property (nonatomic) bool showsScaleFeedback;
@property (readonly) Class superclass;
@property (nonatomic) bool torndown;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } unscaledContentCenter;
@property (nonatomic) struct CGSize { double x1; double x2; } unscaledSize;
@property (nonatomic) bool verticallyCenteredInScrollView;
@property (nonatomic) double viewScale;

- (void)_adjustContentInsetsForKeyboard;
- (void)adjustContentInsets;
- (bool)allowsPinchZoom;
- (void)animateToViewScale:(double)arg1 contentCenter:(struct CGPoint { double x1; double x2; })arg2 contentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 duration:(double)arg4 animation:(id)arg5 completionBlock:(id /* block */)arg6;
- (void)animateToViewScale:(double)arg1 contentCenter:(struct CGPoint { double x1; double x2; })arg2 contentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 duration:(double)arg4 completionBlock:(id /* block */)arg5;
- (bool)avoidKeyboardWhenVerticallyCenteredInScrollView;
- (id)canvasView;
- (bool)centeredInScrollView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInset;
- (struct CGPoint { double x1; double x2; })contentOffsetForUnscaledContentCenter:(struct CGPoint { double x1; double x2; })arg1;
- (id)controller;
- (bool)createdByPresentationLayer;
- (void)dealloc;
- (void)fixFrameAndScrollView;
- (bool)horizontallyCenteredInScrollView;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithLayer:(id)arg1;
- (bool)isInfinite;
- (bool)isLayoutDisabled;
- (void)keyboardDidChangeFrame:(id)arg1;
- (void)keyboardWillChangeFrame:(id)arg1;
- (void)layoutIfNeededIgnoringDisabledLayout;
- (void)layoutSublayers;
- (double)maximumPinchViewScale;
- (double)minimumPinchViewScale;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_boundsRect;
- (void)p_commonInit;
- (struct CGPoint { double x1; double x2; })p_contentOffsetForUnscaledContentCenter:(struct CGPoint { double x1; double x2; })arg1 viewScale:(double)arg2 contentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
- (void)p_fixFrameAndScrollView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_fixedBoundsForScrollViewSize:(struct CGSize { double x1; double x2; })arg1 viewScale:(double)arg2 contentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
- (void)p_reenableDrawingAfterResumingFromBackground;
- (void)p_scrollViewScrollerStyleDidChange:(id)arg1;
- (void)p_setEnclosingScrollViewZoomParameters;
- (void)p_setViewScale:(double)arg1;
- (void)p_setViewScale:(double)arg1 preservingScrollOffset:(bool)arg2;
- (void)popLayoutDisabled;
- (id)presentationLayer;
- (void)pushLayoutDisabled;
- (void)setAllowsPinchZoom:(bool)arg1;
- (void)setAvoidKeyboardWhenVerticallyCenteredInScrollView:(bool)arg1;
- (void)setCenteredInScrollView:(bool)arg1;
- (void)setContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setController:(id)arg1;
- (void)setCreatedByPresentationLayer:(bool)arg1;
- (void)setHorizontallyCenteredInScrollView:(bool)arg1;
- (void)setInfinite:(bool)arg1;
- (void)setMaximumPinchViewScale:(double)arg1;
- (void)setMinimumPinchViewScale:(double)arg1;
- (void)setNeedsDisplayForDirtyTiles:(id)arg1;
- (void)setNeedsLayout;
- (void)setNeedsLayoutForTilingLayers;
- (void)setScrollViewFrameMaintainingApparentScrollPosition:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setScrollViewFrameMaintainingApparentScrollPosition:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)setShowsScaleFeedback:(bool)arg1;
- (void)setTorndown:(bool)arg1;
- (void)setUnscaledSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setUnscaledSizeOnLayer:(struct CGSize { double x1; double x2; })arg1;
- (void)setVerticallyCenteredInScrollView:(bool)arg1;
- (void)setViewScale:(double)arg1;
- (void)setViewScale:(double)arg1 andScrollViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 maintainPosition:(bool)arg3 animated:(bool)arg4;
- (bool)showsScaleFeedback;
- (void)teardown;
- (void)teardownWithoutClearingLayerDelegates;
- (bool)torndown;
- (struct CGPoint { double x1; double x2; })unscaledContentCenter;
- (struct CGSize { double x1; double x2; })unscaledSize;
- (bool)verticallyCenteredInScrollView;
- (double)viewScale;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
