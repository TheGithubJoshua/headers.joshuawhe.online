<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDAbstractLayout.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TSReading.framework/TSDAbstractLayout.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDAbstractLayout : NSObject {
    NSMutableArray * _children;
    TSDLayoutGeometry * _geometry;
    struct CGPoint { 
        double x; 
        double y; 
    }  _interimPosition;
    bool  _interimPositionXSet;
    bool  _interimPositionYSet;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastInterimPosition;
    bool  _lastInterimPositionXSet;
    bool  _lastInterimPositionYSet;
    TSDAbstractLayout * _parent;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alignmentFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alignmentFrameForProvidingGuidesInRoot;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alignmentFrameInRoot;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } alignmentFrameOriginForFixingInterimPosition;
@property (nonatomic, copy) NSArray *children;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } clipRect;
@property (nonatomic, readonly) bool exclusivelyProvidesGuidesForChildLayouts;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameForCulling;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameInParent;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameInRoot;
@property (nonatomic, copy) TSDLayoutGeometry *geometry;
@property (nonatomic, readonly) TSDLayoutGeometry *geometryForTransforming;
@property (nonatomic, readonly) TSDLayoutGeometry *geometryInParent;
@property (nonatomic, readonly) TSDLayoutGeometry *geometryInRoot;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } insertionFrame;
@property (nonatomic) double interimPositionX;
@property (nonatomic) double interimPositionY;
@property (nonatomic, readonly) bool isAxisAlignedUnflippedInRoot;
@property (nonatomic, readonly) bool isRootLayoutForInspectorGeometry;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } lastInterimPosition;
@property (nonatomic, readonly) NSArray *layoutsForProvidingGuidesForChildLayouts;
@property (nonatomic, readonly) unsigned int pageIndex;
@property (nonatomic, readonly) TPPageLayout *pageLayout;
@property (nonatomic) TSDAbstractLayout *parent;
@property (nonatomic, readonly) TSDAbstractLayout *parentLayoutForProvidingGuides;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } positionInRootForAttachmentPositioner;
@property (nonatomic, readonly) bool providesGuidesForChildLayouts;
@property (nonatomic, readonly) TSDAbstractLayout *root;
@property (nonatomic, readonly) bool shouldSnapWhileResizing;
@property (nonatomic, readonly) bool supportsCalloutAttributes;
@property (nonatomic, readonly) bool supportsFlipping;
@property (nonatomic, readonly) bool supportsInspectorPositioning;
@property (nonatomic, readonly) bool supportsResize;
@property (nonatomic, readonly) bool supportsRotation;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transform;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformInParent;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformInRoot;
@property (nonatomic, readonly) NSArray *visibleGeometries;

- (void)addChild:(id)arg1;
- (void)addLayoutsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toArray:(id)arg2 deep:(bool)arg3;
- (id)additionalDependenciesForChildLayout:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentFrameForProvidingGuidesInRoot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentFrameInRoot;
- (struct CGPoint { double x1; double x2; })alignmentFrameOriginForFixingInterimPosition;
- (bool)canRotateChildLayout:(id)arg1;
- (id)childLayoutContainingPossibleDescendentLayout:(id)arg1;
- (id)children;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clipRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })clippedRectInRoot:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (void)exchangeChildAtIndex:(unsigned long long)arg1 withChildAtIndex:(unsigned long long)arg2;
- (bool)exclusivelyProvidesGuidesForChildLayouts;
- (void)fixTransformFromInterimPosition;
- (void)fixTransformFromLastInterimPosition;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForCulling;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInParent;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameInRoot;
- (id)geometry;
- (id)geometryForTransforming;
- (id)geometryInParent;
- (id)geometryInRoot;
- (id)geometryInRoot:(id)arg1;
- (id)init;
- (void)insertChild:(id)arg1 above:(id)arg2;
- (void)insertChild:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)insertChild:(id)arg1 below:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })insertionFrame;
- (double)interimPositionX;
- (double)interimPositionY;
- (bool)isAxisAlignedUnflippedInRoot;
- (bool)isRootLayoutForInspectorGeometry;
- (struct CGPoint { double x1; double x2; })lastInterimPosition;
- (id)layoutsForProvidingGuidesForChildLayouts;
- (void)offsetGeometryBy:(struct CGPoint { double x1; double x2; })arg1;
- (void)p_fixTransformFromInterimPosition:(struct CGPoint { double x1; double x2; })arg1 interimPositionXSet:(bool)arg2 interimPositionYSet:(bool)arg3;
- (unsigned int)pageIndex;
- (id)pageLayout;
- (id)parent;
- (id)parentLayoutForProvidingGuides;
- (struct CGPoint { double x1; double x2; })positionInRootForAttachmentPositioner;
- (bool)providesGuidesForChildLayouts;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInParent:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRoot:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)removeFromParent;
- (void)replaceChild:(id)arg1 with:(id)arg2;
- (id)root;
- (void)setChildren:(id)arg1;
- (void)setGeometry:(id)arg1;
- (void)setInterimPositionX:(double)arg1;
- (void)setInterimPositionY:(double)arg1;
- (void)setParent:(id)arg1;
- (bool)shouldSnapWhileResizing;
- (bool)supportsCalloutAttributes;
- (bool)supportsFlipping;
- (bool)supportsInspectorPositioning;
- (bool)supportsResize;
- (bool)supportsRotation;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformInParent;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformInRoot;
- (id)visibleGeometries;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
