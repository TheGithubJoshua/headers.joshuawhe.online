/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSDLayout : TSDAbstractLayout {
    struct CGPoint { 
        double x; 
        double y; 
    }  mBaseAlignmentFrameOriginForFixingInterimPosition;
    TSDLayoutGeometry * mBaseGeometry;
    struct CGPoint { 
        double x; 
        double y; 
    }  mCapturedAlignmentFrameOriginForAttached;
    struct CGPoint { 
        double x; 
        double y; 
    }  mCapturedInfoGeometryPositionForAttached;
    NSMutableSet * mConnectedLayouts;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mDirtyRect;
    NSObject<TSDInfo> * mInfo;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mInitialBoundsForStandardKnobs;
    struct { 
        unsigned int position : 1; 
        unsigned int size : 1; 
        unsigned int inlineSize : 1; 
    }  mInvalidFlags;
    int  mLayoutState;
    struct CGSize { 
        double width; 
        double height; 
    }  mMaximumInlineFrameSize;
}

@property (nonatomic, readonly) NSSet *additionalGuides;
@property (nonatomic, readonly) NSArray *additionalLayoutsForRepCreation;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } boundsForStandardKnobs;
@property (nonatomic, readonly) bool canAspectRatioLockBeChangedByUser;
@property (nonatomic, readonly) bool canFlip;
@property (nonatomic, readonly) bool canInspectGeometry;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } centerForConnecting;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } centerForRotation;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } commentPoleUnscaledOffset;
@property (nonatomic, readonly) NSSet *connectedLayouts;
@property (nonatomic, readonly) NSArray *dependentLayouts;
@property (nonatomic, readonly) double descentForInlineLayout;
@property (getter=isDraggable, nonatomic, readonly) bool draggable;
@property (nonatomic, copy) TSDLayoutGeometry *dynamicGeometry;
@property (nonatomic, readonly) TSDInfoGeometry *finalInfoGeometryForResize;
@property (nonatomic, readonly) NSObject<TSDInfo> *info;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } initialBoundsForStandardKnobs;
@property (nonatomic, readonly) TSDInfoGeometry *initialInfoGeometry;
@property (nonatomic, readonly) double inlineCenteredAlignmentHorizontalOffset;
@property (nonatomic, readonly) TSDLayoutGeometry *inspectorGeometry;
@property (nonatomic, readonly) bool invalidGeometry;
@property (nonatomic, readonly) bool isBeingManipulated;
@property (nonatomic, readonly) bool isBeingTransformed;
@property (nonatomic, readonly) bool isInGroup;
@property (nonatomic, readonly) bool isInTopLevelContainerForEditing;
@property (nonatomic, readonly) bool isStrokeBeingManipulated;
@property (nonatomic, readonly) int layoutState;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumInlineFrameSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } minimumSize;
@property (nonatomic, readonly) TSDLayoutGeometry *originalGeometry;
@property (nonatomic, readonly) TSDLayoutGeometry *originalPureGeometry;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } originalPureTransformInRoot;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } originalTransformForProvidingGuides;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } originalTransformInRoot;
@property (nonatomic, readonly) bool parentAutosizes;
@property (nonatomic, readonly) TSUBezierPath *pathForClippingConnectionLines;
@property (nonatomic, readonly) TSDLayoutGeometry *pureGeometry;
@property (nonatomic, readonly) TSDLayoutGeometry *pureGeometryInParent;
@property (nonatomic, readonly) TSDLayoutGeometry *pureGeometryInRoot;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } pureTransformInRoot;
@property (nonatomic, readonly) NSSet *reliedOnLayouts;
@property (nonatomic, readonly) Class repClassOverride;
@property (nonatomic, readonly) bool resizeMayChangeAspectRatio;
@property (getter=isSelectable, nonatomic, readonly) bool selectable;
@property (nonatomic, readonly) bool shouldBeDisplayedInShowMode;
@property (nonatomic, readonly) bool shouldDisplayGuides;
@property (nonatomic, readonly) bool shouldProvideGuidesDuringExclusiveAlignmentOperation;
@property (nonatomic, readonly) bool shouldProvideSizingGuides;
@property (nonatomic, readonly) bool shouldValidate;
@property (nonatomic, readonly) TSDStroke *stroke;

- (struct CGPoint { double x1; double x2; })activityLineUnscaledEndPointForSearchReference:(id)arg1;
- (void)addConnectedLayout:(id)arg1;
- (id)additionalDependenciesForChildLayout:(id)arg1;
- (id)additionalGuides;
- (id)additionalLayoutsForRepCreation;
- (struct CGPoint { double x1; double x2; })alignmentFrameOriginForFixingInterimPosition;
- (bool)allowIntersectionOfChildLayout:(id)arg1;
- (bool)allowsConnections;
- (void)beginDrag;
- (void)beginDynamicOperation;
- (void)beginResize;
- (void)beginRotate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForStandardKnobs;
- (void)calculateAndSetPointsToSearchReference:(id)arg1;
- (struct CGPoint { double x1; double x2; })calculatePointFromSearchReference:(id)arg1;
- (bool)canAspectRatioLockBeChangedByUser;
- (bool)canFlip;
- (bool)canInspectGeometry;
- (bool)canvasShouldScrollForSelectionPath:(id)arg1;
- (struct CGPoint { double x1; double x2; })capturedInfoPositionForAttachment;
- (struct CGPoint { double x1; double x2; })centerForConnecting;
- (struct CGPoint { double x1; double x2; })centerForRotation;
- (struct CGPoint { double x1; double x2; })commentPoleUnscaledOffset;
- (id)computeInfoGeometryDuringResize;
- (id)computeInfoGeometryFromPureLayoutGeometry:(id)arg1;
- (id)computeLayoutGeometry;
- (id)connectedLayouts;
- (id)containedPencilAnnotations;
- (id)containedPencilAnnotationsIncludingChildren:(bool)arg1;
- (bool)containsStartOfPencilAnnotation:(id)arg1;
- (struct CGPoint { double x1; double x2; })convertNaturalPointFromUnscaledCanvas:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertNaturalRectFromUnscaledCanvas:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertNaturalRectToUnscaledCanvas:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (id)dependentLayouts;
- (double)descentForInlineLayout;
- (void)dragBy:(struct CGPoint { double x1; double x2; })arg1;
- (void)dragByUnscaled:(struct CGPoint { double x1; double x2; })arg1;
- (id)dynamicGeometry;
- (void)dynamicStrokeWidthChangeDidBegin;
- (void)dynamicStrokeWidthChangeDidEnd;
- (void)dynamicStrokeWidthUpdateToValue:(double)arg1;
- (void)endDrag;
- (void)endDynamicOperation;
- (void)endResize;
- (void)endRotate;
- (id)finalInfoGeometryForResize;
- (void)i_accumulateLayoutsIntoSet:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })i_takeDirtyRect;
- (id)i_wrapPath;
- (id)info;
- (id)initWithInfo:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })initialBoundsForStandardKnobs;
- (id)initialInfoGeometry;
- (double)inlineCenteredAlignmentHorizontalOffset;
- (id)inspectorGeometry;
- (bool)invalidGeometry;
- (void)invalidate;
- (void)invalidateChildren;
- (void)invalidateExteriorWrap;
- (void)invalidateFrame;
- (void)invalidateInlineSize;
- (void)invalidatePosition;
- (void)invalidateSize;
- (bool)isBeingManipulated;
- (bool)isBeingTransformed;
- (bool)isDraggable;
- (bool)isInGroup;
- (bool)isInTopLevelContainerForEditing;
- (bool)isSelectable;
- (bool)isStrokeBeingManipulated;
- (id)layoutController;
- (id)layoutForSelectionPath:(id)arg1;
- (id)layoutGeometryFromInfo;
- (int)layoutState;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })layoutTransformInInfoSpace:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct CGSize { double x1; double x2; })maximumFrameSizeForChild:(id)arg1;
- (struct CGSize { double x1; double x2; })maximumInlineFrameSize;
- (struct CGSize { double x1; double x2; })minimumSize;
- (struct CGSize { double x1; double x2; })minimumSizeForResizingKnob:(id)arg1;
- (bool)orderedBefore:(id)arg1;
- (id)originalGeometry;
- (id)originalPureGeometry;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })originalPureTransformInRoot;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })originalTransformForProvidingGuides;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })originalTransformInRoot;
- (void)p_calculateClampModelValuesAndPerformBlock:(id /* block */)arg1;
- (void)p_invalidateConnectedLayouts;
- (struct CGSize { double x1; double x2; })p_newMaxInlineFrameSize;
- (void)p_recursiveInvalidate;
- (void)p_registerWithLayoutController:(id)arg1;
- (void)p_unregisterWithLayoutController:(id)arg1;
- (bool)parentAutosizes;
- (void)parentDidChange;
- (void)parentWillChangeTo:(id)arg1;
- (id)pathForClippingConnectionLines;
- (void)pauseDynamicTransformation;
- (double)percentOfUnscaledRectContainedInParentRep:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)processChangedProperty:(int)arg1;
- (void)processChanges:(id)arg1;
- (id)pureGeometry;
- (id)pureGeometryInParent;
- (id)pureGeometryInRoot;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })pureTransformInRoot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootForCalculatingActivityLineEndpoint;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootForPresentingAnnotationPopoverForSelectionPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootForSelectionPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootForZoomingToSelectionPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectInRootOfAutoZoomContextOfSelectionPath:(id)arg1;
- (id)reliedOnLayouts;
- (void)removeConnectedLayout:(id)arg1;
- (Class)repClassOverride;
- (bool)resizeMayChangeAspectRatio;
- (void)resizeWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (id)rootLayout;
- (double)scaleForInlineClampingUnrotatedSize:(struct CGSize { double x1; double x2; })arg1 withGeometry:(id)arg2;
- (bool)selectionMustBeEntirelyOnscreenToCountAsVisibleInSelectionPath:(id)arg1;
- (void)setAdjustedInterimPositionX:(double)arg1;
- (void)setAdjustedInterimPositionY:(double)arg1;
- (void)setDynamicGeometry:(id)arg1;
- (void)setMaximumInlineFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setParent:(id)arg1;
- (bool)shouldBeDisplayedInShowMode;
- (bool)shouldDisplayGuides;
- (bool)shouldProvideGuidesDuringExclusiveAlignmentOperation;
- (bool)shouldProvideSizingGuides;
- (bool)shouldValidate;
- (id)stroke;
- (void)takeRotationFromTracker:(id)arg1;
- (void)takeSizeFromTracker:(id)arg1;
- (void)transferLayoutGeometryToInfo:(id)arg1 withAdditionalTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 assertIfInDocument:(bool)arg3;
- (void)unregisterFromLayoutController;
- (id)unscaledAnchorRectsForPencilAnnotationSelectionPath:(id)arg1 attachedType:(long long)arg2;
- (void)updateChildrenFromInfo;
- (void)updateLayoutGeometryInPreparationForPartitioning;
- (void)updateMaximumInlineFrameSize;
- (void)validate;
- (void)validateFromLastInterimPosition;
- (double)viewScaleForZoomingToSelectionPath:(id)arg1 targetPointSize:(double)arg2;
- (void)willBeAddedToLayoutController:(id)arg1;
- (void)willBeRemovedFromLayoutController:(id)arg1;
- (id)wrapInvalidationParent;

@end
