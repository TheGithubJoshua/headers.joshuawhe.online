<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMTypingIndicatorLayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMSharedUI.framework/IMTypingIndicatorLayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMSharedUI.framework/IMSharedUI (1)
 */

@interface IMTypingIndicatorLayer : CALayer <IMTypingIndicatorLayerProtocol> {
    struct UIColor { Class x1; } * _bubbleColor;
    CALayer * _bubbleContainer;
    double  _bubbleOpacity;
    struct UIColor { Class x1; } * _customBubbleColor;
    bool  _hasDarkBackground;
    id  _iconImage;
    CALayer * _iconImageLayer;
    CALayer * _largeBubble;
    CALayer * _mediumBubble;
    CALayer * _smallBubble;
    CALayer * _thinkingDot;
    struct UIColor { Class x1; } * _thinkingDotColor;
    CALayer * _thinkingDotContainer;
    double  _thinkingDotOpacity;
    CAReplicatorLayer * _thinkingDots;
}

@property (nonatomic, copy) UIColor *bubbleColor;
@property (nonatomic, retain) CALayer *bubbleContainer;
@property (nonatomic) double bubbleOpacity;
@property (nonatomic, copy) UIColor *customBubbleColor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasDarkBackground;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) id iconImage;
@property (nonatomic, retain) CALayer *iconImageLayer;
@property (nonatomic, retain) CALayer *largeBubble;
@property (nonatomic, retain) CALayer *mediumBubble;
@property (nonatomic, retain) CALayer *smallBubble;
@property (readonly) Class superclass;
@property (nonatomic, retain) CALayer *thinkingDot;
@property (nonatomic, copy) UIColor *thinkingDotColor;
@property (nonatomic, retain) CALayer *thinkingDotContainer;
@property (nonatomic) double thinkingDotOpacity;
@property (nonatomic, retain) CAReplicatorLayer *thinkingDots;

+ (struct UIColor { Class x1; }*)defaultBubbleColor;
+ (double)defaultBubbleOpacity;
+ (struct CGSize { double x1; double x2; })defaultSize;
+ (struct UIColor { Class x1; }*)defaultThinkingDotColor;
+ (double)defaultThinkingDotOpacity;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })iconImageFrame;
+ (double)iconImageTrailingSpace;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })largeBubbleFrame;
+ (struct CGPoint { double x1; double x2; })largeBubbleGrowOffset;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })mediumBubbleFrame;
+ (struct CGPoint { double x1; double x2; })mediumBubbleGrowOffset;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })smallBubbleFrame;
+ (struct CGPoint { double x1; double x2; })smallBubbleGrowOffset;
+ (bool)supportsTypingIndicatorAnimation;
+ (double)thinkingDotDiameter;
+ (double)thinkingDotSpace;
+ (struct CGPoint { double x1; double x2; })thinkingDotsOffset;

- (void).cxx_destruct;
- (void)_buildIconImage;
- (void)_buildThinkingDots;
- (id)_largeBubbleGrowAnimationsWithSpeed:(double)arg1 offset:(struct CGPoint { double x1; double x2; })arg2;
- (id)_largeBubblePulseAnimationWithSpeed:(double)arg1 delay:(double)arg2;
- (id)_mediumBubbleGrowAnimationsWithSpeed:(double)arg1 offset:(struct CGPoint { double x1; double x2; })arg2;
- (id)_mediumBubblePulseAnimationWithSpeed:(double)arg1 delay:(double)arg2;
- (void)_setup;
- (id)_smallBubbleGrowAnimationsWithSpeed:(double)arg1 offset:(struct CGPoint { double x1; double x2; })arg2;
- (id)_smallBubblePulseAnimationWithSpeed:(double)arg1 delay:(double)arg2;
- (void)_updateBubbleColors;
- (void)_updateBubbleOpacity;
- (void)_updateForImage;
- (struct UIColor { Class x1; }*)bubbleColor;
- (id)bubbleContainer;
- (double)bubbleOpacity;
- (double)convertedCurrentMediaTime;
- (struct UIColor { Class x1; }*)customBubbleColor;
- (bool)hasDarkBackground;
- (id)iconImage;
- (id)iconImageLayer;
- (id)init;
- (id)largeBubble;
- (id)mediumBubble;
- (void)setBubbleColor:(struct UIColor { Class x1; }*)arg1;
- (void)setBubbleContainer:(id)arg1;
- (void)setBubbleOpacity:(double)arg1;
- (void)setCustomBubbleColor:(struct UIColor { Class x1; }*)arg1;
- (void)setHasDarkBackground:(bool)arg1;
- (void)setIconImage:(id)arg1;
- (void)setIconImageLayer:(id)arg1;
- (void)setLargeBubble:(id)arg1;
- (void)setMediumBubble:(id)arg1;
- (void)setSmallBubble:(id)arg1;
- (void)setThinkingDot:(id)arg1;
- (void)setThinkingDotColor:(struct UIColor { Class x1; }*)arg1;
- (void)setThinkingDotContainer:(id)arg1;
- (void)setThinkingDotOpacity:(double)arg1;
- (void)setThinkingDots:(id)arg1;
- (id)smallBubble;
- (void)startGrowAnimation;
- (void)startGrowAnimationWithCompletionBlock:(id /* block */)arg1;
- (void)startPulseAnimation;
- (void)startShrinkAnimationWithCompletionBlock:(id /* block */)arg1;
- (void)stopAnimation;
- (void)stopPulseAnimation;
- (id)thinkingDot;
- (struct UIColor { Class x1; }*)thinkingDotColor;
- (id)thinkingDotContainer;
- (double)thinkingDotOpacity;
- (id)thinkingDots;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
