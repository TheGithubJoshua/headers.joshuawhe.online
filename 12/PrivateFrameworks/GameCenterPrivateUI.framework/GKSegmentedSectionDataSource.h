<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GKSegmentedSectionDataSource.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GameCenterPrivateUI.framework/GKSegmentedSectionDataSource.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GameCenterPrivateUI.framework/GameCenterPrivateUI (577.8)
 */

@interface GKSegmentedSectionDataSource : GKCollectionViewDataSource <GKSegmentInfoDelegagte> {
    GKSegmentedSectionHeaderView * _headerView;
    SEL  _noContentButtonAction;
    id  _noContentButtonTarget;
    NSString * _noContentButtonTitle;
    NSString * _noContentMessage;
    NSString * _noContentTitle;
    GKCollectionViewPlaceholderView * _placeholderView;
    GKCollectionViewDataSource * _rootDataSource;
    NSMutableArray * _segmentInfos;
    Class  _segmentedHeaderClass;
    GKSegmentInfo * _selectedSegmentInfo;
    bool  _shouldHideSegment;
    bool  _usePlaceholder;
    bool  _waitingForAnimation;
}

@property (nonatomic, readonly) NSArray *dataSources;
@property (nonatomic, retain) GKSegmentedSectionHeaderView *headerView;
@property (nonatomic) SEL noContentButtonAction;
@property (nonatomic) id noContentButtonTarget;
@property (nonatomic, retain) NSString *noContentButtonTitle;
@property (nonatomic, retain) NSString *noContentMessage;
@property (nonatomic, retain) NSString *noContentTitle;
@property (nonatomic, retain) GKCollectionViewPlaceholderView *placeholderView;
@property (nonatomic, retain) GKCollectionViewDataSource *rootDataSource;
@property (nonatomic, retain) NSMutableArray *segmentInfos;
@property (nonatomic) Class segmentedHeaderClass;
@property (nonatomic) GKCollectionViewDataSource *selectedDataSource;
@property (nonatomic) unsigned long long selectedDataSourceIndex;
@property (nonatomic, retain) GKSegmentInfo *selectedSegmentInfo;
@property (nonatomic) bool shouldHideSegment;
@property (nonatomic) bool usePlaceholder;
@property (nonatomic) bool waitingForAnimation;

- (id)_gkDescriptionWithChildren:(int)arg1;
- (void)addDataSource:(id)arg1;
- (id)allTitles;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 evaluateFactoryForSupplementaryElementOfKind:(id)arg2 atIndexPath:(id)arg3 isRecursive:(bool)arg4;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (id)collectionView:(id)arg1 viewForSupplementaryElementOfKind:(id)arg2 atIndexPath:(id)arg3;
- (void)collectionViewDidBecomeInactive:(id)arg1;
- (void)collectionViewWillBecomeActive:(id)arg1;
- (void)configureCollectionView:(id)arg1;
- (void)configureSegmentedHeader:(id)arg1;
- (bool)containsDataSource:(id)arg1;
- (id)createMetricsTreeWithGridLayout:(id)arg1;
- (void)dataSource:(id)arg1 didInsertItemsAtIndexPaths:(id)arg2;
- (void)dataSource:(id)arg1 didInsertSections:(id)arg2;
- (void)dataSource:(id)arg1 didMoveItemAtIndexPath:(id)arg2 toIndexPath:(id)arg3;
- (void)dataSource:(id)arg1 didMoveSection:(long long)arg2 toSection:(long long)arg3;
- (void)dataSource:(id)arg1 didRefreshItemsAtIndexPaths:(id)arg2;
- (void)dataSource:(id)arg1 didRefreshSections:(id)arg2;
- (void)dataSource:(id)arg1 didRemoveItemsAtIndexPaths:(id)arg2;
- (void)dataSource:(id)arg1 didRemoveSections:(id)arg2;
- (void)dataSource:(id)arg1 performBatchUpdate:(id /* block */)arg2 complete:(id /* block */)arg3;
- (void)dataSourceDidLoad;
- (void)dataSourceDidReloadData:(id)arg1;
- (id)dataSourceForSection:(unsigned long long)arg1;
- (void)dataSourceWillLoad;
- (id)dataSources;
- (void)dealloc;
- (id)description;
- (void)groupDidLoad:(id)arg1;
- (id)headerView;
- (void)hoistSegmentedFactoryToRoot;
- (id)indexPathsForItem:(id)arg1;
- (id)infoForDataSource:(id)arg1;
- (id)infoForSegment:(long long)arg1;
- (void)infosChanged;
- (id)initWithDataSources:(id)arg1;
- (id)initWithDataSources:(id)arg1 rootDataSource:(id)arg2;
- (bool)item:(id)arg1 matchesSearchTerms:(id)arg2 inSection:(long long)arg3;
- (id)itemAtIndexPath:(id)arg1;
- (SEL)noContentButtonAction;
- (id)noContentButtonTarget;
- (id)noContentButtonTitle;
- (id)noContentMessage;
- (id)noContentTitle;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (id)placeholderView;
- (void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(id)arg2 updateNotifier:(id)arg3;
- (void)removeDataSource:(id)arg1;
- (void)removeItemAtIndexPath:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)rootDataSource;
- (unsigned long long)sectionForDataSource:(id)arg1;
- (void)segmentDidChangeLoadingState:(id)arg1;
- (id)segmentInfos;
- (Class)segmentedHeaderClass;
- (id)selectedDataSource;
- (unsigned long long)selectedDataSourceIndex;
- (void)selectedSegmentChanged:(id)arg1;
- (id)selectedSegmentInfo;
- (void)setHeaderView:(id)arg1;
- (void)setNoContentButtonAction:(SEL)arg1;
- (void)setNoContentButtonTarget:(id)arg1;
- (void)setNoContentButtonTitle:(id)arg1;
- (void)setNoContentMessage:(id)arg1;
- (void)setNoContentTitle:(id)arg1;
- (void)setPlaceholderView:(id)arg1;
- (void)setRootDataSource:(id)arg1;
- (void)setSegmentInfos:(id)arg1;
- (void)setSegmentedHeaderClass:(Class)arg1;
- (void)setSelectedDataSource:(id)arg1;
- (void)setSelectedDataSourceIndex:(unsigned long long)arg1;
- (void)setSelectedDataSourceIndex:(unsigned long long)arg1 reload:(bool)arg2;
- (void)setSelectedSegmentInfo:(id)arg1;
- (void)setShouldHideSegment:(bool)arg1;
- (void)setTitle:(id)arg1 forDataSource:(id)arg2;
- (void)setUsePlaceholder:(bool)arg1;
- (void)setWaitingForAnimation:(bool)arg1;
- (bool)shouldHideSegment;
- (void)updatePlaceholderNotify:(bool)arg1;
- (bool)usePlaceholder;
- (bool)waitingForAnimation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
