<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GKDashboardCollectionViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GameCenterPrivateUI.framework/GKDashboardCollectionViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GameCenterPrivateUI.framework/GameCenterPrivateUI (577.8)
 */

@interface GKDashboardCollectionViewController : GKLoadingViewController <NSPopoverDelegate, UICollectionViewDataSource, UICollectionViewDelegate> {
    bool  _autoWidthUsesTwoColumnsWhenSpace;
    UIView * _collectionContainerView;
    UICollectionView * _collectionView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsetsBeforeKeyboard;
    GKCollectionDataSource * _dataSource;
    UIView * _keyboardAdjustedView;
    NSLayoutConstraint * _keyboardConstraint;
    double  _keyboardConstraintDefaultConstant;
    GKNoContentView * _noContentView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _scrollInsetsBeforeKeyboard;
    NSMutableIndexSet * _sectionsToReload;
}

@property (nonatomic) bool autoWidthUsesTwoColumnsWhenSpace;
@property (nonatomic) UIView *collectionContainerView;
@property (nonatomic, retain) UICollectionView *collectionView;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInsetsBeforeKeyboard;
@property (nonatomic, retain) GKCollectionDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isLoading;
@property (nonatomic) UIView *keyboardAdjustedView;
@property (nonatomic) NSLayoutConstraint *keyboardConstraint;
@property (nonatomic) double keyboardConstraintDefaultConstant;
@property (nonatomic, retain) GKNoContentView *noContentView;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } scrollInsetsBeforeKeyboard;
@property (nonatomic, retain) NSMutableIndexSet *sectionsToReload;
@property (readonly) Class superclass;

- (bool)autoWidthUsesTwoColumnsWhenSpace;
- (void)clearSelection;
- (void)clearSelectionForCollectionView:(id)arg1;
- (id)collectionContainerView;
- (id)collectionView;
- (bool)collectionView:(id)arg1 canFocusItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didDeselectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didFocusItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didUnfocusItemAtIndexPath:(id)arg2;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 referenceSizeForHeaderInSection:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (bool)collectionView:(id)arg1 shouldSelectItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 viewForSupplementaryElementOfKind:(id)arg2 atIndexPath:(id)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsetsBeforeKeyboard;
- (void)contentSizeCategoryDidChangeNotification:(id)arg1;
- (void)createCollectionViewInsideView:(id)arg1;
- (id)dataSource;
- (void)dataUpdated:(bool)arg1 withError:(id)arg2;
- (void)dealloc;
- (void)didEnterLoadingState;
- (void)didEnterRefreshingState;
- (void)didExitRefreshingState;
- (bool)hasData;
- (void)hideNoContentPlaceholder;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isLoading;
- (id)keyboardAdjustedView;
- (id)keyboardConstraint;
- (double)keyboardConstraintDefaultConstant;
- (void)keyboardWillHide:(id)arg1;
- (void)keyboardWillShow:(id)arg1;
- (void)loadData;
- (void)loadView;
- (id)noContentView;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (void)popoverDidClose:(id)arg1;
- (id)preferredFocusEnvironments;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })scrollInsetsBeforeKeyboard;
- (id)sectionsToReload;
- (void)setAutoWidthColumns:(long long)arg1;
- (void)setAutoWidthUsesTwoColumnsWhenSpace:(bool)arg1;
- (void)setCollectionContainerView:(id)arg1;
- (void)setCollectionView:(id)arg1;
- (void)setContentInsetsBeforeKeyboard:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDataSource:(id)arg1;
- (void)setKeyboardAdjustedView:(id)arg1;
- (void)setKeyboardConstraint:(id)arg1;
- (void)setKeyboardConstraintDefaultConstant:(double)arg1;
- (void)setNeedsRefresh;
- (void)setNoContentView:(id)arg1;
- (void)setScrollInsetsBeforeKeyboard:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setSectionsToReload:(id)arg1;
- (void)setToHorizontalLayout:(bool)arg1;
- (void)setupDataSource;
- (void)setupNoContentView:(id)arg1 withError:(id)arg2;
- (void)showNoContentPlaceholderForError:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)windowDidEndSheet:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
