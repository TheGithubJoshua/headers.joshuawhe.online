<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVAppStyle.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/TVAppStyle.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface TVAppStyle : NSObject {
    IKColor * _backgroundColor;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _borderRadius;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _fontSize;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _height;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _interitemSpacing;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _margin;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _maxHeight;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _maxWidth;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _minHeight;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _minWidth;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _padding;
    NSMutableDictionary * _stylesMap;
    struct { 
        union { 
            struct UIEdgeInsets { 
                double top; 
                double left; 
                double bottom; 
                double right; 
            } insetValue; 
            double doubleValue; 
        } ; 
        bool isValueSet; 
    }  _width;
}

@property (nonatomic, retain) IKColor *backgroundColor;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } borderRadius;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } fontSize;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } height;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } interitemSpacing;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } margin;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } maxHeight;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } maxWidth;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } minHeight;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } minWidth;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } padding;
@property (nonatomic) struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; } width;

- (void).cxx_destruct;
- (void)_setValue:(id)arg1 forStyleProperty:(id)arg2;
- (id)backgroundColor;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })borderRadius;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })fontSize;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })height;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })interitemSpacing;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })margin;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })maxHeight;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })maxWidth;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })minHeight;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })minWidth;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })padding;
- (void)setBackgroundColor:(id)arg1;
- (void)setBorderRadius:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setFontSize:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setHeight:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setInteritemSpacing:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setMargin:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setMaxHeight:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setMaxWidth:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setMinHeight:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setMinWidth:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setPadding:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (void)setWidth:(struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })arg1;
- (id)valueForStyle:(id)arg1;
- (struct { union { struct UIEdgeInsets { double x_1_2_1; double x_1_2_2; double x_1_2_3; double x_1_2_4; } x_1_1_1; double x_1_1_2; } x1; bool x2; })width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
