<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVImageProxy.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/TVImageProxy.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface TVImageProxy : NSObject <NSCopying> {
    bool  _allowsSubstitutionForOriginal;
    bool  _cacheOnLoad;
    id /* block */  _completionHandler;
    TVImageDecorator * _decorator;
    _TVDecoratorRequest * _decoratorRequestToken;
    long long  _groupType;
    bool  _imageAvailable;
    id  _imageDidWriteObserver;
    long long  _imageDirection;
    id  _imageLoader;
    bool  _isLoading;
    bool  _loadSynchronouslyIfCached;
    id  _object;
    <IKNetworkRequestLoader> * _requestLoader;
    id  _requestToken;
    id /* block */  _writeCompletionHandler;
    bool  _writeToAssetLibrary;
}

@property (nonatomic) bool allowsSubstitutionForOriginal;
@property (nonatomic) bool cacheOnLoad;
@property (copy) id /* block */ completionHandler;
@property (nonatomic, retain) TVImageDecorator *decorator;
@property (nonatomic, retain) _TVDecoratorRequest *decoratorRequestToken;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } expectedSize;
@property (nonatomic) long long groupType;
@property (getter=isImageAvailable, nonatomic) bool imageAvailable;
@property (nonatomic, retain) id imageDidWriteObserver;
@property (nonatomic) long long imageDirection;
@property (nonatomic, retain) id imageLoader;
@property (nonatomic) bool isLoading;
@property (nonatomic) bool loadSynchronouslyIfCached;
@property (nonatomic, readonly) id object;
@property (nonatomic) <IKNetworkRequestLoader> *requestLoader;
@property (nonatomic, retain) id requestToken;
@property (copy) id /* block */ writeCompletionHandler;
@property (nonatomic) bool writeToAssetLibrary;

+ (id)_imageDecoratorQueue;

- (void).cxx_destruct;
- (id)_assetKeyWithImageLoaderKey:(id)arg1 decoratorIdentifier:(id)arg2;
- (void)_callCompletionHandlerWithImage:(id)arg1 error:(id)arg2 finished:(bool)arg3;
- (void)_callWriteCompletionHandlerWithPath:(id)arg1 error:(id)arg2 finished:(bool)arg3;
- (void)_completeImageLoadWithImage:(id)arg1 imagePath:(id)arg2 error:(id)arg3 assetKey:(id)arg4 expiryDate:(id)arg5 tags:(id)arg6 requestRecord:(id)arg7;
- (void)_decorateAndWriteImage:(id)arg1 imagePath:(id)arg2 scaleToSize:(struct CGSize { double x1; double x2; })arg3 cropToFit:(bool)arg4 scalingResult:(unsigned long long)arg5 assetKey:(id)arg6 expiryDate:(id)arg7 tags:(id)arg8 requestRecord:(id)arg9;
- (id)_decoratedImageAssetKey;
- (id)_decoratedImageAssetPath;
- (id)_decoratorIdentifier;
- (id)_imageAssetPathWithAssetKey:(id)arg1;
- (void)_imageDidWriteHandler:(id)arg1;
- (id)_imageLoaderKey;
- (id)_originalImageAssetKey;
- (id)_originalImageAssetPath;
- (bool)allowsSubstitutionForOriginal;
- (bool)cacheOnLoad;
- (void)cancel;
- (id /* block */)completionHandler;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)decorator;
- (id)decoratorRequestToken;
- (id)description;
- (struct CGSize { double x1; double x2; })expectedSize;
- (long long)groupType;
- (unsigned long long)hash;
- (id)imageDidWriteObserver;
- (long long)imageDirection;
- (id)imageLoader;
- (id)initWithObject:(id)arg1 imageLoader:(id)arg2 groupType:(long long)arg3;
- (bool)isEqual:(id)arg1;
- (bool)isImageAvailable;
- (bool)isLoading;
- (bool)isOfSameOriginAs:(id)arg1;
- (void)load;
- (bool)loadSynchronouslyIfCached;
- (void)loadWithWeakObject:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)object;
- (id)requestLoader;
- (id)requestToken;
- (void)setAllowsSubstitutionForOriginal:(bool)arg1;
- (void)setCacheOnLoad:(bool)arg1;
- (void)setCompletionHandler:(id /* block */)arg1;
- (void)setDecorator:(id)arg1;
- (void)setDecoratorRequestToken:(id)arg1;
- (void)setGroupType:(long long)arg1;
- (void)setImageAvailable:(bool)arg1;
- (void)setImageDidWriteObserver:(id)arg1;
- (void)setImageDirection:(long long)arg1;
- (void)setImageLoader:(id)arg1;
- (void)setIsLoading:(bool)arg1;
- (void)setLoadSynchronouslyIfCached:(bool)arg1;
- (void)setRequestLoader:(id)arg1;
- (void)setRequestToken:(id)arg1;
- (void)setWriteCompletionHandler:(id /* block */)arg1;
- (void)setWriteToAssetLibrary:(bool)arg1;
- (id /* block */)writeCompletionHandler;
- (bool)writeToAssetLibrary;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
