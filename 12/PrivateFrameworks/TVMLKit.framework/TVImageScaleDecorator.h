<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVImageScaleDecorator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/TVImageScaleDecorator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface TVImageScaleDecorator : TVImageDecorator {
    UIColor * _bgColor;
    bool  _cornerContinuous;
    struct TVCornerRadii { 
        double topLeft; 
        double topRight; 
        double bottomLeft; 
        double bottomRight; 
    }  _cornerRadii;
    double  _focusedSizeIncrease;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _padding;
    bool  _preservesAlpha;
    long long  _scaleMode;
    struct CGSize { 
        double width; 
        double height; 
    }  _scaleToSize;
}

@property (nonatomic, copy) UIColor *bgColor;
@property (nonatomic) bool cornerContinuous;
@property (nonatomic) struct TVCornerRadii { double x1; double x2; double x3; double x4; } cornerRadii;
@property (nonatomic) bool cropToFit;
@property (nonatomic) double focusedSizeIncrease;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } padding;
@property (nonatomic) bool preservesAlpha;
@property (nonatomic) long long scaleMode;
@property (nonatomic) struct CGSize { double x1; double x2; } scaleToSize;
@property (nonatomic) double upscaleAdjustment;

- (void).cxx_destruct;
- (void)_applyCornerMaskForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toContext:(struct CGContext { }*)arg2;
- (double)_focusedSizeIncreaseFactor;
- (id)_imageFixedForRotation:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_paddingAdjustedForUpscaling;
- (struct CGSize { double x1; double x2; })_scaleToSizeAdjustedForUpscaling;
- (id)bgColor;
- (bool)cornerContinuous;
- (struct TVCornerRadii { double x1; double x2; double x3; double x4; })cornerRadii;
- (bool)cropToFit;
- (id)decorate:(id)arg1 scaledWithSize:(struct CGSize { double x1; double x2; })arg2 croppedToFit:(bool)arg3;
- (id)decoratorIdentifier;
- (struct CGSize { double x1; double x2; })expectedSize;
- (double)focusedSizeIncrease;
- (id)init;
- (id)initWithScaleToSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithScaleToSize:(struct CGSize { double x1; double x2; })arg1 cropToFit:(bool)arg2;
- (id)initWithScaleToSize:(struct CGSize { double x1; double x2; })arg1 scaleMode:(long long)arg2;
- (bool)isEqual:(id)arg1;
- (bool)loaderCropToFit;
- (struct CGSize { double x1; double x2; })loaderScaleToSize;
- (bool)needsAlphaForImage:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })padding;
- (bool)preservesAlpha;
- (long long)scaleMode;
- (struct CGSize { double x1; double x2; })scaleToSize;
- (void)setBgColor:(id)arg1;
- (void)setCornerContinuous:(bool)arg1;
- (void)setCornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg1;
- (void)setCropToFit:(bool)arg1;
- (void)setFocusedSizeIncrease:(double)arg1;
- (void)setPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPreservesAlpha:(bool)arg1;
- (void)setScaleMode:(long long)arg1;
- (void)setScaleToSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setUpscaleAdjustment:(double)arg1;
- (double)upscaleAdjustment;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
