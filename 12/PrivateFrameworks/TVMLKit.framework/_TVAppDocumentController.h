<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_TVAppDocumentController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/_TVAppDocumentController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface _TVAppDocumentController : UIViewController <IKAppDocumentDelegate, UIGestureRecognizerDelegate, UIPopoverPresentationControllerDelegate, _TVIKAppDocumentDelegate, _TVModalPresenterFocusing, _TVPagePerformanceDelegate> {
    <_TVAppDocumentControllerDelegate> * _appDelegate;
    IKAppDocument * _appDocument;
    bool  _applicationDeactivatedOnMenu;
    <_TVAppDocumentControllerDelegate> * _delegate;
    struct { 
        bool hasMediaQueryEvaluator; 
        bool hasWillHostTemplateViewController; 
        bool hasDidHostTemplateViewController; 
    }  _delegateFlags;
    bool  _dismissAppOnMenu;
    TVMediaQueryEvaluator * _mediaQueryEvaluator;
    id /* block */  _menuGestureHandler;
    UITapGestureRecognizer * _menuGestureRecognizer;
    bool  _opaque;
    _TVPagePerformanceController * _pagePerformance;
    UIView * _pagePerformanceView;
    bool  _presentedModal;
    bool  _shouldMarkStylesDirtyBeforeLayout;
    UIViewController * _templateViewController;
    bool  _transitioning;
    bool  _visualEffectDisablementNeeded;
}

@property (nonatomic) <_TVAppDocumentControllerDelegate> *appDelegate;
@property (nonatomic, retain) IKAppDocument *appDocument;
@property (nonatomic, readonly) bool applicationDeactivatedOnMenu;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_TVAppDocumentControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool dismissAppOnMenu;
@property (nonatomic, readonly) <UIFocusItemContainer> *focusItemContainer;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) TVMediaQueryEvaluator *mediaQueryEvaluator;
@property (nonatomic, copy) id /* block */ menuGestureHandler;
@property (nonatomic) UITapGestureRecognizer *menuGestureRecognizer;
@property (nonatomic) bool opaque;
@property (nonatomic, retain) _TVPagePerformanceController *pagePerformance;
@property (nonatomic, retain) UIView *pagePerformanceView;
@property (nonatomic, readonly) <UIFocusEnvironment> *parentFocusEnvironment;
@property (nonatomic, readonly, copy) NSArray *preferredFocusEnvironments;
@property (nonatomic, readonly) UIView *preferredFocusedView;
@property (getter=isPresentedModal, nonatomic) bool presentedModal;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIViewController *templateViewController;
@property (getter=isTransitioning, nonatomic) bool transitioning;
@property (getter=isVisualEffectDisablementNeeded, nonatomic) bool visualEffectDisablementNeeded;

- (void).cxx_destruct;
- (id)_alertControllerWithError:(id)arg1;
- (void)_darkerSystemColorStatusChanged:(id)arg1;
- (void)_didHostTemplateViewController:(id)arg1 usedTransitions:(bool)arg2;
- (bool)_isFlowcaseStack;
- (void)_markAndNotifyStylesDirty;
- (id)_mediaQueryEvaluator;
- (void)_menuGestureHandler:(id)arg1;
- (bool)_tvTabBarShouldOverlap;
- (void)_updateIdleModeStatus;
- (void)_updateModalPresentationStateWithTemplateView:(id)arg1;
- (void)_updateTemplateViewController;
- (void)_willHostTemplateViewController:(id)arg1 usesTransitions:(bool*)arg2;
- (long long)adaptivePresentationStyleForPresentationController:(id)arg1 traitCollection:(id)arg2;
- (id)appDelegate;
- (id)appDocument;
- (bool)applicationDeactivatedOnMenu;
- (bool)automaticallyAdjustsScrollViewInsets;
- (id)childViewControllerForHomeIndicatorAutoHidden;
- (id)childViewControllerForStatusBarHidden;
- (id)contentScrollView;
- (id)currentImpressionableElements;
- (id)customAnimatorForNavigationControllerOperation:(long long)arg1 fromViewController:(id)arg2;
- (id)customAnimatorForNavigationControllerOperation:(long long)arg1 toViewController:(id)arg2;
- (void)dealloc;
- (id)delegate;
- (void)didHostTemplateViewController:(id)arg1 usedTransitions:(bool)arg2;
- (bool)dismissAppOnMenu;
- (bool)document:(id)arg1 evaluateStyleMediaQuery:(id)arg2;
- (void)documentDidUpdate:(id)arg1;
- (void)documentDidUpdateImplicitly:(id)arg1;
- (void)documentNeedsUpdate:(id)arg1;
- (struct CGSize { double x1; double x2; })formSize;
- (id)impressionableViewElementsForDocument:(id)arg1;
- (id)initWithAppDocument:(id)arg1;
- (bool)isPresentedModal;
- (bool)isTransitioning;
- (bool)isVisualEffectDisablementNeeded;
- (void)loadView;
- (id)mediaQueryEvaluator;
- (id /* block */)menuGestureHandler;
- (id)menuGestureRecognizer;
- (bool)opaque;
- (id)overrideTraitCollectionForChildViewController:(id)arg1;
- (id)pagePerformance;
- (void)pagePerformanceController:(id)arg1 didUpdateMetrics:(id)arg2;
- (id)pagePerformanceView;
- (void)popoverPresentationController:(id)arg1 willRepositionPopoverToRect:(inout struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 inView:(inout id*)arg3;
- (bool)ppt_isLoading;
- (id)preferredFocusEnvironments;
- (long long)preferredStatusBarStyle;
- (void)reload;
- (void)replaceAppDocumentWithAppDocument:(id)arg1;
- (void)scrollToTop;
- (void)setAppDelegate:(id)arg1;
- (void)setAppDocument:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDismissAppOnMenu:(bool)arg1;
- (void)setMediaQueryEvaluator:(id)arg1;
- (void)setMenuGestureHandler:(id /* block */)arg1;
- (void)setMenuGestureRecognizer:(id)arg1;
- (void)setOpaque:(bool)arg1;
- (void)setPagePerformance:(id)arg1;
- (void)setPagePerformanceView:(id)arg1;
- (void)setPresentedModal:(bool)arg1;
- (void)setTemplateViewController:(id)arg1;
- (void)setTransitioning:(bool)arg1;
- (void)setVisualEffectDisablementNeeded:(bool)arg1;
- (bool)shouldAutomaticallyForwardAppearanceMethods;
- (void)snapshotImpressions;
- (unsigned long long)supportedInterfaceOrientations;
- (id)templateViewController;
- (void)traitCollectionDidChange:(id)arg1;
- (struct CGSize { double x1; double x2; })tv_adjustedWindowSizeForDocument:(id)arg1;
- (bool)tv_isPresentedModalForDocument:(id)arg1;
- (void)tvmlkit_handleEvent:(id)arg1 forElement:(id)arg2 andSourceView:(id)arg3;
- (void)updatePreferredFocusedViewStateForFocus:(bool)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (void)willHostTemplateViewController:(id)arg1 usesTransitions:(bool*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
