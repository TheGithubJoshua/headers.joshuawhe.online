<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVFocusableTextView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/TVFocusableTextView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface TVFocusableTextView : UIView <UIGestureRecognizerDelegate, _UIFloatingContentViewDelegate> {
    bool  _alwaysFocusable;
    bool  _alwaysShowBackground;
    UITextView * _auxilliaryTextView;
    UIColor * _backgroundColor;
    UIVisualEffectView * _backgroundView;
    UIColor * _descriptionTextColor;
    UIColor * _descriptionTextHighlightColor;
    UITextView * _descriptionTextView;
    bool  _disableFocus;
    _UIFloatingContentView * _floatingView;
    unsigned long long  _focusSizeIncrease;
    UIColor * _highlightBackgroundColor;
    double  _moreHighlightPadding;
    UILabel * _moreLabel;
    bool  _moreLabelOnNewLine;
    UITapGestureRecognizer * _moreLabelTapGestureRecognizer;
    UIColor * _moreLabelTextColor;
    bool  _needsTextSizeComputation;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _padding;
    id /* block */  _playHandler;
    UITapGestureRecognizer * _playRecognizer;
    UITapGestureRecognizer * _selectRecognizer;
    id /* block */  _selectionHandler;
    bool  _textTruncating;
    bool  _trackHorizontal;
    UIVisualEffectView * _vibrantEffectView;
}

@property (getter=isAlwaysFocusable, nonatomic) bool alwaysFocusable;
@property (nonatomic) bool alwaysShowBackground;
@property (nonatomic, retain) UIVisualEffectView *backgroundView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSAttributedString *descriptionText;
@property (nonatomic, retain) UIColor *descriptionTextColor;
@property (nonatomic, retain) UIColor *descriptionTextHighlightColor;
@property (nonatomic, retain) UITextView *descriptionTextView;
@property (nonatomic) bool disableFocus;
@property (nonatomic, retain) _UIFloatingContentView *floatingView;
@property (nonatomic) unsigned long long focusSizeIncrease;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIColor *highlightBackgroundColor;
@property (nonatomic) unsigned long long maximumNumberOfLines;
@property (nonatomic) double moreHighlightPadding;
@property (nonatomic, retain) UILabel *moreLabel;
@property (nonatomic) bool moreLabelOnNewLine;
@property (nonatomic, readonly) UITapGestureRecognizer *moreLabelTapGestureRecognizer;
@property (nonatomic, retain) UIColor *moreLabelTextColor;
@property (nonatomic) bool needsTextSizeComputation;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } padding;
@property (nonatomic, copy) id /* block */ playHandler;
@property (nonatomic, retain) UITapGestureRecognizer *playRecognizer;
@property (nonatomic, retain) UITapGestureRecognizer *selectRecognizer;
@property (nonatomic, copy) id /* block */ selectionHandler;
@property (readonly) Class superclass;
@property (getter=isTextTruncating, nonatomic, readonly) bool textTruncating;
@property (nonatomic) bool trackHorizontal;

+ (double)cornerRadius;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_moreLabelExclusionPathFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_moreLabelFrame;
- (void)_playButtonAction:(id)arg1;
- (void)_recomputeTextSizeIfNeeded;
- (void)_selectButtonAction:(id)arg1;
- (void)_setNeedsTextSizeComputation;
- (void)_updateBackgroundColors;
- (void)_updateTextColorsForFocusState:(bool)arg1;
- (void)_updateTextColorsIfNeeded;
- (bool)alwaysShowBackground;
- (id)backgroundView;
- (bool)canBecomeFocused;
- (id)descriptionText;
- (id)descriptionTextColor;
- (id)descriptionTextHighlightColor;
- (id)descriptionTextView;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (bool)disableFocus;
- (void)floatingContentView:(id)arg1 isTransitioningFromState:(unsigned long long)arg2 toState:(unsigned long long)arg3;
- (id)floatingView;
- (unsigned long long)focusSizeIncrease;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)highlightBackgroundColor;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isAlwaysFocusable;
- (bool)isTextTruncating;
- (void)layoutSubviews;
- (unsigned long long)maximumNumberOfLines;
- (double)moreHighlightPadding;
- (id)moreLabel;
- (bool)moreLabelOnNewLine;
- (id)moreLabelTapGestureRecognizer;
- (id)moreLabelTextColor;
- (bool)needsTextSizeComputation;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })padding;
- (id /* block */)playHandler;
- (id)playRecognizer;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (id)selectRecognizer;
- (id /* block */)selectionHandler;
- (void)setAlwaysFocusable:(bool)arg1;
- (void)setAlwaysShowBackground:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundView:(id)arg1;
- (void)setDescriptionText:(id)arg1;
- (void)setDescriptionTextColor:(id)arg1;
- (void)setDescriptionTextHighlightColor:(id)arg1;
- (void)setDescriptionTextView:(id)arg1;
- (void)setDisableFocus:(bool)arg1;
- (void)setFloatingView:(id)arg1;
- (void)setFocusSizeIncrease:(unsigned long long)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlightBackgroundColor:(id)arg1;
- (void)setMaximumNumberOfLines:(unsigned long long)arg1;
- (void)setMoreHighlightPadding:(double)arg1;
- (void)setMoreLabel:(id)arg1;
- (void)setMoreLabelOnNewLine:(bool)arg1;
- (void)setMoreLabelTextColor:(id)arg1;
- (void)setNeedsTextSizeComputation:(bool)arg1;
- (void)setPadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPlayHandler:(id /* block */)arg1;
- (void)setPlayRecognizer:(id)arg1;
- (void)setSelectRecognizer:(id)arg1;
- (void)setSelected:(bool)arg1 animated:(bool)arg2;
- (void)setSelected:(bool)arg1 animated:(bool)arg2 withAnimationCoordinator:(id)arg3;
- (void)setSelectionHandler:(id /* block */)arg1;
- (void)setTrackHorizontal:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (bool)trackHorizontal;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
