<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_TVImageView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/_TVImageView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface _TVImageView : UIControl {
    UIColor * __darkTintColor;
    bool  __enableEdgeAntialiasingOnSelected;
    UIColor * __focusedColor;
    UIColor * __tintColor;
    id /* block */  _completion;
    bool  _continuousCorners;
    double  _cornerRadius;
    UIImage * _flatHighlightImage;
    UIImage * _flatImage;
    CAFilter * _highlightFilter;
    UIImage * _image;
    bool  _imageContainsCornerRadius;
    long long  _imageContentMode;
    bool  _imageLoaded;
    TVImageProxy * _imageProxy;
    UIImageView * _imageView;
    UIImage * _placeholderImage;
    bool  _rendersImageAsTemplates;
    bool  _selected;
}

@property (setter=_setDarkTintColor:, nonatomic, retain) UIColor *_darkTintColor;
@property (setter=_setEnableEdgeAntialiasingOnSelected:, nonatomic) bool _enableEdgeAntialiasingOnSelected;
@property (setter=_setFocusedColor:, nonatomic, retain) UIColor *_focusedColor;
@property (setter=_setTintColor:, nonatomic, retain) UIColor *_tintColor;
@property (nonatomic, copy) id /* block */ completion;
@property (nonatomic) double cornerRadius;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic) bool imageContainsCornerRadius;
@property (getter=isImageLoaded, nonatomic) bool imageLoaded;
@property (nonatomic, retain) TVImageProxy *imageProxy;
@property (nonatomic, retain) UIImage *placeholderImage;

- (void).cxx_destruct;
- (double)_continuousCornerRadius;
- (double)_cornerRadius;
- (id)_darkTintColor;
- (bool)_enableEdgeAntialiasingOnSelected;
- (id)_focusedColor;
- (id)_imageView;
- (void)_loadImage;
- (void)_reloadImageForLayoutDirectionChange;
- (void)_resetContentRect;
- (void)_setContentRectInPixels:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forContentSize:(struct CGSize { double x1; double x2; })arg2;
- (void)_setContinuousCornerRadius:(double)arg1;
- (void)_setCornerRadius:(double)arg1;
- (void)_setDarkTintColor:(id)arg1;
- (void)_setEnableEdgeAntialiasingOnSelected:(bool)arg1;
- (void)_setFocusedColor:(id)arg1;
- (void)_setImage:(id)arg1;
- (void)_setTintColor:(id)arg1;
- (id)_tintColor;
- (void)_updateCornerRadius;
- (void)_updateImageView;
- (void)_updateTintColor;
- (id)backgroundColor;
- (id /* block */)completion;
- (long long)contentMode;
- (double)cornerRadius;
- (void)dealloc;
- (id)image;
- (bool)imageContainsCornerRadius;
- (id)imageProxy;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isImageLoaded;
- (void)layoutSubviews;
- (id)placeholderImage;
- (void)setBackgroundColor:(id)arg1;
- (void)setCompletion:(id /* block */)arg1;
- (void)setContentMode:(long long)arg1;
- (void)setCornerRadius:(double)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setImage:(id)arg1;
- (void)setImageContainsCornerRadius:(bool)arg1;
- (void)setImageLoaded:(bool)arg1;
- (void)setImageProxy:(id)arg1;
- (void)setImageProxy:(id)arg1 completion:(id /* block */)arg2;
- (void)setPlaceholderImage:(id)arg1;
- (void)setSelected:(bool)arg1 animated:(bool)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)willMoveToWindow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
