<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVMLUtilities.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/TVMLUtilities.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface TVMLUtilities : NSObject

+ (id)TVKitBundle;
+ (id)TVMLKitBundle;
+ (id)_bgImageElementForProductTemplate:(id)arg1;
+ (bool)_cornerRadiiFromElement:(id)arg1 cornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; }*)arg2 circle:(bool*)arg3;
+ (bool)_cornerRadiiFromImageLayout:(id)arg1 cornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; }*)arg2 circle:(bool*)arg3;
+ (bool)_cornerRadiiFromImgTreatmentValue:(id)arg1 width:(double)arg2 cornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; }*)arg3 circle:(bool*)arg4;
+ (bool)_cornerRadiiWithBorderRadius:(id)arg1 cornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; }*)arg2 imageWidth:(double)arg3 imageTreatmentValue:(id)arg4 circle:(bool*)arg5;
+ (id)_defaultPlaceholderImageForUserInterfaceStyle:(long long)arg1;
+ (id)_defaultPlaceholderImageForUserInterfaceStyle:(long long)arg1 withCornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg2 andSize:(struct CGSize { double x1; double x2; })arg3;
+ (double)_headerFadeForShowcaseFactor:(double)arg1;
+ (long long)_interfaceStyleForElement:(id)arg1;
+ (id)_mobileGestaltStringForKey:(struct __CFString { }*)arg1;
+ (long long)_overrideInterfaceStyleForElement:(id)arg1;
+ (id)_placeholderImageForValue:(id)arg1 userInterfaceStyle:(long long)arg2;
+ (id)_placeholderImageForValue:(id)arg1 userInterfaceStyle:(long long)arg2 withCornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg3 andScaledSize:(struct CGSize { double x1; double x2; })arg4;
+ (id)_placeholderImageForViewElement:(id)arg1;
+ (id)_placeholderImageForViewElement:(id)arg1 imageLayout:(id)arg2;
+ (id)_placeholderImageForViewElement:(id)arg1 withCornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg2 andScaledSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)_placeholderImageForViewElement:(id)arg1 withImageLayout:(id)arg2 cornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg3 andScaledSize:(struct CGSize { double x1; double x2; })arg4;
+ (bool)canHandleDecodingOnRenderThread;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })centerRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (long long)contentModeForPosition:(long long)arg1 defaultMode:(long long)arg2;
+ (bool)cornerRadiiFromElement:(id)arg1 cornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; }*)arg2 circle:(bool*)arg3;
+ (void)disassociateIKViewElementsRecursivelyFromView:(id)arg1;
+ (double)focusedSizeIncreaseForSize:(struct CGSize { double x1; double x2; })arg1 upscaleFactor:(double)arg2;
+ (double)focusedSizeIncreaseForSize:(struct CGSize { double x1; double x2; })arg1 upscaleFactor:(double)arg2 useInSearchPartial:(bool)arg3;
+ (id)fontFromStyle:(id)arg1;
+ (id)fontFromTextStyle:(id)arg1 fontWeight:(id)arg2 fontSize:(double)arg3 symbolicTraits:(unsigned int)arg4;
+ (void)getValuesFromTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 translation:(struct CGPoint { double x1; double x2; }*)arg2 rotation:(struct CGPoint { double x1; double x2; }*)arg3;
+ (id)imageWithRadialGradientOverlayFromImage:(id)arg1;
+ (id)indexPathForFirstItemAttributeValue:(id)arg1;
+ (long long)interfaceStyleForTemplateElement:(id)arg1;
+ (bool)isAXLargeEnabled:(id)arg1;
+ (bool)isAXSmallEnabled:(id)arg1;
+ (bool)isFlowcaseAtTopOfStackFromElement:(id)arg1;
+ (long long)overrideInterfaceStyleForTemplateElement:(id)arg1;
+ (id)placeholderImageForViewElement:(id)arg1;
+ (id)placeholderImageForViewElement:(id)arg1 withCornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg2 andScaledSize:(struct CGSize { double x1; double x2; })arg3;
+ (id)randomColor;
+ (id)rowSpacingMetricsForRowMetrics:(id)arg1;
+ (id)rowSpacingMetricsForRowMetrics:(id)arg1 forShowcase:(bool)arg2;
+ (long long)semanticAlignmentForAlignment:(long long)arg1 semanticContentAttribute:(long long)arg2;
+ (long long)semanticContentAttributeForTemplateElement:(id)arg1;
+ (long long)semanticPositionForPosition:(long long)arg1 semanticContentAttribute:(long long)arg2;
+ (struct CGPath { }*)shadowPathForViewElement:(id)arg1 withCornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg2 andScaledSize:(struct CGSize { double x1; double x2; })arg3;
+ (struct CGPath { }*)shadowPathWithCornerRadii:(struct TVCornerRadii { double x1; double x2; double x3; double x4; })arg1 andScaledSize:(struct CGSize { double x1; double x2; })arg2;
+ (double)uiFontWeightFromCSSFontWeight:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
