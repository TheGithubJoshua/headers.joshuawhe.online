<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_TVStackCommonTemplateController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVMLKit.framework/_TVStackCommonTemplateController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit (1)
 */

@interface _TVStackCommonTemplateController : _TVBgImageLoadingViewController <TVAppTemplateImpressionable, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout, UIGestureRecognizerDelegate, _TVCollectionViewDelegate> {
    IKAudioElement * _audioElement;
    IKViewElement * _backgroundElement;
    IKImageElement * _bannerImgElement;
    UIImage * _bgImage;
    IKImageElement * _bgImgElement;
    IKViewElement * _collectionListElement;
    _TVStackCollectionView * _collectionView;
    _TVFocusCaptureView * _disabledTemplateFocusCaptureView;
    UIViewController * _focusedSupplementaryViewController;
    IKImageElement * _heroImgElement;
    double  _impressionThreshold;
    UIView * _overlayView;
    NSArray * _supplementaryViewControllers;
    IKImageElement * _uberImgElement;
    IKViewElement * _viewElement;
}

@property (nonatomic, retain) IKAudioElement *audioElement;
@property (nonatomic, retain) IKViewElement *backgroundElement;
@property (nonatomic, retain) IKImageElement *bannerImgElement;
@property (nonatomic, retain) UIImage *bgImage;
@property (nonatomic, retain) IKImageElement *bgImgElement;
@property (nonatomic, retain) IKViewElement *collectionListElement;
@property (nonatomic, retain) _TVStackCollectionView *collectionView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIViewController *focusedSupplementaryViewController;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) IKImageElement *heroImgElement;
@property (nonatomic, readonly, retain) _TVStackWrappingView *stackWrappingView;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSArray *supplementaryViewControllers;
@property (nonatomic, retain) IKImageElement *uberImgElement;
@property (nonatomic, retain) IKViewElement *viewElement;

- (void).cxx_destruct;
- (id)_backgroundImageProxy;
- (struct CGSize { double x1; double x2; })_backgroundImageProxySize;
- (bool)_backgroundImageRequiresBlur;
- (long long)_blurEffectStyle;
- (void)_cancelImpressionsUpdate;
- (void)_configureWithBgImage:(id)arg1 backdropImage:(id)arg2;
- (void)_disableScrollingIfNecessary:(id)arg1;
- (void)_dispatchEvent:(id)arg1 forItemAtIndexPath:(id)arg2;
- (id)_flowLayout;
- (bool)_isBackdropNeeded;
- (id)_modalPresenterPresentedViewController;
- (id)_overlayView;
- (id)_preferredFocusedSupplementaryView;
- (void)_recordImpressionsForVisibleView;
- (long long)_supplementaryViewSectionIndex;
- (void)_updateBackgroundViews;
- (void)_updateImpressions;
- (bool)_updateSupplementaryViewControllersWithElements:(id)arg1 updateStyles:(bool)arg2;
- (void)_updateViewLayout;
- (void)_updateViewOverlay;
- (void)_updateViewSupplementaryViews;
- (id)_viewControllerWithElement:(id)arg1 existingController:(id)arg2;
- (id)audioElement;
- (bool)automaticallyAdjustsScrollViewInsets;
- (id)backgroundElement;
- (id)bannerImgElement;
- (id)bgImage;
- (id)bgImgElement;
- (id)collectionListElement;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionListMargin;
- (id)collectionView;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didEndDisplayingSupplementaryView:(id)arg2 forElementOfKind:(id)arg3 atIndexPath:(id)arg4;
- (void)collectionView:(id)arg1 didReceiveLongPressForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didReceivePhysicalPlayForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (bool)collectionView:(id)arg1 shouldHandleLongPressForItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 viewForSupplementaryElementOfKind:(id)arg2 atIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 willDisplaySupplementaryView:(id)arg2 forElementKind:(id)arg3 atIndexPath:(id)arg4;
- (void)dealloc;
- (void)didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (id)focusedSupplementaryViewController;
- (id)heroImgElement;
- (id)impressionableElementsContainedInDocument:(id)arg1;
- (void)loadView;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (id)preferredFocusEnvironments;
- (void)scrollToTop;
- (void)scrollViewDidScroll:(id)arg1;
- (void)setAudioElement:(id)arg1;
- (void)setBackgroundElement:(id)arg1;
- (void)setBannerImgElement:(id)arg1;
- (void)setBgImage:(id)arg1;
- (void)setBgImgElement:(id)arg1;
- (void)setCollectionListElement:(id)arg1;
- (void)setCollectionView:(id)arg1;
- (void)setFocusedSupplementaryViewController:(id)arg1;
- (void)setHeroImgElement:(id)arg1;
- (void)setSupplementaryViewControllers:(id)arg1;
- (void)setUberImgElement:(id)arg1;
- (void)setViewElement:(id)arg1;
- (id)stackWrappingView;
- (id)supplementaryViewControllers;
- (void)traitCollectionDidChange:(id)arg1;
- (id)uberImgElement;
- (void)updateBackdropMaskFactor;
- (void)updateBackgroundAndBackdrop;
- (void)updateWithViewElement:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (id)viewElement;
- (void)viewSafeAreaInsetsDidChange;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
