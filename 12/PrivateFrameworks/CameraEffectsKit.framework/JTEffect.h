<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>JTEffect.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraEffectsKit.framework/JTEffect.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraEffectsKit.framework/CameraEffectsKit (357.0.70)
 */

@interface JTEffect : NSObject <NSCopying, NSSecureCoding> {
    NSMutableDictionary * _dirtyEffectParameters;
    NSString * _effectID;
    NSMutableDictionary * _effectParameters;
    bool  _isNone;
    NSLock * _paramLock;
    PVEffect * _renderEffect;
    struct CGSize { 
        double width; 
        double height; 
    }  _renderSize;
    int  _type;
}

@property (nonatomic, readonly) NSString *effectID;
@property (nonatomic, copy) NSDictionary *effectParameters;
@property bool forceDisableLooping;
@property bool forceRenderAtPosterFrame;
@property (nonatomic, readonly) bool isNone;
@property (nonatomic) double outputAspect;
@property (nonatomic, readonly) bool renderEffectResourcesAreReady;
@property (nonatomic) struct CGSize { double x1; double x2; } renderSize;
@property (nonatomic, readonly) int type;

+ (bool)effectIDIsNone:(id)arg1;
+ (bool)loopedRangeRenderCanBeCached:(id)arg1;
+ (bool)posterFrameCannotBeCached:(id)arg1;
+ (double)rotationFromAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
+ (struct CGPoint { double x1; double x2; })scaleFromAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_affineTransformFromEffectRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toSize:(struct CGSize { double x1; double x2; })arg2 basisOrigin:(int)arg3;
- (id)_cachedRenderEffect;
- (void)_convertRenderEffectPoints:(struct CGPoint { double x1; double x2; }*)arg1 numPoints:(unsigned long long)arg2 fromBasisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 basisOrigin:(int)arg4;
- (void)_convertRenderEffectPoints:(struct CGPoint { double x1; double x2; }*)arg1 numPoints:(unsigned long long)arg2 toBasisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 basisOrigin:(int)arg4;
- (void)_convertRenderEffectPoints:(struct CGPoint { double x1; double x2; }*)arg1 toBasisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 basisOrigin:(int)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRenderEffectRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toBasisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 basisOrigin:(int)arg3;
- (void)_createCachedRenderEffect_noLock;
- (id)accessibilityName;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })applyTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 withComponentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 relativeTo:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 basisOrigin:(int)arg4;
- (bool)buildInAnimation;
- (bool)buildOutAnimation;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)displayName;
- (id)effectID;
- (id)effectParameters;
- (bool)enablePresentationState:(bool)arg1;
- (void)encodeWithCoder:(id)arg1;
- (bool)forceDisableLooping;
- (bool)forceRenderAtPosterFrame;
- (id)getParentTransformAnimation;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithEffectID:(id)arg1;
- (bool)isConfiguredForOutputAspect:(double)arg1;
- (bool)isConfiguredForOutputAspectMatchingSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)isEqual:(id)arg1;
- (bool)isInInteractiveMode;
- (bool)isNone;
- (bool)loadRenderEffect;
- (double)outputAspect;
- (id)parameterForKey:(id)arg1;
- (id)parametersClassWhitelist;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })rangeForPresentationRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)removeTopLevelAdditionalScale;
- (id)renderEffect;
- (bool)renderEffectResourcesAreReady;
- (struct CGSize { double x1; double x2; })renderSize;
- (id)serializableEffectParameters;
- (void)setBuildInAnimation:(bool)arg1;
- (void)setBuildOutAnimation:(bool)arg1;
- (void)setEffectParameters:(id)arg1;
- (void)setForceDisableLooping:(bool)arg1;
- (void)setForceRenderAtPosterFrame:(bool)arg1;
- (void)setIsInInteractiveMode:(bool)arg1;
- (void)setOutputAspect:(double)arg1;
- (void)setParameter:(id)arg1 forKey:(id)arg2;
- (void)setParentTransformAnimation:(id)arg1;
- (void)setRenderSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTopLevelAdditionalScale:(struct CGPoint { double x1; double x2; })arg1;
- (void)setTransform:(id)arg1 relativeTo:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 basisOrigin:(int)arg3;
- (void)setType:(int)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 basisOrigin:(int)arg2;
- (int)type;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
