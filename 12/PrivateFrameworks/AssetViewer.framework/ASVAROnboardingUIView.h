<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ASVAROnboardingUIView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssetViewer.framework/ASVAROnboardingUIView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer (1)
 */

@interface ASVAROnboardingUIView : UIView <ASVAROnboardingUIUpdateManagerDelegate> {
    int  _accelOverThresholdCount;
    float  _accelerationBaseline;
    bool  _accelerationBaselineCalculated;
    float  _accelerationThreshold;
    bool  _allowRotateAutoDismiss;
    unsigned long long  _animationState;
    UIView * _backgroundView;
    int  _currentAccelerationIndex;
    void _currentCameraTranslation;
    float  _currentCubeAngle;
    int  _currentPositionIndex;
    long long  _currentResetButtonOrientation;
    double  _currentStateTime;
    unsigned long long  _currentTrackingState;
    <ASVAROnboardingUIViewDelegate> * _delegate;
    <MTLDevice> * _device;
    bool  _enableHapticFeedback;
    UISelectionFeedbackGenerator * _feedbackGenerator;
    bool  _hasDisplayedPreviously;
    double  _inactiveTimeBeforeShowUI;
    void _initialCameraRotation;
    void _initialCameraTranslation;
    bool  _initialTransformSet;
    bool  _interceptARKitSensorData;
    bool  _isAnimating;
    bool  _isRelocalizing;
    double  _lastAccelOverThresholdTime;
    void _lastCameraRight;
    void _lastCameraTranslation;
    float  _lastOrientationRotation;
    double  _lastUpdateTime;
    CAMetalLayer * _metalLayer;
    double  _minimumAnimationTime;
    SensorInterceptor * _motionSensorInterceptor;
    UILabel * _moveDeviceText;
    UIView * _moveDeviceTextContainer;
    float  _moveDistanceThreshold;
    unsigned long long  _previousTrackingState;
    float  _recentAccelerationValues;
    /* Warning: Unrecognized filer type: ']' using 'void*' */ void* _recentPositions;
    UILabel * _relocalizeText;
    ASVGlyphRenderer * _renderer;
    ASVRoundedButton * _resetButton;
    NSLayoutConstraint * _resetButtonBottomLayoutConstraint;
    float  _resetButtonLandscapeVerticalOffset;
    float  _resetButtonPortraitVerticalOffset;
    void _rotationStartCameraRight;
    void _rotationStartCameraTranslation;
    ARSession * _session;
    bool  _showAllAnimationStatesBeforeHiding;
    bool  _showAnimatedUI;
    bool  _showResumeTextAfterFirstDisplay;
    double  _showUITime;
    double  _startShutdownTime;
    ASVUpdateManager * _updateManager;
}

@property (nonatomic) bool allowRotateAutoDismiss;
@property (nonatomic, readonly) unsigned long long animationState;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <ASVAROnboardingUIViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enableHapticFeedback;
@property (readonly) unsigned long long hash;
@property (nonatomic) double inactiveTimeBeforeShowUI;
@property (nonatomic) bool interceptARKitSensorData;
@property (nonatomic, readonly) bool isAnimating;
@property (nonatomic) double minimumAnimationTime;
@property (nonatomic) float moveDistanceThreshold;
@property (nonatomic) float resetButtonLandscapeVerticalOffset;
@property (nonatomic) float resetButtonPortraitVerticalOffset;
@property (nonatomic) ARSession *session;
@property (nonatomic) bool showAllAnimationStatesBeforeHiding;
@property (nonatomic) bool showAnimatedUI;
@property (nonatomic) bool showResumeTextAfterFirstDisplay;
@property (nonatomic) unsigned long long state;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (bool)_hasHomeButton;
- (void)activate;
- (bool)allowRotateAutoDismiss;
- (unsigned long long)animationState;
- (void)buttonPress:(id)arg1;
- (float)calculateAverageAcceleration;
- (void)calculateAveragePosition;
- (void)clampToNearestQuarterRotation;
- (void)cleanupAnimatedUI;
- (void)createConstraintsForCurrentDeviceOrientation;
- (void)dealloc;
- (id)delegate;
- (void)drawInDrawable:(id)arg1 withCommandBuffer:(id)arg2 timeDelta:(double)arg3;
- (bool)enableHapticFeedback;
- (void)hide;
- (void)hideAll:(double)arg1;
- (void)hideBackground:(double)arg1;
- (void)hideOnboardingUI;
- (void)hideOrientationUI:(double)arg1;
- (void)hideResetButton:(double)arg1;
- (double)inactiveTimeBeforeShowUI;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)interceptARKitSensorData;
- (void)interceptSensorDelegates;
- (bool)isAnimating;
- (bool)isRelocalizing;
- (bool)isShowingBackground;
- (bool)isShowingMoveDeviceUI;
- (bool)isShowingRelocalizeUI;
- (void)layoutSubviews;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })lookAtcenterup;
- (double)minimumAnimationTime;
- (float)moveDistanceThreshold;
- (void)orientationChanged;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })ortho2d:(float)arg1 right:(float)arg2 bottom:(float)arg3 top:(float)arg4 near:(float)arg5 far:(float)arg6;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })perspective_fov:(float)arg1 aspect:(float)arg2 near:(float)arg3 far:(float)arg4;
- (void)populateRecentPositions;
- (void)prepare;
- (void)prepareAnimatedUI;
- (void)prepareOnboardingUI;
- (float)radians:(float)arg1;
- (void)relocalize;
- (void)resetAccelerationBaseline;
- (float)resetButtonLandscapeVerticalOffset;
- (float)resetButtonPortraitVerticalOffset;
- (void)resizeForDrawable:(id)arg1;
- (void)restoreSensorDelegates;
- (id)session;
- (void)setAllowRotateAutoDismiss:(bool)arg1;
- (void)setAnimationState:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnableHapticFeedback:(bool)arg1;
- (void)setInactiveTimeBeforeShowUI:(double)arg1;
- (void)setInterceptARKitSensorData:(bool)arg1;
- (void)setMinimumAnimationTime:(double)arg1;
- (void)setMoveDistanceThreshold:(float)arg1;
- (void)setResetButtonLandscapeVerticalOffset:(float)arg1;
- (void)setResetButtonPortraitVerticalOffset:(float)arg1;
- (void)setSession:(id)arg1;
- (void)setShowAllAnimationStatesBeforeHiding:(bool)arg1;
- (void)setShowAnimatedUI:(bool)arg1;
- (void)setShowResumeTextAfterFirstDisplay:(bool)arg1;
- (void)setState:(unsigned long long)arg1;
- (bool)showAllAnimationStatesBeforeHiding;
- (bool)showAnimatedUI;
- (void)showBackground:(double)arg1;
- (void)showMoveDeviceUI:(double)arg1;
- (void)showRelocalizeUI:(double)arg1;
- (bool)showResumeTextAfterFirstDisplay;
- (void)shutdown;
- (void)shutdownRenderer;
- (void)startupRenderer;
- (unsigned long long)state;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)update:(double)arg1;
- (void)updateConstraints;
- (void)updateForCurrentTime:(double)arg1 timeDelta:(double)arg2;
- (void)updateMetalLayer;
- (void)updateMoveDeviceText:(id)arg1 fadeText:(bool)arg2;
- (void)updateMoveText:(bool)arg1;
- (void)updatePositionData:(id)arg1 currentTime:(double)arg2;
- (void)updateResetButtonWithFadeIn:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
