<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ASVGlyphRenderer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssetViewer.framework/ASVGlyphRenderer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssetViewer.framework/AssetViewer (1)
 */

@interface ASVGlyphRenderer : NSObject <ASVGlyphStateDelegate> {
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _MVP;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _R;
    float  _a_vel;
    ASVStateSpring * _alphaSpring;
    struct { 
        double angle; 
        /* Warning: Unrecognized filer type: '}' using 'void*' */ void*axis; 
    }  _angularVelocity;
    <MTLComputePipelineState> * _computePipelineState;
    ASVStateSpring * _cubeResolveSpring;
    <MTLLibrary> * _defaultLibrary;
    <MTLDevice> * _device;
    ASVDeviceController * _deviceController;
    bool  _dirty_tesselation_factors;
    ASVDotsRenderer * _dotsRenderer;
    float  _edgeFactor;
    float  _insideFactor;
    struct CGSize { 
        double width; 
        double height; 
    }  _lastDrawableSize;
    CALayer * _layer;
    <MTLTexture> * _msaaTex;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _mvp_ortho;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _mvp_persp;
    ASVBasicSpring * _orientationSpring;
    unsigned long long  _pixelFormat;
    ASVStateSpring * _planeResolveSpring;
    <MTLRenderPipelineState> * _postTessellationPipelineState;
    struct { 
        /* Warning: Unrecognized filer type: '}' using 'void*' */ void*vector; 
    }  _rotation;
    float  _rotationAngleY;
    ASVQuaternionSpring * _rotationSpring;
    int  _sampleCount;
    ASVSpringDouble3 * _scaleSpring;
    ASVMetalSplineData * _splineData;
    ASVGlyphState * _state;
    float  _strokeWeight;
    ASVAnimTime * _time;
    ASVSpringDouble3 * _translationSpring;
}

@property (nonatomic) float a_vel;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) float rotationAngleY;
@property (nonatomic, readonly) ASVGlyphState *state;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (float)a_vel;
- (void)computeRotation:(double)arg1;
- (void)computeTesselationFactorsForCommandBuffer:(id)arg1;
- (void)drawWithTimeDelta:(double)arg1 drawable:(id)arg2 commandBuffer:(id)arg3;
- (void)generateTexturesWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithLayer:(id)arg1 device:(id)arg2 pixelFormat:(unsigned long long)arg3 sampleCount:(int)arg4 deviceMaskImage:(id)arg5;
- (void)quaternionTargetChanged;
- (void)renderPostTessellationInDrawable:(id)arg1 withCommandBuffer:(id)arg2;
- (void)resetData;
- (void)resizeIfNeeded:(id)arg1;
- (float)rotationAngleY;
- (void)scaleTargetChanged;
- (void)setA_vel:(float)arg1;
- (void)setOrientationAngle:(float)arg1;
- (void)setRotationAngleY:(float)arg1;
- (void)snapStateChanged;
- (id)state;
- (void)stepSprings:(double)arg1;
- (void)translationTargetChanged;
- (void)updateAngularVelocity;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
