<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVRControlView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVRemoteUI.framework/TVRControlView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI (1)
 */

@interface TVRControlView : UIView <TVRCDeviceDelegate, TVRCDeviceQueryDelegate, TVRCKeyboardControllerDelegate, _TVRAlertControllerDelegate, _TVRCWifiMonitorProtocol, _TVRControlViewInternalDelegate> {
    NSArray * _allDevices;
    TVRCDevice * _attemptedConnectionDevice;
    _TVRAlertController * _authenticationAlertController;
    TVRCDevice * _authenticationChallengeDevice;
    bool  _authenticationRequested;
    TVRCDevice * _connectedDevice;
    double  _continuousCornerRadius;
    _TVRControlView_Internal * _controlView;
    TVRCDeviceAuthenticationChallenge * _currentAuthenticationChallenge;
    TVRCDeviceQuery * _deviceQuery;
    bool  _expanded;
    bool  _isInEditingSession;
    _TVRKeyboardHaptic * _keyboardHaptic;
    _TVRAlertController * _keyboardViewController;
    UIViewController * _presentingViewController;
    SFClient * _sharingClient;
    bool  _showingPicker;
    TVRCDevice * _singleConnectionDevice;
    _TVRSiriHaptic * _siriHaptic;
    _TVRTransitioningDelegate * _transitioningDelegate;
    bool  _wifiNetworkConnected;
}

@property (nonatomic, retain) NSArray *allDevices;
@property (nonatomic, retain) TVRCDevice *attemptedConnectionDevice;
@property (nonatomic) _TVRAlertController *authenticationAlertController;
@property (nonatomic, retain) TVRCDevice *authenticationChallengeDevice;
@property (nonatomic) bool authenticationRequested;
@property (nonatomic, retain) TVRCDevice *connectedDevice;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInsets;
@property (getter=_continuousCornerRadius, setter=_setContinuousCornerRadius:, nonatomic) double continuousCornerRadius;
@property (nonatomic, retain) _TVRControlView_Internal *controlView;
@property (nonatomic, retain) TVRCDeviceAuthenticationChallenge *currentAuthenticationChallenge;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) TVRCDeviceQuery *deviceQuery;
@property (nonatomic) bool expanded;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isInEditingSession;
@property (nonatomic, retain) _TVRKeyboardHaptic *keyboardHaptic;
@property (nonatomic) _TVRAlertController *keyboardViewController;
@property (getter=_presentingViewController, setter=_setPresentingViewController:, nonatomic) UIViewController *presentingViewController;
@property (nonatomic, retain) SFClient *sharingClient;
@property (nonatomic) bool showingPicker;
@property (nonatomic, retain) TVRCDevice *singleConnectionDevice;
@property (nonatomic, retain) _TVRSiriHaptic *siriHaptic;
@property (readonly) Class superclass;
@property (nonatomic, retain) _TVRTransitioningDelegate *transitioningDelegate;
@property (nonatomic) bool wifiNetworkConnected;

- (void).cxx_destruct;
- (void)_cancelPairing;
- (void)_cancelPickerExpansion;
- (void)_connectToPreferredDeviceIfAvailable;
- (double)_continuousCornerRadius;
- (id)_defaultDropDownText;
- (void)_dismissAnyPresentedContentAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)_expandDevicePickerIfNeeded;
- (id)_getSiriButtonFromSupportedButtons;
- (bool)_hasPresentedContent;
- (void)_hideMessageContent;
- (void)_performSideEffectsWithButtonEvent:(id)arg1;
- (void)_presentAlertWithTitle:(id)arg1 message:(id)arg2;
- (void)_presentKeyboard;
- (void)_presentPairingAlert;
- (id)_presentingViewController;
- (id)_rootViewController;
- (void)_setContinuousCornerRadius:(double)arg1;
- (void)_setPresentingViewController:(id)arg1;
- (void)_showConnectingSpinner;
- (void)_showSearchingSpinnerIfNeeded;
- (void)alertController:(id)arg1 enteredText:(id)arg2;
- (void)alertController:(id)arg1 generatedTextInputPayload:(id)arg2;
- (void)alertControllerCancelled:(id)arg1;
- (void)alertControllerHitKeyboardReturnKey:(id)arg1;
- (void)alertControllerPressedDictationButton:(id)arg1;
- (void)alertControllerReleasedDictationButton:(id)arg1;
- (id)allDevices;
- (id)attemptedConnectionDevice;
- (id)authenticationAlertController;
- (id)authenticationChallengeDevice;
- (bool)authenticationRequested;
- (id)connectedDevice;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsets;
- (id)controlView;
- (void)controlView:(id)arg1 generatedButtonEvent:(id)arg2;
- (void)controlView:(id)arg1 generatedGameControllerEvent:(id)arg2;
- (void)controlView:(id)arg1 generatedTouchEvent:(id)arg2;
- (void)controlView:(id)arg1 selectedDeviceFromPicker:(id)arg2;
- (void)controlViewRequestsKeyboardPresentation:(id)arg1;
- (id)currentAuthenticationChallenge;
- (void)dealloc;
- (void)device:(id)arg1 disconnectedForReason:(long long)arg2 error:(id)arg3;
- (void)device:(id)arg1 encounteredAuthenticationChallenge:(id)arg2;
- (void)device:(id)arg1 removedSupportedButtons:(id)arg2 added:(id)arg3;
- (void)deviceBeganConnecting:(id)arg1;
- (void)deviceConnected:(id)arg1;
- (void)deviceNameChanged:(id)arg1;
- (id)deviceQuery;
- (void)deviceQueryDidUpdateDevices:(id)arg1;
- (void)didMoveToWindow;
- (bool)expanded;
- (id)initWithCoder:(id)arg1;
- (id)initWithDeviceIdentifier:(id)arg1;
- (id)initWithDeviceIdentifier:(id)arg1 shouldShowPicker:(bool)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isInEditingSession;
- (void)keyboardController:(id)arg1 beganTextEditingWithAttributes:(id)arg2;
- (void)keyboardController:(id)arg1 didUpdateAttributes:(id)arg2;
- (void)keyboardController:(id)arg1 didUpdateText:(id)arg2;
- (void)keyboardControllerEndedTextEditing:(id)arg1;
- (id)keyboardHaptic;
- (id)keyboardViewController;
- (void)layoutSubviews;
- (void)setAllDevices:(id)arg1;
- (void)setAttemptedConnectionDevice:(id)arg1;
- (void)setAuthenticationAlertController:(id)arg1;
- (void)setAuthenticationChallengeDevice:(id)arg1;
- (void)setAuthenticationRequested:(bool)arg1;
- (void)setConnectedDevice:(id)arg1;
- (void)setContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setControlView:(id)arg1;
- (void)setCurrentAuthenticationChallenge:(id)arg1;
- (void)setDeviceQuery:(id)arg1;
- (void)setExpanded:(bool)arg1;
- (void)setIsInEditingSession:(bool)arg1;
- (void)setKeyboardHaptic:(id)arg1;
- (void)setKeyboardViewController:(id)arg1;
- (void)setSharingClient:(id)arg1;
- (void)setShowingPicker:(bool)arg1;
- (void)setSingleConnectionDevice:(id)arg1;
- (void)setSiriHaptic:(id)arg1;
- (void)setTransitioningDelegate:(id)arg1;
- (void)setWifiNetworkConnected:(bool)arg1;
- (id)sharingClient;
- (bool)showingPicker;
- (id)singleConnectionDevice;
- (id)siriHaptic;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)transitioningDelegate;
- (void)wifiMonitor:(id)arg1 updatedNetworkStateWithOldState:(long long)arg2 andNewState:(long long)arg3;
- (bool)wifiNetworkConnected;
- (void)willMoveToWindow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
