<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_TVRControlView_Internal.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVRemoteUI.framework/_TVRControlView_Internal.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVRemoteUI.framework/TVRemoteUI (1)
 */

@interface _TVRControlView_Internal : UIView <TVRTouchProcessorDelegate, _TVRButtonsViewDelegate, _TVRDropDownViewDelegate> {
    _TVRButtonsView * _buttonsView;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsets;
    double  _continuousCornerRadius;
    <_TVRControlViewInternalDelegate> * _delegate;
    _TVRDropDownView * _dropdownView;
    _TVRMessageView * _messageView;
    UIView * _psuedoTouchpadView;
    TVRTouchProcessor * _touchProcessor;
    UIView * _touchpadClippingView;
    TVRTouchpadView * _touchpadView;
}

@property (nonatomic, retain) _TVRButtonsView *buttonsView;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInsets;
@property (nonatomic) double continuousCornerRadius;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_TVRControlViewInternalDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) _TVRDropDownView *dropdownView;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long messageType;
@property (nonatomic, retain) _TVRMessageView *messageView;
@property (nonatomic, retain) UIView *psuedoTouchpadView;
@property (readonly) Class superclass;
@property (nonatomic, retain) TVRTouchProcessor *touchProcessor;
@property (nonatomic, retain) UIView *touchpadClippingView;
@property (nonatomic) TVRTouchpadView *touchpadView;

- (void).cxx_destruct;
- (void)_applyCornerRadius:(double)arg1;
- (id)buttonsView;
- (void)buttonsView:(id)arg1 generatedbuttonEvent:(id)arg2;
- (void)buttonsViewRequestedKeyboardPresentation:(id)arg1;
- (void)clearMessageContent;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsets;
- (double)continuousCornerRadius;
- (id)delegate;
- (void)didChangeToExpanded:(bool)arg1;
- (void)disableAllButtons;
- (void)disableButtonsAndSetTitle:(id)arg1;
- (id)dropdownView;
- (void)dropdownView:(id)arg1 selectedDevice:(id)arg2;
- (void)dropdownView:(id)arg1 willUpdateState:(bool)arg2;
- (void)enableButtons:(id)arg1;
- (void)expandPicker:(bool)arg1;
- (void)hidePicker:(bool)arg1;
- (id)init;
- (void)layoutSubviews;
- (unsigned long long)messageType;
- (id)messageView;
- (id)psuedoTouchpadView;
- (void)setButtonsView:(id)arg1;
- (void)setContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContinuousCornerRadius:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDevices:(id)arg1;
- (void)setDropdownView:(id)arg1;
- (void)setMessageView:(id)arg1;
- (void)setPsuedoTouchpadView:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTouchProcessor:(id)arg1;
- (void)setTouchpadClippingView:(id)arg1;
- (void)setTouchpadView:(id)arg1;
- (void)showKeyboardButton:(bool)arg1;
- (void)showLoadingSpinner;
- (void)showMessageWithError:(id)arg1 andDevice:(id)arg2;
- (void)showMessageWithTitle:(id)arg1 message:(id)arg2;
- (void)showNoAssociatedNetworkMessage;
- (void)showNoWIFIConnectionMessage;
- (void)showSearchingSpinner;
- (void)supportedButtonsAdded:(id)arg1 removed:(id)arg2;
- (id)touchProcessor;
- (void)touchProcessor:(id)arg1 generatedButtonEvent:(id)arg2;
- (void)touchProcessor:(id)arg1 generatedGameControllerEvent:(id)arg2;
- (void)touchProcessor:(id)arg1 generatedTouchEvent:(id)arg2;
- (id)touchpadClippingView;
- (id)touchpadView;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
