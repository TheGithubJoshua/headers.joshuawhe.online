<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SGPipelineEntity.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreSuggestionsInternals.framework/SGPipelineEntity.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreSuggestionsInternals.framework/CoreSuggestionsInternals (680.125)
 */

@interface SGPipelineEntity : SGEntity {
    NSArray * _authorMatchingContacts;
    NSSet * _authorMatchingContactsKeys;
    bool  _contactInformationExtracted;
    NSData * _contentHash;
    struct __DDResult { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __DDQueryRange { struct __DDQueryOffset { unsigned int x_1_2_1 : 32; unsigned int x_1_2_2 : 32; } x_2_1_1; struct __DDQueryOffset { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 32; } x_2_1_2; } x2; struct { long long x_3_1_1; long long x_3_1_2; } x3; long long x4; struct __CFArray {} *x5; struct __CFString {} *x6; struct __CFString {} *x7; void *x8; struct __CFDictionary {} *x9; long long x10; unsigned char x11; float x12; } * _dataDetectorsSignature;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _dissectorLock;
    NSMutableDictionary * _emailToCanonicalEmailCache;
    NSMutableArray * _enrichments;
    NSMutableArray * _externalEnrichments;
    bool  _fullDownloadRequested;
    unsigned long long * _htmlOffsets;
    struct { 
        struct { 
            unsigned short bom; 
            unsigned short tag; 
        } _featureType; 
        bool hasInhumanHeaders; 
        bool inhumanEmailAddress; 
        bool inhumanAuthorName; 
        bool inhumanBody; 
        bool isTemplate; 
    }  _inhumanFeatures;
    NSArray * _instantMessageAddresses;
    NSArray * _invalidatedMessageIdentifiers;
    SGMessage * _message;
    bool  _pendingGeocode;
    NSString * _plainTextContentCache;
    bool  _plainTextContentCacheGenerated;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _plainTextContentCacheLock;
    NSArray * _plainTextDetectedData;
    NSArray * _plainTextLines;
    NSIndexSet * _plainTextQuotedRegions;
    NSIndexSet * _plainTextSigHtmlBlockRegions;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _plainTextSigRange;
    NSIndexSet * _plainTextTabularRegions;
}

@property (nonatomic, readonly) NSArray *addresses;
@property (nonatomic, readonly) NSString *authorEmail;
@property (nonatomic, retain) NSArray *authorMatchingContacts;
@property (nonatomic, retain) NSSet *authorMatchingContactsKeys;
@property (nonatomic) bool contactInformationExtracted;
@property (nonatomic, retain) NSData *contentHash;
@property (nonatomic) struct __DDResult { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __DDQueryRange { struct __DDQueryOffset { unsigned int x_1_2_1 : 32; unsigned int x_1_2_2 : 32; } x_2_1_1; struct __DDQueryOffset { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 32; } x_2_1_2; } x2; struct { long long x_3_1_1; long long x_3_1_2; } x3; long long x4; struct __CFArray {} *x5; struct __CFString {} *x6; struct __CFString {} *x7; void *x8; struct __CFDictionary {} *x9; long long x10; unsigned char x11; float x12; }*dataDetectorsSignature;
@property (nonatomic, readonly) NSArray *emailAddresses;
@property (nonatomic, readonly) NSMutableDictionary *emailToCanonicalEmailCache;
@property (nonatomic, retain) NSArray *enrichments;
@property (nonatomic, retain) NSArray *externalEnrichments;
@property (getter=hasFullDownloadBeenRequested, readonly) bool fullDownloadRequested;
@property (nonatomic, readonly) unsigned long long*htmlOffsets;
@property (nonatomic, readonly) struct { struct { unsigned short x_1_1_1; unsigned short x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; }*inhumanFeatures;
@property (nonatomic, readonly) NSArray *instantMessageAddresses;
@property (retain) NSArray *invalidatedMessageIdentifiers;
@property (nonatomic, readonly) SGMessage *message;
@property (nonatomic) bool pendingGeocode;
@property (nonatomic, readonly) NSArray *phoneNumbers;
@property (nonatomic, readonly) NSString *plainTextContent;
@property (nonatomic, retain) NSArray *plainTextDetectedData;
@property (nonatomic, readonly) NSArray *plainTextLines;
@property (nonatomic, retain) NSIndexSet *plainTextQuotedRegions;
@property (nonatomic, retain) NSIndexSet *plainTextSigHtmlBlockRegions;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } plainTextSigRange;
@property (nonatomic, retain) NSIndexSet *plainTextTabularRegions;

+ (id)address:(id)arg1 forIdentity:(id)arg2 parent:(id)arg3 curated:(bool)arg4 context:(id)arg5 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 extractionType:(unsigned long long)arg7;
+ (id)emailAddress:(id)arg1 forIdentity:(id)arg2 parent:(id)arg3 curated:(bool)arg4 context:(id)arg5 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 extractionType:(unsigned long long)arg7;
+ (id)fromCloudKitRecord:(id)arg1 parentEntity:(id)arg2;
+ (id)instantMessageAddress:(id)arg1 forIdentity:(id)arg2 parent:(id)arg3 curated:(bool)arg4 context:(id)arg5 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 extractionType:(unsigned long long)arg7;
+ (id)phoneNumber:(id)arg1 forIdentity:(id)arg2 parent:(id)arg3 curated:(bool)arg4 context:(id)arg5 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 extractionType:(unsigned long long)arg7;
+ (id)socialProfile:(id)arg1 forIdentity:(id)arg2 parent:(id)arg3 curated:(bool)arg4 context:(id)arg5 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 extractionType:(unsigned long long)arg7;

- (void).cxx_destruct;
- (void)acquireDissectorLock;
- (void)addCuratedEmailAddress:(id)arg1;
- (void)addCuratedPhoneNumber:(id)arg1;
- (void)addCuratedPostalAddress:(id)arg1;
- (void)addDetectedEmailAddress:(id)arg1 forIdentity:(id)arg2 context:(id)arg3 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 extractionType:(unsigned long long)arg5;
- (void)addDetectedInstantMessageAddress:(id)arg1 forIdentity:(id)arg2 context:(id)arg3 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 extractionType:(unsigned long long)arg5;
- (void)addDetectedPhoneNumber:(id)arg1 forIdentity:(id)arg2 context:(id)arg3 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 extractionType:(unsigned long long)arg5;
- (void)addDetectedPostalAddress:(id)arg1 forIdentity:(id)arg2 context:(id)arg3 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 extractionType:(unsigned long long)arg5;
- (void)addDetectedSocialProfile:(id)arg1 forIdentity:(id)arg2 context:(id)arg3 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 extractionType:(unsigned long long)arg5;
- (void)addDetection:(id)arg1 forIdentity:(id)arg2 extractionType:(unsigned long long)arg3;
- (void)addEmailAddressEnrichment:(id)arg1;
- (void)addEnrichment:(id)arg1;
- (void)addExternalEnrichment:(id)arg1;
- (void)addInstantMessageAddressEnrichment:(id)arg1;
- (void)addSocialProfileEnrichment:(id)arg1;
- (void)addUnrecognizedLookupEmailAddress:(id)arg1;
- (void)addUnrecognizedLookupPhoneNumber:(id)arg1;
- (id)addresses;
- (id)authorEmail;
- (id)authorMatchingContacts;
- (id)authorMatchingContactsKeys;
- (void)chopOffContentAfterIndex:(unsigned long long)arg1;
- (void)chopOffContentBeforeIndex:(unsigned long long)arg1;
- (id)contactDetailsWithType:(unsigned long long)arg1;
- (bool)contactInformationExtracted;
- (id)contentHash;
- (struct __DDResult { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __DDQueryRange { struct __DDQueryOffset { unsigned int x_1_2_1 : 32; unsigned int x_1_2_2 : 32; } x_2_1_1; struct __DDQueryOffset { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 32; } x_2_1_2; } x2; struct { long long x_3_1_1; long long x_3_1_2; } x3; long long x4; struct __CFArray {} *x5; struct __CFString {} *x6; struct __CFString {} *x7; void *x8; struct __CFDictionary {} *x9; long long x10; unsigned char x11; float x12; }*)dataDetectorsSignature;
- (void)dealloc;
- (id)emailAddresses;
- (id)emailToCanonicalEmailCache;
- (id)enrichments;
- (void)enumeratePeople:(id /* block */)arg1;
- (void)enumeratePlainTextLines:(id /* block */)arg1;
- (unsigned long long)eventEnrichmentsCount;
- (id)externalEnrichments;
- (bool)hasEventEnrichment;
- (bool)hasFullDownloadBeenRequested;
- (unsigned long long*)htmlOffsets;
- (struct { struct { unsigned short x_1_1_1; unsigned short x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; bool x6; }*)inhumanFeatures;
- (id)initWithContactDetailWithKey:(id)arg1 type:(unsigned long long)arg2 extractionType:(unsigned long long)arg3 curated:(bool)arg4 parent:(id)arg5 value:(id)arg6 context:(id)arg7 contextRangeOfInterest:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg8;
- (id)initWithDuplicateKey:(id)arg1 title:(id)arg2 parent:(id)arg3;
- (id)initWithEmailMessage:(id)arg1 fromSource:(id)arg2;
- (id)initWithIntentPersonAtDate:(id)arg1 bundleId:(id)arg2 handle:(id)arg3 displayName:(id)arg4;
- (id)initWithMessage:(id)arg1 fromSource:(id)arg2;
- (id)initWithPseudoContactWithKey:(id)arg1 parent:(id)arg2 name:(id)arg3;
- (id)initWithTextMessage:(id)arg1 fromSource:(id)arg2;
- (id)initWithUnrecognizedContactWithKey:(id)arg1;
- (id)instantMessageAddresses;
- (id)invalidatedMessageIdentifiers;
- (bool)isEvent;
- (bool)isPerson;
- (id)message;
- (bool)pendingGeocode;
- (id)phoneNumbers;
- (id)plainTextContent;
- (id)plainTextDetectedData;
- (id)plainTextLines;
- (id)plainTextQuotedRegions;
- (id)plainTextSigHtmlBlockRegions;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })plainTextSigRange;
- (id)plainTextTabularRegions;
- (void)releaseDissectorLock;
- (void)requestFullDownload;
- (void)runWithDissectorLock:(id /* block */)arg1;
- (void)setAuthor:(id)arg1;
- (void)setAuthorMatchingContacts:(id)arg1;
- (void)setAuthorMatchingContactsKeys:(id)arg1;
- (void)setContactInformationExtracted:(bool)arg1;
- (void)setContentHash:(id)arg1;
- (void)setCreationTimestamp:(struct SGUnixTimestamp_ { double x1; })arg1;
- (void)setDataDetectorsSignature:(struct __DDResult { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __DDQueryRange { struct __DDQueryOffset { unsigned int x_1_2_1 : 32; unsigned int x_1_2_2 : 32; } x_2_1_1; struct __DDQueryOffset { unsigned int x_2_2_1 : 32; unsigned int x_2_2_2 : 32; } x_2_1_2; } x2; struct { long long x_3_1_1; long long x_3_1_2; } x3; long long x4; struct __CFArray {} *x5; struct __CFString {} *x6; struct __CFString {} *x7; void *x8; struct __CFDictionary {} *x9; long long x10; unsigned char x11; float x12; }*)arg1;
- (void)setEnrichments:(id)arg1;
- (void)setExternalEnrichments:(id)arg1;
- (void)setInvalidatedMessageIdentifiers:(id)arg1;
- (void)setLastModifiedTimestamp:(struct SGUnixTimestamp_ { double x1; })arg1;
- (void)setPendingGeocode:(bool)arg1;
- (void)setPlainTextDetectedData:(id)arg1;
- (void)setPlainTextLines:(id)arg1;
- (void)setPlainTextLines:(id)arg1 utf8Offsets:(id)arg2 isAscii:(bool)arg3;
- (void)setPlainTextQuotedRegions:(id)arg1;
- (void)setPlainTextSigHtmlBlockRegions:(id)arg1;
- (void)setPlainTextSigRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setPlainTextTabularRegions:(id)arg1;
- (void)stripContactInformation;
- (void)stripEventInformation;
- (id)toCloudKitRecordWithId:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
