<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SGSuggestHistory.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreSuggestionsInternals.framework/SGSuggestHistory.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreSuggestionsInternals.framework/CoreSuggestionsInternals (680.125)
 */

@interface SGSuggestHistory : NSObject {
    NSUbiquitousKeyValueStore * _backingKVStore;
    SGNoCloudNSUbiquitousKeyValueStore * _noCloudFakeBackingKVStore;
    struct SGHistorySharedData { id x1; id x2; id x3; id x4; id x5; id x6; id x7; id x8; } * _privateShared;
    struct SGMutexSynchronizedObject<SGHistorySharedData> { struct SGHistorySharedData {} *x1; struct _opaque_pthread_mutex_t { long long x_2_1_1; BOOL x_2_1_2[56]; } x2; } * _shared;
}

@property (nonatomic, readonly) NSUbiquitousKeyValueStore *kvs;

+ (id)newTestingInstanceWithSharedKVS:(id)arg1;
+ (void)reset;
+ (void)resetNoFlush;
+ (id)sharedSuggestHistory;

- (void).cxx_destruct;
- (bool)_anyHash:(id)arg1 inSet:(id)arg2;
- (id)_hashesForConfirmedField:(id)arg1 value:(id)arg2 storageEvent:(id)arg3;
- (void)_setHashes:(id)arg1 forKey:(id)arg2;
- (void)_tellObserversHashesDidChange;
- (void)addObserver:(id)arg1;
- (void)confirmEvent:(id)arg1;
- (void)confirmEventFromExternalDevice:(id)arg1;
- (void)confirmFieldValues:(id)arg1 forStorageEvent:(id)arg2;
- (id)confirmHashesForOpaqueKey:(id)arg1 withCreationTime:(struct SGUnixTimestamp_ { double x1; })arg2;
- (void)confirmOrRejectContact:(id)arg1;
- (void)confirmOrRejectCuratedDetail:(id)arg1 forContact:(id)arg2;
- (void)confirmOrRejectDetail:(id)arg1 forContact:(id)arg2;
- (void)confirmOrRejectDetailHashes:(id)arg1;
- (void)confirmOrRejectRecordForContact:(id)arg1;
- (void)confirmRealtimeContact:(id)arg1;
- (void)confirmStorageEvent:(id)arg1;
- (void)dealloc;
- (id)description;
- (void)handleSyncedDataChanged:(id)arg1;
- (bool)hasConfirmedField:(id)arg1 value:(id)arg2 forStorageEvent:(id)arg3;
- (bool)hasContact:(id)arg1;
- (bool)hasContactDetail:(id)arg1 forContact:(id)arg2;
- (bool)hasStorageContact:(id)arg1;
- (id)hashesForContact:(id)arg1;
- (id)hashesForContactDetail:(id)arg1 fromContact:(id)arg2;
- (id)hashesForCuratedContactDetail:(id)arg1 fromContact:(id)arg2;
- (id)hashesForOpaqueKey:(id)arg1;
- (id)hashesForPseudoEventByKey:(id)arg1;
- (id)hashesForStorageContact:(id)arg1;
- (id)identityBasedHashesForPseudoEvent:(id)arg1 withCreationTime:(struct SGUnixTimestamp_ { double x1; })arg2;
- (id)identitySalt;
- (id)init;
- (id)initWithKVS:(id)arg1;
- (bool)isConfirmedEvent:(id)arg1;
- (bool)isConfirmedEvent:(id)arg1 withScopeLock:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg2;
- (bool)isRejectedEvent:(id)arg1;
- (bool)isRejectedEvent:(id)arg1 withScopeLock:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg2;
- (bool)isUpdatableContact:(id)arg1;
- (bool)isValidNewEvent:(id)arg1;
- (bool)isValidSuggestion:(id)arg1;
- (id)keysForContact:(id)arg1;
- (id)keysForContactDetail:(id)arg1 ofContact:(id)arg2;
- (id)keysForCuratedContactDetail:(id)arg1 ofContact:(id)arg2;
- (id)keysForStorageContact:(id)arg1;
- (id)kvs;
- (id)loadResetInfo;
- (id)mutableSetForKey:(id)arg1;
- (void)pushAll:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)pushConfirmedEventFields:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)pushConfirmedEvents:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)pushContacts:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)pushDontUpdate:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)pushEmptyHashesForTestingKey:(id)arg1;
- (void)pushRejectedEvents:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)pushResetInfo:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)pushStorageDetails:(const struct SGMutexSynchronizedPtr<SGHistorySharedData> { struct SGMutexSynchronizedObject<SGHistorySharedData> {} *x1; }*)arg1;
- (void)rejectEvent:(id)arg1;
- (void)rejectEventFromExternalDevice:(id)arg1;
- (id)rejectHashesForOpaqueKey:(id)arg1;
- (void)rejectRealtimeContact:(id)arg1;
- (void)rejectStorageEvent:(id)arg1;
- (void)reset;
- (void)resetNoFlush;
- (id)setForKey:(id)arg1;
- (void)setInternalStateAccordingToKVS;
- (void)writeAndPushConfirmedEventHashes:(id)arg1;
- (void)writeAndPushRejectedEventHashes:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
