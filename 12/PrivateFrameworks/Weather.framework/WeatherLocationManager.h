<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WeatherLocationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Weather.framework/WeatherLocationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Weather.framework/Weather (1)
 */

@interface WeatherLocationManager : NSObject <CLLocationManagerDelegate> {
    NSTimer * _accuracyFallbackTimer;
    int  _authorizationStatus;
    NSTimer * _delayedUpdateTimer;
    <CLLocationManagerDelegate> * _delegate;
    NSString * _effectiveBundleIdentifier;
    bool  _isInternalBuild;
    float  _lastLocationAccuracy;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _lastLocationCoord;
    NSDate * _lastLocationTimeStamp;
    double  _lastLocationUpdateTime;
    CLLocationManager * _locationManager;
    bool  _locationTrackingIsReady;
    bool  _locationUpdatesEnabled;
    double  _nextPlannedUpdate;
    double  _oldestAllowedUpdateTime;
    WeatherPreferences * _preferences;
    unsigned long long  _updateInterval;
}

@property (nonatomic, retain) NSTimer *accuracyFallbackTimer;
@property (nonatomic) int authorizationStatus;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSTimer *delayedUpdateTimer;
@property (nonatomic) <CLLocationManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double distanceFilter;
@property (nonatomic, readonly, copy) NSString *effectiveBundleIdentifier;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isInternalBuild;
@property (nonatomic) float lastLocationAccuracy;
@property (nonatomic) struct CLLocationCoordinate2D { double x1; double x2; } lastLocationCoord;
@property (nonatomic, copy) NSDate *lastLocationTimeStamp;
@property (nonatomic) double lastLocationUpdateTime;
@property (nonatomic, retain) CLLocationManager *locationManager;
@property (nonatomic) bool locationTrackingIsReady;
@property (nonatomic) bool locationUpdatesEnabled;
@property (nonatomic) double nextPlannedUpdate;
@property (nonatomic) double oldestAllowedUpdateTime;
@property (nonatomic, retain) WeatherPreferences *preferences;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long updateInterval;

+ (void)clearSharedLocationManager;
+ (int)locationManagerAuthorizationWithEffectiveBundleId:(id)arg1;
+ (id)sharedWeatherLocationManager;

- (void).cxx_destruct;
- (id)accuracyFallbackTimer;
- (void)accuracyFallbackTimerDidFire:(id)arg1;
- (void)askForLocationManagerAuthorization;
- (int)authorizationStatus;
- (void)cancelAccuracyFallbackTimer;
- (void)cancelDelayedUpdateTimer;
- (void)clearLastLocationUpdateTime;
- (void)clearLocalWeatherUpdateState;
- (void)dealloc;
- (id)delayedUpdateTimer;
- (void)delayedUpdateTimerDidFire:(id)arg1;
- (id)delegate;
- (double)distanceFilter;
- (id)effectiveBundleIdentifier;
- (int)forceLoadingAuthorizationStatus;
- (void)forceLocationUpdate;
- (bool)hasCrossedHourBoundary;
- (id)init;
- (id)initWithPreferences:(id)arg1;
- (id)initWithPreferences:(id)arg1 effectiveBundleIdentifier:(id)arg2;
- (bool)isCacheOutOfDate;
- (bool)isInternalBuild;
- (bool)isLocalStaleOrOutOfDate;
- (bool)isLocationWithInRange:(id)arg1;
- (float)lastLocationAccuracy;
- (struct CLLocationCoordinate2D { double x1; double x2; })lastLocationCoord;
- (id)lastLocationTimeStamp;
- (double)lastLocationUpdateTime;
- (bool)localWeatherAuthorized;
- (id)location;
- (id)locationManager;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(id)arg1 didFailWithError:(id)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (bool)locationTrackingIsReady;
- (bool)locationUpdatesEnabled;
- (void)monitorLocationAuthorization;
- (double)nextPlannedUpdate;
- (double)oldestAllowedUpdateTime;
- (id)preferences;
- (void)scheduleDelayedUpdate:(double)arg1;
- (void)setAccuracyFallbackTimer:(id)arg1;
- (void)setAuthorizationStatus:(int)arg1;
- (void)setDelayedUpdateTimer:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsInternalBuild:(bool)arg1;
- (void)setLastLocationAccuracy:(float)arg1;
- (void)setLastLocationCoord:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)setLastLocationTimeStamp:(id)arg1;
- (void)setLastLocationUpdateTime:(double)arg1;
- (void)setLocationManager:(id)arg1;
- (void)setLocationTrackingActive:(bool)arg1;
- (void)setLocationTrackingIsReady:(bool)arg1;
- (void)setLocationTrackingReady:(bool)arg1 activelyTracking:(bool)arg2 watchKitExtension:(bool)arg3;
- (void)setLocationTrackingReady:(bool)arg1 activelyTracking:(bool)arg2 watchKitExtension:(bool)arg3 shouldRequestAuthorization:(bool)arg4;
- (void)setLocationUpdatesEnabled:(bool)arg1;
- (void)setNextPlannedUpdate:(double)arg1;
- (void)setOldestAllowedUpdateTime:(double)arg1;
- (void)setPreferences:(id)arg1;
- (void)setUpdateInterval:(unsigned long long)arg1;
- (void)stopLocationUpdate;
- (unsigned long long)updateInterval;
- (void)updateLocation:(id)arg1;
- (void)updateLocationWithNoConditionCheck;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
