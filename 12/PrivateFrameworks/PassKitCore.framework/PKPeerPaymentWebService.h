<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKPeerPaymentWebService.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PassKitCore.framework/PKPeerPaymentWebService.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore (1)
 */

@interface PKPeerPaymentWebService : PKWebService <NSURLSessionTaskDelegate> {
    <PKPeerPaymentWebServiceArchiver> * _archiver;
    PKPeerPaymentWebServiceContext * _context;
    PKPaymentDevice * _paymentDevice;
    PKPeerPaymentService * _peerPaymentService;
    NSMutableDictionary * _prewarmedDeviceScorers;
    NSObject<OS_dispatch_queue> * _prewarmedDeviceScorersQueue;
    PKSecureElement * _secureElement;
    bool  _sharedService;
    <PKPeerPaymentWebServiceTargetDeviceProtocol> * _targetDevice;
}

@property (nonatomic, readonly) <PKPeerPaymentWebServiceArchiver> *archiver;
@property (nonatomic, retain) PKPeerPaymentWebServiceContext *context;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool needsRegistration;
@property (nonatomic, retain) PKPeerPaymentService *peerPaymentService;
@property (nonatomic, readonly) NSURL *peerPaymentServiceURL;
@property (getter=isSharedService, nonatomic) bool sharedService;
@property (readonly) Class superclass;
@property (nonatomic, readonly) <PKPeerPaymentWebServiceTargetDeviceProtocol> *targetDevice;

+ (id)sharedService;

- (void).cxx_destruct;
- (id)_appleAccountInformation;
- (void)_archiveContext;
- (id)_createDeviceScorerForEndpoint:(id)arg1 recipientAddress:(id)arg2;
- (id)_deviceIdentifier;
- (void)_deviceRegistrationDataWithCompletion:(id /* block */)arg1;
- (void)_deviceScoreForEndpoint:(id)arg1 recipientAddress:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)_deviceScoreForEndpoint:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)_handleRetryAfterRegisterWithRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)_isValidResponse:(id)arg1 error:(id)arg2;
- (void)_peerPaymentDeviceMetadataWithCompletion:(id /* block */)arg1;
- (void)_renewAppleAccountWithCompletionHandler:(id /* block */)arg1;
- (void)_updateRequestWithCurrentTargetDevice:(id)arg1;
- (id)archiver;
- (id)badRequestErrorWithResponse:(id)arg1;
- (bool)canBypassTrustExtendedValidation;
- (id)context;
- (unsigned long long)disbursementVoucherWithRequest:(id)arg1 certificates:(id)arg2 completion:(id /* block */)arg3;
- (id)forbiddenErrorWithResponse:(id)arg1;
- (void)handleAuthenticationFailureWithCompletionHandler:(id /* block */)arg1;
- (void)handleResponse:(id)arg1 withError:(id)arg2 data:(id)arg3 task:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)handleWillPerformHTTPRedirectionWithResponse:(id)arg1 redirectHandler:(id /* block */)arg2;
- (id)init;
- (id)initWithContext:(id)arg1 targetDevice:(id)arg2;
- (id)initWithContext:(id)arg1 targetDevice:(id)arg2 archiver:(id)arg3;
- (bool)isSharedService;
- (id)logFacility;
- (bool)needsRegistration;
- (unsigned long long)peerPaymentAcceptTermsWithIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)peerPaymentAccountWithCompletion:(id /* block */)arg1;
- (unsigned long long)peerPaymentBankLookupWithCountryCode:(id)arg1 query:(id)arg2 completion:(id /* block */)arg3;
- (unsigned long long)peerPaymentDocumentSubmissionRequest:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)peerPaymentEmailTermsWithCompletion:(id /* block */)arg1;
- (unsigned long long)peerPaymentIdentityVerificationRequest:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)peerPaymentPassDetailsWithCompletion:(id /* block */)arg1;
- (unsigned long long)peerPaymentPerformAction:(id)arg1 withPaymentIdentifier:(id)arg2 completion:(id /* block */)arg3;
- (unsigned long long)peerPaymentPerformQuoteWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)peerPaymentPreferencesWithCompletion:(id /* block */)arg1;
- (unsigned long long)peerPaymentQuoteCertificatesForDestination:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (unsigned long long)peerPaymentQuoteWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)peerPaymentReOpenAccountWithCompletion:(id /* block */)arg1;
- (unsigned long long)peerPaymentRecipientForRecipientAddress:(id)arg1 senderAddress:(id)arg2 source:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (unsigned long long)peerPaymentRegisterWithURL:(id)arg1 pushToken:(id)arg2 completion:(id /* block */)arg3;
- (unsigned long long)peerPaymentRequestStatementWithCompletion:(id /* block */)arg1;
- (unsigned long long)peerPaymentRequestTokenWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (id)peerPaymentService;
- (id)peerPaymentServiceURL;
- (unsigned long long)peerPaymentStatusWithPaymentIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)peerPaymentUnregisterWithCompletion:(id /* block */)arg1;
- (unsigned long long)peerPaymentUpdatePreferencesWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)performRequest:(id)arg1 taskIdentifier:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (void)prewarmDeviceScoreForEndpoint:(id)arg1;
- (void)prewarmDeviceScoreForEndpoint:(id)arg1 recipientAddress:(id)arg2;
- (void)setContext:(id)arg1;
- (void)setPeerPaymentService:(id)arg1;
- (void)setSharedService:(bool)arg1;
- (void)sharedPeerPaymentServiceChanged:(id)arg1;
- (unsigned long long)submitDeviceScoreIdentifiersWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (id)targetDevice;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
