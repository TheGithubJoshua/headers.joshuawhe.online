<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKSecureElement.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PassKitCore.framework/PKSecureElement.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore (1)
 */

@interface PKSecureElement : NSObject <NFHardwareEventListener, NFRemoteAdminEventListener> {
    bool  _deletingAllApplets;
    NSObject<OS_dispatch_queue> * _deletingAllAppletsPropertyConcurrentQueue;
    NSObject<OS_dispatch_source> * _deletingAllAppletsTimer;
    NSObject<OS_dispatch_queue> * _deletingAllAppletsTimerConcurrentQueue;
    NSHashTable * _observers;
    NSLock * _observersLock;
    id /* block */  _pairingChangeHandler;
    NSMutableArray * _prioritySessionAccessHandlers;
    bool  _registeredForHardwareUpdates;
    NSObject<OS_dispatch_queue> * _replyQueue;
    NFSecureElement * _secureElement;
    NSArray * _secureElementArray;
    id /* block */  _secureElementSessionPostlude;
    id /* block */  _secureElementSessionPrelude;
    NSMutableArray * _sessionAccessHandlers;
    NSObject<OS_dispatch_queue> * _sessionQueue;
    bool  _startingPrioritySession;
    bool  _startingSession;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long hardwareVersion;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isDeletingAllApplets;
@property (nonatomic, readonly) bool isInRestrictedMode;
@property (nonatomic, readonly) bool isOwnable;
@property (nonatomic, readonly) bool isProductionSigned;
@property (nonatomic, readonly) NSUUID *ownerUserUUID;
@property (nonatomic, readonly) NSNumber *primaryJSBLSequenceCounter;
@property (nonatomic, readonly) NSString *primaryRegionTopic;
@property (nonatomic, readonly) NSString *primarySecureElementIdentifier;
@property (nonatomic, readonly) NSArray *secureElementIdentifiers;
@property (nonatomic, copy) id /* block */ secureElementSessionPostlude;
@property (nonatomic, copy) id /* block */ secureElementSessionPrelude;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long supportedTechnologies;

// Image: /System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore

+ (bool)hardwareSupportsExpressForAutomaticSelectionTechnologyType:(long long)arg1;
+ (bool)hardwareSupportsExpressMode:(id)arg1;
+ (bool)isInFailForward;
+ (id)primarySecureElementIdentifier;
+ (id)secureElementIdentifiers;
+ (id)sharedSecureElement;
+ (bool)supportsExpressForAutomaticSelectionTechnologyType:(long long)arg1;
+ (bool)supportsExpressForAutomaticSelectionTechnologyType:(long long)arg1 byHardware:(bool*)arg2;
+ (bool)supportsExpressMode:(id)arg1;
+ (bool)supportsExpressMode:(id)arg1 byHardware:(bool*)arg2;

- (void).cxx_destruct;
- (void)SEPPairingInfoWithCompletion:(id /* block */)arg1;
- (void)_accessSecureElementManagerSessionWithPriority:(bool)arg1 handler:(id /* block */)arg2;
- (void)_executeSecureElementSessionHandlersWithPriority:(bool)arg1 session:(id)arg2;
- (void)_registerPairingChangeHandler;
- (void)_updateHardwareManagerListener;
- (void)accessPrioritySecureElementManagerSessionWithHandler:(id /* block */)arg1;
- (void)accessSecureElementManagerSessionWithHandler:(id /* block */)arg1;
- (void)allAppletsWithCompletion:(id /* block */)arg1;
- (void)appletWithIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)connectToServerWithPushTopic:(id)arg1 completion:(id /* block */)arg2;
- (void)contactlessPaymentPassesAvailableDidChange;
- (void)dealloc;
- (unsigned long long)hardwareVersion;
- (bool)hasRegistrationInformation;
- (id)init;
- (void)initializeSecureElementQueuingServerConnection:(bool)arg1 withCompletion:(id /* block */)arg2;
- (bool)isDeletingAllApplets;
- (bool)isInRestrictedMode;
- (bool)isOwnable;
- (bool)isProductionSigned;
- (void)markAllAppletsForDeletionWithExternalAuthorization:(id)arg1 completion:(id /* block */)arg2;
- (void)markAppletWithIdentifierForDeletion:(id)arg1 completion:(id /* block */)arg2;
- (void)markAppletsWithIdentifiersForDeletion:(id)arg1 completion:(id /* block */)arg2;
- (id)ownerUserUUID;
- (unsigned long long)ownershipStateForUserUUID:(id)arg1;
- (void)pairingStateWithCompletion:(id /* block */)arg1;
- (void)peerPaymentEnrollmentDataWithAlternateDSID:(id)arg1 completion:(id /* block */)arg2;
- (id)primaryJSBLSequenceCounter;
- (id)primaryRegionTopic;
- (id)primarySecureElementIdentifier;
- (bool)queueConnectionToServerForAppletIdentifiers:(id)arg1;
- (bool)queueConnectionToServerWithPushTopic:(id)arg1;
- (void)registerObserver:(id)arg1;
- (void)remoteAdminCleanupProgress:(double)arg1;
- (void)secureElement:(id)arg1 didChangeRestrictedMode:(bool)arg2;
- (id)secureElementIdentifiers;
- (id /* block */)secureElementSessionPostlude;
- (id /* block */)secureElementSessionPrelude;
- (bool)setOwnerUserUUID:(id)arg1 keybagUUID:(id)arg2;
- (bool)setRegistrationInformation:(id)arg1 primaryRegionTopic:(id)arg2;
- (void)setSecureElementSessionPostlude:(id /* block */)arg1;
- (void)setSecureElementSessionPrelude:(id /* block */)arg1;
- (void)signChallenge:(id)arg1 forPaymentApplication:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)signChallenge:(id)arg1 signatureEntanglementMode:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)signatureForAuthToken:(id)arg1 completion:(id /* block */)arg2;
- (void)signedPlatformDataWithCompletion:(id /* block */)arg1;
- (void)stateInformationWithCompletion:(id /* block */)arg1;
- (unsigned long long)supportedTechnologies;
- (bool)supportsExpressModeForExpressPassType:(long long)arg1;
- (void)unregisterObserver:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NanoPassKit.framework/NanoPassKit

- (void)npkSafePairingStateWithCompletion:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
