<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_TVRCMediaRemoteDeviceImpl.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVRemoteCore.framework/_TVRCMediaRemoteDeviceImpl.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVRemoteCore.framework/TVRemoteCore (51.60.5)
 */

@interface _TVRCMediaRemoteDeviceImpl : NSObject <_TVRCDeviceImpl, _TVRCMROriginDelegate, _TVRXVoiceRecorderDelegate> {
    _TVRXDevice * _device;
    _TVRCMediaRemoteEventTranslator * _eventTranslator;
    unsigned long long  _gameControllerID;
    long long  _gameControllerState;
    _TVRXKeyboardController * _keyboardController;
    _TVRCMediaRemoteKeyboardImplManager * _keyboardImplManager;
    NSSet * _mediaButtons;
    _TVRCMROriginWrapper * _origin;
    NSMutableArray * _queuedAudioBuffers;
    _TVRCMRTelevisionWrapper * _television;
    unsigned long long  _touchDeviceID;
    unsigned int  _voiceDeviceID;
    _TVRXVoiceRecorder * _voiceRecorder;
    NSSet * _volumeButtons;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) _TVRXDevice *device;
@property (nonatomic, retain) _TVRCMediaRemoteEventTranslator *eventTranslator;
@property (nonatomic) unsigned long long gameControllerID;
@property (nonatomic) long long gameControllerState;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) _TVRXKeyboardController *keyboardController;
@property (nonatomic, retain) _TVRCMediaRemoteKeyboardImplManager *keyboardImplManager;
@property (nonatomic, copy) NSSet *mediaButtons;
@property (nonatomic, retain) _TVRCMROriginWrapper *origin;
@property (nonatomic, retain) NSMutableArray *queuedAudioBuffers;
@property (readonly) Class superclass;
@property (nonatomic, retain) _TVRCMRTelevisionWrapper *television;
@property (nonatomic) unsigned long long touchDeviceID;
@property (nonatomic) unsigned int voiceDeviceID;
@property (nonatomic, retain) _TVRXVoiceRecorder *voiceRecorder;
@property (nonatomic, copy) NSSet *volumeButtons;

+ (id)implWithTelevision:(id)arg1;

- (void).cxx_destruct;
- (void)_addConnectionStateHandler;
- (void)_becameConnected;
- (void)_becameDisconnected:(id)arg1;
- (void)_beginObservingNowPlaying;
- (void)_connectionRequestedPairing:(struct { unsigned int x1; unsigned long long x2; })arg1 continuation:(id /* block */)arg2;
- (void)_connectionStateChanged:(unsigned int)arg1 error:(id)arg2;
- (void)_drainAndClearAudioBufferQueue;
- (void)_enableVolumeButtons:(bool)arg1;
- (void)_gameControllerInputModeChanged:(unsigned int)arg1;
- (bool)_isSystemVersionSupported;
- (void)_nameChanged:(id)arg1;
- (void)_registerGameControllerID;
- (void)_registerGameControllerInputModeHandler;
- (void)_registerTouchDevice;
- (void)_registerVoiceDeviceWithCompletion:(id /* block */)arg1;
- (void)_reloadVolumeControlAvailability;
- (void)_removeConnectionStateHandler;
- (void)_removePairingRecords;
- (void)_resetAllState;
- (void)_sendEquivalentGameButton:(id)arg1;
- (void)_setupKeyboardController;
- (void)_setupOriginIfNeeded;
- (void)_setupVoiceRecorder;
- (void)_setupVolumeControls;
- (void)_teardownVolumeControls;
- (void)_unregisterGameControllerID;
- (void)_unregisterGameControllerInputModeHandler;
- (void)_voiceRecorderStateChanged:(unsigned int)arg1;
- (void)_volumeControlsDidUpdate:(id)arg1;
- (id)alternateIdentifiers;
- (void)connect;
- (id)createBufferWithSettings:(id)arg1 packetCapacity:(unsigned long long)arg2 maxPacketSize:(unsigned long long)arg3;
- (void)dealloc;
- (id)device;
- (void)disconnect;
- (id)eventTranslator;
- (unsigned long long)gameControllerID;
- (long long)gameControllerState;
- (id)identifier;
- (id)initWithTelevision:(id)arg1;
- (id)keyboardController;
- (id)keyboardImplManager;
- (id)mediaButtons;
- (id)model;
- (id)name;
- (id)origin;
- (void)origin:(id)arg1 updatedSupportedCommands:(id)arg2;
- (unsigned long long)pairingCapability;
- (id)queuedAudioBuffers;
- (void)sendButtonEvent:(id)arg1;
- (void)sendGameControllerEvent:(id)arg1;
- (void)sendTouchEvent:(id)arg1;
- (void)setAuthenticationSupported:(bool)arg1;
- (void)setDevice:(id)arg1;
- (void)setEventTranslator:(id)arg1;
- (void)setGameControllerID:(unsigned long long)arg1;
- (void)setGameControllerState:(long long)arg1;
- (void)setKeyboardController:(id)arg1;
- (void)setKeyboardImplManager:(id)arg1;
- (void)setMediaButtons:(id)arg1;
- (void)setOrigin:(id)arg1;
- (void)setQueuedAudioBuffers:(id)arg1;
- (void)setTelevision:(id)arg1;
- (void)setTouchDeviceID:(unsigned long long)arg1;
- (void)setVoiceDeviceID:(unsigned int)arg1;
- (void)setVoiceRecorder:(id)arg1;
- (void)setVolumeButtons:(id)arg1;
- (id)supportedButtons;
- (bool)supportsTouchEvents;
- (id)television;
- (unsigned long long)touchDeviceID;
- (unsigned int)voiceDeviceID;
- (id)voiceRecorder;
- (void)voiceRecorder:(id)arg1 bufferAvailable:(id)arg2;
- (void)voiceRecorder:(id)arg1 isAboutToBeginRecording:(id /* block */)arg2;
- (void)voidRecorderDidStop:(id)arg1;
- (id)volumeButtons;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
