<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SBSceneHandle.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SpringBoardUI.framework/SBSceneHandle.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SpringBoardUI.framework/SpringBoardUI (1.0)
 */

@interface SBSceneHandle : NSObject <BSDescriptionProviding, FBSceneHostManagerObserver, FBSceneMonitorDelegate> {
    long long  _contentState;
    FBSSceneDefinition * _definition;
    FBSDisplayIdentity * _displayIdentity;
    bool  _manuallyControlsLifecycle;
    NSHashTable * _observers;
    NSMapTable * _observersToObserverBehaviors;
    FBScene * _scene;
    FBSceneMonitor * _sceneMonitor;
}

@property (getter=isContentReady, nonatomic, readonly) bool contentReady;
@property (nonatomic, readonly) long long contentState;
@property (readonly, copy) NSString *debugDescription;
@property (getter=_definition, nonatomic, readonly) FBSSceneDefinition *definition;
@property (readonly, copy) NSString *description;
@property (setter=_setDisplayIdentity:, nonatomic, retain) FBSDisplayIdentity *displayIdentity;
@property (readonly) unsigned long long hash;
@property (getter=_manuallyControlsLifecycle, setter=_setManuallyControlsLifecycle:, nonatomic) bool manuallyControlsLifecycle;
@property (nonatomic, readonly) FBScene *scene;
@property (nonatomic, readonly, copy) NSString *sceneIdentifier;
@property (nonatomic, readonly) FBScene *sceneIfExists;
@property (getter=_sceneMonitor, setter=_setSceneMonitor:, nonatomic, retain) FBSceneMonitor *sceneMonitor;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_commonInit;
- (id)_createMonitor;
- (id)_definition;
- (void)_didCreateScene:(id)arg1;
- (void)_didDestroyScene:(id)arg1;
- (void)_didUpdateClientSettingsWithDiff:(id)arg1 transitionContext:(id)arg2;
- (void)_didUpdateHostContentState:(long long)arg1;
- (void)_didUpdatePairingStatusForExternalSceneIdentifiers:(id)arg1;
- (void)_didUpdateSettingsWithDiff:(id)arg1 previousSettings:(id)arg2;
- (void)_enumerateObserversWithBlock:(id /* block */)arg1;
- (id)_initWithDefinition:(id)arg1 displayIdentity:(id)arg2;
- (id)_initWithDefinition:(id)arg1 scene:(id)arg2 displayIdentity:(id)arg3;
- (id)_initWithScene:(id)arg1 displayIdentity:(id)arg2;
- (bool)_manuallyControlsLifecycle;
- (void)_noteSceneCreated:(id)arg1;
- (void)_noteSceneDestroyed:(id)arg1;
- (id)_sceneMonitor;
- (void)_setContentState:(long long)arg1;
- (void)_setDisplayIdentity:(id)arg1;
- (void)_setManuallyControlsLifecycle:(bool)arg1;
- (void)_setScene:(id)arg1;
- (void)_setSceneMonitor:(id)arg1;
- (void)addObserver:(id)arg1;
- (long long)contentState;
- (void)dealloc;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (id)displayIdentity;
- (id)init;
- (bool)isContentReady;
- (bool)isPairedWithExternalSceneWithIdentifier:(id)arg1;
- (void)removeObserver:(id)arg1;
- (id)scene;
- (void)sceneHostManagerContentStateDidChange:(id)arg1;
- (id)sceneIdentifier;
- (id)sceneIfExists;
- (void)sceneMonitor:(id)arg1 pairingStatusDidChangeForExternalSceneIDs:(id)arg2;
- (void)sceneMonitor:(id)arg1 sceneClientSettingsDidChangeWithDiff:(id)arg2 transitionContext:(id)arg3;
- (void)sceneMonitor:(id)arg1 sceneSettingsDidChangeWithDiff:(id)arg2 previousSettings:(id)arg3;
- (void)sceneMonitor:(id)arg1 sceneWasCreated:(id)arg2;
- (void)sceneMonitor:(id)arg1 sceneWasDestroyed:(id)arg2;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
