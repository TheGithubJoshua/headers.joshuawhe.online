<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NUPageViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsUI.framework/NUPageViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsUI.framework/NewsUI (2166)
 */

@interface NUPageViewController : UIViewController <NUPageViewControllerScrollViewAccessibilityDelegate, UIScrollViewDelegate> {
    UIViewController * _appearingViewController;
    bool  _cancelScrollViewDidScroll;
    <NUPageViewControllerDataSource> * _dataSource;
    <NUPageViewControllerDelegate> * _delegate;
    UIViewController * _disappearingViewController;
    NSObject<OS_dispatch_group> * _idleDispatchGroup;
    bool  _isTransitioning;
    UIViewController * _managedForViewController;
    UIViewController * _nextViewController;
    UIViewController * _originalVisibleViewController;
    UIViewController * _possibleNextViewController;
    UIViewController * _previousViewController;
    NSMutableArray * _replayViewTransitions;
    NUPageViewControllerScrollView * _scrollView;
    bool  _scrollViewStartedScrolling;
    struct CGSize { 
        double width; 
        double height; 
    }  _transitioningSize;
    UIViewController * _visibleViewController;
}

@property (nonatomic, retain) UIViewController *appearingViewController;
@property (nonatomic) bool cancelScrollViewDidScroll;
@property (nonatomic) <NUPageViewControllerDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NUPageViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIViewController *disappearingViewController;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSObject<OS_dispatch_group> *idleDispatchGroup;
@property (nonatomic, readonly) bool isTransitioning;
@property (nonatomic, retain) UIViewController *managedForViewController;
@property (nonatomic, retain) UIViewController *nextViewController;
@property (nonatomic, retain) UIViewController *originalVisibleViewController;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } pageSize;
@property (nonatomic) bool pagingEnabled;
@property (nonatomic, retain) UIViewController *possibleNextViewController;
@property (nonatomic, retain) UIViewController *previousViewController;
@property (nonatomic, retain) NSMutableArray *replayViewTransitions;
@property (nonatomic, readonly) NUPageViewControllerScrollView *scrollView;
@property (nonatomic, readonly) bool scrollViewStartedScrolling;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } transitioningSize;
@property (nonatomic, retain) UIViewController *visibleViewController;

- (void).cxx_destruct;
- (bool)_assistiveTechnologyIsRunning;
- (void)_keyboardSwitchGoingRight:(bool)arg1;
- (bool)_shouldIgnoreDidScrollWithScrollView:(id)arg1;
- (void)accessibilityHandleRequestToGoBackForPageViewControllerScrollView:(id)arg1;
- (void)accessibilityHandleRequestToGoForewardForPageViewControllerScrollView:(id)arg1;
- (void)addViewController:(id)arg1;
- (id)appearingViewController;
- (void)callLastViewAppearanceMethods;
- (bool)canSwitchToNextViewController;
- (bool)canSwitchToPreviousViewController;
- (bool)cancelScrollViewDidScroll;
- (struct CGPoint { double x1; double x2; })centerForIndex:(unsigned long long)arg1;
- (id)childViewControllerForStatusBarHidden;
- (void)commonInit;
- (id)dataSource;
- (id)delegate;
- (id)disappearingViewController;
- (void)handleScrollEnd;
- (void)handleScrollStart;
- (id)idleDispatchGroup;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isTransitioning;
- (bool)isTransitioningToViewController;
- (void)keyboardOrActionSwitchToNextViewController;
- (void)keyboardOrActionSwitchToPreviousViewController;
- (void)managePreviousAndNextViewController;
- (id)managedForViewController;
- (id)nextViewController;
- (id)originalVisibleViewController;
- (struct CGSize { double x1; double x2; })pageSize;
- (bool)pagingEnabled;
- (void)performWhenIdle:(id /* block */)arg1;
- (id)possibleNextViewController;
- (id)previousViewController;
- (void)reindexViewControllers;
- (void)removeViewController:(id)arg1;
- (id)replayViewTransitions;
- (void)repositionPages;
- (id)scrollView;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (bool)scrollViewStartedScrolling;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)setAppearingViewController:(id)arg1;
- (void)setCancelScrollViewDidScroll:(bool)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisappearingViewController:(id)arg1;
- (void)setManagedForViewController:(id)arg1;
- (void)setNextViewController:(id)arg1;
- (void)setOriginalVisibleViewController:(id)arg1;
- (void)setPagingEnabled:(bool)arg1;
- (void)setPossibleNextViewController:(id)arg1;
- (void)setPreviousViewController:(id)arg1;
- (void)setReplayViewTransitions:(id)arg1;
- (void)setVisibleViewController:(id)arg1;
- (bool)shouldAutomaticallyForwardAppearanceMethods;
- (void)switchToNextViewController;
- (void)switchToPreviousViewController;
- (void)transitionToSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })transitioningSize;
- (void)updateContentOffset;
- (void)updateContentSize;
- (void)updatePositionForViewController:(id)arg1;
- (void)updateScrollView;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (id)visibleViewController;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
