<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ICDocCamImageQuadEditOverlay.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DocumentCamera.framework/ICDocCamImageQuadEditOverlay.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DocumentCamera.framework/DocumentCamera (1)
 */

@interface ICDocCamImageQuadEditOverlay : UIView <ICDocCamImageQuadEditPanGestureRecognizerDelegate> {
    <ICDocCamImageQuadEditOverlayDelegate> * _delegate;
    UIImage * _image;
    UIColor * _invalidRectColor;
    bool  _isDisplayingValidQuad;
    bool  _isTempOverlay;
    NSArray * _knobAccessibilityElements;
    UIColor * _knobColor;
    double  _knobHeight;
    CALayer * _knobLayer;
    NSArray * _knobs;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastGestureTranslation;
    CALayer * _loupeContentsLayer;
    CALayer * _loupeLayer;
    long long  _orientation;
    CAShapeLayer * _outlineLayer;
    ICDocCamImageQuadEditPanGestureRecognizer * _panGR;
    NSMutableArray * _panHistory;
    unsigned long long  _panHistoryIdx;
    ICDocCamImageQuad * _quad;
    CALayer * _selectedKnob;
    double  _tempOverlayMagnification;
    bool  _tempOverlayQuadIsValid;
    UIColor * _validRectColor;
}

@property (nonatomic, readonly) ICDocCamImageQuad *adjustedQuad;
@property (nonatomic, readonly) bool containsPointOutsideOfOverlayBounds;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <ICDocCamImageQuadEditOverlayDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic, readonly) UIColor *invalidRectColor;
@property (nonatomic) bool isDisplayingValidQuad;
@property (nonatomic, readonly) bool isDraggingKnob;
@property (nonatomic, readonly) bool isQuadValid;
@property (nonatomic) bool isTempOverlay;
@property (nonatomic, copy) NSArray *knobAccessibilityElements;
@property (nonatomic, retain) UIColor *knobColor;
@property (nonatomic) double knobHeight;
@property (nonatomic, retain) CALayer *knobLayer;
@property (nonatomic, retain) NSArray *knobs;
@property (nonatomic) struct CGPoint { double x1; double x2; } lastGestureTranslation;
@property (nonatomic, retain) CALayer *loupeContentsLayer;
@property (nonatomic, retain) CALayer *loupeLayer;
@property (nonatomic) long long orientation;
@property (nonatomic, retain) CAShapeLayer *outlineLayer;
@property (nonatomic, readonly) UIBezierPath *outlinePath;
@property (nonatomic, retain) ICDocCamImageQuadEditPanGestureRecognizer *panGR;
@property (nonatomic, retain) NSMutableArray *panHistory;
@property (nonatomic) unsigned long long panHistoryIdx;
@property (nonatomic, retain) ICDocCamImageQuad *quad;
@property (nonatomic, retain) CALayer *selectedKnob;
@property (readonly) Class superclass;
@property (nonatomic) double tempOverlayMagnification;
@property (nonatomic) bool tempOverlayQuadIsValid;
@property (nonatomic, readonly) UIColor *validRectColor;

- (void).cxx_destruct;
- (id)accessibilityElements;
- (bool)accessibilityIgnoresInvertColors;
- (id)adjustedQuad;
- (id)closestKnobToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)commonInit;
- (bool)containsPointOutsideOfOverlayBounds;
- (id)delegate;
- (void)didPan:(id)arg1;
- (id)image;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)invalidRectColor;
- (bool)isDisplayingValidQuad;
- (bool)isDraggingKnob;
- (bool)isQuadValid;
- (bool)isTempOverlay;
- (id)knobAccessibilityElements;
- (id)knobColor;
- (double)knobHeight;
- (id)knobLayer;
- (id)knobs;
- (struct CGPoint { double x1; double x2; })lastGestureTranslation;
- (void)layoutSubviews;
- (id)loupeContentsLayer;
- (id)loupeLayer;
- (long long)orientation;
- (id)outlineLayer;
- (id)outlinePath;
- (id)panGR;
- (id)panHistory;
- (unsigned long long)panHistoryIdx;
- (id)quad;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectFromApplyingOrientation:(long long)arg1 toContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)selectedKnob;
- (void)setDelegate:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setImage:(id)arg1 orientation:(long long)arg2;
- (void)setIsDisplayingValidQuad:(bool)arg1;
- (void)setIsTempOverlay:(bool)arg1;
- (void)setKnobAccessibilityElements:(id)arg1;
- (void)setKnobColor:(id)arg1;
- (void)setKnobHeight:(double)arg1;
- (void)setKnobLayer:(id)arg1;
- (void)setKnobs:(id)arg1;
- (void)setLastGestureTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLoupeContentsLayer:(id)arg1;
- (void)setLoupeLayer:(id)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setOutlineLayer:(id)arg1;
- (void)setPanGR:(id)arg1;
- (void)setPanHistory:(id)arg1;
- (void)setPanHistoryIdx:(unsigned long long)arg1;
- (void)setQuad:(id)arg1;
- (void)setSelectedKnob:(id)arg1;
- (void)setTempOverlayMagnification:(double)arg1;
- (void)setTempOverlayMagnification:(double)arg1 animationDuration:(double)arg2;
- (void)setTempOverlayQuadIsValid:(bool)arg1;
- (void)setUpKnobs;
- (void)setupLoupeLayerIfNeeded;
- (double)tempOverlayMagnification;
- (bool)tempOverlayQuadIsValid;
- (void)touchesBeganOnQuadEditPanGestureRecognizerDelegate:(id)arg1;
- (void)unselectAllKnobs;
- (void)updateKnobLocationsToRect:(id)arg1;
- (void)updateOutlineAndKnobColorForCurrentValidityIfNecessary;
- (void)updateOutlineAndKnobColorForIsValid:(bool)arg1;
- (void)updateOutlineLayer;
- (void)updateSelectedKnobContents;
- (id)validRectColor;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
