<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>QLThumbnailAddition.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/QuickLookThumbnailing.framework/QLThumbnailAddition.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/QuickLookThumbnailing.framework/QuickLookThumbnailing (1)
 */

@interface QLThumbnailAddition : NSObject {
    GSAddition * _addition;
    NSURL * _additionURL;
    long long  _additionURLSandboxToken;
    NSDictionary * _metadata;
    NSDictionary * _thumbnailDataDictionary;
    QLThumbnailVersion * _thumbnailVersion;
}

@property (readonly) unsigned long long additionSize;
@property (retain) NSURL *additionURL;
@property (readonly) GSAddition *genStoreAddition;
@property (retain) NSDictionary *metadata;
@property (retain) NSDictionary *thumbnailDataDictionary;
@property (readonly) QLThumbnailVersion *thumbnailVersion;

+ (id)_additionCreationInfo;
+ (bool)_hitAdditionsOnURL:(id)arg1 size:(unsigned long long)arg2 error:(id*)arg3;
+ (bool)_hitAdditionsOnURLUsingDaemon:(id)arg1 size:(unsigned long long)arg2 error:(id*)arg3;
+ (bool)_removeAdditionsOnURLDirectly:(id)arg1 error:(id*)arg2;
+ (bool)_removeAdditionsOnURLUsingDaemon:(id)arg1 error:(id*)arg2;
+ (bool)_removedAdditionsOnURL:(id)arg1;
+ (bool)_removedAdditionsOnURLUsingDaemon:(id)arg1;
+ (bool)associateImage:(struct CGImage { }*)arg1 metadata:(id)arg2 automaticallyGenerated:(bool)arg3 withURL:(id)arg4 error:(id*)arg5;
+ (bool)associateThumbnailImagesDictionary:(id)arg1 serializedQuickLookMetadata:(id)arg2 withDocumentAtURL:(id)arg3 error:(id*)arg4;
+ (bool)associateThumbnailImagesDictionary:(id)arg1 serializedQuickLookMetadata:(id)arg2 withImmutableDocument:(bool)arg3 atURL:(id)arg4 error:(id*)arg5;
+ (bool)associateThumbnailsForDocumentAtURL:(id)arg1 withDocumentAtURL:(id)arg2 error:(id*)arg3;
+ (bool)associateThumbnailsForDocumentAtURL:(id)arg1 withImmutableDocument:(bool)arg2 atURL:(id)arg3 error:(id*)arg4;
+ (void)downloadOrGenerateThumbnailAtPhysicalURL:(id)arg1;
+ (void)downloadOrGenerateThumbnailAtTaggedURL:(id)arg1;
+ (void)downloadOrGenerateThumbnailAtURL:(id)arg1;
+ (void)generateThumbnailIfPossibleAtLogicalURL:(id)arg1;
+ (void)generateThumbnailIfPossibleAtLogicalURL:(id)arg1 completionHandler:(id /* block */)arg2;
+ (bool)hasThumbnailOnImmutableDocumentAtURL:(id)arg1;
+ (Class)imageClassWithError:(id*)arg1;
+ (bool)imageContainsAlpha:(struct CGImage { }*)arg1;
+ (bool)imageContainsAlphaForOtherImages:(struct CGImage { }*)arg1;
+ (id)imageNameFor1024ThumbnailAtURL:(id)arg1 metadataDictionary:(id)arg2;
+ (id)imageNameFor1024ThumbnailData:(id)arg1 metadataDictionary:(id)arg2;
+ (id)imageNameFor1024ThumbnailInMetadataDictionary:(id)arg1;
+ (id)imageNameForThumbnailInImageSource:(struct CGImageSource { }*)arg1;
+ (bool)makeAdditionFromStagingURL:(id)arg1 metadata:(id)arg2 inStorage:(id)arg3 error:(id*)arg4;
+ (id)metadataForGeneratedThumbnailForURL:(id)arg1 maximumDimension:(double)arg2;
+ (void)noteCloudDocsDownloadedFileAtURL:(id)arg1;
+ (void)noteCloudDocsDownloadedFileAtURL:(id)arg1 completionHandler:(id /* block */)arg2;
+ (id)plistInExtendedAttributeNamed:(const char *)arg1 flags:(unsigned long long)arg2 onFileDescriptor:(int)arg3 error:(id*)arg4;
+ (bool)removeAdditionsOnURL:(id)arg1 error:(id*)arg2;
+ (bool)removeExtendedAttributeNamed:(const char *)arg1 flags:(unsigned long long)arg2 onFileDescriptor:(int)arg3 error:(id*)arg4;
+ (bool)removeThumbnailsStoredInExtendedAttributesOnURL:(id)arg1 error:(id*)arg2;
+ (bool)setPropertyList:(id)arg1 forExtendedAttributeNamed:(const char *)arg2 flags:(unsigned long long)arg3 onFileDescriptor:(int)arg4 error:(id*)arg5;
+ (bool)setThumbnailsDictionary:(id)arg1 forURL:(id)arg2 error:(id*)arg3;
+ (unsigned long long)sizeOfAdditionsPresentOnURL:(id)arg1;
+ (bool)storeThumbnailDataDictionary:(id)arg1 metadata:(id)arg2 asExtendedAttributeOnURL:(id)arg3 error:(id*)arg4;
+ (id)thumbnailsDictionaryForURL:(id)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (bool)_initWithAdditionsPresentOnURLDirectly:(id)arg1 error:(id*)arg2;
- (bool)_initWithAdditionsPresentOnURLUsingDaemon:(id)arg1 error:(id*)arg2;
- (bool)_initWithXattrsPresentOnURL:(id)arg1 error:(id*)arg2;
- (unsigned long long)additionSize;
- (id)additionURL;
- (id)allImageURLs;
- (void)dealloc;
- (id)genStoreAddition;
- (id)initWithAdditionsPresentOnURL:(id)arg1 error:(id*)arg2;
- (id)initWithAdditionsPresentOnURL:(id)arg1 includingExtendedAttributes:(bool)arg2 error:(id*)arg3;
- (id)metadata;
- (void)setAdditionURL:(id)arg1;
- (void)setMetadata:(id)arg1;
- (void)setThumbnailDataDictionary:(id)arg1;
- (bool)shouldBeInvalidatedByThumbnailVersion:(id)arg1;
- (id)thumbnailDataDictionary;
- (id)thumbnailDataForKey:(id)arg1;
- (id)thumbnailURLForKey:(id)arg1;
- (id)thumbnailVersion;
- (struct CGImage { }*)thumbnailWithMaximumDimension:(double)arg1 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 properties:(id*)arg3;
- (id)thumbnailsDictionaryWithError:(id*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
