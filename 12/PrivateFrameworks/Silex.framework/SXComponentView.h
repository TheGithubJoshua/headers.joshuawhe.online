<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SXComponentView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Silex.framework/SXComponentView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Silex.framework/Silex (2166)
 */

@interface SXComponentView : UIView <STTextCanvasRenderSource, SXAXAssistiveTechStatusChangeListener, SXComponentInteractable, SXTransitionableComponentView, UIGestureRecognizerDelegate, UIViewControllerPreviewingDelegate> {
    <SXDOMObjectProviding> * _DOMObjectProvider;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _absoluteFrame;
    bool  _allowViewHierarchyRemoval;
    bool  _animationsAndBehaviorsEnabled;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _backgroundFrame;
    <SXComponent> * _component;
    <SXComponentHosting> * _componentHost;
    unsigned long long  _componentIndex;
    <SXComponentLayout> * _componentLayout;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _componentLayoutMargins;
    <SXComponentStyle> * _componentStyle;
    <SXComponentStyleRenderer> * _componentStyleRenderer;
    <SXComponentStyleRendererFactory> * _componentStyleRendererFactory;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentFrame;
    UIView * _contentView;
    SXColumnLayout * _documentColumnLayout;
    SXFillView * _fillView;
    bool  _hasAnimation;
    bool  _hasBehaviors;
    bool  _hasRenderedComponentStyle;
    bool  _hasRenderedContents;
    UIView * _highlightView;
    bool  _highlighted;
    bool  _isDraggable;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _originalFrame;
    struct { 
        bool size; 
        bool position; 
    }  _presentationChanges;
    <SXPresentationDelegate> * _presentationDelegate;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _presentationFrame;
    long long  _presentationState;
    bool  _requiresThoroughFrameCalculations;
    SXUnitConverter * _unitConverter;
    SXViewport * _viewport;
    long long  _visibilityState;
}

@property (nonatomic, readonly) <SXDOMObjectProviding> *DOMObjectProvider;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } absoluteFrame;
@property (nonatomic) bool allowViewHierarchyRemoval;
@property (nonatomic) bool animationsAndBehaviorsEnabled;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } backgroundFrame;
@property (nonatomic, readonly) <SXComponent> *component;
@property (nonatomic) <SXComponentHosting> *componentHost;
@property (nonatomic) unsigned long long componentIndex;
@property (nonatomic, readonly) <SXComponentLayout> *componentLayout;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } componentLayoutMargins;
@property (nonatomic, retain) <SXComponentStyle> *componentStyle;
@property (nonatomic, readonly) <SXComponentStyleRenderer> *componentStyleRenderer;
@property (nonatomic, readonly) <SXComponentStyleRendererFactory> *componentStyleRendererFactory;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrame;
@property (nonatomic, readonly) UIView *contentView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) SXColumnLayout *documentColumnLayout;
@property (nonatomic) SXFillView *fillView;
@property (nonatomic) bool hasAnimation;
@property (nonatomic) bool hasBehaviors;
@property (nonatomic) bool hasRenderedComponentStyle;
@property (nonatomic, readonly) bool hasRenderedContents;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIView *highlightView;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, readonly) bool isDraggable;
@property (nonatomic, readonly) bool isTransitionable;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } originalFrame;
@property (nonatomic) struct { bool x1; bool x2; } presentationChanges;
@property (nonatomic, readonly) <SXPresentationDelegate> *presentationDelegate;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } presentationFrame;
@property (nonatomic) long long presentationState;
@property (nonatomic) bool requiresThoroughFrameCalculations;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } transitionContainerFrame;
@property (nonatomic, readonly) UIView *transitionContainerView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } transitionContentFrame;
@property (nonatomic, readonly) UIView *transitionContentView;
@property (nonatomic, readonly) bool transitionViewIsVisible;
@property (nonatomic, readonly) bool transitionViewShouldFadeInContent;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } transitionVisibleFrame;
@property (nonatomic, readonly) SXUnitConverter *unitConverter;
@property (nonatomic, readonly) SXViewport *viewport;
@property (nonatomic) long long visibilityState;

- (void).cxx_destruct;
- (id)DOMObjectProvider;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })absoluteFrame;
- (bool)allowHierarchyRemoval;
- (bool)allowViewHierarchyRemoval;
- (void)animationDidFinish:(id)arg1;
- (void)animationDidStart:(id)arg1;
- (bool)animationsAndBehaviorsEnabled;
- (void)assistiveTechnologyStatusDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })backgroundFrame;
- (id)classification;
- (id)component;
- (id)componentHost;
- (unsigned long long)componentIndex;
- (id)componentLayout;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })componentLayoutMargins;
- (id)componentStyle;
- (id)componentStyleRenderer;
- (id)componentStyleRendererFactory;
- (void)configure;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrame;
- (id)contentView;
- (id)contentViewForBehavior:(id)arg1;
- (void)dealloc;
- (id)description;
- (void)didApplyBehavior:(id)arg1;
- (void)didMoveToWindow;
- (void)didReceiveMemoryWarning;
- (void)discardContents;
- (id)documentColumnLayout;
- (id)fillView;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureShouldBegin:(id)arg1;
- (bool)hasAnimation;
- (bool)hasBehaviors;
- (bool)hasRenderedComponentStyle;
- (bool)hasRenderedContents;
- (id)highlightView;
- (id)initWithDOMObjectProvider:(id)arg1 viewport:(id)arg2 presentationDelegate:(id)arg3 componentStyleRendererFactory:(id)arg4;
- (void)invalidateComponentStyle;
- (bool)isDraggable;
- (bool)isHighlighted;
- (bool)isTransitionable;
- (void)loadComponent:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })originalFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })originalFrameForContentView:(id)arg1 behavior:(id)arg2;
- (void)prepareComponentStyleRendererForStyle:(id)arg1;
- (void)prepareForTransitionType:(unsigned long long)arg1;
- (void)presentComponentWithChanges:(struct { bool x1; bool x2; })arg1;
- (struct { bool x1; bool x2; })presentationChanges;
- (id)presentationDelegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })presentationFrame;
- (long long)presentationState;
- (void)previewingContext:(id)arg1 commitViewController:(id)arg2;
- (id)previewingContext:(id)arg1 viewControllerForLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)provideInfosLayoutTo:(id)arg1;
- (void)receivedInfo:(id)arg1 fromLayoutingPhaseWithIdentifier:(id)arg2;
- (void)renderComponentStyle;
- (void)renderContents;
- (void)renderContentsIfNeeded;
- (bool)requiresThoroughFrameCalculations;
- (void)restoreBehavior;
- (void)setAbsoluteFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAllowViewHierarchyRemoval:(bool)arg1;
- (void)setAnimationsAndBehaviorsEnabled:(bool)arg1;
- (void)setBackgroundFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setComponentHost:(id)arg1;
- (void)setComponentIndex:(unsigned long long)arg1;
- (void)setComponentLayoutMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setComponentStyle:(id)arg1;
- (void)setContentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDocumentColumnLayout:(id)arg1;
- (void)setFillView:(id)arg1;
- (void)setHasAnimation:(bool)arg1;
- (void)setHasBehaviors:(bool)arg1;
- (void)setHasRenderedComponentStyle:(bool)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setOriginalFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPresentationChanges:(struct { bool x1; bool x2; })arg1;
- (void)setPresentationFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPresentationState:(long long)arg1;
- (void)setRequiresThoroughFrameCalculations:(bool)arg1;
- (void)setVisibilityState:(long long)arg1;
- (void)setupComponentStyleRendererForStyle:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitionContainerFrame;
- (id)transitionContainerView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitionContentFrame;
- (id)transitionContentView;
- (bool)transitionViewIsVisible;
- (bool)transitionViewShouldFadeInContent;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitionVisibleFrame;
- (id)unitConverter;
- (void)updateAllowHierarchyRemovalWithComponent:(id)arg1 componentStyle:(id)arg2;
- (bool)userInteractable;
- (bool)usesThumbnailWithImageIdentifier:(id)arg1;
- (id)viewport;
- (long long)visibilityState;
- (void)visibilityStateDidChangeFromState:(long long)arg1;
- (void)willPresentComponentWithChanges:(struct { bool x1; bool x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
