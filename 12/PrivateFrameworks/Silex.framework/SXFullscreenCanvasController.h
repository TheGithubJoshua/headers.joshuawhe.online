<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SXFullscreenCanvasController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Silex.framework/SXFullscreenCanvasController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Silex.framework/Silex (2166)
 */

@interface SXFullscreenCanvasController : NSObject <SXDragManagerDataSource, SXFullscreenCaptionViewDelegate, SXFullscreenImageViewDelegate, SXFullscreenNavigationBarViewDelegate, SXItemizedScrollViewDataSource, SXItemizedScrollViewDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate> {
    UIView * _backgroundView;
    SXFullscreenCanvasViewController * _canvasViewController;
    SXFullscreenCaptionView * _captionView;
    <SXFullscreenCaptionViewFactory> * _captionViewFactory;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _currentDestinationFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _currentOriginFrame;
    double  _currentRotation;
    double  _currentScale;
    struct CGPoint { 
        double x; 
        double y; 
    }  _currentTranslation;
    UIView * _currentView;
    unsigned long long  _currentViewIndex;
    SXDragManager * _dragManager;
    UIView * _gestureView;
    bool  _isFullscreen;
    bool  _isStoppingVerticalSwiping;
    bool  _isSupressingColorSettings;
    bool  _isTransitioning;
    SXItemizedScrollView * _itemizedScrollView;
    bool  _lessTouchesAreInterupting;
    SXFullscreenNavigationBarView * _navigationBarView;
    UITapGestureRecognizer * _openTapGestureRecognizer;
    bool  _orientationChangeIsInterupting;
    UIPanGestureRecognizer * _panGestureRecognizer;
    bool  _panIsActive;
    UIPinchGestureRecognizer * _pinchGestureRecognizer;
    bool  _pinchIsActive;
    int  _previousExpansionMode;
    UIRotationGestureRecognizer * _rotationGestureRecognizer;
    bool  _rotationIsActive;
    unsigned long long  _sharingPolicy;
    <SXFullscreenCanvasShowable> * _showable;
    struct CGPoint { 
        double x; 
        double y; 
    }  _startingAnchorPoint;
    UITapGestureRecognizer * _tapGestureRecognizer;
    unsigned long long  _totalActiveGestureRecognizers;
    bool  _verticalSwipingIsActive;
}

@property (nonatomic, readonly) unsigned long long activeViewIndex;
@property (nonatomic, retain) UIColor *backgroundColor;
@property (nonatomic, readonly) UIView *backgroundView;
@property (nonatomic, retain) SXFullscreenCanvasViewController *canvasViewController;
@property (nonatomic, retain) SXFullscreenCaptionView *captionView;
@property (nonatomic, readonly) <SXFullscreenCaptionViewFactory> *captionViewFactory;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentDestinationFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } currentOriginFrame;
@property (nonatomic, readonly) double currentRotation;
@property (nonatomic, readonly) double currentScale;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } currentTranslation;
@property (nonatomic, retain) UIView *currentView;
@property (nonatomic) unsigned long long currentViewIndex;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) SXDragManager *dragManager;
@property (nonatomic, readonly) UIView *gestureView;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isFullscreen;
@property (nonatomic, readonly) bool isStoppingVerticalSwiping;
@property (nonatomic) bool isSupressingColorSettings;
@property (nonatomic, readonly) bool isTransitioning;
@property (nonatomic, retain) SXItemizedScrollView *itemizedScrollView;
@property (nonatomic) bool lessTouchesAreInterupting;
@property (nonatomic, retain) SXFullscreenNavigationBarView *navigationBarView;
@property (nonatomic, readonly) UITapGestureRecognizer *openTapGestureRecognizer;
@property (nonatomic) bool orientationChangeIsInterupting;
@property (nonatomic, readonly) UIPanGestureRecognizer *panGestureRecognizer;
@property (nonatomic, readonly) bool panIsActive;
@property (nonatomic, readonly) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (nonatomic, readonly) bool pinchIsActive;
@property (nonatomic) int previousExpansionMode;
@property (nonatomic, readonly) UIRotationGestureRecognizer *rotationGestureRecognizer;
@property (nonatomic, readonly) bool rotationIsActive;
@property (nonatomic, readonly) unsigned long long sharingPolicy;
@property (nonatomic, readonly) <SXFullscreenCanvasShowable> *showable;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } startingAnchorPoint;
@property (readonly) Class superclass;
@property (nonatomic, retain) UITapGestureRecognizer *tapGestureRecognizer;
@property (nonatomic, readonly) unsigned long long totalActiveGestureRecognizers;
@property (nonatomic, readonly) bool verticalSwipingIsActive;

- (void).cxx_destruct;
- (unsigned long long)activeViewIndex;
- (id)backgroundColor;
- (id)backgroundView;
- (struct CGPoint { double x1; double x2; })calculateAnchorPointFromBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 andPoint:(struct CGPoint { double x1; double x2; })arg2;
- (id)canvasViewController;
- (id)captionView;
- (bool)captionView:(id)arg1 tapGestureRecognizerShouldBegin:(id)arg2;
- (id)captionViewFactory;
- (void)changeCaptionViewForViewWithIndex:(unsigned long long)arg1 expanded:(bool)arg2 animated:(bool)arg3;
- (bool)comparePoint:(struct CGPoint { double x1; double x2; })arg1 withPoint:(struct CGPoint { double x1; double x2; })arg2 maxDelta:(double)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentDestinationFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })currentOriginFrame;
- (double)currentRotation;
- (double)currentScale;
- (struct CGPoint { double x1; double x2; })currentTranslation;
- (id)currentView;
- (unsigned long long)currentViewIndex;
- (void)dealloc;
- (void)didEndTransitionFromFullScreen:(bool)arg1 toFullScreen:(bool)arg2;
- (void)didFinishFullscreenActiveIndex:(unsigned long long)arg1;
- (void)dismiss;
- (id)dragManager;
- (id)dragManager:(id)arg1 dragableAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })fitSizeForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)fullScreenImageViewDidStartZooming:(id)arg1;
- (void)fullScreenImageViewDidStopZooming:(id)arg1;
- (void)fullscreenNavigationBarViewDoneButtonPressed:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestureView;
- (void)goToFullScreenFromFullScreenAnimated:(bool)arg1 completionBlock:(id /* block */)arg2;
- (void)goToFullScreenFromOriginalAnimated:(bool)arg1 completionBlock:(id /* block */)arg2;
- (void)goToOriginalFromFullScreenAnimated:(bool)arg1 completionBlock:(id /* block */)arg2;
- (void)goToOriginalFromOriginalAnimated:(bool)arg1 completionBlock:(id /* block */)arg2;
- (void)goToOriginalFromVerticalSwipingWithVelocity:(struct CGPoint { double x1; double x2; })arg1 completionBlock:(id /* block */)arg2;
- (void)handleGestureRecognizer:(id)arg1;
- (void)handleOpenTapGesture:(id)arg1;
- (void)handlePanGestureRecognizer:(id)arg1;
- (void)handlePinchGestureRecognizer:(id)arg1;
- (void)handleRotationGestureRecognizer:(id)arg1;
- (void)handleTap:(id)arg1;
- (id)initWithShowable:(id)arg1 captionViewFactory:(id)arg2 sharingPolicy:(unsigned long long)arg3;
- (bool)isFullscreen;
- (bool)isStoppingVerticalSwiping;
- (bool)isSupressingColorSettings;
- (bool)isTransitioning;
- (id)itemizedScrollView;
- (void)itemizedScrollView:(id)arg1 didChangeToActiveViewIndex:(unsigned long long)arg2;
- (void)itemizedScrollView:(id)arg1 didHideViewWithIndex:(unsigned long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })itemizedScrollView:(id)arg1 frameForViewAtIndex:(unsigned long long)arg2;
- (id)itemizedScrollView:(id)arg1 viewAtIndex:(unsigned long long)arg2;
- (void)itemizedScrollView:(id)arg1 willShowViewWithIndex:(unsigned long long)arg2;
- (bool)lessTouchesAreInterupting;
- (id)navigationBarView;
- (unsigned long long)numberOfViewsInItemizedScrollView:(id)arg1;
- (id)openTapGestureRecognizer;
- (bool)orientationChangeIsInterupting;
- (bool)otherInteractivityGestureShouldBegin:(id)arg1;
- (id)panGestureRecognizer;
- (bool)panIsActive;
- (id)pinchGestureRecognizer;
- (bool)pinchIsActive;
- (void)presentFullscreenWithIndex:(unsigned long long)arg1;
- (int)previousExpansionMode;
- (void)removeScaleAndTranslationFromCurrentView;
- (id)rotationGestureRecognizer;
- (bool)rotationIsActive;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setCanvasViewController:(id)arg1;
- (void)setCaptionView:(id)arg1;
- (void)setCurrentDestinationFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCurrentOriginFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCurrentView:(id)arg1;
- (void)setCurrentViewIndex:(unsigned long long)arg1;
- (void)setDragManager:(id)arg1;
- (void)setIsFullscreen:(bool)arg1;
- (void)setIsSupressingColorSettings:(bool)arg1;
- (void)setItemizedScrollView:(id)arg1;
- (void)setLessTouchesAreInterupting:(bool)arg1;
- (void)setNavigationBarView:(id)arg1;
- (void)setOrientationChangeIsInterupting:(bool)arg1;
- (void)setPreviousExpansionMode:(int)arg1;
- (void)setTapGestureRecognizer:(id)arg1;
- (void)setup;
- (void)setupGestureRecognizersInView:(id)arg1;
- (void)setupScrollViewIfNeededWithActiveIndex:(unsigned long long)arg1;
- (unsigned long long)sharingPolicy;
- (id)showable;
- (void)startSupressingColorSettings;
- (void)startTransitionToFullScreen:(bool)arg1 controllable:(bool)arg2;
- (void)startVerticalSwiping;
- (struct CGPoint { double x1; double x2; })startingAnchorPoint;
- (void)stopSupressingColorSettings;
- (void)stopTransformingCancelled:(bool)arg1;
- (void)stopVerticalSwipingDismissed:(bool)arg1 lastVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (id)tapGestureRecognizer;
- (unsigned long long)totalActiveGestureRecognizers;
- (void)transferCurrentViewToCanvas;
- (void)transferCurrentViewToOriginalView;
- (void)transferGestureViewToView:(id)arg1;
- (void)transformViewToSize:(struct CGSize { double x1; double x2; })arg1;
- (void)updateTransform;
- (bool)verticalSwipingIsActive;
- (id)viewForDragManager:(id)arg1;
- (long long)viewIndexForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 transitionCoordinator:(id)arg2;
- (void)willStartTransformingWithGestureRecognizer:(id)arg1 completionBlock:(id /* block */)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
