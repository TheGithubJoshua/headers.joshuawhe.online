<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SXMapComponentView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Silex.framework/SXMapComponentView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Silex.framework/Silex (2166)
 */

@interface SXMapComponentView : SXMediaComponentView <MKMapViewDelegate, UIGestureRecognizerDelegate> {
    SXMediaEngageEvent * _activeMediaEngageEvent;
    NSArray * _annotations;
    NSMutableDictionary * _cachedSnapshots;
    <SXDocumentTitleProviding> * _documentTitleProvider;
    UIBarButtonItem * _doneBarButtonItem;
    UIViewController * _fullScreenCanvasViewController;
    UIImageView * _imageView;
    struct { 
        struct { 
            double x; 
            double y; 
        } origin; 
        struct { 
            double width; 
            double height; 
        } size; 
    }  _mapRect;
    MKMapView * _mapView;
    UISegmentedControl * _segmentedControl;
    id /* block */  _snapShotCancelHandler;
    struct CGSize { 
        double width; 
        double height; 
    }  _snapShotSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _snapShotViewportSize;
    SXMapSnapShotter * _snapShotter;
    UITapGestureRecognizer * _tapGesture;
    NSArray * _toolbarItems;
}

@property (nonatomic, retain) SXMediaEngageEvent *activeMediaEngageEvent;
@property (nonatomic, retain) NSArray *annotations;
@property (nonatomic, retain) NSMutableDictionary *cachedSnapshots;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) <SXDocumentTitleProviding> *documentTitleProvider;
@property (nonatomic, retain) UIBarButtonItem *doneBarButtonItem;
@property (nonatomic, retain) UIViewController *fullScreenCanvasViewController;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIImageView *imageView;
@property (nonatomic) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } mapRect;
@property (nonatomic, retain) MKMapView *mapView;
@property (nonatomic, retain) UISegmentedControl *segmentedControl;
@property (nonatomic, copy) id /* block */ snapShotCancelHandler;
@property (nonatomic) struct CGSize { double x1; double x2; } snapShotSize;
@property (nonatomic) struct CGSize { double x1; double x2; } snapShotViewportSize;
@property (nonatomic, retain) SXMapSnapShotter *snapShotter;
@property (readonly) Class superclass;
@property (nonatomic, retain) UITapGestureRecognizer *tapGesture;
@property (nonatomic, retain) NSArray *toolbarItems;

- (void).cxx_destruct;
- (id)activeMediaEngageEvent;
- (unsigned long long)analyticsMediaType;
- (id)annotations;
- (bool)areBarsHidden;
- (id)cachedSnapshots;
- (void)cancelSnapShot;
- (void)configureMapView;
- (void)createMediaEngageEvent;
- (void)createSnapShot;
- (void)dealloc;
- (void)discardContents;
- (void)dismissFullScreen;
- (id)documentTitleProvider;
- (id)doneBarButtonItem;
- (void)enableMapViewInteraction:(bool)arg1;
- (void)finishMediaEngageEvent;
- (id)fullScreenCanvasViewController;
- (void)handleDoneTap:(id)arg1;
- (void)handleTap:(id)arg1;
- (bool)hasSelectedAnnotations;
- (id)imageView;
- (id)initWithDOMObjectProvider:(id)arg1 viewport:(id)arg2 presentationDelegate:(id)arg3 componentStyleRendererFactory:(id)arg4 analyticsReporting:(id)arg5 appStateMonitor:(id)arg6 documentTitleProvider:(id)arg7;
- (bool)isPresentingFullscreen;
- (bool)isUserInteractingWithMap;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRect;
- (id)mapTitle;
- (void)mapTypeChanged:(id)arg1;
- (unsigned long long)mapTypeForSegmentIndex:(unsigned long long)arg1;
- (id)mapView;
- (void)memoryWarning:(id)arg1;
- (void)presentComponentWithChanges:(struct { bool x1; bool x2; })arg1;
- (void)presentFullScreen;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })region;
- (void)renderContents;
- (unsigned long long)segmentIndexForMapType:(unsigned long long)arg1;
- (id)segmentedControl;
- (void)setActiveMediaEngageEvent:(id)arg1;
- (void)setAnnotations:(id)arg1;
- (void)setCachedSnapshots:(id)arg1;
- (void)setDoneBarButtonItem:(id)arg1;
- (void)setFullScreenCanvasViewController:(id)arg1;
- (void)setImageView:(id)arg1;
- (void)setMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setMapView:(id)arg1;
- (void)setSegmentedControl:(id)arg1;
- (void)setSnapShotCancelHandler:(id /* block */)arg1;
- (void)setSnapShotSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSnapShotViewportSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSnapShotter:(id)arg1;
- (void)setTapGesture:(id)arg1;
- (void)setToolbarItems:(id)arg1;
- (void)setupNavigationBar;
- (void)setupToolbar;
- (bool)shouldCreateSnapShot;
- (id /* block */)snapShotCancelHandler;
- (struct CGSize { double x1; double x2; })snapShotSize;
- (struct CGSize { double x1; double x2; })snapShotViewportSize;
- (id)snapShotter;
- (void)submitEvents;
- (void)submitMediaEngageCompleteEvent;
- (id)tapGesture;
- (id)toolbarItems;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
