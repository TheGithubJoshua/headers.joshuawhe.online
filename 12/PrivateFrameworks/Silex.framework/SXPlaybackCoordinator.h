<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SXPlaybackCoordinator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Silex.framework/SXPlaybackCoordinator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Silex.framework/Silex (2166)
 */

@interface SXPlaybackCoordinator : NSObject <SVVideoMetadata> {
    id /* block */  _cancelHandler;
    struct CGSize { 
        double width; 
        double height; 
    }  _dimensions;
    NSError * _error;
    NSObject<SXVideoPlaybackHost> * _host;
    bool  _initiatedPlayback;
    SVKeyValueObserver * _muteStateObserver;
    bool  _muted;
    NSHashTable * _observers;
    bool  _playbackBufferFull;
    SVKeyValueObserver * _playbackBufferFullObserver;
    bool  _playbackLikelyToKeepUp;
    SVKeyValueObserver * _playbackLikelyToKeepUpObserver;
    bool  _playbackRequested;
    SXAVPlayer * _player;
    <SXAVPlayerFactory> * _playerFactory;
    SVKeyValueObserver * _playerItemPresentationSizeObserver;
    SVKeyValueObserver * _readyForDisplayObserver;
    unsigned long long  _state;
    <SXVideoProviding> * _video;
}

@property (nonatomic, copy) id /* block */ cancelHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct CGSize { double x1; double x2; } dimensions;
@property (nonatomic, readonly) double duration;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, readonly) double framerate;
@property (readonly) unsigned long long hash;
@property (nonatomic) NSObject<SXVideoPlaybackHost> *host;
@property (nonatomic) bool initiatedPlayback;
@property (nonatomic, readonly) NSArray *loadedTimeRanges;
@property (nonatomic, readonly) double loadingProgress;
@property (nonatomic, retain) SVKeyValueObserver *muteStateObserver;
@property (nonatomic) bool muted;
@property (nonatomic, readonly) NSHashTable *observers;
@property (nonatomic, readonly) bool playbackBufferFull;
@property (nonatomic, retain) SVKeyValueObserver *playbackBufferFullObserver;
@property (nonatomic, readonly) bool playbackLikelyToKeepUp;
@property (nonatomic, retain) SVKeyValueObserver *playbackLikelyToKeepUpObserver;
@property (nonatomic) bool playbackRequested;
@property (nonatomic, retain) SXAVPlayer *player;
@property (nonatomic, readonly) <SXAVPlayerFactory> *playerFactory;
@property (nonatomic, retain) SVKeyValueObserver *playerItemPresentationSizeObserver;
@property (nonatomic, retain) SVKeyValueObserver *readyForDisplayObserver;
@property (nonatomic) unsigned long long state;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double time;
@property (nonatomic, readonly) double timePlayed;
@property (nonatomic, readonly) <SXVideoProviding> *video;
@property (nonatomic, readonly) double volume;

- (void).cxx_destruct;
- (void)addMuteStateObserver;
- (void)addPlaybackBuferObserver;
- (void)addPlaybackLikelyToKeepUpObserver;
- (void)addPlaybackObserver:(id)arg1;
- (void)addPlayerItemPresentationSizeObserver;
- (id /* block */)cancelHandler;
- (struct CGSize { double x1; double x2; })dimensions;
- (double)duration;
- (id)error;
- (double)framerate;
- (id)host;
- (id)initWithVideo:(id)arg1 playerFactory:(id)arg2;
- (bool)initiatedPlayback;
- (void)load;
- (void)loadVideoIfNeeded;
- (id)loadedTimeRanges;
- (void)loadedTimeRangesChanged;
- (double)loadingProgress;
- (void)muteStateChanged;
- (id)muteStateObserver;
- (bool)muted;
- (id)observers;
- (void)pause;
- (void)play;
- (bool)playbackBufferFull;
- (id)playbackBufferFullObserver;
- (void)playbackBufferFullStateChanged;
- (void)playbackFailedWithError:(id)arg1;
- (void)playbackFinished;
- (void)playbackInitiated;
- (bool)playbackLikelyToKeepUp;
- (id)playbackLikelyToKeepUpObserver;
- (void)playbackLikelyToKeepUpStateChanged;
- (void)playbackPaused;
- (bool)playbackRequested;
- (void)playbackResumed;
- (void)playbackStarted;
- (id)player;
- (id)playerFactory;
- (id)playerItemPresentationSizeObserver;
- (id)readyForDisplayObserver;
- (void)removePlaybackObserver:(id)arg1;
- (void)removePlayerItemPresentationSizeObserver;
- (void)seekToTime:(double)arg1 withCompletionBlock:(id /* block */)arg2;
- (void)setCancelHandler:(id /* block */)arg1;
- (void)setDimensions:(struct CGSize { double x1; double x2; })arg1;
- (void)setError:(id)arg1;
- (void)setHost:(id)arg1;
- (void)setInitiatedPlayback:(bool)arg1;
- (void)setMuteStateObserver:(id)arg1;
- (void)setMuted:(bool)arg1;
- (void)setPlaybackBufferFullObserver:(id)arg1;
- (void)setPlaybackLikelyToKeepUpObserver:(id)arg1;
- (void)setPlaybackRequested:(bool)arg1;
- (void)setPlayer:(id)arg1;
- (void)setPlayerItemPresentationSizeObserver:(id)arg1;
- (void)setReadyForDisplayObserver:(id)arg1;
- (void)setState:(unsigned long long)arg1;
- (void)setupPlayerWithURL:(id)arg1;
- (unsigned long long)state;
- (void)stateChanged;
- (double)time;
- (void)timeElapsed:(double)arg1 duration:(double)arg2;
- (double)timePlayed;
- (id)video;
- (double)volume;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
