<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BLTRemoteObject.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/BulletinDistributorCompanion.framework/BLTRemoteObject.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/BulletinDistributorCompanion.framework/BulletinDistributorCompanion (1)
 */

@interface BLTRemoteObject : NSObject <IDSServiceDelegate> {
    NSObject<OS_dispatch_queue> * _clientQueue;
    NSObject<OS_dispatch_queue> * _connectionStatusQueue;
    <BLTAbstractIDSDevice> * _defaultPairedDevice;
    bool  _full;
    NSMutableDictionary * _idsFileIDToResponseHandler;
    NSObject<OS_dispatch_queue> * _idsQueue;
    NSMutableDictionary * _idsRequestMessageTypeToSelector;
    NSMutableDictionary * _idsSendIDToCompletionHandler;
    NSMutableDictionary * _idsSendIDToResponseHandler;
    unsigned long long  _lastKnownConnectionStatus;
    bool  _pairedDeviceReady;
    BLTPBProtobufSequenceNumberManager * _sequenceNumberManager;
    NSLock * _sequenceNumberSendLock;
    <BLTAbstractIDSService> * _service;
    NSString * _serviceName;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *clientQueue;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long lastKnownConnectionStatus;
@property (getter=isPairedDeviceReady) bool pairedDeviceReady;
@property (nonatomic, readonly) BLTPBProtobufSequenceNumberManager *sequenceNumberManager;
@property (nonatomic, readonly) <BLTAbstractIDSService> *service;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (bool)_callSendCompletionHandlerWithSuccess:(bool)arg1 identifier:(id)arg2 error:(id)arg3;
- (void)_deviceConnectionStatusChanged:(id)arg1;
- (void)_handleNewSessionState:(unsigned long long)arg1;
- (bool)_idsQueueCallSendCompletionHandlerWithSuccess:(bool)arg1 identifier:(id)arg2 error:(id)arg3;
- (void)_queueHandleIDSProtobuf:(id)arg1;
- (void)_queuePerformSend:(id /* block */)arg1 responseToRequest:(id)arg2 withTimeout:(id)arg3 withDescription:(id)arg4 shortDescription:(id)arg5 onlyOneFor:(id)arg6 didSend:(id /* block */)arg7 andResponse:(id /* block */)arg8;
- (void)_queueSendMessage:(id)arg1 type:(unsigned short)arg2 responseToRequest:(id)arg3 withTimeout:(id)arg4 withDescription:(id)arg5 onlyOneFor:(id)arg6 didSend:(id /* block */)arg7 andResponse:(id /* block */)arg8 didQueue:(id /* block */)arg9;
- (void)_queueUpdateConnectionStatusWithResetDefaulteDevice:(bool)arg1;
- (void)_removeAndHandleResponseHandler:(id)arg1;
- (void)_sendAckInitialSequenceNumberForSession:(id)arg1 sessionState:(unsigned long long)arg2;
- (void)_sendAckInitialSequenceNumberForSession:(id)arg1 withAssert:(bool)arg2 sessionState:(unsigned long long*)arg3;
- (void)_sendAssertForSession;
- (void)_sendMessage:(id)arg1 type:(unsigned short)arg2 responseToRequest:(id)arg3 withTimeout:(id)arg4 withDescription:(id)arg5 onlyOneFor:(id)arg6 didSend:(id /* block */)arg7 andResponse:(id /* block */)arg8 didQueue:(id /* block */)arg9;
- (bool)_sequenceErrorDidHappenAndHandled:(long long)arg1 service:(id)arg2 incomingIdentifier:(id)arg3;
- (void)_setStandaloneTestModeEnabled:(bool)arg1;
- (void)_storeProtobufAction:(SEL)arg1 messageType:(unsigned short)arg2 messageSendType:(long long)arg3;
- (void)_updateConnectionStatus;
- (void)_updateConnectionStatusWithResetDefaulteDevice:(bool)arg1;
- (id)_wrapError:(id)arg1 identifier:(id)arg2;
- (id)clientQueue;
- (unsigned long long)connectionStatus;
- (void)dealloc;
- (void)disableStandaloneTestMode;
- (void)enableStandaloneTestModeWithMinimumSendDelay:(unsigned long long)arg1 maximumSendDelay:(unsigned long long)arg2 minimumResponseDelay:(unsigned long long)arg3 maximumResponseDelay:(unsigned long long)arg4;
- (void)handleAckInitialSequenceNumberRequest:(id)arg1;
- (void)handleFileURL:(id)arg1 extraMetadata:(id)arg2;
- (void)handleIDSProtobuf:(id)arg1;
- (void)handleIncomingMessage:(id)arg1;
- (id)initWithServiceName:(id)arg1 idsQueueName:(char *)arg2;
- (id)initWithServiceName:(id)arg1 idsQueueName:(char *)arg2 andClientQueue:(id)arg3;
- (bool)isPairedDeviceReady;
- (unsigned long long)lastKnownConnectionStatus;
- (void)registerProtobufHandlers;
- (void)sendFileURL:(id)arg1 withTimeout:(id)arg2 extraMetadata:(id)arg3 responseHandlers:(id)arg4 didSend:(id /* block */)arg5 didQueue:(id /* block */)arg6;
- (void)sendRequest:(id)arg1 type:(unsigned short)arg2;
- (void)sendRequest:(id)arg1 type:(unsigned short)arg2 didSend:(id /* block */)arg3;
- (void)sendRequest:(id)arg1 type:(unsigned short)arg2 withTimeout:(id)arg3 didSend:(id /* block */)arg4;
- (void)sendRequest:(id)arg1 type:(unsigned short)arg2 withTimeout:(id)arg3 didSend:(id /* block */)arg4 didQueue:(id /* block */)arg5;
- (void)sendRequest:(id)arg1 type:(unsigned short)arg2 withTimeout:(id)arg3 withDescription:(id)arg4 didSend:(id /* block */)arg5;
- (void)sendRequest:(id)arg1 type:(unsigned short)arg2 withTimeout:(id)arg3 withDescription:(id)arg4 onlyOneFor:(id)arg5 didSend:(id /* block */)arg6 andResponse:(id /* block */)arg7;
- (void)sendResponse:(id)arg1 type:(unsigned short)arg2 withRequest:(id)arg3 withTimeout:(id)arg4 withDescription:(id)arg5 onlyOneFor:(id)arg6 didSend:(id /* block */)arg7;
- (id)sequenceNumberManager;
- (id)service;
- (void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 didSendWithSuccess:(bool)arg4 error:(id)arg5;
- (void)service:(id)arg1 account:(id)arg2 incomingResourceAtURL:(id)arg3 metadata:(id)arg4 fromID:(id)arg5 context:(id)arg6;
- (void)service:(id)arg1 devicesChanged:(id)arg2;
- (void)service:(id)arg1 nearbyDevicesChanged:(id)arg2;
- (void)setClientQueue:(id)arg1;
- (void)setLastKnownConnectionStatus:(unsigned long long)arg1;
- (void)setPairedDeviceReady:(bool)arg1;
- (void)setProtobufAction:(SEL)arg1 forIncomingRequestsOfType:(unsigned short)arg2;
- (void)setProtobufAction:(SEL)arg1 forIncomingResponsesOfType:(unsigned short)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
