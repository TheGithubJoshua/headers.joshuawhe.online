<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ASEProcessing.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ASEProcessing.framework/ASEProcessing.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ASEProcessing.framework/ASEProcessing
 */

@interface ASEProcessing : NSObject {
    unsigned int  _FD_state;
    unsigned int  _FG_count;
    unsigned int  _NFG_count;
    struct { union { struct { int x_1_2_1; unsigned int x_1_2_2; bool x_1_2_3; union { struct { bool x_1_4_1; unsigned int x_1_4_2; struct { unsigned int x_3_5_1; unsigned int x_3_5_2; unsigned int x_3_5_3; } x_1_4_3; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_4_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_4_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_4_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_4_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_4_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_4_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_4_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_4_5_8; } x_1_4_4; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_5_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_5_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_5_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_5_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_5_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_5_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_5_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_5_5_8; } x_1_4_5; } x_4_3_1; } x_1_2_4; } x_1_1_1; } x1; } * _aseFrameProcessing;
    unsigned int  _aseProcessingType;
    int  _aseProcessingVersion;
    NSObject<OS_dispatch_queue> * _completionQueue;
    unsigned int  _destinationHeight;
    unsigned int  _destinationWidth;
    float  _enhancementStrength;
    unsigned int  _inputHeight;
    unsigned int  _inputWidth;
    unsigned int  _noiseMeterStepSize;
    unsigned long long  _numberOfProcessedFrames;
    unsigned long long  _numberOfRequestedFrames;
    unsigned long long  _numberOfScheduledFrames;
    unsigned int  _prev_H1_7;
    unsigned int  _prev_V1_7;
    unsigned int  _prev_ratio_2D_1D;
    unsigned int  _productType;
    NSObject<OS_dispatch_queue> * _scheduleQueue;
    NSObject<OS_dispatch_semaphore> * _scheduleSemaphone;
}

@property unsigned int destinationHeight;
@property unsigned int destinationWidth;
@property float enhancementStrength;

- (void).cxx_destruct;
- (void)dealloc;
- (unsigned int)destinationHeight;
- (unsigned int)destinationWidth;
- (void)digitalZoomSelectControl_V0:(struct { unsigned int x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_3_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_3_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_3_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_3_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_3_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_3_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_3_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_3_1_8; } x3; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_4_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_4_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_4_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_4_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_4_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_4_1_8; } x4; }*)arg1;
- (void)digitalZoomSelectControl_V1:(struct { bool x1; unsigned int x2; struct { unsigned int x_3_1_1; unsigned int x_3_1_2; unsigned int x_3_1_3; } x3; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_4_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_4_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_4_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_4_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_4_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_4_1_8; } x4; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_5_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_5_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_5_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_5_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_5_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_5_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_5_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_5_1_8; } x5; }*)arg1;
- (float)enhancementStrength;
- (id)init;
- (id)initWithConfig:(const struct { int x1; unsigned int x2; unsigned int x3; unsigned int x4; }*)arg1;
- (void)printAseMeasurementOutput:(const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1;
- (long long)processFrameWithInput:(struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1 Output:(struct { union { struct { int x_1_2_1; unsigned int x_1_2_2; bool x_1_2_3; union { struct { bool x_1_4_1; unsigned int x_1_4_2; struct { unsigned int x_3_5_1; unsigned int x_3_5_2; unsigned int x_3_5_3; } x_1_4_3; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_4_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_4_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_4_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_4_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_4_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_4_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_4_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_4_5_8; } x_1_4_4; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_5_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_5_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_5_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_5_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_5_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_5_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_5_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_5_5_8; } x_1_4_5; } x_4_3_1; } x_1_2_4; } x_1_1_1; } x1; }*)arg2;
- (long long)processFrameWithInput:(struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1 callback:(id /* block */)arg2;
- (void)processPixelWithInput:(const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1 Output:(struct { union { struct { int x_1_2_1; unsigned int x_1_2_2; bool x_1_2_3; union { struct { bool x_1_4_1; unsigned int x_1_4_2; struct { unsigned int x_3_5_1; unsigned int x_3_5_2; unsigned int x_3_5_3; } x_1_4_3; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_4_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_4_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_4_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_4_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_4_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_4_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_4_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_4_5_8; } x_1_4_4; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_5_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_5_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_5_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_5_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_5_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_5_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_5_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_5_5_8; } x_1_4_5; } x_4_3_1; } x_1_2_4; } x_1_1_1; } x1; }*)arg2;
- (void)processPixelWithInput_V0:(const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1 Output:(struct { union { struct { int x_1_2_1; unsigned int x_1_2_2; bool x_1_2_3; union { struct { bool x_1_4_1; unsigned int x_1_4_2; struct { unsigned int x_3_5_1; unsigned int x_3_5_2; unsigned int x_3_5_3; } x_1_4_3; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_4_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_4_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_4_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_4_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_4_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_4_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_4_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_4_5_8; } x_1_4_4; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_5_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_5_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_5_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_5_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_5_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_5_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_5_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_5_5_8; } x_1_4_5; } x_4_3_1; } x_1_2_4; } x_1_1_1; } x1; }*)arg2;
- (void)processPixelWithInput_V1:(const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1 Output:(struct { union { struct { int x_1_2_1; unsigned int x_1_2_2; bool x_1_2_3; union { struct { bool x_1_4_1; unsigned int x_1_4_2; struct { unsigned int x_3_5_1; unsigned int x_3_5_2; unsigned int x_3_5_3; } x_1_4_3; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_4_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_4_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_4_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_4_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_4_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_4_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_4_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_4_5_8; } x_1_4_4; struct { struct { float x_1_6_1; float x_1_6_2; float x_1_6_3; } x_5_5_1; struct { float x_2_6_1; float x_2_6_2; float x_2_6_3; } x_5_5_2; struct { float x_3_6_1; float x_3_6_2; float x_3_6_3; } x_5_5_3; struct { float x_4_6_1; float x_4_6_2; float x_4_6_3; } x_5_5_4; struct { float x_5_6_1; float x_5_6_2; float x_5_6_3; } x_5_5_5; struct { float x_6_6_1; float x_6_6_2; float x_6_6_3; } x_5_5_6; struct { float x_7_6_1; float x_7_6_2; float x_7_6_3; } x_5_5_7; struct { float x_8_6_1; float x_8_6_2; float x_8_6_3; } x_5_5_8; } x_1_4_5; } x_4_3_1; } x_1_2_4; } x_1_1_1; } x1; }*)arg2;
- (void)processPixelWithMeasurement_V0:(const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1 pixelControl:(struct { unsigned int x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_3_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_3_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_3_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_3_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_3_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_3_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_3_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_3_1_8; } x3; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_4_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_4_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_4_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_4_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_4_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_4_1_8; } x4; }*)arg2;
- (void)processPixelWithMeasurement_V1:(const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16[8]; unsigned int x17[8]; unsigned int x18[8]; unsigned int x19[8]; unsigned int x20[16]; unsigned int x21[16]; unsigned int x22[16]; }*)arg1 pixelControl:(struct { bool x1; unsigned int x2; struct { unsigned int x_3_1_1; unsigned int x_3_1_2; unsigned int x_3_1_3; } x3; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_4_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_4_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_4_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_4_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_4_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_4_1_8; } x4; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_5_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_5_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_5_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_5_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_5_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_5_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_5_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_5_1_8; } x5; }*)arg2;
- (void)processPixelWithPixelControl_V0:(struct { unsigned int x1; struct { unsigned int x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_3_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_3_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_3_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_3_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_3_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_3_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_3_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_3_1_8; } x3; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_4_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_4_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_4_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_4_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_4_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_4_1_8; } x4; }*)arg1;
- (void)processPixelWithPixelControl_V1:(struct { bool x1; unsigned int x2; struct { unsigned int x_3_1_1; unsigned int x_3_1_2; unsigned int x_3_1_3; } x3; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_4_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_4_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_4_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_4_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_4_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_4_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_4_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_4_1_8; } x4; struct { struct { float x_1_2_1; float x_1_2_2; float x_1_2_3; } x_5_1_1; struct { float x_2_2_1; float x_2_2_2; float x_2_2_3; } x_5_1_2; struct { float x_3_2_1; float x_3_2_2; float x_3_2_3; } x_5_1_3; struct { float x_4_2_1; float x_4_2_2; float x_4_2_3; } x_5_1_4; struct { float x_5_2_1; float x_5_2_2; float x_5_2_3; } x_5_1_5; struct { float x_6_2_1; float x_6_2_2; float x_6_2_3; } x_5_1_6; struct { float x_7_2_1; float x_7_2_2; float x_7_2_3; } x_5_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; } x_5_1_8; } x5; }*)arg1;
- (void)setDestinationHeight:(unsigned int)arg1;
- (void)setDestinationWidth:(unsigned int)arg1;
- (void)setEnhancementStrength:(float)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
