<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MNNavigationSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Navigation.framework/MNNavigationSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation (1)
 */

@interface MNNavigationSession : NSObject <MNGuidanceManagerDelegate, MNLocationManagerHeadingObserver, MNLocationManagerObserver, MNLocationTrackerDelegate, MNNavigationAudioSessionDelegate, MNTimeAndDistanceUpdaterDelegate, MNTracePlayerObserver, MNVoiceControllerObserver> {
    MNTrafficIncidentAlert * _activeTrafficIncidentAlert;
    MNNavigationAudioSession * _audioSession;
    GEOApplicationAuditToken * _auditToken;
    MNClassicGuidanceManager * _classicGuidanceManager;
    GEOComposedWaypoint * _destination;
    MNGuidanceEventManager * _guidanceEventManager;
    <MNGuidanceManager> * _guidanceManager;
    bool  _guidancePromptsEnabled;
    GEONavigationGuidanceState * _guidanceState;
    bool  _isAllowedToSwitchTransportTypes;
    bool  _isConnectedToCarplay;
    bool  _isSpeakingTrafficIncidentAlert;
    NSUUID * _lastLaneID;
    MNGuidanceSignInfo * _lastSignInfo;
    MNLocationTracker * _locationTracker;
    GEOMotionContext * _motionContext;
    int  _navigationType;
    MNObserverHashTable * _observers;
    MNRouteManager * _routeManager;
    NSString * _tileLoaderClient;
    MNTimeAndDistanceUpdater * _timeAndDistanceUpdater;
    MNNavigationTraceManager * _traceManager;
    NSString * _voiceLanguage;
}

@property (nonatomic, retain) <MNAudioSession> *audioSession;
@property (nonatomic, readonly) GEOApplicationAuditToken *auditToken;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) GEOComposedWaypoint *destination;
@property (nonatomic, readonly) double distanceToManeuverEnd;
@property (nonatomic, readonly) double distanceToManeuverStart;
@property (nonatomic) bool guidancePromptsEnabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isAllowedToSwitchTransportTypes;
@property (nonatomic) bool isConnectedToCarplay;
@property (nonatomic, readonly) MNLocation *lastMatchedLocation;
@property (nonatomic, readonly) GEOMotionContext *motionContext;
@property (nonatomic, readonly) int navigationState;
@property (nonatomic, readonly) int navigationType;
@property (nonatomic, readonly) double remainingDistance;
@property (nonatomic, readonly) double remainingTime;
@property (nonatomic, readonly) MNRouteManager *routeManager;
@property (readonly) Class superclass;
@property (nonatomic, readonly) MNNavigationTraceManager *traceManager;

- (void).cxx_destruct;
- (void)_closeTileLoader;
- (id)_locationTrackerForTransportType:(int)arg1 navigationType:(int)arg2;
- (void)_openTileLoader;
- (void)_setVolumeFromDefaults;
- (void)_startAudioSession;
- (void)_startETAUpdates;
- (void)_startGuidanceAllowMidRouteStart:(bool)arg1;
- (void)_startLocationTracking;
- (void)_startLocationUpdates;
- (void)_startMotionUpdates;
- (void)_startTravelTimeUpdates;
- (void)_stopAudioSession;
- (void)_stopETAUpdates;
- (void)_stopGuidance;
- (void)_stopLocationTracking;
- (void)_stopLocationUpdates;
- (void)_stopMotionUpdates;
- (void)_stopTravelTimeUpdates;
- (void)addObserver:(id)arg1;
- (id)audioSession;
- (void)audioSessionDidFinishAnnouncingArrival:(id)arg1;
- (void)audioSessionWillAnnounceArrival:(id)arg1;
- (id)auditToken;
- (void)dealloc;
- (id)destination;
- (double)distanceToManeuverEnd;
- (double)distanceToManeuverStart;
- (void)guidanceManager:(id)arg1 announce:(id)arg2 shortPromptType:(unsigned long long)arg3 stage:(unsigned long long)arg4 hasSecondaryManeuver:(bool)arg5 completionBlock:(id /* block */)arg6;
- (void)guidanceManager:(id)arg1 didArriveWithAnnouncement:(id)arg2;
- (void)guidanceManager:(id)arg1 didStartWithAnnouncement:(id)arg2;
- (void)guidanceManager:(id)arg1 displayManeuverAlertForAnnouncementStage:(unsigned long long)arg2;
- (void)guidanceManager:(id)arg1 displayPrimaryStep:(id)arg2 instructions:(id)arg3 shieldType:(int)arg4 shieldText:(id)arg5 drivingSide:(int)arg6 maneuverStepIndex:(unsigned long long)arg7 isSynthetic:(bool)arg8;
- (void)guidanceManager:(id)arg1 displaySecondaryStep:(id)arg2 instructions:(id)arg3 shieldType:(int)arg4 shieldText:(id)arg5 drivingSide:(int)arg6;
- (void)guidanceManager:(id)arg1 hideLaneDirectionsForId:(id)arg2;
- (void)guidanceManager:(id)arg1 newGuidanceEventFeedback:(id)arg2;
- (void)guidanceManager:(id)arg1 showLaneDirections:(id)arg2;
- (void)guidanceManager:(id)arg1 triggerHaptics:(int)arg2;
- (void)guidanceManager:(id)arg1 updateSignsWithInfo:(id)arg2;
- (void)guidanceManager:(id)arg1 updatedGuidanceEventFeedback:(id)arg2;
- (void)guidanceManager:(id)arg1 usePersistentDisplay:(bool)arg2;
- (void)guidanceManager:(id)arg1 willAnnounce:(unsigned long long)arg2 inSeconds:(double)arg3;
- (void)guidanceManagerBeginGuidanceUpdate:(id)arg1;
- (void)guidanceManagerDidUpdateProgress:(id)arg1 currentStepIndex:(unsigned long long)arg2 distanceUntilSign:(double)arg3 timeUntilSign:(double)arg4;
- (void)guidanceManagerEndGuidanceUpdate:(id)arg1;
- (void)guidanceManagerHideSecondaryStep:(id)arg1;
- (void)guidanceManagerProceedingToRoute:(id)arg1 proceedToRouteDistance:(double)arg2 displayString:(id)arg3 closestStepIndex:(unsigned long long)arg4;
- (bool)guidancePromptsEnabled;
- (id)initWithRouteManager:(id)arg1 auditToken:(id)arg2 traceManager:(id)arg3;
- (bool)isAllowedToSwitchTransportTypes;
- (bool)isConnectedToCarplay;
- (bool)isCurrentlySpeaking;
- (id)lastMatchedLocation;
- (void)locationManager:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)locationManager:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationManagerDidPauseLocationUpdates:(id)arg1;
- (void)locationManagerDidReset:(id)arg1;
- (void)locationManagerDidResumeLocationUpdates:(id)arg1;
- (void)locationManagerFailedToUpdateLocation:(id)arg1 withError:(id)arg2;
- (bool)locationManagerShouldPauseLocationUpdates:(id)arg1;
- (void)locationManagerUpdatedHeading:(id)arg1;
- (void)locationManagerUpdatedLocation:(id)arg1;
- (void)locationTracker:(id)arg1 didChangeState:(int)arg2;
- (void)locationTracker:(id)arg1 didReroute:(id)arg2 newAlternateRoutes:(id)arg3 rerouteReason:(unsigned long long)arg4 request:(id)arg5 response:(id)arg6;
- (void)locationTracker:(id)arg1 didSignalAlightForStepAtIndex:(unsigned long long)arg2;
- (void)locationTracker:(id)arg1 didSwitchToNewTransportType:(int)arg2 newRoute:(id)arg3 request:(id)arg4 response:(id)arg5;
- (void)locationTracker:(id)arg1 didUpdateAlternateRoutes:(id)arg2;
- (void)locationTracker:(id)arg1 didUpdateETAForRoute:(id)arg2;
- (void)locationTracker:(id)arg1 didUpdateFeedback:(id)arg2 forAlightingStepAtIndex:(unsigned long long)arg3;
- (void)locationTracker:(id)arg1 didUpdateMatchedLocation:(id)arg2;
- (void)locationTracker:(id)arg1 didUpdateTrafficForETARoute:(id)arg2 from:(unsigned int)arg3 to:(unsigned int)arg4;
- (void)locationTracker:(id)arg1 failedRerouteWithErrorCode:(long long)arg2;
- (void)locationTracker:(id)arg1 invalidatedTrafficIncidentAlert:(id)arg2;
- (void)locationTracker:(id)arg1 matchedToStepIndex:(unsigned long long)arg2 legIndex:(unsigned long long)arg3;
- (void)locationTracker:(id)arg1 receivedTrafficIncidentAlert:(id)arg2 responseCallback:(id /* block */)arg3;
- (void)locationTracker:(id)arg1 updatedTrafficIncidentAlert:(id)arg2;
- (void)locationTrackerDidArrive:(id)arg1;
- (void)locationTrackerDidCancelReroute:(id)arg1;
- (void)locationTrackerWillReroute:(id)arg1;
- (id)motionContext;
- (int)navigationState;
- (int)navigationType;
- (double)remainingDistance;
- (double)remainingTime;
- (void)removeObserver:(id)arg1;
- (bool)repeatCurrentGuidance;
- (bool)repeatCurrentTrafficAlert;
- (void)resumeOriginalDestination;
- (id)routeManager;
- (void)setAudioSession:(id)arg1;
- (void)setGuidancePromptsEnabled:(bool)arg1;
- (void)setIsConnectedToCarplay:(bool)arg1;
- (void)setIsNavigatingInLowGuidance:(bool)arg1;
- (void)startNavigationSessionWithDetails:(id)arg1;
- (void)stopCurrentGuidancePrompt;
- (void)stopNavigationSession;
- (void)switchToRoute:(id)arg1;
- (void)timeAndDistanceUpdater:(id)arg1 currentStepIndex:(unsigned long long)arg2 didUpdateDistanceUntilManeuver:(double)arg3 timeUntilManeuver:(double)arg4;
- (void)timeAndDistanceUpdater:(id)arg1 didUpdateDisplayETA:(id)arg2 displayRemainingMinutes:(unsigned long long)arg3 forRoute:(id)arg4;
- (void)timeAndDistanceUpdater:(id)arg1 didUpdateRemainingTime:(double)arg2 remainingDistance:(double)arg3;
- (double)timeSinceLastAnnouncement;
- (double)timeUntilNextAnnouncement;
- (void)traceJumpedInTime;
- (id)traceManager;
- (void)tracePlayer:(id)arg1 didJumpToRouteResponse:(id)arg2 request:(id)arg3 origin:(id)arg4 destination:(id)arg5;
- (void)tracePlayer:(id)arg1 didPlayAtTime:(double)arg2;
- (void)tracePlayer:(id)arg1 didReceiveLocationError:(id)arg2;
- (void)tracePlayer:(id)arg1 didSeekToTime:(double)arg2 fromTime:(double)arg3 location:(id)arg4;
- (void)tracePlayer:(id)arg1 didSeekToTransportType:(int)arg2;
- (void)tracePlayer:(id)arg1 didUpdateHeading:(id)arg2;
- (void)tracePlayer:(id)arg1 didUpdateLocation:(id)arg2;
- (void)tracePlayer:(id)arg1 didUpdateMotion:(unsigned long long)arg2 exitType:(unsigned long long)arg3 confidence:(unsigned long long)arg4;
- (void)tracePlayer:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)tracePlayer:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)tracePlayerDidPause:(id)arg1;
- (void)tracePlayerDidPauseLocationUpdates:(id)arg1;
- (void)tracePlayerDidResume:(id)arg1;
- (void)tracePlayerDidResumeLocationUpdates:(id)arg1;
- (void)tracePlayerDidStart:(id)arg1;
- (void)tracePlayerDidStayOnRoute:(id)arg1;
- (void)tracePlayerDidStop:(id)arg1;
- (void)updateDestination:(id)arg1;
- (bool)vibrateForPrompt:(unsigned long long)arg1;
- (void)voiceController:(id)arg1 didActivateAudioSession:(bool)arg2;
- (void)voiceController:(id)arg1 didStartSpeakingPrompt:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
