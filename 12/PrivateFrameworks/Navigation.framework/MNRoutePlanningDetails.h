<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MNRoutePlanningDetails.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Navigation.framework/MNRoutePlanningDetails.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation (1)
 */

@interface MNRoutePlanningDetails : PBCodable <NSCopying> {
    bool  _copyTracesToCrashReporterDirectory;
    GEOComposedWaypoint * _destination;
    bool  _fullGuidance;
    bool  _guidancePromptsEnabled;
    struct { 
        unsigned int navigationType : 1; 
        unsigned int routeIndex : 1; 
        unsigned int transportType : 1; 
        unsigned int copyTracesToCrashReporterDirectory : 1; 
        unsigned int fullGuidance : 1; 
        unsigned int guidancePromptsEnabled : 1; 
        unsigned int isForReconnecting : 1; 
        unsigned int isTraceRecording : 1; 
        unsigned int shouldPrepare : 1; 
    }  _has;
    bool  _isForReconnecting;
    bool  _isTraceRecording;
    GEOLocation * _lastLocation;
    int  _navigationType;
    GEOComposedWaypoint * _origin;
    GEODirectionsRequest * _request;
    NSString * _requestingAppIdentifier;
    GEODirectionsResponse * _response;
    GEORoute * _route;
    GEORouteAttributes * _routeAttributes;
    unsigned int  _routeIndex;
    bool  _shouldPrepare;
    NSString * _traceFileName;
    int  _transportType;
}

@property (nonatomic) bool copyTracesToCrashReporterDirectory;
@property (nonatomic, retain) GEOComposedWaypoint *destination;
@property (nonatomic) bool fullGuidance;
@property (nonatomic) bool guidancePromptsEnabled;
@property (nonatomic) bool hasCopyTracesToCrashReporterDirectory;
@property (nonatomic, readonly) bool hasDestination;
@property (nonatomic) bool hasFullGuidance;
@property (nonatomic) bool hasGuidancePromptsEnabled;
@property (nonatomic) bool hasIsForReconnecting;
@property (nonatomic) bool hasIsTraceRecording;
@property (nonatomic, readonly) bool hasLastLocation;
@property (nonatomic) bool hasNavigationType;
@property (nonatomic, readonly) bool hasOrigin;
@property (nonatomic, readonly) bool hasRequest;
@property (nonatomic, readonly) bool hasRequestingAppIdentifier;
@property (nonatomic, readonly) bool hasResponse;
@property (nonatomic, readonly) bool hasRoute;
@property (nonatomic, readonly) bool hasRouteAttributes;
@property (nonatomic) bool hasRouteIndex;
@property (nonatomic) bool hasShouldPrepare;
@property (nonatomic, readonly) bool hasTraceFileName;
@property (nonatomic) bool hasTransportType;
@property (nonatomic) bool isForReconnecting;
@property (nonatomic) bool isTraceRecording;
@property (nonatomic, retain) GEOLocation *lastLocation;
@property (nonatomic) int navigationType;
@property (nonatomic, retain) GEOComposedWaypoint *origin;
@property (nonatomic, retain) GEODirectionsRequest *request;
@property (nonatomic, retain) NSString *requestingAppIdentifier;
@property (nonatomic, retain) GEODirectionsResponse *response;
@property (nonatomic, retain) GEORoute *route;
@property (nonatomic, retain) GEORouteAttributes *routeAttributes;
@property (nonatomic) unsigned int routeIndex;
@property (nonatomic) bool shouldPrepare;
@property (nonatomic, retain) NSString *traceFileName;
@property (nonatomic) int transportType;

- (void).cxx_destruct;
- (int)StringAsNavigationType:(id)arg1;
- (int)StringAsTransportType:(id)arg1;
- (void)copyTo:(id)arg1;
- (bool)copyTracesToCrashReporterDirectory;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)destination;
- (id)dictionaryRepresentation;
- (bool)fullGuidance;
- (bool)guidancePromptsEnabled;
- (bool)hasCopyTracesToCrashReporterDirectory;
- (bool)hasDestination;
- (bool)hasFullGuidance;
- (bool)hasGuidancePromptsEnabled;
- (bool)hasIsForReconnecting;
- (bool)hasIsTraceRecording;
- (bool)hasLastLocation;
- (bool)hasNavigationType;
- (bool)hasOrigin;
- (bool)hasRequest;
- (bool)hasRequestingAppIdentifier;
- (bool)hasResponse;
- (bool)hasRoute;
- (bool)hasRouteAttributes;
- (bool)hasRouteIndex;
- (bool)hasShouldPrepare;
- (bool)hasTraceFileName;
- (bool)hasTransportType;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (bool)isForReconnecting;
- (bool)isTraceRecording;
- (id)lastLocation;
- (void)mergeFrom:(id)arg1;
- (int)navigationType;
- (id)navigationTypeAsString:(int)arg1;
- (id)origin;
- (bool)readFrom:(id)arg1;
- (id)request;
- (id)requestingAppIdentifier;
- (id)response;
- (id)route;
- (id)routeAttributes;
- (unsigned int)routeIndex;
- (void)setCopyTracesToCrashReporterDirectory:(bool)arg1;
- (void)setDestination:(id)arg1;
- (void)setFullGuidance:(bool)arg1;
- (void)setGuidancePromptsEnabled:(bool)arg1;
- (void)setHasCopyTracesToCrashReporterDirectory:(bool)arg1;
- (void)setHasFullGuidance:(bool)arg1;
- (void)setHasGuidancePromptsEnabled:(bool)arg1;
- (void)setHasIsForReconnecting:(bool)arg1;
- (void)setHasIsTraceRecording:(bool)arg1;
- (void)setHasNavigationType:(bool)arg1;
- (void)setHasRouteIndex:(bool)arg1;
- (void)setHasShouldPrepare:(bool)arg1;
- (void)setHasTransportType:(bool)arg1;
- (void)setIsForReconnecting:(bool)arg1;
- (void)setIsTraceRecording:(bool)arg1;
- (void)setLastLocation:(id)arg1;
- (void)setNavigationType:(int)arg1;
- (void)setOrigin:(id)arg1;
- (void)setRequest:(id)arg1;
- (void)setRequestingAppIdentifier:(id)arg1;
- (void)setResponse:(id)arg1;
- (void)setRoute:(id)arg1;
- (void)setRouteAttributes:(id)arg1;
- (void)setRouteIndex:(unsigned int)arg1;
- (void)setShouldPrepare:(bool)arg1;
- (void)setTraceFileName:(id)arg1;
- (void)setTransportType:(int)arg1;
- (bool)shouldPrepare;
- (id)traceFileName;
- (int)transportType;
- (id)transportTypeAsString:(int)arg1;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
