<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MNGuidanceEventFeedback.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Navigation.framework/MNGuidanceEventFeedback.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation (1)
 */

@interface MNGuidanceEventFeedback : PBCodable <NSCopying> {
    double  _endDistance;
    double  _endTime;
    unsigned int  _enrouteNoticeIndex;
    NSString * _eventDescription;
    unsigned int  _eventIndex;
    struct { 
        unsigned int endDistance : 1; 
        unsigned int endTime : 1; 
        unsigned int maneuverTime : 1; 
        unsigned int startDistance : 1; 
        unsigned int startTime : 1; 
        unsigned int vehicleSpeed : 1; 
        unsigned int enrouteNoticeIndex : 1; 
        unsigned int eventIndex : 1; 
        unsigned int selectedPrimaryStringIndex : 1; 
        unsigned int selectedSecondaryStringIndex : 1; 
        unsigned int stepID : 1; 
        unsigned int trafficColor : 1; 
        unsigned int type : 1; 
        unsigned int shortPrompt : 1; 
    }  _has;
    double  _maneuverTime;
    NSData * _routeID;
    unsigned int  _selectedPrimaryStringIndex;
    unsigned int  _selectedSecondaryStringIndex;
    bool  _shortPrompt;
    double  _startDistance;
    double  _startTime;
    unsigned int  _stepID;
    unsigned int  _trafficColor;
    int  _type;
    NSString * _uniqueIDstring;
    double  _vehicleSpeed;
}

@property (nonatomic) double endDistance;
@property (nonatomic) double endTime;
@property (nonatomic) unsigned int enrouteNoticeIndex;
@property (nonatomic, retain) NSString *eventDescription;
@property (nonatomic) unsigned int eventIndex;
@property (nonatomic) bool hasEndDistance;
@property (nonatomic) bool hasEndTime;
@property (nonatomic) bool hasEnrouteNoticeIndex;
@property (nonatomic, readonly) bool hasEventDescription;
@property (nonatomic) bool hasEventIndex;
@property (nonatomic) bool hasManeuverTime;
@property (nonatomic, readonly) bool hasRouteID;
@property (nonatomic) bool hasSelectedPrimaryStringIndex;
@property (nonatomic) bool hasSelectedSecondaryStringIndex;
@property (nonatomic) bool hasShortPrompt;
@property (nonatomic) bool hasStartDistance;
@property (nonatomic) bool hasStartTime;
@property (nonatomic) bool hasStepID;
@property (nonatomic) bool hasTrafficColor;
@property (nonatomic) bool hasType;
@property (nonatomic, readonly) bool hasUniqueIDstring;
@property (nonatomic) bool hasVehicleSpeed;
@property (nonatomic) double maneuverTime;
@property (nonatomic, retain) NSData *routeID;
@property (nonatomic) unsigned int selectedPrimaryStringIndex;
@property (nonatomic) unsigned int selectedSecondaryStringIndex;
@property (nonatomic) bool shortPrompt;
@property (nonatomic) double startDistance;
@property (nonatomic) double startTime;
@property (nonatomic) unsigned int stepID;
@property (nonatomic) unsigned int trafficColor;
@property (nonatomic) int type;
@property (nonatomic, readonly) NSUUID *uniqueID;
@property (nonatomic, retain) NSString *uniqueIDstring;
@property (nonatomic) double vehicleSpeed;

- (void).cxx_destruct;
- (int)StringAsType:(id)arg1;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (double)endDistance;
- (double)endTime;
- (unsigned int)enrouteNoticeIndex;
- (id)eventDescription;
- (unsigned int)eventIndex;
- (bool)hasEndDistance;
- (bool)hasEndTime;
- (bool)hasEnrouteNoticeIndex;
- (bool)hasEventDescription;
- (bool)hasEventIndex;
- (bool)hasManeuverTime;
- (bool)hasRouteID;
- (bool)hasSelectedPrimaryStringIndex;
- (bool)hasSelectedSecondaryStringIndex;
- (bool)hasShortPrompt;
- (bool)hasStartDistance;
- (bool)hasStartTime;
- (bool)hasStepID;
- (bool)hasTrafficColor;
- (bool)hasType;
- (bool)hasUniqueIDstring;
- (bool)hasVehicleSpeed;
- (unsigned long long)hash;
- (id)initWithEvent:(id)arg1;
- (bool)isEqual:(id)arg1;
- (double)maneuverTime;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (id)routeID;
- (unsigned int)selectedPrimaryStringIndex;
- (unsigned int)selectedSecondaryStringIndex;
- (void)setEndDistance:(double)arg1;
- (void)setEndTime:(double)arg1;
- (void)setEnrouteNoticeIndex:(unsigned int)arg1;
- (void)setEventDescription:(id)arg1;
- (void)setEventIndex:(unsigned int)arg1;
- (void)setHasEndDistance:(bool)arg1;
- (void)setHasEndTime:(bool)arg1;
- (void)setHasEnrouteNoticeIndex:(bool)arg1;
- (void)setHasEventIndex:(bool)arg1;
- (void)setHasManeuverTime:(bool)arg1;
- (void)setHasSelectedPrimaryStringIndex:(bool)arg1;
- (void)setHasSelectedSecondaryStringIndex:(bool)arg1;
- (void)setHasShortPrompt:(bool)arg1;
- (void)setHasStartDistance:(bool)arg1;
- (void)setHasStartTime:(bool)arg1;
- (void)setHasStepID:(bool)arg1;
- (void)setHasTrafficColor:(bool)arg1;
- (void)setHasType:(bool)arg1;
- (void)setHasVehicleSpeed:(bool)arg1;
- (void)setManeuverTime:(double)arg1;
- (void)setRouteID:(id)arg1;
- (void)setSelectedPrimaryStringIndex:(unsigned int)arg1;
- (void)setSelectedSecondaryStringIndex:(unsigned int)arg1;
- (void)setShortPrompt:(bool)arg1;
- (void)setStartDistance:(double)arg1;
- (void)setStartTime:(double)arg1;
- (void)setStepID:(unsigned int)arg1;
- (void)setTrafficColor:(unsigned int)arg1;
- (void)setType:(int)arg1;
- (void)setUniqueIDstring:(id)arg1;
- (void)setVehicleSpeed:(double)arg1;
- (bool)shortPrompt;
- (double)startDistance;
- (double)startTime;
- (unsigned int)stepID;
- (unsigned int)trafficColor;
- (int)type;
- (id)typeAsString:(int)arg1;
- (id)uniqueID;
- (id)uniqueIDstring;
- (double)vehicleSpeed;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
