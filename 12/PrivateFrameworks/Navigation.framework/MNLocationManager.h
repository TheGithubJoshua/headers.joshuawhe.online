<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MNLocationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Navigation.framework/MNLocationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation (1)
 */

@interface MNLocationManager : NSObject <GEOResourceManifestTileGroupObserver, MNLocationProviderDelegate> {
    NSBundle * _effectiveBundle;
    NSString * _effectiveBundleIdentifier;
    double  _expectedGpsUpdateInterval;
    bool  _hasCustomDesiredAccuracy;
    CLHeading * _heading;
    NSHashTable * _headingObservers;
    bool  _isLastLocationStale;
    MNLocation * _lastGoodLocation;
    MNLocation * _lastLocation;
    NSLock * _lastLocationLock;
    bool  _lastLocationPushed;
    double  _lastLocationReportTime;
    double  _lastLocationUpdateTime;
    NSDate * _lastUpdatedHeadingDate;
    id /* block */  _locationCorrector;
    NSError * _locationError;
    NSHashTable * _locationListeners;
    NSHashTable * _locationObservers;
    <MNLocationProvider> * _locationProvider;
    unsigned long long  _locationProviderType;
    <MNLocationRecorder> * _locationRecorder;
    GEOLocationShifter * _locationShifter;
    double  _locationUpdateStartTime;
    bool  _logStartStopLocationUpdates;
    NSLock * _observersLock;
    bool  _trackingHeading;
    bool  _trackingLocation;
    bool  _useCourseForHeading;
}

@property (nonatomic) long long activityType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) double desiredAccuracy;
@property (nonatomic) double distanceFilter;
@property (nonatomic, retain) NSBundle *effectiveBundle;
@property (nonatomic, copy) NSString *effectiveBundleIdentifier;
@property (nonatomic, readonly) double expectedGpsUpdateInterval;
@property (nonatomic, readonly) bool hasLocation;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) CLHeading *heading;
@property (nonatomic) int headingOrientation;
@property (nonatomic, readonly) bool isHeadingServicesAvailable;
@property (nonatomic, readonly) bool isLastLocationStale;
@property (nonatomic, readonly) MNLocation *lastLocation;
@property (nonatomic, copy) id /* block */ locationCorrector;
@property (nonatomic, readonly) NSError *locationError;
@property (nonatomic, retain) <MNLocationProvider> *locationProvider;
@property (nonatomic, readonly) unsigned long long locationProviderType;
@property (nonatomic, retain) <MNLocationRecorder> *locationRecorder;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double timeScale;

+ (id)sharedLocationManager;

- (void).cxx_destruct;
- (void)_locationProvider:(id)arg1 didUpdateLocation:(id)arg2;
- (void)_reportLocationFailureWithError:(id)arg1;
- (void)_reportLocationReset;
- (void)_reportLocationStatus:(SEL)arg1;
- (void)_reportLocationSuccess;
- (void)_reset;
- (void)_setLastLocationReceivedFromMaps:(id)arg1;
- (void)_setTrackingHeading:(bool)arg1;
- (void)_setTrackingLocation:(bool)arg1;
- (void)_startLocationUpdateWithObserver:(id)arg1 desiredAccuracy:(double)arg2;
- (long long)activityType;
- (void)addLocationListener:(id)arg1;
- (void)dealloc;
- (double)desiredAccuracy;
- (double)distanceFilter;
- (id)effectiveBundle;
- (id)effectiveBundleIdentifier;
- (double)expectedGpsUpdateInterval;
- (bool)hasLocation;
- (id)heading;
- (int)headingOrientation;
- (id)init;
- (bool)isHeadingServicesAvailable;
- (bool)isLastLocationStale;
- (bool)isLocationServicesApproved;
- (bool)isLocationServicesAuthorizationNeeded;
- (bool)isLocationServicesAvailable;
- (bool)isLocationServicesDenied;
- (bool)isLocationServicesPossiblyAvailable;
- (bool)isLocationServicesPossiblyAvailable:(id*)arg1;
- (bool)isLocationServicesRestricted;
- (id)lastLocation;
- (id /* block */)locationCorrector;
- (id)locationError;
- (id)locationProvider;
- (void)locationProvider:(id)arg1 didReceiveError:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateHeading:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2;
- (void)locationProvider:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;
- (void)locationProvider:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;
- (void)locationProviderDidChangeAuthorizationStatus:(id)arg1;
- (void)locationProviderDidPauseLocationUpdates:(id)arg1;
- (void)locationProviderDidResumeLocationUpdates:(id)arg1;
- (bool)locationProviderShouldPauseLocationUpdates:(id)arg1;
- (unsigned long long)locationProviderType;
- (id)locationRecorder;
- (void)pushLocation:(id)arg1;
- (void)removeLocationListener:(id)arg1;
- (void)resourceManifestManager:(id)arg1 didChangeActiveTileGroup:(id)arg2 fromOldTileGroup:(id)arg3;
- (void)setActivityType:(long long)arg1;
- (void)setDesiredAccuracy:(double)arg1;
- (void)setDistanceFilter:(double)arg1;
- (void)setEffectiveBundle:(id)arg1;
- (void)setEffectiveBundleIdentifier:(id)arg1;
- (void)setHeadingOrientation:(int)arg1;
- (void)setLastLocation:(id)arg1;
- (void)setLocationCorrector:(id /* block */)arg1;
- (void)setLocationProvider:(id)arg1;
- (void)setLocationProviderType:(unsigned long long)arg1;
- (void)setLocationRecorder:(id)arg1;
- (void)startHeadingUpdateWithObserver:(id)arg1;
- (void)startLocationUpdateWithObserver:(id)arg1;
- (void)stop;
- (void)stopHeadingUpdateWithObserver:(id)arg1;
- (void)stopLocationUpdateWithObserver:(id)arg1;
- (double)timeScale;
- (void)useGPSLocationProvider;
- (void)useHybridLocationProvider;
- (void)useLeechedLocationProvider;
- (void)useTraceLocationProvider:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
