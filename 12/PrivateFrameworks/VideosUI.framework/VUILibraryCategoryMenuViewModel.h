<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VUILibraryCategoryMenuViewModel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideosUI.framework/VUILibraryCategoryMenuViewModel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI (282.60.36)
 */

@interface VUILibraryCategoryMenuViewModel : NSObject <VUIDownloadDataSourceDelegate, VUIMediaEntitiesFetchControllerDelegate> {
    NSDictionary * _artworkInfoDictionaryByPurchaseID;
    VUIMenuDataSource * _categories;
    NSDictionary * _categoryTypeByFetchRequestIdentifier;
    NSArray * _categoryTypes;
    VUICloudClient * _cloudClient;
    <VUILibraryCategoryMenuViewModelDelegate> * _delegate;
    VUIDownloadDataSource * _downloadDataSource;
    NSArray * _genreGroupings;
    bool  _hasDownloadDataSourceFetchCompleted;
    bool  _hasMediaEntitiesFetchCompleted;
    bool  _hasStartedFetch;
    NSArray * _homeShares;
    bool  _isUpdatingRentals;
    NSDictionary * _mediaEntitiesByCategoryType;
    NSDictionary * _mediaEntitiesByGenreIdentifier;
    VUIMediaEntitiesFetchController * _mediaEntitiesFetchController;
    VUIMediaLibrary * _mediaLibrary;
    NSSet * _validCategories;
}

@property (nonatomic, retain) NSDictionary *artworkInfoDictionaryByPurchaseID;
@property (nonatomic, retain) VUIMenuDataSource *categories;
@property (nonatomic, retain) NSDictionary *categoryTypeByFetchRequestIdentifier;
@property (nonatomic, retain) NSArray *categoryTypes;
@property (nonatomic, retain) VUICloudClient *cloudClient;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VUILibraryCategoryMenuViewModelDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) VUIDownloadDataSource *downloadDataSource;
@property (nonatomic, retain) NSArray *genreGroupings;
@property (nonatomic, readonly) bool hasContent;
@property (nonatomic) bool hasDownloadDataSourceFetchCompleted;
@property (nonatomic) bool hasMediaEntitiesFetchCompleted;
@property (nonatomic) bool hasStartedFetch;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSArray *homeShares;
@property (nonatomic) bool isUpdatingRentals;
@property (nonatomic, retain) NSDictionary *mediaEntitiesByCategoryType;
@property (nonatomic, retain) NSDictionary *mediaEntitiesByGenreIdentifier;
@property (nonatomic, retain) VUIMediaEntitiesFetchController *mediaEntitiesFetchController;
@property (nonatomic, retain) VUIMediaLibrary *mediaLibrary;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSSet *validCategories;

- (void).cxx_destruct;
- (void)_addMediaLibraryNotificationObservers;
- (void)_addNotificationObserversWithDeviceLibrary:(id)arg1;
- (bool)_addOrRemoveDownloadCategoryIfNeeded;
- (id /* block */)_categoryTypesSortComparator;
- (id)_categoryTypesWithMediaEntitiesMap:(id)arg1 categoryTypeComparator:(id /* block */)arg2;
- (id)_constructCategoryList;
- (id)_deviceMediaLibrary;
- (id)_fetchRequestsWithMediaLibrary:(id)arg1 categoryTypeMap:(id*)arg2;
- (void)_homeShareMediaLibrariesDidChange:(id)arg1;
- (void)_loadImageUrls:(id)arg1;
- (void)_loadMediaEntityShelves;
- (void)_populateViewModel:(id)arg1;
- (void)_removeMediaLibraryNotificationObservers;
- (void)_removeNotificationObserversWithDeviceLibrary:(id)arg1;
- (void)_updateRentalShelf;
- (id)artworkInfoDictionaryByPurchaseID;
- (id)categories;
- (id)categoryTypeByFetchRequestIdentifier;
- (id)categoryTypes;
- (id)cloudClient;
- (void)controller:(id)arg1 fetchRequests:(id)arg2 didCompleteWithResult:(id)arg3;
- (void)controller:(id)arg1 fetchRequests:(id)arg2 didFailWithError:(id)arg3;
- (void)dealloc;
- (id)delegate;
- (id)downloadDataSource;
- (void)downloadManager:(id)arg1 downloadedFetchDidFinishWithEntities:(id)arg2;
- (void)downloadManager:(id)arg1 downloadsDidChange:(id)arg2;
- (id)genreGroupings;
- (bool)hasContent;
- (bool)hasDownloadDataSourceFetchCompleted;
- (bool)hasMediaEntitiesFetchCompleted;
- (bool)hasStartedFetch;
- (id)homeShares;
- (id)init;
- (id)initWithMediaLibrary:(id)arg1 validCategories:(id)arg2;
- (bool)isUpdatingRentals;
- (id)mediaEntitiesByCategoryType;
- (id)mediaEntitiesByGenreIdentifier;
- (id)mediaEntitiesFetchController;
- (id)mediaLibrary;
- (void)setArtworkInfoDictionaryByPurchaseID:(id)arg1;
- (void)setCategories:(id)arg1;
- (void)setCategoryTypeByFetchRequestIdentifier:(id)arg1;
- (void)setCategoryTypes:(id)arg1;
- (void)setCloudClient:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDownloadDataSource:(id)arg1;
- (void)setGenreGroupings:(id)arg1;
- (void)setHasDownloadDataSourceFetchCompleted:(bool)arg1;
- (void)setHasMediaEntitiesFetchCompleted:(bool)arg1;
- (void)setHasStartedFetch:(bool)arg1;
- (void)setHomeShares:(id)arg1;
- (void)setIsUpdatingRentals:(bool)arg1;
- (void)setMediaEntitiesByCategoryType:(id)arg1;
- (void)setMediaEntitiesByGenreIdentifier:(id)arg1;
- (void)setMediaEntitiesFetchController:(id)arg1;
- (void)setMediaLibrary:(id)arg1;
- (void)setValidCategories:(id)arg1;
- (void)startFetch;
- (void)updateRentalShelf;
- (id)validCategories;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
