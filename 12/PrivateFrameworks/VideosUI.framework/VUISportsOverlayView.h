<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VUISportsOverlayView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideosUI.framework/VUISportsOverlayView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI (282.60.36)
 */

@interface VUISportsOverlayView : UIView <VUIOverlayWithMaterialRendering, VUIScorecardViewDelegate, VUISportsScoreboardManagerDelegate> {
    UIImage * _backgroundImageForMaterialRendering;
    bool  _backgroundImageHasChanged;
    UICollectionReusableView * _containingCell;
    bool  _isHostSetup;
    IKImageElement * _logoElement;
    struct CGSize { 
        double width; 
        double height; 
    }  _logoSize;
    _TVImageView * _logoView;
    VUISportsOverlayLayout * _overlayLayout;
    NSOperation * _pendingOperation;
    VUISportsScoreboardViewModel * _scoreboardViewModel;
    VUIScorecardView * _scorecardView;
    UIImage * _scorecardViewBackgroundImage;
    VUITextBadgeView * _textBadge;
    bool  _textBadgeHasMaterial;
    IKViewElement * _viewElement;
}

@property (nonatomic, retain) UIImage *backgroundImageForMaterialRendering;
@property (nonatomic) bool backgroundImageHasChanged;
@property (nonatomic) UICollectionReusableView *containingCell;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isHostSetup;
@property (nonatomic, retain) IKImageElement *logoElement;
@property (nonatomic) struct CGSize { double x1; double x2; } logoSize;
@property (nonatomic, retain) _TVImageView *logoView;
@property (nonatomic, retain) VUISportsOverlayLayout *overlayLayout;
@property (nonatomic, retain) NSOperation *pendingOperation;
@property (nonatomic, retain) VUISportsScoreboardViewModel *scoreboardViewModel;
@property (nonatomic, retain) VUIScorecardView *scorecardView;
@property (nonatomic, retain) UIImage *scorecardViewBackgroundImage;
@property (readonly) Class superclass;
@property (nonatomic, retain) VUITextBadgeView *textBadge;
@property (nonatomic) bool textBadgeHasMaterial;
@property (nonatomic, retain) IKViewElement *viewElement;

+ (id)_sharedDrawQueue;
+ (bool)_viewBackgroundImageNeedsUpdatingWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 currentBackgroundImage:(id)arg2;
+ (id)sportsOverlayViewFromElement:(id)arg1 overlayLayout:(id)arg2 existingView:(id)arg3;

- (void).cxx_destruct;
- (void)_redrawScorecardViewWithDuration:(double)arg1;
- (void)_redrawTextBadgeWithDuration:(double)arg1;
- (void)_redrawView:(id)arg1 withDuration:(double)arg2;
- (void)_registerOverlayView;
- (bool)_scorecardViewBackgroundImageNeedsUpdating;
- (bool)_scorecardViewRequiresBackgroundImage;
- (void)_setupHosting;
- (void)_teardownHosting;
- (bool)_textBadgeBackgroundImageNeedsUpdating;
- (bool)_textBadgeRequiresBackgroundImage;
- (void)_unregisterOverlayView;
- (void)_updateBackgroundImagesWithCompletedOperation:(id)arg1;
- (void)_updateBackgroundMaterialImagesWithBackgroundImageSize:(struct CGSize { double x1; double x2; })arg1 performSynchronously:(bool)arg2;
- (void)_updateBadgePosition;
- (bool)_updateScoreView:(id)arg1;
- (bool)_updateTextBadge:(id)arg1;
- (int)backgroundBlendModeForScoreValueInRow:(long long)arg1 atIndex:(long long)arg2;
- (id)backgroundImageForMaterialRendering;
- (id)backgroundImageForScorecardViewMaterial:(id)arg1;
- (bool)backgroundImageHasChanged;
- (void)backgroundImageSizeDidChange:(struct CGSize { double x1; double x2; })arg1;
- (id)containingCell;
- (void)dealloc;
- (id)getJSContextDictionary;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isHostSetup;
- (void)layoutSubviews;
- (id)logoElement;
- (struct CGSize { double x1; double x2; })logoSize;
- (id)logoView;
- (double)maximumWidthForScorecardView:(id)arg1;
- (long long)numberOfRowsInScorecardView:(id)arg1;
- (long long)numberOfScoreValuesForScorecardView:(id)arg1 inRow:(long long)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)overlayLayout;
- (id)pendingOperation;
- (void)reset;
- (id)scoreValue:(id)arg1 inRow:(long long)arg2 atIndex:(long long)arg3;
- (id)scoreboardViewModel;
- (id)scorecardView;
- (id)scorecardViewBackgroundImage;
- (void)setBackgroundImageForMaterialRendering:(id)arg1;
- (void)setBackgroundImageHasChanged:(bool)arg1;
- (void)setContainingCell:(id)arg1;
- (void)setIsHostSetup:(bool)arg1;
- (void)setLogoElement:(id)arg1;
- (void)setLogoSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setLogoView:(id)arg1;
- (void)setOverlayLayout:(id)arg1;
- (void)setPendingOperation:(id)arg1;
- (void)setScoreboardViewModel:(id)arg1;
- (void)setScorecardView:(id)arg1;
- (void)setScorecardViewBackgroundImage:(id)arg1;
- (void)setTextBadge:(id)arg1;
- (void)setTextBadgeHasMaterial:(bool)arg1;
- (void)setViewElement:(id)arg1;
- (long long)styleForScorecardView:(id)arg1;
- (id)textBadge;
- (bool)textBadgeHasMaterial;
- (void)updateScoreboard:(id)arg1;
- (id)viewElement;
- (void)willMoveToWindow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
