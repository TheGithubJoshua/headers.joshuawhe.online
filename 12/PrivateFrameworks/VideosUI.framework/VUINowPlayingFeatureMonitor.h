<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VUINowPlayingFeatureMonitor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideosUI.framework/VUINowPlayingFeatureMonitor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI (282.60.36)
 */

@interface VUINowPlayingFeatureMonitor : NSObject <TVMediaPlaybackManagerDelegate> {
    NSMutableDictionary * _boundaryTimeObserverInfos;
    <VUINowPlayingFeatureMonitorDelegate> * _delegate;
    struct { 
        bool respondsToFeatureDidChangeState; 
        bool respondsToActiveFeatureChangedFrom; 
    }  _delegateFlags;
    id  _elapsedTimeObserverToken;
    NSObject<OS_dispatch_queue> * _elapsedTimeProcessingQueue;
    NSMutableArray * _elapsedTimes;
    NSMutableArray * _enabledUIModes;
    NSMapTable * _featureBoundaryInfos;
    NSMapTable * _featureDependencies;
    <VUINowPlayingFeature> * _featureLastRequestedUI;
    NSMapTable * _featureTimers;
    NSMapTable * _featureTokens;
    NSMutableSet * _features;
    double  _lastProcessedElapsedTime;
    bool  _observingElapsedTime;
    TVMediaPlaybackManager * _playbackManager;
    NSObject<TVPAVFPlayback> * _player;
}

@property (nonatomic, readonly) NSArray *allFeatures;
@property (nonatomic, retain) NSMutableDictionary *boundaryTimeObserverInfos;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <VUINowPlayingFeatureMonitorDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) id elapsedTimeObserverToken;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *elapsedTimeProcessingQueue;
@property (nonatomic, retain) NSMutableArray *elapsedTimes;
@property (nonatomic, retain) NSMutableArray *enabledUIModes;
@property (nonatomic, retain) NSMapTable *featureBoundaryInfos;
@property (nonatomic, retain) NSMapTable *featureDependencies;
@property (nonatomic, retain) <VUINowPlayingFeature> *featureLastRequestedUI;
@property (nonatomic, retain) NSMapTable *featureTimers;
@property (nonatomic, retain) NSMapTable *featureTokens;
@property (nonatomic, retain) NSMutableSet *features;
@property (readonly) unsigned long long hash;
@property (nonatomic) double lastProcessedElapsedTime;
@property (nonatomic) bool observingElapsedTime;
@property (nonatomic, retain) TVMediaPlaybackManager *playbackManager;
@property (nonatomic, retain) NSObject<TVPAVFPlayback> *player;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_activateFeature:(id)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (id)_activeFeature;
- (id)_activeFeatures;
- (void)_addObservedToken:(id)arg1 forFeature:(id)arg2;
- (void)_addTimeObservingForFeature:(id)arg1 withStartTime:(double)arg2 andHandler:(id /* block */)arg3;
- (void)_cancelFeatureTimersIfNeeded;
- (void)_cancelTimerForFeature:(id)arg1;
- (void)_cleanUpEverything;
- (void)_cleanupFeature:(id)arg1;
- (void)_deactivateFeature:(id)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (bool)_hasActiveFeaturesInArray:(id)arg1;
- (bool)_hasAnyActiveFeature;
- (bool)_isElapsedTimeWithinFeatureTimeWindow:(id)arg1;
- (bool)_isHybridFeature:(id)arg1;
- (bool)_isTVAdvisoryFeature:(id)arg1;
- (bool)_isTimeBoundFeature:(id)arg1;
- (bool)_isTimerTriggeredFeature:(id)arg1;
- (bool)_isUserTriggeredFeature:(id)arg1;
- (bool)_needsUIForFeature:(id)arg1;
- (id)_observerInfoForFeature:(id)arg1 matchingTime:(double)arg2;
- (void)_playbackStateChangedNottificaiton:(id)arg1;
- (void)_processAnyTimeBoundFeatures;
- (void)_processElapsedTime:(double)arg1;
- (void)_processElapsedTimeOnInternalQueue:(double)arg1 withCompletion:(id /* block */)arg2;
- (void)_processFeature:(id)arg1;
- (void)_processLastElapsedTime;
- (void)_processTimeBoundFeature:(id)arg1;
- (void)_processTimerTriggeredFeature:(id)arg1;
- (void)_processUserTriggeredFeature:(id)arg1 activate:(bool)arg2 animated:(bool)arg3;
- (void)_registerPlaybackStateChangeNotification;
- (void)_removeAllObservedTokensForFeature:(id)arg1;
- (void)_removeTimeObservingForFeature:(id)arg1 withStartTime:(double)arg2;
- (void)_scheduleDeactivationOfTimeBoundFeature:(id)arg1;
- (bool)_shouldActivateTimeBoundFeatureInitially:(id)arg1;
- (bool)_shouldAnimateFeature:(id)arg1;
- (void)_startObservingElapsedTime;
- (id)_timeBoundFeatures;
- (void)_unregisterPlaybackStateNotification;
- (id)activeFeatureForType:(unsigned long long)arg1;
- (void)addFeature:(id)arg1;
- (void)addFeature:(id)arg1 withDependencyToPreferredFeatures:(id)arg2;
- (id)allFeatures;
- (id)boundaryTimeObserverInfos;
- (void)dealloc;
- (id)delegate;
- (id)elapsedTimeObserverToken;
- (id)elapsedTimeProcessingQueue;
- (id)elapsedTimes;
- (void)enableUIMode:(long long)arg1 enabled:(bool)arg2;
- (id)enabledUIModes;
- (void)evaluateFeature:(id)arg1;
- (id)featureBoundaryInfos;
- (id)featureDependencies;
- (id)featureLastRequestedUI;
- (id)featureTimers;
- (id)featureTokens;
- (id)features;
- (id)featuresForType:(unsigned long long)arg1;
- (id)init;
- (double)lastProcessedElapsedTime;
- (bool)mediaPlaybackManager:(id)arg1 shouldEnableUIModeImplicitly:(long long)arg2;
- (void)mediaPlaybackManager:(id)arg1 shouldHideUI:(bool)arg2 animated:(bool)arg3 animations:(id /* block */)arg4 completion:(id /* block */)arg5;
- (bool)observingElapsedTime;
- (id)playbackManager;
- (id)player;
- (void)removeFeature:(id)arg1;
- (void)removeFeaturesMatching:(id)arg1;
- (void)setBoundaryTimeObserverInfos:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setElapsedTimeObserverToken:(id)arg1;
- (void)setElapsedTimeProcessingQueue:(id)arg1;
- (void)setElapsedTimes:(id)arg1;
- (void)setEnabledUIModes:(id)arg1;
- (void)setFeatureBoundaryInfos:(id)arg1;
- (void)setFeatureDependencies:(id)arg1;
- (void)setFeatureLastRequestedUI:(id)arg1;
- (void)setFeatureTimers:(id)arg1;
- (void)setFeatureTokens:(id)arg1;
- (void)setFeatures:(id)arg1;
- (void)setLastProcessedElapsedTime:(double)arg1;
- (void)setObservingElapsedTime:(bool)arg1;
- (void)setPlaybackManager:(id)arg1;
- (void)setPlayer:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
