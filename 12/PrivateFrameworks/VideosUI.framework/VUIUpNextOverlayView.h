<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VUIUpNextOverlayView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideosUI.framework/VUIUpNextOverlayView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI (282.60.36)
 */

@interface VUIUpNextOverlayView : UIView <VUITextBadgeViewDelegate> {
    IKViewElement * _appImageElement;
    _TVImageView * _appImageView;
    bool  _appImageViewShowOnlyOnFocus;
    NSNumber * _autoPlayDuration;
    VUICountDownProgressIndicator * _autoPlayIndicator;
    IKViewElement * _badgeElement;
    bool  _badgeShowOnlyOnFocus;
    _TVImageView * _badgeView;
    CALayer * _blurMaskLayer;
    CALayer * _gradientLayer;
    UIView * _gradientView;
    bool  _isFocused;
    IKViewElement * _logoImageElement;
    _TVImageView * _logoImageView;
    bool  _logoImageViewShowOnlyOnFocus;
    VUIUpNextOverlayLayout * _overlayLayout;
    _TVProgressView * _progressView;
    IKViewElement * _progressViewElement;
    bool  _progressViewShowOnlyOnFocus;
    IKViewElement * _subtitleElement;
    VUILabel * _subtitleLabel;
    bool  _subtitleLabelShowOnlyOnFocus;
    VUITextBadgeView * _textBadge;
    IKViewElement * _textBadgeElement;
    IKViewElement * _textElement;
    VUILabel * _textLabel;
    bool  _textLabelShowOnlyOnFocus;
    IKViewElement * _viewElement;
}

@property (nonatomic, retain) IKViewElement *appImageElement;
@property (nonatomic, retain) _TVImageView *appImageView;
@property (nonatomic) bool appImageViewShowOnlyOnFocus;
@property (nonatomic, retain) NSNumber *autoPlayDuration;
@property (nonatomic, retain) VUICountDownProgressIndicator *autoPlayIndicator;
@property (nonatomic, retain) IKViewElement *badgeElement;
@property (nonatomic) bool badgeShowOnlyOnFocus;
@property (nonatomic, retain) _TVImageView *badgeView;
@property (nonatomic, retain) CALayer *blurMaskLayer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CALayer *gradientLayer;
@property (nonatomic, retain) UIView *gradientView;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isFocused;
@property (nonatomic, retain) IKViewElement *logoImageElement;
@property (nonatomic, retain) _TVImageView *logoImageView;
@property (nonatomic) bool logoImageViewShowOnlyOnFocus;
@property (nonatomic, retain) VUIUpNextOverlayLayout *overlayLayout;
@property (nonatomic, retain) _TVProgressView *progressView;
@property (nonatomic, retain) IKViewElement *progressViewElement;
@property (nonatomic) bool progressViewShowOnlyOnFocus;
@property (nonatomic, retain) IKViewElement *subtitleElement;
@property (nonatomic, retain) VUILabel *subtitleLabel;
@property (nonatomic) bool subtitleLabelShowOnlyOnFocus;
@property (readonly) Class superclass;
@property (nonatomic, retain) VUITextBadgeView *textBadge;
@property (nonatomic, retain) IKViewElement *textBadgeElement;
@property (nonatomic, retain) IKViewElement *textElement;
@property (nonatomic, retain) VUILabel *textLabel;
@property (nonatomic) bool textLabelShowOnlyOnFocus;
@property (nonatomic, retain) IKViewElement *viewElement;

+ (id)overlayViewFromElement:(id)arg1 overlayLayout:(id)arg2 existingView:(id)arg3;

- (void).cxx_destruct;
- (id)appImageElement;
- (id)appImageView;
- (bool)appImageViewShowOnlyOnFocus;
- (id)autoPlayDuration;
- (id)autoPlayIndicator;
- (id)badgeElement;
- (bool)badgeShowOnlyOnFocus;
- (id)badgeView;
- (id)blurMaskLayer;
- (void)dealloc;
- (id)gradientLayer;
- (id)gradientView;
- (bool)isFocused;
- (void)layoutSubviews;
- (id)logoImageElement;
- (id)logoImageView;
- (bool)logoImageViewShowOnlyOnFocus;
- (id)overlayLayout;
- (id)progressView;
- (id)progressViewElement;
- (bool)progressViewShowOnlyOnFocus;
- (void)reset;
- (void)setAppImageElement:(id)arg1;
- (void)setAppImageView:(id)arg1;
- (void)setAppImageViewShowOnlyOnFocus:(bool)arg1;
- (void)setAutoPlayDuration:(id)arg1;
- (void)setAutoPlayIndicator:(id)arg1;
- (void)setBadgeElement:(id)arg1;
- (void)setBadgeShowOnlyOnFocus:(bool)arg1;
- (void)setBadgeView:(id)arg1;
- (void)setBlurMaskLayer:(id)arg1;
- (void)setGradientLayer:(id)arg1;
- (void)setGradientView:(id)arg1;
- (void)setIsFocused:(bool)arg1;
- (void)setLogoImageElement:(id)arg1;
- (void)setLogoImageView:(id)arg1;
- (void)setLogoImageViewShowOnlyOnFocus:(bool)arg1;
- (void)setOverlayLayout:(id)arg1;
- (void)setProgressView:(id)arg1;
- (void)setProgressViewElement:(id)arg1;
- (void)setProgressViewShowOnlyOnFocus:(bool)arg1;
- (void)setSubtitleElement:(id)arg1;
- (void)setSubtitleLabel:(id)arg1;
- (void)setSubtitleLabelShowOnlyOnFocus:(bool)arg1;
- (void)setTextBadge:(id)arg1;
- (void)setTextBadgeElement:(id)arg1;
- (void)setTextElement:(id)arg1;
- (void)setTextLabel:(id)arg1;
- (void)setTextLabelShowOnlyOnFocus:(bool)arg1;
- (void)setViewElement:(id)arg1;
- (id)subtitleElement;
- (id)subtitleLabel;
- (bool)subtitleLabelShowOnlyOnFocus;
- (id)textBadge;
- (id)textBadgeElement;
- (void)textBadgeViewContentsUpdated:(id)arg1;
- (id)textElement;
- (id)textLabel;
- (bool)textLabelShowOnlyOnFocus;
- (id)viewElement;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
