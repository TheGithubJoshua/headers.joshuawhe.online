<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VUIISMediaItem.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideosUI.framework/VUIISMediaItem.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI (282.60.36)
 */

@interface VUIISMediaItem : TVPBaseMediaItem <TVPContentKeyLoading> {
    NSString * _assetIDForStopping;
    NSData * _certificateData;
    bool  _disableScrubbing;
    unsigned long long  _loadingContext;
    NSMutableArray * _requestsAwaitingCertFetch;
    long long  _state;
    NSURL * _stopServerURL;
    NSDictionary * _tokenServerParameters;
    NSURL * _tokenServerURL;
    NSURL * _url;
}

@property (nonatomic, retain) NSString *assetIDForStopping;
@property (nonatomic, retain) NSData *certificateData;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableScrubbing;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long loadingContext;
@property (nonatomic, retain) NSMutableArray *requestsAwaitingCertFetch;
@property (nonatomic) long long state;
@property (nonatomic, retain) NSURL *stopServerURL;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSDictionary *tokenServerParameters;
@property (nonatomic, retain) NSURL *tokenServerURL;
@property (nonatomic, retain) NSURL *url;

+ (void)initialize;

- (void).cxx_destruct;
- (bool)_allowedToRetryRequestForError:(id)arg1 response:(id)arg2;
- (id)_assetIDDataForKeyRequest:(id)arg1;
- (id)_assetIDForKeyRequest:(id)arg1;
- (id)_certificateURLForKeyRequest:(id)arg1;
- (void)_failKeyRequests:(id)arg1 withError:(id)arg2;
- (void)_fetchTokenForAssetID:(id)arg1 completion:(id /* block */)arg2;
- (void)_generateKeyRequestDataForKeyRequests:(id)arg1 completion:(id /* block */)arg2;
- (id)_keyServerURLForKeyRequest:(id)arg1;
- (id)_linearServiceRequestForURL:(id)arg1 assetID:(id)arg2;
- (void)_loadCertificateDataFromURL:(id)arg1 loadingContext:(unsigned long long)arg2 attemptNumber:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (void)_parseCertificateURL:(id*)arg1 keyServerURL:(id*)arg2 assetID:(id*)arg3 fromKeyRequest:(id)arg4;
- (double)_randomRetryDelayForFailedAttemptNumber:(unsigned long long)arg1;
- (void)_sendKeyRequestsToServer:(id)arg1 token:(id)arg2;
- (void)_sendStopForAssetID:(id)arg1;
- (void)_sendURLRequestToServer:(id)arg1 forKeyRequest:(id)arg2 attemptNumber:(unsigned long long)arg3;
- (void)_startKeyRequests:(id)arg1 token:(id)arg2;
- (void)_userPlaybackSettingsDidChange:(id)arg1;
- (id)assetIDForStopping;
- (id)certificateData;
- (void)cleanUpMediaItem;
- (bool)disableScrubbing;
- (bool)hasTrait:(id)arg1;
- (id)initWithURL:(id)arg1 tokenServerURL:(id)arg2 stopServerURL:(id)arg3 tokenServerParameters:(id)arg4;
- (bool)isEqualToMediaItem:(id)arg1;
- (void)loadFairPlayStreamingKeyRequests:(id)arg1;
- (unsigned long long)loadingContext;
- (id)mediaItemMetadataForProperty:(id)arg1;
- (id)mediaItemURL;
- (id)requestsAwaitingCertFetch;
- (void)setAssetIDForStopping:(id)arg1;
- (void)setCertificateData:(id)arg1;
- (void)setDisableScrubbing:(bool)arg1;
- (void)setLoadingContext:(unsigned long long)arg1;
- (void)setRequestsAwaitingCertFetch:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setStopServerURL:(id)arg1;
- (void)setTokenServerParameters:(id)arg1;
- (void)setTokenServerURL:(id)arg1;
- (void)setUrl:(id)arg1;
- (long long)state;
- (id)stopServerURL;
- (id)tokenServerParameters;
- (id)tokenServerURL;
- (id)url;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
