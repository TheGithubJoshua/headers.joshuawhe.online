<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VUIStoreFPSKeyLoader.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideosUI.framework/VUIStoreFPSKeyLoader.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideosUI.framework/VideosUI (282.60.36)
 */

@interface VUIStoreFPSKeyLoader : NSObject {
    NSData * _certificateData;
    NSURL * _certificateURL;
    TVPContentKeySession * _contentKeySession;
    NSObject<VUIStoreFPSKeyLoaderDelegate> * _delegate;
    bool  _didSkipRentalCheckout;
    TVPPlaybackReportingEventCollection * _eventCollection;
    bool  _hasLoadedAnyStreamingKeyRequests;
    NSDate * _keyExpirationDate;
    NSURL * _keyServerURL;
    NSNumber * _rentalID;
    NSDate * _rentalPlaybackStartDate;
    NSMutableArray * _requestsAwaitingCertFetch;
    TVPContentKeyRequest * _savedRequestToUseForStopping;
    NSNumber * _secureInvalidationDSID;
    NSURL * _secureInvalidationNonceURL;
    long long  _state;
}

@property (nonatomic, retain) NSData *certificateData;
@property (nonatomic, copy) NSURL *certificateURL;
@property (nonatomic, retain) TVPContentKeySession *contentKeySession;
@property (nonatomic) NSObject<VUIStoreFPSKeyLoaderDelegate> *delegate;
@property (nonatomic) bool didSkipRentalCheckout;
@property (nonatomic, retain) TVPPlaybackReportingEventCollection *eventCollection;
@property (nonatomic) bool hasLoadedAnyStreamingKeyRequests;
@property (nonatomic, retain) NSDate *keyExpirationDate;
@property (nonatomic, copy) NSURL *keyServerURL;
@property (nonatomic, retain) NSNumber *rentalID;
@property (nonatomic, retain) NSDate *rentalPlaybackStartDate;
@property (nonatomic, retain) NSMutableArray *requestsAwaitingCertFetch;
@property (nonatomic, retain) TVPContentKeyRequest *savedRequestToUseForStopping;
@property (nonatomic, retain) NSNumber *secureInvalidationDSID;
@property (nonatomic, retain) NSURL *secureInvalidationNonceURL;
@property (nonatomic) long long state;

+ (void)_loadAndCacheCertificateDataForValidURL:(id)arg1 completion:(id /* block */)arg2;
+ (void)_loadFPSURLsFromStoreBagWithCompletion:(id /* block */)arg1;
+ (void)initialize;
+ (void)preFetchFPSCertificate;

- (void).cxx_destruct;
- (id)_bodyJSONDataForRequests:(id)arg1 isStopRequest:(bool)arg2;
- (id)_errorForStoreResponseStatus:(long long)arg1 deviceLimit:(id)arg2;
- (void)_failKeyRequests:(id)arg1 withError:(id)arg2;
- (void)_generateKeyRequestDataForKeyRequests:(id)arg1 completion:(id /* block */)arg2;
- (void)_generateSecureInvalidationDataForFirstRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)_generateSecureInvalidationDataForRequests:(id)arg1 completion:(id /* block */)arg2;
- (void)_handleResponseDict:(id)arg1 forKeyRequest:(id)arg2;
- (void)_handleResponseDicts:(id)arg1 forKeyRequests:(id)arg2;
- (void)_handleResponseForKeyRequests:(id)arg1 responseData:(id)arg2 URLResponse:(id)arg3 error:(id)arg4;
- (void)_invalidateValidKeyRequestsInBatches:(id)arg1 completion:(id /* block */)arg2;
- (id)_jsonDictionaryForRequest:(id)arg1 isStopRequest:(bool)arg2;
- (void)_loadCertificateDataWithCompletion:(id /* block */)arg1;
- (void)_loadNonceDataForRequests:(id)arg1 completion:(id /* block */)arg2;
- (void)_sendKeyRequestsToServer:(id)arg1 isStopRequest:(bool)arg2 isSecureInvalidationRequest:(bool)arg3 completion:(id /* block */)arg4;
- (void)_startKeyRequests:(id)arg1 completion:(id /* block */)arg2;
- (void)_startKeyRequestsInBatches:(id)arg1 completion:(id /* block */)arg2;
- (id)certificateData;
- (id)certificateURL;
- (id)contentKeySession;
- (id)delegate;
- (bool)didSkipRentalCheckout;
- (id)eventCollection;
- (bool)hasLoadedAnyStreamingKeyRequests;
- (id)initWithCertificateURL:(id)arg1 keyServerURL:(id)arg2;
- (void)invalidateKeysWithRequests:(id)arg1 completion:(id /* block */)arg2;
- (id)keyExpirationDate;
- (id)keyServerURL;
- (void)loadFairPlayStreamingKeyRequests:(id)arg1 completion:(id /* block */)arg2;
- (id)rentalID;
- (id)rentalPlaybackStartDate;
- (id)requestsAwaitingCertFetch;
- (id)savedRequestToUseForStopping;
- (id)secureInvalidationDSID;
- (id)secureInvalidationNonceURL;
- (void)sendStopRequest;
- (void)setCertificateData:(id)arg1;
- (void)setCertificateURL:(id)arg1;
- (void)setContentKeySession:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidSkipRentalCheckout:(bool)arg1;
- (void)setEventCollection:(id)arg1;
- (void)setHasLoadedAnyStreamingKeyRequests:(bool)arg1;
- (void)setKeyExpirationDate:(id)arg1;
- (void)setKeyServerURL:(id)arg1;
- (void)setRentalID:(id)arg1;
- (void)setRentalPlaybackStartDate:(id)arg1;
- (void)setRequestsAwaitingCertFetch:(id)arg1;
- (void)setSavedRequestToUseForStopping:(id)arg1;
- (void)setSecureInvalidationDSID:(id)arg1;
- (void)setSecureInvalidationNonceURL:(id)arg1;
- (void)setState:(long long)arg1;
- (long long)state;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
