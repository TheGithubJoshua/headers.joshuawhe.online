<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXVisualAlertManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VisualAlert.framework/AXVisualAlertManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VisualAlert.framework/VisualAlert (1)
 */

@interface AXVisualAlertManager : NSObject <DNDStateUpdateListener> {
    NSDictionary * _activePattern;
    unsigned long long  _activePatternCursor;
    unsigned long long  _alertTypes;
    AXCameraTorchManagerBackgroundAdapter * _asyncManagerAdapter;
    NSMutableArray * _bulletins;
    bool  _captureSessionRunning;
    VISAXNotificationHandler * _deviceLockStateChangedNotificationHandler;
    bool  _isDeviceLocked;
    bool  _isQuietModeEnabled;
    bool  _isRingerSwitchSilent;
    bool  _isTorchEnabledInControlCenter;
    NSArray * _notificationHandlers;
    NSDictionary * _patternToUseForVisualAlertAfterCaptureSessionStopsRunning;
    NSDictionary * _patterns;
    int  _ringerStateNotifyToken;
    bool  _shouldRepeatPattern;
    bool  _skipAutomaticStopOnUserInteraction;
    AXDispatchTimer * _timer;
    bool  _torchDeviceOn;
    bool  _torchDeviceOpen;
    AXDispatchTimer * _torchForceShutdownTimer;
    VISAXNotificationHandler * _torchInControlCenterWasEnabledNotificationHandler;
    unsigned long long  _typeToUseForVisualAlertAfterCaptureSessionStopsRunning;
    bool  _videoConferenceCallRinging;
    DNDStateService * disturbanceService;
}

@property (setter=_setActivePattern:, nonatomic, retain) NSDictionary *_activePattern;
@property (nonatomic, readonly) AXCameraTorchManagerBackgroundAdapter *_asyncManagerAdapter;
@property (nonatomic, readonly) NSDictionary *_patterns;
@property (getter=_isTorchDeviceOn, nonatomic, readonly) bool _torchDeviceOn;
@property (getter=_isTorchDeviceOpen, nonatomic, readonly) bool _torchDeviceOpen;
@property (setter=_setTypeToUseForVisualAlertAfterCaptureSessionStopsRunning:, nonatomic) unsigned long long _typeToUseForVisualAlertAfterCaptureSessionStopsRunning;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) DNDStateService *disturbanceService;
@property (readonly) unsigned long long hash;
@property (nonatomic) int ringerStateNotifyToken;
@property (readonly) Class superclass;

+ (void)initialize;
+ (id)sharedVisualAlertManager;

- (void).cxx_destruct;
- (id)_activePattern;
- (id)_asyncManagerAdapter;
- (void)_beginVisualAlertForType:(unsigned long long)arg1 repeat:(bool)arg2;
- (void)_beginVisualAlertForType:(unsigned long long)arg1 repeat:(bool)arg2 skipAutomaticStopOnUserInteraction:(bool)arg3;
- (void)_endVisualAlert;
- (void)_handleBeginVisualAlertForAlarmWithSound:(bool)arg1;
- (void)_handleBeginVisualAlertForIncomingCall;
- (void)_handleBeginVisualAlertForIncomingVideoConferenceCall;
- (void)_handleCaptureSessionDidStartRunning;
- (void)_handleCaptureSessionDidStopRunning;
- (void)_handleDeviceWasLocked;
- (void)_handleDeviceWasUnlocked;
- (void)_handleEndVisualAlertForAlarm;
- (void)_handleEndVisualAlertForIncomingCall;
- (void)_handleEndVisualAlertForIncomingVideoConferenceCall;
- (void)_handleLockButtonPressed;
- (void)_handleQuietModeWasDisabled;
- (void)_handleQuietModeWasEnabled;
- (void)_handleRingerSwitchToggled;
- (void)_handleSecondaryVisualAlertManagerDidStart;
- (void)_handleTorchInControlCenterWasDisabled;
- (void)_handleTorchInControlCenterWasEnabled;
- (void)_handleVideoConferenceCallRinging;
- (void)_handleVisualAlertForExternalApplication;
- (void)_handleVisualAlertForIncomingMessage;
- (void)_handleVisualAlertForRegularNotification;
- (void)_handleVolumeChanged;
- (bool)_hasVideoConferenceCameraTorchManager;
- (void)_insertCustomLogicForSystemWideServer;
- (bool)_isTorchDeviceOn;
- (bool)_isTorchDeviceOpen;
- (bool)_isTorchEnabledInControlCenter;
- (id)_normalizedStrobePatternForOriginalPattern:(id)arg1;
- (id)_patterns;
- (void)_processNextVisualAlertComponent;
- (void)_setActivePattern:(id)arg1;
- (void)_setTorchDeviceOn:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)_setTorchDeviceOpen:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)_setTypeToUseForVisualAlertAfterCaptureSessionStopsRunning:(unsigned long long)arg1;
- (bool)_shouldHandleVisualAlertsForVideoConferenceCallsInConferenceFramework;
- (void)_springBoardLockButtonPress:(id)arg1;
- (void)_springBoardLockStateChange:(id)arg1;
- (void)_springBoardVolumeChange:(id)arg1;
- (void)_startForAlertTypes:(unsigned long long)arg1 cameraTorchManager:(id)arg2;
- (void)_stop;
- (bool)_supportsVisualAlertsForVideoConferenceCalls;
- (unsigned long long)_typeToUseForVisualAlertAfterCaptureSessionStopsRunning;
- (void)addBulletin:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)disturbanceService;
- (id)existingBulletinForBulletin:(id)arg1;
- (id)init;
- (void)removeBulletin:(id)arg1;
- (int)ringerStateNotifyToken;
- (void)setDisturbanceService:(id)arg1;
- (void)setRingerStateNotifyToken:(int)arg1;
- (void)startForAlertTypes:(unsigned long long)arg1 cameraTorchManager:(id)arg2;
- (void)stateService:(id)arg1 didReceiveDoNotDisturbStateUpdate:(id)arg2;
- (void)stop;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
