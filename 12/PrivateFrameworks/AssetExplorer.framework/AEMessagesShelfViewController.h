<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AEMessagesShelfViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssetExplorer.framework/AEMessagesShelfViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssetExplorer.framework/AssetExplorer (1)
 */

@interface AEMessagesShelfViewController : UIViewController <AEMessagesShelfLayoutDelegate, CKPluginEntryViewController, PUAssetExplorerReviewScreenViewControllerDelegate, PXAssetsSceneDelegate, PXChangeObserver, PXReusableObjectPoolDelegate, PXTileSource, PXTilingControllerScrollDelegate, PXTilingControllerTransitionDelegate, UIGestureRecognizerDelegate> {
    PUReviewDataSource * __dataSource;
    long long  __indexToScrollTo;
    PUReviewAssetsDataSourceManager * __internalReviewDataSourceManager;
    PUReviewAssetsMediaProvider * __internalReviewMediaProvider;
    AEPackageTransport * __packageTransport;
    UIColor * __roundedCornerOverlayFillColor;
    PXAssetsScene * __sceneController;
    PXScrollViewController * __scrollViewController;
    PXBasicUIViewTileAnimator * __tileAnimator;
    NSMutableSet * __tilesInUse;
    PXTilingController * __tilingController;
    AEWrappedDataSourceManager * __wrappedDataSourceManager;
}

@property (nonatomic, readonly) PUReviewDataSource *_dataSource;
@property (setter=_setIndexToScrollTo:, nonatomic) long long _indexToScrollTo;
@property (nonatomic, readonly) PUReviewAssetsDataSourceManager *_internalReviewDataSourceManager;
@property (nonatomic, readonly) PUReviewAssetsMediaProvider *_internalReviewMediaProvider;
@property (nonatomic, readonly) AEPackageTransport *_packageTransport;
@property (nonatomic, retain) UIColor *_roundedCornerOverlayFillColor;
@property (nonatomic, readonly) PXAssetsScene *_sceneController;
@property (nonatomic, readonly) PXScrollViewController *_scrollViewController;
@property (nonatomic, readonly) PXBasicUIViewTileAnimator *_tileAnimator;
@property (nonatomic, readonly) NSMutableSet *_tilesInUse;
@property (nonatomic, readonly) PXTilingController *_tilingController;
@property (nonatomic, readonly) AEWrappedDataSourceManager *_wrappedDataSourceManager;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) bool loadedContentView;
@property (readonly) Class superclass;
@property (readonly) bool wantsClearButton;
@property (readonly) bool wantsEdgeToEdgeLayout;

- (void).cxx_destruct;
- (id)_currentAssetsDataSource;
- (id)_dataSource;
- (void)_immediatelyGenerateAndStagePackageFromReviewAsset:(id)arg1 suppressLivePhoto:(bool)arg2 mediaOrigin:(long long)arg3;
- (long long)_indexToScrollTo;
- (id)_internalReviewDataSourceManager;
- (id)_internalReviewMediaProvider;
- (id)_packageTransport;
- (void)_presentReviewForAssetReference:(id)arg1;
- (void)_removeFromShelf:(id)arg1;
- (id)_roundedCornerOverlayFillColor;
- (id)_sceneController;
- (id)_scrollViewController;
- (void)_setIndexToScrollTo:(long long)arg1;
- (id)_tileAnimator;
- (id)_tilesInUse;
- (id)_tilingController;
- (void)_toggleIris:(id)arg1;
- (void)_transportStagingStateDidChange;
- (id)_traverseHierarchyForFillColorStartingWithView:(id)arg1;
- (id)_wrappedDataSourceManager;
- (bool)assetExplorerReviewScreenViewController:(id)arg1 canPerformActionType:(unsigned long long)arg2 onAsset:(id)arg3 inAssetCollection:(id)arg4;
- (void)assetExplorerReviewScreenViewController:(id)arg1 didPerformCompletionAction:(unsigned long long)arg2 withSelectedAssetUUIDs:(id)arg3 livePhotoDisabledAssetUUIDs:(id)arg4 substituteAssetsByUUID:(id)arg5;
- (void)assetExplorerReviewScreenViewControllerDidPressCancel:(id)arg1;
- (id)assetsScene:(id)arg1 layoutForDataSource:(id)arg2;
- (id)assetsScene:(id)arg1 transitionAnimationCoordinatorForChange:(id)arg2;
- (void)checkInTile:(void*)arg1 withIdentifier:(struct PXTileIdentifier { unsigned long long x1; unsigned long long x2[10]; })arg2;
- (void*)checkOutTileForIdentifier:(struct PXTileIdentifier { unsigned long long x1; unsigned long long x2[10]; })arg1 layout:(id)arg2;
- (id)contentAssetReferenceAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)dealloc;
- (id)framesOfVisibleContentViewInCoordinateSpace:(id)arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleTap:(id)arg1;
- (id)initWithPackageTransport:(id)arg1;
- (double)layout:(id)arg1 aspectRatioForItemAtIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2;
- (long long)layout:(id)arg1 irisToggleStateForItemAtIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2;
- (double)layout:(id)arg1 itemAtIndexPathDuration:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2;
- (bool)layout:(id)arg1 itemAtIndexPathIsLoop:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2;
- (bool)layout:(id)arg1 itemAtIndexPathIsVideo:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2;
- (bool)layoutShouldShowVideoDuration:(id)arg1;
- (void)loadView;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (void)set_roundedCornerOverlayFillColor:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })tilingController:(id)arg1 initialVisibleOriginForLayout:(id)arg2;
- (void)viewDidLoad;
- (bool)wantsEdgeToEdgeLayout;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
