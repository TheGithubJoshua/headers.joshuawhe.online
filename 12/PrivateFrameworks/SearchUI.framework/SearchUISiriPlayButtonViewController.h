<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SearchUISiriPlayButtonViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SearchUI.framework/SearchUISiriPlayButtonViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SearchUI.framework/SearchUI (1)
 */

@interface SearchUISiriPlayButtonViewController : SearchUIAccessoryViewController <MPRequestResponseControllerDelegate, NUIContainerStackViewDelegate> {
    UILabel * _captionLabel;
    struct CGSize { 
        double width; 
        double height; 
    }  _captionLabelSize;
    long long  _currentAlbumPersistentID;
    long long  _currentArtistPersistentID;
    long long  _currentSongPersistentID;
    NSString * _currentStoreIdentifier;
    struct { 
        double snapshotTime; 
        double startTime; 
        double endTime; 
        double duration; 
        double elapsedDuration; 
        float rate; 
        float defaultRate; 
        bool isLiveContent; 
        bool isLoading; 
    }  _durationSnapshot;
    MPRequestResponseController * _mediaController;
    long long  _mediaEntityType;
    long long  _persistentID;
    SearchUIButton * _playButton;
    struct CGSize { 
        double width; 
        double height; 
    }  _playButtonSize;
    SFPunchout * _punchout;
    NSString * _spotlightIdentifier;
    NSArray * _storeIdentifiers;
    NSTimer * _timer;
}

@property (nonatomic, retain) UILabel *captionLabel;
@property (nonatomic) struct CGSize { double x1; double x2; } captionLabelSize;
@property (nonatomic) long long currentAlbumPersistentID;
@property (nonatomic) long long currentArtistPersistentID;
@property (nonatomic) long long currentSongPersistentID;
@property (nonatomic, retain) NSString *currentStoreIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; double x5; float x6; float x7; bool x8; bool x9; } durationSnapshot;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) MPRequestResponseController *mediaController;
@property (nonatomic) long long mediaEntityType;
@property (nonatomic) long long persistentID;
@property (nonatomic, retain) SearchUIButton *playButton;
@property (nonatomic) struct CGSize { double x1; double x2; } playButtonSize;
@property (nonatomic, retain) SFPunchout *punchout;
@property (nonatomic, retain) NSString *spotlightIdentifier;
@property (nonatomic, retain) NSArray *storeIdentifiers;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSTimer *timer;

+ (id)font;
+ (void)getPersistentID:(long long*)arg1 andEntityType:(long long*)arg2 forSpotlightIdentifier:(id)arg3;
+ (id)playerRequest;
+ (bool)supportsResult:(id)arg1;
+ (bool)verifyMediaForResult:(id)arg1;

- (void).cxx_destruct;
- (void)buttonPressed;
- (id)captionLabel;
- (struct CGSize { double x1; double x2; })captionLabelSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })containerView:(id)arg1 layoutFrameForArrangedSubview:(id)arg2 withProposedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct CGSize { double x1; double x2; })containerView:(id)arg1 systemLayoutSizeFittingSize:(struct CGSize { double x1; double x2; })arg2 forArrangedSubview:(id)arg3;
- (void)containerViewDidInvalidateIntrinsicContentSize:(id)arg1;
- (void)controller:(id)arg1 defersResponseReplacement:(id /* block */)arg2;
- (void)createTimerIfNeeded;
- (long long)currentAlbumPersistentID;
- (long long)currentArtistPersistentID;
- (bool)currentPersistentIDMatchesPersistentID:(long long)arg1 forType:(long long)arg2;
- (long long)currentSongPersistentID;
- (id)currentStoreIdentifier;
- (void)dealloc;
- (id)description;
- (struct { double x1; double x2; double x3; double x4; double x5; float x6; float x7; bool x8; bool x9; })durationSnapshot;
- (id)initWithUIStyle:(unsigned long long)arg1 cell:(id)arg2;
- (void)invalidateTimerIfNeeded;
- (bool)matchesNowPlayingAudioItem;
- (id)mediaController;
- (long long)mediaEntityType;
- (long long)persistentID;
- (id)playButton;
- (struct CGSize { double x1; double x2; })playButtonSize;
- (id)punchout;
- (void)sendEngagementDidPunchout:(bool)arg1;
- (void)setCaptionLabel:(id)arg1;
- (void)setCaptionLabelSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCurrentAlbumPersistentID:(long long)arg1;
- (void)setCurrentArtistPersistentID:(long long)arg1;
- (void)setCurrentSongPersistentID:(long long)arg1;
- (void)setCurrentStoreIdentifier:(id)arg1;
- (void)setDurationSnapshot:(struct { double x1; double x2; double x3; double x4; double x5; float x6; float x7; bool x8; bool x9; })arg1;
- (void)setMediaController:(id)arg1;
- (void)setMediaEntityType:(long long)arg1;
- (void)setPersistentID:(long long)arg1;
- (void)setPlayButton:(id)arg1;
- (void)setPlayButtonSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPunchout:(id)arg1;
- (void)setSpotlightIdentifier:(id)arg1;
- (void)setStoreIdentifiers:(id)arg1;
- (void)setTimer:(id)arg1;
- (id)setupViewWithStyle:(unsigned long long)arg1;
- (bool)shouldTopAlignForAccessibilityContentSizes;
- (id)spotlightIdentifier;
- (id)storeIdentifiers;
- (id)timer;
- (void)togglePlaybackState;
- (void)updateButtonProgressAnimated:(bool)arg1;
- (void)updatePlayState;
- (bool)updateTimerPause;
- (void)updateWithResult:(id)arg1;
- (void)willHide;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
