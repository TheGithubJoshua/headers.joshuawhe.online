<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PVCameraFrameSet.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProVideo.framework/PVCameraFrameSet.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo (398.0.87)
 */

@interface PVCameraFrameSet : NSObject {
    PVImageBuffer * _alphaMaskImageBuffer;
    long long  _cameraPosition;
    struct opaqueCMSampleBuffer { } * _colorSampleBuffer;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _colorTransform;
    AVDepthData * _depthData;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _depthTransform;
    NSDictionary * _metadata;
    double  _rollRadians;
    long long  deviceOrientation;
    struct { 
        double x; 
        double y; 
        double z; 
        double w; 
    }  orientation;
}

@property (retain) PVImageBuffer *alphaMaskImageBuffer;
@property (nonatomic) long long cameraPosition;
@property (nonatomic, readonly) PVImageBuffer *colorImageBuffer;
@property (nonatomic, readonly) struct opaqueCMSampleBuffer { }*colorSampleBuffer;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } colorTransform;
@property (nonatomic, readonly) AVDepthData *depthData;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } depthTransform;
@property (nonatomic) long long deviceOrientation;
@property (retain) NSDictionary *metadata;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } orientation;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } presentationTimeStamp;
@property (nonatomic) double rollRadians;

- (void).cxx_destruct;
- (void)_sharedInitColorBuffer:(struct opaqueCMSampleBuffer { }*)arg1 colorTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 depthData:(id)arg3 depthTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 metadata:(id)arg5;
- (id)alphaMaskImageBuffer;
- (long long)cameraPosition;
- (id)colorImageBuffer;
- (struct opaqueCMSampleBuffer { }*)colorSampleBuffer;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })colorTransform;
- (void)dealloc;
- (id)depthData;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })depthTransform;
- (long long)deviceOrientation;
- (id)initWithColorBuffer:(struct opaqueCMSampleBuffer { }*)arg1 depthData:(id)arg2 metadata:(id)arg3;
- (id)initWithColorBuffer:(struct opaqueCMSampleBuffer { }*)arg1 metadata:(id)arg2;
- (id)metadata;
- (struct { double x1; double x2; double x3; double x4; })orientation;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })presentationTimeStamp;
- (double)rollRadians;
- (void)setAlphaMaskImageBuffer:(id)arg1;
- (void)setCameraPosition:(long long)arg1;
- (void)setColorTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setDepthTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setDeviceOrientation:(long long)arg1;
- (void)setMetadata:(id)arg1;
- (void)setOrientation:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setRollRadians:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
