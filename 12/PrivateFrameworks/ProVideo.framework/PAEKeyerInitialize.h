<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PAEKeyerInitialize.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProVideo.framework/PAEKeyerInitialize.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo (398.0.87)
 */

@interface PAEKeyerInitialize : NSObject {
    id  _apiManager;
    PAEKeyer * _keyer;
}

+ (void)setInitialSamples:(struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x1; struct Vec3f {} *x2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_1_1; } x3; }*)arg1 autokeySetupUtil:(id)arg2 sampleBoxHalfDim:(float)arg3;

- (bool)calculateInitialMatteWithInfo:(struct { union { double x_1_1_1; struct { /* ? */ } *x_1_1_2; } x1; unsigned long long x2; unsigned long long x3; double x4; double x5; unsigned long long x6; })arg1 omSamples:(struct OMSamples { int (**x1)(); bool x2; bool x3; bool x4; bool x5; int x6; struct vector<OMSamplesElem *, std::__1::allocator<OMSamplesElem *> > {} *x7; struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_8_1_1; struct Vec3f {} *x_8_1_2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_2_1; } x_8_1_3; } x8; struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_9_1_1; struct Vec3f {} *x_9_1_2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_2_1; } x_9_1_3; } x9; struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_10_1_1; struct Vec3f {} *x_10_1_2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_2_1; } x_10_1_3; } x10; struct vector<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> >, std::__1::allocator<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> > > > { struct vector<Vec3f, std::__1::allocator<Vec3f> > {} *x_11_1_1; struct vector<Vec3f, std::__1::allocator<Vec3f> > {} *x_11_1_2; struct __compressed_pair<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> > *, std::__1::allocator<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> > > > { struct vector<Vec3f, std::__1::allocator<Vec3f> > {} *x_3_2_1; } x_11_1_3; } x11; }*)arg2 colorPrimaries:(int)arg3 screenColor:(int*)arg4 minGreenHueAngle:(float)arg5 maxGreenHueAngle:(float)arg6 greenChroma:(float)arg7 minBlueHueAngle:(float)arg8 maxBlueHueAngle:(float)arg9 blueChroma:(float)arg10 histoPercentageIncluded:(float)arg11 use32x32x32:(bool)arg12 simpleKey:(bool)arg13;
- (void)calculateInitialSamples:(struct ColorHisto { struct vector<int, std::__1::allocator<int> > { int *x_1_1_1; int *x_1_1_2; struct __compressed_pair<int *, std::__1::allocator<int> > { int *x_3_2_1; } x_1_1_3; } x1; int x2; int x3; int x4; }*)arg1 percentageOfBaseColorIncluded:(float)arg2 use32x32x32:(bool)arg3 autokeySetupUtil:(id)arg4 samples:(struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x1; struct Vec3f {} *x2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_1_1; } x3; }*)arg5;
- (void)dealloc;
- (bool)findSampleRectsWithInfo:(struct { union { double x_1_1_1; struct { /* ? */ } *x_1_1_2; } x1; unsigned long long x2; unsigned long long x3; double x4; double x5; unsigned long long x6; })arg1 screenColor:(int*)arg2 colorPrimaries:(int)arg3 width:(int)arg4 height:(int)arg5 minGreenHueAngle:(float)arg6 maxGreenHueAngle:(float)arg7 greenChroma:(float)arg8 minBlueHueAngle:(float)arg9 maxBlueHueAngle:(float)arg10 blueChroma:(float)arg11 histoPercentageIncluded:(float)arg12 omSamples:(struct OMSamples { int (**x1)(); bool x2; bool x3; bool x4; bool x5; int x6; struct vector<OMSamplesElem *, std::__1::allocator<OMSamplesElem *> > {} *x7; struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_8_1_1; struct Vec3f {} *x_8_1_2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_2_1; } x_8_1_3; } x8; struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_9_1_1; struct Vec3f {} *x_9_1_2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_2_1; } x_9_1_3; } x9; struct vector<Vec3f, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_10_1_1; struct Vec3f {} *x_10_1_2; struct __compressed_pair<Vec3f *, std::__1::allocator<Vec3f> > { struct Vec3f {} *x_3_2_1; } x_10_1_3; } x10; struct vector<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> >, std::__1::allocator<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> > > > { struct vector<Vec3f, std::__1::allocator<Vec3f> > {} *x_11_1_1; struct vector<Vec3f, std::__1::allocator<Vec3f> > {} *x_11_1_2; struct __compressed_pair<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> > *, std::__1::allocator<std::__1::vector<Vec3f, std::__1::allocator<Vec3f> > > > { struct vector<Vec3f, std::__1::allocator<Vec3f> > {} *x_3_2_1; } x_11_1_3; } x11; }*)arg13 viewingSetupMatte:(bool)arg14 use32x32Histogram:(bool)arg15 simpleKey:(bool)arg16;
- (id)initWithAPIManager:(id)arg1 keyer:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
