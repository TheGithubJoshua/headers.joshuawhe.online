<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FxImage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProVideo.framework/FxImage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo (398.0.87)
 */

@interface FxImage : NSObject <NSCopying> {
    struct FxImagePriv { struct { unsigned long long x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned long long x_1_1_6; unsigned long long x_1_1_7; bool x_1_1_8; double x_1_1_9; } x1; unsigned long long x2; unsigned long long x3; double x4; double x5; unsigned long long x6; int (*x7)(); void *x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9; struct FxRect { int x_10_1_1; int x_10_1_2; int x_10_1_3; int x_10_1_4; } x10; id x11; struct CGColorSpace {} *x12; unsigned long long x13; int x14; } * _imagePriv;
}

+ (id)alloc;

- (bool)_verifyImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (unsigned long long)bytes;
- (unsigned long long)colorInfo;
- (struct CGColorSpace { }*)colorSpace;
- (bool)containsPointX:(int)arg1 Y:(int)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (unsigned long long)depth;
- (struct FxRect { int x1; int x2; int x3; int x4; })dod;
- (int)eyeType;
- (unsigned long long)field;
- (unsigned long long)fieldOrder;
- (unsigned long long)fxColorPrimaries;
- (unsigned long long)height;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; bool x8; double x9; })imageInfo;
- (unsigned long long)imageType;
- (id)init;
- (id)initWithInfo:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; bool x8; double x9; })arg1;
- (id)inversePixelTransform;
- (bool)isPremultiplied;
- (unsigned long long)numActiveChannels;
- (unsigned long long)origin;
- (double)pixelAspect;
- (unsigned long long)pixelFormat;
- (id)pixelTransform;
- (double)scaleX;
- (double)scaleY;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBytes:(unsigned long long)arg1;
- (void)setColorInfo:(unsigned long long)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setDeallocCallback:(int (*)arg1 refcon:(void*)arg2;
- (void)setDepth:(unsigned long long)arg1;
- (void)setDod:(struct FxRect { int x1; int x2; int x3; int x4; })arg1;
- (void)setEyeType:(int)arg1;
- (void)setField:(unsigned long long)arg1;
- (void)setFieldOrder:(unsigned long long)arg1;
- (void)setFxColorPrimaries:(unsigned long long)arg1;
- (void)setHeight:(unsigned long long)arg1;
- (void)setImageType:(unsigned long long)arg1;
- (void)setIsPremultiplied:(bool)arg1;
- (void)setNumActiveChannels:(unsigned long long)arg1;
- (void)setOrigin:(unsigned long long)arg1;
- (void)setPixelAspect:(double)arg1;
- (void)setPixelFormat:(unsigned long long)arg1;
- (void)setPixelTransform:(id)arg1;
- (void)setScaleX:(double)arg1;
- (void)setScaleY:(double)arg1;
- (void)setWidth:(unsigned long long)arg1;
- (void)setWidth:(unsigned long long)arg1 andHeight:(unsigned long long)arg2;
- (unsigned long long)size;
- (unsigned long long)version;
- (unsigned long long)width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
