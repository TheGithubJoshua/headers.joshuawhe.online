<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PVLivePlayerAVAssetSource.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProVideo.framework/PVLivePlayerAVAssetSource.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo (398.0.87)
 */

@interface PVLivePlayerAVAssetSource : NSObject <AVPlayerItemOutputPullDelegate, PVLivePlayerSource> {
    AVAsset * _asset;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _assetDuration;
    float  _assetRate;
    PVFrameSet * _cacheImageFrameSet;
    struct HGSynchronizable { int (**x1)(); struct _opaque_pthread_mutex_t { long long x_2_1_1; BOOL x_2_1_2[56]; } x2; struct _opaque_pthread_t {} *x3; unsigned long long x4; struct _opaque_pthread_cond_t { long long x_5_1_1; BOOL x_5_1_2[40]; } x5; } * _cacheLock;
    int  _currentPlayerItemOutput;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _currentPlayerItemRange;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    NSObject<OS_dispatch_semaphore> * _outputReadyCondVar;
    NSObject<OS_dispatch_semaphore> * _playbackReadyCondVar;
    NSArray * _playerItemOutputs;
    AVPlayerLooper * _playerLooper;
    AVQueuePlayer * _playerQueue;
    struct { 
        int width; 
        int height; 
    }  _videoTrackDimensions;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _videoTrackFrameDelta;
    float  _videoTrackFrameRate;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _videoTrackRange;
    bool  loopPlayback;
    bool  repeatFrames;
    int  status;
}

@property (nonatomic, readonly) AVAsset *asset;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool loopPlayback;
@property (nonatomic) bool repeatFrames;
@property int status;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (struct __CVBuffer { }*)_copyPixelBufferForHostTime:(double)arg1;
- (struct __CVBuffer { }*)_copyPixelBufferForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)asset;
- (void)dealloc;
- (void)finishReading;
- (id)imageBufferForHostTime:(double)arg1;
- (id)initWithAVAsset:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })itemTimeForHostTime:(double)arg1;
- (bool)loopPlayback;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)outputMediaDataWillChange:(id)arg1;
- (void)outputSequenceWasFlushed:(id)arg1;
- (void)pause;
- (void)play;
- (void)playerItemDidPlayToEnd:(id)arg1;
- (void)playerItemFailedToPlayToEnd:(id)arg1;
- (void)playerItemPlaybackStalled:(id)arg1;
- (void)playerItemTimeJumped:(id)arg1;
- (bool)repeatFrames;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setLoopPlayback:(bool)arg1;
- (void)setMuted:(bool)arg1;
- (void)setRepeatFrames:(bool)arg1;
- (void)setStatus:(int)arg1;
- (void)setupPlayer;
- (void)startObservers;
- (int)status;
- (void)stopObservers;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
