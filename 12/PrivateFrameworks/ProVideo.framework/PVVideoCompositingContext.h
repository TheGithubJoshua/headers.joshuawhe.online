<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PVVideoCompositingContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProVideo.framework/PVVideoCompositingContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo (398.0.87)
 */

@interface PVVideoCompositingContext : NSObject <NSSecureCoding> {
    PVColorSpace * _workingColorSpace;
    int  bufferFormat;
    bool  concatenationFlag;
    int  conformColorSpacesToDestinationBufferSpace;
    int  dotGraphLevel;
    bool  dynamicPlayback;
    int  filterMode;
    int  gpuRenderAPI;
    int  instructionGraphDotTreeLevel;
    int  instructionGraphDumpLevel;
    int  numCPUThreads;
    PVColorSpace * outputColorSpace;
    int  pageSize;
    int  perfStatsLogLevel;
    int  pmrLevel;
    bool  powerFriendlyExport;
    int  renderDevice;
    int  renderGraphDumpLevel;
    bool  renderStatsFlag;
    int  renderStatsMaxVals;
    int  renderStatsWarmUp;
    int  shaderFormat;
    int  signPostLevel;
    bool  textureBorder;
    int  tileSize;
    int  traceGLLevel;
    int  traceMetalLevel;
    int  workingColorSpaceConformIntent;
}

@property int bufferFormat;
@property bool concatenationFlag;
@property (nonatomic) int conformColorSpacesToDestinationBufferSpace;
@property int dotGraphLevel;
@property bool dynamicPlayback;
@property int filterMode;
@property int gpuRenderAPI;
@property (nonatomic) int instructionGraphDotTreeLevel;
@property (nonatomic) int instructionGraphDumpLevel;
@property int numCPUThreads;
@property (nonatomic, retain) PVColorSpace *outputColorSpace;
@property int pageSize;
@property (nonatomic) int perfStatsLogLevel;
@property (nonatomic) int pmrLevel;
@property (nonatomic) bool powerFriendlyExport;
@property (nonatomic) int renderDevice;
@property int renderGraphDumpLevel;
@property bool renderStatsFlag;
@property int renderStatsMaxVals;
@property int renderStatsWarmUp;
@property int shaderFormat;
@property (nonatomic) int signPostLevel;
@property bool textureBorder;
@property int tileSize;
@property int traceGLLevel;
@property (nonatomic) int traceMetalLevel;
@property (nonatomic, retain) PVColorSpace *workingColorSpace;
@property (nonatomic) int workingColorSpaceConformIntent;

+ (id)createContextForCPU;
+ (id)createContextForGPU;
+ (void)setColorSpaceDefaultsForDeviceClass;
+ (void)setWorkingColorSpace:(id)arg1 outputColorSpace:(id)arg2 workingSpaceConformIntent:(int)arg3;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (int)bufferFormat;
- (bool)concatenationFlag;
- (int)conformColorSpacesToDestinationBufferSpace;
- (int)dotGraphLevel;
- (void)dumpContext;
- (bool)dynamicPlayback;
- (void)encodeWithCoder:(id)arg1;
- (int)filterMode;
- (int)gpuRenderAPI;
- (id)initWithCoder:(id)arg1;
- (id)initWithDevice:(int)arg1;
- (int)instructionGraphDotTreeLevel;
- (int)instructionGraphDumpLevel;
- (int)numCPUThreads;
- (id)outputColorSpace;
- (int)pageSize;
- (int)perfStatsLogLevel;
- (int)pmrLevel;
- (bool)powerFriendlyExport;
- (int)renderDevice;
- (int)renderGraphDumpLevel;
- (bool)renderStatsFlag;
- (int)renderStatsMaxVals;
- (int)renderStatsWarmUp;
- (void)setBufferFormat:(int)arg1;
- (void)setConcatenationFlag:(bool)arg1;
- (void)setConformColorSpacesToDestinationBufferSpace:(int)arg1;
- (void)setContext:(id)arg1;
- (void)setDotGraphLevel:(int)arg1;
- (void)setDynamicPlayback:(bool)arg1;
- (void)setFilterMode:(int)arg1;
- (void)setGpuRenderAPI:(int)arg1;
- (void)setInstructionGraphDotTreeLevel:(int)arg1;
- (void)setInstructionGraphDumpLevel:(int)arg1;
- (void)setIntermediateBufferFormatForWorkingColorSpace;
- (void)setNumCPUThreads:(int)arg1;
- (void)setOutputColorSpace:(id)arg1;
- (void)setPageSize:(int)arg1;
- (void)setPerfStatsLogLevel:(int)arg1;
- (void)setPmrLevel:(int)arg1;
- (void)setPowerFriendlyExport:(bool)arg1;
- (void)setRenderDevice:(int)arg1;
- (void)setRenderGraphDumpLevel:(int)arg1;
- (void)setRenderStatsFlag:(bool)arg1;
- (void)setRenderStatsMaxVals:(int)arg1;
- (void)setRenderStatsWarmUp:(int)arg1;
- (void)setShaderFormat:(int)arg1;
- (void)setSignPostLevel:(int)arg1;
- (void)setTextureBorder:(bool)arg1;
- (void)setTileSize:(int)arg1;
- (void)setTraceGLLevel:(int)arg1;
- (void)setTraceMetalLevel:(int)arg1;
- (void)setWorkingColorSpace:(id)arg1;
- (void)setWorkingColorSpaceConformIntent:(int)arg1;
- (int)shaderFormat;
- (int)signPostLevel;
- (bool)textureBorder;
- (int)tileSize;
- (int)traceGLLevel;
- (int)traceMetalLevel;
- (id)workingColorSpace;
- (int)workingColorSpaceConformIntent;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
