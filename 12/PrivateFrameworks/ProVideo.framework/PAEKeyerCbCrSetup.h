<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PAEKeyerCbCrSetup.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProVideo.framework/PAEKeyerCbCrSetup.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo (398.0.87)
 */

@interface PAEKeyerCbCrSetup : NSObject <NSCoding> {
    bool  _initialized;
    struct OMSpline { struct vector<OMVertex, std::__1::allocator<OMVertex> > { struct OMVertex {} *x_1_1_1; struct OMVertex {} *x_1_1_2; struct __compressed_pair<OMVertex *, std::__1::allocator<OMVertex> > { struct OMVertex {} *x_3_2_1; } x_1_1_3; } x1; int x2; float x3; bool x4; bool x5; } * _keyer2DSatSpline;
    struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; } * _keyer2DSoftPie;
    struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; } * _keyer2DTolPie;
    NSNumber * _softPieX;
    NSNumber * _softPieY;
    NSMutableArray * _splineVertex;
    NSNumber * _tolPieX;
    NSNumber * _tolPieY;
}

- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (struct OMSpline { struct vector<OMVertex, std::__1::allocator<OMVertex> > { struct OMVertex {} *x_1_1_1; struct OMVertex {} *x_1_1_2; struct __compressed_pair<OMVertex *, std::__1::allocator<OMVertex> > { struct OMVertex {} *x_3_2_1; } x_1_1_3; } x1; int x2; float x3; bool x4; bool x5; }*)getKeyer2DSatSpline;
- (struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; }*)getKeyer2DSoftPie;
- (struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; }*)getKeyer2DTolPie;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (void)interpPieWithWeight:(float)arg1 currentDirectionCorrection:(float)arg2 nextDirectionCorrection:(float)arg3 interpolatedCenter:(struct Vec2f { float x1[2]; })arg4 currentCenter:(struct Vec2f { float x1[2]; })arg5 currentPolar:(const struct Vec2f { float x1[2]; }*)arg6 nextCenter:(struct Vec2f { float x1[2]; })arg7 nextPolar:(const struct Vec2f { float x1[2]; }*)arg8 interpolationType:(int)arg9 interpolatedPie:(struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; }*)arg10;
- (void)interpVec2f:(float)arg1 left:(struct Vec2f { float x1[2]; })arg2 right:(struct Vec2f { float x1[2]; })arg3 interpolated:(struct Vec2f { float x1[2]; }*)arg4;
- (id)interpolateBetween:(id)arg1 withWeight:(float)arg2;
- (bool)isEqualTo:(id)arg1;
- (void)offsetPie:(struct Vec2f { float x1[2]; }*)arg1 offsetDegrees:(float)arg2;
- (void)pieToPolarForPie:(struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; }*)arg1 polar:(struct Vec2f { float x1[2]; }*)arg2;
- (void)pieToPolarForPie:(struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; }*)arg1 softPie:(struct PAEKeyerPie { int (**x1)(); struct ArcCompute { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct ArcCompute { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; int x4; struct vector<Vec2f, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_5_1_1; struct Vec2f {} *x_5_1_2; struct __compressed_pair<Vec2f *, std::__1::allocator<Vec2f> > { struct Vec2f {} *x_3_2_1; } x_5_1_3; } x5; }*)arg2 tolPolar:(struct Vec2f { float x1[2]; }*)arg3 softPolar:(struct Vec2f { float x1[2]; }*)arg4;
- (struct Vec2f { float x1[2]; })polarToCartesian:(struct Vec2f { float x1[2]; })arg1;
- (void)setSoftPieX:(id)arg1 indice:(int)arg2;
- (void)setSoftPieY:(id)arg1 indice:(int)arg2;
- (void)setTolPieX:(id)arg1 indice:(int)arg2;
- (void)setTolPieY:(id)arg1 indice:(int)arg2;
- (void)toPolar:(const struct Vec2f { float x1[2]; }*)arg1 polar:(struct Vec2f { float x1[2]; }*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
