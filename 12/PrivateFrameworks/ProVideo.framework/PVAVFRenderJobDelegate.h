<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PVAVFRenderJobDelegate.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProVideo.framework/PVAVFRenderJobDelegate.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProVideo.framework/ProVideo (398.0.87)
 */

@interface PVAVFRenderJobDelegate : NSObject <PVRenderJobDelegate> {
    unsigned int  m_childCode;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  m_compositionTime;
    PVVideoCompositing * m_compositor;
    struct __CVBuffer { } * m_destinationPixelBuffer;
    struct HGCVGLTextureFactory { int (**x1)(); unsigned int x2; struct HGRef<HGGLContext> { struct HGGLContext {} *x_3_1_1; } x3; struct __CVOpenGLESTextureCache {} *x4; } * m_hgCVGLTextureFactory;
    PVVideoCompositionInstruction * m_instruction;
    struct HGRef<PVInstructionGraphContext> { 
        struct PVInstructionGraphContext {} *m_Obj; 
    }  m_instructionGraphContext;
    unsigned int  m_minimumRequestCompletionTimeMS;
    struct HGRef<PVRenderManager> { 
        struct PVRenderManager {} *m_Obj; 
    }  m_renderManager;
    AVAsynchronousVideoCompositionRequest * m_request;
    bool  m_thumbnailCompositing;
    struct PerfTimer { 
        double _start; 
        double _end; 
    }  m_timer;
}

@property unsigned int childCode;
@property (readonly) PVVideoCompositionInstruction *compositionInstruction;
@property (readonly) AVAsynchronousVideoCompositionRequest *compositionRequest;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } compositionTime;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) unsigned int jobTypeTag;
@property unsigned int minimumRequestCompletionTimeMS;
@property (readonly) Class superclass;
@property (readonly) PVVideoCompositingContext *videoCompositingContext;

+ (unsigned int)jobTypeTag;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_buildGraph:(struct PVInputHGNodeMap<PVInstructionGraphSourceNode *> { struct map<PVInstructionGraphSourceNode *, HGRef<HGNode>, std::__1::less<PVInstructionGraphSourceNode *>, std::__1::allocator<std::__1::pair<PVInstructionGraphSourceNode *const, HGRef<HGNode> > > > { struct __tree<std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, std::__1::__map_value_compare<PVInstructionGraphSourceNode *, std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, std::__1::less<PVInstructionGraphSourceNode *>, true>, std::__1::allocator<std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PVInstructionGraphSourceNode *, std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, std::__1::less<PVInstructionGraphSourceNode *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; }*)arg1 renderContext:(const struct HGRenderContext { int (**x1)(); unsigned int x2; int x3; int x4; int x5; struct HGRenderer {} *x6; struct HGRenderQueue {} *x7; bool x8; int x9; unsigned long long x10; int x11; int x12; bool x13; bool x14; unsigned long long x15; unsigned long long x16; struct HGSynchronizable {} *x17; struct HGSynchronizer {} *x18; struct vector<double, std::__1::allocator<double> > { double *x_19_1_1; double *x_19_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_19_1_3; } x19; }*)arg2 frameStats:(struct FrameStats { unsigned int x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; double x3; double x4; double x5; bool x6; bool x7; unsigned int x8; struct vector<double, std::__1::allocator<double> > { double *x_9_1_1; double *x_9_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_9_1_3; } x9; }*)arg3 outputNodes:(struct vector<HGRef<HGNode>, std::__1::allocator<HGRef<HGNode> > > { struct HGRef<HGNode> {} *x1; struct HGRef<HGNode> {} *x2; struct __compressed_pair<HGRef<HGNode> *, std::__1::allocator<HGRef<HGNode> > > { struct HGRef<HGNode> {} *x_3_1_1; } x3; }*)arg4;
- (void)_setupGLTextureFactory:(const struct HGRenderContext { int (**x1)(); unsigned int x2; int x3; int x4; int x5; struct HGRenderer {} *x6; struct HGRenderQueue {} *x7; bool x8; int x9; unsigned long long x10; int x11; int x12; bool x13; bool x14; unsigned long long x15; unsigned long long x16; struct HGSynchronizable {} *x17; struct HGSynchronizer {} *x18; struct vector<double, std::__1::allocator<double> > { double *x_19_1_1; double *x_19_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_19_1_3; } x19; }*)arg1;
- (void)_setupInputs:(struct PVInputHGNodeMap<PVInstructionGraphSourceNode *> { struct map<PVInstructionGraphSourceNode *, HGRef<HGNode>, std::__1::less<PVInstructionGraphSourceNode *>, std::__1::allocator<std::__1::pair<PVInstructionGraphSourceNode *const, HGRef<HGNode> > > > { struct __tree<std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, std::__1::__map_value_compare<PVInstructionGraphSourceNode *, std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, std::__1::less<PVInstructionGraphSourceNode *>, true>, std::__1::allocator<std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> > > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<PVInstructionGraphSourceNode *, std::__1::__value_type<PVInstructionGraphSourceNode *, HGRef<HGNode> >, std::__1::less<PVInstructionGraphSourceNode *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_1_1_1; } x1; }*)arg1 renderContext:(const struct HGRenderContext { int (**x1)(); unsigned int x2; int x3; int x4; int x5; struct HGRenderer {} *x6; struct HGRenderQueue {} *x7; bool x8; int x9; unsigned long long x10; int x11; int x12; bool x13; bool x14; unsigned long long x15; unsigned long long x16; struct HGSynchronizable {} *x17; struct HGSynchronizer {} *x18; struct vector<double, std::__1::allocator<double> > { double *x_19_1_1; double *x_19_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_19_1_3; } x19; }*)arg2 frameStats:(struct FrameStats { unsigned int x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; double x3; double x4; double x5; bool x6; bool x7; unsigned int x8; struct vector<double, std::__1::allocator<double> > { double *x_9_1_1; double *x_9_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
- (void)buildGraph:(struct vector<HGRef<HGNode>, std::__1::allocator<HGRef<HGNode> > > { struct HGRef<HGNode> {} *x1; struct HGRef<HGNode> {} *x2; struct __compressed_pair<HGRef<HGNode> *, std::__1::allocator<HGRef<HGNode> > > { struct HGRef<HGNode> {} *x_3_1_1; } x3; }*)arg1 renderContext:(const struct HGRenderContext { int (**x1)(); unsigned int x2; int x3; int x4; int x5; struct HGRenderer {} *x6; struct HGRenderQueue {} *x7; bool x8; int x9; unsigned long long x10; int x11; int x12; bool x13; bool x14; unsigned long long x15; unsigned long long x16; struct HGSynchronizable {} *x17; struct HGSynchronizer {} *x18; struct vector<double, std::__1::allocator<double> > { double *x_19_1_1; double *x_19_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_19_1_3; } x19; }*)arg2 frameStats:(struct FrameStats { unsigned int x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; double x3; double x4; double x5; bool x6; bool x7; unsigned int x8; struct vector<double, std::__1::allocator<double> > { double *x_9_1_1; double *x_9_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
- (unsigned int)childCode;
- (id)compositionInstruction;
- (id)compositionRequest;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })compositionTime;
- (void)finishCancelledJob;
- (void)finishCompletedJob;
- (id)initWithCompositor:(id)arg1 request:(id)arg2 compositionTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 thumbnailCompositing:(bool)arg4;
- (int)jobPriority;
- (unsigned int)jobTypeTag;
- (unsigned int)minimumRequestCompletionTimeMS;
- (unsigned long long)packedFamilyCode;
- (int)renderContextPriority;
- (void)renderJobFinished:(struct HGRef<PVRenderJob> { struct PVRenderJob {} *x1; })arg1;
- (int)renderThreadPriority;
- (void)setChildCode:(unsigned int)arg1;
- (void)setMinimumRequestCompletionTimeMS:(unsigned int)arg1;
- (void)setupDestinationBuffers:(struct vector<HGRef<HGBitmap>, std::__1::allocator<HGRef<HGBitmap> > > { struct HGRef<HGBitmap> {} *x1; struct HGRef<HGBitmap> {} *x2; struct __compressed_pair<HGRef<HGBitmap> *, std::__1::allocator<HGRef<HGBitmap> > > { struct HGRef<HGBitmap> {} *x_3_1_1; } x3; }*)arg1 renderContext:(const struct HGRenderContext { int (**x1)(); unsigned int x2; int x3; int x4; int x5; struct HGRenderer {} *x6; struct HGRenderQueue {} *x7; bool x8; int x9; unsigned long long x10; int x11; int x12; bool x13; bool x14; unsigned long long x15; unsigned long long x16; struct HGSynchronizable {} *x17; struct HGSynchronizer {} *x18; struct vector<double, std::__1::allocator<double> > { double *x_19_1_1; double *x_19_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_19_1_3; } x19; }*)arg2 frameStats:(struct FrameStats { unsigned int x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; double x3; double x4; double x5; bool x6; bool x7; unsigned int x8; struct vector<double, std::__1::allocator<double> > { double *x_9_1_1; double *x_9_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
- (id)videoCompositingContext;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
