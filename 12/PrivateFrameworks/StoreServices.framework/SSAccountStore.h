<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SSAccountStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/StoreServices.framework/SSAccountStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices (1)
 */

@interface SSAccountStore : NSObject <AKAppleIDAuthenticationDelegate> {
    NSArray * _accountsCache;
    NSObject<OS_dispatch_queue> * _accountsCacheAccessQueue;
    ACAccountStore * _backingAccountStore;
    NSObject<OS_dispatch_queue> * _fetchAccountsQueue;
    bool  _inProcessCacheDisabled;
    SSKeyValueStore * _keyValueStore;
    NSObject<OS_dispatch_queue> * _metricsQueue;
    NSObject<OS_dispatch_queue> * _notificationQueue;
}

@property (readonly, copy) NSArray *accounts;
@property (nonatomic, retain) NSArray *accountsCache;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *accountsCacheAccessQueue;
@property (nonatomic, readonly) SSPromise *accountsPromise;
@property (readonly) SSAccount *activeAccount;
@property (readonly) SSAccount *activeLockerAccount;
@property (readonly) SSAccount *activeSandboxAccount;
@property (getter=isAuthenticationActive, readonly) bool authenticationActive;
@property (nonatomic, readonly) ACAccountStore *backingAccountStore;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) SSAccount *demoAccount;
@property (readonly, copy) NSString *description;
@property (getter=isExpired, readonly) bool expired;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *fetchAccountsQueue;
@property (readonly) unsigned long long hash;
@property (getter=isInProcessCacheDisabled, nonatomic) bool inProcessCacheDisabled;
@property (nonatomic, retain) SSKeyValueStore *keyValueStore;
@property (nonatomic, readonly) SSPromise *localAccount;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *metricsQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *notificationQueue;
@property (readonly) Class superclass;

+ (bool)URLResponseAllowsSilentAuthentication:(id)arg1;
+ (bool)_accountDictionaryRepresentsActiveAccount:(id)arg1 inKeyValueStore:(id)arg2;
+ (bool)_accountDictionaryRepresentsActiveLockerAccount:(id)arg1 inKeyValueStore:(id)arg2;
+ (void)_addAccountToUnitTestStore:(id)arg1;
+ (bool)_allowSilentPasswordAuthForAccount:(id)arg1 withOptions:(id)arg2;
+ (id)_backingAccountForAccount:(id)arg1;
+ (void)_cleanupActiveAccountsAfterMigrationWithActiveDSID:(id)arg1 activeLockerDSID:(id)arg2;
+ (bool)_copyKVSDatabaseWithError:(id*)arg1;
+ (id)_createAuthenticationContextForAccount:(id)arg1 silentAuthentication:(bool)arg2 options:(id)arg3;
+ (id)_createAuthenticationController;
+ (id)_createUpdatedAccount:(id)arg1 withAuthenticationResults:(id)arg2 options:(id)arg3;
+ (bool)_currentProcessLinksUIKit;
+ (void)_disableAccountStoreChangedNotifications;
+ (void)_enableAccountStoreChangedNotifications;
+ (id)_hashedDescriptionFromAccountDictionary:(id)arg1;
+ (bool)_isBuddyRunning;
+ (id)_migrateAccountDictionary:(id)arg1 fromKeyValueStore:(id)arg2 originalActiveDSID:(id)arg3 originalActiveLockerDSID:(id)arg4 logKey:(id)arg5 error:(id*)arg6;
+ (void)_postAccountsChangedDarwinNotification;
+ (void)_postAccountsChangedInternalDarwinNotification;
+ (id)_refreshAccount:(id)arg1;
+ (void)_removeAccountDictionary:(id)arg1 fromKeyValueStore:(id)arg2;
+ (void)_removeAccountFromUnitTestStore:(id)arg1;
+ (void)_setActiveAccountIsManagedAppleIDPreference:(bool)arg1;
+ (bool)_shouldRemoveAccountDictionaryWithoutMigration:(id)arg1 reason:(id*)arg2;
+ (id)_unitTestAccountsAccessQueue;
+ (bool)areAccountStoreChangedNotificationsDisabled;
+ (id)defaultStore;
+ (id)existingDefaultStore;
+ (bool)isExpired;
+ (bool)isExpiredForTokenType:(long long)arg1;
+ (bool)migrateToAccountsFramework;
+ (void)performCookieStorageMigration;
+ (void)resetExpiration;
+ (void)resetExpirationForTokenType:(long long)arg1;
+ (void)setAuthenticationStartedDate:(id)arg1;
+ (void)setUnitTestModeEnabled:(bool)arg1;
+ (double)tokenExpirationInterval;
+ (bool)unitTestModeEnabled;

- (void).cxx_destruct;
- (id)_buyParamsForBuyParamsString:(id)arg1;
- (id)_cachedAccounts;
- (id)_convertPasswordToPET:(id)arg1 forAccount:(id)arg2 options:(id)arg3;
- (id)_createLocalAccountPromise;
- (id)_lookupLocalAccountPromise;
- (id)_optionsForProxiedAuthenticationWithVerifyCredentialsOptions:(id)arg1;
- (id)_passwordEquivalentTokenFromAlternateAccountWithAltDSID:(id)arg1 DSID:(id)arg2 username:(id)arg3;
- (void)_postAccountStoreChangeNotification;
- (void)_postActiveAccountChangedNotification;
- (void)_postAuthenticationActivityNotification;
- (void)_recordAnalyticsForMetricsDialogEvent:(id)arg1 withTopic:(id)arg2;
- (id)_saveAccount:(id)arg1 verifyCredentials:(bool)arg2;
- (id)_saveAccountInUnitTestMode:(id)arg1 ignoreValidationErrors:(bool)arg2;
- (void)_setCachedAccounts:(id)arg1;
- (id)_shouldCreateNewAccountForAccount:(id)arg1 options:(id)arg2;
- (id)_updateAccountWithAuthKitViaPromptAuth:(id)arg1 store:(id)arg2 options:(id)arg3;
- (id)_updateAccountWithAuthKitViaSilentAuth:(id)arg1 options:(id)arg2;
- (id)_updateAccountWithAuthKitViaSilentPETAuth:(id)arg1 options:(id)arg2;
- (id)_updateAccountWithAuthKitViaSilentPasswordAuth:(id)arg1 options:(id)arg2;
- (id)accountWithAccountName:(id)arg1;
- (id)accountWithAccountName:(id)arg1 scope:(long long)arg2;
- (id)accountWithAltDSID:(id)arg1;
- (id)accountWithAltDSID:(id)arg1 scope:(long long)arg2;
- (id)accountWithAltDSID:(id)arg1 uniqueIdentifier:(id)arg2 accountName:(id)arg3;
- (id)accountWithAltDSID:(id)arg1 uniqueIdentifier:(id)arg2 accountName:(id)arg3 scope:(long long)arg4;
- (id)accountWithUniqueIdentifier:(id)arg1;
- (id)accountWithUniqueIdentifier:(id)arg1 reloadIfNecessary:(bool)arg2;
- (id)accountWithUniqueIdentifier:(id)arg1 scope:(long long)arg2;
- (id)accounts;
- (id)accountsCache;
- (id)accountsCacheAccessQueue;
- (id)accountsPromise;
- (id)activeAccount;
- (id)activeLockerAccount;
- (id)activeSandboxAccount;
- (id)addAccount:(id)arg1;
- (bool)authenticationController:(id)arg1 shouldContinueWithAuthenticationResults:(id)arg2 error:(id)arg3 forContext:(id)arg4;
- (id)backingAccountStore;
- (void)clearCachedAccounts;
- (void)dealloc;
- (id)demoAccount;
- (id)fetchAccountsQueue;
- (void)getDefaultAccountNameUsingBlock:(id /* block */)arg1;
- (id)iTunesStoreAccountType;
- (id)iTunesStoreAccountTypePromise;
- (id)init;
- (bool)isAuthenticationActive;
- (bool)isExpired;
- (bool)isExpiredForTokenType:(long long)arg1;
- (bool)isInProcessCacheDisabled;
- (id)keyValueStore;
- (id)localAccount;
- (id)metricsQueue;
- (id)notificationQueue;
- (void)reloadAccounts;
- (void)removeAccount:(id)arg1 completion:(id /* block */)arg2;
- (bool)removeAccount:(id)arg1 error:(id*)arg2;
- (void)removeAllAccountsWithCompletion:(id /* block */)arg1;
- (void)removeCookiesForAccount:(id)arg1 logKey:(id)arg2;
- (bool)repairAccountWithBrokenDSID:(id)arg1;
- (void)resetExpiration;
- (void)resetExpirationForTokenType:(long long)arg1;
- (void)resetLocalAccount;
- (void)saveAccount:(id)arg1 completion:(id /* block */)arg2;
- (bool)saveAccount:(id)arg1 error:(id*)arg2;
- (void)saveAccount:(id)arg1 verifyCredentials:(bool)arg2 completion:(id /* block */)arg3;
- (bool)saveAccount:(id)arg1 verifyCredentials:(bool)arg2 error:(id*)arg3;
- (void)setAccountCredits:(id)arg1 forAccountWithUniqueIdentifier:(id)arg2;
- (void)setAccountsCache:(id)arg1;
- (void)setAccountsCacheAccessQueue:(id)arg1;
- (id)setActiveAccount:(id)arg1;
- (id)setActiveLockerAccount:(id)arg1;
- (void)setDefaultAccountName:(id)arg1 completionBlock:(id /* block */)arg2;
- (void)setFetchAccountsQueue:(id)arg1;
- (void)setInProcessCacheDisabled:(bool)arg1;
- (void)setKeyValueStore:(id)arg1;
- (void)setMetricsQueue:(id)arg1;
- (void)setNotificationQueue:(id)arg1;
- (void)signOutAccount:(id)arg1;
- (void)signOutAccount:(id)arg1 completion:(id /* block */)arg2;
- (void)signOutAllAccounts;
- (void)signOutAllAccountsWithCompletionBlock:(id /* block */)arg1;
- (id)updateAccountWithAuthKit:(id)arg1 store:(id)arg2 options:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
