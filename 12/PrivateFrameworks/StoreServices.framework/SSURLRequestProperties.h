<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SSURLRequestProperties.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/StoreServices.framework/SSURLRequestProperties.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices (1)
 */

@interface SSURLRequestProperties : NSObject <NSCopying, NSMutableCopying, NSSecureCoding, SSXPCCoding> {
    NSDictionary * _additionalMetrics;
    long long  _allowedRetryCount;
    bool  _allowsBootstrapCellularData;
    unsigned long long  _cachePolicy;
    NSString * _clientAuditBundleIdentifier;
    NSData * _clientAuditTokenData;
    NSString * _clientIdentifier;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    long long  _expectedContentLength;
    NSData * _httpBody;
    NSInputStream * _httpBodyStream;
    NSDictionary * _httpHeaders;
    NSString * _httpMethod;
    bool  _isITunesStoreRequest;
    long long  _kbsyncType;
    bool  _largeDownload;
    long long  _machineDataStyle;
    unsigned long long  _networkServiceType;
    NSDictionary * _requestParameters;
    bool  _requiresCellularDataNetwork;
    BOOL  _requiresExtendedValidationCertificates;
    bool  _requiresExternal;
    bool  _requiresHTTPS;
    bool  _shouldDecodeResponse;
    bool  _shouldDisableCellular;
    bool  _shouldDisableCellularFallback;
    bool  _shouldDisableReversePush;
    bool  _shouldDisableReversePushSampling;
    bool  _shouldProcessProtocol;
    bool  _shouldSendSecureToken;
    bool  _shouldSetCookies;
    double  _timeoutInterval;
    NSString * _urlBagKey;
    long long  _urlBagType;
    id /* block */  _urlBagURLBlock;
    NSArray * _urls;
    NSArray * _userAgentComponents;
}

@property (readonly, copy) NSData *HTTPBody;
@property (readonly, retain) NSInputStream *HTTPBodyStream;
@property (readonly, copy) NSDictionary *HTTPHeaders;
@property (readonly, copy) NSString *HTTPMethod;
@property (getter=isITunesStoreRequest, readonly) bool ITunesStoreRequest;
@property (readonly) long long KBSyncType;
@property (readonly, retain) NSURL *URL;
@property (readonly, copy) NSString *URLBagKey;
@property (readonly) long long URLBagType;
@property (readonly, copy) id /* block */ URLBagURLBlock;
@property (readonly, copy) NSArray *URLs;
@property (readonly, copy) NSDictionary *additionalMetrics;
@property (readonly) long long allowedRetryCount;
@property (readonly) bool allowsBootstrapCellularData;
@property (readonly) unsigned long long cachePolicy;
@property (readonly) bool canBeResolved;
@property (readonly, copy) NSString *clientAuditBundleIdentifier;
@property (readonly, copy) NSData *clientAuditTokenData;
@property (readonly) NSString *clientBundleIdentifier;
@property (readonly, copy) NSString *clientIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) long long expectedContentLength;
@property (readonly) unsigned long long hash;
@property (getter=isLargeDownload, readonly) bool largeDownload;
@property (readonly) long long machineDataStyle;
@property (readonly) unsigned long long networkServiceType;
@property (readonly, copy) NSDictionary *requestParameters;
@property (readonly) bool requiresCellularDataNetwork;
@property (readonly) bool requiresExtendedValidationCertificates;
@property (readonly) bool requiresExternal;
@property (readonly) bool requiresHTTPS;
@property (readonly) bool shouldAddKBSyncData;
@property (readonly) bool shouldDecodeResponse;
@property (readonly) bool shouldDisableCellular;
@property (readonly) bool shouldDisableCellularFallback;
@property (readonly) bool shouldDisableReversePush;
@property (readonly) bool shouldDisableReversePushSampling;
@property (readonly) bool shouldProcessProtocol;
@property (readonly) bool shouldSendSecureToken;
@property (readonly) bool shouldSetCookies;
@property (readonly) Class superclass;
@property (readonly) double timeoutInterval;
@property (readonly, copy) NSArray *userAgentComponents;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)HTTPBody;
- (id)HTTPBodyStream;
- (id)HTTPHeaders;
- (id)HTTPMethod;
- (long long)KBSyncType;
- (id)URL;
- (id)URLBagKey;
- (long long)URLBagType;
- (id /* block */)URLBagURLBlock;
- (id)URLs;
- (id)_initCommon;
- (id)additionalMetrics;
- (long long)allowedRetryCount;
- (bool)allowsBootstrapCellularData;
- (unsigned long long)cachePolicy;
- (bool)canBeResolved;
- (id)clientAuditBundleIdentifier;
- (id)clientAuditTokenData;
- (id)clientBundleIdentifier;
- (id)clientIdentifier;
- (id)copyURLRequest;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)copyXPCEncoding;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (long long)expectedContentLength;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)initWithURLRequest:(id)arg1;
- (id)initWithXPCEncoding:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isITunesStoreRequest;
- (bool)isLargeDownload;
- (long long)machineDataStyle;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)networkServiceType;
- (id)requestParameters;
- (bool)requiresCellularDataNetwork;
- (bool)requiresExtendedValidationCertificates;
- (bool)requiresExternal;
- (bool)requiresHTTPS;
- (bool)shouldAddKBSyncData;
- (bool)shouldDecodeResponse;
- (bool)shouldDisableCellular;
- (bool)shouldDisableCellularFallback;
- (bool)shouldDisableReversePush;
- (bool)shouldDisableReversePushSampling;
- (bool)shouldProcessProtocol;
- (bool)shouldSendSecureToken;
- (bool)shouldSetCookies;
- (double)timeoutInterval;
- (id)userAgentComponents;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
