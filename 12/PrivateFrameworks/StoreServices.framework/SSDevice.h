<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SSDevice.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/StoreServices.framework/SSDevice.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices (1)
 */

@interface SSDevice : NSObject <SSRequestDelegate> {
    NSString * _appleTVProductVersion;
    NSSet * _automaticDownloadKinds;
    double  _batteryLevel;
    unsigned int  _batteryMonitorNotification;
    struct IONotificationPort { } * _batteryMonitorPort;
    NSString * _clientName;
    id  _cloudMediaLibraryIdentifier;
    long long  _deviceType;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    SSKeyValueStore * _keyValueStore;
    NSString * _legacyUserAgent;
    NSString * _localStoreFrontIdentifier;
    id  _mediaLibraryIdentifier;
    NSString * _phoneNumber;
    bool  _pluggedIn;
    int  _pluggedInToken;
    long long  _powerMonitorCount;
    NSString * _productType;
    NSString * _productVersion;
    id  _softwareLibraryIdentifier;
    NSString * _udid;
    SSURLBag * _urlBag;
    NSString * _userAgent;
}

@property (readonly) NSSet *automaticDownloadKinds;
@property (readonly) double batteryLevel;
@property (readonly) NSString *clientName;
@property (readonly) NSString *clientVersion;
@property (copy) NSString *cloudMediaLibraryIdentifier;
@property (readonly) NSString *compatibleProductType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) long long deviceType;
@property (readonly) unsigned int deviceTypeIdentifier;
@property (readonly) unsigned long long hash;
@property (readonly) NSString *legacyUserAgent;
@property (copy) NSString *mediaLibraryIdentifier;
@property (readonly) NSString *phoneNumber;
@property (getter=isPluggedIn, readonly) bool pluggedIn;
@property (readonly) NSString *productType;
@property (readonly) NSString *productVersion;
@property (readonly) float screenScale;
@property (readonly) NSString *serialNumber;
@property (copy) NSString *softwareLibraryIdentifier;
@property (readonly) NSString *storeFrontIdentifier;
@property (nonatomic, readonly) SSPromise *storeFrontIdentifierPromise;
@property (readonly) Class superclass;
@property (readonly) NSString *thinnedApplicationVariantIdentifier;
@property (readonly) NSString *uniqueDeviceIdentifier;
@property (readonly) NSString *userAgent;

+ (id)copyCachedAvailableItemKinds;
+ (id)currentDevice;
+ (bool)deviceIsAppleTV;
+ (bool)deviceIsAppleWatch;
+ (bool)deviceIsAudioAccessory;
+ (bool)deviceIsInternalBuild;
+ (bool)deviceIsSeedBuild;
+ (bool)deviceIsiPad;
+ (bool)deviceIsiPhone;
+ (bool)deviceIsiPod;
+ (bool)promptNeedsDisplay:(id)arg1;
+ (bool)setCachedAvailableItemKinds:(id)arg1;
+ (void)setLastPromptAttemptDate:(id)arg1 forPromptWithIdentifier:(id)arg2;
+ (void)setPromptWithIdentifier:(id)arg1 needsDisplay:(bool)arg2;

- (id)_appleTVProductVersion;
- (void)_cacheKeyValueStoreValues;
- (id)_copyCarrierBundleEligibilityWithStatus:(id)arg1;
- (id)_copyKeyValueStoreValueForDomain:(id)arg1 key:(id)arg2;
- (id)_copyProductType;
- (int)_deviceClass;
- (long long)_deviceType;
- (long long)_deviceTypeForProductType:(id)arg1;
- (long long)_deviceTypeForUnknownAppleTV:(id)arg1;
- (long long)_deviceTypeForUnknownIPad:(id)arg1;
- (long long)_deviceTypeForUnknownIPhone:(id)arg1;
- (long long)_deviceTypeForUnknownIPod:(id)arg1;
- (id)_diskCapacityString;
- (id)_fairPlayDeviceTypeString;
- (bool)_getDeviceType:(unsigned int*)arg1 error:(id*)arg2;
- (void)_invalidateAutomaticDownloadKinds;
- (void)_invalidatePhoneNumber;
- (void)_invalidateSoftwareCUID;
- (bool)_is1080pCapable;
- (bool)_is720pCapable;
- (id)_newLegacyUserAgent:(bool*)arg1;
- (id)_newModernUserAgentWithClientName:(id)arg1 version:(id)arg2 isCachable:(bool*)arg3;
- (void)_postStoreFrontDidChangeNotification;
- (id)_productVersion;
- (void)_reloadPluggedInState;
- (int)_screenClass;
- (void)_updateAutomaticDownloadKinds:(id)arg1 withValue:(id)arg2 completionBlock:(id /* block */)arg3;
- (void)_updateBatteryLevelFromService:(unsigned int)arg1;
- (id)_userAgentClientNameForAppleTVBundleID:(id)arg1;
- (id)_userAgentClientNameForBundleID:(id)arg1;
- (id)_userAgentClientNameForInfoPlist:(id)arg1;
- (id)_userAgentClientVersionForInfoPlist:(id)arg1 clientName:(id)arg2;
- (id)automaticDownloadKinds;
- (double)batteryLevel;
- (id)carrierBundleStatusForService:(long long)arg1;
- (id)clientName;
- (id)clientVersion;
- (id)cloudMediaLibraryIdentifier;
- (id)compatibleProductType;
- (id)copyStoreFrontRequestHeaders;
- (void)dealloc;
- (long long)deviceType;
- (unsigned int)deviceTypeIdentifier;
- (void)enableAllAutomaticDownloadKindsWithCompletionBlock:(id /* block */)arg1;
- (void)getAvailableItemKindsWithBlock:(id /* block */)arg1;
- (void)getCarrierBundleStatusForService:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)getCellularNetworkingAllowedWithBlock:(id /* block */)arg1;
- (bool)getMachineIdentifier:(id*)arg1 otp:(id*)arg2 forAccountIdentifier:(id)arg3;
- (id)init;
- (bool)isPluggedIn;
- (bool)isStoreFrontIdentifierTransient;
- (id)legacyUserAgent;
- (void)loadStoreFrontWithCompletionHandler:(id /* block */)arg1;
- (id)mediaLibraryIdentifier;
- (void)minusAutomaticDownloadKinds:(id)arg1 withCompletionBlock:(id /* block */)arg2;
- (id)phoneNumber;
- (id)productType;
- (id)productVersion;
- (void)reloadStoreFrontIdentifier;
- (float)screenScale;
- (void)sdk_loadStoreFrontIdentifier:(id /* block */)arg1;
- (void)sdk_loadStorefrontCountryCode:(id /* block */)arg1;
- (id)serialNumber;
- (void)setAutomaticDownloadKinds:(id)arg1 withCompletionBlock:(id /* block */)arg2;
- (void)setCellularNetworkingAllowed:(bool)arg1;
- (void)setCloudMediaLibraryIdentifier:(id)arg1;
- (void)setMediaLibraryIdentifier:(id)arg1;
- (void)setSoftwareLibraryIdentifier:(id)arg1;
- (void)setStoreFrontIdentifier:(id)arg1;
- (void)setStoreFrontIdentifier:(id)arg1 account:(id)arg2;
- (void)setStoreFrontIdentifier:(id)arg1 account:(id)arg2 isTransient:(bool)arg3;
- (void)setStoreFrontIdentifier:(id)arg1 accountIdentifier:(id)arg2;
- (void)setStoreFrontIdentifier:(id)arg1 accountIdentifier:(id)arg2 isTransient:(bool)arg3;
- (void)setStoreFrontIdentifier:(id)arg1 forRequest:(id)arg2 response:(id)arg3 account:(id)arg4;
- (void)setStoreFrontIdentifier:(id)arg1 isTransient:(bool)arg2;
- (void)setStoreFrontWithResponseHeaders:(id)arg1;
- (void)showPromptWithIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)softwareLibraryIdentifier;
- (void)startPowerMonitoring;
- (void)stopPowerMonitoring;
- (id)storeFrontIdentifier;
- (id)storeFrontIdentifierPromise;
- (bool)supportsDeviceCapability:(long long)arg1;
- (id)synchedStoreFrontIdentifier;
- (void)synchronizeAutomaticDownloadKinds;
- (id)thinnedApplicationVariantIdentifier;
- (void)unionAutomaticDownloadKinds:(id)arg1 withCompletionBlock:(id /* block */)arg2;
- (id)uniqueDeviceIdentifier;
- (id)userAgent;
- (id)userAgentWithBundleIdentifier:(id)arg1 version:(id)arg2;
- (id)userAgentWithBundleRef:(struct __CFBundle { }*)arg1 isCachable:(bool*)arg2;
- (id)userAgentWithClientName:(id)arg1 version:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
