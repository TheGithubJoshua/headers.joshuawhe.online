<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>APBrowserBTLEManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/APTransport.framework/APBrowserBTLEManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/APTransport.framework/APTransport (387.2)
 */

@interface APBrowserBTLEManager : NSObject <APBluetoothClientDelegate> {
    APBluetoothClient * _btleClient;
    NSMutableDictionary * _btleDevices;
    unsigned short  _btleMode;
    void * _eventHandlerContext;
    int (* _eventHandlerFunc;
    NSObject<OS_dispatch_queue> * _eventQueue;
    bool  _isAdvertising;
    bool  _isEnabled;
    bool  _isInvalidated;
    bool  _isScanning;
    bool  _isSoloBeaconDisabled;
    struct OpaqueAPBrowserBTLEManager { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; id x2; } * _managerRef;
    bool  _p2pSoloSupported;
    bool  _p2pSoloSupportedIsSet;
    bool  _preferencesUpdated;
    NSObject<OS_dispatch_queue> * _queue;
    NSObject<OS_dispatch_source> * _staleDevicesTimer;
    bool  _trackingEnabled;
}

@property (nonatomic, retain) APBluetoothClient *btleClient;
@property (nonatomic, retain) NSMutableDictionary *btleDevices;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) void*eventHandlerContext;
@property (nonatomic) int (*eventHandlerFunc;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *eventQueue;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isAdvertising;
@property (nonatomic) bool isEnabled;
@property (nonatomic) bool isInvalidated;
@property (nonatomic) bool isScanning;
@property (nonatomic) bool isSoloBeaconDisabled;
@property (nonatomic) struct OpaqueAPBrowserBTLEManager { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; id x2; }*managerRef;
@property (nonatomic) bool preferencesUpdated;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic) NSObject<OS_dispatch_source> *staleDevicesTimer;
@property (readonly) Class superclass;

+ (int)createEventInfoDictionary:(id*)arg1 withDeviceID:(id)arg2 IPAddress:(id)arg3 port:(id)arg4 supportsSolo:(id)arg5 rssi:(id)arg6;

- (void)airPlaySolo:(id)arg1 failedToStartAdvertisingWithError:(id)arg2;
- (void)airPlaySolo:(id)arg1 failedToStartScanningWithError:(id)arg2;
- (void)airPlaySolo:(id)arg1 foundDevice:(id)arg2 withData:(id)arg3;
- (void)airPlaySoloDidUpdateState:(id)arg1;
- (void)airPlaySoloStartedAdvertising:(id)arg1;
- (void)airPlaySoloStartedScanning:(id)arg1;
- (void)airPlaySoloStoppedAdvertising:(id)arg1;
- (void)airPlaySoloStoppedScanning:(id)arg1;
- (id)btleClient;
- (id)btleDevices;
- (int)copyShowInfo:(id*)arg1 verbose:(bool)arg2;
- (void)dealloc;
- (int)dispatchEvent:(unsigned int)arg1 withEventInfo:(id)arg2;
- (int)dispatchLostEventForAllDevices;
- (int)ensureAdvertisingStarted;
- (int)ensureAdvertisingStopped;
- (int)ensureBTLEClientInitialized;
- (int)ensurePreferencesUpdatedWithShouldForce:(bool)arg1;
- (int)ensureScanningStarted;
- (int)ensureScanningStopped;
- (int)ensureStaleDeviceTimerStarted;
- (void*)eventHandlerContext;
- (int (*)eventHandlerFunc;
- (id)eventQueue;
- (int)getBTLEMode:(unsigned short*)arg1;
- (int)getTrackingEnabled:(bool*)arg1;
- (int)handleFoundDevice:(id)arg1 withAdvertisementData:(struct { unsigned char x1; unsigned char x2; unsigned char x3[4]; }*)arg2 rssi:(int)arg3;
- (int)handleLostDevice:(id)arg1;
- (id)init;
- (int)invalidate;
- (bool)isAdvertising;
- (bool)isEnabled;
- (bool)isInvalidated;
- (bool)isScanning;
- (bool)isSoloBeaconDisabled;
- (struct OpaqueAPBrowserBTLEManager { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; id x2; }*)managerRef;
- (unsigned long long)nearbySoloDevicesCount;
- (bool)preferencesUpdated;
- (id)queue;
- (int)setBTLEMode:(unsigned short)arg1;
- (void)setBtleClient:(id)arg1;
- (void)setBtleDevices:(id)arg1;
- (int)setEventHandler:(int (*)arg1 context:(void*)arg2 managerRef:(struct OpaqueAPBrowserBTLEManager { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; id x2; }*)arg3;
- (void)setEventHandlerContext:(void*)arg1;
- (void)setEventHandlerFunc:(int (*)arg1;
- (void)setIsAdvertising:(bool)arg1;
- (void)setIsEnabled:(bool)arg1;
- (void)setIsInvalidated:(bool)arg1;
- (void)setIsScanning:(bool)arg1;
- (void)setIsSoloBeaconDisabled:(bool)arg1;
- (void)setManagerRef:(struct OpaqueAPBrowserBTLEManager { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; id x2; }*)arg1;
- (void)setPreferencesUpdated:(bool)arg1;
- (void)setStaleDevicesTimer:(id)arg1;
- (int)setSupportsSolo:(bool)arg1;
- (int)setTrackingEnabled:(bool)arg1;
- (bool)shouldAdvertiseSourcePresence;
- (id)staleDevicesTimer;
- (int)startMode:(unsigned short)arg1;
- (int)stop;
- (id)stringForBTLEmode:(unsigned short)arg1;
- (int)update;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
