<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BLPromiseImage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoEditSupport.framework/BLPromiseImage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoEditSupport.framework/PhotoEditSupport (1)
 */

@interface BLPromiseImage : BLImage {
    long long  _actualOrientation;
    BLAdjustmentModel * _adjustmentModel;
    NSDictionary * _adjustments;
    NSDictionary * _analysis;
    long long  _backOrientation;
    BLCropModel * _cropModel;
    NSLock * _drawLock;
    BLPixelImageBuffer * _flattenedImageBuffer;
    BLImagePatchList * _imagePatchList;
    long long  _initialOrientation;
    BLPhotoEffectsModel * _photoEffectsModel;
    BLImagePatchList * _repairImagePatchList;
    BLRepairModel * _repairModel;
    BLRetouchModel * _retouchModel;
    struct CGImage { } * _sourceCGImage;
    struct CGSize { 
        double width; 
        double height; 
    }  _sourceSize;
    BLCropModel * _userCropModel;
}

@property (nonatomic, readonly) struct CGSize { double x1; double x2; } sourceSize;

+ (void)convertXMP:(id)arg1 toAdjustments:(id)arg2 andAnalysis:(id)arg3 size:(struct CGSize { double x1; double x2; })arg4 image:(id)arg5 needsHistogram:(bool*)arg6;
+ (id)imageWithImage:(id)arg1;
+ (struct CGSize { double x1; double x2; })maximumSizeForFlattening;

- (void).cxx_destruct;
- (struct CGImage { }*)CGImage;
- (id)CIImage;
- (id)UIImage;
- (void)_drawImagePatchListInContext:(struct CGContext { }*)arg1 imagePatchList:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3 drawScaleX:(double)arg4 drawScaleY:(double)arg5 totalPadding:(double)arg6;
- (bool)_flattenInContext:(struct CGContext { }*)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2 progressBlock:(id /* block */)arg3;
- (struct CGSize { double x1; double x2; })_targetSizeForBoundingSize:(struct CGSize { double x1; double x2; })arg1 shouldScaleForScreen:(bool)arg2;
- (void)dealloc;
- (void)drawInContext:(struct CGContext { }*)arg1 forRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 andSize:(struct CGSize { double x1; double x2; })arg3;
- (id)flattenedImageFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forSize:(struct CGSize { double x1; double x2; })arg2;
- (id)flattenedImageInBoundingSize:(struct CGSize { double x1; double x2; })arg1;
- (id)flattenedImageInBoundingSize:(struct CGSize { double x1; double x2; })arg1 shouldScaleForScreen:(bool)arg2;
- (id)flattenedImageInBoundingSize:(struct CGSize { double x1; double x2; })arg1 shouldScaleForScreen:(bool)arg2 progressBlock:(id /* block */)arg3;
- (id)flattenedPixelImageBufferInBoundingSize:(struct CGSize { double x1; double x2; })arg1 shouldScaleForScreen:(bool)arg2;
- (bool)hasColor;
- (bool)hasCrop;
- (bool)hasEdgeEffects;
- (bool)hasEdits;
- (bool)hasExposure;
- (bool)hasFastDownstreamEffects;
- (bool)hasInkEffects;
- (bool)hasPhotoEffects;
- (bool)hasRedeye;
- (bool)hasRepair;
- (bool)hasRepairOrRedeye;
- (bool)hasRetouch;
- (bool)hasRotation;
- (id)initWithCGImage:(struct CGImage { }*)arg1 backOrientation:(long long)arg2 orientation:(long long)arg3 adjustmentData:(id)arg4 andAnalysisData:(id)arg5 andOptionFlags:(int)arg6;
- (id)initWithCGImage:(struct CGImage { }*)arg1 flattenedImageBuffer:(id)arg2 orientation:(long long)arg3 adjustmentData:(id)arg4 andAnalysisData:(id)arg5 andOptionFlags:(int)arg6;
- (id)initWithCGImage:(struct CGImage { }*)arg1 orImagePatchList:(id)arg2 flattenedImageBuffer:(id)arg3 backOrientation:(long long)arg4 orientation:(long long)arg5 userCrop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6 adjustmentData:(id)arg7 andAnalysisData:(id)arg8 andOptionFlags:(int)arg9;
- (id)initWithCGImage:(struct CGImage { }*)arg1 orientation:(long long)arg2 adjustmentData:(id)arg3 andAnalysisData:(id)arg4;
- (id)initWithCGImage:(struct CGImage { }*)arg1 orientation:(long long)arg2 adjustmentData:(id)arg3 andAnalysisData:(id)arg4 andOptionFlags:(int)arg5;
- (id)initWithImagePatchList:(id)arg1 backOrientation:(long long)arg2 orientation:(long long)arg3 adjustmentData:(id)arg4 andAnalysisData:(id)arg5 andOptionFlags:(int)arg6;
- (id)initWithPromiseImage:(id)arg1 andOptionFlags:(int)arg2;
- (id)initWithPromiseImage:(id)arg1 userCrop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 andOptionFlags:(int)arg3;
- (struct CGSize { double x1; double x2; })maximumSize;
- (void)prepareForDrawing;
- (id)repairLayerStack;
- (id)retouchLayerStack;
- (void)setRepairLayerStack:(id)arg1;
- (void)setRetouchLayerStack:(id)arg1;
- (struct CGSize { double x1; double x2; })sourceSize;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
