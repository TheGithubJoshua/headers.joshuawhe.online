<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BLCropModel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoEditSupport.framework/BLCropModel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoEditSupport.framework/PhotoEditSupport (1)
 */

@interface BLCropModel : NSObject {
    float  _angle;
    float  _cropConstrain;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropRect;
    struct CGSize { 
        double width; 
        double height; 
    }  _nsqPhotoSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _photoSize;
}

@property float angle;
@property float cropConstrain;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRect;
@property (readonly) struct CGSize { double x1; double x2; } photoSize;

+ (bool)validateCropRectFor0Angle:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })CGAffineTransform;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })CGAffineTransformForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)adjustEdgeForDragAction:(int)arg1 withAmount:(struct CGPoint { double x1; double x2; })arg2 andLockAspectRatio:(bool)arg3;
- (float)angle;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bestCropRectForIntialCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inTrialRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withFaceDictionaries:(id)arg3;
- (void)calculateCornerPoints:(struct CGPoint { double x1; double x2; }*)arg1;
- (void)calculateCornerPoints:(struct CGPoint { double x1; double x2; }*)arg1 forCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)changeCropAspectRatioTo:(float)arg1 withNewCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })ciAffineTransformForSourceSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })ciCropRectForSourceSize:(struct CGSize { double x1; double x2; })arg1;
- (float)cropConstrain;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (id)croppedImageFromImage:(id)arg1;
- (struct CGSize { double x1; double x2; })croppedSize;
- (struct CGSize { double x1; double x2; })croppedSizeForSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)hasCrop;
- (id)initWithModel:(id)arg1;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 andDictionary:(id)arg2;
- (struct CGPoint { double x1; double x2; })maxAllowableEdgeAdjustmentForDragAction:(int)arg1 withDirection:(struct CGPoint { double x1; double x2; })arg2 andLockAspectRatio:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })maxAllowedPanWithCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (float)maxAllowedRotationFromPoint:(struct CGPoint { double x1; double x2; })arg1 counterClockwise:(bool)arg2;
- (float)maxAllowedScaleFromPoint:(struct CGPoint { double x1; double x2; })arg1 scaleUp:(bool)arg2;
- (float)maxAllowedTranslateWithDirection:(float)arg1;
- (struct CGImage { }*)newAspectedPreviewFromImage:(struct CGImage { }*)arg1 forSize:(struct CGSize { double x1; double x2; })arg2 withNewCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 andOrientation:(long long)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })newCropRectForRatio:(float)arg1 withCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 andFaceDictionaries:(id)arg3;
- (struct CGImage { }*)newRenderedCroppedImageFromImage:(struct CGImage { }*)arg1 forSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGImage { }*)newRenderedCroppedImageFromImage:(struct CGImage { }*)arg1 forSize:(struct CGSize { double x1; double x2; })arg2 andOrientation:(long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedIntersectionPointsForCropWithLineFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGSize { double x1; double x2; })photoSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })recomputeCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forStraightenAngle:(float)arg2;
- (void)reset;
- (void)rotate:(float)arg1 fromPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)scale:(float)arg1 fromPoint:(struct CGPoint { double x1; double x2; })arg2;
- (int)scoreFaces:(id)arg1 ForTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (void)setAngle:(float)arg1;
- (void)setCropAndAngleFromCIAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 andCICrop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 forSourceSize:(struct CGSize { double x1; double x2; })arg3;
- (void)setCropConstrain:(float)arg1;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (int)touchedImageSidesForCurrentCrop;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformForTrialCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)translate:(float)arg1 atAngle:(float)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
