<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NMSMessageCenter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CompanionSync.framework/NMSMessageCenter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync (1)
 */

@interface NMSMessageCenter : NSObject <IDSServiceDelegate> {
    bool  _checkedForQWS;
    unsigned long long  _currentBytesInFlight;
    <NMSMessageCenterDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    bool  _delegateRequiresACKs;
    bool  _enableTransmissionWindow;
    NSMutableDictionary * _errorHandlers;
    NSObject<OS_dispatch_source> * _expireTimer;
    _SYMultiSuspendableQueue * _idsIncomingQueue;
    NSString * _launchNotification;
    struct __CFString { } * _loggingFacility;
    unsigned long long  _maxBytesInFlight;
    unsigned long long  _maxMessagesInFlight;
    unsigned long long  _minMessagesInFlight;
    NSDate * _nextExpireTimerFireDate;
    NSMutableDictionary * _pbMapping;
    NMSPersistentDictionary * _persistentContextStore;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableDictionary * _requestHandlers;
    NSMutableDictionary * _responseHandlers;
    IDSService * _service;
    NSString * _serviceIdentifier;
    NSObject<OS_os_activity> * _transportActivity;
    NMSWindowData * _windowData;
    _NMSDispatchQueue * _windowQueue;
    double  _windowResponseTimeout;
    NSObject<OS_dispatch_source> * _windowTimeout;
}

@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *actionQ;
@property (getter=_currentBytesInFlight, nonatomic, readonly) unsigned long long currentBytesInFlight;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NMSMessageCenterDelegate> *delegate;
@property (nonatomic) bool delegateRequiresACKs;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enableTransmissionWindow;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) IDSService *idsService;
@property (nonatomic) unsigned long long maxBytesInFlight;
@property (nonatomic) unsigned long long maxMessagesInFlight;
@property (nonatomic) unsigned long long minMessagesInFlight;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) IDSService *service;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSObject<OS_os_activity> *transportActivity;
@property (nonatomic) double windowResponseTimeout;

+ (bool)messageWindowCountEnabled;
+ (void)setMessageWindowCountEnabled:(bool)arg1;

- (void).cxx_destruct;
- (id)_buildDataForRequest:(id)arg1 options:(id*)arg2;
- (id)_buildDataForResponse:(id)arg1 options:(id*)arg2;
- (void)_checkForSwitch;
- (unsigned long long)_currentBytesInFlight;
- (id)_decodeIncomingRequestData:(id)arg1 context:(id)arg2;
- (void)_expireMessages;
- (void)_handleError:(id)arg1 context:(id)arg2;
- (void)_obliterate;
- (id)_pbMappingForMessageID:(unsigned short)arg1;
- (void)_sendResponse:(id)arg1;
- (void)_setNextWindowTimeoutFireDate;
- (void)_timeoutWindowedMessages;
- (void)_updateExpireTimerWithDate:(id)arg1;
- (id)actionQ;
- (void)addErrorHandlerForMessageID:(unsigned short)arg1 usingBlock:(id /* block */)arg2;
- (void)addRequestHandlerForMessageID:(unsigned short)arg1 usingBlock:(id /* block */)arg2;
- (void)addResponseHandler:(unsigned short)arg1 usingBlock:(id /* block */)arg2;
- (bool)cancelMessageWithID:(id)arg1 error:(id*)arg2;
- (void)dealloc;
- (id)delegate;
- (bool)delegateRequiresACKs;
- (id)description;
- (id)deviceIDFromDevice:(id)arg1;
- (void)dropExtantMessages;
- (bool)enableTransmissionWindow;
- (id)errorHandlers;
- (id)idsService;
- (id)init;
- (id)initWithIDSServiceIdentifier:(id)arg1;
- (id)initWithIDSServiceIdentifier:(id)arg1 launchOnDemandNotification:(id)arg2 cacheFolderPath:(id)arg3;
- (void)mapPBRequest:(Class)arg1 toResponse:(Class)arg2 messageID:(unsigned short)arg3;
- (unsigned long long)maxBytesInFlight;
- (unsigned long long)maxMessagesInFlight;
- (unsigned long long)minMessagesInFlight;
- (id)queue;
- (id)requestHandlers;
- (id)responseHandlers;
- (void)resume;
- (void)resumeIncomingMessages;
- (void)sendFile:(id)arg1;
- (void)sendRequest:(id)arg1;
- (id)service;
- (void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 didSendWithSuccess:(bool)arg4 error:(id)arg5;
- (void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 hasBeenDeliveredWithContext:(id)arg4;
- (void)service:(id)arg1 account:(id)arg2 incomingData:(id)arg3 fromID:(id)arg4 context:(id)arg5;
- (void)service:(id)arg1 account:(id)arg2 incomingResourceAtURL:(id)arg3 metadata:(id)arg4 fromID:(id)arg5 context:(id)arg6;
- (void)service:(id)arg1 didSwitchActivePairedDevice:(id)arg2 acknowledgementBlock:(id /* block */)arg3;
- (void)service:(id)arg1 nearbyDevicesChanged:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setDelegateRequiresACKs:(bool)arg1;
- (void)setEnableTransmissionWindow:(bool)arg1;
- (void)setMaxBytesInFlight:(unsigned long long)arg1;
- (void)setMaxMessagesInFlight:(unsigned long long)arg1;
- (void)setMinMessagesInFlight:(unsigned long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setService:(id)arg1;
- (void)setTransportActivity:(id)arg1;
- (void)setWindowResponseTimeout:(double)arg1;
- (void)suspendIncomingMessages;
- (id)transportActivity;
- (double)windowResponseTimeout;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
