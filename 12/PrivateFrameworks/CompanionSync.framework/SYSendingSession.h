<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SYSendingSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CompanionSync.framework/SYSendingSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync (1)
 */

@interface SYSendingSession : SYSession {
    NSMutableIndexSet * _ackedBatchIndices;
    unsigned long long  _batchIndex;
    NSMutableArray * _batchMessageIDs;
    struct NSMutableDictionary { Class x1; } * _batchObjectIDsByBatchIndex;
    _SYCountedSemaphore * _changeConcurrencySemaphore;
    NSObject<OS_dispatch_queue> * _changeFetcherQueue;
    NSObject<OS_os_activity> * _changeWaitActivity;
    SYMessageStatusRecord * _endMessageID;
    struct { 
        unsigned int state : 4; 
        unsigned int canRestart : 1; 
        unsigned int canRollback : 1; 
        unsigned int isResetSync : 1; 
        unsigned int started : 1; 
        unsigned int cancelled : 1; 
        unsigned int completed : 1; 
        unsigned int remoteStartSent : 1; 
        unsigned int remoteStartConfirmed : 1; 
        unsigned int remoteEndSent : 1; 
        unsigned int remoteEndConfirmed : 1; 
        unsigned int localErrorOccurred : 1; 
    }  _flags;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _flagsLock;
    NSObject<OS_dispatch_source> * _messageTimer;
    NSObject<OS_os_activity> * _sessionActivity;
    double  _sessionStartTime;
    NSObject<OS_dispatch_source> * _sessionTimer;
    SYMessageStatusRecord * _startMessageID;
    NSObject<OS_dispatch_source> * _stateUpdateSource;
}

- (void).cxx_destruct;
- (void)_confirmedEnd;
- (void)_confirmedStart;
- (void)_continue;
- (void)_fetchNextBatch;
- (void)_handleEndSession:(id)arg1 response:(id)arg2 completion:(id /* block */)arg3;
- (bool)_handleEndSessionResponse:(id)arg1 error:(id*)arg2;
- (void)_handleRestartSession:(id)arg1 response:(id)arg2 completion:(id /* block */)arg3;
- (bool)_handleRestartSessionResponse:(id)arg1 error:(id*)arg2;
- (bool)_handleStartSessionResponse:(id)arg1 error:(id*)arg2;
- (void)_handleSyncBatch:(id)arg1 response:(id)arg2 completion:(id /* block */)arg3;
- (bool)_handleSyncBatchResponse:(id)arg1 error:(id*)arg2;
- (bool)_hasSentEnd;
- (void)_installStateListener;
- (void)_installTimers;
- (bool)_localErrorOccurred;
- (id)_newMessageHeader;
- (void)_notifyErrorAndShutdown;
- (void)_peerProcessedMessageWithIdentifier:(id)arg1 userInfo:(id)arg2;
- (void)_processNextState;
- (void)_resolvedIdentifier:(id)arg1 forResponse:(id)arg2;
- (void)_resolvedIdentifierForRequest:(id)arg1;
- (void)_sendEndSessionAndError:(id)arg1;
- (void)_sendSyncBatch:(id)arg1 nextState:(long long)arg2;
- (void)_sendSyncCancelled;
- (void)_sendSyncCompleteAndRunBlock:(id /* block */)arg1;
- (void)_sendSyncRestart;
- (void)_sentEnd;
- (void)_sentMessageWithIdentifier:(id)arg1 userInfo:(id)arg2;
- (void)_sentStart;
- (void)_sessionFinished;
- (void)_setCancelled;
- (void)_setComplete;
- (void)_setLocalErrorOccurred;
- (void)_setMessageTimer;
- (void)_setStateQuietly:(long long)arg1;
- (void)_setupChangeConcurrency;
- (void)_startFailedForStateChangeWithError:(id)arg1;
- (void)_tweakMessageHeader:(id)arg1;
- (void)_waitForMessageWindow;
- (bool)canRestart;
- (bool)canRollback;
- (void)cancelWithError:(id)arg1;
- (id)initWithService:(id)arg1 isReset:(bool)arg2;
- (bool)isResetSync;
- (bool)isSending;
- (double)remainingSessionTime;
- (void)setCanRestart:(bool)arg1;
- (void)setCanRollback:(bool)arg1;
- (void)setState:(long long)arg1;
- (void)start:(id /* block */)arg1;
- (long long)state;
- (bool)wasCancelled;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
