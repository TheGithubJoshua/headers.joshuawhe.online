<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SYPersistentStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CompanionSync.framework/SYPersistentStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync (1)
 */

@interface SYPersistentStore : NSObject {
    NSSet * _cachedChangedSyncIDs;
    unsigned long long  _cachedChangedSyncIDsVersion;
    bool  _cachedVersionStale;
    bool  _changeTrackingEnabled;
    struct sqlite3 { } * _db;
    struct sqlite3_stmt { } * _enterFullSync;
    struct sqlite3_stmt { } * _exitFullSync;
    struct sqlite3_stmt { } * _getAllSentForCurrentSync;
    struct sqlite3_stmt { } * _getChangeCount;
    struct sqlite3_stmt { } * _getChangeIDsSinceVersion;
    struct sqlite3_stmt { } * _getCurrentSyncID;
    struct sqlite3_stmt { } * _getCurrentSyncStartTime;
    struct sqlite3_stmt { } * _getFullsyncSent;
    struct sqlite3_stmt { } * _getIgnoringSyncID;
    struct sqlite3_stmt { } * _getInFullSync;
    struct sqlite3_stmt { } * _getLastEndedSyncID;
    struct sqlite3_stmt { } * _getLastSyncError;
    struct sqlite3_stmt { } * _getLocalVersion;
    struct sqlite3_stmt { } * _getNextExpireTime;
    struct sqlite3_stmt { } * _getOldestVersion;
    struct sqlite3_stmt { } * _getPeerSeqNo;
    struct sqlite3_stmt { } * _getSyncIDSOptions;
    struct sqlite3_stmt { } * _getSyncUserInfo;
    struct sqlite3_stmt { } * _getWaitingForSyncID;
    NSMutableSet * _ignoringMessageIDs;
    struct sqlite3_stmt { } * _insertChange;
    struct sqlite3_stmt { } * _logSyncComplete;
    struct __CFString { } * _loggingFacility;
    NSString * _path;
    NSString * _peerID;
    NSMutableDictionary * _peerSeqnoSets;
    struct sqlite3_stmt { } * _purgeExpiredChanges;
    struct sqlite3_stmt { } * _setAllSentForSyncID;
    struct sqlite3_stmt { } * _setFullsyncSent;
    struct sqlite3_stmt { } * _setPeerSeqNo;
    struct sqlite3_stmt { } * _setPeerSeqNoSet;
    struct sqlite3_stmt { } * _setSyncIDSOptions;
    struct sqlite3_stmt { } * _setSyncUserInfo;
    struct sqlite3_stmt { } * _setVectorClock;
    struct sqlite3_stmt { } * _setWaitingForSyncID;
    _SYSharedServiceDB * _sharedDB;
    NSObject<OS_dispatch_queue> * _syncQ;
    double  _timeToLiveCache;
    NSObject<OS_os_transaction> * _transaction;
    double  _unfinishedSyncTimeout;
}

@property (nonatomic, retain) NSSet *cachedChangedSyncIDs;
@property (nonatomic) unsigned long long cachedChangedSyncIDsVersion;
@property (nonatomic) bool cachedVersionStale;
@property (nonatomic, readonly) bool canStartNewSyncSession;
@property (nonatomic, readonly) unsigned long long changeCount;
@property (nonatomic) bool completedSync;
@property (nonatomic, readonly) NSString *currentFullSyncID;
@property (nonatomic, readonly) unsigned long long currentLocalVersion;
@property (nonatomic, readonly) bool currentSyncSendComplete;
@property (nonatomic, readonly) double durationOfLastFullSync;
@property (nonatomic, copy) NSDictionary *fullSyncIDSOptions;
@property (nonatomic, copy) NSDictionary *fullSyncUserInfo;
@property (nonatomic, readonly) bool inFullSync;
@property (nonatomic, copy) NSDate *lastMessageReceived;
@property (nonatomic, readonly) unsigned long long lastSeenRemoteVersion;
@property (nonatomic, readonly) NSString *lastSyncEndID;
@property (nonatomic, readonly) NSError *lastSyncError;
@property (nonatomic, readonly) bool lastSyncFailed;
@property (nonatomic, copy) NSDate *overflowResyncTime;
@property (nonatomic, readonly) NSString *path;
@property (nonatomic, readonly) NSString *peerID;
@property (getter=isPerformingDeltaSync, nonatomic) bool performingDeltaSync;
@property (nonatomic, retain) _SYSharedServiceDB *sharedDB;
@property (nonatomic) double timeToLive;
@property (nonatomic) double unfinishedSyncTimeout;
@property (nonatomic, retain) NSString *vectorClockJSON;
@property (nonatomic, copy) NSString *waitingForSyncEndID;

+ (id)_loadOrCreatePeerIDForDB:(struct sqlite3 { }*)arg1;
+ (bool)_tableEmpty:(id)arg1 db:(struct sqlite3 { }*)arg2;
+ (id)sharedPersistentStoreForService:(id)arg1;

- (void).cxx_destruct;
- (bool)_LOCKED_storeSequenceNumberSet:(id)arg1 forPeerID:(id)arg2 db:(struct sqlite3 { }*)arg3 error:(id*)arg4;
- (void)_cacheTTL;
- (void)_convertTimestamps;
- (struct sqlite3 { }*)_dbRef;
- (id)_decodeIndexSet:(id)arg1;
- (id)_encodeIndexSet:(id)arg1;
- (void)_fixPeerInfo;
- (int)_getSchemaVersion;
- (bool)_inTransaction:(bool)arg1 do:(id /* block */)arg2;
- (unsigned long long)_lastSequenceNumberForPeerID_LOCKED:(id)arg1 db:(struct sqlite3 { }*)arg2;
- (void)_loadIgnoreList_LOCKED:(struct sqlite3 { }*)arg1;
- (unsigned long long)_oldestVersion;
- (bool)_openDBAtPath:(id)arg1;
- (void)_prepareStatements;
- (void)_saveIgnoreList_LOCKED:(struct sqlite3 { }*)arg1;
- (id)_sequenceNumberSetForPeerID:(id)arg1 inDB:(struct sqlite3 { }*)arg2;
- (void)_setupSharedDB;
- (void)_storeSequenceNumberSet:(id)arg1 forPeerID:(id)arg2;
- (void)_verifyInTransactionForFullSync;
- (void)_withDB:(id /* block */)arg1;
- (void)addMessageIDsToIgnore:(id)arg1;
- (id)cachedChangedSyncIDs;
- (unsigned long long)cachedChangedSyncIDsVersion;
- (bool)cachedVersionStale;
- (bool)canStartNewSyncSession;
- (unsigned long long)changeCount;
- (void)changeTrackingToggled:(bool)arg1;
- (void)clearAllChanges;
- (bool)completedSync;
- (id)currentFullSyncID;
- (unsigned long long)currentLocalVersion;
- (bool)currentSyncSendComplete;
- (id)dbPath;
- (void)dealloc;
- (double)durationOfLastFullSync;
- (void)enterFullSyncWithID:(id)arg1 ignoring:(bool)arg2;
- (void)exitFullSyncWithID:(id)arg1 error:(id)arg2;
- (id)fullSyncIDSOptions;
- (id)fullSyncUserInfo;
- (bool)ignoringFullSyncWithID:(id)arg1;
- (bool)inFullSync;
- (id)init;
- (id)initWithPath:(id)arg1 loggingFacility:(const struct __CFString { }*)arg2 changeTrackingEnabled:(bool)arg3;
- (id)initWithSharedDatabase:(id)arg1;
- (bool)isPerformingDeltaSync;
- (id)lastDBErrorInfo;
- (id)lastMessageReceived;
- (unsigned long long)lastSeenRemoteVersion;
- (unsigned long long)lastSequenceNumberForPeerID:(id)arg1;
- (id)lastSyncEndID;
- (id)lastSyncError;
- (bool)lastSyncFailed;
- (bool)logChanges:(id)arg1 error:(id*)arg2;
- (bool)logSyncCompletionToRemoteVersion:(unsigned long long)arg1;
- (unsigned long long)nextSequenceNumber;
- (bool)objectChanged:(id)arg1 sinceVersion:(unsigned long long)arg2;
- (id)overflowResyncTime;
- (id)path;
- (id)peerID;
- (bool)reassignCurrentSyncID:(id)arg1;
- (void)removeMessageIDFromIgnoreList:(id)arg1;
- (void)resetSequenceNumber:(unsigned long long)arg1;
- (void)resetSequenceNumbersForPeer:(id)arg1;
- (void)sendCompletedForSyncWithID:(id)arg1;
- (bool)sequenceNumberIsDuplicate:(unsigned long long)arg1 forPeer:(id)arg2;
- (void)setCachedChangedSyncIDs:(id)arg1;
- (void)setCachedChangedSyncIDsVersion:(unsigned long long)arg1;
- (void)setCachedVersionStale:(bool)arg1;
- (void)setCompletedSync:(bool)arg1;
- (void)setFullSyncIDSOptions:(id)arg1;
- (void)setFullSyncUserInfo:(id)arg1;
- (void)setLastMessageReceived:(id)arg1;
- (void)setLastSequenceNumber:(unsigned long long)arg1 fromPeer:(id)arg2;
- (bool)setLastSequenceNumber:(unsigned long long)arg1 fromPeer:(id)arg2 error:(id*)arg3;
- (void)setOverflowResyncTime:(id)arg1;
- (void)setPeerID:(id)arg1;
- (void)setPerformingDeltaSync:(bool)arg1;
- (void)setSharedDB:(id)arg1;
- (void)setTimeToLive:(double)arg1;
- (void)setUnfinishedSyncTimeout:(double)arg1;
- (void)setVectorClockJSON:(id)arg1;
- (void)setWaitingForSyncEndID:(id)arg1;
- (id)sharedDB;
- (bool)shouldIgnoreMessageID:(id)arg1;
- (double)timeToLive;
- (double)unfinishedSyncTimeout;
- (id)vectorClockJSON;
- (id)waitingForSyncEndID;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
