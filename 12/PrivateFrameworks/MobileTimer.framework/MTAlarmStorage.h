<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MTAlarmStorage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MobileTimer.framework/MTAlarmStorage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MobileTimer.framework/MobileTimer (1)
 */

@interface MTAlarmStorage : NSObject <MTAlarmScheduleDelegate, MTAlarmStorage> {
    id /* block */  _currentDateProvider;
    NSDate * _lastModifiedDate;
    MTAlarmMigrator * _migrator;
    NSHashTable * _observers;
    NSMutableArray * _orderedAlarms;
    <MTPersistence> * _persistence;
    MTAlarmScheduler * _scheduler;
    <NAScheduler> * _serializer;
    MTAlarm * _sleepAlarm;
}

@property (nonatomic, readonly) NSArray *alarms;
@property (nonatomic, readonly) NSArray *allAlarms;
@property (nonatomic, readonly, copy) id /* block */ currentDateProvider;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSDate *lastModifiedDate;
@property (nonatomic, retain) MTAlarmMigrator *migrator;
@property (nonatomic, readonly) MTAlarm *nextAlarm;
@property (nonatomic, retain) NSHashTable *observers;
@property (nonatomic, retain) NSMutableArray *orderedAlarms;
@property (nonatomic, retain) <MTPersistence> *persistence;
@property (nonatomic) MTAlarmScheduler *scheduler;
@property (nonatomic, retain) <NAScheduler> *serializer;
@property (nonatomic, retain) MTAlarm *sleepAlarm;
@property (readonly) Class superclass;

+ (id)_alarmsByMergingAlarms:(id)arg1 withAlarms:(id)arg2 addedAlarms:(id)arg3 updatedAlarms:(id)arg4;
+ (id)_diagnosticDictionaryForAlarm:(id)arg1;
+ (id)alarmsByMergingAlarms:(id)arg1 withAlarms:(id)arg2;

- (void).cxx_destruct;
- (id)_applyNecessaryChangesFromOldAlarm:(id)arg1 currentAlarm:(id)arg2;
- (id)_cleanUpForInternalBuild:(id)arg1;
- (id)_cleanUpSleepAlarmRepeat:(id)arg1;
- (id)_cleanUpSnoozeFireDate:(id)arg1;
- (id)_diagnosticAlarmDictionary;
- (void)_loadAlarmsWithCompletion:(id /* block */)arg1;
- (void)_notifyObserversForAlarmAdd:(id)arg1 source:(id)arg2;
- (void)_notifyObserversForAlarmChange:(id)arg1 source:(id)arg2;
- (void)_notifyObserversForAlarmDismiss:(id)arg1 dismissAction:(unsigned long long)arg2 source:(id)arg3;
- (void)_notifyObserversForAlarmFire:(id)arg1 triggerType:(unsigned long long)arg2 source:(id)arg3;
- (void)_notifyObserversForAlarmRemoval:(id)arg1 source:(id)arg2;
- (void)_notifyObserversForAlarmSnooze:(id)arg1 snoozeAction:(unsigned long long)arg2 source:(id)arg3;
- (void)_notifyObserversForNextAlarmChange:(id)arg1 source:(id)arg2;
- (void)_notifyObserversWithBlock:(id /* block */)arg1;
- (id)_queuePersistAlarm:(id)arg1 replacingAlarm:(id)arg2;
- (void)_queue_actuallyRemoveAlarm:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (void)_queue_addAlarm:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (id)_queue_alarmMatchingAlarm:(id)arg1;
- (id)_queue_alarmMatchingAlarmIdentifier:(id)arg1;
- (id)_queue_allAlarms;
- (void)_queue_dismissAlarmWithIdentifier:(id)arg1 dismissDate:(id)arg2 dismissAction:(unsigned long long)arg3 withCompletion:(id /* block */)arg4 source:(id)arg5;
- (bool)_queue_hasMatchingAlarm:(id)arg1;
- (void)_queue_mergeAlarms:(id)arg1 sleepAlarm:(id)arg2 source:(id)arg3;
- (void)_queue_persistAlarms;
- (void)_queue_removeAlarm:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (void)_queue_removeAlarmWithIdentifier:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (void)_queue_removeAllAlarmsForSource:(id)arg1;
- (void)_queue_resetAlarmsTo:(id)arg1 sleepAlarm:(id)arg2;
- (void)_queue_setAllAlarms:(id)arg1 sleepAlarm:(id)arg2 source:(id)arg3;
- (void)_queue_setAllAlarms:(id)arg1 sleepAlarm:(id)arg2 source:(id)arg3 persist:(bool)arg4 notify:(bool)arg5;
- (void)_queue_snoozeAlarmWithIdentifier:(id)arg1 snoozeDate:(id)arg2 snoozeAction:(unsigned long long)arg3 withCompletion:(id /* block */)arg4 source:(id)arg5;
- (void)_queue_sortAlarms;
- (id)_queue_updateAlarm:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (void)addAlarm:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (id)alarms;
- (id)allAlarms;
- (id /* block */)currentDateProvider;
- (void)dismissAlarmWithIdentifier:(id)arg1 dismissAction:(unsigned long long)arg2 withCompletion:(id /* block */)arg3 source:(id)arg4;
- (void)dismissAlarmWithIdentifier:(id)arg1 dismissDate:(id)arg2 dismissAction:(unsigned long long)arg3 withCompletion:(id /* block */)arg4 source:(id)arg5;
- (id)gatherDiagnostics;
- (void)getAlarmsWithCompletion:(id /* block */)arg1;
- (void)handleF5Reset;
- (id)init;
- (id)initWithPersistence:(id)arg1;
- (id)initWithPersistence:(id)arg1 migrator:(id)arg2 scheduler:(id)arg3 currentDateProvider:(id /* block */)arg4;
- (id)lastModifiedDate;
- (void)loadAlarms;
- (void)loadAlarmsSync;
- (void)mergeAlarms:(id)arg1 sleepAlarm:(id)arg2 source:(id)arg3;
- (id)migrator;
- (id)nextAlarm;
- (id)observers;
- (id)orderedAlarms;
- (id)persistence;
- (void)printDiagnostics;
- (void)registerObserver:(id)arg1;
- (void)removeAlarm:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (void)removeAlarmWithIdentifier:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (void)removeAllAlarmsForSource:(id)arg1;
- (id)scheduler;
- (void)scheduler:(id)arg1 didChangeNextAlarm:(id)arg2;
- (void)scheduler:(id)arg1 didFireAlarm:(id)arg2;
- (id)serializer;
- (void)setAllAlarms:(id)arg1 sleepAlarm:(id)arg2 source:(id)arg3;
- (void)setLastModifiedDate:(id)arg1;
- (void)setMigrator:(id)arg1;
- (void)setObservers:(id)arg1;
- (void)setOrderedAlarms:(id)arg1;
- (void)setPersistence:(id)arg1;
- (void)setScheduler:(id)arg1;
- (void)setSerializer:(id)arg1;
- (void)setSleepAlarm:(id)arg1;
- (id)sleepAlarm;
- (void)snoozeAlarmWithIdentifier:(id)arg1 snoozeAction:(unsigned long long)arg2 withCompletion:(id /* block */)arg3 source:(id)arg4;
- (void)snoozeAlarmWithIdentifier:(id)arg1 snoozeDate:(id)arg2 snoozeAction:(unsigned long long)arg3 withCompletion:(id /* block */)arg4 source:(id)arg5;
- (void)updateAlarm:(id)arg1 withCompletion:(id /* block */)arg2 source:(id)arg3;
- (id)updateBedTimeDNDForAlarm:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
