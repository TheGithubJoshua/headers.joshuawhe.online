<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NPSDomainAccessorInternal.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NanoPreferencesSync.framework/NPSDomainAccessorInternal.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NanoPreferencesSync.framework/NanoPreferencesSync (1)
 */

@interface NPSDomainAccessorInternal : NSObject <NPSDomainAccessorFilePresenterDelegate> {
    NSMutableSet * _dirtyKeysForWriting;
    NSString * _domain;
    NSURL * _domainURL;
    NSObject<OS_dispatch_queue> * _externalQueue;
    NPSDomainAccessorFilePresenter * _filePresenter;
    bool  _hasReadFromDisk;
    NSObject<OS_dispatch_queue> * _internalQueue;
    NSMutableDictionary * _map;
    bool  _nanoSettingsDirectoryExists;
    NSUUID * _pairingID;
    NSString * _pairingStorePath;
    unsigned long long  _referenceCounter;
}

@property (nonatomic, retain) NSMutableSet *dirtyKeysForWriting;
@property (nonatomic, retain) NSString *domain;
@property (nonatomic, retain) NSURL *domainURL;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *externalQueue;
@property (nonatomic, retain) NPSDomainAccessorFilePresenter *filePresenter;
@property (nonatomic) bool hasReadFromDisk;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *internalQueue;
@property (nonatomic, retain) NSMutableDictionary *map;
@property (nonatomic) bool nanoSettingsDirectoryExists;
@property (nonatomic, retain) NSUUID *pairingID;
@property (nonatomic, retain) NSString *pairingStorePath;
@property (nonatomic) unsigned long long referenceCounter;

+ (void)applicationDidEnterBackground;
+ (void)applicationDidResume;
+ (id)cfTypeNameForCFPropertyListRef:(void*)arg1;
+ (id)copyDomainListForPairingDataStore:(id)arg1;
+ (void)decrementInternalAccessorReferenceCount:(id)arg1;
+ (bool)domainIsValid:(id)arg1;
+ (void)extensionDidBecomeActive;
+ (void)extensionWillResignActive;
+ (void)initialize;
+ (id)internalAccessorForPairingID:(id)arg1 pairingDataStore:(id)arg2 domain:(id)arg3;
+ (void)invalidateAndReleaseUnreferencedAccessors;
+ (void)mergeDirtyKeys:(id)arg1 fromDictionary:(id)arg2 toDictionary:(id)arg3;
+ (id)readDomainURL:(id)arg1 withError:(id*)arg2;
+ (id)urlForDomain:(id)arg1 pairingDataStore:(id)arg2;
+ (bool)valueIsValid:(id)arg1;
+ (id)writeDomain:(id)arg1 toURL:(id)arg2;

- (void).cxx_destruct;
- (id)URLForKey:(id)arg1;
- (id)_copyKeyList;
- (id)_dictionaryRepresentation;
- (void)_invalidatePresenter;
- (id)_objectForKey:(id)arg1 error:(id*)arg2;
- (void)_setObject:(id)arg1 forKey:(id)arg2;
- (id)_synchronizeReadOnly:(bool)arg1;
- (id)arrayForKey:(id)arg1;
- (bool)boolForKey:(id)arg1;
- (bool)boolForKey:(id)arg1 keyExistsAndHasValidFormat:(bool*)arg2;
- (id)canSynchronizeForReadingURL:(id)arg1;
- (id)canSynchronizeForWritingURL:(id)arg1 readFirst:(bool)arg2;
- (id)copyKeyList;
- (id)createNanoSettingsDirectory;
- (id)dataForKey:(id)arg1;
- (void)dealloc;
- (id)dictionaryForKey:(id)arg1;
- (id)dictionaryRepresentation;
- (id)dirtyKeysForWriting;
- (id)domain;
- (id)domainURL;
- (double)doubleForKey:(id)arg1;
- (double)doubleForKey:(id)arg1 keyExistsAndHasValidFormat:(bool*)arg2;
- (id)externalQueue;
- (id)filePresenter;
- (void)filePresenterDidBecomeNonCurrent:(id)arg1;
- (float)floatForKey:(id)arg1;
- (float)floatForKey:(id)arg1 keyExistsAndHasValidFormat:(bool*)arg2;
- (bool)hasReadFromDisk;
- (id)initWithPairingID:(id)arg1 pairingDataStore:(id)arg2 domain:(id)arg3;
- (long long)integerForKey:(id)arg1;
- (long long)integerForKey:(id)arg1 keyExistsAndHasValidFormat:(bool*)arg2;
- (id)internalQueue;
- (void)invalidatePresenter;
- (long long)longForKey:(id)arg1;
- (long long)longForKey:(id)arg1 keyExistsAndHasValidFormat:(bool*)arg2;
- (id)map;
- (bool)nanoSettingsDirectoryExists;
- (id)objectForKey:(id)arg1;
- (void)objectForKey:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)pairingID;
- (id)pairingStorePath;
- (unsigned long long)referenceCounter;
- (void)removeObjectForKey:(id)arg1;
- (void)setBool:(bool)arg1 forKey:(id)arg2;
- (void)setDirtyKeysForWriting:(id)arg1;
- (void)setDomain:(id)arg1;
- (void)setDomainURL:(id)arg1;
- (void)setDouble:(double)arg1 forKey:(id)arg2;
- (void)setExternalQueue:(id)arg1;
- (void)setFilePresenter:(id)arg1;
- (void)setFloat:(float)arg1 forKey:(id)arg2;
- (void)setHasReadFromDisk:(bool)arg1;
- (void)setInteger:(long long)arg1 forKey:(id)arg2;
- (void)setInternalQueue:(id)arg1;
- (void)setLong:(long long)arg1 forKey:(id)arg2;
- (void)setMap:(id)arg1;
- (void)setNanoSettingsDirectoryExists:(bool)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (void)setObject:(id)arg1 forKey:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setPairingID:(id)arg1;
- (void)setPairingStorePath:(id)arg1;
- (void)setReferenceCounter:(unsigned long long)arg1;
- (void)setURL:(id)arg1 forKey:(id)arg2;
- (id)stringArrayForKey:(id)arg1;
- (id)stringForKey:(id)arg1;
- (id)synchronize;
- (void)synchronizeWithCompletionHandler:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
