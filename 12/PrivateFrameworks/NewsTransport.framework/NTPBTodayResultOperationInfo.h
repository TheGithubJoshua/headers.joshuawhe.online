<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NTPBTodayResultOperationInfo.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsTransport.framework/NTPBTodayResultOperationInfo.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsTransport.framework/NewsTransport (2166)
 */

@interface NTPBTodayResultOperationInfo : PBCodable <NSCopying> {
    bool  _allowLeadingCell;
    bool  _allowOnlyWatchEligibleSections;
    bool  _allowSectionTitles;
    NSString * _assetsDirectoryFileURLString;
    unsigned int  _dynamicThumbnailSizePresetMinimumHeightInPixels;
    unsigned int  _dynamicThumbnailSizePresetMinimumWidthInPixels;
    long long  _embedsLimit;
    bool  _fetchWidgetConfig;
    struct { 
        unsigned int embedsLimit : 1; 
        unsigned int leadingCellThumbnailSizePreset : 1; 
        unsigned int nonLeadingCellThumbnailSizePreset : 1; 
        unsigned int qualityOfService : 1; 
        unsigned int slotsLimit : 1; 
        unsigned int sourceNameImageSizePreset : 1; 
        unsigned int dynamicThumbnailSizePresetMinimumHeightInPixels : 1; 
        unsigned int dynamicThumbnailSizePresetMinimumWidthInPixels : 1; 
        unsigned int allowLeadingCell : 1; 
        unsigned int allowOnlyWatchEligibleSections : 1; 
        unsigned int allowSectionTitles : 1; 
        unsigned int fetchWidgetConfig : 1; 
        unsigned int preferCompactSectionName : 1; 
        unsigned int preferCompactSourceName : 1; 
        unsigned int respectsWidgetSlotsLimit : 1; 
        unsigned int respectsWidgetVisibleSectionsPerQueueLimit : 1; 
    }  _has;
    long long  _leadingCellThumbnailSizePreset;
    long long  _nonLeadingCellThumbnailSizePreset;
    NTPBSectionSlotCostInfo * _nonVideoSectionSlotCostInfo;
    bool  _preferCompactSectionName;
    bool  _preferCompactSourceName;
    long long  _qualityOfService;
    bool  _respectsWidgetSlotsLimit;
    bool  _respectsWidgetVisibleSectionsPerQueueLimit;
    double  _slotsLimit;
    long long  _sourceNameImageSizePreset;
    NTPBSectionSlotCostInfo * _videoSectionSlotCostInfo;
}

@property (nonatomic) bool allowLeadingCell;
@property (nonatomic) bool allowOnlyWatchEligibleSections;
@property (nonatomic) bool allowSectionTitles;
@property (nonatomic, retain) NSString *assetsDirectoryFileURLString;
@property (nonatomic) unsigned int dynamicThumbnailSizePresetMinimumHeightInPixels;
@property (nonatomic) unsigned int dynamicThumbnailSizePresetMinimumWidthInPixels;
@property (nonatomic) long long embedsLimit;
@property (nonatomic) bool fetchWidgetConfig;
@property (nonatomic) bool hasAllowLeadingCell;
@property (nonatomic) bool hasAllowOnlyWatchEligibleSections;
@property (nonatomic) bool hasAllowSectionTitles;
@property (nonatomic, readonly) bool hasAssetsDirectoryFileURLString;
@property (nonatomic) bool hasDynamicThumbnailSizePresetMinimumHeightInPixels;
@property (nonatomic) bool hasDynamicThumbnailSizePresetMinimumWidthInPixels;
@property (nonatomic) bool hasEmbedsLimit;
@property (nonatomic) bool hasFetchWidgetConfig;
@property (nonatomic) bool hasLeadingCellThumbnailSizePreset;
@property (nonatomic) bool hasNonLeadingCellThumbnailSizePreset;
@property (nonatomic, readonly) bool hasNonVideoSectionSlotCostInfo;
@property (nonatomic) bool hasPreferCompactSectionName;
@property (nonatomic) bool hasPreferCompactSourceName;
@property (nonatomic) bool hasQualityOfService;
@property (nonatomic) bool hasRespectsWidgetSlotsLimit;
@property (nonatomic) bool hasRespectsWidgetVisibleSectionsPerQueueLimit;
@property (nonatomic) bool hasSlotsLimit;
@property (nonatomic) bool hasSourceNameImageSizePreset;
@property (nonatomic, readonly) bool hasVideoSectionSlotCostInfo;
@property (nonatomic) long long leadingCellThumbnailSizePreset;
@property (nonatomic) long long nonLeadingCellThumbnailSizePreset;
@property (nonatomic, retain) NTPBSectionSlotCostInfo *nonVideoSectionSlotCostInfo;
@property (nonatomic) bool preferCompactSectionName;
@property (nonatomic) bool preferCompactSourceName;
@property (nonatomic) long long qualityOfService;
@property (nonatomic) bool respectsWidgetSlotsLimit;
@property (nonatomic) bool respectsWidgetVisibleSectionsPerQueueLimit;
@property (nonatomic) double slotsLimit;
@property (nonatomic) long long sourceNameImageSizePreset;
@property (nonatomic, retain) NTPBSectionSlotCostInfo *videoSectionSlotCostInfo;

// Image: /System/Library/PrivateFrameworks/NewsTransport.framework/NewsTransport

- (void).cxx_destruct;
- (bool)allowLeadingCell;
- (bool)allowOnlyWatchEligibleSections;
- (bool)allowSectionTitles;
- (id)assetsDirectoryFileURLString;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (unsigned int)dynamicThumbnailSizePresetMinimumHeightInPixels;
- (unsigned int)dynamicThumbnailSizePresetMinimumWidthInPixels;
- (long long)embedsLimit;
- (bool)fetchWidgetConfig;
- (bool)hasAllowLeadingCell;
- (bool)hasAllowOnlyWatchEligibleSections;
- (bool)hasAllowSectionTitles;
- (bool)hasAssetsDirectoryFileURLString;
- (bool)hasDynamicThumbnailSizePresetMinimumHeightInPixels;
- (bool)hasDynamicThumbnailSizePresetMinimumWidthInPixels;
- (bool)hasEmbedsLimit;
- (bool)hasFetchWidgetConfig;
- (bool)hasLeadingCellThumbnailSizePreset;
- (bool)hasNonLeadingCellThumbnailSizePreset;
- (bool)hasNonVideoSectionSlotCostInfo;
- (bool)hasPreferCompactSectionName;
- (bool)hasPreferCompactSourceName;
- (bool)hasQualityOfService;
- (bool)hasRespectsWidgetSlotsLimit;
- (bool)hasRespectsWidgetVisibleSectionsPerQueueLimit;
- (bool)hasSlotsLimit;
- (bool)hasSourceNameImageSizePreset;
- (bool)hasVideoSectionSlotCostInfo;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (long long)leadingCellThumbnailSizePreset;
- (void)mergeFrom:(id)arg1;
- (long long)nonLeadingCellThumbnailSizePreset;
- (id)nonVideoSectionSlotCostInfo;
- (bool)preferCompactSectionName;
- (bool)preferCompactSourceName;
- (long long)qualityOfService;
- (bool)readFrom:(id)arg1;
- (bool)respectsWidgetSlotsLimit;
- (bool)respectsWidgetVisibleSectionsPerQueueLimit;
- (void)setAllowLeadingCell:(bool)arg1;
- (void)setAllowOnlyWatchEligibleSections:(bool)arg1;
- (void)setAllowSectionTitles:(bool)arg1;
- (void)setAssetsDirectoryFileURLString:(id)arg1;
- (void)setDynamicThumbnailSizePresetMinimumHeightInPixels:(unsigned int)arg1;
- (void)setDynamicThumbnailSizePresetMinimumWidthInPixels:(unsigned int)arg1;
- (void)setEmbedsLimit:(long long)arg1;
- (void)setFetchWidgetConfig:(bool)arg1;
- (void)setHasAllowLeadingCell:(bool)arg1;
- (void)setHasAllowOnlyWatchEligibleSections:(bool)arg1;
- (void)setHasAllowSectionTitles:(bool)arg1;
- (void)setHasDynamicThumbnailSizePresetMinimumHeightInPixels:(bool)arg1;
- (void)setHasDynamicThumbnailSizePresetMinimumWidthInPixels:(bool)arg1;
- (void)setHasEmbedsLimit:(bool)arg1;
- (void)setHasFetchWidgetConfig:(bool)arg1;
- (void)setHasLeadingCellThumbnailSizePreset:(bool)arg1;
- (void)setHasNonLeadingCellThumbnailSizePreset:(bool)arg1;
- (void)setHasPreferCompactSectionName:(bool)arg1;
- (void)setHasPreferCompactSourceName:(bool)arg1;
- (void)setHasQualityOfService:(bool)arg1;
- (void)setHasRespectsWidgetSlotsLimit:(bool)arg1;
- (void)setHasRespectsWidgetVisibleSectionsPerQueueLimit:(bool)arg1;
- (void)setHasSlotsLimit:(bool)arg1;
- (void)setHasSourceNameImageSizePreset:(bool)arg1;
- (void)setLeadingCellThumbnailSizePreset:(long long)arg1;
- (void)setNonLeadingCellThumbnailSizePreset:(long long)arg1;
- (void)setNonVideoSectionSlotCostInfo:(id)arg1;
- (void)setPreferCompactSectionName:(bool)arg1;
- (void)setPreferCompactSourceName:(bool)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setRespectsWidgetSlotsLimit:(bool)arg1;
- (void)setRespectsWidgetVisibleSectionsPerQueueLimit:(bool)arg1;
- (void)setSlotsLimit:(double)arg1;
- (void)setSourceNameImageSizePreset:(long long)arg1;
- (void)setVideoSectionSlotCostInfo:(id)arg1;
- (double)slotsLimit;
- (long long)sourceNameImageSizePreset;
- (id)videoSectionSlotCostInfo;
- (void)writeTo:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NewsToday.framework/NewsToday

- (id)assetsDirectoryFileURL;
- (struct CGSize { double x1; double x2; })dynamicThumbnailSizeMinimumSizeInPixels;
- (void)setAssetsDirectoryFileURL:(id)arg1;
- (void)setDynamicThumbnailSizeMinimumSizeInPixels:(struct CGSize { double x1; double x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
