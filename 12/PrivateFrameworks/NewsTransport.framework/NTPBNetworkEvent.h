<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NTPBNetworkEvent.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsTransport.framework/NTPBNetworkEvent.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsTransport.framework/NewsTransport (2166)
 */

@interface NTPBNetworkEvent : PBCodable <NSCopying> {
    unsigned long long  _cacheState;
    unsigned long long  _connectDuration;
    unsigned long long  _dnsDuration;
    unsigned long long  _errorCode;
    struct { 
        unsigned int cacheState : 1; 
        unsigned int connectDuration : 1; 
        unsigned int dnsDuration : 1; 
        unsigned int errorCode : 1; 
        unsigned int httpStatusCode : 1; 
        unsigned int requestDuration : 1; 
        unsigned int responseDuration : 1; 
        unsigned int responseSize : 1; 
        unsigned int sessionID : 1; 
        unsigned int startTime : 1; 
        unsigned int type : 1; 
    }  _has;
    unsigned long long  _httpStatusCode;
    unsigned long long  _requestDuration;
    NSString * _requestUUID;
    NSString * _respondingPOP;
    unsigned long long  _responseDuration;
    unsigned long long  _responseSize;
    unsigned long long  _sessionID;
    unsigned long long  _startTime;
    unsigned long long  _type;
    NSString * _url;
}

@property (nonatomic) unsigned long long cacheState;
@property (nonatomic) unsigned long long connectDuration;
@property (nonatomic) unsigned long long dnsDuration;
@property (nonatomic, readonly) unsigned long long endTime;
@property (nonatomic) unsigned long long errorCode;
@property (nonatomic) bool hasCacheState;
@property (nonatomic) bool hasConnectDuration;
@property (nonatomic) bool hasDnsDuration;
@property (nonatomic) bool hasErrorCode;
@property (nonatomic) bool hasHttpStatusCode;
@property (nonatomic) bool hasRequestDuration;
@property (nonatomic, readonly) bool hasRequestUUID;
@property (nonatomic, readonly) bool hasRespondingPOP;
@property (nonatomic) bool hasResponseDuration;
@property (nonatomic) bool hasResponseSize;
@property (nonatomic) bool hasSessionID;
@property (nonatomic) bool hasStartTime;
@property (nonatomic) bool hasType;
@property (nonatomic, readonly) bool hasUrl;
@property (nonatomic) unsigned long long httpStatusCode;
@property (nonatomic) unsigned long long requestDuration;
@property (nonatomic, retain) NSString *requestUUID;
@property (nonatomic, retain) NSString *respondingPOP;
@property (nonatomic) unsigned long long responseDuration;
@property (nonatomic) unsigned long long responseSize;
@property (nonatomic) unsigned long long sessionID;
@property (nonatomic) unsigned long long startTime;
@property (getter=isSuccess, nonatomic, readonly) bool success;
@property (nonatomic, readonly) unsigned long long totalDuration;
@property (nonatomic) unsigned long long type;
@property (nonatomic, retain) NSString *url;

// Image: /System/Library/PrivateFrameworks/NewsTransport.framework/NewsTransport

- (unsigned long long)cacheState;
- (unsigned long long)connectDuration;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (unsigned long long)dnsDuration;
- (unsigned long long)errorCode;
- (bool)hasCacheState;
- (bool)hasConnectDuration;
- (bool)hasDnsDuration;
- (bool)hasErrorCode;
- (bool)hasHttpStatusCode;
- (bool)hasRequestDuration;
- (bool)hasRequestUUID;
- (bool)hasRespondingPOP;
- (bool)hasResponseDuration;
- (bool)hasResponseSize;
- (bool)hasSessionID;
- (bool)hasStartTime;
- (bool)hasType;
- (bool)hasUrl;
- (unsigned long long)hash;
- (unsigned long long)httpStatusCode;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (unsigned long long)requestDuration;
- (id)requestUUID;
- (id)respondingPOP;
- (unsigned long long)responseDuration;
- (unsigned long long)responseSize;
- (unsigned long long)sessionID;
- (void)setCacheState:(unsigned long long)arg1;
- (void)setConnectDuration:(unsigned long long)arg1;
- (void)setDnsDuration:(unsigned long long)arg1;
- (void)setErrorCode:(unsigned long long)arg1;
- (void)setHasCacheState:(bool)arg1;
- (void)setHasConnectDuration:(bool)arg1;
- (void)setHasDnsDuration:(bool)arg1;
- (void)setHasErrorCode:(bool)arg1;
- (void)setHasHttpStatusCode:(bool)arg1;
- (void)setHasRequestDuration:(bool)arg1;
- (void)setHasResponseDuration:(bool)arg1;
- (void)setHasResponseSize:(bool)arg1;
- (void)setHasSessionID:(bool)arg1;
- (void)setHasStartTime:(bool)arg1;
- (void)setHasType:(bool)arg1;
- (void)setHttpStatusCode:(unsigned long long)arg1;
- (void)setRequestDuration:(unsigned long long)arg1;
- (void)setRequestUUID:(id)arg1;
- (void)setRespondingPOP:(id)arg1;
- (void)setResponseDuration:(unsigned long long)arg1;
- (void)setResponseSize:(unsigned long long)arg1;
- (void)setSessionID:(unsigned long long)arg1;
- (void)setStartTime:(unsigned long long)arg1;
- (void)setType:(unsigned long long)arg1;
- (void)setUrl:(id)arg1;
- (unsigned long long)startTime;
- (unsigned long long)type;
- (id)url;
- (void)writeTo:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore

- (unsigned long long)endTime;
- (bool)isSuccess;
- (unsigned long long)totalDuration;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
