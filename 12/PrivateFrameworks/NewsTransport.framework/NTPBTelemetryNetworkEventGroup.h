<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NTPBTelemetryNetworkEventGroup.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsTransport.framework/NTPBTelemetryNetworkEventGroup.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsTransport.framework/NewsTransport (2166)
 */

@interface NTPBTelemetryNetworkEventGroup : PBCodable <NSCopying> {
    int  _cellularRadioAccessTechnology;
    int  _eventType;
    NSMutableArray * _failures;
    struct { 
        unsigned int cellularRadioAccessTechnology : 1; 
        unsigned int eventType : 1; 
        unsigned int wifiReachabilityStatus : 1; 
    }  _has;
    NSString * _respondingPop;
    NSMutableArray * _successes;
    bool  _wifiReachabilityStatus;
}

@property (nonatomic, readonly) unsigned long long cacheHitCount;
@property (nonatomic, readonly) unsigned long long cacheMissCount;
@property (nonatomic) int cellularRadioAccessTechnology;
@property (nonatomic, readonly) FCNetworkEventStats *connectDurationStats;
@property (nonatomic, readonly) FCNetworkEventStats *dnsDurationStats;
@property (nonatomic, readonly) NSDate *endDate;
@property (nonatomic) int eventType;
@property (nonatomic, retain) NSMutableArray *failures;
@property (nonatomic) bool hasCellularRadioAccessTechnology;
@property (nonatomic) bool hasEventType;
@property (nonatomic, readonly) bool hasRespondingPop;
@property (nonatomic) bool hasWifiReachabilityStatus;
@property (nonatomic, retain) NSString *respondingPop;
@property (nonatomic, readonly) NSDate *startDate;
@property (nonatomic, retain) NSMutableArray *successes;
@property (nonatomic, readonly) FCNetworkEventStats *timeToFirstByteStats;
@property (nonatomic, readonly) FCNetworkEventStats *totalDurationStats;
@property (nonatomic) bool wifiReachabilityStatus;

// Image: /System/Library/PrivateFrameworks/NewsTransport.framework/NewsTransport

+ (Class)failuresType;
+ (Class)successesType;

- (void).cxx_destruct;
- (int)StringAsCellularRadioAccessTechnology:(id)arg1;
- (void)addFailures:(id)arg1;
- (void)addSuccesses:(id)arg1;
- (int)cellularRadioAccessTechnology;
- (id)cellularRadioAccessTechnologyAsString:(int)arg1;
- (void)clearFailures;
- (void)clearSuccesses;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (int)eventType;
- (id)failures;
- (id)failuresAtIndex:(unsigned long long)arg1;
- (unsigned long long)failuresCount;
- (bool)hasCellularRadioAccessTechnology;
- (bool)hasEventType;
- (bool)hasRespondingPop;
- (bool)hasWifiReachabilityStatus;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (id)respondingPop;
- (void)setCellularRadioAccessTechnology:(int)arg1;
- (void)setEventType:(int)arg1;
- (void)setFailures:(id)arg1;
- (void)setHasCellularRadioAccessTechnology:(bool)arg1;
- (void)setHasEventType:(bool)arg1;
- (void)setHasWifiReachabilityStatus:(bool)arg1;
- (void)setRespondingPop:(id)arg1;
- (void)setSuccesses:(id)arg1;
- (void)setWifiReachabilityStatus:(bool)arg1;
- (id)successes;
- (id)successesAtIndex:(unsigned long long)arg1;
- (unsigned long long)successesCount;
- (bool)wifiReachabilityStatus;
- (void)writeTo:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore

- (unsigned long long)cacheHitCount;
- (unsigned long long)cacheMissCount;
- (id)connectDurationStats;
- (id)dnsDurationStats;
- (id)endDate;
- (id)startDate;
- (id)timeToFirstByteStats;
- (id)totalDurationStats;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
