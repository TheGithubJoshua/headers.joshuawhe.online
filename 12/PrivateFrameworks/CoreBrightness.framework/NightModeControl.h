<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NightModeControl.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreBrightness.framework/NightModeControl.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness (1)
 */

@interface NightModeControl : NSObject {
    struct BLRAggdInfo { 
        float manualModeTime; 
        float sunModeTime; 
        float scheduleModeTime; 
        int turnOnForNowCount; 
        int turnOffForNowCount; 
        int turnOnUntilTomorrowCount; 
        int turnOffUntilTomorrowCount; 
        double _aggdModeChangeTimestamp; 
    }  _aggdKeysInfo;
    NSObject<OS_dispatch_source> * _aggdUpdateTimer;
    int  _algoState;
    struct { 
        struct { 
            int hour; 
            int minute; 
        } fromTime; 
        struct { 
            int hour; 
            int minute; 
        } toTime; 
    }  _backupSchedule;
    id /* block */  _callbackBlock;
    bool  _checkInactivity;
    int  _currentScheduledTransitionType;
    NSString * _currentSunriseKey;
    NSString * _currentSunsetKey;
    struct __CFTimeZone { } * _currentTimeZone;
    bool  _displayOff;
    double  _displayOffTimestamp;
    struct __CFUserNotification { } * _enableNotification;
    struct NMFactorState { 
        double rampStartTime; 
        float factor; 
        float target; 
        float start; 
        float rampLength; 
    }  _factorState;
    float  _inactivityTimeout;
    bool  _isDaylight;
    NSString * _isDaylightKey;
    int  _logLevel;
    float  _maxFactor;
    float  _minFactor;
    NSString * _nextSunriseKey;
    NSString * _nextSunsetKey;
    NSObject<OS_dispatch_source> * _nextTransitionTimer;
    bool  _notificationInProgress;
    int  _notifyUserAboutScheduleCounter;
    double  _offTransitionTimeAbsoluteUnrestricted;
    double  _offTransitionTimeAbsoluteUnrestrictedPrev;
    NSString * _previousSunriseKey;
    NSString * _previousSunsetKey;
    NSMutableDictionary * _properties;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _revertToSunriseSunset;
    struct { 
        bool active; 
        bool enabled; 
        bool sunSchedulePermitted; 
        int mode; 
        struct { 
            struct { 
                int hour; 
                int minute; 
            } fromTime; 
            struct { 
                int hour; 
                int minute; 
            } toTime; 
        } schedule; 
        unsigned long long disableFlags; 
        bool available; 
    }  _status;
    bool  _statusUpdated;
    double  _sunriseAbsolute;
    double  _sunrisePreviousAbsolute;
    NSDictionary * _sunriseSunsetInfo;
    int  _sunriseSunsetInfoQueryTimeout;
    SunriseSunsetProvider * _sunriseSunsetProvider;
    double  _sunsetAbsolute;
    double  _sunsetPreviousAbsolute;
    NSMutableArray * _supportObjs;
    float  _transitionLength;
    float  _transitionLengthActual;
    float  _transitionRate;
    NSObject<OS_dispatch_source> * _transitionTimer;
    bool  _transitionTimesValid;
    float  _transitionsTimesCoeff;
    double  _untilNexTransitionTimestamp;
}

- (void)addSupportObject:(id)arg1;
- (void)aggdKeysUpdate;
- (void)cancelAggdPeriodicUpdate;
- (void)cancelSchedule;
- (void)cancelTransition;
- (void)clockChanged;
- (id)copyDictionaryFromStatus:(struct { bool x1; bool x2; bool x3; int x4; struct { struct { int x_1_2_1; int x_1_2_2; } x_5_1_1; struct { int x_2_2_1; int x_2_2_2; } x_5_1_2; } x5; unsigned long long x6; bool x7; }*)arg1;
- (id)copyLowPowerModeState;
- (id)copyPreferenceForKey:(id)arg1 user:(id)arg2;
- (id)copyStatusDictionaryFromPrefs;
- (id)copyTimeStringWithHour:(int)arg1 minute:(int)arg2 second:(int)arg3;
- (void)dealloc;
- (void)displayAlertInteractive:(bool)arg1;
- (void)enableBlueLightReduction:(bool)arg1 withOption:(int)arg2;
- (id)getPropertyForKey:(id)arg1;
- (id)initWithSupportObject:(id)arg1 queue:(id)arg2 callback:(id /* block */)arg3;
- (void)initiateFullMaxTransition;
- (void)initiateFullMinTransition;
- (void)initiateRestrictedMaxTransition;
- (void)initiateTransitionTo:(float)arg1 andRampLength:(float)arg2;
- (bool)parseStatusDictionary:(id)arg1 intoStruct:(struct { bool x1; bool x2; bool x3; int x4; struct { struct { int x_1_2_1; int x_1_2_2; } x_5_1_1; struct { int x_2_2_1; int x_2_2_2; } x_5_1_2; } x5; unsigned long long x6; bool x7; }*)arg2 shouldUpdatePrefs:(bool*)arg3;
- (void)reevaluateCurrentState;
- (void)reevaluateCurrentStateWithFactorFadeOption:(float)arg1;
- (void)removeSupportObject:(id)arg1;
- (void)retrieveSunriseSunsetTimesFromBackup:(double)arg1;
- (void)saveStatusToPrefs:(id)arg1;
- (void)scheduleAggdKeysUpdate;
- (void)scheduleNextTransition:(double)arg1 withType:(int)arg2;
- (void)setAlgoState:(int)arg1;
- (void)setMode:(int)arg1;
- (void)setNightModeFactor:(float)arg1;
- (void)setNightModeFactor:(float)arg1 withFadePeriod:(float)arg2;
- (void)setNightShiftFactorDictionary:(id)arg1;
- (void)setPreference:(id)arg1 forKey:(id)arg2 user:(id)arg3;
- (bool)setProperty:(id)arg1 forKey:(id)arg2;
- (void)setSchedule:(id)arg1;
- (void)setSunPermitted:(bool)arg1;
- (void)tearDownAllTimers;
- (void)timeZoneChanged;
- (void)transitionTimerHandler;
- (void)updateLowPowerModeState:(id)arg1;
- (void)updateOptionTimestamp:(double)arg1;
- (void)updateStatusDictionaryWithValue:(id)arg1 forKey:(id)arg2;
- (void)updateSunriseSunsetBackup;
- (void)updateSunriseSunsetInfo:(id)arg1;
- (void)updateTransitionTimes:(double)arg1;
- (bool)updateTransitionTimesFromSchedule:(double)arg1;
- (bool)updateTransitionTimesFromSunriseSunset:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
