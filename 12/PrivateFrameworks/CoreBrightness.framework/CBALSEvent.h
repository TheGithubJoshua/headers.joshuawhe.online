<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CBALSEvent.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreBrightness.framework/CBALSEvent.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreBrightness.framework/CoreBrightness (1)
 */

@interface CBALSEvent : CBHIDEvent {
    struct { 
        float XYZ[3]; 
        struct { 
            float x; 
            float y; 
        } xy; 
        float CCT1; 
        struct { 
            int orientation; 
            float rawChannels[6]; 
            int nChannels; 
            float brightness; 
        } extra; 
    }  _colorSample;
    struct __IOHIDEvent { } * _event;
    bool  _firstALSSample;
    double  _illuminance;
    float  _integrationTime;
    NSObject<OS_os_log> * _logHandle;
    bool  _obstructed;
    int  _orientation;
    bool  _supportColor;
    struct { 
        unsigned int status; 
        unsigned char nChannels; 
        unsigned char orientation; 
        unsigned short reserved; 
        unsigned int integrationTime; 
        unsigned int reportInterval; 
        int gain; 
        float lux; 
        float channelData[6]; 
        float CCT; 
        short AZOffsets[6]; 
    }  _vendorData;
}

@property struct { float x1[3]; struct { float x_2_1_1; float x_2_1_2; } x2; float x3; struct { int x_4_1_1; float x_4_1_2[6]; int x_4_1_3; float x_4_1_4; } x4; } colorSample;
@property bool firstALSSample;
@property double illuminance;
@property float integrationTime;
@property bool obstructed;
@property int orientation;
@property bool supportColor;
@property struct { unsigned int x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned int x5; unsigned int x6; int x7; float x8; float x9[6]; float x10; short x11[6]; } vendorData;

- (struct { float x1[3]; struct { float x_2_1_1; float x_2_1_2; } x2; float x3; struct { int x_4_1_1; float x_4_1_2[6]; int x_4_1_3; float x_4_1_4; } x4; })colorSample;
- (long long)compare:(id)arg1;
- (struct { unsigned int x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned int x5; unsigned int x6; int x7; float x8; float x9[6]; float x10; short x11[6]; })copyVendorDataFromEvent:(struct __IOHIDEvent { }*)arg1;
- (void)dealloc;
- (id)description;
- (bool)firstALSSample;
- (int)getServiceOrientation:(struct __IOHIDServiceClient { }*)arg1;
- (double)illuminance;
- (id)initWithHIDEvent:(struct __IOHIDEvent { }*)arg1 andService:(struct __IOHIDServiceClient { }*)arg2;
- (float)integrationTime;
- (bool)obstructed;
- (int)orientation;
- (void)setColorSample:(struct { float x1[3]; struct { float x_2_1_1; float x_2_1_2; } x2; float x3; struct { int x_4_1_1; float x_4_1_2[6]; int x_4_1_3; float x_4_1_4; } x4; })arg1;
- (void)setFirstALSSample:(bool)arg1;
- (void)setIlluminance:(double)arg1;
- (void)setIntegrationTime:(float)arg1;
- (void)setObstructed:(bool)arg1;
- (void)setOrientation:(int)arg1;
- (void)setSupportColor:(bool)arg1;
- (void)setVendorData:(struct { unsigned int x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned int x5; unsigned int x6; int x7; float x8; float x9[6]; float x10; short x11[6]; })arg1;
- (bool)supportColor;
- (struct { unsigned int x1; unsigned char x2; unsigned char x3; unsigned short x4; unsigned int x5; unsigned int x6; int x7; float x8; float x9[6]; float x10; short x11[6]; })vendorData;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
