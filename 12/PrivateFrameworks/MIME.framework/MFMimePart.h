<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MFMimePart.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MIME.framework/MFMimePart.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MIME.framework/MIME (3445.120.0.1.2)
 */

@interface MFMimePart : NSObject {
    MFWeakReferenceHolder * _body;
    NSMutableDictionary * _bodyParameters;
    NSString * _contentTransferEncoding;
    MFWeakReferenceHolder * _decodedData;
    NSData * _fullData;
    MFMimePart * _nextPart;
    NSMutableDictionary * _otherIvars;
    MFWeakReferenceHolder * _parent;
    NSURL * _parentPartURL;
    NSURL * _partURL;
    MFPartialNetworkDataConsumer * _partialDataConsumer;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _range;
    NSString * _subtype;
    NSString * _type;
}

@property (nonatomic, readonly) MFError *SMIMEError;

// Image: /System/Library/PrivateFrameworks/MIME.framework/MIME

+ (Class)attachmentClass;
+ (void)initialize;
+ (bool)isRecognizedClassForContent:(id)arg1;
+ (bool)parseContentTypeHeader:(id)arg1 type:(id*)arg2 subtype:(id*)arg3;
+ (bool)parseContentTypeHeader:(id)arg1 type:(id*)arg2 subtype:(id*)arg3 info:(id*)arg4;

- (void)_clearNextAndSibling;
- (void)_clearParent;
- (void)_contents:(id*)arg1 toOffset:(unsigned long long)arg2 resultOffset:(unsigned long long*)arg3 downloadIfNecessary:(bool)arg4 asHTML:(bool)arg5 isComplete:(bool*)arg6;
- (void)_ensureBodyDataToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3 isComplete:(bool*)arg4 decoded:(id*)arg5;
- (id)_fullMimeTypeEvenInsideAppleDouble;
- (bool)_hasCompleteBodyDataToOffset:(unsigned long long)arg1;
- (id)_partThatIsAttachment;
- (SEL)_selectorForCString:(char *)arg1;
- (void)_setDecryptedMessageBody:(id)arg1 isEncrypted:(bool)arg2 isSigned:(bool)arg3;
- (void)_setRFC822DecodedMessageBody:(id)arg1;
- (bool)_shouldContinueDecodingProcess;
- (void)addSubpart:(id)arg1;
- (id)alternativeAtIndex:(long long)arg1;
- (unsigned int)approximateRawSize;
- (id)attachmentFilename;
- (id)attachmentURLs;
- (id)attachments;
- (id)bodyData;
- (id)bodyDataForcingDownload:(bool)arg1;
- (id)bodyDataToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2;
- (id)bodyDataToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3;
- (id)bodyParameterForKey:(id)arg1;
- (id)bodyParameterKeys;
- (id)chosenAlternativePart;
- (void)clearCachedDescryptedMessageBody;
- (void)configureFileWrapper:(id)arg1;
- (id)contentDescription;
- (id)contentID;
- (id)contentLocation;
- (id)contentToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 asHTML:(bool)arg3;
- (id)contentToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3 asHTML:(bool)arg4;
- (id)contentToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3 asHTML:(bool)arg4 isComplete:(bool*)arg5;
- (id)contentTransferEncoding;
- (id)contentsForTextSystem;
- (id)contentsForTextSystemForcingDownload:(bool)arg1;
- (id)contentsForTextSystemToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2;
- (id)contentsForTextSystemToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3;
- (id)contentsForTextSystemToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3 asHTML:(bool)arg4;
- (id)contentsForTextSystemToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3 asHTML:(bool)arg4 isComplete:(bool*)arg5;
- (id)copyBodyDataToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2;
- (id)copyBodyDataToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3;
- (id)copyBodyDataToOffset:(unsigned long long)arg1 resultOffset:(unsigned long long*)arg2 downloadIfNecessary:(bool)arg3 isComplete:(bool*)arg4;
- (void)dealloc;
- (id)decodeApplicationOctet_stream;
- (id)decodeApplicationZip;
- (void)decodeIfNecessary;
- (id)decodeMultipart;
- (id)decodeMultipartAlternative;
- (id)decodeMultipartRelated;
- (id)decodeText;
- (id)decodedDataForData:(id)arg1;
- (id)decryptedMessageBodyIsEncrypted:(bool*)arg1 isSigned:(bool*)arg2;
- (id)description;
- (id)disposition;
- (id)dispositionParameterForKey:(id)arg1;
- (id)dispositionParameterKeys;
- (void)download;
- (id)fileWrapper;
- (id)fileWrapperForDecodedObject:(id)arg1 withFileData:(id*)arg2;
- (id)fileWrapperForcingDownload:(bool)arg1;
- (id)firstChildPart;
- (void)getNumberOfAttachments:(unsigned int*)arg1 isSigned:(bool*)arg2 isEncrypted:(bool*)arg3;
- (bool)hasContentType:(id)arg1 subtype:(id)arg2;
- (bool)hasContents;
- (bool)hasValidMultipartSignedContentType;
- (id)init;
- (bool)isAttachment;
- (bool)isGenerated;
- (bool)isHTML;
- (bool)isReadableText;
- (bool)isRich;
- (id)languages;
- (id)mimeBody;
- (id)nextSiblingPart;
- (long long)numberOfAlternatives;
- (unsigned int)numberOfAttachments;
- (id)parentPart;
- (bool)parseIMAPPropertyList:(id)arg1;
- (bool)parseMimeBody;
- (bool)parseMimeBodyDownloadIfNecessary:(bool)arg1;
- (id)partNumber;
- (id)partURL;
- (id)preservedHeaderValueForKey:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })range;
- (id)rfc822DecodedMessageBody;
- (void)setBodyParameter:(id)arg1 forKey:(id)arg2;
- (void)setContentDescription:(id)arg1;
- (void)setContentID:(id)arg1;
- (void)setContentLocation:(id)arg1;
- (void)setContentTransferEncoding:(id)arg1;
- (void)setDisposition:(id)arg1;
- (void)setDispositionParameter:(id)arg1 forKey:(id)arg2;
- (void)setIsGenerated:(bool)arg1;
- (void)setLanguages:(id)arg1;
- (void)setMimeBody:(id)arg1;
- (void)setRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setSubparts:(id)arg1;
- (void)setSubtype:(id)arg1;
- (void)setType:(id)arg1;
- (bool)shouldConsiderInlineOverridingExchangeServer;
- (id)signedData;
- (id)startPart;
- (id)storeData:(id)arg1 inMessage:(id)arg2 isComplete:(bool)arg3;
- (id)subpartAtIndex:(long long)arg1;
- (id)subparts;
- (id)subtype;
- (unsigned int)textEncoding;
- (id)textHtmlPart;
- (unsigned long long)totalTextSize;
- (id)type;
- (bool)usesKnownSignatureProtocol;

// Image: /System/Library/PrivateFrameworks/Message.framework/Message

- (id)SMIMEError;
- (bool)_needsSignatureVerification:(id*)arg1;
- (void)_setSMIMEError:(id)arg1;
- (void)_setSigners:(id)arg1;
- (id)copySigners;
- (id)decodeApplicationPkcs7_mime;
- (id)decodeMultipartSigned;
- (id)newEncryptedPartWithData:(id)arg1 compositionSpecification:(id)arg2 encryptedData:(id*)arg3;
- (id)newSignedPartWithData:(id)arg1 sender:(id)arg2 compositionSpecification:(id)arg3 signatureData:(id*)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
