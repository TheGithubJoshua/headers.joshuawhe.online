<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ISLivePhotoPlayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosPlayer.framework/ISLivePhotoPlayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosPlayer.framework/PhotosPlayer (3462.8.190)
 */

@interface ISLivePhotoPlayer : ISBasePlayer <ISChangeObserver, ISLivePhotoSettleBehaviorDelegate> {
    bool  __settleAutomaticallyWhenReady;
    bool  __shouldPlayVitalityWhenReady;
    bool  __shouldPrepareForHintWhenReady;
    bool  __shouldPrepareForVitalityWhenReady;
    long long  __styleToPlayWhenReady;
    NSDate * __vitalityTimeoutDate;
    long long  _currentPlaybackStyle;
    _Atomic int  _fadeInRequestID;
    bool  _hinting;
    bool  _immediatelyShowsPhotoWhenPlaybackEnds;
    struct { 
        bool scale; 
        bool apertureMode; 
    }  _isValid;
    double  _lastAppliedScale;
    bool  _playbackAllowed;
    NSMutableSet * _playbackFilters;
    bool  _playingVitality;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _seekTime;
    long long  _targetReadiness;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _trimTimeRange;
    ISLivePhotoVitalityFilter * _vitalityFilter;
}

@property (nonatomic, readonly) bool _canPlayVitality;
@property (setter=_setSettleAutomaticallyWhenReady:, nonatomic) bool _settleAutomaticallyWhenReady;
@property (setter=_setShouldPlayVitalityWhenReady:, nonatomic) bool _shouldPlayVitalityWhenReady;
@property (setter=_setShouldPrepareForHintWhenReady:, nonatomic) bool _shouldPrepareForHintWhenReady;
@property (setter=_setShouldPrepareForVitalityWhenReady:, nonatomic) bool _shouldPrepareForVitalityWhenReady;
@property (setter=_setStyleToPlayWhenReady:, nonatomic) long long _styleToPlayWhenReady;
@property (setter=_setVitalityTimeoutDate:, nonatomic, retain) NSDate *_vitalityTimeoutDate;
@property (setter=_setCurrentPlaybackStyle:, nonatomic) long long currentPlaybackStyle;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=isHinting, setter=_setHinting:, nonatomic) bool hinting;
@property (nonatomic) bool immediatelyShowsPhotoWhenPlaybackEnds;
@property (getter=isPlaybackAllowed, nonatomic) bool playbackAllowed;
@property (nonatomic, readonly) NSSet *playbackFilters;
@property (getter=isPlayingVitality, setter=_setPlayingVitality:, nonatomic) bool playingVitality;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } seekTime;
@property (readonly) Class superclass;
@property (nonatomic) long long targetReadiness;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } trimTimeRange;
@property (nonatomic, retain) ISLivePhotoVitalityFilter *vitalityFilter;

- (void).cxx_destruct;
- (bool)_canPlayVitality;
- (double)_coalescedPlaybackFilterHintProgress;
- (long long)_coalescedPlaybackFilterState;
- (void)_configurePlaybackFilter:(id)arg1;
- (void)_configurePlaybackFilters;
- (id)_createVitalityBehavior;
- (void)_fadeInAudio;
- (void)_handlePlaybackFilterDidChange;
- (void)_handleVitalityFilterDidChange:(id)arg1;
- (void)_invalidateApertureMode;
- (void)_invalidateScale;
- (double)_photoTransitionDuration;
- (void)_playIfNeeded;
- (void)_prepareForVitalityIfNeeded;
- (void)_resetPlaybackFilters;
- (void)_setCurrentPlaybackStyle:(long long)arg1;
- (void)_setHinting:(bool)arg1;
- (void)_setPlayingVitality:(bool)arg1;
- (void)_setSettleAutomaticallyWhenReady:(bool)arg1;
- (void)_setShouldPlayVitalityWhenReady:(bool)arg1;
- (void)_setShouldPrepareForHintWhenReady:(bool)arg1;
- (void)_setShouldPrepareForVitalityWhenReady:(bool)arg1;
- (void)_setStyleToPlayWhenReady:(long long)arg1;
- (void)_setVitalityTimeoutDate:(id)arg1;
- (bool)_settleAutomaticallyWhenReady;
- (bool)_shouldPlayVitalityWhenReady;
- (bool)_shouldPrepareForHintWhenReady;
- (bool)_shouldPrepareForVitalityWhenReady;
- (long long)_styleToPlayWhenReady;
- (void)_updateApertureModeIfNeeded;
- (void)_updateHintingAndVitality;
- (void)_updatePlayerItemLoadingTarget;
- (void)_updateScaleIfNeeded;
- (id)_vitalityTimeoutDate;
- (void)activeBehaviorDidChange;
- (void)addPlaybackFilter:(id)arg1;
- (void)configurePlayerItem;
- (long long)currentPlaybackStyle;
- (void)didPerformChanges;
- (bool)immediatelyShowsPhotoWhenPlaybackEnds;
- (id)init;
- (bool)isHinting;
- (bool)isPlaybackAllowed;
- (bool)isPlayingVitality;
- (double)lastAppliedScale;
- (void)livePhotoPlaybackBehaviorDidBeginPlaying:(id)arg1;
- (void)livePhotoPlaybackBehaviorDidFinish:(id)arg1;
- (void)livePhotoSettleBehaviorDidFinish:(id)arg1;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (void)playHintWhenReady;
- (void)playVitality;
- (id)playbackFilters;
- (void)playerItemDidChange;
- (void)prepareForHintWhenReady;
- (void)prepareForVitality;
- (void)removePlaybackFilter:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })seekTime;
- (void)setImmediatelyShowsPhotoWhenPlaybackEnds:(bool)arg1;
- (void)setPlaybackAllowed:(bool)arg1;
- (void)setSeekTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 completion:(id /* block */)arg2;
- (void)setTargetReadiness:(long long)arg1;
- (void)setTrimTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setVitalityFilter:(id)arg1;
- (void)startPlaybackWithStyle:(long long)arg1;
- (void)startPlaybackWithStyle:(long long)arg1 settleAutomatically:(bool)arg2;
- (void)startPlaybackWithStyleWhenReady:(long long)arg1;
- (void)startPlaybackWithStyleWhenReady:(long long)arg1 settleAutomatically:(bool)arg2;
- (void)statusDidChange;
- (void)stopPlayback;
- (void)stopPlaybackAnimated:(bool)arg1;
- (long long)targetReadiness;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })trimTimeRange;
- (double)videoWillPlayToPhotoInterval;
- (void)vitalityBehaviorDidBeginPlaying:(id)arg1;
- (void)vitalityBehaviorDidEndPlaying:(id)arg1;
- (bool)vitalityBehaviorShouldEndPlayingAtPhoto:(id)arg1;
- (id)vitalityFilter;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
