<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ISEditSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosPlayer.framework/ISEditSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosPlayer.framework/PhotosPlayer (3462.8.190)
 */

@interface ISEditSession : NSObject {
    float  _audioVolume;
    AVAssetExportSession * _exportSession;
    id /* block */  _frameProcessor;
    CIImage * _inputImage;
    NSDictionary * _inputImageProperties;
    struct CGImageSource { } * _inputImageSource;
    unsigned int  _inputOrientation;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _inputVideoDuration;
    double  _inputVideoScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _inputVideoScaleRoundingError;
    bool  _isExporting;
    NSURL * _lastTemporaryVideoURL;
    CIImage * _outputImage;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _photoTime;
    CIContext * _renderContext;
    NSObject<OS_dispatch_queue> * _renderQueue;
    CIImage * _scaledOutputImage;
    NSObject<OS_dispatch_queue> * _stateQueue;
    long long  _subsampleFactor;
    CIImage * _subsampledInputImage;
    NSString * _temporaryDirectory;
    NSString * _uniqueIdentifier;
    AVAsset * _videoAsset;
}

@property float audioVolume;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } duration;
@property (copy) id /* block */ frameProcessor;
@property (readonly) CIImage *inputImage;
@property (readonly) unsigned int orientation;
@property (readonly) struct CGSize { double x1; double x2; } outputImageSize;
@property (readonly) struct CGSize { double x1; double x2; } outputVideoSize;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } photoTime;

+ (id)_createTemporaryDirectory;
+ (id)temporaryDirectory;

- (void).cxx_destruct;
- (bool)_canRenderAtPlaybackTime;
- (void)_cancelCurrentExportIfNeeded;
- (void)_exportToDestination:(id)arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_inputImage;
- (id)_inputImageProperties;
- (struct CGSize { double x1; double x2; })_inputImageSize;
- (unsigned int)_inputOrientation;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_inputVideoDuration;
- (double)_inputVideoScale;
- (struct CGSize { double x1; double x2; })_inputVideoSize;
- (id)_inputVideoTrack;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_inputVideoTransform;
- (id)_loadInputImage;
- (unsigned int)_loadInputImageOrientation;
- (id)_loadInputImageProperties;
- (id)_loadInputImageWithSubsampleFactor:(long long)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_loadInputVideoDuration;
- (id)_outputImage;
- (id)_outputImageProperties;
- (struct CGSize { double x1; double x2; })_outputImageSize;
- (id)_outputVideoMetadata;
- (struct CGSize { double x1; double x2; })_outputVideoSize;
- (struct CGSize { double x1; double x2; })_outputVideoSizeForScale:(double)arg1;
- (void)_prepareForPlaybackWithTargetSize:(struct CGSize { double x1; double x2; })arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_processImage:(id)arg1 scale:(double)arg2 error:(id*)arg3;
- (void)_renderImageToURL:(id)arg1 fileType:(id)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 completionHandler:(id /* block */)arg4;
- (void)_renderImageWithTargetSize:(struct CGSize { double x1; double x2; })arg1 completionHandler:(id /* block */)arg2;
- (void)_renderVideoToURL:(id)arg1 fileType:(id)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 volume:(float)arg4 completionHandler:(id /* block */)arg5;
- (id)_scaledInputImageForTargetScale:(double)arg1;
- (double)_targetScaleForTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_temporaryURLOfType:(id)arg1;
- (id)_videoCompositionForTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (float)audioVolume;
- (void)cancel;
- (void)dealloc;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })duration;
- (void)exportToDestination:(id)arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (id /* block */)frameProcessor;
- (id)imageProperties;
- (id)init;
- (id)initWithPhotoURL:(id)arg1 videoURL:(id)arg2 photoTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 photoOrientation:(unsigned int)arg4;
- (id)inputImage;
- (id)inputImageForRenderScale:(double)arg1;
- (unsigned int)orientation;
- (id)outputImage;
- (struct CGSize { double x1; double x2; })outputImageSize;
- (struct CGSize { double x1; double x2; })outputVideoSize;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })photoTime;
- (void)prepareForPlaybackWithTargetSize:(struct CGSize { double x1; double x2; })arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setAudioVolume:(float)arg1;
- (void)setFrameProcessor:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
