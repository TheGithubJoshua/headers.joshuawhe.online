<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ISLivePhotoVitalityBehavior.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosPlayer.framework/ISLivePhotoVitalityBehavior.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosPlayer.framework/PhotosPlayer (3462.8.190)
 */

@interface ISLivePhotoVitalityBehavior : ISBehavior {
    bool  __shouldPlayAfterPreparation;
    unsigned long long  _assetOptions;
    id  _easeOutObserver;
    bool  _pauseDuringTransition;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _photoTime;
    double  _photoTransitionDuration;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _playDuration;
    float  _playRate;
    bool  _playing;
    bool  _playingBeyondPhoto;
    bool  _prepared;
    bool  _preparing;
    id  _transitionToPhotoObserver;
}

@property (setter=_setShouldPlayAfterPreparation:, nonatomic) bool _shouldPlayAfterPreparation;
@property (nonatomic, readonly) unsigned long long assetOptions;
@property (nonatomic) <ISLivePhotoVitalityBehaviorDelegate> *delegate;
@property (nonatomic, readonly) bool pauseDuringTransition;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } photoTime;
@property (nonatomic, readonly) double photoTransitionDuration;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } playDuration;
@property (nonatomic, readonly) float playRate;
@property (getter=isPlaying, nonatomic, readonly) bool playing;
@property (getter=isPlayingBeyondPhoto, setter=_setPlayingBeyondPhoto:, nonatomic) bool playingBeyondPhoto;
@property (getter=isPrepared, setter=_setPrepared:, nonatomic) bool prepared;
@property (getter=_isPreparing, setter=_setPreparing:, nonatomic) bool preparing;

- (void).cxx_destruct;
- (void)_didReachTransitionTime;
- (void)_didReachTransitionToPhotoTime;
- (void)_handleDidFinishPreroll;
- (void)_handleDidSeekToStartTime;
- (bool)_isPreparing;
- (void)_setPlayingBeyondPhoto:(bool)arg1;
- (void)_setPrepared:(bool)arg1;
- (void)_setPreparing:(bool)arg1;
- (void)_setShouldPlayAfterPreparation:(bool)arg1;
- (bool)_shouldPlayAfterPreparation;
- (void)_startObservingVideo;
- (void)_startVideoPlayback;
- (void)_stopObservingVideo;
- (void)activeDidChange;
- (unsigned long long)assetOptions;
- (long long)behaviorType;
- (void)cancelSettleToPhoto;
- (void)dealloc;
- (id)initWithInitialLayoutInfo:(id)arg1 photoTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 playDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 playRate:(float)arg4 photoTransitionDuration:(double)arg5 pauseDuringTransition:(bool)arg6 assetOptions:(unsigned long long)arg7;
- (bool)isPlaying;
- (bool)isPlayingBeyondPhoto;
- (bool)isPrepared;
- (bool)pauseDuringTransition;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })photoTime;
- (double)photoTransitionDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })playDuration;
- (float)playRate;
- (void)playVitality;
- (void)prepareForVitality;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
