<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXPlacesMapController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PlacesKit.framework/PXPlacesMapController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PlacesKit.framework/PlacesKit (3462.11.110)
 */

@interface PXPlacesMapController : NSObject <CLLocationManagerDelegate, MKMapViewDelegate, PXPlacesGeotaggedItemDataSourceDelegate> {
    PXPlacesImageCache * _cache;
    <PXPlacesMapControllerChangeDelegate> * _changeDelegate;
    PXPlacesMapPipelineExecutionContext * _currentExecutionContext;
    int  _currentLocationAuthorizationStatus;
    <MKAnnotation> * _currentSelection;
    NSMapTable * _dataSourceExecutionContexts;
    NSMapTable * _dataSourceToPipelineMap;
    NSSet * _dataSources;
    NSObject<OS_dispatch_queue> * _dataSourcesQueue;
    NSObject<OS_dispatch_queue> * _executionContextQueue;
    <PXPlacesMapControllerFocusDelegate> * _focusDelegate;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _initialCenterCoordinate;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _initialEdgePadding;
    CLLocationManager * _locationManager;
    PXPlacesMapView * _mapView;
    bool  _mapViewIsVisible;
    NSMapTable * _pendingDataSourceChanges;
    bool  _pipelineExecutionAllowed;
    NSObject<OS_dispatch_queue> * _pipelinesQueue;
    <PXPlacesMapControllerSelectionDelegate> * _selectionDelegate;
    NSMutableDictionary * _showDebugMapRectColors;
    struct { 
        struct { 
            double x; 
            double y; 
        } origin; 
        struct { 
            double width; 
            double height; 
        } size; 
    }  _signalFocusMapRect;
    bool  _signalFocusWhenMapViewBecomesVisible;
    <PXPlacesMapControllerLoadingStateDelegate> * _stateDelegate;
    NSObject<OS_dispatch_source> * _uiUpdateTimer;
}

@property (retain) PXPlacesImageCache *cache;
@property <PXPlacesMapControllerChangeDelegate> *changeDelegate;
@property (retain) PXPlacesMapPipelineExecutionContext *currentExecutionContext;
@property (nonatomic) int currentLocationAuthorizationStatus;
@property (nonatomic, retain) <MKAnnotation> *currentSelection;
@property (retain) NSMapTable *dataSourceToPipelineMap;
@property (retain) NSSet *dataSources;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property <PXPlacesMapControllerFocusDelegate> *focusDelegate;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct CLLocationCoordinate2D { double x1; double x2; } initialCenterCoordinate;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } initialEdgePadding;
@property (nonatomic, retain) CLLocationManager *locationManager;
@property (nonatomic, retain) PXPlacesMapView *mapView;
@property bool mapViewIsVisible;
@property bool pipelineExecutionAllowed;
@property <PXPlacesMapControllerSelectionDelegate> *selectionDelegate;
@property (nonatomic, retain) NSMutableDictionary *showDebugMapRectColors;
@property (nonatomic) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } signalFocusMapRect;
@property (nonatomic) bool signalFocusWhenMapViewBecomesVisible;
@property <PXPlacesMapControllerLoadingStateDelegate> *stateDelegate;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (double)_defaultAnimationDuration;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_ensureMinimumSize:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_executeUpdatePlanResults:(id)arg1;
- (double)_fadeInAnimationDuration;
- (double)_fadeOutAnimationDuration;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })_mapRectForGeotaggablesFromPipeline:(id)arg1 fitAdjusted:(bool*)arg2;
- (void)_setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 edgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 animated:(bool)arg3;
- (void)_showDebugMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 color:(id)arg2;
- (void)_updateMapWithAllDataSources:(id /* block */)arg1;
- (void)_updateMapWithDataSource:(id)arg1 dataSourceChange:(id)arg2 completion:(id /* block */)arg3;
- (void)_updateMapWithDataSources:(id)arg1 dataSourceChangeTable:(id)arg2 completion:(id /* block */)arg3;
- (double)_zPositionForAnnotationIndex:(long long)arg1;
- (void)addPipeline:(id)arg1;
- (id)cache;
- (id)changeDelegate;
- (id)createTrackingBarButtonItem;
- (id)currentExecutionContext;
- (int)currentLocationAuthorizationStatus;
- (id)currentSelection;
- (void)dataSource:(id)arg1 didChange:(id)arg2;
- (id)dataSourceToPipelineMap;
- (id)dataSources;
- (void)dealloc;
- (id)executePipeline:(id)arg1 dataSourceChange:(id)arg2 context:(id)arg3;
- (id)focusDelegate;
- (void)focusOnGeotaggablesFromPipeline:(id)arg1 animated:(bool)arg2;
- (void)focusOnGeotaggablesFromPipelineImmediately:(id)arg1;
- (id)init;
- (struct CLLocationCoordinate2D { double x1; double x2; })initialCenterCoordinate;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })initialEdgePadding;
- (void)launchMapsAtCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1 withTitle:(id)arg2;
- (void)loadView;
- (id)locationManager;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)mapContainerViewDidAppear;
- (void)mapContainerViewDidDisappear;
- (void)mapContainerViewWillAppear;
- (void)mapContainerViewWillDisappear;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectForGeotaggablesFromDataSource:(id)arg1 renderer:(id)arg2 mapViewSize:(struct CGSize { double x1; double x2; })arg3 fitAdjusted:(bool*)arg4;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })mapRectForNearbyQueriesFromRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 atScale:(double)arg2 targetViewSize:(struct CGSize { double x1; double x2; })arg3;
- (id)mapView;
- (void)mapView:(id)arg1 didAddAnnotationViews:(id)arg2;
- (void)mapView:(id)arg1 didSelectAnnotationView:(id)arg2;
- (void)mapView:(id)arg1 regionDidChangeAnimated:(bool)arg2;
- (id)mapView:(id)arg1 rendererForOverlay:(id)arg2;
- (id)mapView:(id)arg1 viewForAnnotation:(id)arg2;
- (void)mapViewDidFinishRenderingMap:(id)arg1 fullyRendered:(bool)arg2;
- (bool)mapViewIsVisible;
- (void)mapViewWillStartLocatingUser:(id)arg1;
- (bool)pipelineExecutionAllowed;
- (void)removeDataSource:(id)arg1;
- (void)removePipeline:(id)arg1;
- (void)resumePipelines:(id /* block */)arg1;
- (void)runPipelines;
- (id)selectionDelegate;
- (void)setCache:(id)arg1;
- (void)setChangeDelegate:(id)arg1;
- (void)setCurrentExecutionContext:(id)arg1;
- (void)setCurrentLocationAuthorizationStatus:(int)arg1;
- (void)setCurrentSelection:(id)arg1;
- (void)setDataSourceToPipelineMap:(id)arg1;
- (void)setDataSources:(id)arg1;
- (void)setFocusDelegate:(id)arg1;
- (void)setInitialCenterCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)setInitialEdgePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setLocationManager:(id)arg1;
- (void)setMapView:(id)arg1;
- (void)setMapViewIsVisible:(bool)arg1;
- (void)setPipelineExecutionAllowed:(bool)arg1;
- (void)setSelectionDelegate:(id)arg1;
- (void)setShowDebugMapRectColors:(id)arg1;
- (void)setSignalFocusMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSignalFocusWhenMapViewBecomesVisible:(bool)arg1;
- (void)setStateDelegate:(id)arg1;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 forPipeline:(id)arg2 animated:(bool)arg3;
- (void)setVisibleMapRect:(struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1 forRenderer:(id)arg2 animated:(bool)arg3;
- (void)setVisibleMapRelativeToViewPort:(id)arg1 andViewSize:(struct CGSize { double x1; double x2; })arg2 forRenderer:(id)arg3;
- (id)showDebugMapRectColors;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })signalFocusMapRect;
- (bool)signalFocusWhenMapViewBecomesVisible;
- (id)stateDelegate;
- (void)suspendPipelines;
- (id)visibleGeotaggableFromDataSource:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
