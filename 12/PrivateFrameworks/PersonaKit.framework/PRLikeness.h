<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PRLikeness.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PersonaKit.framework/PRLikeness.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PersonaKit.framework/PersonaKit (1)
 */

@interface PRLikeness : NSObject <NSSecureCoding> {
    NSDate * _creationDate;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropRectForTopLeftOrigin;
    NSMutableSet * _dirtyProperties;
    NSDate * _expirationDate;
    NSString * _externalIdentifier;
    NSDate * _insertionDate;
    bool  _isCurrent;
    NSString * _ownerID;
    NSData * _recipe;
    unsigned long long  _scope;
    NSDate * _softExpirationDate;
    long long  _source;
    struct CGImage { } * _staticRepresentation;
    NSData * _staticRepresentationData;
    unsigned long long  _type;
    NSString * _uniqueIdentifier;
    unsigned long long  _version;
}

@property (nonatomic, retain) NSDate *creationDate;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRectForBottomLeftOrigin;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRectForTopLeftOrigin;
@property (nonatomic, retain) NSSet *dirtyProperties;
@property (nonatomic, retain) NSDate *expirationDate;
@property (nonatomic, copy) NSString *externalIdentifier;
@property (nonatomic, retain) NSDate *insertionDate;
@property (setter=setCurrent:, nonatomic) bool isCurrent;
@property (nonatomic, readonly) bool isDirty;
@property (nonatomic, retain) NSString *ownerID;
@property (nonatomic, copy) NSData *recipe;
@property (nonatomic) unsigned long long scope;
@property (nonatomic, readonly) NSString *scopeDescription;
@property (nonatomic, retain) NSDate *softExpirationDate;
@property (nonatomic) long long source;
@property (nonatomic, retain) NSData *staticRepresentationData;
@property (nonatomic) unsigned long long type;
@property (nonatomic, readonly) NSString *typeDescription;
@property (nonatomic, readonly) NSString *uniqueIdentifier;
@property (nonatomic) unsigned long long version;

// Image: /System/Library/PrivateFrameworks/PersonaKit.framework/PersonaKit

+ (id)_dateFormatter;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_flippedRectForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 relativeToImage:(struct CGImage { }*)arg2;
+ (id)_photoWithScope:(unsigned long long)arg1 image:(struct CGImage { }*)arg2 cropRectForTopLeftOrigin:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
+ (bool)automaticallyNotifiesObserversOfCropRectForTopLeftOrigin;
+ (id)descriptionForScope:(unsigned long long)arg1;
+ (id)diddlySquatLikeness;
+ (id)likenessWithPropagatedData:(id)arg1;
+ (id)monogramWithRecipe:(id)arg1 staticRepresentation:(struct CGImage { }*)arg2;
+ (id)monogramWithScope:(unsigned long long)arg1 recipe:(id)arg2 staticRepresentation:(struct CGImage { }*)arg3;
+ (id)photoWithImage:(struct CGImage { }*)arg1;
+ (id)photoWithImage:(struct CGImage { }*)arg1 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)photoWithImage:(struct CGImage { }*)arg1 cropRectForBottomLeftOrigin:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)photoWithImage:(struct CGImage { }*)arg1 cropRectForTopLeftOrigin:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (id)photoWithScope:(unsigned long long)arg1 image:(struct CGImage { }*)arg2;
+ (unsigned long long)scopeFromDescription:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_initWithIdentifier:(id)arg1;
- (void)clearDirtyProperties;
- (id)creationDate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRectForBottomLeftOrigin;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRectForTopLeftOrigin;
- (id)dataForPropagation;
- (void)dealloc;
- (id)description;
- (id)dirtyProperties;
- (void)encodeWithCoder:(id)arg1;
- (id)expirationDate;
- (id)externalIdentifier;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)insertionDate;
- (bool)isCurrent;
- (bool)isDiddlySquat;
- (bool)isDirty;
- (id)ownerID;
- (id)recipe;
- (unsigned long long)scope;
- (id)scopeDescription;
- (void)setCreationDate:(id)arg1;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCropRectForTopLeftOrigin:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCurrent:(bool)arg1;
- (void)setDirtyProperties:(id)arg1;
- (void)setExpirationDate:(id)arg1;
- (void)setExternalIdentifier:(id)arg1;
- (void)setInsertionDate:(id)arg1;
- (void)setOwnerID:(id)arg1;
- (void)setRecipe:(id)arg1;
- (void)setScope:(unsigned long long)arg1;
- (void)setSoftExpirationDate:(id)arg1;
- (void)setSource:(long long)arg1;
- (void)setStaticRepresentation:(struct CGImage { }*)arg1;
- (void)setStaticRepresentationData:(id)arg1;
- (void)setType:(unsigned long long)arg1;
- (void)setVersion:(unsigned long long)arg1;
- (id)softExpirationDate;
- (long long)source;
- (struct CGImage { }*)staticRepresentation;
- (id)staticRepresentationData;
- (unsigned long long)type;
- (id)typeDescription;
- (id)uniqueIdentifier;
- (unsigned long long)version;

// Image: /System/Library/PrivateFrameworks/PersonaUI.framework/PersonaUI

- (id)_accentColorForMonogram;
- (id)_accentColorForPhoto;
- (id)_photoSnapshotWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 options:(id)arg3;
- (id)accentColor;
- (id)snapshotWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 options:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
