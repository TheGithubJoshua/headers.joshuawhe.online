<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHMediaFormatConversionRequest.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudPhotoServices.framework/PHMediaFormatConversionRequest.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudPhotoServices.framework/CloudPhotoServices (3462.1.170)
 */

@interface PHMediaFormatConversionRequest : NSObject <NSProgressReporting> {
    PHMediaFormatConversionDestination * _destination;
    PFMediaCapabilities * _destinationCapabilities;
    NSURL * _directoryForTemporaryFiles;
    NSError * _error;
    bool  _forceFormatConversion;
    double  _formatConversionExpansionFactor;
    NSUUID * _identifier;
    NSString * _livePhotoPairingIdentifier;
    long long  _livePhotoPairingIdentifierBehavior;
    NSString * _outputFilename;
    PHMediaFormatConversionCompositeRequest * _parentRequest;
    long long  _passthroughConversionAdditionalByteCount;
    bool  _preflighted;
    NSProgress * _progress;
    bool  _requiresSinglePassVideoConversion;
    bool  _shouldPadOutputFileToEstimatedLength;
    id /* block */  _singlePassVideoConversionUpdateHandler;
    PHMediaFormatConversionSource * _source;
    long long  _status;
    long long  _transferBehaviorUserPreference;
    bool  _useTransferBehaviorUserPreference;
    id  _userInfo;
}

@property (readonly) long long backwardsCompatibilityStatus;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) PHMediaFormatConversionDestination *destination;
@property (retain) PFMediaCapabilities *destinationCapabilities;
@property (retain) NSURL *directoryForTemporaryFiles;
@property (retain) NSError *error;
@property (readonly) unsigned long long estimatedOutputFileLength;
@property bool forceFormatConversion;
@property (nonatomic) double formatConversionExpansionFactor;
@property (readonly) unsigned long long hash;
@property (readonly) NSUUID *identifier;
@property (readonly) bool isCompositeRequest;
@property (copy) NSString *livePhotoPairingIdentifier;
@property long long livePhotoPairingIdentifierBehavior;
@property (readonly) NSString *outputFileType;
@property (retain) NSString *outputFilename;
@property (readonly) NSString *outputPathExtension;
@property PHMediaFormatConversionCompositeRequest *parentRequest;
@property (nonatomic) long long passthroughConversionAdditionalByteCount;
@property bool preflighted;
@property (retain) NSProgress *progress;
@property (readonly) bool requiresFormatConversion;
@property (readonly) bool requiresMetadataChanges;
@property (readonly) bool requiresPassthroughConversion;
@property bool requiresSinglePassVideoConversion;
@property bool shouldPadOutputFileToEstimatedLength;
@property (copy) id /* block */ singlePassVideoConversionUpdateHandler;
@property (retain) PHMediaFormatConversionSource *source;
@property long long status;
@property (readonly) NSString *statusString;
@property (readonly) Class superclass;
@property long long transferBehaviorUserPreference;
@property bool useTransferBehaviorUserPreference;
@property (retain) id userInfo;

+ (double)bitsPerPixelWithImageDimensions:(struct CGSize { double x1; double x2; })arg1 fileLength:(unsigned long long)arg2;
+ (double)heifToJPEGFactorForBitsPerPixel:(double)arg1;
+ (double)heifToJPEGFactorWithImageDimensions:(struct CGSize { double x1; double x2; })arg1 fileLength:(unsigned long long)arg2;
+ (id)requestForSource:(id)arg1 destinationCapabilities:(id)arg2 error:(id*)arg3;
+ (id)stringForRequestStatus:(long long)arg1;

- (void).cxx_destruct;
- (long long)backwardsCompatibilityStatus;
- (id)description;
- (id)destination;
- (id)destinationCapabilities;
- (void)didFinishProcessing;
- (id)directoryForTemporaryFiles;
- (void)enableSinglePassVideoEncodingWithUpdateHandler:(id /* block */)arg1;
- (id)error;
- (unsigned long long)estimatedOutputFileLength;
- (bool)forceFormatConversion;
- (double)formatConversionExpansionFactor;
- (id)identifier;
- (id)init;
- (bool)isCompositeRequest;
- (id)livePhotoPairingIdentifier;
- (long long)livePhotoPairingIdentifierBehavior;
- (void)markAsCancelled;
- (id)outputFileType;
- (id)outputFilename;
- (id)outputPathExtension;
- (void)padOutputFileToEstimatedLength;
- (id)parentRequest;
- (long long)passthroughConversionAdditionalByteCount;
- (void)preflightWithConversionManager:(id)arg1;
- (bool)preflighted;
- (bool)prepareWithError:(id*)arg1;
- (id)progress;
- (bool)requiresFormatConversion;
- (bool)requiresLivePhotoPairingIdentifierChange;
- (bool)requiresMetadataChanges;
- (bool)requiresPassthroughConversion;
- (bool)requiresSinglePassVideoConversion;
- (void)setDestination:(id)arg1;
- (void)setDestinationCapabilities:(id)arg1;
- (void)setDirectoryForTemporaryFiles:(id)arg1;
- (void)setError:(id)arg1;
- (void)setForceFormatConversion:(bool)arg1;
- (void)setFormatConversionExpansionFactor:(double)arg1;
- (void)setLivePhotoPairingIdentifier:(id)arg1;
- (void)setLivePhotoPairingIdentifierBehavior:(long long)arg1;
- (void)setOutputFilename:(id)arg1;
- (void)setParentRequest:(id)arg1;
- (void)setPassthroughConversionAdditionalByteCount:(long long)arg1;
- (void)setPreflighted:(bool)arg1;
- (void)setProgress:(id)arg1;
- (void)setRequiresSinglePassVideoConversion:(bool)arg1;
- (void)setShouldPadOutputFileToEstimatedLength:(bool)arg1;
- (void)setSinglePassVideoConversionUpdateHandler:(id /* block */)arg1;
- (void)setSource:(id)arg1;
- (void)setStatus:(long long)arg1;
- (void)setTransferBehaviorUserPreference:(long long)arg1;
- (void)setUseTransferBehaviorUserPreference:(bool)arg1;
- (void)setUserInfo:(id)arg1;
- (void)setupProgress;
- (bool)shouldPadOutputFileToEstimatedLength;
- (id /* block */)singlePassVideoConversionUpdateHandler;
- (id)source;
- (long long)status;
- (id)statusString;
- (long long)transferBehaviorUserPreference;
- (void)updateSinglePassVideoConversionStatus:(long long)arg1 addedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 error:(id)arg3;
- (bool)useTransferBehaviorUserPreference;
- (id)userInfo;
- (bool)userPreferenceProhibitsFormatConversion;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
