<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WBParagraph.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/OfficeImport.framework/WBParagraph.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport (257.9)
 */

@interface WBParagraph : NSObject

+ (int)blockType;
+ (void)check:(id)arg1 forFieldMarkerFrom:(id)arg2 runEnd:(int*)arg3 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg4;
+ (void)checkForAnnotationBookmarkFrom:(id)arg1 runEnd:(int*)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)checkForAnnotationFrom:(id)arg1 runEnd:(int*)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)checkForBookmarkFrom:(id)arg1 runEnd:(int*)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)checkForNoteFrom:(id)arg1 footnote:(bool)arg2 runEnd:(int*)arg3 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg4;
+ (bool)isCPAnnotationRangeEnd:(int)arg1 bookmarkTable:(struct WrdBookmarkTable { int (**x1)(); int x2; struct ChVector<WrdBookmark *> { struct WrdBookmark {} **x_3_1_1; struct WrdBookmark {} **x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; unsigned int x_3_1_5; } x3; }*)arg2;
+ (void)readAnnotationBookmarkFor:(id)arg1 from:(id)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)readAnnotationFor:(id)arg1 from:(id)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)readBookmarkFor:(id)arg1 from:(id)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)readCharacterRunsFor:(id)arg1 from:(id)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)readFieldMarkerFor:(id)arg1 from:(id)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)readFrom:(id)arg1 textRun:(struct WrdParagraphTextRun { int (**x1)(); int x2; unsigned int x3; unsigned int x4; struct WrdParagraphProperties {} *x5; struct WrdParagraphProperties {} *x6; struct WrdTableProperties {} *x7; struct WrdTableProperties {} *x8; }*)arg2 paragraph:(id)arg3;
+ (void)readNoteFor:(id)arg1 from:(id)arg2 readState:(struct WBParagraphReadState { int x1; int x2; int x3; struct WrdFieldPosition {} *x4; int x5; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_6_1_1; unsigned int *x_6_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_6_1_3; } x6; int x7; int x8; struct vector<unsigned int, std::__1::allocator<unsigned int> > { unsigned int *x_9_1_1; unsigned int *x_9_1_2; struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > { unsigned int *x_3_2_1; } x_9_1_3; } x9; }*)arg3;
+ (void)readOfficeArtFor:(id)arg1 from:(id)arg2 at:(int)arg3 textRun:(struct WrdCharacterTextRun { int (**x1)(); int x2; unsigned int x3; unsigned int x4; struct WrdCharacterProperties {} *x5; struct WrdCharacterProperties {} *x6; }*)arg4;
+ (void)readPictureFor:(id)arg1 from:(id)arg2 at:(int)arg3 textRun:(struct WrdCharacterTextRun { int (**x1)(); int x2; unsigned int x3; unsigned int x4; struct WrdCharacterProperties {} *x5; struct WrdCharacterProperties {} *x6; }*)arg4;
+ (void)readRunsFor:(id)arg1 from:(id)arg2 textRun:(struct WrdParagraphTextRun { int (**x1)(); int x2; unsigned int x3; unsigned int x4; struct WrdParagraphProperties {} *x5; struct WrdParagraphProperties {} *x6; struct WrdTableProperties {} *x7; struct WrdTableProperties {} *x8; }*)arg3;
+ (void)readSpecialCharacterFor:(id)arg1 from:(id)arg2 at:(int)arg3 textRun:(struct WrdCharacterTextRun { int (**x1)(); int x2; unsigned int x3; unsigned int x4; struct WrdCharacterProperties {} *x5; struct WrdCharacterProperties {} *x6; }*)arg4;
+ (void)readSpecialCharactersFor:(id)arg1 from:(id)arg2 textRun:(struct WrdCharacterTextRun { int (**x1)(); int x2; unsigned int x3; unsigned int x4; struct WrdCharacterProperties {} *x5; struct WrdCharacterProperties {} *x6; }*)arg3;
+ (void)readSymbolsFor:(id)arg1 from:(id)arg2 textRun:(struct WrdCharacterTextRun { int (**x1)(); int x2; unsigned int x3; unsigned int x4; struct WrdCharacterProperties {} *x5; struct WrdCharacterProperties {} *x6; }*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
