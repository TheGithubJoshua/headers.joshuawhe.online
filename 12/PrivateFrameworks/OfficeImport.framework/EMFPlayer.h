<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EMFPlayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/OfficeImport.framework/EMFPlayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport (257.9)
 */

@interface EMFPlayer : NSObject {
    EMFPlusPlayer * m_emfPlusPlayer;
    MFGraphicsDevice * m_gdi;
    bool  m_headerDone;
    bool  m_ignoreEMFPlusRecords;
    bool  m_ignoreEMFRecords;
}

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsInLogicalUnits:(id)arg1;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsInPoints:(id)arg1;

- (void)dealloc;
- (void)done;
- (id)getGdi;
- (id)initWithGraphicsDevice:(id)arg1;
- (int)play:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playAbortPath:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playAlphaBlend:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playAngleArc:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playArc:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playArcTo:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playBeginPath:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playBitBlt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playChord:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playCloseFigure:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playCreateBrushIndirect:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playCreateDibPatternBrushPT:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playCreateMonoBrush:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playCreatePalette:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playCreatePen:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playDeleteObject:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playEllipse:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playEndPath:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playExcludeClipRect:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playExtCreateFontIndirectW:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playExtCreatePen:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playExtTextOut:(unsigned int)arg1 in_pRecord:(const char *)arg2 wideChars:(bool)arg3;
- (int)playExtTextOutA:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playExtTextOutW:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playFillRgn:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playHeader:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playIntersectClipRect:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playInvertRgn:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playLineTo:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playMaskBlt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playModifyWorldTransform:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playMoveToEx:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playOffsetClipRegion:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playPaintRgn:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playPie:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playPlgBlt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playPolyBezier:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playPolyBezierTo:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playPolyDraw:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playPolyLine:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playPolyLineTo:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playPolyPolyLine:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playPolyPolygon:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playPolygon:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_is16bit:(bool)arg3;
- (int)playRealizePalette:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playRectangle:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playResizePalette:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playRestoreDC:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playRoundRect:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSaveDC:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playScaleViewportExt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playScaleWindowExt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSelectClipPath:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSelectClipRegion:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSelectObject:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSelectPalette:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetArcDirection:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetBkColour:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetBkMode:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetBrushOrg:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetDIBitsToDevice:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetMapMode:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetMetaRgn:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetMiterLimit:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetPaletteEntries:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetPolyFillMode:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetRop2:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetStretchBltMode:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetTextAlign:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetTextColour:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetTextJustification:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetViewportExt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetViewportOrg:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetWindowExt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetWindowOrg:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playSetWorldTransform:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playStretchBlt:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playStretchDIBits:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (int)playStrokeAndFillPath:(unsigned int)arg1 in_pRecord:(const char *)arg2 in_stroke:(bool)arg3 in_fill:(bool)arg4;
- (int)playUnknown:(unsigned int)arg1 in_recordType:(unsigned int)arg2 in_pRecord:(const char *)arg3;
- (int)playUnsupported:(unsigned int)arg1 in_recordName:(const char *)arg2 in_pRecord:(const char *)arg3;
- (int)playWidenPath:(unsigned int)arg1 in_pRecord:(const char *)arg2;
- (void)setIgnoreEMFPlusRecords:(bool)arg1;
- (void)setIgnoreEMFRecords:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
