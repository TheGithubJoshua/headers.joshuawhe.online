<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MFGraphicsDevice.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/OfficeImport.framework/MFGraphicsDevice.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport (257.9)
 */

@interface MFGraphicsDevice : NSObject {
    NSMutableArray * m_DCStack;
    NSDictionary * m_colorMap;
    MFDeviceContext * m_currentDC;
    NSObject<MFDeviceDriver> * m_deviceDriver;
    NSDictionary * m_fillMap;
    MFDeviceContext * m_firstClipDC;
    int  m_gStateStackHeight;
    MFObjectTable * m_objectTable;
    MFObjectTable * m_stockObjects;
}

- (int)abortPath;
- (void)addClippingPathToCurrentContext:(id)arg1 dc:(id)arg2;
- (void)addClippingPathToCurrentDCAndCurrentContext:(id)arg1;
- (int)alphaBlend:(int)arg1 in_yDest:(int)arg2 in_widthDest:(int)arg3 in_heightDest:(int)arg4 in_sourceImage:(id)arg5 in_xSrc:(int)arg6 in_ySrc:(int)arg7 in_widthSrc:(int)arg8 in_heightSrc:(int)arg9 in_sourceConstantOpacity:(unsigned char)arg10 in_useSourceAlphaChannel:(bool)arg11 in_xform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg12 in_colour:(unsigned int)arg13;
- (int)angleArc:(int)arg1 y:(int)arg2 radius:(unsigned int)arg3 startAngle:(double)arg4 sweepAngle:(double)arg5;
- (void)applyClippingOfDCAtIndexToCurrentContext:(unsigned long long)arg1;
- (void)applyDCAtIndexToCurrentContext:(unsigned long long)arg1;
- (void)applyNonClippingOfDCAtIndexToCurrentContext:(unsigned long long)arg1;
- (int)arc:(int)arg1 nTopRect:(int)arg2 nRightRect:(int)arg3 nBottomRect:(int)arg4 nXStartArc:(int)arg5 nYStartArc:(int)arg6 nXEndArc:(int)arg7 nYEndArc:(int)arg8;
- (int)arcTo:(int)arg1 nTopRect:(int)arg2 nRightRect:(int)arg3 nBottomRect:(int)arg4 nXStartArc:(int)arg5 nYStartArc:(int)arg6 nXEndArc:(int)arg7 nYEndArc:(int)arg8;
- (int)beginPath;
- (int)bezier:(int)arg1 y:(int)arg2 x2:(int)arg3 y2:(int)arg4 x3:(int)arg5 y3:(int)arg6 x4:(int)arg7 y4:(int)arg8;
- (int)bezierTo:(int)arg1 y:(int)arg2 x2:(int)arg3 y2:(int)arg4 x3:(int)arg5 y3:(int)arg6;
- (int)bitBlt:(int)arg1 in_yDest:(int)arg2 in_widthDest:(int)arg3 in_heightDest:(int)arg4 in_sourceImage:(id)arg5 in_xSrc:(int)arg6 in_ySrc:(int)arg7 in_rop:(unsigned int)arg8 in_xform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg9 in_colour:(unsigned int)arg10;
- (int)chord:(int)arg1 nTopRect:(int)arg2 nRightRect:(int)arg3 nBottomRect:(int)arg4 nXStartArc:(int)arg5 nYStartArc:(int)arg6 nXEndArc:(int)arg7 nYEndArc:(int)arg8;
- (id)clipEverythingClippingPath;
- (id)clippingPathByCombiningClippingPath:(id)arg1 withClippingPath:(id)arg2 combineMode:(int)arg3;
- (id)clippingPathByCombiningEmptyClippingPathWithClippingPath:(id)arg1 combineMode:(int)arg2;
- (id)clippingPathByCombiningImplicitClippingPathWithClippingPath:(id)arg1 combineMode:(int)arg2;
- (unsigned long long)clippingStartDCIndex;
- (int)closeCurrentPath:(bool)arg1;
- (int)comment:(id)arg1;
- (id)createBitmap:(unsigned int)arg1 in_height:(unsigned int)arg2 in_planes:(unsigned int)arg3 in_bitsPerPixel:(unsigned int)arg4 in_bitmap:(const char *)arg5 in_bitmapSize:(unsigned int)arg6;
- (int)createBrush:(int)arg1 in_colour:(id)arg2 hatchstyle:(int)arg3 index:(unsigned int)arg4;
- (id)createColorWithRGBBytes:(unsigned char)arg1 green:(unsigned char)arg2 blue:(unsigned char)arg3 flags:(unsigned char)arg4;
- (id)createDIBitmap:(const char *)arg1 in_dibSize:(unsigned int)arg2 in_usage:(int)arg3;
- (id)createDIBitmap:(const char *)arg1 in_headerSize:(unsigned int)arg2 in_bitmap:(const char *)arg3 in_bitmapSize:(unsigned int)arg4 in_usage:(int)arg5;
- (int)createFontIndirect:(int)arg1 lfWidth:(int)arg2 lfEscapement:(int)arg3 lfOrientation:(int)arg4 lfWeight:(int)arg5 lfItalic:(bool)arg6 lfUnderline:(bool)arg7 lfStrikeOut:(bool)arg8 lfCharSet:(int)arg9 lfOutPrecision:(int)arg10 lfClipPrecision:(unsigned char)arg11 lfQuality:(int)arg12 pitch:(int)arg13 family:(int)arg14 lfFaceName:(id)arg15;
- (int)createFontIndirectW:(int)arg1 lfWidth:(int)arg2 lfEscapement:(int)arg3 lfOrientation:(int)arg4 lfWeight:(int)arg5 lfItalic:(bool)arg6 lfUnderline:(bool)arg7 lfStrikeOut:(bool)arg8 lfCharSet:(int)arg9 lfOutPrecision:(int)arg10 lfClipPrecision:(unsigned char)arg11 lfQuality:(int)arg12 pitch:(int)arg13 family:(int)arg14 lfFaceName:(id)arg15 elfFullName:(id)arg16 elfStyle:(id)arg17 elfVersion:(unsigned int)arg18 elfStyleSize:(unsigned int)arg19 elfMatch:(unsigned int)arg20 elfVendorId:(unsigned int)arg21 elfCulture:(unsigned int)arg22 index:(unsigned int)arg23;
- (int)createPalette:(id)arg1 in_index:(unsigned int)arg2;
- (int)createPatternBrush:(id)arg1 index:(unsigned int)arg2 usePaletteForBilevel:(bool)arg3;
- (int)createPen:(int)arg1 width:(int)arg2 in_colour:(id)arg3 in_userStyleArray:(double*)arg4 index:(unsigned int)arg5;
- (int)createRegion:(id)arg1;
- (void)createStockObjects;
- (id)currentCummulatedClippingPath;
- (unsigned long long)currentDCIndex;
- (void)dealloc;
- (int)deleteObject:(int)arg1;
- (int)description:(id)arg1;
- (void)done;
- (int)ellipse:(int)arg1 y1:(int)arg2 x2:(int)arg3 y2:(int)arg4;
- (int)endPath;
- (int)excludeClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (int)extTextOut:(int)arg1 y:(int)arg2 in_text:(id)arg3 options:(int)arg4 left:(int)arg5 top:(int)arg6 right:(int)arg7 bottom:(int)arg8 spacingValues:(int*)arg9 numValues:(int)arg10;
- (int)extTextOutEncoded:(int)arg1 y:(int)arg2 in_data:(id)arg3 options:(int)arg4 left:(int)arg5 top:(int)arg6 right:(int)arg7 bottom:(int)arg8 spacingValues:(int*)arg9 numValues:(int)arg10;
- (int)fillRgn:(unsigned int)arg1 in_brushID:(unsigned int)arg2;
- (int)fillRgnWithRects:(id)arg1 in_brushID:(unsigned int)arg2;
- (unsigned long long)firstClipDCIndex;
- (int)frameRegion:(unsigned int)arg1 in_brushID:(unsigned int)arg2 in_width:(int)arg3 in_height:(int)arg4;
- (int)frameRegionWithRects:(id)arg1 in_brushID:(unsigned int)arg2 in_width:(int)arg3 in_height:(int)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })getCanvas;
- (id)getCurrentFont;
- (int)getStockObject:(unsigned int)arg1;
- (id)implicitClippingPath;
- (id)initWithCanvas:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (int)intersectClipRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (int)invertRgn:(unsigned int)arg1;
- (int)invertRgnWithRects:(id)arg1;
- (int)lineTo:(double)arg1 y:(double)arg2;
- (int)maskBlt:(int)arg1 in_yDest:(int)arg2 in_widthDest:(int)arg3 in_heightDest:(int)arg4 in_sourceImage:(id)arg5 in_xSrc:(int)arg6 in_ySrc:(int)arg7 in_maskImage:(id)arg8 in_xMask:(int)arg9 in_yMask:(int)arg10 in_rop:(unsigned int)arg11 in_xform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg12 in_colour:(unsigned int)arg13;
- (int)modifyWorldTransform:(const struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg1 in_command:(int)arg2;
- (int)moveTo:(double)arg1 y:(double)arg2;
- (id)normalizedClippingPathWithClippingPath:(id)arg1;
- (int)offsetClipRegionByX:(int)arg1 y:(int)arg2;
- (int)offsetViewportOrg:(int)arg1 in_y:(int)arg2;
- (int)offsetWindowOrg:(int)arg1 in_y:(int)arg2;
- (int)paintRgn:(unsigned int)arg1;
- (int)paintRgnWithRects:(id)arg1;
- (int)patBlt:(int)arg1 in_y:(int)arg2 in_width:(int)arg3 in_height:(int)arg4 in_rop:(unsigned int)arg5;
- (int)pie:(int)arg1 nTopRect:(int)arg2 nRightRect:(int)arg3 nBottomRect:(int)arg4 nXStartArc:(int)arg5 nYStartArc:(int)arg6 nXEndArc:(int)arg7 nYEndArc:(int)arg8;
- (int)plgBlt:(struct CGPoint { double x1; double x2; }*)arg1 in_sourceImage:(id)arg2 in_xSrc:(int)arg3 in_ySrc:(int)arg4 in_widthSrc:(int)arg5 in_heightSrc:(int)arg6 in_maskImage:(id)arg7 in_xMask:(int)arg8 in_yMask:(int)arg9 in_xform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg10 in_colour:(unsigned int)arg11;
- (int)polyPolygon:(struct CGPoint { double x1; double x2; }*)arg1 in_polyCounts:(int*)arg2 in_count:(int)arg3;
- (int)polyPolyline:(struct CGPoint { double x1; double x2; }*)arg1 in_polyCounts:(int*)arg2 in_count:(int)arg3;
- (int)polygon:(struct CGPoint { double x1; double x2; }*)arg1 in_count:(int)arg2;
- (int)polyline:(struct CGPoint { double x1; double x2; }*)arg1 in_count:(int)arg2;
- (int)realizePalette;
- (id)recolor:(id)arg1 fill:(bool)arg2;
- (id)recolor:(unsigned char)arg1 in_green:(unsigned char)arg2 in_blue:(unsigned char)arg3 fill:(bool)arg4;
- (int)rectangle:(int)arg1 y1:(int)arg2 x2:(int)arg3 y2:(int)arg4;
- (int)removeClip;
- (int)resizePalette:(unsigned int)arg1 in_index:(unsigned int)arg2;
- (int)restoreDC;
- (int)restoreDC:(int)arg1;
- (void)restoreGState:(id)arg1;
- (int)roundRect:(int)arg1 top:(int)arg2 right:(int)arg3 bottom:(int)arg4 rx:(double)arg5 ry:(double)arg6;
- (int)saveDC;
- (void)saveGState:(id)arg1;
- (int)scaleViewportExt:(int)arg1 in_xDenom:(int)arg2 in_yNum:(int)arg3 in_yDenom:(int)arg4;
- (int)scaleWindowExt:(int)arg1 in_xDenom:(int)arg2 in_yNum:(int)arg3 in_yDenom:(int)arg4;
- (int)selectClipPath:(int)arg1;
- (int)selectClipRegion:(id)arg1 combineMode:(int)arg2;
- (int)selectClipRegionWithRects:(id)arg1 in_mode:(int)arg2;
- (int)selectClippingPath:(id)arg1 combineMode:(int)arg2;
- (int)selectObject:(int)arg1;
- (int)setArcDirection:(int)arg1;
- (int)setBkColour:(id)arg1;
- (int)setBkMode:(int)arg1;
- (int)setBrushOrg:(double)arg1 y:(double)arg2;
- (int)setClipRegion:(unsigned int)arg1;
- (void)setClippingPath:(id)arg1;
- (void)setColorMap:(id)arg1 fillMap:(id)arg2;
- (int)setMapMode:(int)arg1;
- (void)setMaximumObjectTableSize:(unsigned int)arg1;
- (int)setMetaRgn;
- (int)setMiterLimit:(double)arg1;
- (int)setPaletteEntries:(unsigned int)arg1 in_colours:(id)arg2 in_index:(unsigned int)arg3;
- (int)setPolyFillMode:(int)arg1;
- (int)setRop2:(int)arg1;
- (int)setStretchBltMode:(int)arg1;
- (int)setTextAlign:(bool)arg1 textHorizontalAlign:(int)arg2 textVerticalAlign:(int)arg3 textDirection:(int)arg4;
- (int)setTextCharExtra:(int)arg1;
- (int)setTextColour:(id)arg1;
- (int)setTextJustification:(int)arg1 in_breakCount:(int)arg2;
- (int)setViewBox:(double)arg1 top:(double)arg2 width:(double)arg3 height:(double)arg4;
- (int)setViewportExt:(int)arg1 in_y:(int)arg2;
- (int)setViewportOrg:(int)arg1 in_y:(int)arg2;
- (int)setWindowExt:(int)arg1 in_y:(int)arg2;
- (int)setWindowOrg:(int)arg1 in_y:(int)arg2;
- (int)setWorldTransform:(const struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg1;
- (int)stretchBlt:(int)arg1 in_yDest:(int)arg2 in_widthDest:(int)arg3 in_heightDest:(int)arg4 in_sourceImage:(id)arg5 in_xSrc:(int)arg6 in_ySrc:(int)arg7 in_widthSrc:(int)arg8 in_heightSrc:(int)arg9 in_rop:(unsigned int)arg10 in_xform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg11 in_colour:(unsigned int)arg12;
- (int)stretchBlt:(int)arg1 in_yDest:(int)arg2 in_widthDest:(int)arg3 in_heightDest:(int)arg4 in_sourceImage:(id)arg5 in_xSrc:(int)arg6 in_ySrc:(int)arg7 in_widthSrc:(int)arg8 in_heightSrc:(int)arg9 in_rop:(unsigned int)arg10 in_xform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg11 in_colour:(unsigned int)arg12 usePaletteForBilevel:(bool)arg13;
- (int)strokeAndFillPath:(bool)arg1 in_fill:(bool)arg2;
- (int)textOut:(int)arg1 y:(int)arg2 in_text:(id)arg3;
- (int)textOutEncoded:(int)arg1 y:(int)arg2 in_data:(id)arg3;
- (int)widenPath;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
