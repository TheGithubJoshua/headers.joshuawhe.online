<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SiriCoreNetworkSessionProvider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SiriCore.framework/SiriCoreNetworkSessionProvider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SiriCore.framework/SiriCore (1)
 */

@interface SiriCoreNetworkSessionProvider : NSObject <NSStreamDelegate, NSURLSessionDelegate, SiriCoreConnectionProvider> {
    id /* block */  _completion_block;
    bool  _connectByPOPEnabled;
    NSString * _connectionId;
    SiriCoreConnectionType * _connectionType;
    <SiriCoreConnectionProviderDelegate> * _delegate;
    bool  _enforceEV;
    NSInputStream * _inputStream;
    int  _interfaceIndex;
    NSString * _interfaceName;
    bool  _isCanceled;
    bool  _isEstablishing;
    bool  _isMPTCP;
    bool  _isReady;
    NSOperationQueue * _opQueue;
    NSObject<OS_dispatch_source> * _openTimer;
    NSOutputStream * _outputStream;
    SAConnectionPolicy * _policy;
    bool  _prefersWWAN;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned char  _readBuffer;
    NSObject<OS_dispatch_group> * _readGroup;
    unsigned long long  _readWriteCounter;
    NSString * _resolvedHost;
    SAConnectionPolicyRoute * _route;
    double  _staleConnectionInterval;
    NSObject<OS_dispatch_source> * _staleConnectionTimer;
    NSURLSessionStreamTask * _streamTask;
    NSURL * _url;
    NSURLSession * _urlSession;
    bool  _waitingOnReadGroup;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)getMetricsContext:(id /* block */)arg1;

- (void).cxx_destruct;
- (void)URLSession:(id)arg1 betterRouteDiscoveredForStreamTask:(id)arg2;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)URLSession:(id)arg1 streamTask:(id)arg2 didBecomeInputStream:(id)arg3 outputStream:(id)arg4;
- (void)_cancelOpenTimer;
- (void)_cancelStaleConnectionTimer;
- (void)_closeWithError:(id)arg1;
- (void)_invokeOpenCompletionWithError:(id)arg1;
- (void)_setupOpenTimer;
- (void)_setupStaleConnectionTimer;
- (void)_streamDidBecomeUnviable;
- (id)analysisInfo;
- (void)close;
- (id)connectionType;
- (id)delegate;
- (bool)hasActiveConnection;
- (id)headerDataWithForceReconnect:(bool)arg1;
- (id)initWithQueue:(id)arg1;
- (bool)isCanceled;
- (bool)isEstablishing;
- (bool)isMultipath;
- (bool)isPeerConnectionError:(id)arg1;
- (bool)isPeerNotNearbyError:(id)arg1;
- (bool)isReady;
- (void)openConnectionForURL:(id)arg1 withConnectionId:(id)arg2 initialPayload:(id)arg3 completion:(id /* block */)arg4;
- (bool)providerStatsIndicatePoorLinkQuality;
- (void)readData:(id /* block */)arg1;
- (id)resolvedHost;
- (void)setConnectByPOPMethod:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnforceExtendedValidation:(bool)arg1;
- (void)setKeepAlive:(double)arg1 withInterval:(double)arg2 withCount:(unsigned long long)arg3;
- (void)setPolicyRoute:(id)arg1;
- (void)setPrefersWWAN:(bool)arg1;
- (void)setProviderConnectionPolicy:(id)arg1;
- (void)setRetransmitConnectionDropTime:(double)arg1;
- (void)setScopeIsWiFiOnly;
- (void)setStaleInterval:(double)arg1;
- (bool)shouldFallbackFromError:(id)arg1;
- (bool)shouldFallbackQuickly;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (bool)supportsInitialPayload;
- (void)updateConnectionMetrics:(id)arg1 completion:(id /* block */)arg2;
- (void)writeData:(id)arg1 completion:(id /* block */)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
