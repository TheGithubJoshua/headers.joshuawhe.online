<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CLIndoorAvailabilityTileParams.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreIndoor.framework/CLIndoorAvailabilityTileParams.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreIndoor.framework/CoreIndoor (380.8.1)
 */

@interface CLIndoorAvailabilityTileParams : NSObject {
    double  _availabilityZScoreConfidenceInterval;
    unsigned int  _cyclingToNonFitnessSeconds;
    bool  _hasCyclingToNonFitnessSeconds;
    bool  _hasMotionActivityDebounceParameters;
    bool  _hasNonFitnessToCyclingSeconds;
    bool  _hasNonFitnessToRunningSeconds;
    bool  _hasRegionalPrefetchMaxFloorCount;
    bool  _hasRunningToNonFitnessSeconds;
    unsigned int  _indoorLocationOfInterestMergeRadiusKM;
    float  _indoorNumberOfDaysBeforeTileRedownload;
    unsigned int  _indoorPrefetchMaxFloorCount;
    unsigned int  _indoorPrefetchMaxTotalBytes;
    unsigned int  _indoorPrefetchRadiusKM;
    unsigned int  _nonFitnessToCyclingSeconds;
    unsigned int  _nonFitnessToRunningSeconds;
    struct optional<proto::params::LocalizerParameters> { 
        bool m_initialized; 
        struct aligned_storage<proto::params::LocalizerParameters> { 
            union dummy_u { 
                BOOL data[264]; 
                struct a8 { } aligner_; 
            } dummy_; 
        } m_storage; 
    }  _optionalParams;
    unsigned int  _preferPredictionWithinNActivityCycles;
    unsigned int  _regionalLocationOfInterestMergeRadiusKM;
    float  _regionalNumberOfDaysBeforeTileRedownload;
    unsigned int  _regionalPrefetchMaxFloorCount;
    unsigned int  _regionalPrefetchMaxTotalBytes;
    unsigned int  _regionalPrefetchRadiusKM;
    unsigned int  _runningToNonFitnessSeconds;
}

@property (nonatomic, readonly) double availabilityZScoreConfidenceInterval;
@property (nonatomic, readonly) unsigned int cyclingToNonFitnessSeconds;
@property (nonatomic, readonly) bool hasCyclingToNonFitnessSeconds;
@property (nonatomic, readonly) bool hasMotionActivityDebounceParameters;
@property (nonatomic, readonly) bool hasNonFitnessToCyclingSeconds;
@property (nonatomic, readonly) bool hasNonFitnessToRunningSeconds;
@property (nonatomic, readonly) bool hasRegionalPrefetchMaxFloorCount;
@property (nonatomic, readonly) bool hasRunningToNonFitnessSeconds;
@property (nonatomic, readonly) unsigned int indoorLocationOfInterestMergeRadiusKM;
@property (nonatomic, readonly) float indoorNumberOfDaysBeforeTileRedownload;
@property (nonatomic, readonly) unsigned int indoorPrefetchMaxFloorCount;
@property (nonatomic, readonly) unsigned int indoorPrefetchMaxTotalBytes;
@property (nonatomic, readonly) unsigned int indoorPrefetchRadiusKM;
@property (nonatomic, readonly) unsigned int nonFitnessToCyclingSeconds;
@property (nonatomic, readonly) unsigned int nonFitnessToRunningSeconds;
@property (nonatomic, readonly) unsigned int preferPredictionWithinNActivityCycles;
@property (nonatomic, readonly) unsigned int regionalLocationOfInterestMergeRadiusKM;
@property (nonatomic, readonly) float regionalNumberOfDaysBeforeTileRedownload;
@property (nonatomic, readonly) unsigned int regionalPrefetchMaxFloorCount;
@property (nonatomic, readonly) unsigned int regionalPrefetchMaxTotalBytes;
@property (nonatomic, readonly) unsigned int regionalPrefetchRadiusKM;
@property (nonatomic, readonly) unsigned int runningToNonFitnessSeconds;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)availabilityZScoreConfidenceInterval;
- (unsigned int)cyclingToNonFitnessSeconds;
- (bool)hasCyclingToNonFitnessSeconds;
- (bool)hasMotionActivityDebounceParameters;
- (bool)hasNonFitnessToCyclingSeconds;
- (bool)hasNonFitnessToRunningSeconds;
- (bool)hasRegionalPrefetchMaxFloorCount;
- (bool)hasRunningToNonFitnessSeconds;
- (unsigned int)indoorLocationOfInterestMergeRadiusKM;
- (float)indoorNumberOfDaysBeforeTileRedownload;
- (unsigned int)indoorPrefetchMaxFloorCount;
- (unsigned int)indoorPrefetchMaxTotalBytes;
- (unsigned int)indoorPrefetchRadiusKM;
- (id)init;
- (id)initWithAvailabilityTile:(struct AvailabilityTile { struct shared_ptr<proto::availability::AvailabilityTile> { struct AvailabilityTile {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; bool x2; struct unique_ptr<wireless_diagnostics::google::protobuf::io::FileInputStream, std::__1::default_delete<wireless_diagnostics::google::protobuf::io::FileInputStream> > { struct __compressed_pair<wireless_diagnostics::google::protobuf::io::FileInputStream *, std::__1::default_delete<wireless_diagnostics::google::protobuf::io::FileInputStream> > { struct FileInputStream {} *x_1_2_1; } x_3_1_1; } x3; struct path { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_6_1; unsigned long long x_1_6_2; unsigned long long x_1_6_3; } x_1_5_1; struct __short { BOOL x_2_6_1[23]; struct { unsigned char x_2_7_1; } x_2_6_2; } x_1_5_2; struct __raw { unsigned long long x_3_6_1[3]; } x_1_5_3; } x_1_4_1; } x_1_3_1; } x_1_2_1; } x_4_1_1; } x4; }*)arg1;
- (struct optional<proto::params::LocalizerParameters> { bool x1; struct aligned_storage<proto::params::LocalizerParameters> { union dummy_u { BOOL x_1_2_1[264]; struct a8 { } x_1_2_2; } x_2_1_1; } x2; })localizerParams;
- (unsigned int)nonFitnessToCyclingSeconds;
- (unsigned int)nonFitnessToRunningSeconds;
- (unsigned int)preferPredictionWithinNActivityCycles;
- (unsigned int)regionalLocationOfInterestMergeRadiusKM;
- (float)regionalNumberOfDaysBeforeTileRedownload;
- (unsigned int)regionalPrefetchMaxFloorCount;
- (unsigned int)regionalPrefetchMaxTotalBytes;
- (unsigned int)regionalPrefetchRadiusKM;
- (unsigned int)runningToNonFitnessSeconds;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
