<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CLLocationGroup.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreIndoor.framework/CLLocationGroup.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreIndoor.framework/CoreIndoor (380.8.1)
 */

@interface CLLocationGroup : NSObject {
    ECEFCoordinate * _centerECEF;
    GeographicCoordinate * _centerLatLon;
    NSString * _groupId;
    long long  _locationContext;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { 
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *__begin_; 
        struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *__end_; 
        struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { 
            struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *__value_; 
        } __end_cap_; 
    }  _locationIds;
    double  _tolerance;
    struct polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> { 
        struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> { 
            struct point_xy<double, boost::geometry::cs::cartesian> {} *__begin_; 
            struct point_xy<double, boost::geometry::cs::cartesian> {} *__end_; 
            struct __compressed_pair<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian> *, std::__1::allocator<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian> > > { 
                struct point_xy<double, boost::geometry::cs::cartesian> {} *__value_; 
            } __end_cap_; 
        } m_outer; 
        struct vector<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator>, std::__1::allocator<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> > > { 
            struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *__begin_; 
            struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *__end_; 
            struct __compressed_pair<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> *, std::__1::allocator<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> > > { 
                struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *__value_; 
            } __end_cap_; 
        } m_inners; 
    }  _vertices;
    struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { 
        struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _wifiOnlyDownloadLocIdxs;
}

@property (readonly) ECEFCoordinate *centerECEF;
@property (readonly) GeographicCoordinate *centerLatLon;
@property (readonly) NSString *groupId;
@property (readonly) long long locationContext;
@property (readonly) /* Warning: unhandled struct encoding: '{vector<std::__1::basic_string<char>' */ struct  locationIds; /* unknown property attribute:  std::__1::allocator<char> >}}} */
@property (readonly) double tolerance;
@property /* Warning: unhandled struct encoding: '{polygon<boost::geometry::model::d2::point_xy<double' */ struct  vertices; /* unknown property attribute:  allocator>}}}} */
@property /* Warning: unhandled struct encoding: '{set<unsigned long' */ struct  wifiOnlyDownloadLocIdxs; /* unknown property attribute:  std::__1::less<unsigned long> >=Q}}} */

+ (id)average:(id)arg1;
+ (struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x2; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_3_1_1; } x3; })stringVectorFromNSArray:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)allowCellularDownload:(unsigned long long)arg1;
- (id)centerECEF;
- (id)centerLatLon;
- (double)distance:(id)arg1;
- (struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_4_1; unsigned long long x_1_4_2; unsigned long long x_1_4_3; } x_1_3_1; struct __short { BOOL x_2_4_1[23]; struct { unsigned char x_2_5_1; } x_2_4_2; } x_1_3_2; struct __raw { unsigned long long x_3_4_1[3]; } x_1_3_3; } x_1_2_1; } x_1_1_1; } x1; })getGroupId;
- (const struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x2; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_3_1_1; } x3; }*)getLocationIds;
- (id)groupId;
- (id)init;
- (id)initWithGroupId:(id)arg1 locationIds:(id)arg2 vertices:(id)arg3 wifiOnlyDownloadLocIdxs:(const struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; }*)arg4 locationContext:(long long)arg5 andTolerance:(double)arg6;
- (long long)locationContext;
- (struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x1; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x2; struct __compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > > { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_3_1_1; } x3; })locationIds;
- (void)setVertices:(struct polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> { struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> { struct point_xy<double, boost::geometry::cs::cartesian> {} *x_1_1_1; struct point_xy<double, boost::geometry::cs::cartesian> {} *x_1_1_2; struct __compressed_pair<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian> *, std::__1::allocator<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian> > > { struct point_xy<double, boost::geometry::cs::cartesian> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator>, std::__1::allocator<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> > > { struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *x_2_1_1; struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *x_2_1_2; struct __compressed_pair<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> *, std::__1::allocator<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> > > { struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *x_3_2_1; } x_2_1_3; } x2; })arg1;
- (void)setWifiOnlyDownloadLocIdxs:(struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg1;
- (double)tolerance;
- (struct polygon<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, std::vector, std::vector, std::allocator, std::allocator> { struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> { struct point_xy<double, boost::geometry::cs::cartesian> {} *x_1_1_1; struct point_xy<double, boost::geometry::cs::cartesian> {} *x_1_1_2; struct __compressed_pair<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian> *, std::__1::allocator<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian> > > { struct point_xy<double, boost::geometry::cs::cartesian> {} *x_3_2_1; } x_1_1_3; } x1; struct vector<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator>, std::__1::allocator<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> > > { struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *x_2_1_1; struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *x_2_1_2; struct __compressed_pair<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> *, std::__1::allocator<boost::geometry::model::ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> > > { struct ring<boost::geometry::model::d2::point_xy<double, boost::geometry::cs::cartesian>, true, true, vector, allocator> {} *x_3_2_1; } x_2_1_3; } x2; })vertices;
- (struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })wifiOnlyDownloadLocIdxs;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
