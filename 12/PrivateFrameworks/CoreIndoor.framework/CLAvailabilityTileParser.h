<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CLAvailabilityTileParser.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreIndoor.framework/CLAvailabilityTileParser.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreIndoor.framework/CoreIndoor (380.8.1)
 */

@interface CLAvailabilityTileParser : NSObject {
    struct shared_ptr<AvailabilityTile> { 
        struct AvailabilityTile {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _avlTile;
    NSURL * _path;
}

@property (nonatomic, readonly) NSURL *path;

+ (void)_setParamOverrides:(struct LocalizerParameters { int (**x1)(); unsigned long long x2; unsigned int x3; int x4; int x5; int x6; float x7; float x8; struct MotionTruthParameters {} *x9; struct MultiphoneDbmParameters {} *x10; struct PedometryCompassMotionParameters {} *x11; struct InjectionParameters {} *x12; struct PdrParameters {} *x13; struct WifiParameters {} *x14; float x15; int x16; struct BodyFixedDetectorParameters {} *x17; double x18; float x19; float x20; float x21; float x22; struct BeaconParameters {} *x23; float x24; int x25; double x26; struct WallBehaviorParamaters {} *x27; struct DynamicUniverseParameters {} *x28; struct AltitudeParameters {} *x29; double x30; bool x31; bool x32; bool x33; float x34; struct GpsFusionGlobalParameters {} *x35; struct DeadReckoningParameters {} *x36; struct ClientCoarseIndoorParameters {} *x37; struct GpsFusionGlobalParameters {} *x38; float x39; float x40; struct PedometryCompassMotionParameters {} *x41; float x42; float x43; int x44; unsigned int x45[2]; }*)arg1 fromDict:(id)arg2;
+ (bool)generateAvlTileFromJSON:(id)arg1 atPath:(id)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)_openTileFileForIncrementalIO;
- (struct AvailabilityTile { struct shared_ptr<proto::availability::AvailabilityTile> { struct AvailabilityTile {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; bool x2; struct unique_ptr<wireless_diagnostics::google::protobuf::io::FileInputStream, std::__1::default_delete<wireless_diagnostics::google::protobuf::io::FileInputStream> > { struct __compressed_pair<wireless_diagnostics::google::protobuf::io::FileInputStream *, std::__1::default_delete<wireless_diagnostics::google::protobuf::io::FileInputStream> > { struct FileInputStream {} *x_1_2_1; } x_3_1_1; } x3; struct path { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_6_1; unsigned long long x_1_6_2; unsigned long long x_1_6_3; } x_1_5_1; struct __short { BOOL x_2_6_1[23]; struct { unsigned char x_2_7_1; } x_2_6_2; } x_1_5_2; struct __raw { unsigned long long x_3_6_1[3]; } x_1_5_3; } x_1_4_1; } x_1_3_1; } x_1_2_1; } x_4_1_1; } x4; }*)getAvlTile;
- (bool)getNextVenueBoundsIncrementally:(struct VenueBounds { int (**x1)(); struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_2_1_1; int x_2_1_2; int x_2_1_3; int x_2_1_4; } x2; struct RepeatedPtrField<proto::availability::LatLonPolygon> { void **x_3_1_1; int x_3_1_2; int x_3_1_3; int x_3_1_4; } x3; struct TileDownloadConfiguration {} *x4; struct LatLonPolygon {} *x5; struct RepeatedField<unsigned int> { unsigned int *x_6_1_1; int x_6_1_2; int x_6_1_3; } x6; int x7; int x8; unsigned int x9[1]; }*)arg1;
- (id)init;
- (id)initWithEmptyTile;
- (id)initWithTilePathIncrementalIO:(id)arg1;
- (int)numTotalExpectedExteriorsInVenues;
- (int)numVenuesExpected;
- (id)path;
- (bool)tileIsOpenForIncrementalIO;
- (unsigned long long)venuesCount;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
