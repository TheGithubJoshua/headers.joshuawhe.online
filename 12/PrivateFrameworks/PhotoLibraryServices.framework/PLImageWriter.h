<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PLImageWriter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoLibraryServices.framework/PLImageWriter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices (1.0)
 */

@interface PLImageWriter : NSObject <PLPhotoBakedThumbnailsDelegate> {
    bool  _databaseIsCorrupt;
    NSMutableArray * _highPriorityJobs;
    unsigned long long  _highPrioritySequentialJobCount;
    NSMutableDictionary * _inProgressAvalancheFds;
    int  _jobQueueAvailabilityToken;
    NSRecursiveLock * _jobsLock;
    NSMutableArray * _lowPriorityJobs;
    PLXPCTransaction * _transaction;
    NSCountedSet * _unfinishedHighPriorityJobs;
    int  _unfinishedJobCount;
    int  _unfinishedJobsRequiringIndicatorCount;
    NSCountedSet * _unfinishedLowPriorityJobs;
    bool  _writerThreadRunning;
}

+ (id)_assetAdjustmentsFromCameraAdjustmentsFileAtPath:(id)arg1 exportProperties:(id)arg2;
+ (id)_assetAdjustmentsFromCameraFilters:(id)arg1 portraitMetadata:(id)arg2 exportProperties:(id)arg3;
+ (id)_assetAdjustmentsFromPhotoEditModel:(id)arg1 exportProperties:(id)arg2;
+ (id)_assetAdjustmentsWithEffectFilterName:(id)arg1 exportProperties:(id)arg2;
+ (id)_assetUUIDFromIncomingFilename:(id)arg1;
+ (bool)_hasPrimaryAssetAndAdjustmentsFilesWithType:(short)arg1 inIncomingFilenames:(id)arg2 forAssetUUID:(id)arg3;
+ (id)_pathsByAssetUUIDFromIncomingCrashRecoveryPaths:(id)arg1;
+ (bool)_requiresIndicatorFileForJobType:(id)arg1;
+ (void)decorateThumbnail:(id)arg1 inContext:(struct CGContext { }*)arg2;
+ (void)decorateThumbnailInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 size:(struct CGSize { double x1; double x2; })arg2 duration:(id)arg3 inContext:(struct CGContext { }*)arg4 format:(id)arg5;
+ (bool)setAdjustmentsForNewPhoto:(id)arg1 withEffectFilterName:(id)arg2 adjustmentDataPath:(id)arg3 filteredImagePath:(id)arg4 isSubstandardRender:(bool)arg5;
+ (id)sharedWriter;

- (void)_decorateThumbnail:(id)arg1;
- (void)_decrementJobCount:(id)arg1;
- (void)_enablePhotoStreamJob:(id)arg1 completion:(id /* block */)arg2;
- (id)_fetchPhotoAssetForMediaGroupUUID:(id)arg1 moc:(id)arg2;
- (id)_fetchPhotoAssetForUUID:(id)arg1 moc:(id)arg2;
- (void)_handleAvalancheCrashRecovery:(id)arg1;
- (void)_handleCameraAdjustments:(id)arg1 fullsizeRenders:(id)arg2;
- (void)_handlePhotoIrisCrashRecoveryForPhotoIndicatorFiles:(id)arg1;
- (void)_handlePhotoIrisCrashRecoveryForVideos:(id)arg1;
- (void)_incrementJobCount:(id)arg1;
- (bool)_isHighPriorityJob:(id)arg1;
- (id)_pathForFilteredPreviewWithBaseName:(id)arg1 imageData:(id)arg2 orImage:(id)arg3;
- (id)_pathForNewAssetWithPath:(id)arg1 withExtension:(id)arg2;
- (void)_photoIrisPairingDidSucceed:(bool)arg1 fileIndicatorPath:(id)arg2 photoAsset:(id)arg3 photoLibrary:(id)arg4;
- (void)_postJobQueueNotificationIsAvailable:(bool)arg1;
- (void)_processAutodeleteEmptyAlbumJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processAvalancheJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processAvalanchesValidationJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processBatchImageJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processCrashRecoveryJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processDaemonJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processDeletePhotoStreamAssetsWithUUIDs:(id)arg1 withReason:(id)arg2 completion:(id /* block */)arg3;
- (void)_processDeletePhotoStreamDataJob:(id)arg1 withReason:(id)arg2 completion:(id /* block */)arg3;
- (void)_processImageJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processImportImageJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processIngestedSyncedAssetJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processJob:(id)arg1;
- (void)_processReenqueueAssetUUIDsToPhotoStreamJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processSavePhotoStreamImageToCameraRollJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processSyncedVideoSaveJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processVideoJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processVideoSaveJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_processXPCDaemonJob:(id)arg1 completion:(id /* block */)arg2;
- (void)_removeInProgressExtendedAttributesForFileAtURL:(id)arg1;
- (void)_removeTransientKeys:(id)arg1;
- (void)_setAdjustmentsForNewVideo:(id)arg1 withAdjustmentsDictionary:(id)arg2;
- (bool)_transferVideoFromIncomingPath:(id)arg1 toDestinationPath:(id)arg2 shouldRemoveIncoming:(bool*)arg3 error:(id*)arg4;
- (void)_writerThread;
- (id)cameraAssetPathForNewAssetWithExtension:(id)arg1;
- (bool)canEnqueueJob:(id)arg1;
- (void)dealloc;
- (void)decorateThumbnail:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (bool)enqueueJob:(id)arg1;
- (id)init;
- (id)pathForNewAssetPathAtAlbumDirectoryPath:(id)arg1 assetType:(unsigned int)arg2 extension:(id)arg3;
- (id)pathForNewAssetWithDirectoryPath:(id)arg1 fileName:(id)arg2 extension:(id)arg3;
- (void)setAvalancheInProgress:(bool)arg1 uuid:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
