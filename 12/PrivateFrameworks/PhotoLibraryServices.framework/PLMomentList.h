<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PLMomentList.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoLibraryServices.framework/PLMomentList.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices (1.0)
 */

@interface PLMomentList : PLManagedObject <PLAssetContainerList, PLMomentListData> {
    PLMomentNameInfo * _cachedNameInfo;
    bool  _loadedNameInfo;
}

@property (nonatomic, readonly, retain) NSArray *batchedMoments;
@property (nonatomic, readonly) unsigned long long containersCount;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSDate *endDate;
@property (nonatomic) short generationType;
@property (nonatomic) short granularityLevel;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, retain) NSArray *localizedLocationNames;
@property (nonatomic, readonly, retain) NSString *localizedTitle;
@property (nonatomic, retain) NSOrderedSet *moments;
@property (nonatomic, retain) NSOrderedSet *momentsForMegaMoment;
@property (nonatomic, retain) NSOrderedSet *momentsForYear;
@property (nonatomic, retain) NSDate *representativeDate;
@property (nonatomic, retain) NSData *reverseLocationData;
@property (nonatomic) bool reverseLocationDataContainsLocation;
@property (nonatomic) bool reverseLocationDataIsValid;
@property (nonatomic) int sortIndex;
@property (nonatomic, retain) NSDate *startDate;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *title;
@property (nonatomic, retain) NSString *title2;
@property (nonatomic, retain) NSString *title3;
@property (nonatomic, readonly, retain) NSObject<NSCopying> *uniqueObjectID;
@property (nonatomic, retain) NSArray *userTitles;
@property (nonatomic, retain) NSString *uuid;

+ (id)allMomentListsInLibrary:(id)arg1 forLevel:(short)arg2;
+ (id)allMomentListsInLibrary:(id)arg1 forLevel:(short)arg2 returnsObjectsAsFaults:(bool)arg3;
+ (id)allMomentListsInManagedObjectContext:(id)arg1 forLevel:(short)arg2 error:(id*)arg3;
+ (id)allMomentListsInManagedObjectContext:(id)arg1 forLevel:(short)arg2 error:(id*)arg3 returnsObjectsAsFaults:(bool)arg4;
+ (id)allMomentListsRequiringAnalysisInManagedObjectContext:(id)arg1 error:(id*)arg2;
+ (id)allMomentListsRequiringAnalysisInManagedObjectContext:(id)arg1 forLevel:(short)arg2 error:(id*)arg3;
+ (id)descriptionForGranularityLevel:(short)arg1;
+ (id)entityInManagedObjectContext:(id)arg1;
+ (id)entityName;
+ (id)findOrCreateMegaMomentListForLeftoverMomentsInMonth:(long long)arg1 inYear:(long long)arg2 withDay:(long long)arg3 inManagedObjectContext:(id)arg4;
+ (id)findOrCreateYearMomentListForYear:(long long)arg1 inManagedObjectContext:(id)arg2;

- (id)_batchedMomentsPredicate;
- (id)_typeDescription;
- (void)_updateCachedNameInfoIfNeeded;
- (bool)_validateForInsertOrUpdate:(id*)arg1;
- (void)addMoment:(id)arg1 forMegaMomentAtIndex:(unsigned long long)arg2;
- (void)addMoment:(id)arg1 forMomentListLevel:(short)arg2;
- (void)addMomentToFront:(id)arg1;
- (void)addMoments:(id)arg1;
- (void)addMoments:(id)arg1 forMomentListLevel:(short)arg2;
- (void)addMomentsForMegaMoment:(id)arg1;
- (void)addMomentsForMegaMomentObject:(id)arg1;
- (void)addMomentsForYear:(id)arg1;
- (void)addMomentsForYearObject:(id)arg1;
- (void)awakeFromInsert;
- (id)batchedMoments;
- (bool)canEditContainers;
- (id)containers;
- (unsigned long long)containersCount;
- (id)containersRelationshipName;
- (void)dealloc;
- (void)delete;
- (id)diagnosticInformation;
- (void)didTurnIntoFault;
- (void)insertMomentsForMegaMoment:(id)arg1 atIndexes:(id)arg2;
- (void)insertMomentsForYear:(id)arg1 atIndexes:(id)arg2;
- (void)insertObject:(id)arg1 inMomentsForMegaMomentAtIndex:(unsigned long long)arg2;
- (void)insertObject:(id)arg1 inMomentsForYearAtIndex:(unsigned long long)arg2;
- (void)invalidateNameInfo;
- (bool)isEmpty;
- (bool)isMeaningful;
- (id)localizedLocationNames;
- (id)localizedTitle;
- (id)momentListDebugDescription;
- (id)moments;
- (id)pl_debugDescription;
- (void)removeMoment:(id)arg1 forMomentListLevel:(short)arg2;
- (void)removeMoments:(id)arg1;
- (void)removeMoments:(id)arg1 forMomentListLevel:(short)arg2;
- (void)removeMomentsForMegaMoment:(id)arg1;
- (void)removeMomentsForMegaMomentAtIndexes:(id)arg1;
- (void)removeMomentsForMegaMomentObject:(id)arg1;
- (void)removeMomentsForYear:(id)arg1;
- (void)removeMomentsForYearAtIndexes:(id)arg1;
- (void)removeMomentsForYearObject:(id)arg1;
- (void)removeObjectFromMomentsForMegaMomentAtIndex:(unsigned long long)arg1;
- (void)removeObjectFromMomentsForYearAtIndex:(unsigned long long)arg1;
- (void)replaceMomentsForMegaMomentAtIndexes:(id)arg1 withMomentsForMegaMoment:(id)arg2;
- (void)replaceMomentsForYearAtIndexes:(id)arg1 withMomentsForYear:(id)arg2;
- (void)replaceObjectInMomentsForMegaMomentAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)replaceObjectInMomentsForYearAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)setMoments:(id)arg1;
- (void)setUserTitles:(id)arg1;
- (bool)supportsDiagnosticInformation;
- (id)uniqueObjectID;
- (id)userTitles;
- (bool)validateForInsert:(id*)arg1;
- (bool)validateForUpdate:(id*)arg1;
- (void)willSave;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
