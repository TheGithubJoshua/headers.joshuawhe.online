<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PLPerson.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoLibraryServices.framework/PLPerson.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices (1.0)
 */

@interface PLPerson : PLManagedObject <PLCloudDeletable, PLSyncablePerson>

@property (nonatomic, retain) PLDetectedFaceGroup *associatedFaceGroup;
@property (nonatomic) short cloudDeleteState;
@property (readonly) long long cloudDeletionType;
@property (nonatomic) short cloudLocalState;
@property (readonly, copy) NSString *cloudUUIDForDeletion;
@property (nonatomic) int cloudVerifiedType;
@property (nonatomic, retain) NSSet *clusterRejectedFaces;
@property (nonatomic, retain) NSDictionary *contactMatchingDictionary;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSSet *detectedFaces;
@property (nonatomic, retain) NSString *displayName;
@property (nonatomic) int effectiveVerifiedType;
@property (nonatomic, readonly) int faceCount;
@property (nonatomic, retain) NSSet *faceCrops;
@property (nonatomic, retain) NSString *fullName;
@property (nonatomic, readonly) bool graphVerified;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inPersonNamingModel;
@property (nonatomic, retain) NSSet *invalidMergeCandidates;
@property (nonatomic, readonly) bool isTombstone;
@property (nonatomic, retain) PLDetectedFace *keyFace;
@property (nonatomic, readonly) bool keyFaceIsPicked;
@property (nonatomic) short keyFacePickSource;
@property (nonatomic, readonly, retain) id localID;
@property (nonatomic) unsigned int manualOrder;
@property (nonatomic, retain) NSSet *mergeCandidates;
@property (nonatomic, retain) NSSet *mergeSourcePersons;
@property (nonatomic, retain) PLPerson *mergeTargetPerson;
@property (nonatomic, retain) NSSet *personReferences;
@property (nonatomic, retain) NSString *personUUID;
@property (nonatomic, retain) NSString *personUri;
@property (nonatomic, retain) NSSet *rejectedFaces;
@property (nonatomic, retain) NSSet *rejectedFacesNeedingFaceCrops;
@property (readonly) Class superclass;
@property (nonatomic) int type;
@property (nonatomic, readonly) bool userVerified;
@property (nonatomic) int verifiedType;

+ (id)_batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 error:(id*)arg4;
+ (id)_predicateForSupportedVerifiedTypesForUpload;
+ (id)_stringFromContact:(id)arg1 preferGivenName:(bool)arg2;
+ (id)allPersonsInManagedObjectContext:(id)arg1;
+ (void)batchFetchAssociatedPersonByFaceGroupUUIDWithFaceGroupUUIDs:(id)arg1 predicate:(id)arg2 completion:(id /* block */)arg3;
+ (void)batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 completion:(id /* block */)arg4;
+ (void)batchFetchPersonsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 completion:(id /* block */)arg3;
+ (long long)cloudDeletionTypeForTombstone:(id)arg1;
+ (id)cloudUUIDKeyForDeletion;
+ (void)createAssociatedPersonForFaceGroup:(id)arg1;
+ (void)createAssociatedPersonForFaceGroup:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)displayNameFromContact:(id)arg1;
+ (id)entityInManagedObjectContext:(id)arg1;
+ (id)entityName;
+ (void)enumerateAssetUUIDsForSearchIndexingWithPersonUUID:(id)arg1 managedObjectContext:(id)arg2 assetUUIDHandler:(id /* block */)arg3;
+ (id)fetchFinalMergeTargetPersonForPersonWithUUID:(id)arg1 context:(id)arg2;
+ (id)fetchPersonCountByAssetUUIDForAssetUUIDs:(id)arg1 predicate:(id)arg2 error:(id*)arg3;
+ (id)fullNameFromContact:(id)arg1;
+ (id)insertIntoManagedObjectContext:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;
+ (id)insertIntoPhotoLibrary:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;
+ (id)listOfSyncedProperties;
+ (bool)person:(id)arg1 isBetterMergeTargetThanPerson:(id)arg2;
+ (id)personWithUUID:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)personsMatchingPredicate:(id)arg1 fetchLimit:(unsigned long long)arg2 sortDescriptors:(id)arg3 relationshipKeyPathsForPrefetching:(id)arg4 inManagedObjectContext:(id)arg5;
+ (id)personsToPrefetchInManagedObjectContext:(id)arg1;
+ (id)personsToUploadInManagedObjectContext:(id)arg1 limit:(long long)arg2;
+ (id)personsWithPersonUri:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)personsWithUUIDs:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)predicateForPersistence;
+ (id)predicateForPersonsNeedingFaceCropGenerationForFaceObjectID:(id)arg1;
+ (id)predicateForVisibleKeyFace;
+ (bool)resetAllWithError:(id*)arg1;
+ (void)resetCloudStateInPhotoLibrary:(id)arg1 hardReset:(bool)arg2;

- (void)_basicMergePersons:(id)arg1;
- (id)_nameRelatedMetadataKeys;
- (void)_refreshRelationshipForKey:(id)arg1;
- (void)basicMergePersons:(id)arg1;
- (long long)cloudDeletionType;
- (id)cloudUUIDForDeletion;
- (id)cplFullRecord;
- (id)cplPersonChange;
- (id)debugLogDescription;
- (bool)dedupeGraphPersons:(id)arg1 error:(id*)arg2;
- (int)effectiveVerifiedType;
- (id)faceGroupDescription;
- (id)finalMergeTargetPerson;
- (bool)graphVerified;
- (bool)isSyncableChange;
- (bool)isTombstone;
- (bool)isValidForPersistence;
- (bool)keyFaceIsPicked;
- (id)localID;
- (void)mergePersons:(id)arg1 withOptimalState:(id)arg2;
- (id)momentShare;
- (id)mutableFaceCrops;
- (id)mutableFaces;
- (id)mutableInvalidMergeCandidates;
- (id)mutableMergeCandidates;
- (id)mutableRejectedFaces;
- (id)mutableRejectedFacesNeedingFaceCrops;
- (void)persistMetadataToFileSystem;
- (id)pickKeyFaceOptimalStateForContactDedupeWithPersons:(id)arg1;
- (id)pickOptimalStateForUserInitiatedMergeWithPersons:(id)arg1 nominalTarget:(id)arg2;
- (void)prepareForDeletion;
- (void)prepareForUserInitiatedMergeWithPersons:(id)arg1;
- (void)refereshMergeCandidates;
- (void)refreshFaceCrops;
- (void)refreshFaces;
- (void)refreshInvalidMergeCandidates;
- (void)refreshRejectedFaces;
- (void)rejectFaceIfPossible:(id)arg1 shouldCreateFaceCrop:(bool)arg2;
- (void)resetAllFacesToDefault;
- (id)reverseOrderedMergeTargetPersons;
- (void)setCPLSyncedMergeTarget:(id)arg1;
- (void)setEffectiveVerifiedType:(int)arg1;
- (void)setKeyFace:(id)arg1 pickSource:(short)arg2;
- (void)setKeyFaceToPicked;
- (bool)shouldIndexForSearch;
- (bool)supportsCloudUpload;
- (id)syncDescription;
- (bool)userVerified;
- (void)willSave;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
