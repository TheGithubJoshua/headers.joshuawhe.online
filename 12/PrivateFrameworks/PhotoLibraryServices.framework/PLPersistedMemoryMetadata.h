<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PLPersistedMemoryMetadata.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoLibraryServices.framework/PLPersistedMemoryMetadata.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices (1.0)
 */

@interface PLPersistedMemoryMetadata : NSObject {
    NSData * _assetListPredicate;
    NSData * _blacklistedFeature;
    short  _category;
    NSDate * _creationDate;
    NSSet * _curatedAssetUUIDs;
    NSSet * _extendedCuratedAssetUUIDs;
    bool  _favorite;
    NSString * _keyAssetUUID;
    PLMemory * _memory;
    NSURL * _metadataURL;
    NSDictionary * _movieAssetState;
    NSSet * _movieCuratedAssetUUIDs;
    NSData * _movieData;
    short  _notificationState;
    bool  _pending;
    long long  _pendingPlayCount;
    long long  _pendingShareCount;
    long long  _pendingViewCount;
    NSData * _photosGraphData;
    long long  _photosGraphVersion;
    long long  _playCount;
    bool  _rejected;
    NSSet * _representativeAssetUUIDs;
    double  _score;
    long long  _shareCount;
    short  _subcategory;
    NSString * _subtitle;
    NSString * _title;
    bool  _userCreated;
    NSString * _uuid;
    long long  _version;
    long long  _viewCount;
}

@property (nonatomic, retain) NSData *assetListPredicate;
@property (nonatomic, retain) NSData *blacklistedFeature;
@property (nonatomic) short category;
@property (nonatomic, retain) NSDate *creationDate;
@property (nonatomic, retain) NSSet *curatedAssetUUIDs;
@property (nonatomic, retain) NSSet *extendedCuratedAssetUUIDs;
@property (getter=isFavorite, nonatomic) bool favorite;
@property (nonatomic, retain) NSString *keyAssetUUID;
@property (nonatomic, retain) PLMemory *memory;
@property (nonatomic, retain) NSURL *metadataURL;
@property (nonatomic, retain) NSDictionary *movieAssetState;
@property (nonatomic, retain) NSSet *movieCuratedAssetUUIDs;
@property (nonatomic, retain) NSData *movieData;
@property (nonatomic) short notificationState;
@property (getter=isPending, nonatomic) bool pending;
@property (nonatomic) long long pendingPlayCount;
@property (nonatomic) long long pendingShareCount;
@property (nonatomic) long long pendingViewCount;
@property (nonatomic, retain) NSData *photosGraphData;
@property (nonatomic) long long photosGraphVersion;
@property (nonatomic) long long playCount;
@property (getter=isRejected, nonatomic) bool rejected;
@property (nonatomic, retain) NSSet *representativeAssetUUIDs;
@property (nonatomic) double score;
@property (nonatomic) long long shareCount;
@property (nonatomic) short subcategory;
@property (nonatomic, retain) NSString *subtitle;
@property (nonatomic, retain) NSString *title;
@property (getter=isUserCreated, nonatomic) bool userCreated;
@property (nonatomic, retain) NSString *uuid;
@property (nonatomic) long long version;
@property (nonatomic) long long viewCount;

+ (bool)isValidPath:(id)arg1;

- (void).cxx_destruct;
- (id)_metadataData;
- (bool)_readMetadata;
- (void)_saveMetadata;
- (bool)_updateAssetsInMemory:(id)arg1 relationshipName:(id)arg2 persistedAssetUUIDs:(id)arg3 includePendingChanges:(bool)arg4;
- (id)assetListPredicate;
- (id)blacklistedFeature;
- (short)category;
- (id)creationDate;
- (id)curatedAssetUUIDs;
- (id)description;
- (id)extendedCuratedAssetUUIDs;
- (bool)hasAllAssetsAvailableInManagedObjectContext:(id)arg1 includePendingAssetChanges:(bool)arg2;
- (id)init;
- (id)initWithPLMemory:(id)arg1;
- (id)initWithPLMemory:(id)arg1 metadataURL:(id)arg2;
- (id)initWithPersistedDataAtURL:(id)arg1;
- (id)insertMemoryFromDataInManagedObjectContext:(id)arg1;
- (bool)isFavorite;
- (bool)isObsolete;
- (bool)isPending;
- (bool)isRejected;
- (bool)isUserCreated;
- (id)keyAssetUUID;
- (id)memory;
- (id)metadataURL;
- (id)movieAssetState;
- (id)movieCuratedAssetUUIDs;
- (id)movieData;
- (short)notificationState;
- (long long)pendingPlayCount;
- (long long)pendingShareCount;
- (long long)pendingViewCount;
- (id)photosGraphData;
- (long long)photosGraphVersion;
- (long long)playCount;
- (void)removePersistedData;
- (id)representativeAssetUUIDs;
- (double)score;
- (void)setAssetListPredicate:(id)arg1;
- (void)setBlacklistedFeature:(id)arg1;
- (void)setCategory:(short)arg1;
- (void)setCreationDate:(id)arg1;
- (void)setCuratedAssetUUIDs:(id)arg1;
- (void)setExtendedCuratedAssetUUIDs:(id)arg1;
- (void)setFavorite:(bool)arg1;
- (void)setKeyAssetUUID:(id)arg1;
- (void)setMemory:(id)arg1;
- (void)setMetadataURL:(id)arg1;
- (void)setMovieAssetState:(id)arg1;
- (void)setMovieCuratedAssetUUIDs:(id)arg1;
- (void)setMovieData:(id)arg1;
- (void)setNotificationState:(short)arg1;
- (void)setPending:(bool)arg1;
- (void)setPendingPlayCount:(long long)arg1;
- (void)setPendingShareCount:(long long)arg1;
- (void)setPendingViewCount:(long long)arg1;
- (void)setPhotosGraphData:(id)arg1;
- (void)setPhotosGraphVersion:(long long)arg1;
- (void)setPlayCount:(long long)arg1;
- (void)setRejected:(bool)arg1;
- (void)setRepresentativeAssetUUIDs:(id)arg1;
- (void)setScore:(double)arg1;
- (void)setShareCount:(long long)arg1;
- (void)setSubcategory:(short)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setUserCreated:(bool)arg1;
- (void)setUuid:(id)arg1;
- (void)setVersion:(long long)arg1;
- (void)setViewCount:(long long)arg1;
- (long long)shareCount;
- (short)subcategory;
- (id)subtitle;
- (id)title;
- (bool)updateAssetsInMemory:(id)arg1 includePendingAssetChanges:(bool)arg2;
- (id)uuid;
- (long long)version;
- (long long)viewCount;
- (void)writePersistedData;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
