<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PLManagedAlbum.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoLibraryServices.framework/PLManagedAlbum.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices (1.0)
 */

@interface PLManagedAlbum : _PLManagedAlbum <PLCloudDeletable, PLSearchableAssetCollection, PLUserEditableAlbumProtocol> {
    bool  _albumShouldBeAutomaticallyDeleted;
    bool  _needsPersistenceUpdate;
}

@property (nonatomic) bool albumShouldBeAutomaticallyDeleted;
@property (nonatomic, readonly) unsigned long long approximateCount;
@property (nonatomic, retain) NSSet *assetOrders;
@property (nonatomic, retain) NSOrderedSet *assets;
@property (nonatomic, readonly) unsigned long long assetsCount;
@property (nonatomic) unsigned long long batchSize;
@property (nonatomic, readonly) bool canContributeToCloudSharedAlbum;
@property (nonatomic, readonly) bool canShowAvalancheStacks;
@property (nonatomic, readonly) bool canShowComments;
@property (nonatomic) short cloudDeleteState;
@property (readonly) long long cloudDeletionType;
@property (readonly, copy) NSString *cloudUUIDForDeletion;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, retain) NSDate *endDate;
@property (nonatomic, readonly, retain) NSURL *groupURL;
@property (nonatomic) bool hasUnseenContentBoolValue;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *importSessionID;
@property (nonatomic, readonly) bool isCameraAlbum;
@property (nonatomic, readonly) bool isCloudSharedAlbum;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) bool isFamilyCloudSharedAlbum;
@property (nonatomic, readonly) bool isFolder;
@property (nonatomic, readonly) bool isInTrash;
@property (nonatomic, readonly) bool isLibrary;
@property (nonatomic, readonly) bool isMultipleContributorCloudSharedAlbum;
@property (nonatomic, readonly) bool isOwnedCloudSharedAlbum;
@property (nonatomic, readonly) bool isPanoramasAlbum;
@property (nonatomic, readonly) bool isPendingPhotoStreamAlbum;
@property (nonatomic, readonly) bool isPhotoStreamAlbum;
@property (nonatomic, readonly) bool isRecentlyAddedAlbum;
@property (nonatomic, readonly) bool isStandInAlbum;
@property (nonatomic, readonly) bool isUserLibraryAlbum;
@property (nonatomic, retain) PLManagedAsset *keyAsset;
@property (nonatomic, readonly) NSDate *keyAssetCreationDate;
@property (nonatomic, readonly) NSString *keyAssetUUID;
@property (nonatomic, readonly, retain) NSNumber *kind;
@property (nonatomic, readonly) int kindValue;
@property (nonatomic, readonly, copy) NSArray *localizedLocationNames;
@property (nonatomic, readonly, copy) NSString *localizedTitle;
@property (nonatomic, readonly, retain) NSMutableOrderedSet *mutableAssets;
@property (nonatomic, readonly, copy) NSString *name;
@property (nonatomic) bool needsPersistenceUpdate;
@property (nonatomic, readonly) unsigned long long numberOfAssets;
@property (nonatomic) int pendingItemsCount;
@property (nonatomic) int pendingItemsType;
@property (nonatomic, readonly) unsigned long long photosCount;
@property (nonatomic, readonly, retain) UIImage *posterImage;
@property (nonatomic, readonly) NSDate *searchableEndDate;
@property (nonatomic, readonly) NSDate *searchableStartDate;
@property (nonatomic, retain) PLManagedAsset *secondaryKeyAsset;
@property (nonatomic, readonly) bool shouldDeleteWhenEmpty;
@property (nonatomic, retain) NSDictionary *slideshowSettings;
@property (nonatomic, readonly, copy) id /* block */ sortingComparator;
@property (nonatomic, readonly, retain) NSDate *startDate;
@property (nonatomic, readonly) NSString *subtitle;
@property (readonly) Class superclass;
@property (nonatomic, retain) PLManagedAsset *tertiaryKeyAsset;
@property (nonatomic, readonly) NSString *title;
@property (nonatomic, readonly, retain) NSString *title;
@property (nonatomic, readonly, retain) NSMutableOrderedSet *userEditableAssets;
@property (nonatomic, readonly, retain) NSString *uuid;
@property (nonatomic, readonly) unsigned long long videosCount;

+ (id)albumSupportsAssetOrderKeysPredicate;
+ (id)assetOrderByAbumUUIDs;
+ (id)baseSearchIndexPredicate;
+ (id)childKeyForOrdering;
+ (void)clearAssetOrderByAbumUUIDs;
+ (long long)cloudDeletionTypeForTombstone:(id)arg1;
+ (id)cloudUUIDKeyForDeletion;
+ (id)keyPathsForValuesAffectingApproximateCount;
+ (id)keyPathsForValuesAffectingPhotosCount;
+ (id)keyPathsForValuesAffectingVideosCount;
+ (id)pathToAssetAlbumOrderStructure;
+ (id)searchIndexAllowedPredicate;
+ (id)validKindsForPersistence;

- (unsigned long long)_albumStandInCount;
- (id)_assetOrderByAssetUUID;
- (id)_expectedKeyAssets:(id)arg1;
- (id)_keysToBeObserved;
- (id)_orderComparisonValueForAsset:(id)arg1 iTunesLookupOrder:(id)arg2;
- (bool)_shouldCopyAssetToCameraRollBeforeAdding:(id)arg1;
- (void)_updateKeyAssetsIfNeeded:(id)arg1;
- (void)addAssetUsingiTunesAlbumOrder:(id)arg1;
- (bool)albumShouldBeAutomaticallyDeleted;
- (unsigned long long)approximateCount;
- (id)assetUUIDsForPreviewWithCount:(unsigned long long)arg1;
- (unsigned long long)assetsCount;
- (bool)canPerformEditOperation:(unsigned long long)arg1;
- (id)childKeyForOrdering;
- (long long)cloudDeletionType;
- (id)cloudUUIDForDeletion;
- (unsigned long long)countOfInternalUserEditableAssets;
- (id)descriptionOfAssetOrderValues;
- (void)didSave;
- (id)filteredIndexesForPredicate:(id)arg1;
- (void)getInternalUserEditableAssets:(id*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)indexInInternalUserEditableAssetsOfObject:(id)arg1;
- (void)insertAssets:(id)arg1 atIndexes:(id)arg2;
- (void)insertInternalUserEditableAssets:(id)arg1 atIndexes:(id)arg2;
- (void)insertInternalUserEditableAssets:(id)arg1 atIndexes:(id)arg2 trimmedVideoPathInfo:(id)arg3 commentText:(id)arg4;
- (id)internalUserEditableAssetsAtIndexes:(id)arg1;
- (bool)isEmpty;
- (bool)isValidKindForPersistence;
- (id)keyAssetCreationDate;
- (id)keyAssetUUID;
- (id)mutableAssets;
- (bool)needsPersistenceUpdate;
- (unsigned long long)numberOfAssets;
- (id)objectInInternalUserEditableAssetsAtIndex:(unsigned long long)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)persistMetadataToFileSystem;
- (unsigned long long)photosCount;
- (void)prepareForDeletion;
- (void)recalculateCachedCounts;
- (void)refreshAssets;
- (void)registerForChanges;
- (void)removeAssetsAtIndexes:(id)arg1;
- (void)removeInternalUserEditableAssetsAtIndexes:(id)arg1;
- (void)removePersistedFileSystemData;
- (void)replaceAssetsAtIndexes:(id)arg1 withAssets:(id)arg2;
- (unsigned long long)searchIndexCategory;
- (id)searchIndexContents;
- (id)searchableEndDate;
- (id)searchableStartDate;
- (void)setAlbumShouldBeAutomaticallyDeleted:(bool)arg1;
- (void)setNeedsPersistenceUpdate:(bool)arg1;
- (void)sortAssetsUsingiTunesAlbumOrder;
- (id)subtitle;
- (bool)supportsAssetOrderKeys;
- (void)unregisterForChanges;
- (void)updateKeyAssetsIfNeeded;
- (id)userEditableAssets;
- (unsigned long long)videosCount;
- (void)willSave;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
