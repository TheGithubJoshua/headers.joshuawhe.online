<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PLFilteredAlbum.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoLibraryServices.framework/PLFilteredAlbum.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices (1.0)
 */

@interface PLFilteredAlbum : NSObject <PLCloudSharedAlbumProtocol, PLIndexMapperDataSource, PLIndexMappingCache, PLUserEditableAlbumProtocol> {
    struct NSObject { Class x1; } * _backingAlbum;
    bool  _backingAlbumSupportsCloudShared;
    bool  _backingAlbumSupportsEdits;
    NSArray * _filterParameters;
    NSMutableIndexSet * _filteredIndexes;
    PLIndexMapper * _indexMapper;
    NSMutableOrderedSet * _weak_assets;
    int  filter;
    bool  isObservingContextChanges;
    NSPredicate * predicate;
}

@property (nonatomic) NSMutableOrderedSet *_assets;
@property (nonatomic, readonly) unsigned long long approximateCount;
@property (nonatomic, readonly, retain) NSOrderedSet *assets;
@property (nonatomic, readonly) unsigned long long assetsCount;
@property (nonatomic, retain) NSObject<PLAlbumProtocol> *backingAlbum;
@property (nonatomic) unsigned long long batchSize;
@property (nonatomic, readonly, copy) <NSObject><NSCopying> *cachedIndexMapState;
@property (nonatomic, readonly) bool canContributeToCloudSharedAlbum;
@property (nonatomic, readonly) bool canShowAvalancheStacks;
@property (nonatomic, readonly) bool canShowComments;
@property (nonatomic, readonly, retain) NSOrderedSet *cloudAlbumSubscriberRecords;
@property (nonatomic, retain) NSDate *cloudCreationDate;
@property (nonatomic, readonly, retain) NSDate *cloudFirstRecentBatchDate;
@property (nonatomic, retain) NSString *cloudGUID;
@property (nonatomic, retain) NSDate *cloudLastContributionDate;
@property (nonatomic, retain) NSDate *cloudLastInterestingChangeDate;
@property (nonatomic, retain) NSDictionary *cloudMetadata;
@property (nonatomic, retain) NSNumber *cloudMultipleContributorsEnabled;
@property (nonatomic, retain) NSNumber *cloudMultipleContributorsEnabledLocal;
@property (nonatomic) bool cloudNotificationsEnabled;
@property (nonatomic, retain) NSString *cloudOwnerEmail;
@property (nonatomic, retain) NSString *cloudOwnerFirstName;
@property (nonatomic, retain) NSString *cloudOwnerFullName;
@property (nonatomic, retain) NSString *cloudOwnerHashedPersonID;
@property (nonatomic) bool cloudOwnerIsWhitelisted;
@property (nonatomic, retain) NSString *cloudOwnerLastName;
@property (nonatomic, retain) NSString *cloudPersonID;
@property (nonatomic, retain) NSNumber *cloudPublicURLEnabled;
@property (nonatomic, retain) NSNumber *cloudPublicURLEnabledLocal;
@property (readonly) int cloudRelationshipStateLocalValue;
@property (readonly) int cloudRelationshipStateValue;
@property (nonatomic, retain) NSDate *cloudSubscriptionDate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, retain) NSDate *endDate;
@property (nonatomic) int filter;
@property (nonatomic, readonly, retain) NSArray *filterParameters;
@property (nonatomic, readonly, copy) NSIndexSet *filteredIndexes;
@property (nonatomic, readonly, retain) NSURL *groupURL;
@property (nonatomic) bool hasUnseenContentBoolValue;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *importSessionID;
@property (nonatomic, readonly, retain) PLIndexMapper *indexMapper;
@property (nonatomic, retain) NSOrderedSet *invitationRecords;
@property (nonatomic, readonly) bool isCameraAlbum;
@property (nonatomic, readonly) bool isCloudSharedAlbum;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) bool isFamilyCloudSharedAlbum;
@property (nonatomic, readonly) bool isFolder;
@property (nonatomic, readonly) bool isInTrash;
@property (nonatomic, readonly) bool isLibrary;
@property (nonatomic, readonly) bool isMultipleContributorCloudSharedAlbum;
@property (nonatomic) bool isObservingContextChanges;
@property (nonatomic, readonly) bool isOwnedCloudSharedAlbum;
@property (nonatomic, readonly) bool isPanoramasAlbum;
@property (nonatomic, readonly) bool isPendingPhotoStreamAlbum;
@property (nonatomic, readonly) bool isPhotoStreamAlbum;
@property (nonatomic, readonly) bool isRecentlyAddedAlbum;
@property (nonatomic, readonly) bool isStandInAlbum;
@property (nonatomic, readonly) bool isUserLibraryAlbum;
@property (nonatomic, retain) PLManagedAsset *keyAsset;
@property (nonatomic, readonly, retain) NSNumber *kind;
@property (nonatomic, readonly) int kindValue;
@property (nonatomic, readonly, copy) NSArray *localizedLocationNames;
@property (nonatomic, readonly, retain) NSString *localizedSharedWithLabel;
@property (nonatomic, readonly, copy) NSString *localizedTitle;
@property (nonatomic, readonly, retain) NSMutableOrderedSet *mutableAssets;
@property (nonatomic, readonly, copy) NSString *name;
@property (nonatomic) int pendingItemsCount;
@property (nonatomic) int pendingItemsType;
@property (nonatomic, readonly) unsigned long long photosCount;
@property (nonatomic, readonly, retain) UIImage *posterImage;
@property (nonatomic, retain) NSPredicate *predicate;
@property (nonatomic, retain) NSString *publicURL;
@property (nonatomic, retain) PLManagedAsset *secondaryKeyAsset;
@property (nonatomic, readonly) bool shouldDeleteWhenEmpty;
@property (nonatomic, retain) NSDictionary *slideshowSettings;
@property (nonatomic, readonly, copy) id /* block */ sortingComparator;
@property (nonatomic, readonly, retain) NSDate *startDate;
@property (readonly) Class superclass;
@property (nonatomic, retain) PLManagedAsset *tertiaryKeyAsset;
@property (nonatomic, readonly, retain) NSString *title;
@property (nonatomic, retain) NSNumber *unseenAssetsCount;
@property unsigned long long unseenAssetsCountIntegerValue;
@property (nonatomic, readonly, retain) NSMutableOrderedSet *userEditableAssets;
@property (nonatomic, readonly, retain) NSString *uuid;
@property (nonatomic, readonly) unsigned long long videosCount;

+ (id)descriptionForAlbumFilter:(int)arg1 parameters:(id)arg2;
+ (struct NSObject { Class x1; }*)filteredAlbum:(struct NSObject { Class x1; }*)arg1 filter:(int)arg2;
+ (struct NSObject { Class x1; }*)filteredAlbum:(struct NSObject { Class x1; }*)arg1 filter:(int)arg2 parameters:(id)arg3;
+ (struct NSObject { Class x1; }*)filteredAlbum:(struct NSObject { Class x1; }*)arg1 intersectFilter:(int)arg2;
+ (struct NSObject { Class x1; }*)filteredAlbum:(struct NSObject { Class x1; }*)arg1 predicate:(id)arg2;
+ (id)filteredIndexesInAlbum:(struct NSObject { Class x1; }*)arg1 predicate:(id)arg2;
+ (id)predicateForAlbumFilter:(int)arg1 parameters:(id)arg2;
+ (struct NSObject { Class x1; }*)unfilteredAlbum:(struct NSObject { Class x1; }*)arg1;

- (id)_assets;
- (id)_cloudSharedBackingAlbum;
- (void)_commonInitWithBackingAlbum:(struct NSObject { Class x1; }*)arg1 predicate:(id)arg2;
- (id)_editableBackingAlbum;
- (unsigned long long)approximateCount;
- (id)assets;
- (unsigned long long)assetsCount;
- (struct NSObject { Class x1; }*)backingAlbum;
- (void)backingContextDidChange:(id)arg1;
- (void)batchFetchAssets:(id)arg1;
- (id)cachedIndexMapState;
- (bool)canContributeToCloudSharedAlbum;
- (bool)canPerformEditOperation:(unsigned long long)arg1;
- (bool)canShowAvalancheStacks;
- (bool)canShowComments;
- (id)cloudAlbumSubscriberRecords;
- (id)cloudCreationDate;
- (id)cloudFirstRecentBatchDate;
- (id)cloudGUID;
- (id)cloudLastContributionDate;
- (id)cloudLastInterestingChangeDate;
- (id)cloudMetadata;
- (id)cloudMultipleContributorsEnabled;
- (id)cloudMultipleContributorsEnabledLocal;
- (bool)cloudNotificationsEnabled;
- (id)cloudOwnerDisplayNameIncludingEmail:(bool)arg1 allowsEmail:(bool)arg2;
- (id)cloudOwnerEmail;
- (id)cloudOwnerFirstName;
- (id)cloudOwnerFullName;
- (id)cloudOwnerHashedPersonID;
- (bool)cloudOwnerIsWhitelisted;
- (id)cloudOwnerLastName;
- (id)cloudPersonID;
- (id)cloudPublicURLEnabled;
- (id)cloudPublicURLEnabledLocal;
- (int)cloudRelationshipStateLocalValue;
- (int)cloudRelationshipStateValue;
- (id)cloudSubscriptionDate;
- (unsigned long long)count;
- (unsigned long long)countOfFilteredAssets;
- (id)currentStateForChange;
- (void)dealloc;
- (Class)derivedChangeNotificationClass;
- (id)description;
- (int)filter;
- (id)filterParameters;
- (id)filteredAssetsAtIndexes:(id)arg1;
- (id)filteredIndexes;
- (void)getFilteredAssets:(id*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)getUnseenStartMarkerIndex:(unsigned long long*)arg1 count:(unsigned long long*)arg2 showsProgress:(bool*)arg3;
- (id)groupURL;
- (bool)hasUnseenContentBoolValue;
- (id)importSessionID;
- (unsigned long long)indexInFilteredAssetsOfObject:(id)arg1;
- (id)indexMapper;
- (id)initWithBackingAlbum:(struct NSObject { Class x1; }*)arg1 filter:(int)arg2 parameters:(id)arg3;
- (id)initWithBackingAlbum:(struct NSObject { Class x1; }*)arg1 predicate:(id)arg2;
- (void)insertFilteredAssets:(id)arg1 atIndexes:(id)arg2;
- (void)insertInternalUserEditableAssets:(id)arg1 atIndexes:(id)arg2 trimmedVideoPathInfo:(id)arg3 commentText:(id)arg4;
- (void)insertObject:(id)arg1 inFilteredAssetsAtIndex:(unsigned long long)arg2;
- (id)invitationRecords;
- (bool)isCameraAlbum;
- (bool)isCloudSharedAlbum;
- (bool)isEmpty;
- (bool)isFamilyCloudSharedAlbum;
- (bool)isFolder;
- (bool)isInTrash;
- (bool)isLibrary;
- (bool)isMultipleContributorCloudSharedAlbum;
- (bool)isObservingContextChanges;
- (bool)isOwnedCloudSharedAlbum;
- (bool)isPanoramasAlbum;
- (bool)isPendingPhotoStreamAlbum;
- (bool)isPhotoStreamAlbum;
- (bool)isRecentlyAddedAlbum;
- (bool)isStandInAlbum;
- (bool)isUserLibraryAlbum;
- (id)keyAsset;
- (id)kind;
- (int)kindValue;
- (id)localizedLocationNames;
- (id)localizedSharedByLabelAllowsEmail:(bool)arg1;
- (id)localizedSharedWithLabel;
- (id)localizedTitle;
- (bool)mappedDataSourceChanged:(id)arg1 remoteNotificationData:(id)arg2;
- (id)mutableAssets;
- (id)name;
- (id)objectInFilteredAssetsAtIndex:(unsigned long long)arg1;
- (int)pendingItemsCount;
- (int)pendingItemsType;
- (unsigned long long)photosCount;
- (id)posterImage;
- (id)predicate;
- (id)publicURL;
- (void)reducePendingItemsCountBy:(unsigned long long)arg1;
- (void)removeFilteredAssetsAtIndexes:(id)arg1;
- (void)removeObjectFromFilteredAssetsAtIndex:(unsigned long long)arg1;
- (void)replaceFilteredAssetsAtIndexes:(id)arg1 withFilteredValues:(id)arg2;
- (void)replaceObjectInFilteredAssetsAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (id)secondaryKeyAsset;
- (void)setBackingAlbum:(struct NSObject { Class x1; }*)arg1;
- (void)setCloudCreationDate:(id)arg1;
- (void)setCloudGUID:(id)arg1;
- (void)setCloudLastContributionDate:(id)arg1;
- (void)setCloudLastInterestingChangeDate:(id)arg1;
- (void)setCloudMetadata:(id)arg1;
- (void)setCloudMultipleContributorsEnabled:(id)arg1;
- (void)setCloudMultipleContributorsEnabledLocal:(id)arg1;
- (void)setCloudNotificationsEnabled:(bool)arg1;
- (void)setCloudOwnerEmail:(id)arg1;
- (void)setCloudOwnerFirstName:(id)arg1;
- (void)setCloudOwnerFullName:(id)arg1;
- (void)setCloudOwnerHashedPersonID:(id)arg1;
- (void)setCloudOwnerIsWhitelisted:(bool)arg1;
- (void)setCloudOwnerLastName:(id)arg1;
- (void)setCloudPersonID:(id)arg1;
- (void)setCloudPublicURLEnabled:(id)arg1;
- (void)setCloudPublicURLEnabledLocal:(id)arg1;
- (void)setCloudSubscriptionDate:(id)arg1;
- (void)setFilter:(int)arg1;
- (void)setHasUnseenContentBoolValue:(bool)arg1;
- (void)setImportSessionID:(id)arg1;
- (void)setInvitationRecords:(id)arg1;
- (void)setIsObservingContextChanges:(bool)arg1;
- (void)setKeyAsset:(id)arg1;
- (void)setPendingItemsCount:(int)arg1;
- (void)setPendingItemsType:(int)arg1;
- (void)setPredicate:(id)arg1;
- (void)setPublicURL:(id)arg1;
- (void)setSecondaryKeyAsset:(id)arg1;
- (void)setSlideshowSettings:(id)arg1;
- (void)setTertiaryKeyAsset:(id)arg1;
- (void)setUnseenAssetsCount:(id)arg1;
- (void)setUnseenAssetsCountIntegerValue:(unsigned long long)arg1;
- (void)set_assets:(id)arg1;
- (bool)shouldDeleteWhenEmpty;
- (bool)shouldIncludeObjectAtIndex:(unsigned long long)arg1;
- (id)slideshowSettings;
- (id /* block */)sortingComparator;
- (id)tertiaryKeyAsset;
- (id)title;
- (id)unseenAssetsCount;
- (unsigned long long)unseenAssetsCountIntegerValue;
- (void)updateCloudLastContributionDateWithDate:(id)arg1;
- (void)updateCloudLastInterestingChangeDateWithDate:(id)arg1;
- (void)userDeleteSubscriberRecord:(id)arg1;
- (id)userEditableAssets;
- (id)uuid;
- (unsigned long long)videosCount;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
