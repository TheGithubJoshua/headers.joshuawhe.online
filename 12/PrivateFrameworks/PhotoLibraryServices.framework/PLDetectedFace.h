<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PLDetectedFace.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoLibraryServices.framework/PLDetectedFace.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices (1.0)
 */

@interface PLDetectedFace : PLManagedObject <PLSyncableDetectedFace>

@property (nonatomic, copy) NSDate *adjustmentVersion;
@property (nonatomic, retain) NSDate *adjustmentVersion;
@property (nonatomic) unsigned short ageType;
@property (nonatomic, retain) PLManagedAsset *asset;
@property (nonatomic, readonly) bool assetVisible;
@property (nonatomic) unsigned short baldType;
@property (nonatomic) double blurScore;
@property (nonatomic) double centerX;
@property (nonatomic) double centerY;
@property (nonatomic) short cloudLocalState;
@property (nonatomic) int cloudNameSource;
@property (nonatomic, retain) NSSet *clusterRejectedPersons;
@property (nonatomic) int clusterSequenceNumber;
@property (nonatomic) short confirmedFaceCropGenerationState;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) int effectiveNameSource;
@property (nonatomic) unsigned short eyeMakeupType;
@property (nonatomic) unsigned short eyesState;
@property (nonatomic) int faceAlgorithmVersion;
@property (nonatomic, retain) PLFaceCrop *faceCrop;
@property (nonatomic, retain) PLDetectedFaceGroup *faceGroup;
@property (nonatomic, retain) PLDetectedFaceGroup *faceGroupBeingKeyFace;
@property (nonatomic, retain) PLDetectedFaceprint *faceprint;
@property (nonatomic) unsigned short facialHairType;
@property (nonatomic) unsigned short genderType;
@property (nonatomic) unsigned short glassesType;
@property (nonatomic, retain) NSString *groupingIdentifier;
@property (nonatomic) unsigned short hairColorType;
@property (nonatomic) bool hasSmile;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidden;
@property (nonatomic) bool isInTrash;
@property (nonatomic) bool isLeftEyeClosed;
@property (nonatomic) bool isRightEyeClosed;
@property (nonatomic, readonly) bool isTrainingFace;
@property (nonatomic) double leftEyeX;
@property (nonatomic) double leftEyeY;
@property (nonatomic) unsigned short lipMakeupType;
@property (nonatomic, readonly, retain) id localID;
@property (nonatomic) bool manual;
@property (nonatomic, retain) NSString *masterIdentifier;
@property (nonatomic) double mouthX;
@property (nonatomic) double mouthY;
@property (nonatomic) int nameSource;
@property (nonatomic, retain) <PLSyncablePerson> *person;
@property (nonatomic, retain) PLPerson *person;
@property (nonatomic, retain) <PLSyncablePerson> *personBeingKeyFace;
@property (nonatomic, retain) PLPerson *personBeingKeyFace;
@property (nonatomic) double poseYaw;
@property (nonatomic) int qualityMeasure;
@property (nonatomic, retain) NSSet *rejectedPersons;
@property (nonatomic, retain) NSSet *rejectedPersonsNeedingFaceCrops;
@property (nonatomic) double rightEyeX;
@property (nonatomic) double rightEyeY;
@property (nonatomic) double size;
@property (nonatomic) unsigned short smileType;
@property (nonatomic) long long sourceHeight;
@property (nonatomic) long long sourceWidth;
@property (readonly) Class superclass;
@property (nonatomic) int trainingType;
@property (nonatomic, retain) NSString *uuid;

+ (id)_facesMatchingPredicate:(id)arg1 limit:(unsigned long long)arg2 inPhotoLibrary:(id)arg3;
+ (id)_syncableFacesToUploadInitiallyPredicate;
+ (void)batchFetchDetectedFacesByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 completion:(id /* block */)arg3;
+ (void)batchFetchKeyFacesByPersonUUIDWithPersonUUIDs:(id)arg1 completion:(id /* block */)arg2;
+ (unsigned long long)countOfHiddenFacesOnAssetsWithObjectIDs:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)detectedFaceWithUUID:(id)arg1 inManagedObjectContext:(id)arg2;
+ (id)entityInManagedObjectContext:(id)arg1;
+ (id)entityName;
+ (void)enumerateAssetUUIDsForSearchIndexingWithDetctedFaceUUIDs:(id)arg1 managedObjectContext:(id)arg2 assetUUIDHandler:(id /* block */)arg3;
+ (bool)facesSyncFeatureEnabled;
+ (id)findExistingFaceMatchingDimension:(id)arg1 inFaces:(id)arg2 ignoreSourceAssetDimensions:(bool)arg3;
+ (id)insertInManagedObjectContext:(id)arg1;
+ (id)predicateForArchival;
+ (id)predicatesForFacesNeedingFaceCropGeneration;
+ (id)predicatesToExcludeNonVisibleFaces;
+ (long long)resetAssetForAllSyncableFacesInManagedObjectContext:(id)arg1 error:(id*)arg2;
+ (void)resetCloudStateInPhotoLibrary:(id)arg1 hardReset:(bool)arg2;
+ (id)syncableFacesPredicate;
+ (id)syncableFacesToUploadInitiallyInLibrary:(id)arg1 limit:(unsigned long long)arg2;

- (void)_touchPersonForPersistenceIfNeeded;
- (void)_updateFaceGroupIfNeeded;
- (void)_verifyAssetRelationship;
- (void)addClusterRejectedPerson:(id)arg1;
- (void)addRejectedPerson:(id)arg1;
- (void)addRejectedPersonNeedingFaceCrops:(id)arg1;
- (void)awakeFromInsert;
- (id)cplFullRecord;
- (id)debugLogDescription;
- (void)delete;
- (int)effectiveNameSource;
- (bool)isSyncableChange;
- (bool)isTrainingFace;
- (id)localID;
- (id)momentShare;
- (id)namingDescription;
- (double)photosFaceRepresentationBlurScore;
- (double)photosFaceRepresentationCenterX;
- (double)photosFaceRepresentationCenterY;
- (long long)photosFaceRepresentationClusterSequenceNumber;
- (bool)photosFaceRepresentationHasSmile;
- (bool)photosFaceRepresentationIsLeftEyeClosed;
- (bool)photosFaceRepresentationIsRightEyeClosed;
- (id)photosFaceRepresentationLocalIdentifier;
- (long long)photosFaceRepresentationQualityMeasure;
- (double)photosFaceRepresentationSize;
- (long long)photosFaceRepresentationSourceHeight;
- (long long)photosFaceRepresentationSourceWidth;
- (void)removeFaceprint;
- (void)setEffectiveNameSource:(int)arg1;
- (bool)supportsCloudUpload;
- (id)syncDescription;
- (void)willSave;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
