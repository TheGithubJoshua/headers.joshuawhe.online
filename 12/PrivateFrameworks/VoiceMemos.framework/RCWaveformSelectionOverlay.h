<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCWaveformSelectionOverlay.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCWaveformSelectionOverlay.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCWaveformSelectionOverlay : UIView {
    RCUIConfiguration * _UIConfiguration;
    double  _assetCurrentTime;
    double  _assetDuration;
    double  _axSegment;
    bool  _barMatchesKnobRadius;
    bool  _beginTimeLayerOffsetForThumb;
    RCOverlayBarLayer * _beginTimeSelection;
    RCOverlayBarLayer * _compactCurrentTimeBar;
    CALayer * _corneredDimOverlayContainer;
    RCOverlayBarLayer * _currentTimeBar;
    <RCWaveformSelectionOverlayDelegate> * _delegate;
    bool  _editingEnabled;
    bool  _enablePlayBarTracking;
    bool  _enableTimeTrackingInView;
    bool  _endTimeLayerOffsetForThumb;
    RCOverlayBarLayer * _endTimeSelection;
    bool  _insertMode;
    bool  _isOverView;
    bool  _isRecording;
    double  _knobWidthMultiplier;
    CALayer * _leftWaveformDimOverlay;
    CALayer * _leftWaveformLightOverlay;
    CALayer * _middleSelectionOverlay;
    bool  _overviewTrimHandleStyle;
    bool  _playBarOnly;
    double  _playWidthMultiplier;
    double  _requestedAnimatedLayoutDuration;
    bool  _requestedNonAnimatedLayout;
    UIButton * _resetRegionButton;
    CALayer * _rightWaveformDimOverlay;
    CALayer * _rightWaveformLightOverlay;
    struct { 
        double beginTime; 
        double endTime; 
    }  _selectedTimeRange;
    double  _selectedTimeRangeMaximumDuration;
    double  _selectedTimeRangeMinimumDuration;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _selectionAreaInsets;
    UIView * _selectionBackgroundView;
    long long  _selectionMode;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _selectionRect;
    bool  _sublayersCreated;
    double  _trackedAssetCurrentTime;
    NSMutableDictionary * _trackedTouches;
}

@property (nonatomic, copy) RCUIConfiguration *UIConfiguration;
@property (nonatomic) double assetCurrentTime;
@property (nonatomic) double assetDuration;
@property (nonatomic) double axSegment;
@property (nonatomic) bool barMatchesKnobRadius;
@property (nonatomic, readonly) long long beginTimeIndicatorSelectionAffinity;
@property (nonatomic, readonly) double currentTimeIndicatorCoordinate;
@property (nonatomic) <RCWaveformSelectionOverlayDelegate> *delegate;
@property (getter=isEditingEnabled, nonatomic) bool editingEnabled;
@property (nonatomic) bool enablePlayBarTracking;
@property (nonatomic) bool enableTimeTrackingInView;
@property (nonatomic, readonly) long long endTimeIndicatorSelectionAffinity;
@property (nonatomic) bool insertMode;
@property (nonatomic) bool isOverView;
@property (nonatomic) bool isRecording;
@property (nonatomic) double knobWidthMultiplier;
@property (nonatomic) bool overviewTrimHandleStyle;
@property (nonatomic) bool playBarOnly;
@property (nonatomic) double playWidthMultiplier;
@property (nonatomic, retain) UIButton *resetRegionButton;
@property (nonatomic, readonly) struct { double x1; double x2; } selectedTimeRange;
@property (nonatomic) double selectedTimeRangeMaximumDuration;
@property (nonatomic) double selectedTimeRangeMinimumDuration;
@property (nonatomic) UIView *selectionBackgroundView;
@property (nonatomic) long long selectionMode;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } selectionRect;
@property (nonatomic) double trackedAssetCurrentTime;

- (void).cxx_destruct;
- (id)UIConfiguration;
- (bool)__shouldDisplayBeginTimeText;
- (bool)__shouldDisplayEndTimeText;
- (id)_accessibilityHitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)_accessibilityIncreaseValue:(bool)arg1 bySegment:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alternateBeginTimeRectWithSizedTextLayer:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_alternateEndTimeRectWithSizedTextLayer:(id)arg1;
- (bool)_axIsShowingSelectionBars;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_beginTimeRectWithSizedTextLayer:(id)arg1 isOffsetForThumb:(bool*)arg2;
- (bool)_beginTrackingSelectionBar:(id)arg1 selectionBarType:(long long)arg2 withTouch:(id)arg3;
- (void)_clearStaleTouches;
- (void)_clearSublayers;
- (void)_createSublayersIfNeeded;
- (bool)_drawsSelectionForWidth:(double)arg1;
- (double)_effectiveSelectionWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_endTimeRectWithSizedTextLayer:(id)arg1 isOffsetForThumb:(bool*)arg2;
- (id)_hitSelectionForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_middleTimeRectWithFont:(id)arg1;
- (double)_minimumOverlaySelectionWidth;
- (double)_minimumOverlayWidth;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionBoundsIncludingKnobs;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionBoundsIncludingKnobsUsingMultiplier:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionHighlightBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionRectForSelectedTimeRange:(struct { double x1; double x2; })arg1;
- (void)_setWantsAnimatedLayoutDuration:(double)arg1;
- (bool)_shouldDisplayBeginTimeText;
- (bool)_shouldDisplayEndTimeText;
- (bool)_shouldOffsetSelectionBarTypeForThumb:(long long)arg1;
- (id)_touchTrackingInfoForSelectionBarTye:(long long)arg1;
- (void)_updateSelectedTimeRangeForTrackedTouchesAnimated:(bool)arg1;
- (double)_xAdjustmentAmount;
- (void)accessibilityDecrement;
- (id)accessibilityElements;
- (void)accessibilityIncrement;
- (bool)accessibilityScroll:(long long)arg1;
- (unsigned long long)accessibilityTraits;
- (id)accessibilityValue;
- (double)assetCurrentTime;
- (double)assetDuration;
- (double)axSegment;
- (bool)barMatchesKnobRadius;
- (long long)beginTimeIndicatorSelectionAffinity;
- (double)currentTimeIndicatorCoordinate;
- (id)delegate;
- (bool)enablePlayBarTracking;
- (bool)enableTimeTrackingInView;
- (long long)endTimeIndicatorSelectionAffinity;
- (id)initWithCoder:(id)arg1;
- (id)initWithDelegate:(id)arg1 height:(double)arg2 selectionAreaInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)insertMode;
- (bool)isAccessibilityElement;
- (bool)isEditingEnabled;
- (bool)isOverView;
- (bool)isRecording;
- (double)knobWidthMultiplier;
- (void)layoutSubviews;
- (bool)overviewTrimHandleStyle;
- (bool)playBarOnly;
- (double)playWidthMultiplier;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)reloadSelectionOffsets;
- (id)resetRegionButton;
- (void)resetSelectionButtonPressed;
- (struct { double x1; double x2; })selectedTimeRange;
- (double)selectedTimeRangeMaximumDuration;
- (double)selectedTimeRangeMinimumDuration;
- (id)selectionBackgroundView;
- (long long)selectionMode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRect;
- (void)setAssetCurrentTime:(double)arg1;
- (void)setAssetDuration:(double)arg1;
- (void)setAxSegment:(double)arg1;
- (void)setBarMatchesKnobRadius:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditingEnabled:(bool)arg1;
- (void)setEnablePlayBarTracking:(bool)arg1;
- (void)setEnableTimeTrackingInView:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInsertMode:(bool)arg1;
- (void)setIsOverView:(bool)arg1;
- (void)setIsRecording:(bool)arg1;
- (void)setKnobWidthMultiplier:(double)arg1;
- (void)setOverviewTrimHandleStyle:(bool)arg1;
- (void)setPlayBarOnly:(bool)arg1;
- (void)setPlayWidthMultiplier:(double)arg1;
- (void)setResetRegionButton:(id)arg1;
- (void)setSelectedTimeRange:(struct { double x1; double x2; })arg1;
- (void)setSelectedTimeRange:(struct { double x1; double x2; })arg1 withAnimationDuration:(double)arg2;
- (void)setSelectedTimeRangeMaximumDuration:(double)arg1;
- (void)setSelectedTimeRangeMinimumDuration:(double)arg1;
- (void)setSelectionBackgroundView:(id)arg1;
- (void)setSelectionMode:(long long)arg1;
- (void)setSelectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTrackedAssetCurrentTime:(double)arg1;
- (void)setUIConfiguration:(id)arg1;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (double)trackedAssetCurrentTime;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
