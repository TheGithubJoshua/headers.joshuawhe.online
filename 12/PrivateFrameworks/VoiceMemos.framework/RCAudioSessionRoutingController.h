<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCAudioSessionRoutingController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCAudioSessionRoutingController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCAudioSessionRoutingController : NSObject <RCAudioSessionRoutingMPAVRoutingControllerDelegate> {
    NSArray * _cachedPickableOutputRoutes;
    AVAudioSessionPortDescription * _cachedPickedInputRoutePortDescription;
    MPAVRoute * _cachedPickedOutputRoute;
    bool  _canReportStateUsingCachedPickedOutputRoute;
    bool  _enableProximityMonitorIfAppropriateForInputRoute;
    bool  _enableProximityMonitorIfAppropriateForOutputRoute;
    bool  _hasYetToPickARouteAndHeadphonesArePresent;
    RCAudioSessionRoutingMPAVRoutingController * _mpRoutingController;
    bool  _shouldInitializeRouteUsingUserDefaults;
    bool  _useVoiceMemoSettings;
    struct __CFArray { } * _weakSessionRoutingAssertions;
}

@property (nonatomic, readonly) NSString *activeInputRouteName;
@property (nonatomic, readonly) unsigned long long availableRoutesMask;
@property (nonatomic, readonly) NSArray *cachedPickableOutputRoutes;
@property (nonatomic, readonly) AVAudioSessionPortDescription *cachedPickedInputRoutePortDescription;
@property (nonatomic, readonly) MPAVRoute *cachedPickedOutputRoute;
@property (nonatomic, readonly) bool canReportStateUsingCachedPickedOutputRoute;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enableProximityMonitorIfAppropriateForInputRoute;
@property (nonatomic) bool enableProximityMonitorIfAppropriateForOutputRoute;
@property (nonatomic, readonly) bool hasYetToPickARouteAndHeadphonesArePresent;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isRoutingToPhoneCall;
@property (nonatomic, readonly) RCAudioSessionRoutingMPAVRoutingController *mpRoutingController;
@property (nonatomic, readonly) NSString *selectedRouteName;
@property (nonatomic, readonly) long long selectedRouteType;
@property (nonatomic, readonly) bool shouldInitializeRouteUsingUserDefaults;
@property (readonly) Class superclass;
@property (nonatomic) bool useVoiceMemoSettings;
@property (nonatomic, readonly) struct __CFArray { }*weakSessionRoutingAssertions;

+ (id)sharedRouteController;

- (void).cxx_destruct;
- (unsigned long long)_RCAudioRouteMaskForRoutes:(id)arg1;
- (id)_activeAudioRouteUsageStatisticName;
- (id)_activeAudioSessionRoutingAssertion;
- (unsigned long long)_availableRoutesMask;
- (bool)_isRoutingToAirPlayDestination;
- (bool)_routeDefaultBoolForKey:(id)arg1 nonVoiceMemoAppValue:(bool)arg2;
- (void)_setShouldRouteToSpeakerUserDefaultValue:(bool)arg1;
- (void)_setWeakSessionRoutingAssertions:(struct __CFArray { }*)arg1;
- (bool)_speakerIsUserDefaultRoute;
- (bool)_speakerRouteIsPickedOrPreferred;
- (void)_updateProximitySetting;
- (void)_updateRoutingControllerAvailableRoutes;
- (void)_updateSpeakerRouteDefault;
- (bool)_wirelessRouteIsPickedOrPreferred;
- (id)activeInputRouteName;
- (void)addRouteAssertion:(id)arg1;
- (unsigned long long)availableRoutesMask;
- (id)cachedPickableOutputRoutes;
- (id)cachedPickedInputRoutePortDescription;
- (id)cachedPickedOutputRoute;
- (bool)canReportStateUsingCachedPickedOutputRoute;
- (void)dealloc;
- (void)disableDetailedDiscoveryMode;
- (void)enableDetailedDiscoveryMode;
- (bool)enableProximityMonitorIfAppropriateForInputRoute;
- (bool)enableProximityMonitorIfAppropriateForOutputRoute;
- (void)fetchActiveInputRouteWithCompletionHandler:(id /* block */)arg1;
- (bool)hasYetToPickARouteAndHeadphonesArePresent;
- (id)init;
- (bool)isRoutingToPhoneCall;
- (id)mpRoutingController;
- (void)removeRouteAssertion:(id)arg1;
- (void)routingController:(id)arg1 didChangeAirPlayMirrorDestinationToActive:(bool)arg2;
- (void)routingController:(id)arg1 pickedRouteDidChange:(id)arg2;
- (void)routingController:(id)arg1 willChangeCategoryActiveStateToActive:(bool)arg2;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (id)selectedRouteName;
- (long long)selectedRouteType;
- (void)setEnableProximityMonitorIfAppropriateForInputRoute:(bool)arg1;
- (void)setEnableProximityMonitorIfAppropriateForOutputRoute:(bool)arg1;
- (void)setUseVoiceMemoSettings:(bool)arg1;
- (bool)shouldInitializeRouteUsingUserDefaults;
- (void)showAvailableRoutesInWindow:(id)arg1;
- (bool)useVoiceMemoSettings;
- (struct __CFArray { }*)weakSessionRoutingAssertions;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
