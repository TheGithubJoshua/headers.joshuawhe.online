<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCAVWaveformViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCAVWaveformViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCAVWaveformViewController : UIViewController <RCCaptureSessionObserver, RCPreviewControllerObserver, RCWaveformViewDelegate> {
    RCAVState * _AVState;
    RCCompositionController * _activeCaptureCompositionController;
    RCCaptureSession * _activeCaptureSession;
    RCPreviewController * _activePreviewController;
    bool  _autocenterCurrentTimeIndicatorAlways;
    NSTimer * _autoscrollPlaybackTimer;
    long long  _batchUpdatingDisplayableTimesCount;
    bool  _clipsTimeMarkersToDuration;
    double  _currentTime;
    bool  _currentTimeTracksCapturedEndPoint;
    double  _defaultVisibleDuration;
    <RCAVWaveformViewControllerDelegate> * _delegate;
    bool  _didJumpTime;
    double  _duration;
    struct { 
        double beginTime; 
        double endTime; 
    }  _highlightTimeRange;
    bool  _isEditMode;
    bool  _isOverview;
    RCLayoutMetrics * _layoutMetrics;
    RCHitTestForwardingView * _leftForwardingView;
    double  _maximumSelectionDuration;
    bool  _needsUpdateDisplayableTime;
    double  _nextPreviewStartTime;
    RCHitTestForwardingView * _rightForwardingView;
    bool  _selectionOverlayVisible;
    bool  _showingSelectionOverlayEnabled;
    bool  _userInteractionEnabled;
    RCWaveformDataSource * _waveformDataSource;
    RCWaveformViewController * _waveformViewController;
}

@property (nonatomic, readonly) RCAVState *AVState;
@property (nonatomic, retain) RCCaptureSession *activeCaptureSession;
@property (nonatomic, retain) RCPreviewController *activePreviewController;
@property (nonatomic) bool autocenterCurrentTimeIndicatorAlways;
@property (nonatomic) bool clipsTimeMarkersToDuration;
@property (nonatomic) double currentTime;
@property (nonatomic, readonly) double currentTimeIndicatorCoordinate;
@property (nonatomic) bool currentTimeTracksCapturedEndPoint;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <RCAVWaveformViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) double duration;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct { double x1; double x2; } highlightTimeRange;
@property (nonatomic) bool isEditMode;
@property (nonatomic) bool isOverview;
@property (nonatomic, retain) RCLayoutMetrics *layoutMetrics;
@property (nonatomic) double maximumSelectionDuration;
@property (nonatomic, readonly) double nextPreviewStartTime;
@property (nonatomic, readonly) struct { double x1; double x2; } nextPreviewTimeRange;
@property (nonatomic, readonly) struct { double x1; double x2; } selectedTimeRange;
@property (getter=isSelectionOverlayVisible, nonatomic, readonly) bool selectionOverlayVisible;
@property (readonly) Class superclass;
@property (getter=isUserInteractionEnabled, nonatomic) bool userInteractionEnabled;
@property (nonatomic) struct { double x1; double x2; } visibleTimeRange;
@property (nonatomic, readonly) double waveformBottomLineInset;
@property (nonatomic, retain) RCWaveformDataSource *waveformDataSource;
@property (nonatomic, retain) RCWaveformViewController *waveformViewController;

- (void).cxx_destruct;
- (id)AVState;
- (void)_beginShowingSelectionOverlayAndEnableInsertMode:(bool)arg1;
- (unsigned long long)_currentTimeDisplayOptions;
- (unsigned long long)_currentTimeDisplayOptionsIgnoringSelectionOverlayState:(bool)arg1;
- (void)_didUpdateDisplayableTime;
- (void)_endShowingSelectionOverlayWithCompletionBlock:(id /* block */)arg1;
- (id)_selectionOverlay;
- (void)_setSelectionOverlayEnabled:(bool)arg1;
- (void)_setWaveformDataSource:(id)arg1 initialTime:(double)arg2;
- (void)_updateCurrentTimeForCapturedInputAtTime:(double)arg1;
- (void)_updateDisplayableTimesWithBlock:(id /* block */)arg1;
- (void)_updateInterfaceForAVState;
- (id)activeCaptureSession;
- (id)activePreviewController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })annotatedWaveformRectForLayoutBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)autocenterCurrentTimeIndicatorAlways;
- (void)captureSession:(id)arg1 destinationFragmentDurationDidChangeToDuration:(double)arg2 captureTime:(double)arg3 usingDisplayLinkSmoothing:(bool)arg4;
- (void)captureSession:(id)arg1 didFinishWithSuccess:(bool)arg2;
- (void)captureSession:(id)arg1 rateDidChangeToRate:(float)arg2;
- (bool)clipsTimeMarkersToDuration;
- (double)currentTime;
- (double)currentTimeIndicatorCoordinate;
- (bool)currentTimeTracksCapturedEndPoint;
- (void)dealloc;
- (id)delegate;
- (double)duration;
- (void)hidSelectionOverlayWithCompletionBlock:(id /* block */)arg1;
- (struct { double x1; double x2; })highlightTimeRange;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithWaveformDataSource:(id)arg1 isOverview:(bool)arg2 isLockScreen:(bool)arg3 delegate:(id)arg4;
- (bool)isEditMode;
- (bool)isOverview;
- (bool)isSelectionOverlayVisible;
- (bool)isUserInteractionEnabled;
- (id)layoutMetrics;
- (double)maximumSelectionDuration;
- (double)nextPreviewStartTime;
- (struct { double x1; double x2; })nextPreviewTimeRange;
- (void)previewController:(id)arg1 playbackDidBeginWithRate:(float)arg2;
- (void)previewController:(id)arg1 playbackDidStopPlayingWithError:(id)arg2;
- (void)previewController:(id)arg1 playbackTimeDidJumpWithPreviousTime:(double)arg2;
- (void)previewController:(id)arg1 playbackTimeDidUpdateToCurrentTime:(double)arg2;
- (void)previewController:(id)arg1 playbackTimeDidUpdateToCurrentTime:(double)arg2 didJumpTime:(bool)arg3;
- (void)reloadWaveformDataSource:(id)arg1 initialTime:(double)arg2;
- (void)resetSelectedTimeRangeToFullDuration;
- (struct { double x1; double x2; })selectedTimeRange;
- (void)setAVState:(id)arg1;
- (void)setActiveCaptureSession:(id)arg1;
- (void)setActivePreviewController:(id)arg1;
- (void)setAutocenterCurrentTimeIndicatorAlways:(bool)arg1;
- (void)setClipsTimeMarkersToDuration:(bool)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setCurrentTimeTracksCapturedEndPoint:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDuration:(double)arg1;
- (struct { double x1; double x2; })setHighlightTimeRange;
- (void)setHighlightTimeRange:(struct { double x1; double x2; })arg1;
- (void)setIsEditMode:(bool)arg1;
- (void)setIsOverview:(bool)arg1;
- (void)setLayoutMetrics:(id)arg1;
- (void)setMaximumSelectionDuration:(double)arg1;
- (void)setSelectedTimeRange:(struct { double x1; double x2; })arg1 animationDuration:(double)arg2;
- (void)setUserInteractionEnabled:(bool)arg1;
- (void)setVisibleTimeRange:(struct { double x1; double x2; })arg1;
- (void)setWaveformDataSource:(id)arg1;
- (void)setWaveformViewController:(id)arg1;
- (void)showSelectionOverlayAndEnableInsertMode:(bool)arg1;
- (void)triggerWaveformAutoScroll:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (struct { double x1; double x2; })visibleTimeRange;
- (double)waveformBottomLineInset;
- (id)waveformDataSource;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })waveformRectForLayoutBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)waveformViewController;
- (void)waveformViewController:(id)arg1 didChangeToSelectedTimeRange:(struct { double x1; double x2; })arg2;
- (void)waveformViewController:(id)arg1 didScrubToTime:(double)arg2 finished:(bool)arg3;
- (void)waveformViewControllerDidEndEditingSelectedTimeRange:(id)arg1;
- (void)waveformViewControllerWillBeginEditingSelectedTimeRange:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
