<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCComposition.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCComposition.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCComposition : NSObject <NSCopying, NSMutableCopying, RCDictionaryPListRepresentationCoding> {
    double  _cachedComposedAVURLDuration;
    bool  _cachedComposedAVURLDurationIsValid;
    NSURL * _composedAVURL;
    NSArray * _composedFragments;
    NSObject * _composedFragmentsMutex;
    NSURL * _composedWaveformURL;
    NSDate * _creationDate;
    NSArray * _decomposedFragments;
    bool  _readonly;
    NSString * _savedRecordingUUID;
    NSString * _title;
}

@property (nonatomic) double cachedComposedAVURLDuration;
@property (nonatomic) bool cachedComposedAVURLDurationIsValid;
@property (nonatomic, readonly) NSURL *composedAVURL;
@property (nonatomic, readonly) double composedDuration;
@property (nonatomic, retain) NSArray *composedFragments;
@property (nonatomic, retain) NSObject *composedFragmentsMutex;
@property (nonatomic, readonly) NSURL *composedWaveformURL;
@property (nonatomic, retain) NSDate *creationDate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSArray *decomposedFragments;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isContentBeingModified;
@property (nonatomic) bool readonly;
@property (nonatomic, retain) NSString *savedRecordingUUID;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *title;

+ (id)_compositionFragmentsFolderForComposedAVURL:(id)arg1;
+ (id)_compositionLoadedFromMetadataURL:(id)arg1 composedAVURL:(id)arg2 savedRecordingUUID:(id)arg3 creationDate:(id)arg4 createIfNeeded:(bool)arg5;
+ (id)_compositionLoadedFromMetadataURL:(id)arg1 savedRecording:(id)arg2;
+ (id)_compositionMetadataURLForComposedAVURL:(id)arg1;
+ (id)_compositionMetadataURLForCompositionBundleURL:(id)arg1;
+ (bool)_isSessionWithModificationAccessActiveForComposedAVURL:(id)arg1;
+ (bool)_markCompositionAVURLsBeingModified:(id)arg1;
+ (id)_unitTestingCompositionWithDecomposedFragments:(id)arg1;
+ (id)compositionBundleURLForComposedAVURL:(id)arg1;
+ (id)compositionLoadedForComposedAVURL:(id)arg1 createIfNeeded:(bool)arg2;
+ (id)compositionLoadedForSavedRecording:(id)arg1;
+ (id)compositionLoadedForSavedRecordingUUID:(id)arg1;
+ (id)compositionLoadedFromCompositionBundleURL:(id)arg1;
+ (id)compositionWithComposedAVURL:(id)arg1;
+ (void)deleteFromFilesystem:(id)arg1;
+ (bool)excludeFromBackup:(id)arg1 error:(id*)arg2;
+ (bool)includeInBackup:(id)arg1 error:(id*)arg2;
+ (bool)migrateBackupExclusionFlag:(id)arg1;

- (void).cxx_destruct;
- (id)_calculateComposedFragments;
- (double)_composedDuration;
- (unsigned long long)_fileSizeOfComposedAssetsIncludingRelatedResources:(bool)arg1;
- (id)_initWithComposedAVURL:(id)arg1 savedRecordingUUID:(id)arg2 creationDate:(id)arg3 title:(id)arg4 decomposedFragments:(id)arg5 composedFragments:(id)arg6;
- (id)_initWithSavedRecording:(id)arg1 decomposedFragments:(id)arg2 composedFragments:(id)arg3;
- (double)cachedComposedAVURLDuration;
- (bool)cachedComposedAVURLDurationIsValid;
- (id)composedAVURL;
- (double)composedDuration;
- (id)composedFragments;
- (id)composedFragmentsIntersectingTimeRange:(struct { double x1; double x2; })arg1;
- (id)composedFragmentsMutex;
- (id)composedWaveformURL;
- (id)compositionAsset;
- (id)compositionByClippingToComposedTimeRange:(struct { double x1; double x2; })arg1;
- (id)compositionByDeletingAndSplittingAtComposedTimeRange:(struct { double x1; double x2; })arg1;
- (id)compositionByDuplicatingResourcesToDestinationComposedAVURL:(id)arg1;
- (id)compositionByReloadingFromDefaultMetadataLocation;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)creationDate;
- (id)decomposedFragments;
- (void)deleteFromFilesystem;
- (id)description;
- (id)dictionaryPListRepresentation;
- (void)enumerateOrphanedFragmentsWithBlock:(id /* block */)arg1;
- (unsigned long long)estimatedFileSizeOfComposedAssetIncludingRelatedResources:(bool)arg1;
- (unsigned long long)fileSizeOfAssetsIncludingRelatedResources:(bool)arg1;
- (id)initWithDictionaryPListRepresentation:(id)arg1;
- (bool)isContentBeingModified;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)newRandomFragmentWithInsertionTimeRangeInComposition:(struct { double x1; double x2; })arg1 pathExtension:(id)arg2;
- (id)playableAsset;
- (bool)readonly;
- (void)recacheComposedDuration;
- (bool)saveMetadataToDefaultLocation;
- (id)savedRecordingUUID;
- (void)setCachedComposedAVURLDuration:(double)arg1;
- (void)setCachedComposedAVURLDurationIsValid:(bool)arg1;
- (void)setComposedFragments:(id)arg1;
- (void)setComposedFragmentsMutex:(id)arg1;
- (void)setCreationDate:(id)arg1;
- (void)setDecomposedFragments:(id)arg1;
- (void)setReadonly:(bool)arg1;
- (void)setSavedRecordingUUID:(id)arg1;
- (void)setSavedRecordingUUIDFromRecoveredRecordingUUID:(id)arg1;
- (void)setTitle:(id)arg1;
- (id)title;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
