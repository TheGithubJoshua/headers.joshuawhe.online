<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCSavedRecordingsModel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCSavedRecordingsModel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCSavedRecordingsModel : NSObject <NSFetchedResultsControllerDelegate> {
    NSEntityDescription * _cloudRecordingEntity;
    NSPersistentStore * _cloudStore;
    RCPersistentContainer * _container;
    NSManagedObjectContext * _context;
    bool  _disableSaveNotifications;
    RCSavedRecordingsController * _evictedRecordingsController;
    long long  _isSavingDisabledCount;
    NSPersistentStore * _localStore;
    RCDatabaseMetadata * _metadata;
    NSCloudKitMirroringRequestOptions * _mirroringOptions;
    RCSavedRecordingsController * _recordingsController;
    bool  _valid;
}

@property (nonatomic, readonly) NSArray *allRecordings;
@property (nonatomic, readonly) NSSet *audioProperties;
@property (nonatomic, readonly) NSPersistentContainer *container;
@property (nonatomic, readonly) unsigned long long count;
@property (nonatomic, readonly) NSData *currentChangeToken;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableSaveNotifications;
@property (nonatomic, readonly) NSArray *evictedRecordings;
@property (nonatomic, readonly) RCSavedRecordingsController *evictedRecordingsController;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long isSavingDisabledCount;
@property (nonatomic, readonly) NSArray *recordings;
@property (nonatomic, readonly) RCSavedRecordingsController *recordingsController;
@property (readonly) Class superclass;
@property bool valid;

+ (id)_copyFileIntoRecordingsDirectory:(id)arg1;
+ (id)_dateFormatterComponentFormatting;
+ (void)_importImportableRecordingWithSourceAudioURL:(id)arg1 name:(id)arg2 date:(id)arg3 completionHandler:(id /* block */)arg4;
+ (void)_insertRecordingWithImportableAudioURL:(id)arg1 name:(id)arg2 date:(id)arg3 completionHandler:(id /* block */)arg4;
+ (id)_moveFileIntoRecordingsDirectory:(id)arg1;
+ (id)cloudMirroringModel;
+ (id)creationDateFromStandardRecordingURL:(id)arg1;
+ (id)currentLocationBasedName;
+ (void)determineImportabilityOfRecordingWithAudioURL:(id)arg1 completionHandler:(id /* block */)arg2;
+ (void)importRecordingWithSourceAudioURL:(id)arg1 name:(id)arg2 date:(id)arg3 completionHandler:(id /* block */)arg4;
+ (bool)migrateDatabaseIfNecessary;
+ (id)newPrivateModel;
+ (id)newSyncModel;
+ (id)savedRecordingsDirectory;
+ (id)sharedModelForQueue:(id)arg1;
+ (id)sharedModelForQueue_shouldNotBeCalledDuringSyncing:(id)arg1;
+ (id)standardPathForRecording:(id)arg1;
+ (id)standardPathForRecordingWithCreationDate:(id)arg1 uniqueID:(id)arg2;
+ (id)standardURLForRecordingWithCreationDate:(id)arg1;
+ (id)startStoreServers:(id /* block */)arg1;

- (void).cxx_destruct;
- (bool)__saveManagedObjectContext:(id*)arg1;
- (id)_allTitles;
- (void)_deleteRecordingsWithDurationLessThan:(double)arg1 passingTest:(id /* block */)arg2;
- (void)_deliverSaveNotifications;
- (void)_enumerateFetchedRecordingTitles:(id /* block */)arg1;
- (void)_enumerateRecordingsWithEntityDescription:(id)arg1 propertiesToFetch:(id)arg2 withBlock:(id /* block */)arg3;
- (id)_initWithContainer:(id)arg1 concurrencyType:(unsigned long long)arg2;
- (id)_labelPresetsForQuery:(id)arg1;
- (id)_recordingWithUniqueID:(id)arg1 templateName:(id)arg2;
- (void)_scheduleAutomaticRecordingDeletions;
- (id)allRecordings;
- (id)audioProperties;
- (id)cloudRecordingEntity;
- (id)cloudStore;
- (id)container;
- (id)context;
- (void)controllerDidChangeContent:(id)arg1;
- (unsigned long long)count;
- (id)currentChangeToken;
- (id)currentPersistentHistoryToken;
- (void)dealloc;
- (void)deleteAllEvictedRecordings;
- (bool)deleteDatabaseProperty:(id)arg1;
- (void)deleteRecording:(id)arg1;
- (void)deleteRecordingsEvictedBeforeDate:(id)arg1;
- (bool)disableSaveNotifications;
- (id)duplicateRecording:(id)arg1 error:(id*)arg2;
- (id)enumerateChangeHistorySinceToken:(id)arg1 usingBlock:(id /* block */)arg2;
- (id)enumerateExistingRecordingsSinceChangeToken:(id)arg1 withBlock:(id /* block */)arg2;
- (void)enumerateExistingRecordingsWithBlock:(id /* block */)arg1;
- (void)evictRecording:(id)arg1;
- (id)evictedRecordings;
- (id)evictedRecordingsController;
- (bool)exportToCloud:(id /* block */)arg1;
- (bool)fetchObjectsFromCloud:(id)arg1 entityToAttributesToFetch:(struct NSDictionary { Class x1; }*)arg2 completionHandler:(id /* block */)arg3;
- (void)finishSaveByUpdatingSearchableIndexWithChangeContext:(id)arg1;
- (bool)hasExistingRecordingForAudioFile:(id)arg1;
- (bool)importFromCloud:(id /* block */)arg1;
- (id)indexPathForRecording:(id)arg1;
- (id)init;
- (id)insertRecordingWithAudioFile:(id)arg1 duration:(double)arg2 date:(id)arg3;
- (id)insertRecordingWithAudioFile:(id)arg1 duration:(double)arg2 date:(id)arg3 customLabelBase:(id)arg4;
- (id)insertRecordingWithAudioFile:(id)arg1 duration:(double)arg2 date:(id)arg3 customTitleBase:(id)arg4 uniqueID:(id)arg5;
- (long long)isSavingDisabledCount;
- (id)metadataValueForKey:(id)arg1;
- (id)mirroringOptions;
- (id)mostRecentRecording;
- (id)nextRecordingDefaultLabelWithCustomLabelBase:(id)arg1;
- (id)nextRecordingDefaultLabelWithCustomTitleBase:(id)arg1;
- (void)performBlockAndWait:(id /* block */)arg1;
- (void)performBlockAndWaitInTemporaryContext:(id /* block */)arg1;
- (void)performWithSavingDisabled:(id /* block */)arg1;
- (id)recordingAtIndex:(unsigned long long)arg1;
- (id)recordingWithID:(id)arg1;
- (id)recordingWithITunesPersistentID:(long long)arg1;
- (id)recordingWithURIRepresentation:(id)arg1;
- (id)recordingWithUniqueID:(id)arg1;
- (id)recordings;
- (id)recordingsController;
- (id)recordingsForSpotlightSearch:(id)arg1;
- (bool)resetCloud:(id /* block */)arg1;
- (void)restoreEvictedRecording:(id)arg1;
- (void)saveIfNecessary;
- (bool)saveIfNecessary:(id*)arg1;
- (void)setDisableSaveNotifications:(bool)arg1;
- (void)setIsSavingDisabledCount:(long long)arg1;
- (void)setMetadataValue:(id)arg1 forKey:(id)arg2;
- (void)setTitle:(id)arg1 ofRecording:(id)arg2;
- (void)setValid:(bool)arg1;
- (bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2 save:(bool)arg3;
- (bool)valid;
- (id)valueForDatabaseProperty:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
