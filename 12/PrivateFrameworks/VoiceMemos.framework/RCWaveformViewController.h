<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCWaveformViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCWaveformViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCWaveformViewController : UIViewController <RCWaveformRendererDelegate, RCWaveformSelectionOverlayDelegate, UIScrollViewDelegate> {
    RCUIConfiguration * _UIConfiguration;
    UIView * _backgroundView;
    UIView * _backgroundWaveFormHighlightView;
    NSLayoutConstraint * _backgroundWaveFormHighlightViewLeftAlignment;
    NSLayoutConstraint * _backgroundWaveFormHighlightViewRightAlignment;
    bool  _capturing;
    bool  _clipTimeMarkersToDuration;
    double  _currentTime;
    unsigned long long  _currentTimeDisplayOptions;
    <RCWaveformViewDelegate> * _delegate;
    double  _desiredTimeDeltaForVisibleTimeRange;
    bool  _dragEnding;
    double  _duration;
    bool  _editing;
    struct { 
        double beginTime; 
        double endTime; 
    }  _highlightTimeRange;
    bool  _isCompactView;
    bool  _isOverview;
    bool  _isPlayback;
    bool  _isScrollViewAutoScrolling;
    bool  _isScrollViewAutoScrollingBeginning;
    bool  _isScrollViewAutoScrollingPaused;
    double  _layoutHeight;
    RCLayoutMetrics * _layoutMetrics;
    double  _layoutWidth;
    double  _maximumSelectionDuration;
    double  _overlayAutoscrollBaseDuration;
    double  _overlayAutoscrollRateForSelectionTracking;
    NSTimer * _overlayAutoscrollTimer;
    bool  _playing;
    NSLayoutConstraint * _renderViewBottomInsetConstraint;
    RCWaveformRenderer * _rendererController;
    float  _resumingToForegroundAutoscrollRate;
    RCWaveformScrollView * _scrollView;
    bool  _scrubbing;
    bool  _scrubbingEnabled;
    struct { 
        double beginTime; 
        double endTime; 
    }  _selectedTimeRange;
    bool  _selectedTimeRangeEditingEnabled;
    bool  _selectedTimeRangeScrubbingEnabled;
    UIView * _selectionBackgroundView;
    RCWaveformSelectionOverlay * _selectionOverlay;
    bool  _selectionOverlayShouldUseInsertMode;
    bool  _shouldUpdateInDisplayLink;
    bool  _showPlayBarOnly;
    double  _timeBeganAutoscrolling;
    UIView * _timeMarkerView;
    NSMutableArray * _timeMarkerViews;
    bool  _timeMarkerViewsNeedInitialLayout;
    bool  _timeMarkerViewsUpdatesDisabled;
    struct { 
        double beginTime; 
        double endTime; 
    }  _visibleTimeRange;
}

@property (nonatomic, copy) RCUIConfiguration *UIConfiguration;
@property (getter=isAutoscrolling, nonatomic, readonly) bool autoscrolling;
@property (nonatomic) bool capturing;
@property (nonatomic) bool clipTimeMarkersToDuration;
@property (nonatomic) double currentTime;
@property (nonatomic) unsigned long long currentTimeDisplayOptions;
@property (nonatomic, retain) RCWaveformDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <RCWaveformViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) double duration;
@property (nonatomic) bool editing;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct { double x1; double x2; } highlightTimeRange;
@property (nonatomic) bool isCompactView;
@property (nonatomic) bool isOverview;
@property (nonatomic) bool isPlayback;
@property (nonatomic, retain) RCLayoutMetrics *layoutMetrics;
@property (nonatomic) double maximumSelectionDuration;
@property (nonatomic) bool playing;
@property (nonatomic) bool scrubbingEnabled;
@property (nonatomic) struct { double x1; double x2; } selectedTimeRange;
@property (getter=isSelectedTimeRangeEditingEnabled, nonatomic) bool selectedTimeRangeEditingEnabled;
@property (getter=isSelectedTimeRangeEditingEnabled, nonatomic) bool selectedTimeRangeScrubbingEnabled;
@property (nonatomic) bool selectionOverlayShouldUseInsertMode;
@property (nonatomic) bool showPlayBarOnly;
@property (readonly) Class superclass;
@property (nonatomic) struct { double x1; double x2; } visibleTimeRange;

- (void).cxx_destruct;
- (id)UIConfiguration;
- (void)_autoscrollOverlayIfNecessary;
- (void)_displayLinkDidUpdate:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForTimeMarkerView:(id)arg1;
- (bool)_isScrubbing;
- (bool)_isScrubbingSelectionTimeRange;
- (void)_layoutTimeMarkerViewsForCurrentlyVisibleTimeRange;
- (void)_scrollViewPanGestureRecognized:(id)arg1;
- (void)_scrubbingDidFinish;
- (void)_setSelectedTimeRange:(struct { double x1; double x2; })arg1 updateVisibleTimeRange:(bool)arg2 updateWaveformViewContentSizeAndOffset:(bool)arg3 notifyDelegate:(bool)arg4 animationDuration:(double)arg5;
- (void)_setTimeMarkerViewUpdatesDisabled:(bool)arg1;
- (void)_setTimeMarkerViewsNeedInitialLayout:(bool)arg1;
- (void)_setVisibleTimeRange:(struct { double x1; double x2; })arg1 animationDuration:(double)arg2 completionBlock:(id /* block */)arg3;
- (bool)_shouldAutoAnimateScrollChanges;
- (void)_startDisplayLink;
- (void)_stopDisplayLink;
- (void)_updateAnnotationViews;
- (void)_updateBackgroundWaveformHighlight;
- (void)_updateCurrentTimeDisplay;
- (void)_updateSelectionOverlayWithAnimationDuration:(double)arg1;
- (void)_updateVisibleAreaWithAnimationDuration:(double)arg1;
- (void)_updateWaveformViewContentSizeAndOffset;
- (void)_updateWaveformViewContentSizeAndOffsetToSize:(double)arg1;
- (struct { double x1; double x2; })_visibleTimeRangeForCurrentSelectionTimeRange;
- (void)beginAutoscrollingAtTime:(double)arg1 atRate:(float)arg2;
- (bool)capturing;
- (bool)clipTimeMarkersToDuration;
- (double)currentTime;
- (unsigned long long)currentTimeDisplayOptions;
- (double)currentTimeIndicatorCoordinate;
- (id)dataSource;
- (void)dealloc;
- (id)delegate;
- (double)duration;
- (bool)editing;
- (void)endAutoscrolling;
- (void)fixupScrollPositionToMatchIndicatorPositionTime;
- (struct { double x1; double x2; })highlightTimeRange;
- (id)initWithOverviewWaveform:(bool)arg1 duration:(double)arg2;
- (bool)isAutoscrolling;
- (bool)isCompactView;
- (bool)isOverview;
- (bool)isPlayback;
- (bool)isScrollViewAutoScrolling;
- (bool)isSelectedTimeRangeEditingEnabled;
- (bool)isSelectedTimeRangeEditingEnabled;
- (id)layoutMetrics;
- (double)maximumSelectionDuration;
- (void)pauseAutoscrolling;
- (bool)playing;
- (void)reloadOverlayOffsets;
- (void)resumeAutoscrollingIfPaused;
- (void)scrollView:(id)arg1 didChangeContentOffsetToOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)scrollView:(id)arg1 willChangeContentOffsetToOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (bool)scrubbingEnabled;
- (struct { double x1; double x2; })selectedTimeRange;
- (bool)selectionOverlayShouldUseInsertMode;
- (void)setAutoscrolling:(bool)arg1;
- (void)setCapturing:(bool)arg1;
- (void)setClipTimeMarkersToDuration:(bool)arg1;
- (void)setCurrentTime:(double)arg1;
- (void)setCurrentTimeDisplayOptions:(unsigned long long)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDuration:(double)arg1;
- (void)setEditing:(bool)arg1;
- (struct { double x1; double x2; })setHighlightTimeRange;
- (void)setHighlightTimeRange:(struct { double x1; double x2; })arg1;
- (void)setIsCompactView:(bool)arg1;
- (void)setIsOverview:(bool)arg1;
- (void)setIsPlayback:(bool)arg1;
- (void)setLayoutMetrics:(id)arg1;
- (void)setMaximumSelectionDuration:(double)arg1;
- (void)setPlaying:(bool)arg1;
- (void)setScrubbingEnabled:(bool)arg1;
- (void)setSelectedTimeRange:(struct { double x1; double x2; })arg1;
- (void)setSelectedTimeRange:(struct { double x1; double x2; })arg1 animationDuration:(double)arg2;
- (void)setSelectedTimeRangeEditingEnabled:(bool)arg1;
- (void)setSelectedTimeRangeScrubbingEnabled:(bool)arg1;
- (void)setSelectionOverlayShouldUseInsertMode:(bool)arg1;
- (void)setShowPlayBarOnly:(bool)arg1;
- (void)setUIConfiguration:(id)arg1;
- (void)setVisibleTimeRange:(struct { double x1; double x2; })arg1;
- (void)setVisibleTimeRange:(struct { double x1; double x2; })arg1 animationDuration:(double)arg2;
- (bool)showPlayBarOnly;
- (struct { double x1; double x2; })timeRangeByInsettingVisibleTimeRange:(struct { double x1; double x2; })arg1 inset:(double)arg2;
- (void)updateBackgroundColor;
- (void)updateColors;
- (void)updateVisibleTimeRangeToFullDuration;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (struct { double x1; double x2; })visibleTimeRange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })waveformRectForLayoutBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)waveformRenderer:(id)arg1 contentWidthDidChange:(double)arg2;
- (void)waveformRendererContentDidFinishLoading:(id)arg1;
- (void)waveformRendererDidSynchronizeToDisplayLink:(id)arg1;
- (void)waveformSelectionOverlay:(id)arg1 didFinishTrackingSelectionBeginTime:(bool)arg2 endTime:(bool)arg3 assetCurrentTime:(bool)arg4;
- (double)waveformSelectionOverlay:(id)arg1 offsetForTime:(double)arg2;
- (double)waveformSelectionOverlay:(id)arg1 timeForOffset:(double)arg2;
- (void)waveformSelectionOverlay:(id)arg1 willBeginTrackingSelectionBeginTime:(bool)arg2 endTime:(bool)arg3 assetCurrentTime:(bool)arg4;
- (double)waveformSelectionOverlay:(id)arg1 willChangeAssetCurrentTime:(double)arg2 isTracking:(bool)arg3;
- (struct { double x1; double x2; })waveformSelectionOverlay:(id)arg1 willChangeSelectedTimeRange:(struct { double x1; double x2; })arg2 isTracking:(bool)arg3;
- (double)waveformSelectionOverlayGetCurrentTime:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
