<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCWaveformRenderer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCWaveformRenderer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCWaveformRenderer : UIViewController <CAAnimationDelegate, RCWaveformDataSourceObserver> {
    bool  _activeDisplayLinkRequired;
    double  _cachedContentWidth;
    NSMutableArray * _cachedSegmentArray;
    bool  _contentWidthDirty;
    double  _dataPointWidth;
    RCWaveformDataSource * _dataSource;
    bool  _frequentUpdatesSegmentUpdatesExpectedHint;
    struct { 
        double beginTime; 
        double endTime; 
    }  _highlightTimeRange;
    bool  _isCompactView;
    bool  _isEditMode;
    bool  _isOverview;
    bool  _isPlayBarOnlyMode;
    bool  _isPlayback;
    bool  _isRecordWaveform;
    bool  _needsVisibleRangeRendering;
    bool  _paused;
    struct { 
        double beginTime; 
        double endTime; 
    }  _renderedTimeRange;
    bool  _renderedTimeRangeIsApproximatedWaveform;
    <RCWaveformRendererDelegate> * _rendererDelegate;
    struct _RCWaveformRendererState { 
        bool recordDidSwitch; 
        double lastRenderTime; 
    }  _rendererState;
    bool  _requiresFullRefresh;
    double  _spacingWidth;
    struct { 
        double beginTime; 
        double endTime; 
    }  _visibleTimeRange;
    NSMutableIndexSet * _waveformSliceIndexes;
    NSMutableDictionary * _waveformSlices;
    bool  displayLinkConnected;
}

@property (getter=isActiveDisplayLinkRequired, nonatomic) bool activeDisplayLinkRequired;
@property (nonatomic, readonly) double contentWidth;
@property (nonatomic) double dataPointWidth;
@property (nonatomic, retain) RCWaveformDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool frequentUpdatesSegmentUpdatesExpectedHint;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct { double x1; double x2; } highlightTimeRange;
@property (nonatomic) bool isCompactView;
@property (nonatomic) bool isEditMode;
@property (nonatomic) bool isOverview;
@property (nonatomic) bool isPlayBarOnlyMode;
@property (nonatomic) bool isPlayback;
@property (nonatomic) bool isRecordWaveform;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic) <RCWaveformRendererDelegate> *rendererDelegate;
@property (nonatomic) double spacingWidth;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleRect;
@property (nonatomic) struct { double x1; double x2; } visibleTimeRange;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_clearRenderingState;
- (bool)_currentViewportRequiresRenderingNewSegments;
- (void)_draw:(double)arg1;
- (double)_nonCachedContentWidthWithDuration:(double)arg1;
- (void)_performOrDispatchToMainThread:(id /* block */)arg1;
- (double)_pixelOffsetForTime:(double)arg1;
- (double)_pixelsPerSecond;
- (double)_pixelsPerSecondWithVisibleTimeRange:(struct { double x1; double x2; })arg1;
- (void)_renderSegments:(id)arg1 timeRangeOfSegments:(struct { double x1; double x2; })arg2 isApproximatedWaveform:(bool)arg3 withDuration:(double)arg4;
- (void)_renderVisibleTimeRangeWithDuration:(double)arg1;
- (void)_setNeedsRendering;
- (void)_setNeedsVisibleTimeRangeRendering;
- (void)_startRendering;
- (void)_startUpdating;
- (void)_stopRendering;
- (void)_stopUpdating;
- (double)_timeForPixelOffset:(double)arg1;
- (double)_timeForPixelOffset:(double)arg1 withVisibleTimeRange:(struct { double x1; double x2; })arg2;
- (struct { double x1; double x2; })_timeRangeToRenderForVisibleTimeRange:(struct { double x1; double x2; })arg1;
- (id)_updateCachedSegmentArray:(id)arg1 withTimeRange:(struct { double x1; double x2; })arg2;
- (struct { double x1; double x2; })_updateRenderTimeRange:(struct { double x1; double x2; })arg1;
- (void)animationDidStop:(id)arg1 finished:(bool)arg2;
- (double)contentWidth;
- (double)dataPointWidth;
- (id)dataSource;
- (void)dealloc;
- (void)displayLinkDidUpdate:(id)arg1 withCurrentCaptureSession:(id)arg2;
- (bool)frequentUpdatesSegmentUpdatesExpectedHint;
- (struct { double x1; double x2; })highlightTimeRange;
- (double)horizontalOffsetAtTime:(double)arg1;
- (double)horizontalOffsetAtTime:(double)arg1 withVisibleTimeRange:(struct { double x1; double x2; })arg2;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isActiveDisplayLinkRequired;
- (bool)isCompactView;
- (bool)isEditMode;
- (bool)isOverview;
- (bool)isPaused;
- (bool)isPlayBarOnlyMode;
- (bool)isPlayback;
- (bool)isRecordWaveform;
- (void)loadView;
- (double)pointsPerSecondWithVisibleTimeRange:(struct { double x1; double x2; })arg1;
- (id)rasterizeTimeRange:(struct { double x1; double x2; })arg1 imageSize:(struct CGSize { double x1; double x2; })arg2;
- (id)rendererDelegate;
- (void)setActiveDisplayLinkRequired:(bool)arg1;
- (void)setDataPointWidth:(double)arg1;
- (void)setDataSource:(id)arg1;
- (void)setFrequentUpdatesSegmentUpdatesExpectedHint:(bool)arg1;
- (void)setHighlightTimeRange:(struct { double x1; double x2; })arg1;
- (void)setIsCompactView:(bool)arg1;
- (void)setIsEditMode:(bool)arg1;
- (void)setIsOverview:(bool)arg1;
- (void)setIsPlayBarOnlyMode:(bool)arg1;
- (void)setIsPlayback:(bool)arg1;
- (void)setIsRecordWaveform:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setRendererDelegate:(id)arg1;
- (void)setSpacingWidth:(double)arg1;
- (void)setVisibleTimeRange:(struct { double x1; double x2; })arg1;
- (double)spacingWidth;
- (double)timeAtHorizontalOffset:(double)arg1;
- (double)timeAtHorizontalOffset:(double)arg1 withVisibleTimeRange:(struct { double x1; double x2; })arg2;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillDisappear:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;
- (struct { double x1; double x2; })visibleTimeRange;
- (void)waveformDataSource:(id)arg1 didLoadWaveformSegment:(id)arg2;
- (void)waveformDataSourceDidFinishLoading:(id)arg1;
- (void)waveformDataSourceRequiresUpdate:(id)arg1;
- (void)willMoveToParentViewController:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
