<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>RCCaptureOutputWriter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VoiceMemos.framework/RCCaptureOutputWriter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos (1.0)
 */

@interface RCCaptureOutputWriter : NSObject <AVCaptureAudioDataOutputSampleBufferDelegate> {
    AVCaptureSession * _AVCaptureSession;
    long long  _AVCaptureSessionStartupState;
    NSURL * _activeOutputFileURL;
    AVAssetWriter * _assetWriter;
    <RCCaptureOutputWriterDelegate> * _captureOutputDelegate;
    NSMutableArray * _delegateBlocks;
    double  _finalizedAssetDuration;
    bool  _finalizedAssetEncounteredError;
    NSURL * _finalizedAssetURL;
    bool  _handledAVCaptureSessionFailedToStart;
    bool  _handledAVCaptureSessionTerminatedAbnormally;
    bool  _isProcessingSamples;
    unsigned long long  _maxRecordedFileSize;
    NSObject<OS_dispatch_queue> * _queue;
    NSDate * _recordingCreationDate;
    NSUUID * _recordingSessionID;
    NSString * _recordingUniqueID;
    AVCaptureAudioDataOutput * _sampleBufferDataOutput;
    NSObject<OS_dispatch_queue> * _sampleBufferQueue;
    unsigned long long  _sampleBuffersWritten;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _sampleBuffersWrittenDuration;
    double  _storeDemoTimeLimit;
    bool  _waitingForAVCaptureSessionDidStart;
    long long  _writerState;
}

@property (nonatomic, readonly) AVCaptureSession *AVCaptureSession;
@property (nonatomic, retain) NSURL *activeOutputFileURL;
@property (nonatomic, retain) AVAssetWriter *assetWriter;
@property (nonatomic, readonly) double assetWritingCheckpointInterval;
@property (nonatomic) <RCCaptureOutputWriterDelegate> *captureOutputDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double finalizedAssetDuration;
@property (nonatomic, readonly) bool finalizedAssetEncounteredError;
@property (nonatomic, readonly) NSURL *finalizedAssetURL;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long maxRecordedFileSize;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSDate *recordingCreationDate;
@property (nonatomic, copy) NSUUID *recordingSessionID;
@property (nonatomic, retain) NSString *recordingUniqueID;
@property (nonatomic, retain) AVCaptureAudioDataOutput *sampleBufferDataOutput;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *sampleBufferQueue;
@property (nonatomic) double storeDemoTimeLimit;
@property (readonly) Class superclass;
@property (nonatomic) long long writerState;

- (void).cxx_destruct;
- (id)AVCaptureSession;
- (void)_checkIfRecordingSessionEverStarted:(id)arg1;
- (void)_clearSampleDataOutput;
- (void)_finalizeAssetWriting;
- (bool)_handleEncounteredFatalAssetWriterError;
- (bool)_handleNotificationAsSessionStartFailure;
- (void)_interruptionDidBegin:(id)arg1;
- (void)_prepareCaptureSessionOutputsIfNecessary;
- (void)_registerForCatpureSessionNotifications;
- (void)_scheduleMainThreadDelegateBlock:(id /* block */)arg1;
- (void)_sessionDidStartRunning:(id)arg1;
- (void)_sessionDidStopRunning:(id)arg1;
- (void)_sessionErrored:(id)arg1;
- (void)_setWriterState:(long long)arg1;
- (bool)_setupAssetWriter:(id*)arg1 sampleBufferRef:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_unregisterForCatpureSessionNotifications;
- (long long)_writerState;
- (id)activeOutputFileURL;
- (id)assetWriter;
- (double)assetWritingCheckpointInterval;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (id)captureOutputDelegate;
- (void)dealloc;
- (void)endWriting;
- (void)enforceMaxRecordingDuration;
- (double)finalizedAssetDuration;
- (bool)finalizedAssetEncounteredError;
- (id)finalizedAssetURL;
- (id)initWithAVCaptureSession:(id)arg1;
- (unsigned long long)maxRecordedFileSize;
- (void)pauseWriting;
- (id)queue;
- (id)recordingCreationDate;
- (id)recordingSessionID;
- (id)recordingUniqueID;
- (void)resumeWriting;
- (id)sampleBufferDataOutput;
- (id)sampleBufferQueue;
- (void)setActiveOutputFileURL:(id)arg1;
- (void)setAssetWriter:(id)arg1;
- (void)setCaptureOutputDelegate:(id)arg1;
- (void)setMaxRecordedFileSize:(unsigned long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordingCreationDate:(id)arg1;
- (void)setRecordingSessionID:(id)arg1;
- (void)setRecordingUniqueID:(id)arg1;
- (void)setSampleBufferDataOutput:(id)arg1;
- (void)setSampleBufferQueue:(id)arg1;
- (void)setStoreDemoTimeLimit:(double)arg1;
- (void)setWriterState:(long long)arg1;
- (bool)startCaptureSession;
- (void)startMaximumRecordingDurationTimer;
- (bool)startWritingToOutputFileURL:(id)arg1 creationDate:(id)arg2 uniqueID:(id)arg3 beginPaused:(bool)arg4 captureOutputDelegate:(id)arg5;
- (void)stopCaptureSession;
- (double)storeDemoTimeLimit;
- (long long)writerState;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
