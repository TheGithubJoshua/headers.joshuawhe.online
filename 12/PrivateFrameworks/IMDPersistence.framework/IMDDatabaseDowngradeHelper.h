<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMDDatabaseDowngradeHelper.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMDPersistence.framework/IMDDatabaseDowngradeHelper.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMDPersistence.framework/IMDPersistence (1000)
 */

@interface IMDDatabaseDowngradeHelper : NSObject {
    NSArray * _createIndexesSQL;
    NSArray * _createTablesSQL;
    NSArray * _createTriggersSQL;
    struct sqlite3 { } * _database;
    long long  _downgradesToVersion;
    bool  _inTransaction;
    NSString * _path;
    NSArray * _tableNames;
}

@property (nonatomic, retain) NSArray *createIndexesSQL;
@property (nonatomic, retain) NSArray *createTablesSQL;
@property (nonatomic, retain) NSArray *createTriggersSQL;
@property (nonatomic, readonly) struct sqlite3 { }*database;
@property (nonatomic, readonly) long long downgradesToVersion;
@property (nonatomic, readonly) bool isOpen;
@property (nonatomic, retain) NSString *path;
@property (nonatomic, retain) NSArray *tableNames;

- (bool)_readIntegerFromQuery:(id)arg1 resultBlock:(id /* block */)arg2;
- (bool)beginTransaction:(id /* block */)arg1;
- (bool)cloneTableContents:(id)arg1 withOperation:(struct IMDSqlOperation { void *x1; void *x2; struct __CFString {} *x3; void *x4; struct IMDSqlStatement { void *x_5_1_1; int x_5_1_2; struct __CFString {} *x_5_1_3; struct sqlite3 {} *x_5_1_4; int x_5_1_5; int x_5_1_6; int x_5_1_7; struct IMPerfMeasurement_t { struct IMFileLocation_t { char *x_1_3_1; char *x_1_3_2; char *x_1_3_3; char *x_1_3_4; int x_1_3_5; } x_8_2_1; unsigned long long x_8_2_2; unsigned long long x_8_2_3; struct __CFString {} *x_8_2_4; double x_8_2_5; double x_8_2_6; double x_8_2_7; } x_5_1_8; } x5; struct __CFError {} *x6; }*)arg2 resultBlock:(id /* block */)arg3;
- (bool)close:(id /* block */)arg1;
- (bool)commitTransaction:(id /* block */)arg1;
- (bool)createIndexes:(id /* block */)arg1;
- (id)createIndexesSQL;
- (bool)createTables:(id /* block */)arg1;
- (id)createTablesSQL;
- (bool)createTriggers:(id /* block */)arg1;
- (id)createTriggersSQL;
- (struct sqlite3 { }*)database;
- (void)dealloc;
- (long long)downgradesToVersion;
- (id)errorFromResult:(int)arg1 query:(id)arg2;
- (bool)importDataFromWhitetailDatabaseWithSqlOperation:(struct IMDSqlOperation { void *x1; void *x2; struct __CFString {} *x3; void *x4; struct IMDSqlStatement { void *x_5_1_1; int x_5_1_2; struct __CFString {} *x_5_1_3; struct sqlite3 {} *x_5_1_4; int x_5_1_5; int x_5_1_6; int x_5_1_7; struct IMPerfMeasurement_t { struct IMFileLocation_t { char *x_1_3_1; char *x_1_3_2; char *x_1_3_3; char *x_1_3_4; int x_1_3_5; } x_8_2_1; unsigned long long x_8_2_2; unsigned long long x_8_2_3; struct __CFString {} *x_8_2_4; double x_8_2_5; double x_8_2_6; double x_8_2_7; } x_5_1_8; } x5; struct __CFError {} *x6; }*)arg1 resultBlock:(id /* block */)arg2;
- (id)initWithPath:(id)arg1 tableNames:(id)arg2 createTablesSQL:(id)arg3 createIndexesSQL:(id)arg4 createTriggersSQL:(id)arg5 downgradesToVersion:(long long)arg6;
- (bool)isOpen;
- (bool)open:(id /* block */)arg1;
- (id)path;
- (bool)readDatabaseVersion:(id /* block */)arg1;
- (bool)readRowCountForTable:(id)arg1 resultBlock:(id /* block */)arg2;
- (bool)revertTransaction:(id /* block */)arg1;
- (bool)runArrayOfQueries:(id)arg1 resultBlock:(id /* block */)arg2;
- (bool)runSimpleQuery:(id)arg1 resultBlock:(id /* block */)arg2;
- (void)setCreateIndexesSQL:(id)arg1;
- (void)setCreateTablesSQL:(id)arg1;
- (void)setCreateTriggersSQL:(id)arg1;
- (void)setPath:(id)arg1;
- (void)setTableNames:(id)arg1;
- (id)tableNames;
- (bool)writeDatabaseVersion:(long long)arg1 resultBlock:(id /* block */)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
