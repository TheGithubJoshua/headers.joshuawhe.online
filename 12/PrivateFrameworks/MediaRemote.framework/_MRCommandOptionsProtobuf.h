<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_MRCommandOptionsProtobuf.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MediaRemote.framework/_MRCommandOptionsProtobuf.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote (1)
 */

@interface _MRCommandOptionsProtobuf : PBCodable <NSCopying> {
    NSString * _commandID;
    NSString * _contentItemID;
    NSString * _contextID;
    NSString * _destinationAppDisplayID;
    bool  _externalPlayerCommand;
    struct { 
        unsigned int playbackPosition : 1; 
        unsigned int radioStationID : 1; 
        unsigned int trackID : 1; 
        unsigned int playbackQueueDestinationOffset : 1; 
        unsigned int playbackQueueInsertionPosition : 1; 
        unsigned int playbackQueueOffset : 1; 
        unsigned int playbackRate : 1; 
        unsigned int rating : 1; 
        unsigned int repeatMode : 1; 
        unsigned int replaceIntent : 1; 
        unsigned int sendOptions : 1; 
        unsigned int shuffleMode : 1; 
        unsigned int skipInterval : 1; 
        unsigned int externalPlayerCommand : 1; 
        unsigned int negative : 1; 
        unsigned int requestDefermentToPlaybackQueuePosition : 1; 
        unsigned int shouldBeginRadioPlayback : 1; 
        unsigned int shouldOverrideManuallyCuratedQueue : 1; 
    }  _has;
    NSString * _insertAfterContentItemID;
    NSData * _languageOption;
    NSString * _mediaType;
    bool  _negative;
    NSString * _nowPlayingContentItemID;
    double  _playbackPosition;
    NSData * _playbackQueueContext;
    int  _playbackQueueDestinationOffset;
    int  _playbackQueueInsertionPosition;
    int  _playbackQueueOffset;
    float  _playbackRate;
    NSString * _radioStationHash;
    long long  _radioStationID;
    float  _rating;
    NSString * _remoteControlInterface;
    int  _repeatMode;
    int  _replaceIntent;
    bool  _requestDefermentToPlaybackQueuePosition;
    int  _sendOptions;
    NSString * _senderID;
    bool  _shouldBeginRadioPlayback;
    bool  _shouldOverrideManuallyCuratedQueue;
    int  _shuffleMode;
    float  _skipInterval;
    NSString * _sourceID;
    NSString * _stationURL;
    NSData * _systemAppPlaybackQueueData;
    unsigned long long  _trackID;
}

@property (nonatomic, retain) NSString *commandID;
@property (nonatomic, retain) NSString *contentItemID;
@property (nonatomic, retain) NSString *contextID;
@property (nonatomic, retain) NSString *destinationAppDisplayID;
@property (nonatomic) bool externalPlayerCommand;
@property (nonatomic, readonly) bool hasCommandID;
@property (nonatomic, readonly) bool hasContentItemID;
@property (nonatomic, readonly) bool hasContextID;
@property (nonatomic, readonly) bool hasDestinationAppDisplayID;
@property (nonatomic) bool hasExternalPlayerCommand;
@property (nonatomic, readonly) bool hasInsertAfterContentItemID;
@property (nonatomic, readonly) bool hasLanguageOption;
@property (nonatomic, readonly) bool hasMediaType;
@property (nonatomic) bool hasNegative;
@property (nonatomic, readonly) bool hasNowPlayingContentItemID;
@property (nonatomic) bool hasPlaybackPosition;
@property (nonatomic, readonly) bool hasPlaybackQueueContext;
@property (nonatomic) bool hasPlaybackQueueDestinationOffset;
@property (nonatomic) bool hasPlaybackQueueInsertionPosition;
@property (nonatomic) bool hasPlaybackQueueOffset;
@property (nonatomic) bool hasPlaybackRate;
@property (nonatomic, readonly) bool hasRadioStationHash;
@property (nonatomic) bool hasRadioStationID;
@property (nonatomic) bool hasRating;
@property (nonatomic, readonly) bool hasRemoteControlInterface;
@property (nonatomic) bool hasRepeatMode;
@property (nonatomic) bool hasReplaceIntent;
@property (nonatomic) bool hasRequestDefermentToPlaybackQueuePosition;
@property (nonatomic) bool hasSendOptions;
@property (nonatomic, readonly) bool hasSenderID;
@property (nonatomic) bool hasShouldBeginRadioPlayback;
@property (nonatomic) bool hasShouldOverrideManuallyCuratedQueue;
@property (nonatomic) bool hasShuffleMode;
@property (nonatomic) bool hasSkipInterval;
@property (nonatomic, readonly) bool hasSourceID;
@property (nonatomic, readonly) bool hasStationURL;
@property (nonatomic, readonly) bool hasSystemAppPlaybackQueueData;
@property (nonatomic) bool hasTrackID;
@property (nonatomic, retain) NSString *insertAfterContentItemID;
@property (nonatomic, retain) NSData *languageOption;
@property (nonatomic, retain) NSString *mediaType;
@property (nonatomic) bool negative;
@property (nonatomic, retain) NSString *nowPlayingContentItemID;
@property (nonatomic) double playbackPosition;
@property (nonatomic, retain) NSData *playbackQueueContext;
@property (nonatomic) int playbackQueueDestinationOffset;
@property (nonatomic) int playbackQueueInsertionPosition;
@property (nonatomic) int playbackQueueOffset;
@property (nonatomic) float playbackRate;
@property (nonatomic, retain) NSString *radioStationHash;
@property (nonatomic) long long radioStationID;
@property (nonatomic) float rating;
@property (nonatomic, retain) NSString *remoteControlInterface;
@property (nonatomic) int repeatMode;
@property (nonatomic) int replaceIntent;
@property (nonatomic) bool requestDefermentToPlaybackQueuePosition;
@property (nonatomic) int sendOptions;
@property (nonatomic, retain) NSString *senderID;
@property (nonatomic) bool shouldBeginRadioPlayback;
@property (nonatomic) bool shouldOverrideManuallyCuratedQueue;
@property (nonatomic) int shuffleMode;
@property (nonatomic) float skipInterval;
@property (nonatomic, retain) NSString *sourceID;
@property (nonatomic, retain) NSString *stationURL;
@property (nonatomic, retain) NSData *systemAppPlaybackQueueData;
@property (nonatomic) unsigned long long trackID;

- (void).cxx_destruct;
- (int)StringAsRepeatMode:(id)arg1;
- (int)StringAsReplaceIntent:(id)arg1;
- (int)StringAsSendOptions:(id)arg1;
- (int)StringAsShuffleMode:(id)arg1;
- (id)commandID;
- (id)contentItemID;
- (id)contextID;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)destinationAppDisplayID;
- (id)dictionaryRepresentation;
- (bool)externalPlayerCommand;
- (bool)hasCommandID;
- (bool)hasContentItemID;
- (bool)hasContextID;
- (bool)hasDestinationAppDisplayID;
- (bool)hasExternalPlayerCommand;
- (bool)hasInsertAfterContentItemID;
- (bool)hasLanguageOption;
- (bool)hasMediaType;
- (bool)hasNegative;
- (bool)hasNowPlayingContentItemID;
- (bool)hasPlaybackPosition;
- (bool)hasPlaybackQueueContext;
- (bool)hasPlaybackQueueDestinationOffset;
- (bool)hasPlaybackQueueInsertionPosition;
- (bool)hasPlaybackQueueOffset;
- (bool)hasPlaybackRate;
- (bool)hasRadioStationHash;
- (bool)hasRadioStationID;
- (bool)hasRating;
- (bool)hasRemoteControlInterface;
- (bool)hasRepeatMode;
- (bool)hasReplaceIntent;
- (bool)hasRequestDefermentToPlaybackQueuePosition;
- (bool)hasSendOptions;
- (bool)hasSenderID;
- (bool)hasShouldBeginRadioPlayback;
- (bool)hasShouldOverrideManuallyCuratedQueue;
- (bool)hasShuffleMode;
- (bool)hasSkipInterval;
- (bool)hasSourceID;
- (bool)hasStationURL;
- (bool)hasSystemAppPlaybackQueueData;
- (bool)hasTrackID;
- (unsigned long long)hash;
- (id)insertAfterContentItemID;
- (bool)isEqual:(id)arg1;
- (id)languageOption;
- (id)mediaType;
- (void)mergeFrom:(id)arg1;
- (bool)negative;
- (id)nowPlayingContentItemID;
- (double)playbackPosition;
- (id)playbackQueueContext;
- (int)playbackQueueDestinationOffset;
- (int)playbackQueueInsertionPosition;
- (int)playbackQueueOffset;
- (float)playbackRate;
- (id)radioStationHash;
- (long long)radioStationID;
- (float)rating;
- (bool)readFrom:(id)arg1;
- (id)remoteControlInterface;
- (int)repeatMode;
- (id)repeatModeAsString:(int)arg1;
- (int)replaceIntent;
- (id)replaceIntentAsString:(int)arg1;
- (bool)requestDefermentToPlaybackQueuePosition;
- (int)sendOptions;
- (id)sendOptionsAsString:(int)arg1;
- (id)senderID;
- (void)setCommandID:(id)arg1;
- (void)setContentItemID:(id)arg1;
- (void)setContextID:(id)arg1;
- (void)setDestinationAppDisplayID:(id)arg1;
- (void)setExternalPlayerCommand:(bool)arg1;
- (void)setHasExternalPlayerCommand:(bool)arg1;
- (void)setHasNegative:(bool)arg1;
- (void)setHasPlaybackPosition:(bool)arg1;
- (void)setHasPlaybackQueueDestinationOffset:(bool)arg1;
- (void)setHasPlaybackQueueInsertionPosition:(bool)arg1;
- (void)setHasPlaybackQueueOffset:(bool)arg1;
- (void)setHasPlaybackRate:(bool)arg1;
- (void)setHasRadioStationID:(bool)arg1;
- (void)setHasRating:(bool)arg1;
- (void)setHasRepeatMode:(bool)arg1;
- (void)setHasReplaceIntent:(bool)arg1;
- (void)setHasRequestDefermentToPlaybackQueuePosition:(bool)arg1;
- (void)setHasSendOptions:(bool)arg1;
- (void)setHasShouldBeginRadioPlayback:(bool)arg1;
- (void)setHasShouldOverrideManuallyCuratedQueue:(bool)arg1;
- (void)setHasShuffleMode:(bool)arg1;
- (void)setHasSkipInterval:(bool)arg1;
- (void)setHasTrackID:(bool)arg1;
- (void)setInsertAfterContentItemID:(id)arg1;
- (void)setLanguageOption:(id)arg1;
- (void)setMediaType:(id)arg1;
- (void)setNegative:(bool)arg1;
- (void)setNowPlayingContentItemID:(id)arg1;
- (void)setPlaybackPosition:(double)arg1;
- (void)setPlaybackQueueContext:(id)arg1;
- (void)setPlaybackQueueDestinationOffset:(int)arg1;
- (void)setPlaybackQueueInsertionPosition:(int)arg1;
- (void)setPlaybackQueueOffset:(int)arg1;
- (void)setPlaybackRate:(float)arg1;
- (void)setRadioStationHash:(id)arg1;
- (void)setRadioStationID:(long long)arg1;
- (void)setRating:(float)arg1;
- (void)setRemoteControlInterface:(id)arg1;
- (void)setRepeatMode:(int)arg1;
- (void)setReplaceIntent:(int)arg1;
- (void)setRequestDefermentToPlaybackQueuePosition:(bool)arg1;
- (void)setSendOptions:(int)arg1;
- (void)setSenderID:(id)arg1;
- (void)setShouldBeginRadioPlayback:(bool)arg1;
- (void)setShouldOverrideManuallyCuratedQueue:(bool)arg1;
- (void)setShuffleMode:(int)arg1;
- (void)setSkipInterval:(float)arg1;
- (void)setSourceID:(id)arg1;
- (void)setStationURL:(id)arg1;
- (void)setSystemAppPlaybackQueueData:(id)arg1;
- (void)setTrackID:(unsigned long long)arg1;
- (bool)shouldBeginRadioPlayback;
- (bool)shouldOverrideManuallyCuratedQueue;
- (int)shuffleMode;
- (id)shuffleModeAsString:(int)arg1;
- (float)skipInterval;
- (id)sourceID;
- (id)stationURL;
- (id)systemAppPlaybackQueueData;
- (unsigned long long)trackID;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
