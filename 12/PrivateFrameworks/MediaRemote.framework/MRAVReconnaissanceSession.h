<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MRAVReconnaissanceSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MediaRemote.framework/MRAVReconnaissanceSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote (1)
 */

@interface MRAVReconnaissanceSession : NSObject {
    NSArray * _availableEndpoints;
    NSArray * _availableOutputDevices;
    id /* block */  _callback;
    NSObject<OS_dispatch_queue> * _callbackSyncQueue;
    MRAVRoutingDiscoverySession * _discoverySession;
    id  _discoverySessionCallbackToken;
    unsigned int  _endpointFeatures;
    NSArray * _lastProcessedEndpoints;
    NSArray * _lastProcessedOutputDevices;
    NSMutableSet * _localMatchingDevicesFound;
    NSMutableSet * _matchingDevicesFound;
    NSMutableArray * _matchingEndpointsFound;
    NSArray * _matchingLogicalDeviceIDs;
    NSString * _matchingOutputDeviceGroupID;
    NSSet * _matchingOutputDeviceUIDsSet;
    bool  _returnPartialResults;
    bool  _searchInProgress;
    NSObject<OS_dispatch_queue> * _serialQueue;
    bool  _shouldWaitForUnanimousEndpoints;
    NSObject<OS_dispatch_source> * _timeoutTimer;
    double  _timeoutTimerTimeout;
    MRAVEndpoint * _unanimousEndpoint;
    unsigned long long  _updatesReceived;
    bool  _useWeakMatching;
}

@property (nonatomic, retain) NSArray *availableEndpoints;
@property (nonatomic, retain) NSArray *availableOutputDevices;
@property (nonatomic, copy) id /* block */ callback;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackSyncQueue;
@property (nonatomic, retain) MRAVRoutingDiscoverySession *discoverySession;
@property (nonatomic, retain) id discoverySessionCallbackToken;
@property (nonatomic, readonly) unsigned int endpointFeatures;
@property (nonatomic, retain) NSArray *lastProcessedEndpoints;
@property (nonatomic, retain) NSArray *lastProcessedOutputDevices;
@property (nonatomic, retain) NSMutableSet *matchingDevicesFound;
@property (nonatomic, retain) NSMutableArray *matchingEndpointsFound;
@property (nonatomic, copy) NSArray *matchingLogicalDeviceIDs;
@property (nonatomic, retain) NSString *matchingOutputDeviceGroupID;
@property (nonatomic, readonly) NSArray *matchingOutputDeviceUIDs;
@property (nonatomic, retain) NSSet *matchingOutputDeviceUIDsSet;
@property (nonatomic) bool returnPartialResults;
@property (nonatomic) bool searchInProgress;
@property (nonatomic) bool shouldWaitForUnanimousEndpoints;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *timeoutTimer;
@property (nonatomic, retain) MRAVEndpoint *unanimousEndpoint;
@property (nonatomic) unsigned long long updatesReceived;
@property (nonatomic) bool useWeakMatching;

- (void).cxx_destruct;
- (void)_discoverySessionEndpointsChangedCallback:(id)arg1;
- (void)_discoverySessionOutputDevicesChangedCallback:(id)arg1;
- (void)_onQueue_cancelSearch;
- (void)_onQueue_concludeSearch;
- (void)_onQueue_endSearch;
- (void)_onQueue_timeoutTimerFired;
- (void)_onQueue_updateCachedOutputDevices:(id)arg1 endpoints:(id)arg2;
- (void)_processSearchLoop;
- (id)availableEndpoints;
- (id)availableOutputDevices;
- (void)beginSearchWithTimeout:(double)arg1 completion:(id /* block */)arg2;
- (void)beginSearchWithTimeout:(double)arg1 endpointsCompletion:(id /* block */)arg2;
- (id /* block */)callback;
- (id)callbackSyncQueue;
- (void)cancelSearch;
- (void)dealloc;
- (id)discoverySession;
- (id)discoverySessionCallbackToken;
- (unsigned int)endpointFeatures;
- (id)initWithOutputDeviceUIDs:(id)arg1 outputDeviceGroupID:(id)arg2 features:(unsigned int)arg3;
- (id)lastProcessedEndpoints;
- (id)lastProcessedOutputDevices;
- (id)matchingDevicesFound;
- (id)matchingEndpointsFound;
- (id)matchingLogicalDeviceIDs;
- (id)matchingOutputDeviceGroupID;
- (id)matchingOutputDeviceUIDs;
- (id)matchingOutputDeviceUIDsSet;
- (bool)returnPartialResults;
- (bool)searchInProgress;
- (void)setAvailableEndpoints:(id)arg1;
- (void)setAvailableOutputDevices:(id)arg1;
- (void)setCallback:(id /* block */)arg1;
- (void)setCallbackSyncQueue:(id)arg1;
- (void)setDiscoverySession:(id)arg1;
- (void)setDiscoverySessionCallbackToken:(id)arg1;
- (void)setLastProcessedEndpoints:(id)arg1;
- (void)setLastProcessedOutputDevices:(id)arg1;
- (void)setMatchingDevicesFound:(id)arg1;
- (void)setMatchingEndpointsFound:(id)arg1;
- (void)setMatchingLogicalDeviceIDs:(id)arg1;
- (void)setMatchingOutputDeviceGroupID:(id)arg1;
- (void)setMatchingOutputDeviceUIDsSet:(id)arg1;
- (void)setReturnPartialResults:(bool)arg1;
- (void)setSearchInProgress:(bool)arg1;
- (void)setShouldWaitForUnanimousEndpoints:(bool)arg1;
- (void)setTimeoutTimer:(id)arg1;
- (void)setUnanimousEndpoint:(id)arg1;
- (void)setUpdatesReceived:(unsigned long long)arg1;
- (void)setUseWeakMatching:(bool)arg1;
- (bool)shouldWaitForUnanimousEndpoints;
- (id)timeoutTimer;
- (id)unanimousEndpoint;
- (unsigned long long)updatesReceived;
- (bool)useWeakMatching;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
