<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MRUserSettings.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MediaRemote.framework/MRUserSettings.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote (1)
 */

@interface MRUserSettings : NSObject {
    bool  _externalDevicePairingAllowed;
    NSUserDefaults * _userDefaults;
}

@property (nonatomic, readonly) double activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval;
@property (nonatomic, readonly) double airPlayOutputContextInitTimeoutDuration;
@property (nonatomic, readonly) double bluetoothDeviceResumeDuration;
@property (nonatomic, readonly) double broadcastCommandWaitDuration;
@property (nonatomic, readonly) bool computeNowPlayingApplication;
@property (nonatomic, readonly) bool connectToAllEndpointsWhenAnyEndpointBeginsPlayback;
@property (nonatomic, readonly) bool connectToEndpointWhenBeginsPlayback;
@property (nonatomic, readonly) bool connectToUserSelectedEndpoint;
@property (nonatomic, retain) NSArray *connectedClientPIDs;
@property (nonatomic, readonly) double deviceRecentlyUsedInterval;
@property (nonatomic, readonly) double discoverEndpointTimeoutInterval;
@property (nonatomic, readonly) double endpointRecentlyUserSelectedInterval;
@property (nonatomic, readonly) double externalDeviceDisconnectSleepDuration;
@property (nonatomic, readonly) double externalDeviceDisconnectWaitDuration;
@property (nonatomic, readonly) double externalDeviceNowPlayingInfoArtworkCoalesceDuration;
@property (nonatomic, readonly) double externalDeviceNowPlayingInfoCoalesceDuration;
@property (getter=isExternalDevicePairingAllowed, nonatomic) bool externalDevicePairingAllowed;
@property (nonatomic, readonly) double externalDeviceSleepAssertionOnClientConnectDuration;
@property (nonatomic, readonly) long long externalDeviceSocketQOSLevel;
@property (nonatomic, readonly) double externalDeviceTimeoutDuration;
@property (nonatomic, readonly) bool hasExternalDeviceSocketQOSLevelSet;
@property (nonatomic, readonly) long long maxTransactionMemorySize;
@property (nonatomic, readonly) double mediaRecentlyPlayedInterval;
@property (nonatomic, readonly) bool needNowPlayingForegroundState;
@property (nonatomic, readonly) double nowPlayingApplicationTimeout;
@property (nonatomic, readonly) bool shouldInitializeGenericBonjourService;
@property (nonatomic, readonly) bool shouldInitializeRapportService;
@property (nonatomic, readonly) bool shouldInitializeTelevisionBonjourService;
@property (nonatomic, readonly) bool shouldLogArtwork;
@property (nonatomic, readonly) bool shouldLogPairingSetupCode;
@property (nonatomic, readonly) bool takelockScreenAssertion;
@property (nonatomic, readonly) double transactionWaitDurationOnNetworkSend;
@property (nonatomic, readonly) double transactionWaitDurationOnOutOfMemory;
@property (nonatomic, readonly) double transactionWaitDurationOnXpcSend;
@property (nonatomic, readonly) bool useDebugAVRouteWithoutVolumeControl;
@property (nonatomic, readonly) bool useDeviceLockStateToRestoreDeferredPlayerPaths;
@property (nonatomic, readonly) bool useExternalDeviceSystemPairing;
@property (nonatomic, readonly) bool useGenericTransportForHostedEndpoints;
@property (nonatomic, readonly) bool useNoDelayOptionForExternalDeviceSockets;
@property (nonatomic, readonly) bool usePeerToPeerExternalDeviceConnections;
@property (nonatomic, readonly) bool useProactiveEndpoint;
@property (nonatomic, readonly) bool useSystemAudioContextForAirPlayTransport;

+ (id)currentSettings;

- (void).cxx_destruct;
- (bool)_boolValueForKey:(id)arg1 usingDefaultValue:(bool)arg2;
- (double)_doubleValueForKey:(id)arg1 usingDefaultValue:(double)arg2;
- (long long)_integerValueForKey:(id)arg1 usingDefaultValue:(long long)arg2;
- (void)_removeValueForKey:(id)arg1;
- (double)activeSystemEndpointStartupDelayToAllowAllPreviousClientsTimeToInitializeInterval;
- (double)airPlayOutputContextInitTimeoutDuration;
- (double)bluetoothDeviceResumeDuration;
- (double)broadcastCommandWaitDuration;
- (bool)computeNowPlayingApplication;
- (bool)connectToAllEndpointsWhenAnyEndpointBeginsPlayback;
- (bool)connectToEndpointWhenBeginsPlayback;
- (bool)connectToUserSelectedEndpoint;
- (id)connectedClientPIDs;
- (double)deviceRecentlyUsedInterval;
- (double)discoverEndpointTimeoutInterval;
- (double)endpointRecentlyUserSelectedInterval;
- (double)externalDeviceDisconnectSleepDuration;
- (double)externalDeviceDisconnectWaitDuration;
- (double)externalDeviceNowPlayingInfoArtworkCoalesceDuration;
- (double)externalDeviceNowPlayingInfoCoalesceDuration;
- (double)externalDeviceSleepAssertionOnClientConnectDuration;
- (long long)externalDeviceSocketQOSLevel;
- (double)externalDeviceTimeoutDuration;
- (bool)hasExternalDeviceSocketQOSLevelSet;
- (id)init;
- (bool)isExternalDevicePairingAllowed;
- (long long)maxTransactionMemorySize;
- (double)mediaRecentlyPlayedInterval;
- (bool)needNowPlayingForegroundState;
- (double)nowPlayingApplicationTimeout;
- (void)setConnectedClientPIDs:(id)arg1;
- (void)setExternalDevicePairingAllowed:(bool)arg1;
- (bool)shouldInitializeGenericBonjourService;
- (bool)shouldInitializeRapportService;
- (bool)shouldInitializeTelevisionBonjourService;
- (bool)shouldLogArtwork;
- (bool)shouldLogPairingSetupCode;
- (bool)takelockScreenAssertion;
- (double)transactionWaitDurationOnNetworkSend;
- (double)transactionWaitDurationOnOutOfMemory;
- (double)transactionWaitDurationOnXpcSend;
- (bool)useDebugAVRouteWithoutVolumeControl;
- (bool)useDeviceLockStateToRestoreDeferredPlayerPaths;
- (bool)useExternalDeviceSystemPairing;
- (bool)useGenericTransportForHostedEndpoints;
- (bool)useNoDelayOptionForExternalDeviceSockets;
- (bool)usePeerToPeerExternalDeviceConnections;
- (bool)useProactiveEndpoint;
- (bool)useSystemAudioContextForAirPlayTransport;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
