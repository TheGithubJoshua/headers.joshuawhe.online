<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MRCoreUtilsPairingSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MediaRemote.framework/MRCoreUtilsPairingSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MediaRemote.framework/MediaRemote (1)
 */

@interface MRCoreUtilsPairingSession : MRCryptoPairingSession {
    MRPasscodeCredentials * _credentials;
    bool  _hasExchangedMessage;
    NSData * _inputKey;
    NSMutableData * _inputNonce;
    NSData * _outputKey;
    NSMutableData * _outputNonce;
    struct { 
        void *context; 
        int (*showSetupCode_f)(); 
        int (*hideSetupCode_f)(); 
        int (*promptForSetupCode_f)(); 
        int (*copyIdentity_f)(); 
        int (*findPeer_f)(); 
        int (*savePeer_f)(); 
        int (*resumeRequest_f)(); 
        int (*resumeResponse_f)(); 
    }  _pairingDelegate;
    unsigned int  _pairingFlags;
    struct PairingSessionPrivate { } * _pairingSession;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _state;
}

@property (nonatomic, readonly) bool hasExchangedMessage;
@property (nonatomic, retain) NSData *inputKey;
@property (nonatomic, retain) NSMutableData *inputNonce;
@property (nonatomic, readonly) NSMutableDictionary *mediaRemotePairedDevices;
@property (nonatomic, retain) NSData *outputKey;
@property (nonatomic, retain) NSMutableData *outputNonce;
@property (nonatomic, readonly) _MRDeviceInfoMessageProtobuf *pairedPeerDevice;
@property (nonatomic, readonly) NSArray *pairedPeerDevices;
@property (nonatomic) unsigned int pairingFlags;
@property (nonatomic, readonly) NSString *peerIdentifier;
@property (nonatomic, readonly) unsigned long long state;

- (void).cxx_destruct;
- (void*)_createDeviceFromPeer:(id)arg1;
- (id)_createPeerDeviceFromPeer:(id)arg1;
- (void)_delegateDidEnterPasscode:(id)arg1;
- (int)_displaySetupCode:(id)arg1;
- (id)_generateSetupCodeWithMaximumLength:(unsigned long long)arg1;
- (void)_handlePairingCompleteWithError:(id)arg1;
- (void)_handlePairingFailureWithError:(id)arg1;
- (void)_handleSetupExchangeComplete;
- (void)_hideSetupCode;
- (void)_onQueueDeriveEncryptionKeys;
- (id)_onQueueInitializePairingSessionWithState:(unsigned long long)arg1;
- (id)_onQueuePerformPairingExchangeWithInputData:(id)arg1 error:(id*)arg2;
- (int)_promptForSetupCodeWithDelay:(double)arg1;
- (id)addPeer;
- (void)close;
- (void)dealloc;
- (id)decryptData:(id)arg1 withError:(id*)arg2;
- (bool)deleteIdentityWithError:(id*)arg1;
- (id)encryptData:(id)arg1 withError:(id*)arg2;
- (id)extendedPeerInfo;
- (void)handlePairingExchangeData:(id)arg1 completion:(id /* block */)arg2;
- (void)handlePairingFailureWithStatus:(int)arg1;
- (bool)hasExchangedMessage;
- (id)initWithRole:(unsigned long long)arg1 device:(id)arg2;
- (id)initializePairingSession:(struct PairingSessionPrivate { }*)arg1;
- (id)inputKey;
- (id)inputNonce;
- (bool)isPaired;
- (bool)isValid;
- (struct NSMutableDictionary { Class x1; }*)mediaRemotePairedDevices;
- (void)open;
- (void)openInState:(unsigned long long)arg1;
- (id)outputKey;
- (id)outputNonce;
- (id)pairedDevices;
- (id)pairedPeerDevice;
- (id)pairedPeerDevices;
- (unsigned int)pairingFlags;
- (id)peerIdentifier;
- (id)removePeer;
- (void)retry;
- (void)setInputKey:(id)arg1;
- (void)setInputNonce:(id)arg1;
- (void)setOutputKey:(id)arg1;
- (void)setOutputNonce:(id)arg1;
- (void)setPairingFlags:(unsigned int)arg1;
- (bool)shouldAutoRetry;
- (bool)shouldAutoRetryPairingExchange:(id)arg1;
- (unsigned long long)state;
- (id)updatePeer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
