<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SBFUserAuthenticationController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SpringBoardFoundation.framework/SBFUserAuthenticationController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation (1)
 */

@interface SBFUserAuthenticationController : NSObject <SBFAuthenticationStatusProvider, SBFMobileKeyBagObserver, SBFPasscodeFieldChangeObserver, SBFUserAuthenticationModelDelegate> {
    SBFAuthenticationAssertionManager * _assertionManager;
    long long  _authenticationState;
    long long  _cachedAuthFlag;
    SBFMobileKeyBagState * _cachedExtendedState;
    bool  _inSecureMode;
    SBFMobileKeyBag * _keybag;
    NSString * _lastIncorrectPasscodeAttempt;
    NSDate * _lastRevokedAuthenticationDate;
    <SBFUserAuthenticationModel> * _model;
    NSHashTable * _observers;
    <SBFAuthenticationPolicy> * _policy;
    NSMutableArray * _responders;
    struct __CFRunLoopObserver { } * _runLoopObserver;
    SBFAuthenticationAssertion * _transientAuthCheckingAssertion;
    PCPersistentTimer * _unblockTimer;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSDate *lastRevokedAuthenticationDate;
@property (getter=_policy, setter=_setPolicy:, nonatomic, retain) <SBFAuthenticationPolicy> *policy;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_addAsFirstResponder:(id)arg1;
- (void)_addAuthenticationAssertion:(id)arg1;
- (void)_addPrivateAuthenticationObserver:(id)arg1;
- (bool)_authenticateIfInGracePeriod;
- (bool)_boolForAuthenticationResult:(long long)arg1;
- (id)_cachedLockStateExtended;
- (void)_clearBlockedState;
- (void)_clearUnblockTimer;
- (long long)_evaluateAuthenticationAttempt:(id)arg1 outError:(id*)arg2;
- (long long)_evaluateBiometricAttempt:(id)arg1;
- (long long)_evaluatePasscodeAttempt:(id)arg1 outError:(id*)arg2;
- (void)_handleFailedAuthentication:(id)arg1 error:(id)arg2 responder:(id)arg3;
- (void)_handleInvalidAuthentication:(id)arg1 responder:(id)arg2;
- (void)_handleSuccessfulAuthentication:(id)arg1 responder:(id)arg2;
- (void)_invalidateCachedPasscodeLockState;
- (bool)_isAssertionValid:(id)arg1;
- (bool)_isInBioUnlockState;
- (bool)_isInGracePeriodState;
- (bool)_isPermanentlyBlocked;
- (bool)_isTemporarilyBlocked;
- (bool)_isUserAuthenticated;
- (void)_noteDeviceLockStateMayHaveChangedForExternalReasons;
- (void)_notifyAboutTemporaryBlockStatusChanged;
- (void)_notifyClientsOfAuthenticationResult:(long long)arg1 forRequest:(id)arg2 error:(id)arg3 withResponder:(id)arg4;
- (bool)_performNilPasscodeCheck;
- (id)_policy;
- (bool)_processAuthenticationRequest:(id)arg1 responder:(id)arg2;
- (void)_refreshModelCacheIfNeeded;
- (void)_removeAuthResponder:(id)arg1;
- (void)_removeAuthenticationAssertion:(id)arg1;
- (void)_removePrivateAuthenticationObserver:(id)arg1;
- (void)_revokeAuthenticationImmediately:(bool)arg1 forPublicReason:(id)arg2;
- (void)_scheduleUnblockTimer;
- (void)_setAuthState:(long long)arg1;
- (void)_setModel:(id)arg1;
- (void)_setPolicy:(id)arg1;
- (void)_setSecureMode:(bool)arg1 postNotification:(bool)arg2;
- (void)_setupPolicy:(id)arg1;
- (void)_setup_runLoopObserverIfNecessary;
- (bool)_shouldRevokeAuthenticationNow;
- (double)_timeUntilUnblockedSinceReferenceDate;
- (void)_unblockTimerFired;
- (void)_uncachePasscodeIfNecessary;
- (void)_updateAuthenticationStateAndDateForLockState:(id)arg1;
- (void)_updateAuthenticationStateForPublicReason:(id)arg1;
- (void)_updateAuthenticationStateImmediately:(bool)arg1 forPublicReason:(id)arg2;
- (void)_updateSecureModeIfNecessaryForNewAuthState;
- (void)addAsFirstResponder:(id)arg1;
- (id)createGracePeriodAssertionWithReason:(id)arg1;
- (id)createKeybagUnlockAssertionWithReason:(id)arg1;
- (void)dealloc;
- (id)description;
- (id)descriptionBuilderWithMultilinePrefix:(id)arg1;
- (id)descriptionWithMultilinePrefix:(id)arg1;
- (void)deviceLockModelRequestsDeviceWipe:(id)arg1;
- (void)deviceLockStateMayHaveChangedForModel:(id)arg1;
- (bool)hasAuthenticatedAtLeastOnceSinceBoot;
- (bool)hasPasscodeSet;
- (id)initWithAssertionManager:(id)arg1 policy:(id)arg2;
- (id)initWithAssertionManager:(id)arg1 policy:(id)arg2 keybag:(id)arg3 model:(id)arg4;
- (bool)isAuthenticated;
- (bool)isAuthenticatedCached;
- (void)keybag:(id)arg1 extendedStateDidChange:(id)arg2;
- (void)keybagDidUnlockForTheFirstTime:(id)arg1;
- (id)lastRevokedAuthenticationDate;
- (void)notePasscodeEntryBegan;
- (void)notePasscodeEntryCancelled;
- (void)processAuthenticationRequest:(id)arg1;
- (void)processAuthenticationRequest:(id)arg1 responder:(id)arg2;
- (id)publicDescription;
- (void)removeResponder:(id)arg1;
- (void)revokeAuthenticationIfNecessaryForPublicReason:(id)arg1;
- (void)revokeAuthenticationImmediatelyForPublicReason:(id)arg1;
- (void)revokeAuthenticationImmediatelyIfNecessaryForPublicReason:(id)arg1;
- (id)succinctDescription;
- (id)succinctDescriptionBuilder;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
