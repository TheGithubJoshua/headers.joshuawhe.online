<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CMKTimelapseStabilizationMovieWriter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraKit.framework/CMKTimelapseStabilizationMovieWriter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit (1)
 */

@interface CMKTimelapseStabilizationMovieWriter : NSObject <AVOfflineVideoStabilizerDataProvider, CMKTimelapseMovieWriterProtocol> {
    id /* block */  __completion;
    struct __CVBuffer { } * __firstSourceFrame;
    NSArray * __frameFilePaths;
    long long  __framesPerSecond;
    long long  __framesWrittenCount;
    NSObject<OS_dispatch_queue> * __movieWritingQueue;
    AVAssetWriterInputPixelBufferAdaptor * __pixelBufferAdaptor;
    long long  __sourceFramesReadCount;
    AVOfflineVideoStabilizer * __stabilizer;
    struct opaqueCMFormatDescription { } * __videoFormatDescription;
    AVAssetWriterInput * __videoInput;
    NSArray * __visMetadataFilePaths;
    AVAssetWriter * __writer;
}

@property (nonatomic, readonly, copy) id /* block */ _completion;
@property (nonatomic, readonly) struct __CVBuffer { }*_firstSourceFrame;
@property (nonatomic, readonly) NSArray *_frameFilePaths;
@property (nonatomic, readonly) long long _framesPerSecond;
@property (nonatomic, readonly) long long _framesWrittenCount;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_movieWritingQueue;
@property (nonatomic, readonly) AVAssetWriterInputPixelBufferAdaptor *_pixelBufferAdaptor;
@property (nonatomic, readonly) long long _sourceFramesReadCount;
@property (nonatomic, readonly) AVOfflineVideoStabilizer *_stabilizer;
@property (nonatomic, readonly) struct opaqueCMFormatDescription { }*_videoFormatDescription;
@property (nonatomic, readonly) AVAssetWriterInput *_videoInput;
@property (nonatomic, readonly) NSArray *_visMetadataFilePaths;
@property (nonatomic, readonly) AVAssetWriter *_writer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (bool)_appendSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (id /* block */)_completion;
- (struct opaqueCMSampleBuffer { }*)_copyNextSampleBufferForAssetWriter;
- (struct __CVBuffer { }*)_copySourcePixelBufferForFrameNumber:(long long)arg1;
- (struct CGSize { double x1; double x2; })_desiredOutputSizeForFrameSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_finishMovieWithCompletionHandler:(id /* block */)arg1;
- (struct __CVBuffer { }*)_firstSourceFrame;
- (id)_frameFilePaths;
- (long long)_framesPerSecond;
- (long long)_framesWrittenCount;
- (id)_movieWritingQueue;
- (id)_pixelBufferAdaptor;
- (void)_reset;
- (void)_setMetadataOnVideoTrackAssetWriterInput:(id)arg1;
- (long long)_sourceFramesReadCount;
- (id)_stabilizer;
- (bool)_startWritingWithOutputPath:(id)arg1 width:(long long)arg2 height:(long long)arg3 videoFormatDescription:(struct opaqueCMFormatDescription { }*)arg4 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 framesPerSecond:(long long)arg6 frameCount:(long long)arg7 visMetadataCount:(long long)arg8 videoMetadata:(id)arg9;
- (struct opaqueCMFormatDescription { }*)_videoFormatDescription;
- (id)_videoInput;
- (id)_visMetadataFilePaths;
- (void)_writeMovieAsynchronously;
- (id)_writer;
- (struct __CVBuffer { }*)copySourcePixelBufferForFrameNumber:(long long)arg1 outputSampleTime:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg2 stabilizer:(id)arg3;
- (id)copySourceStabilizationMetadataForFrameNumber:(long long)arg1 outputSampleTime:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg2 stabilizer:(id)arg3;
- (id)init;
- (void)writeMovieFromImageFiles:(id)arg1 visMetadataFiles:(id)arg2 startDate:(id)arg3 location:(id)arg4 outputPath:(id)arg5 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6 framesPerSecond:(long long)arg7 completionHandler:(id /* block */)arg8;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
