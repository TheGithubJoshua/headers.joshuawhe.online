<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CMKApplicationViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraKit.framework/CMKApplicationViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit (1)
 */

@interface CMKApplicationViewController : CMKCameraViewController <CMKCameraRollObserver, UINavigationControllerDelegate> {
    UIView * __autorotationCorrectionView;
    <NSObject> * __cameraRollNotificationToken;
    UIViewController * __cameraRollViewController;
    bool  __didApplyConfigurationToCameraView;
    bool  __dismissingCameraRoll;
    bool  __dismissingCameraRollForSuspension;
    bool  __hasLockedSinceLastConfigurationChange;
    int  __lockToResetToken;
    UIView * __rootContainerView;
    bool  __shouldRetryDismissal;
    bool  __shouldShowCameraRoll;
    NSDictionary * _configuration;
    <PLApplicationCameraViewControllerDelegate> * _delegate;
    id /* block */  _doneButtonAction;
    bool  _isReadyToTest;
    CMKKeepDaemonAliveAssertion * _keepDaemonAliveAssertion;
    id /* block */  _previewButtonAction;
    double  _sessionStartTime;
    long long  _testPictureCounter;
    double  _testPictureRepeatDelay;
    long long  _testPicturesReceivedCounter;
    bool  _usesSessionAlbum;
}

@property (nonatomic, readonly) UIView *_autorotationCorrectionView;
@property (nonatomic, readonly) <NSObject> *_cameraRollNotificationToken;
@property (nonatomic, readonly) UIViewController *_cameraRollViewController;
@property (nonatomic) bool _didApplyConfigurationToCameraView;
@property (getter=_isDismissingCameraRoll, setter=_setDismissingCameraRoll:, nonatomic) bool _dismissingCameraRoll;
@property (getter=_isDismissingCameraRollForSuspension, setter=_setDismissingCameraRollForSuspension:, nonatomic) bool _dismissingCameraRollForSuspension;
@property (setter=_setHasLockedSinceLastConfigurationChange:, nonatomic) bool _hasLockedSinceLastConfigurationChange;
@property (nonatomic, readonly) int _lockToResetToken;
@property (nonatomic, readonly) UIView *_rootContainerView;
@property (nonatomic, readonly) bool _shouldRetryDismissal;
@property (setter=_setShouldShowCameraRoll:, nonatomic) bool _shouldShowCameraRoll;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PLApplicationCameraViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) id /* block */ previewButtonAction;
@property (readonly) Class superclass;
@property (nonatomic) long long testPictureCounter;
@property (nonatomic) double testPictureRepeatDelay;

- (void).cxx_destruct;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applyAutorotationCorrectingTransformForOrientation:(long long)arg1;
- (void)_applyConfiguration;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_autorotationCorrectingTransformFromOrientation:(long long)arg1;
- (id)_autorotationCorrectionView;
- (bool)_cameraIsRunning;
- (id)_cameraRollNotificationToken;
- (void)_cameraRollReload:(id)arg1;
- (id)_cameraRollViewController;
- (void)_createPhysicalCaptureRecognizerIfNecessary;
- (void)_defaultCameraDevice:(id*)arg1 cameraMode:(id*)arg2;
- (id)_dictionaryFromPackedArray:(id)arg1;
- (bool)_didApplyConfigurationToCameraView;
- (void)_didPerformPhysicalCapture:(id)arg1;
- (void)_getRotationContentSettings:(struct { bool x1; bool x2; bool x3; bool x4; bool x5; double x6; int x7; }*)arg1;
- (bool)_hasLockedSinceLastConfigurationChange;
- (bool)_isDismissingCameraRoll;
- (bool)_isDismissingCameraRollForSuspension;
- (void)_kickoffCameraControllerPreview;
- (int)_lockToResetToken;
- (void)_makeViewControllersPerformSelector:(SEL)arg1 withNotification:(id)arg2;
- (id)_packedArrayFromDictionary:(id)arg1;
- (void)_previewStarted:(id)arg1;
- (void)_refreshCameraUIForAlbumChange;
- (id)_rootContainerView;
- (void)_saveConfiguration;
- (void)_setDismissingCameraRoll:(bool)arg1;
- (void)_setDismissingCameraRollForSuspension:(bool)arg1;
- (void)_setHasLockedSinceLastConfigurationChange:(bool)arg1;
- (void)_setShouldShowCameraRoll:(bool)arg1;
- (void)_setupLockToResetNotifications;
- (bool)_shouldResetMode:(id)arg1;
- (bool)_shouldResumeTorch;
- (bool)_shouldRetryDismissal;
- (bool)_shouldShowCameraRoll;
- (void)_startCameraPreviewWithPreviewStartedBlock:(id /* block */)arg1;
- (void)_startPictureTestAfterSeconds:(double)arg1;
- (id)_stringForHDRMode:(int)arg1;
- (id)_stringForTimerDuration:(long long)arg1;
- (void)_teardownLockToResetNotifications;
- (void)_updateCameraRollSession;
- (void)_updatePhysicalButtonCapturedEnabled;
- (void)animateBlurForSuspension;
- (void)applicationDidResume;
- (void)applicationWillSuspend;
- (void)cameraPreviewWellImageDidChange:(id)arg1;
- (void)cameraViewDidFinishUnblurringForPreview:(id)arg1;
- (void)cameraViewFinishedSuspensionBlur:(id)arg1;
- (void)cameraViewFinishedTakingPicture:(id)arg1;
- (bool)cameraViewShouldShowPreviewAfterSelection:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (void)dismissCameraRoll:(id)arg1;
- (void)dismissCameraRollAnimated:(bool)arg1 forSuspension:(bool)arg2;
- (void)dismissCameraRollForCameraView:(id)arg1;
- (void)dismissCameraRollForSuspension;
- (id)init;
- (id)initWithSessionID:(id)arg1 startPreviewImmediately:(bool)arg2;
- (id)initWithSessionID:(id)arg1 usesCameraLocationBundleID:(bool)arg2 startPreviewImmediately:(bool)arg3;
- (void)loadView;
- (void)navigationController:(id)arg1 didShowViewController:(id)arg2 animated:(bool)arg3;
- (id)newAlbumNavigationControllerForCameraRoll:(id)arg1;
- (void)photoLibraryDidChange:(id)arg1;
- (void)preferencesDidChange;
- (bool)prefersStatusBarHidden;
- (void)prepareAlbumNavigationControllerForReuse:(id)arg1 withCameraRoll:(id)arg2;
- (void)prepareForDefaultImageSnapshot;
- (void)prepareForDismissal;
- (void)prepareForSuspension;
- (void)presentCameraRollAboveCameraView:(id)arg1;
- (id /* block */)previewButtonAction;
- (void)reloadAlbumNavigationController:(id)arg1 withCameraRoll:(id)arg2;
- (void)saveCameraConfiguration;
- (void)setDelegate:(id)arg1;
- (void)setPreviewButtonAction:(id /* block */)arg1;
- (void)setSessionID:(id)arg1;
- (void)setTestPictureCounter:(long long)arg1;
- (void)setTestPictureRepeatDelay:(double)arg1;
- (void)setUsesSessionAlbum:(bool)arg1;
- (void)set_didApplyConfigurationToCameraView:(bool)arg1;
- (bool)shouldAnimateBlurForSuspension;
- (bool)shouldAutorotate;
- (bool)shouldAutorotateToInterfaceOrientation:(long long)arg1;
- (bool)showingCameraPreview;
- (void)startCameraPreview;
- (void)startCameraPreviewWithSavedConfiguration;
- (void)startPictureTest;
- (void)stopCameraPreview;
- (void)stopCameraPreviewAnimated:(bool)arg1;
- (unsigned long long)supportedInterfaceOrientations;
- (void)takePicture;
- (long long)testPictureCounter;
- (double)testPictureRepeatDelay;
- (void)testSetAutofocusDisabled:(bool)arg1;
- (void)testSetHDROn:(bool)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillShowForLaunch;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
