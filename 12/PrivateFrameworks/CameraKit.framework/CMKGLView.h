<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CMKGLView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraKit.framework/CMKGLView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit (1)
 */

@interface CMKGLView : UIView {
    EAGLContext * __atomicContext;
    struct CGSize { 
        double width; 
        double height; 
    }  __atomicFixedSize;
    bool  __atomicRetainedBacking;
    bool  __disableLayoutForGLLayerInternal;
    bool  __shouldDeleteFramebuffer;
    bool  _disableLayoutForGLLayer;
    long long  _drawableHeight;
    long long  _drawableWidth;
    unsigned int  _framebuffer;
    CAEAGLLayer * _glLayer;
    PLGLLayerDelegate * _glLayerDelegate;
    id /* block */  _renderNotifyBlock;
    unsigned int  _renderbuffer;
}

@property (setter=_setAtomicContext:, retain) EAGLContext *_atomicContext;
@property (setter=_setAtomicFixedSize:) struct CGSize { double x1; double x2; } _atomicFixedSize;
@property (setter=_setAtomicRetainedBacking:) bool _atomicRetainedBacking;
@property (getter=_isDisabledLayoutForGLLayerInternal, setter=_setDisableLayoutForGLLayerInternal:, nonatomic) bool _disableLayoutForGLLayerInternal;
@property (setter=_setShouldDeleteFramebuffer:) bool _shouldDeleteFramebuffer;
@property (nonatomic, retain) EAGLContext *context;
@property (getter=isDisabledLayoutForGLLayer, nonatomic) bool disableLayoutForGLLayer;
@property long long drawableHeight;
@property long long drawableWidth;
@property (nonatomic) struct CGSize { double x1; double x2; } fixedSize;
@property (nonatomic, readonly, retain) CAEAGLLayer *glLayer;
@property (nonatomic, copy) id /* block */ renderNotifyBlock;
@property (nonatomic) bool retainedBacking;

- (void).cxx_destruct;
- (id)_atomicContext;
- (struct CGSize { double x1; double x2; })_atomicFixedSize;
- (bool)_atomicRetainedBacking;
- (void)_configureLayer;
- (void)_createFramebufferInContext:(id)arg1;
- (void)_deleteFramebufferInContext:(id)arg1;
- (void)_handleRenderNotifyBlock;
- (bool)_isDisabledLayoutForGLLayerInternal;
- (void)_layoutGLLayer;
- (void)_setAtomicContext:(id)arg1;
- (void)_setAtomicFixedSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setAtomicRetainedBacking:(bool)arg1;
- (void)_setDisableLayoutForGLLayerInternal:(bool)arg1;
- (bool)_setFramebuffer:(bool*)arg1 context:(id)arg2;
- (void)_setShouldDeleteFramebuffer:(bool)arg1;
- (bool)_shouldDeleteFramebuffer;
- (id)context;
- (void)dealloc;
- (long long)drawableHeight;
- (long long)drawableWidth;
- (struct CGSize { double x1; double x2; })fixedSize;
- (void)forceDestroyGLResources;
- (id)glLayer;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDisabledLayoutForGLLayer;
- (void)layoutSubviews;
- (id /* block */)renderNotifyBlock;
- (void)renderPixelBuffer:(struct __CVBuffer { }*)arg1 ciContext:(id)arg2 mirrorRendering:(bool)arg3;
- (void)renderWithBlock:(id /* block */)arg1;
- (bool)retainedBacking;
- (void)setContentMode:(long long)arg1;
- (void)setContentScaleFactor:(double)arg1;
- (void)setContext:(id)arg1;
- (void)setDisableLayoutForGLLayer:(bool)arg1;
- (void)setDrawableHeight:(long long)arg1;
- (void)setDrawableWidth:(long long)arg1;
- (void)setFixedSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setRenderNotifyBlock:(id /* block */)arg1;
- (void)setRetainedBacking:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
