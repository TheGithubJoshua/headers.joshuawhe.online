<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CMKEffectsRenderer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraKit.framework/CMKEffectsRenderer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraKit.framework/CameraKit (1)
 */

@interface CMKEffectsRenderer : NSObject {
    id /* block */  __atomicPreviewStartedBlock;
    bool  __atomicPreviewStartedNotificationNeeded;
    bool  __inBackground;
    bool  __previewLayerEnabled;
    CMKEffectsFullsizeView * __renderEffectsFullsizeView;
    CMKEffectsGridView * __renderGridView;
    long long  _atomicCameraMode;
    unsigned long long  _atomicFilterIndex;
    bool  _atomicMirrorFilterRendering;
    CMKVideoPreviewView * _atomicVideoPreviewView;
    CIContext * _ciContext;
    <PLCameraEffectsRendererDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    unsigned long long  _droppedFramesSinceLastReportedFrameDrop;
    EAGLContext * _eaglContext;
    bool  _gridTransitionInFlight;
    bool  _gridTransitionIsAnimated;
    bool  _isShowingGrid;
    double  _lastReportedFrameDropTime;
    unsigned long long  _totalFramesSinceLastReportedFrameDrop;
}

@property (getter=_isInBackground, setter=_setInBackground:) bool _inBackground;
@property (setter=_setPreviewLayerEnabled:, nonatomic) bool _previewLayerEnabled;
@property (setter=_setPreviewStartedBlock:, copy) id /* block */ _previewStartedBlock;
@property (setter=_setPreviewStartedNotificationNeeded:) bool _previewStartedNotificationNeeded;
@property (setter=_setRenderEffectsFullsizeView:, retain) CMKEffectsFullsizeView *_renderEffectsFullsizeView;
@property (setter=_setRenderGridView:, retain) CMKEffectsGridView *_renderGridView;
@property unsigned long long atomicFilterIndex;
@property (retain) CMKVideoPreviewView *atomicVideoPreviewView;
@property long long cameraMode;
@property (nonatomic) <PLCameraEffectsRendererDelegate> *delegate;
@property (nonatomic) unsigned long long filterIndex;
@property bool mirrorFilterRendering;
@property (getter=isShowingGrid, nonatomic) bool showGrid;
@property (nonatomic, retain) CMKVideoPreviewView *videoPreviewView;

- (void).cxx_destruct;
- (void)_animateGridLayerZoomToGrid:(bool)arg1;
- (void)_animateLayer:(id)arg1 startFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 endFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 viewTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg4 animationDuration:(double)arg5 animationTimingFunction:(id)arg6 animationDelegate:(id)arg7;
- (void)_animateToGrid:(bool)arg1 layer:(id)arg2 fadeOutLayer:(id)arg3 startFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 endFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 completion:(id /* block */)arg6;
- (id)_animatedLayerForView:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_createContextIfNecessary;
- (void)_destroyEffectsFullsizeView;
- (void)_destroyEffectsGridView;
- (void)_deviceStarted:(id)arg1;
- (void)_forceResetToFilteredRendering:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameToZoomFromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 withinFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_gridFrameForCurrentFilters;
- (bool)_gridTransitionInFlight;
- (void)_handlePreviewStartedFiltered:(bool)arg1;
- (bool)_isInBackground;
- (void)_notifyOfRenderIfNecessary;
- (bool)_previewLayerEnabled;
- (void)_previewStarted:(id)arg1;
- (id /* block */)_previewStartedBlock;
- (bool)_previewStartedNotificationNeeded;
- (id)_renderEffectsFullsizeView;
- (id)_renderGridView;
- (void)_renderWithSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_reportStatsForFrameDrops;
- (void)_resumeRendering;
- (void)_runOnMainThreadImmediatelyIfPossibleWithBlock:(id /* block */)arg1;
- (void)_setGridTransitionIsInFlight:(bool)arg1;
- (void)_setInBackground:(bool)arg1;
- (void)_setPreviewLayerEnabled:(bool)arg1;
- (void)_setPreviewStartedBlock:(id /* block */)arg1;
- (void)_setPreviewStartedNotificationNeeded:(bool)arg1;
- (void)_setRenderEffectsFullsizeView:(id)arg1;
- (void)_setRenderGridView:(id)arg1;
- (void)_setVideoDataOutputEnabled:(bool)arg1;
- (id)_setupEffectsFullsizeView;
- (id)_setupEffectsGridView;
- (void)_setupEffectsView:(id)arg1;
- (void)_tearDownEffectsView:(id)arg1 removeFromSuperview:(bool)arg2;
- (void)_transitionFromGrid:(id /* block */)arg1;
- (void)_transitionToGrid:(id /* block */)arg1;
- (void)_updateEffectsFullsizeView;
- (void)_updateStatsForFrameWasDropped:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_zoomedFrameForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromFullFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 toZoomFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (unsigned long long)atomicFilterIndex;
- (id)atomicVideoPreviewView;
- (long long)cameraMode;
- (void)dealloc;
- (id)delegate;
- (void)didDropSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (unsigned long long)filterIndex;
- (id)init;
- (id)initWithDispatchQueue:(id)arg1;
- (bool)isShowingGrid;
- (bool)mirrorFilterRendering;
- (void)renderWithSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)setAtomicFilterIndex:(unsigned long long)arg1;
- (void)setAtomicVideoPreviewView:(id)arg1;
- (void)setCameraMode:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFilterIndex:(unsigned long long)arg1;
- (void)setFilterIndex:(unsigned long long)arg1 forceStateChange:(bool)arg2 renderNotifyBlock:(id /* block */)arg3;
- (void)setMirrorFilterRendering:(bool)arg1;
- (void)setShowGrid:(bool)arg1;
- (void)setShowGrid:(bool)arg1 animated:(bool)arg2;
- (void)setVideoPreviewView:(id)arg1;
- (id)videoPreviewView;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
