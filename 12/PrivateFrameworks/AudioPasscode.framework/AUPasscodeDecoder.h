<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AUPasscodeDecoder.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AudioPasscode.framework/AUPasscodeDecoder.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AudioPasscode.framework/AudioPasscode (1)
 */

@interface AUPasscodeDecoder : AUAudioUnit {
    unsigned int  _actualChannelCount;
    struct map<unsigned int, apc::Any, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, apc::Any> > > { 
        struct __tree<std::__1::__value_type<unsigned int, apc::Any>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, apc::Any>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, apc::Any> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, apc::Any>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, apc::Any>, std::__1::less<unsigned int>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _apcDecoderConfig;
    AUPasscodeCodecConfiguration * _codecConfig;
    struct mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } __m_; 
    }  _ctMutex;
    id /* block */  _dataHandler;
    bool  _deliverDataSerially;
    unsigned int  _desiredChannelCount;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    NSMutableData * _incomingPayload;
    struct BufferedInputBus { 
        AUAudioUnitBus *bus; 
        unsigned int maxFrames; 
        AVAudioPCMBuffer *pcmBuffer; 
        struct AudioBufferList {} *originalAudioBufferList; 
        struct AudioBufferList {} *mutableAudioBufferList; 
    }  _inputBus;
    AUAudioUnitBusArray * _inputBusArray;
    struct unique_ptr<AudioCapturerIfc, std::__1::default_delete<AudioCapturerIfc> > { 
        struct __compressed_pair<AudioCapturerIfc *, std::__1::default_delete<AudioCapturerIfc> > { 
            struct AudioCapturerIfc {} *__value_; 
        } __ptr_; 
    }  _inputCapturer;
    struct unique_ptr<APCDecoderBase, std::__1::default_delete<APCDecoderBase> > { 
        struct __compressed_pair<APCDecoderBase *, std::__1::default_delete<APCDecoderBase> > { 
            struct APCDecoderBase {} *__value_; 
        } __ptr_; 
    }  _kernel;
    struct vector<DecodedDataMessage, std::__1::allocator<DecodedDataMessage> > { 
        struct DecodedDataMessage {} *__begin_; 
        struct DecodedDataMessage {} *__end_; 
        struct __compressed_pair<DecodedDataMessage *, std::__1::allocator<DecodedDataMessage> > { 
            struct DecodedDataMessage {} *__value_; 
        } __end_cap_; 
    }  _messagePool;
    AUAudioUnitBus * _outputBus;
    AUAudioUnitBusArray * _outputBusArray;
    APCListenerResultData * _resultData;
    struct unique_ptr<RealtimeMessenger, std::__1::default_delete<RealtimeMessenger> > { 
        struct __compressed_pair<RealtimeMessenger *, std::__1::default_delete<RealtimeMessenger> > { 
            struct RealtimeMessenger {} *__value_; 
        } __ptr_; 
    }  _rtMessenger;
    struct vector<unsigned char, std::__1::allocator<unsigned char> > { 
        char *__begin_; 
        char *__end_; 
        struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > { 
            char *__value_; 
        } __end_cap_; 
    }  _rxDataBuffer;
}

@property (nonatomic, retain) AUPasscodeCodecConfiguration *codecConfig;
@property (nonatomic, copy) id /* block */ dataHandler;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic, retain) APCListenerResultData *resultData;

+ (struct AudioComponentDescription { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })getAUDesc;
+ (void)registerAU;
+ (id)supportedDecoders;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)allocateRenderResourcesAndReturnError:(id*)arg1;
- (id)codecConfig;
- (id /* block */)dataHandler;
- (void)deallocateRenderResources;
- (id)dispatchQueue;
- (void)handleDecodedData:(void*)arg1 ofLength:(int)arg2;
- (id)initWithComponentDescription:(struct AudioComponentDescription { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })arg1 options:(unsigned int)arg2 error:(id*)arg3;
- (id)inputBusses;
- (id /* block */)internalRenderBlock;
- (id)outputBusses;
- (id)resultData;
- (void)setCodecConfig:(id)arg1;
- (void)setDataHandler:(id /* block */)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setRenderingOffline:(bool)arg1;
- (void)setResultData:(id)arg1;
- (void)startAudioLogCapture;
- (void)stopAudioLogCapture;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
