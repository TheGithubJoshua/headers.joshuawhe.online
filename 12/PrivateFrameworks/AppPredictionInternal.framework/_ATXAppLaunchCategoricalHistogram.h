<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_ATXAppLaunchCategoricalHistogram.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AppPredictionInternal.framework/_ATXAppLaunchCategoricalHistogram.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AppPredictionInternal.framework/AppPredictionInternal (1)
 */

@interface _ATXAppLaunchCategoricalHistogram : NSObject <NSSecureCoding, _ATXAppLaunchHistogramProtocol> {
    NSMutableDictionary * _categoryToCategoryId;
    ATXHistogramData * _histogramData;
    NSMutableDictionary * _lastDates;
    unsigned short  _maxCategoryCount;
    unsigned short  _maxCategoryId;
    double  _maxSSIDCount;
    NSString * _prevCategory;
    unsigned short  _prevCategoryId;
    long long  _pruningMethod;
    _ATXInternalUninstallNotification * _uninstallNotificationListener;
}

@property (nonatomic, readonly) unsigned short categoryCount;
@property (nonatomic, readonly) unsigned short maxCategoryCount;
@property (nonatomic, readonly) long long pruningMethod;

+ (id)stringForPruningMethod:(long long)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (unsigned short)_categoryIdforCategory:(id)arg1;
- (unsigned short)_eventIdforBundleId:(id)arg1;
- (void)_garbageCollectCategoryIds;
- (void)_reduceCategoryCountTo:(unsigned short)arg1;
- (void)_removeMappingForCategory:(id)arg1;
- (void)_setMaxCategoryCount:(unsigned short)arg1 pruningMethod:(long long)arg2;
- (bool)_tryGetCategoryIdforCategory:(id)arg1 createIfMissing:(bool)arg2 categoryIdOut:(unsigned short*)arg3;
- (bool)_tryGetEventIdforBundleId:(id)arg1 createIfMissing:(bool)arg2 eventIdOut:(unsigned short*)arg3;
- (void)addLaunchWithBundleId:(id)arg1 date:(id)arg2 category:(id)arg3;
- (void)addLaunchWithBundleId:(id)arg1 date:(id)arg2 category:(id)arg3 weight:(float)arg4;
- (bool)bundleHasBeenLaunched:(id)arg1;
- (unsigned short)categoryCount;
- (void)decayByFactor:(double)arg1;
- (void)decayWithHalfLife:(double)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (double)entropy;
- (double)entropyForBundleId:(id)arg1;
- (double)entropyForCategory:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithHistogram:(id)arg1 categoryToCategoryId:(id)arg2 maxCategoryId:(unsigned short)arg3 maxCategoryCount:(unsigned short)arg4 lastDates:(id)arg5 pruningMethod:(long long)arg6;
- (id)initWithType:(long long)arg1;
- (id)initWithType:(long long)arg1 maxCategoryCount:(unsigned short)arg2 pruningMethod:(long long)arg3;
- (id)lastDate;
- (double)launchPopularityWithBundleId:(id)arg1 category:(id)arg2;
- (unsigned short)maxCategoryCount;
- (double)overallLaunchPopularityForBundleId:(id)arg1;
- (double)overallLaunchPopularityForBundleId:(id)arg1 category:(id)arg2;
- (double)overallLaunchPopularityForCategory:(id)arg1;
- (long long)pruningMethod;
- (double)ratio:(double)arg1 over:(double)arg2;
- (double)relativeLaunchPopularityWithBundleId:(id)arg1 category:(id)arg2;
- (bool)removeHistoryForBundleId:(id)arg1;
- (int)removeHistoryForBundleIds:(id)arg1;
- (bool)removeHistoryForCategory:(id)arg1;
- (void)resetData;
- (void)resetHistogram:(id)arg1;
- (double)totalLaunches;
- (double)totalLaunchesForBundleId:(id)arg1;
- (double)totalLaunchesForBundleId:(id)arg1 category:(id)arg2;
- (double)totalLaunchesForCategory:(id)arg1;
- (void)verifyDataIntegrity;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
