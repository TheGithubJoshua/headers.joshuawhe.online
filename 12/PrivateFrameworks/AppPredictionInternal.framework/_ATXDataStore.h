<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_ATXDataStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AppPredictionInternal.framework/_ATXDataStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AppPredictionInternal.framework/AppPredictionInternal (1)
 */

@interface _ATXDataStore : NSObject {
    unsigned long long  _actionHistoryLengthPerAppAction;
    _PASSqliteDatabase * _db;
    PETScalarEventTracker * _dbMigrationTracker;
    _ATXDuetHelper * _duetHelper;
    NSString * _path;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _schemaVersion;
}

@property (nonatomic) unsigned long long actionHistoryLengthPerAppAction;
@property (nonatomic, readonly) _PASSqliteDatabase *db;

+ (void)_simulateCrashForMigrationFailure:(id)arg1;
+ (id)defaultPath;
+ (id)loadDataFromFile:(id)arg1;
+ (bool)pareDownForBackup:(struct sqlite3 { }*)arg1;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)_databaseSchema;
- (struct _PASDBIterAction_ { bool x1; })_deserializeActionLogRowWithStmt:(id)arg1 invokingBlock:(id /* block */)arg2;
- (void)_disconnectFromDb;
- (void)_enumerateAppInfoAppActionsExecutingBlock:(id /* block */)arg1;
- (void)_enumerateAppInfoBundlesExecutingBlock:(id /* block */)arg1;
- (void)_markBundleIdAsExtension:(id)arg1;
- (void)_markBundleIdsAsExtension:(id)arg1;
- (long long)_regenerateSlotSetKeys;
- (bool)_removeActionsWithoutTitle;
- (void)_removeFeedbackForBundleId:(id)arg1;
- (bool)_reset;
- (void)_testMigrate;
- (void)_testMigrateToSchema:(unsigned long long)arg1;
- (id)_trimMigrationPlan:(id)arg1 toSchema:(unsigned long long)arg2;
- (id)actionAndSlotsForRowId:(id)arg1;
- (id)actionFeedbackLogKeys;
- (id)actionForSlotUUID:(id)arg1;
- (unsigned long long)actionHistoryLengthPerAppAction;
- (id)actionLogKeys;
- (void)addAppActionLaunchForAppAction:(id)arg1 date:(id)arg2;
- (void)addAppInstallForBundleId:(id)arg1 date:(id)arg2 genreId:(id)arg3 subGenreIds:(id)arg4;
- (void)addAppInstallForBundleId:(id)arg1 date:(id)arg2 genreId:(id)arg3 subGenreIds:(id)arg4 app2VecCluster:(id)arg5;
- (void)addAppLaunchForAppLaunchSequence:(id)arg1 date:(id)arg2;
- (void)addAppLaunchForBundleId:(id)arg1 date:(id)arg2 withLaunchType:(long long)arg3;
- (void)addCategoricalHistogramData:(id)arg1 forHistogramOfType:(long long)arg2;
- (void)addExtensionLaunchForBundleId:(id)arg1 date:(id)arg2;
- (void)addHistogramData:(id)arg1 forHistogramOfType:(long long)arg2;
- (bool)allActionsAndSlots:(id)arg1 success:(long long*)arg2;
- (id)appInfoForBundleId:(id)arg1;
- (id)appLaunchSequence;
- (id)averageSecondsBetweenAppActionsForAppAction:(id)arg1;
- (id)blobOfType:(long long)arg1;
- (id)categoricalHistogramDataForHistogramType:(long long)arg1;
- (bool)checkIfInDB:(id)arg1 suggestionType:(long long)arg2;
- (void)clearAppInstallInfo;
- (void)clearAppLaunchInfo;
- (void)clearDatabase;
- (long long)configureDatabase;
- (bool)containsActionType:(id)arg1;
- (long long)currentSchemaVersion;
- (id)db;
- (void)deleteLaunchesFollowingAppAction:(id)arg1;
- (void)deleteLaunchesFollowingBundle:(id)arg1;
- (id)deletionHighWaterMark;
- (void)enumerateActionOfType:(id)arg1 bundleId:(id)arg2 block:(id /* block */)arg3;
- (void)enumerateActionsInUUIDSet:(id)arg1 block:(id /* block */)arg2;
- (void)enumerateAppInfoAppActionsExecutingBlock:(id /* block */)arg1;
- (void)enumerateAppInfoBundlesExecutingBlock:(id /* block */)arg1;
- (void)enumerateFeedbackForActionOfType:(id)arg1 bundleId:(id)arg2 block:(id /* block */)arg3;
- (void)enumerateSlotUuidsOfType:(id)arg1 bundleId:(id)arg2 block:(id /* block */)arg3;
- (void)enumerateStateForApps:(id)arg1 withGlobalBlock:(id /* block */)arg2 thenWithPerAppBlock:(id /* block */)arg3;
- (void)enumerateStateForApps:(id)arg1 withGlobalBlock:(id /* block */)arg2 thenWithPerAppBlock:(id /* block */)arg3 readOnly:(bool)arg4;
- (void)enumerateStateForAppsReadOnly:(id)arg1 withGlobalBlock:(id /* block */)arg2 thenWithPerAppBlock:(id /* block */)arg3;
- (id)filenamesAndDataForBackup;
- (id)getSuggestionResponsesAsStringInDB;
- (bool)hasOrphanSlotSetKeys;
- (id)histogramDataForHistogramType:(long long)arg1;
- (id)init;
- (id)initWithInMemoryDataStore;
- (id)initWithPath:(id)arg1 andDuetHelper:(id)arg2;
- (void)insertSuggestionResponse:(id)arg1 response:(long long)arg2 timestamp:(long long)arg3 suggestionType:(long long)arg4;
- (void)integrityCheckOrAbort;
- (id)lastAppActionLaunchDateForAppAction:(id)arg1;
- (id)lastMessageToRecipient:(id)arg1;
- (long long)launchedAppCount;
- (id)loadAppActionInfo;
- (id)loadAppActionLaunchesFollowing:(id)arg1;
- (id)loadAppActionsFromAppActionInfo;
- (id)loadAppInfo;
- (id)loadLaunchesFollowingBundle:(id)arg1;
- (id)loadTopNAppActionsByPredictions:(unsigned long long)arg1;
- (id)medianSecondsBetweenAppActionsForAppAction:(id)arg1;
- (void)migrate;
- (long long)migrateToVersion:(unsigned long long)arg1 withMigrationPlan:(id)arg2;
- (void)migrateWithMigrationPlan:(id)arg1;
- (void)migrationPre44WriteActionType:(id)arg1 bundleId:(id)arg2 date:(id)arg3 action:(id)arg4 slotSets:(id)arg5 timeZone:(id)arg6 prevLocationUUID:(id)arg7 locationUUID:(id)arg8 weight:(double)arg9 actionUUID:(id)arg10 motionType:(long long)arg11;
- (bool)migrationUpdateOrInsertTimestamp:(long long)arg1 intoColumn:(id)arg2 forBundleId:(id)arg3;
- (long long)migration_AddExtensionInfo;
- (long long)migration_AddFeedbackColumns;
- (long long)migration_AppLaunchHistogramToTable;
- (long long)migration_DelinkFromCoreLocationVisitMonitoring;
- (long long)migration_DeprecateGenericAppIntentModels;
- (long long)migration_DeprecateIntentForAllAppsHistograms;
- (long long)migration_InstallDateToAppTable;
- (long long)migration_LaunchHistoriesToAppTable;
- (long long)migration_PrefillActionHistograms;
- (long long)migration_RecreatePredictionFeedbackInfo;
- (long long)migration_RemoveActionsWithoutTitle;
- (long long)migration_RemoveAllSubsequentLaunches;
- (long long)migration_RemoveFeedbackForUninstalledApps;
- (long long)migration_RemoveRestoreUserDefault;
- (long long)migration_SlotSetKeyCreation;
- (long long)migration_SlotSetKeyRegeneration;
- (long long)migration_failForTests;
- (long long)migration_moveCacheFiles;
- (void)pruneMessageRecipientsAddedBefore:(id)arg1;
- (void)recordConfirms:(double)arg1 rejects:(double)arg2 forFeedbackType:(unsigned long long)arg3 forActionType:(id)arg4 bundleId:(id)arg5 action:(id)arg6 slotSet:(id)arg7 actionUUID:(id)arg8 date:(id)arg9 consumerSubType:(unsigned char)arg10;
- (void)regenerateSlotSetKeyForBundleId:(id)arg1;
- (void)removeActionDataForActionUUID:(id)arg1;
- (void)removeActionDataForBundleId:(id)arg1;
- (void)removeActionsWithoutTitle;
- (void)removeAllAppActionPredictionFeedbackCounts;
- (void)removeAllFeedback;
- (void)removeAllSlotsFromActionFeedback;
- (void)removeAllSlotsFromActionLog;
- (void)removeAllSlotsFromSlotSetKey;
- (void)removeAppInfoForBundleId:(id)arg1;
- (void)removeAppLaunchesForBundleId:(id)arg1;
- (void)removeFeedbackForBundleId:(id)arg1;
- (void)removeInfoForAppAction:(id)arg1;
- (void)resetSuggestionResponses;
- (long long)runMigrationPlan:(id)arg1;
- (void)setActionHistoryLengthPerAppAction:(unsigned long long)arg1;
- (void)setDeletionHighWaterMark:(id)arg1;
- (long long)skipFromZeroSchema;
- (void)swapInDuetHelperStub:(id)arg1;
- (id)totalNumberOfActionTypesForBundleId:(id)arg1;
- (id)totalSlotsInDatastore;
- (void)trimActionHistoryWithAppWhitelist:(id)arg1;
- (long long)updateAlog:(id)arg1 slotsToMigrate:(id)arg2;
- (bool)updateOrInsertApp2VecCluster:(id)arg1 forBundleId:(id)arg2;
- (bool)updateOrInsertAverageSecondsBetweenAppActions:(id)arg1 forAppAction:(id)arg2;
- (bool)updateOrInsertAverageSecondsBetweenLaunches:(id)arg1 forBundleId:(id)arg2;
- (bool)updateOrInsertCategoricalHistogramData:(id)arg1 forHistogram:(long long)arg2;
- (bool)updateOrInsertGenreId:(id)arg1 subGenreIds:(id)arg2 forBundleId:(id)arg3;
- (bool)updateOrInsertHistogramData:(id)arg1 forHistogram:(long long)arg2;
- (bool)updateOrInsertInstallTimestamp:(long long)arg1 genreId:(id)arg2 subGenreIds:(id)arg3 app2VecCluster:(id)arg4 forBundleId:(id)arg5 isExtension:(bool)arg6;
- (bool)updateOrInsertMedianSecondsBetweenAppActions:(id)arg1 forAppAction:(id)arg2;
- (bool)updateOrInsertMedianSecondsBetweenLaunches:(id)arg1 forBundleId:(id)arg2;
- (bool)updateOrInsertMessageRecipient:(id)arg1 dateMessaged:(id)arg2;
- (bool)updateOrInsertPredictionsAndFeedbackForAppAction:(id)arg1 feedbackReceived:(bool)arg2 forUIType:(id)arg3;
- (bool)updateOrInsertSubsequentAppActionLaunchCountData:(id)arg1 forAppAction:(id)arg2;
- (bool)updateOrInsertSubsequentLaunchCountData:(id)arg1 forBundleId:(id)arg2;
- (bool)updateOrInsertTimestamp:(long long)arg1 forAppAction:(id)arg2;
- (bool)updateOrInsertTimestamp:(long long)arg1 intoColumn:(id)arg2 forBundleId:(id)arg3 isExtension:(bool)arg4;
- (void)updateSchemaVersionNumberTo:(long long)arg1;
- (void)writeActionType:(id)arg1 bundleId:(id)arg2 date:(id)arg3 action:(id)arg4 slotSets:(id)arg5 timeZone:(id)arg6 prevLocationUUID:(id)arg7 locationUUID:(id)arg8 weight:(double)arg9 actionUUID:(id)arg10 motionType:(long long)arg11 appSessionStartDate:(id)arg12 appSessionEndDate:(id)arg13;
- (void)writeApp2VecCluster:(id)arg1 forBundleId:(id)arg2;
- (void)writeAppActionLaunches:(id)arg1 followingAppAction:(id)arg2;
- (void)writeAverageSecondsBetweenAppActions:(id)arg1 forAppAction:(id)arg2;
- (void)writeAverageSecondsBetweenLaunches:(id)arg1 forBundleId:(id)arg2;
- (void)writeBlob:(id)arg1 type:(long long)arg2 expirationDate:(id)arg3;
- (void)writeGenreId:(id)arg1 subGenreIds:(id)arg2 forBundleId:(id)arg3;
- (void)writeLaunches:(id)arg1 followingBundle:(id)arg2;
- (void)writeMedianSecondsBetweenAppActions:(id)arg1 forAppAction:(id)arg2;
- (void)writeMedianSecondsBetweenLaunches:(id)arg1 forBundleId:(id)arg2;
- (bool)writeSlotSetKeyParameters:(id)arg1 rowId:(id)arg2 slotSet:(id)arg3 success:(long long*)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
