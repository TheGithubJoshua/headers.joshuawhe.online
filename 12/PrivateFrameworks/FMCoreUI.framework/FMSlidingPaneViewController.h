<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FMSlidingPaneViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/FMCoreUI.framework/FMSlidingPaneViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/FMCoreUI.framework/FMCoreUI (1)
 */

@interface FMSlidingPaneViewController : FMViewController {
    NSMutableArray * _actionFutures;
    double  _animationDuration;
    double  _animationInitialVelocity;
    unsigned long long  _animationOptions;
    double  _animationSpringDamping;
    <FMSlidingPaneViewControllerDelegate> * _delegate;
    bool  _didHideToolbar;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _paneContentInsets;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _paneInsets;
    SlidingPaneViewState * _paneState;
    UIVisualEffect * _paneVisualEffect;
}

@property (nonatomic, retain) NSMutableArray *actionFutures;
@property (nonatomic) double animationDuration;
@property (nonatomic) double animationInitialVelocity;
@property (nonatomic) unsigned long long animationOptions;
@property (nonatomic) double animationSpringDamping;
@property (nonatomic, readonly) FMFuture *currentFuture;
@property (nonatomic) <FMSlidingPaneViewControllerDelegate> *delegate;
@property (nonatomic) bool didHideToolbar;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } paneContentInsets;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } paneInsets;
@property (getter=isPaneShowing, nonatomic, readonly) bool paneShowing;
@property (nonatomic, retain) SlidingPaneViewState *paneState;
@property (nonatomic, readonly) UIView *paneView;
@property (nonatomic, readonly) UIViewController *paneViewController;
@property (nonatomic, retain) UIVisualEffect *paneVisualEffect;

- (void).cxx_destruct;
- (void)_createPaneContentConstraintsForState:(id)arg1;
- (void)_createPaneViewForState:(id)arg1;
- (void)_crossDissolveOldPaneState:(id)arg1 newPaneState:(id)arg2 animated:(bool)arg3 completion:(id /* block */)arg4;
- (void)_dismissPaneState:(id)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (id)_metricsFromEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (struct CGSize { double x1; double x2; })_normalizeSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_paneFrameChanged:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_paneParentView;
- (struct CGSize { double x1; double x2; })_preferredSizeForPaneState:(id)arg1;
- (void)_presentPaneState:(id)arg1 animated:(bool)arg2 interactive:(bool)arg3 completion:(id /* block */)arg4;
- (void)_removeChildViewControllerForState:(id)arg1;
- (id)actionFutures;
- (double)animationDuration;
- (double)animationInitialVelocity;
- (unsigned long long)animationOptions;
- (double)animationSpringDamping;
- (void)awakeFromNib;
- (void)commonConfiguration;
- (void)completeFuture:(id)arg1;
- (id)currentFuture;
- (id)delegate;
- (void)didDismissPane:(id)arg1 animated:(bool)arg2;
- (bool)didHideToolbar;
- (void)didPresentPane:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 animated:(bool)arg3;
- (void)dismiss:(id)arg1;
- (void)dismiss:(id)arg1 forEvent:(id)arg2;
- (void)dismissPaneViewControllerAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)dismissSegue:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isPaneShowing;
- (id)newActionFuture;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paneContentInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })paneInsets;
- (void)paneSizeChanged:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forViewController:(id)arg2;
- (id)paneState;
- (id)paneView;
- (id)paneViewController;
- (id)paneVisualEffect;
- (void)presentPaneViewController:(id)arg1 fromEdge:(unsigned long long)arg2 animated:(bool)arg3 completion:(id /* block */)arg4;
- (void)presentPaneViewController:(id)arg1 fromEdge:(unsigned long long)arg2 withPercent:(double)arg3 completion:(id /* block */)arg4;
- (void)setActionFutures:(id)arg1;
- (void)setAnimationDuration:(double)arg1;
- (void)setAnimationInitialVelocity:(double)arg1;
- (void)setAnimationOptions:(unsigned long long)arg1;
- (void)setAnimationSpringDamping:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidHideToolbar:(bool)arg1;
- (void)setPaneContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPaneInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setPaneState:(id)arg1;
- (void)setPaneVisualEffect:(id)arg1;
- (void)setPresentingConstraintConstant:(double)arg1;
- (id)traitCollectionForChildViewController:(id)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)willDismissPane:(id)arg1 animated:(bool)arg2;
- (void)willPresentPane:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 animated:(bool)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
