<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NWSInterfaceSnapshot.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NetworkStatistics.framework/NWSInterfaceSnapshot.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NetworkStatistics.framework/NetworkStatistics (1)
 */

@interface NWSInterfaceSnapshot : NWSSnapshot {
    unsigned long long  _cellConfigBackoffTime;
    unsigned long long  _cellConfigInactivityTime;
    unsigned long long  _cellUlAvgQueueSize;
    unsigned long long  _cellUlMaxQueueSize;
    unsigned long long  _cellUlMinQueueSize;
    struct nstat_ifnet_descriptor { 
        unsigned long long threshold; 
        unsigned int ifindex; 
        struct nstat_ifnet_desc_link_status { 
            unsigned int link_status_type; 
            union { 
                struct nstat_ifnet_desc_cellular_status { 
                    unsigned int valid_bitmask; 
                    unsigned int link_quality_metric; 
                    unsigned int ul_effective_bandwidth; 
                    unsigned int ul_max_bandwidth; 
                    unsigned int ul_min_latency; 
                    unsigned int ul_effective_latency; 
                    unsigned int ul_max_latency; 
                    unsigned int ul_retxt_level; 
                    unsigned int ul_bytes_lost; 
                    unsigned int ul_min_queue_size; 
                    unsigned int ul_avg_queue_size; 
                    unsigned int ul_max_queue_size; 
                    unsigned int dl_effective_bandwidth; 
                    unsigned int dl_max_bandwidth; 
                    unsigned int config_inactivity_time; 
                    unsigned int config_backoff_time; 
                    unsigned short mss_recommended; 
                    unsigned char reserved[2]; 
                } cellular; 
                struct nstat_ifnet_desc_wifi_status { 
                    unsigned int valid_bitmask; 
                    unsigned int link_quality_metric; 
                    unsigned int ul_effective_bandwidth; 
                    unsigned int ul_max_bandwidth; 
                    unsigned int ul_min_latency; 
                    unsigned int ul_effective_latency; 
                    unsigned int ul_max_latency; 
                    unsigned int ul_retxt_level; 
                    unsigned int ul_bytes_lost; 
                    unsigned int ul_error_rate; 
                    unsigned int dl_effective_bandwidth; 
                    unsigned int dl_max_bandwidth; 
                    unsigned int dl_min_latency; 
                    unsigned int dl_effective_latency; 
                    unsigned int dl_max_latency; 
                    unsigned int dl_error_rate; 
                    unsigned int config_frequency; 
                    unsigned int config_multicast_rate; 
                    unsigned int scan_count; 
                    unsigned int scan_duration; 
                } wifi; 
            } u; 
        } link_status; 
        unsigned int type; 
        BOOL description[128]; 
        BOOL name[17]; 
        unsigned char reserved[3]; 
    }  _descriptor;
    unsigned long long  _dlEffectiveBandwidth;
    unsigned long long  _dlMaxBandwidth;
    NSString * _interfaceDescription;
    NSString * _interfaceName;
    unsigned long long  _linkQualityMetric;
    unsigned long long  _ulBytesLost;
    unsigned long long  _ulEffectiveBandwidth;
    unsigned long long  _ulEffectiveLatency;
    unsigned long long  _ulMaxBandwidth;
    unsigned long long  _ulMaxLatency;
    unsigned long long  _ulMinLatency;
    unsigned long long  _ulReTxtLevel;
    unsigned long long  _wifiConfigFrequency;
    unsigned long long  _wifiConfigMulticastRate;
    unsigned long long  _wifiDlEffectiveLatency;
    unsigned long long  _wifiDlErrorRate;
    unsigned long long  _wifiDlMaxLatency;
    unsigned long long  _wifiDlMinLatency;
    unsigned long long  _wifiScanCount;
    unsigned long long  _wifiScanDuration;
    unsigned long long  _wifiUlErrorRate;
}

@property unsigned long long cellConfigBackoffTime;
@property unsigned long long cellConfigInactivityTime;
@property unsigned long long cellUlAvgQueueSize;
@property unsigned long long cellUlMaxQueueSize;
@property unsigned long long cellUlMinQueueSize;
@property unsigned long long dlEffectiveBandwidth;
@property unsigned long long dlMaxBandwidth;
@property (readonly) NSString *interfaceDescription;
@property (readonly) unsigned int interfaceIndex;
@property (readonly) NSString *interfaceName;
@property (readonly) unsigned int interfaceType;
@property unsigned long long linkQualityMetric;
@property (readonly) unsigned long long threshold;
@property unsigned long long ulBytesLost;
@property unsigned long long ulEffectiveBandwidth;
@property unsigned long long ulEffectiveLatency;
@property unsigned long long ulMaxBandwidth;
@property unsigned long long ulMaxLatency;
@property unsigned long long ulMinLatency;
@property unsigned long long ulReTxtLevel;
@property unsigned long long wifiConfigFrequency;
@property unsigned long long wifiConfigMulticastRate;
@property unsigned long long wifiDlEffectiveLatency;
@property unsigned long long wifiDlErrorRate;
@property unsigned long long wifiDlMaxLatency;
@property unsigned long long wifiDlMinLatency;
@property unsigned long long wifiScanCount;
@property unsigned long long wifiScanDuration;
@property unsigned long long wifiUlErrorRate;

- (void).cxx_destruct;
- (void)_handleCellExtra:(struct nstat_ifnet_desc_cellular_status { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned short x17; unsigned char x18[2]; }*)arg1;
- (void)_handleDescriptor:(struct nstat_ifnet_descriptor { unsigned long long x1; unsigned int x2; struct nstat_ifnet_desc_link_status { unsigned int x_3_1_1; union { struct nstat_ifnet_desc_cellular_status { unsigned int x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; unsigned int x_1_3_6; unsigned int x_1_3_7; unsigned int x_1_3_8; unsigned int x_1_3_9; unsigned int x_1_3_10; unsigned int x_1_3_11; unsigned int x_1_3_12; unsigned int x_1_3_13; unsigned int x_1_3_14; unsigned int x_1_3_15; unsigned int x_1_3_16; unsigned short x_1_3_17; unsigned char x_1_3_18[2]; } x_2_2_1; struct nstat_ifnet_desc_wifi_status { unsigned int x_2_3_1; unsigned int x_2_3_2; unsigned int x_2_3_3; unsigned int x_2_3_4; unsigned int x_2_3_5; unsigned int x_2_3_6; unsigned int x_2_3_7; unsigned int x_2_3_8; unsigned int x_2_3_9; unsigned int x_2_3_10; unsigned int x_2_3_11; unsigned int x_2_3_12; unsigned int x_2_3_13; unsigned int x_2_3_14; unsigned int x_2_3_15; unsigned int x_2_3_16; unsigned int x_2_3_17; unsigned int x_2_3_18; unsigned int x_2_3_19; unsigned int x_2_3_20; } x_2_2_2; } x_3_1_2; } x3; }*)arg1;
- (void)_handleWifiExtra:(struct nstat_ifnet_desc_wifi_status { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; unsigned int x20; }*)arg1;
- (void)_invalidateAllExtraCounts;
- (void)_invalidateCellCounts;
- (void)_invalidateCommonCounts;
- (void)_invalidateWifiCounts;
- (unsigned long long)cellConfigBackoffTime;
- (unsigned long long)cellConfigInactivityTime;
- (unsigned long long)cellUlAvgQueueSize;
- (unsigned long long)cellUlMaxQueueSize;
- (unsigned long long)cellUlMinQueueSize;
- (id)description;
- (unsigned long long)dlEffectiveBandwidth;
- (unsigned long long)dlMaxBandwidth;
- (id)initWithCounts:(const struct nstat_counts { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; }*)arg1 interfaceDescriptor:(struct nstat_ifnet_descriptor { unsigned long long x1; unsigned int x2; struct nstat_ifnet_desc_link_status { unsigned int x_3_1_1; union { struct nstat_ifnet_desc_cellular_status { unsigned int x_1_3_1; unsigned int x_1_3_2; unsigned int x_1_3_3; unsigned int x_1_3_4; unsigned int x_1_3_5; unsigned int x_1_3_6; unsigned int x_1_3_7; unsigned int x_1_3_8; unsigned int x_1_3_9; unsigned int x_1_3_10; unsigned int x_1_3_11; unsigned int x_1_3_12; unsigned int x_1_3_13; unsigned int x_1_3_14; unsigned int x_1_3_15; unsigned int x_1_3_16; unsigned short x_1_3_17; unsigned char x_1_3_18[2]; } x_2_2_1; struct nstat_ifnet_desc_wifi_status { unsigned int x_2_3_1; unsigned int x_2_3_2; unsigned int x_2_3_3; unsigned int x_2_3_4; unsigned int x_2_3_5; unsigned int x_2_3_6; unsigned int x_2_3_7; unsigned int x_2_3_8; unsigned int x_2_3_9; unsigned int x_2_3_10; unsigned int x_2_3_11; unsigned int x_2_3_12; unsigned int x_2_3_13; unsigned int x_2_3_14; unsigned int x_2_3_15; unsigned int x_2_3_16; unsigned int x_2_3_17; unsigned int x_2_3_18; unsigned int x_2_3_19; unsigned int x_2_3_20; } x_2_2_2; } x_3_1_2; } x3; }*)arg2 sourceIdent:(unsigned long long)arg3 seqno:(unsigned long long)arg4;
- (id)interfaceDescription;
- (unsigned int)interfaceIndex;
- (id)interfaceName;
- (unsigned int)interfaceType;
- (unsigned long long)linkQualityMetric;
- (id)provider;
- (void)setCellConfigBackoffTime:(unsigned long long)arg1;
- (void)setCellConfigInactivityTime:(unsigned long long)arg1;
- (void)setCellUlAvgQueueSize:(unsigned long long)arg1;
- (void)setCellUlMaxQueueSize:(unsigned long long)arg1;
- (void)setCellUlMinQueueSize:(unsigned long long)arg1;
- (void)setDlEffectiveBandwidth:(unsigned long long)arg1;
- (void)setDlMaxBandwidth:(unsigned long long)arg1;
- (void)setLinkQualityMetric:(unsigned long long)arg1;
- (void)setUlBytesLost:(unsigned long long)arg1;
- (void)setUlEffectiveBandwidth:(unsigned long long)arg1;
- (void)setUlEffectiveLatency:(unsigned long long)arg1;
- (void)setUlMaxBandwidth:(unsigned long long)arg1;
- (void)setUlMaxLatency:(unsigned long long)arg1;
- (void)setUlMinLatency:(unsigned long long)arg1;
- (void)setUlReTxtLevel:(unsigned long long)arg1;
- (void)setWifiConfigFrequency:(unsigned long long)arg1;
- (void)setWifiConfigMulticastRate:(unsigned long long)arg1;
- (void)setWifiDlEffectiveLatency:(unsigned long long)arg1;
- (void)setWifiDlErrorRate:(unsigned long long)arg1;
- (void)setWifiDlMaxLatency:(unsigned long long)arg1;
- (void)setWifiDlMinLatency:(unsigned long long)arg1;
- (void)setWifiScanCount:(unsigned long long)arg1;
- (void)setWifiScanDuration:(unsigned long long)arg1;
- (void)setWifiUlErrorRate:(unsigned long long)arg1;
- (unsigned long long)threshold;
- (id)traditionalDictionary;
- (unsigned long long)ulBytesLost;
- (unsigned long long)ulEffectiveBandwidth;
- (unsigned long long)ulEffectiveLatency;
- (unsigned long long)ulMaxBandwidth;
- (unsigned long long)ulMaxLatency;
- (unsigned long long)ulMinLatency;
- (unsigned long long)ulReTxtLevel;
- (unsigned long long)wifiConfigFrequency;
- (unsigned long long)wifiConfigMulticastRate;
- (unsigned long long)wifiDlEffectiveLatency;
- (unsigned long long)wifiDlErrorRate;
- (unsigned long long)wifiDlMaxLatency;
- (unsigned long long)wifiDlMinLatency;
- (unsigned long long)wifiScanCount;
- (unsigned long long)wifiScanDuration;
- (unsigned long long)wifiUlErrorRate;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
