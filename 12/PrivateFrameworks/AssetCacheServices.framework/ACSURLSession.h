<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ACSURLSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssetCacheServices.framework/ACSURLSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssetCacheServices.framework/AssetCacheServices (83.4)
 */

@interface ACSURLSession : NSObject <NSURLSessionDataDelegate, NSURLSessionDelegate, NSURLSessionDownloadDelegate, NSURLSessionStreamDelegate, NSURLSessionTaskDelegate> {
    <ACSURLSessionDelegate> * __clientDelegate;
    NSOperationQueue * __clientDelegateOpQueue;
    NSDictionary * __locateOptions;
    NSObject<OS_os_log> * __logHandle;
    NSURLSession * __nsurlSession;
    int  __phase;
    NSObject<OS_dispatch_queue> * __queue;
    NSMutableDictionary * __tasks;
    bool  _canUseCachingServer;
}

@property (retain) <ACSURLSessionDelegate> *_clientDelegate;
@property (retain) NSOperationQueue *_clientDelegateOpQueue;
@property (retain) NSDictionary *_locateOptions;
@property (retain) NSObject<OS_os_log> *_logHandle;
@property (retain) NSURLSession *_nsurlSession;
@property int _phase;
@property (retain) NSObject<OS_dispatch_queue> *_queue;
@property (retain) NSMutableDictionary *_tasks;
@property bool canUseCachingServer;
@property (readonly, copy) NSURLSessionConfiguration *configuration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, retain) <ACSURLSessionDelegate> *delegate;
@property (readonly, retain) NSOperationQueue *delegateQueue;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly, copy) NSDictionary *locateOptions;
@property (copy) NSString *sessionDescription;
@property (readonly) Class superclass;

+ (id)sessionWithConfiguration:(id)arg1 canUseCachingServer:(bool)arg2 locateOptions:(id)arg3;
+ (id)sessionWithConfiguration:(id)arg1 canUseCachingServer:(bool)arg2 locateOptions:(id)arg3 delegate:(id)arg4 delegateQueue:(id)arg5;
+ (id)sharedSession;

- (void).cxx_destruct;
- (void)URLSession:(id)arg1 betterRouteDiscoveredForStreamTask:(id)arg2;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didBecomeDownloadTask:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didBecomeStreamTask:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveData:(id)arg3;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 didReceiveResponse:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)URLSession:(id)arg1 dataTask:(id)arg2 willCacheResponse:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)URLSession:(id)arg1 didBecomeInvalidWithError:(id)arg2;
- (void)URLSession:(id)arg1 didReceiveChallenge:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didFinishDownloadingToURL:(id)arg3;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didResumeAtOffset:(long long)arg3 expectedTotalBytes:(long long)arg4;
- (void)URLSession:(id)arg1 downloadTask:(id)arg2 didWriteData:(long long)arg3 totalBytesWritten:(long long)arg4 totalBytesExpectedToWrite:(long long)arg5;
- (void)URLSession:(id)arg1 readClosedForStreamTask:(id)arg2;
- (void)URLSession:(id)arg1 streamTask:(id)arg2 didBecomeInputStream:(id)arg3 outputStream:(id)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 didCompleteWithError:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didFinishCollectingMetrics:(id)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 didReceiveChallenge:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 didSendBodyData:(long long)arg3 totalBytesSent:(long long)arg4 totalBytesExpectedToSend:(long long)arg5;
- (void)URLSession:(id)arg1 task:(id)arg2 needNewBodyStream:(id /* block */)arg3;
- (void)URLSession:(id)arg1 task:(id)arg2 willBeginDelayedRequest:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)URLSession:(id)arg1 task:(id)arg2 willPerformHTTPRedirection:(id)arg3 newRequest:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)URLSession:(id)arg1 taskIsWaitingForConnectivity:(id)arg2;
- (void)URLSession:(id)arg1 writeClosedForStreamTask:(id)arg2;
- (void)_addTask:(id)arg1;
- (void)_cancelDownloadTask:(id)arg1 byProducingResumeData:(id /* block */)arg2;
- (void)_cancelTask:(id)arg1;
- (id)_clientDelegate;
- (id)_clientDelegateOpQueue;
- (void)_dataTask:(id)arg1 completedWithData:(id)arg2 response:(id)arg3 error:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_downloadTask:(id)arg1 completedWithLocation:(id)arg2 response:(id)arg3 error:(id)arg4 completionHandler:(id /* block */)arg5;
- (id)_downloadTaskWithResumeData:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_errorWithResumeDataFromError:(id)arg1 originalRequest:(id)arg2 currentRequest:(id)arg3;
- (id)_keyForNSURLTask:(id)arg1;
- (id)_linkedLocationWithLocation:(id)arg1;
- (void)_locateCachingServerForURL:(id)arg1 isUpload:(bool)arg2 completionHandler:(id /* block */)arg3;
- (id)_locateOptions;
- (id)_logHandle;
- (id)_nsurlSession;
- (void)_onqueue_addTask:(id)arg1 forNSURLTask:(id)arg2;
- (void)_onqueue_removeTaskForNSURLTask:(id)arg1;
- (void)_onqueue_resumeTask:(id)arg1;
- (void)_onqueue_task:(id)arg1 willUseCachingServer:(bool)arg2 newRequest:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)_onqueue_taskForNSURLTask:(id)arg1;
- (id)_onqueue_uniqueTasks;
- (int)_phase;
- (id)_queue;
- (void)_removeTask:(id)arg1;
- (bool)_resumeData:(id)arg1 toNSURLResumeData:(id*)arg2 originalRequest:(id*)arg3 currentRequest:(id*)arg4 error:(id*)arg5;
- (id)_resumeDataWithNSURLResumeData:(id)arg1 originalRequest:(id)arg2 currentRequest:(id)arg3 error:(id*)arg4;
- (void)_resumeTask:(id)arg1;
- (void)_suspendTask:(id)arg1;
- (id)_tasks;
- (bool)canUseCachingServer;
- (id)configuration;
- (id)dataTaskWithRequest:(id)arg1;
- (id)dataTaskWithRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)dataTaskWithURL:(id)arg1;
- (id)dataTaskWithURL:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (id)description;
- (id)downloadTaskWithRequest:(id)arg1;
- (id)downloadTaskWithRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)downloadTaskWithResumeData:(id)arg1;
- (id)downloadTaskWithResumeData:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)downloadTaskWithURL:(id)arg1;
- (id)downloadTaskWithURL:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)finishTasksAndInvalidate;
- (void)flushWithCompletionHandler:(id /* block */)arg1;
- (void)getAllTasksWithCompletionHandler:(id /* block */)arg1;
- (void)getTasksWithCompletionHandler:(id /* block */)arg1;
- (id)initWithConfiguration:(id)arg1 canUseCachingServer:(bool)arg2 locateOptions:(id)arg3 delegate:(id)arg4 delegateQueue:(id)arg5;
- (void)invalidateAndCancel;
- (id)locateOptions;
- (void)resetWithCompletionHandler:(id /* block */)arg1;
- (id)sessionDescription;
- (void)setCanUseCachingServer:(bool)arg1;
- (void)setSessionDescription:(id)arg1;
- (void)set_clientDelegate:(id)arg1;
- (void)set_clientDelegateOpQueue:(id)arg1;
- (void)set_locateOptions:(id)arg1;
- (void)set_logHandle:(id)arg1;
- (void)set_nsurlSession:(id)arg1;
- (void)set_phase:(int)arg1;
- (void)set_queue:(id)arg1;
- (void)set_tasks:(id)arg1;
- (id)uploadTaskWithRequest:(id)arg1 fromData:(id)arg2;
- (id)uploadTaskWithRequest:(id)arg1 fromData:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)uploadTaskWithRequest:(id)arg1 fromFile:(id)arg2;
- (id)uploadTaskWithRequest:(id)arg1 fromFile:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)uploadTaskWithStreamedRequest:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
