<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WebPreviewLoader.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WebCore.framework/WebPreviewLoader.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore (8607.3.18)
 */

@interface WebPreviewLoader : NSObject {
    struct RefPtr<WebCore::SharedBuffer, WTF::DumbPtrTraits<WebCore::SharedBuffer> > { 
        struct SharedBuffer {} *m_ptr; 
    }  _bufferedData;
    struct RetainPtr<NSMutableArray> { 
        void *m_ptr; 
    }  _bufferedDataArray;
    struct RefPtr<WebCore::PreviewLoaderClient, WTF::DumbPtrTraits<WebCore::PreviewLoaderClient> > { 
        struct PreviewLoaderClient {} *m_ptr; 
    }  _client;
    struct unique_ptr<WebCore::PreviewConverter, std::__1::default_delete<WebCore::PreviewConverter> > { 
        struct __compressed_pair<WebCore::PreviewConverter *, std::__1::default_delete<WebCore::PreviewConverter> > { 
            struct PreviewConverter {} *__value_; 
        } __ptr_; 
    }  _converter;
    bool  _hasProcessedResponse;
    bool  _hasSentDidReceiveResponse;
    long long  _lengthReceived;
    bool  _needsToCallDidFinishLoading;
    struct RefPtr<WebCore::ResourceLoader, WTF::DumbPtrTraits<WebCore::ResourceLoader> > { 
        struct ResourceLoader {} *m_ptr; 
    }  _resourceLoader;
    struct ResourceResponse { 
        struct URL { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
            unsigned int m_isValid : 1; 
            unsigned int m_protocolIsInHTTPFamily : 1; 
            unsigned int m_cannotBeABaseURL : 1; 
            unsigned int m_portLength : 3; 
            unsigned int m_schemeEnd : 26; 
            unsigned int m_userStart; 
            unsigned int m_userEnd; 
            unsigned int m_passwordEnd; 
            unsigned int m_hostEnd; 
            unsigned int m_pathAfterLastSlash; 
            unsigned int m_pathEnd; 
            unsigned int m_queryEnd; 
        } m_url; 
        struct AtomicString { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
        } m_mimeType; 
        long long m_expectedContentLength; 
        struct AtomicString { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
        } m_textEncodingName; 
        struct AtomicString { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
        } m_httpStatusText; 
        struct AtomicString { 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } m_string; 
        } m_httpVersion; 
        struct HTTPHeaderMap { 
            struct Vector<WebCore::HTTPHeaderMap::CommonHeader, 0, WTF::CrashOnOverflow, 6> { 
                struct CommonHeader {} *m_buffer; 
                unsigned int m_capacity; 
                unsigned int m_size; 
            } m_commonHeaders; 
            struct Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0, WTF::CrashOnOverflow, 0> { 
                struct UncommonHeader {} *m_buffer; 
                unsigned int m_capacity; 
                unsigned int m_size; 
            } m_uncommonHeaders; 
        } m_httpHeaderFields; 
        struct NetworkLoadMetrics { 
            struct Seconds { 
                double m_value; 
            } domainLookupStart; 
            struct Seconds { 
                double m_value; 
            } domainLookupEnd; 
            struct Seconds { 
                double m_value; 
            } connectStart; 
            struct Seconds { 
                double m_value; 
            } secureConnectionStart; 
            struct Seconds { 
                double m_value; 
            } connectEnd; 
            struct Seconds { 
                double m_value; 
            } requestStart; 
            struct Seconds { 
                double m_value; 
            } responseStart; 
            struct Seconds { 
                double m_value; 
            } responseEnd; 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } protocol; 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } remoteAddress; 
            struct String { 
                struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { 
                    struct StringImpl {} *m_ptr; 
                } m_impl; 
            } connectionIdentifier; 
            unsigned char priority; 
            bool complete; 
            struct HTTPHeaderMap { 
                struct Vector<WebCore::HTTPHeaderMap::CommonHeader, 0, WTF::CrashOnOverflow, 6> { 
                    struct CommonHeader {} *m_buffer; 
                    unsigned int m_capacity; 
                    unsigned int m_size; 
                } m_commonHeaders; 
                struct Vector<WebCore::HTTPHeaderMap::UncommonHeader, 0, WTF::CrashOnOverflow, 0> { 
                    struct UncommonHeader {} *m_buffer; 
                    unsigned int m_capacity; 
                    unsigned int m_size; 
                } m_uncommonHeaders; 
            } requestHeaders; 
            unsigned int requestHeaderBytesSent; 
            unsigned int responseHeaderBytesReceived; 
            unsigned long long requestBodyBytesSent; 
            unsigned long long responseBodyBytesReceived; 
            unsigned long long responseBodyDecodedSize; 
        } m_networkLoadMetrics; 
        struct Optional<WebCore::CertificateInfo> { 
            bool init_; 
            union storage_t<WebCore::CertificateInfo> { 
                unsigned char dummy_; 
                struct CertificateInfo { 
                    struct RetainPtr<__SecTrust *> { 
                        void *m_ptr; 
                    } m_trust; 
                    struct RetainPtr<const __CFArray *> { 
                        void *m_ptr; 
                    } m_certificateChain; 
                } value_; 
            } storage_; 
        } m_certificateInfo; 
        struct Markable<WTF::Seconds, WTF::Seconds::MarkableTraits> { 
            struct Seconds { 
                double m_value; 
            } m_value; 
        } m_age; 
        struct Markable<WTF::WallTime, WTF::WallTime::MarkableTraits> { 
            struct WallTime { 
                double m_value; 
            } m_value; 
        } m_date; 
        struct Markable<WTF::WallTime, WTF::WallTime::MarkableTraits> { 
            struct WallTime { 
                double m_value; 
            } m_value; 
        } m_expires; 
        struct Markable<WTF::WallTime, WTF::WallTime::MarkableTraits> { 
            struct WallTime { 
                double m_value; 
            } m_value; 
        } m_lastModified; 
        struct ParsedContentRange { 
            long long m_firstBytePosition; 
            long long m_lastBytePosition; 
            long long m_instanceLength; 
            bool m_isValid; 
        } m_contentRange; 
        struct CacheControlDirectives { 
            struct Markable<WTF::Seconds, WTF::Seconds::MarkableTraits> { 
                struct Seconds { 
                    double m_value; 
                } m_value; 
            } maxAge; 
            struct Markable<WTF::Seconds, WTF::Seconds::MarkableTraits> { 
                struct Seconds { 
                    double m_value; 
                } m_value; 
            } maxStale; 
            unsigned int noCache : 1; 
            unsigned int noStore : 1; 
            unsigned int mustRevalidate : 1; 
            unsigned int immutable : 1; 
        } m_cacheControlDirectives; 
        unsigned int m_haveParsedCacheControlHeader : 1; 
        unsigned int m_haveParsedAgeHeader : 1; 
        unsigned int m_haveParsedDateHeader : 1; 
        unsigned int m_haveParsedExpiresHeader : 1; 
        unsigned int m_haveParsedLastModifiedHeader : 1; 
        unsigned int m_haveParsedContentRangeHeader : 1; 
        unsigned int m_isRedirected : 1; 
        unsigned int m_isNull : 1; 
        unsigned char m_source; 
        unsigned char m_type; 
        unsigned char m_tainting; 
        int m_httpStatusCode; 
        unsigned int m_initLevel : 3; 
        bool m_isQuickLook; 
        struct RetainPtr<NSURLResponse> { 
            void *m_ptr; 
        } m_nsResponse; 
    }  _response;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_sendDidReceiveResponseIfNecessary;
- (void)appendDataArray:(id)arg1;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2 lengthReceived:(long long)arg3;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)failed;
- (void)finishedAppending;
- (id)initWithResourceLoader:(struct ResourceLoader { int (**x1)(); unsigned int x2; struct RefPtr<WebCore::ResourceHandle, WTF::DumbPtrTraits<WebCore::ResourceHandle> > { struct ResourceHandle {} *x_3_1_1; } x3; struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { struct Frame {} *x_4_1_1; } x4; struct RefPtr<WebCore::DocumentLoader, WTF::DumbPtrTraits<WebCore::DocumentLoader> > { struct DocumentLoader {} *x_5_1_1; } x5; struct ResourceResponse { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_1_2_1; unsigned int x_1_2_2 : 1; unsigned int x_1_2_3 : 1; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 3; unsigned int x_1_2_6 : 26; unsigned int x_1_2_7; unsigned int x_1_2_8; unsigned int x_1_2_9; unsigned int x_1_2_10; unsigned int x_1_2_11; unsigned int x_1_2_12; unsigned int x_1_2_13; } x_6_1_1; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_2_2_1; } x_6_1_2; long long x_6_1_3; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_4_2_1; } x_6_1_4; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_5_2_1; } x_6_1_5; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_6_2_1; } x_6_1_6; } x6; }*)arg1 resourceResponse:(const struct ResourceResponse { struct URL { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_1_1_1; unsigned int x_1_1_2 : 1; unsigned int x_1_1_3 : 1; unsigned int x_1_1_4 : 1; unsigned int x_1_1_5 : 3; unsigned int x_1_1_6 : 26; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; unsigned int x_1_1_10; unsigned int x_1_1_11; unsigned int x_1_1_12; unsigned int x_1_1_13; } x1; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_2_1_1; } x2; long long x3; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_4_1_1; } x4; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_5_1_1; } x5; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_3_1; } x_1_2_1; } x_6_1_1; } x6; }*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
