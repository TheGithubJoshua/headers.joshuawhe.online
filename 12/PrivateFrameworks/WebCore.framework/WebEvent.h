<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WebEvent.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WebCore.framework/WebEvent.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore (8607.3.18)
 */

@interface WebEvent : NSObject {
    NSString * _characters;
    NSString * _charactersIgnoringModifiers;
    float  _deltaX;
    float  _deltaY;
    float  _gestureRotation;
    float  _gestureScale;
    NSString * _inputManagerHint;
    bool  _isGesture;
    unsigned short  _keyCode;
    bool  _keyRepeating;
    unsigned long long  _keyboardFlags;
    struct CGPoint { 
        double x; 
        double y; 
    }  _locationInWindow;
    unsigned int  _modifierFlags;
    bool  _tabKey;
    double  _timestamp;
    unsigned int  _touchCount;
    NSArray * _touchIdentifiers;
    NSArray * _touchLocations;
    NSArray * _touchPhases;
    int  _type;
    bool  _wasHandled;
}

@property (nonatomic, readonly, retain) NSString *characters;
@property (nonatomic, readonly, retain) NSString *charactersIgnoringModifiers;
@property (nonatomic, readonly) float deltaX;
@property (nonatomic, readonly) float deltaY;
@property (nonatomic, readonly) float gestureRotation;
@property (nonatomic, readonly) float gestureScale;
@property (nonatomic, readonly, retain) NSString *inputManagerHint;
@property (nonatomic, readonly) bool isGesture;
@property (nonatomic, readonly) unsigned short keyCode;
@property (getter=isKeyRepeating, nonatomic, readonly) bool keyRepeating;
@property (nonatomic, readonly) unsigned long long keyboardFlags;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } locationInWindow;
@property (nonatomic, readonly) unsigned int modifierFlags;
@property (getter=isTabKey, nonatomic, readonly) bool tabKey;
@property (nonatomic, readonly) double timestamp;
@property (nonatomic, readonly) unsigned int touchCount;
@property (nonatomic, readonly, retain) NSArray *touchIdentifiers;
@property (nonatomic, readonly, retain) NSArray *touchLocations;
@property (nonatomic, readonly, retain) NSArray *touchPhases;
@property (nonatomic, readonly) int type;
@property (nonatomic) bool wasHandled;

+ (unsigned int)modifierFlags;

- (id)_eventDescription;
- (id)_modiferFlagsDescription;
- (id)_touchIdentifiersDescription;
- (id)_touchLocationsDescription:(id)arg1;
- (id)_touchPhaseDescription:(int)arg1;
- (id)_touchPhasesDescription;
- (id)_typeDescription;
- (id)characters;
- (id)charactersIgnoringModifiers;
- (void)dealloc;
- (float)deltaX;
- (float)deltaY;
- (id)description;
- (float)gestureRotation;
- (float)gestureScale;
- (id)initWithKeyEventType:(int)arg1 timeStamp:(double)arg2 characters:(id)arg3 charactersIgnoringModifiers:(id)arg4 modifiers:(unsigned int)arg5 isRepeating:(bool)arg6 withFlags:(unsigned long long)arg7 withInputManagerHint:(id)arg8 keyCode:(unsigned short)arg9 isTabKey:(bool)arg10;
- (id)initWithMouseEventType:(int)arg1 timeStamp:(double)arg2 location:(struct CGPoint { double x1; double x2; })arg3;
- (id)initWithScrollWheelEventWithTimeStamp:(double)arg1 location:(struct CGPoint { double x1; double x2; })arg2 deltaX:(float)arg3 deltaY:(float)arg4;
- (id)initWithTouchEventType:(int)arg1 timeStamp:(double)arg2 location:(struct CGPoint { double x1; double x2; })arg3 modifiers:(unsigned int)arg4 touchCount:(unsigned int)arg5 touchLocations:(id)arg6 touchIdentifiers:(id)arg7 touchPhases:(id)arg8 isGesture:(bool)arg9 gestureScale:(float)arg10 gestureRotation:(float)arg11;
- (id)inputManagerHint;
- (bool)isGesture;
- (bool)isKeyRepeating;
- (bool)isTabKey;
- (unsigned short)keyCode;
- (unsigned long long)keyboardFlags;
- (struct CGPoint { double x1; double x2; })locationInWindow;
- (unsigned int)modifierFlags;
- (void)setWasHandled:(bool)arg1;
- (double)timestamp;
- (unsigned int)touchCount;
- (id)touchIdentifiers;
- (id)touchLocations;
- (id)touchPhases;
- (int)type;
- (bool)wasHandled;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
