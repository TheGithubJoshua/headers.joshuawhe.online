<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WAKWindow.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WebCore.framework/WAKWindow.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore (8607.3.18)
 */

@interface WAKWindow : WAKResponder {
    struct CGSize { 
        double width; 
        double height; 
    }  _availableScreenSize;
    WAKView * _contentView;
    bool  _entireWindowVisibleForTesting;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _exposedScrollViewRect;
    struct Lock { 
        struct Atomic<unsigned char> { 
            struct atomic<unsigned char> { 
                _Atomic unsigned char __a_; 
            } value; 
        } m_byte; 
    }  _exposedScrollViewRectLock;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frozenVisibleRect;
    CALayer * _hostLayer;
    bool  _isInSnapshottingPaint;
    WAKView * _nextResponder;
    WAKView * _responderView;
    CALayer * _rootLayer;
    double  _screenScale;
    struct CGSize { 
        double width; 
        double height; 
    }  _screenSize;
    struct LegacyTileCache { id x1; struct RetainPtr<CGImage *> { void *x_2_1_1; } x2; struct RetainPtr<LegacyTileCacheTombstone> { void *x_3_1_1; } x3; struct Optional<WebCore::FloatRect> { bool x_4_1_1; union constexpr_storage_t<WebCore::FloatRect> { unsigned char x_2_2_1; struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_2_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_2_3_2; } x_2_2_2; } x_4_1_2; } x4; struct IntSize { int x_5_1_1; int x_5_1_2; } x5; int x6; int x7; bool x8; bool x9; bool x10; bool x11; bool x12; bool x13; bool x14; bool x15; bool x16; bool x17; struct unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct __compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct LegacyTileGrid {} *x_1_2_1; } x_18_1_1; } x18; struct unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct __compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct LegacyTileGrid {} *x_1_2_1; } x_19_1_1; } x19; } * _tileCache;
    bool  _useOrientationDependentFontAntialiasing;
    bool  _visible;
}

@property (nonatomic) struct CGImage { }*contentReplacementImage;
@property (nonatomic) bool useOrientationDependentFontAntialiasing;

+ (id)currentEvent;
+ (bool)hasLandscapeOrientation;
+ (void)setOrientationProvider:(id)arg1;

- (id).cxx_construct;
- (id)_newFirstResponderAfterResigning;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_visibleRectRespectingMasksToBounds:(bool)arg1;
- (struct CGSize { double x1; double x2; })availableScreenSize;
- (void)close;
- (struct CGImage { }*)contentReplacementImage;
- (id)contentView;
- (struct CGPoint { double x1; double x2; })convertBaseToScreen:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromScreen:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToScreen:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertScreenToBase:(struct CGPoint { double x1; double x2; })arg1;
- (float)currentTileScale;
- (void)dealloc;
- (id)description;
- (void)didRotate;
- (void)displayRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dumpTiles;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })exposedScrollViewRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })extendedVisibleRect;
- (id)firstResponder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (void)freezeVisibleRect;
- (bool)hasPendingDraw;
- (id)hostLayer;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithLayer:(id)arg1;
- (bool)isInSnapshottingPaint;
- (bool)isKeyWindow;
- (bool)isVisible;
- (bool)keepsZoomedOutTiles;
- (int)keyViewSelectionDirection;
- (void)layoutTiles;
- (void)layoutTilesNow;
- (void)layoutTilesNowForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)makeFirstResponder:(id)arg1;
- (void)makeKeyWindow;
- (id)recursiveDescription;
- (void)removeAllNonVisibleTiles;
- (void)removeAllTiles;
- (void)removeForegroundTiles;
- (id)rootLayer;
- (double)screenScale;
- (struct CGSize { double x1; double x2; })screenSize;
- (void)sendEvent:(id)arg1;
- (void)sendEventSynchronously:(id)arg1;
- (void)sendMouseMoveEvent:(id)arg1 contentChange:(int*)arg2;
- (void)setAcceleratedDrawingEnabled:(bool)arg1;
- (void)setAvailableScreenSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentReplacementImage:(struct CGImage { }*)arg1;
- (void)setContentView:(id)arg1;
- (void)setCurrentTileScale:(float)arg1;
- (void)setEntireWindowVisibleForTesting:(bool)arg1;
- (void)setExposedScrollViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 display:(bool)arg2;
- (void)setIsInSnapshottingPaint:(bool)arg1;
- (void)setKeepsZoomedOutTiles:(bool)arg1;
- (void)setNeedsDisplay;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRootLayer:(id)arg1;
- (void)setScreenScale:(double)arg1;
- (void)setScreenSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTileBordersVisible:(bool)arg1;
- (void)setTileControllerShouldUseLowScaleTiles:(bool)arg1;
- (void)setTilePaintCountsVisible:(bool)arg1;
- (void)setTilesOpaque:(bool)arg1;
- (void)setTilingDirection:(int)arg1;
- (void)setTilingMode:(int)arg1;
- (void)setUseOrientationDependentFontAntialiasing:(bool)arg1;
- (void)setVisible:(bool)arg1;
- (void)setZoomedOutTileScale:(float)arg1;
- (struct LegacyTileCache { id x1; struct RetainPtr<CGImage *> { void *x_2_1_1; } x2; struct RetainPtr<LegacyTileCacheTombstone> { void *x_3_1_1; } x3; struct Optional<WebCore::FloatRect> { bool x_4_1_1; union constexpr_storage_t<WebCore::FloatRect> { unsigned char x_2_2_1; struct FloatRect { struct FloatPoint { float x_1_4_1; float x_1_4_2; } x_2_3_1; struct FloatSize { float x_2_4_1; float x_2_4_2; } x_2_3_2; } x_2_2_2; } x_4_1_2; } x4; struct IntSize { int x_5_1_1; int x_5_1_2; } x5; int x6; int x7; bool x8; bool x9; bool x10; bool x11; bool x12; bool x13; bool x14; bool x15; bool x16; bool x17; struct unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct __compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct LegacyTileGrid {} *x_1_2_1; } x_18_1_1; } x18; struct unique_ptr<WebCore::LegacyTileGrid, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct __compressed_pair<WebCore::LegacyTileGrid *, std::__1::default_delete<WebCore::LegacyTileGrid> > { struct LegacyTileGrid {} *x_1_2_1; } x_19_1_1; } x19; }*)tileCache;
- (bool)tilesOpaque;
- (int)tilingDirection;
- (int)tilingMode;
- (void)unfreezeVisibleRect;
- (bool)useOrientationDependentFontAntialiasing;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;
- (void)willRotate;
- (float)zoomedOutTileScale;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
