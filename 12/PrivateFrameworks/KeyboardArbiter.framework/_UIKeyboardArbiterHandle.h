<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIKeyboardArbiterHandle.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/KeyboardArbiter.framework/_UIKeyboardArbiterHandle.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/KeyboardArbiter.framework/KeyboardArbiter (1)
 */

@interface _UIKeyboardArbiterHandle : NSObject <_UIKeyboardArbitration> {
    bool  _active;
    NSString * _bundleIdentifier;
    NSArray * _cachedContext;
    bool  _checkingShowability;
    NSXPCConnection * _connection;
    NSMutableSet * _hostedPids;
    bool  _invalidated;
    double  _level;
    _UIKeyboardArbiter * _owner;
    BKSProcessAssertion * _remoteKeepAliveAssertion;
    unsigned long long  _remoteKeepAliveAssertionCount;
    unsigned long long  _remoteKeepAliveTimerCount;
    NSString * _remoteSceneID;
    bool  _running;
    FBSCAContextSceneLayer * _sceneLayer;
    int  _suppressionCount;
    bool  _wantedActive;
    bool  _wantsFence;
}

@property (readonly) bool active;
@property (readonly, retain) NSString *bundleIdentifier;
@property (readonly) NSXPCConnection *connection;
@property (readonly) double level;
@property (readonly) int processIdentifier;
@property (readonly, retain) NSString *remoteSceneID;
@property bool running;
@property (readonly, retain) FBSCAContextSceneLayer *sceneLayer;
@property (readonly) bool wantedActive;
@property (readonly) bool wantsFence;

+ (id)handlerWithArbiter:(id)arg1 forConnection:(id)arg2;

- (void).cxx_destruct;
- (void)_deactivateScene;
- (bool)active;
- (void)applicationShouldFocusWithBundle:(id)arg1 onCompletion:(id /* block */)arg2;
- (id)bundleIdentifier;
- (void)cacheWindowContext;
- (void)checkActivation:(bool)arg1;
- (id)connection;
- (void)dealloc;
- (id)description;
- (void)invalidate;
- (bool)isHandlerShowableWithHandler:(id)arg1;
- (double)level;
- (void)notifyHostedPIDsOfSuppression:(bool)arg1;
- (int)processIdentifier;
- (void)releaseProcessAssertion;
- (id)remoteSceneID;
- (void)retrieveDebugInformation:(id /* block */)arg1;
- (void)retrieveMoreDebugInformationWithCompletion:(id /* block */)arg1;
- (bool)running;
- (id)sceneLayer;
- (void)setKeyboardTotalDisable:(bool)arg1 withFence:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setRunning:(bool)arg1;
- (void)setWantsFencing:(bool)arg1;
- (void)setWindowContextID:(unsigned int)arg1 sceneIdentifier:(id)arg2 forKeyboard:(bool)arg3 withLevel:(double)arg4;
- (void)setWindowHostingPID:(int)arg1 active:(bool)arg2;
- (void)signalKeyboardChangeComplete;
- (void)signalKeyboardChanged:(id)arg1 onCompletion:(id /* block */)arg2;
- (void)startArbitrationWithExpectedState:(id)arg1 hostingPIDs:(id)arg2 usingFence:(bool)arg3 withSuppression:(int)arg4 onConnected:(id /* block */)arg5;
- (void)takeProcessAssertionOnRemoteWithQueue:(id)arg1;
- (void)transition:(id)arg1 eventStage:(unsigned long long)arg2 withInfo:(id)arg3;
- (void)uncacheWindowContext;
- (bool)wantedActive;
- (bool)wantsFence;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
