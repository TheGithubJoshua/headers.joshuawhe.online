<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MTLToolsCommandBuffer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MetalTools.framework/MTLToolsCommandBuffer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MetalTools.framework/MetalTools (1)
 */

@interface MTLToolsCommandBuffer : MTLToolsObject <MTLCommandBufferSPI> {
    MTLToolsPointerArray * _blitCommandEncoders;
    MTLToolsPointerArray * _computeCommandEncoders;
    struct { 
        unsigned int hasCommit : 1; 
        unsigned int addedCompletedHandler : 1; 
        unsigned int addedScheduledHandler : 1; 
        unsigned int padding : 29; 
    }  _flags;
    MTLToolsPointerArray * _fragmentRenderCommandEncoders;
    MTLToolsPointerArray * _parallelRenderCommandEncoders;
    MTLToolsPointerArray * _renderCommandEncoders;
    NSMutableSet * _retainedObjects;
    struct ILayerLockingPolicy { int (**x1)(); } * _retainedObjectsLock;
}

@property (readonly) double GPUEndTime;
@property (readonly) double GPUStartTime;
@property (nonatomic, readonly) MTLToolsPointerArray *blitCommandEncoders;
@property (readonly) <MTLCommandQueue> *commandQueue;
@property (nonatomic, readonly) MTLToolsPointerArray *computeCommandEncoders;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) <MTLDevice> *device;
@property (readonly) NSError *error;
@property (nonatomic, readonly) MTLToolsPointerArray *fragmentRenderCommandEncoders;
@property (readonly) unsigned long long hash;
@property (readonly) double kernelEndTime;
@property (readonly) double kernelStartTime;
@property (copy) NSString *label;
@property (getter=getListIndex, nonatomic) unsigned long long listIndex;
@property (nonatomic, readonly) MTLToolsPointerArray *parallelRenderCommandEncoders;
@property (getter=isProfilingEnabled) bool profilingEnabled;
@property (readonly) NSDictionary *profilingResults;
@property (nonatomic, readonly) MTLToolsPointerArray *renderCommandEncoders;
@property (nonatomic, readonly) NSMutableSet *retainedObjects;
@property (nonatomic) struct ILayerLockingPolicy { int (**x1)(); }*retainedObjectsLock;
@property (readonly) bool retainedReferences;
@property (readonly) unsigned long long status;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSMutableDictionary *userDictionary;

- (double)GPUEndTime;
- (double)GPUStartTime;
- (void)acceptVisitor:(id)arg1;
- (void)addCompletedHandler:(id /* block */)arg1;
- (void)addPurgedHeap:(id)arg1;
- (void)addPurgedResource:(id)arg1;
- (void)addRetainedObject:(id)arg1;
- (void)addScheduledHandler:(id /* block */)arg1;
- (void)addSynchronizationNotification:(id /* block */)arg1;
- (id)blitCommandEncoder;
- (id)blitCommandEncoders;
- (void)clearRetainedObjects;
- (id)commandQueue;
- (void)commit;
- (bool)commitAndWaitUntilSubmitted;
- (id)computeCommandEncoder;
- (id)computeCommandEncoderWithDispatchType:(unsigned long long)arg1;
- (id)computeCommandEncoders;
- (void)dealloc;
- (id)debugCommandEncoder;
- (void)encodeSignalEvent:(id)arg1 value:(unsigned long long)arg2;
- (void)encodeWaitForEvent:(id)arg1 value:(unsigned long long)arg2;
- (void)enqueue;
- (id)error;
- (void)executeSynchronizationNotifications:(int)arg1;
- (void)executeSynchronizationNotifications:(int)arg1 scope:(unsigned long long)arg2 resources:(const id*)arg3 count:(unsigned long long)arg4;
- (id)fragmentRenderCommandEncoderWithDescriptor:(id)arg1;
- (id)fragmentRenderCommandEncoders;
- (unsigned long long)getListIndex;
- (id)initWithBaseObject:(id)arg1 parent:(id)arg2;
- (bool)isProfilingEnabled;
- (double)kernelEndTime;
- (double)kernelStartTime;
- (id)label;
- (id)parallelRenderCommandEncoderWithDescriptor:(id)arg1;
- (id)parallelRenderCommandEncoders;
- (void)popDebugGroup;
- (void)presentDrawable:(id)arg1;
- (void)presentDrawable:(id)arg1 afterMinimumDuration:(double)arg2;
- (void)presentDrawable:(id)arg1 atTime:(double)arg2;
- (id)profilingResults;
- (void)pushDebugGroup:(id)arg1;
- (id)renderCommandEncoderWithDescriptor:(id)arg1;
- (id)renderCommandEncoders;
- (id)retainedObjects;
- (struct ILayerLockingPolicy { int (**x1)(); }*)retainedObjectsLock;
- (bool)retainedReferences;
- (id)sampledComputeCommandEncoderWithDispatchType:(unsigned long long)arg1 programInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg2 capacity:(unsigned long long)arg3;
- (id)sampledComputeCommandEncoderWithProgramInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg1 capacity:(unsigned long long)arg2;
- (id)sampledFragmentRenderCommandEncoderWithDescriptor:(id)arg1 programInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg2 capacity:(unsigned long long)arg3;
- (id)sampledRenderCommandEncoderWithDescriptor:(id)arg1 programInfoBuffer:(struct { unsigned int x1 : 8; unsigned int x2 : 24; unsigned int x3; unsigned long long x4; unsigned long long x5; }*)arg2 capacity:(unsigned long long)arg3;
- (void)setLabel:(id)arg1;
- (void)setProfilingEnabled:(bool)arg1;
- (void)setRetainedObjectsLock:(struct ILayerLockingPolicy { int (**x1)(); }*)arg1;
- (unsigned long long)status;
- (id)unwrapMTLRenderPassDescriptor:(id)arg1;
- (id)userDictionary;
- (void)waitUntilCompleted;
- (void)waitUntilScheduled;
- (void)willEncodeSignalEvent:(id)arg1 value:(unsigned long long)arg2 writeableResources:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
