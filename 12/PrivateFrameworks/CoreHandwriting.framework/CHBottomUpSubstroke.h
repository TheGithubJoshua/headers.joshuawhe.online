<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CHBottomUpSubstroke.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreHandwriting.framework/CHBottomUpSubstroke.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting (1.2)
 */

@interface CHBottomUpSubstroke : NSObject {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _bounds;
    struct CGPoint { 
        double x; 
        double y; 
    }  _coalescedCenter;
    struct vector<CGPoint, std::__1::allocator<CGPoint> > { 
        struct CGPoint {} *__begin_; 
        struct CGPoint {} *__end_; 
        struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { 
            struct CGPoint {} *__value_; 
        } __end_cap_; 
    }  _convexHull;
    double  _curvature;
    double  _endTimestamp;
    long long  _originalWritingDirectionIndex;
    double  _startTimestamp;
    struct CGVector { 
        double dx; 
        double dy; 
    }  _strokeDeviation;
    <CHStrokeIdentifier> * _strokeIdentifier;
    struct CGVector { 
        double dx; 
        double dy; 
    }  _writingOrientation;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } bounds;
@property (nonatomic) struct CGPoint { double x1; double x2; } coalescedCenter;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<CGPoint' */ struct *convexHull; /* unknown property attribute:  std::__1::allocator<CGPoint> >=^{CGPoint}}} */
@property (nonatomic, readonly) double curvature;
@property (nonatomic, readonly) double endTimestamp;
@property (nonatomic) long long originalWritingDirectionIndex;
@property (nonatomic, readonly) double startTimestamp;
@property (nonatomic) struct CGVector { double x1; double x2; } strokeDeviation;
@property (nonatomic, readonly, retain) <CHStrokeIdentifier> *strokeIdentifier;
@property (nonatomic) struct CGVector { double x1; double x2; } writingOrientation;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })bounds;
- (struct CGPoint { double x1; double x2; })coalescedCenter;
- (struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)convexHull;
- (double)curvature;
- (void)dealloc;
- (double)endTimestamp;
- (id)initWithStrokeIdentifier:(id)arg1 bounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 startTimestamp:(double)arg3 endTimestamp:(double)arg4 convexHull:(struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg5 curvature:(double)arg6;
- (long long)originalWritingDirectionIndex;
- (void)setCoalescedCenter:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOriginalWritingDirectionIndex:(long long)arg1;
- (void)setStrokeDeviation:(struct CGVector { double x1; double x2; })arg1;
- (void)setWritingOrientation:(struct CGVector { double x1; double x2; })arg1;
- (double)startTimestamp;
- (struct CGVector { double x1; double x2; })strokeDeviation;
- (id)strokeIdentifier;
- (struct CGVector { double x1; double x2; })writingOrientation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
