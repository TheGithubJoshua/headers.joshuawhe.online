<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CHBottomUpStrokeGroupingStrategy.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreHandwriting.framework/CHBottomUpStrokeGroupingStrategy.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting (1.2)
 */

@interface CHBottomUpStrokeGroupingStrategy : CHStrokeGroupingStrategy

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundingBoxOfPoints:(const struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg1 rotatedAroundPoint:(struct CGPoint { double x1; double x2; })arg2 byAngle:(double)arg3;
+ (struct vector<CGRect, std::__1::allocator<CGRect> > { struct CGRect {} *x1; struct CGRect {} *x2; struct __compressed_pair<CGRect *, std::__1::allocator<CGRect> > { struct CGRect {} *x_3_1_1; } x3; })_boundingBoxesOfStrokesInGroup:(id)arg1 rotatedAroundPoint:(struct CGPoint { double x1; double x2; })arg2 byAngle:(double)arg3;
+ (double)_circumferenceRatioOfCircleFittedToPoints:(struct list<CGPoint, std::__1::allocator<CGPoint> > { struct __list_node_base<CGPoint, void *> { struct __list_node_base<CGPoint, void *> {} *x_1_1_1; struct __list_node_base<CGPoint, void *> {} *x_1_1_2; } x1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CGPoint, void *> > > { unsigned long long x_2_1_1; } x2; }*)arg1 circleCenter:(struct CGPoint { double x1; double x2; }*)arg2 circleRadius:(double*)arg3;
+ (double)_containerSupportForPoints:(const struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg1 withBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
+ (struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; })_convexHullForPoints:(struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg1;
+ (struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; })_convexHullForStroke:(id)arg1;
+ (double)_lineOrientationForStrokePoints:(const struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg1 error:(double*)arg2;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_unionStrokeBounds:(const struct vector<CGRect, std::__1::allocator<CGRect> > { struct CGRect {} *x1; struct CGRect {} *x2; struct __compressed_pair<CGRect *, std::__1::allocator<CGRect> > { struct CGRect {} *x_3_1_1; } x3; }*)arg1 aroundXPosition:(double)arg2 usingOneSideStrokeCountLimit:(long long)arg3;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_unionStrokeBounds:(const struct vector<CGRect, std::__1::allocator<CGRect> > { struct CGRect {} *x1; struct CGRect {} *x2; struct __compressed_pair<CGRect *, std::__1::allocator<CGRect> > { struct CGRect {} *x_3_1_1; } x3; }*)arg1 usingStrokeCountLimit:(long long)arg2 reverseOrder:(bool)arg3;
+ (double)_vectorMeanWithoutOutliers:(struct vector<double, std::__1::allocator<double> > { double *x1; double *x2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_1_1; } x3; }*)arg1;

- (struct CGVector { double x1; double x2; })_averageVectorFromSubstroke:(id)arg1 toSubstroke:(id)arg2 withOrientation:(struct CGVector { double x1; double x2; })arg3 strokeRef:(id)arg4 strokeDest:(id)arg5;
- (long long)_compareDistanceInWritingSequenceOfStroke:(id)arg1 andStroke:(id)arg2 toReferenceStroke:(id)arg3;
- (void)_estimateWritingDirectionAndSortSubstrokesAccordingly:(id)arg1 averageWritingOrientation:(struct CGVector { double x1; double x2; }*)arg2 averageStrokeDeviation:(struct CGVector { double x1; double x2; }*)arg3;
- (struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; })_flippedCenters:(const struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; }*)arg1 ofSubstrokes:(id)arg2 maxStrokesGap:(long long)arg3 begnning:(bool)arg4;
- (void)_getMergingEndOfLineCost:(double*)arg1 mergingEndOfLineStroke:(id*)arg2 forStroke:(id)arg3 consistingOfSubstrokes:(id)arg4 toLineGroup:(id)arg5;
- (void)_getMergingLowerBoundCost:(double*)arg1 withStrokeBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 toLineGroup:(id)arg3;
- (void)_getMergingMiddleOfLineCost:(double*)arg1 mergingMiddleOfLineStroke:(id*)arg2 forStroke:(id)arg3 consistingOfSubstrokes:(id)arg4 toLineGroup:(id)arg5;
- (bool)_isStrokeClassifiedAsDoodling:(id)arg1 withSubstrokes:(id)arg2;
- (void)_mergeGroupsPostProcessing:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3;
- (void)_refineLocalWritingOrientationsForSubstrokes:(id)arg1 useCoalescedCenter:(bool)arg2;
- (bool)_refineWritingOrientationAndResortSubstrokes:(id)arg1 averageWritingOrientation:(struct CGVector { double x1; double x2; }*)arg2;
- (double)_scaleFactorForBoundsHeight:(double)arg1;
- (void)_smoothLocalWritingOrientations:(struct vector<CGVector, std::__1::allocator<CGVector> > { struct CGVector {} *x1; struct CGVector {} *x2; struct __compressed_pair<CGVector *, std::__1::allocator<CGVector> > { struct CGVector {} *x_3_1_1; } x3; }*)arg1;
- (void)_sortSubstrokesByWritingDirection:(id)arg1 averageWritingOrientation:(struct CGVector { double x1; double x2; }*)arg2;
- (id)_substrokesForStroke:(id)arg1;
- (void)_updateLocalStrokeDeviationsForSubstrokes:(id)arg1 averageStrokeDeviation:(struct CGVector { double x1; double x2; }*)arg2;
- (void)_updateLocalWritingOrientationsForSubstrokes:(id)arg1 useCoalescedCenter:(bool)arg2;
- (void)_updateNontextCandidateSupport:(id)arg1 withStroke:(id)arg2 substrokesByStrokeIdentifier:(id)arg3 nontextStrokeIdentifiers:(id)arg4 nontextGroups:(id)arg5 createdGroups:(id)arg6;
- (void)_updateNontextCandidates:(id)arg1 byAddingStrokes:(id)arg2 substrokesByStrokeIdentifier:(id)arg3 newNontextStrokeIdentifiers:(id)arg4 textGroups:(id)arg5 nontextGroups:(id)arg6 nontextGroupsSnapshot:(id)arg7 createdGroups:(id)arg8 cancellationBlock:(id /* block */)arg9;
- (void)_updateNontextCandidates:(id)arg1 byRemovingStrokeIdentifiers:(id)arg2 substrokesByStrokeIdentifier:(id)arg3 reinsertedStrokes:(id)arg4 removedNontextStrokeIdentifiers:(id)arg5 nontextGroups:(id)arg6 createdGroups:(id)arg7 deletedGroups:(id)arg8 cancellationBlock:(id /* block */)arg9;
- (void)_updateNontextGroups:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3 byRemovingStrokeIdentifier:(id)arg4;
- (void)_updateTextGroups:(id)arg1 createdGroups:(id)arg2 deletedGroups:(id)arg3 forAddedStroke:(id)arg4 substrokesByStrokeIdentifier:(id)arg5 cancellationBlock:(id /* block */)arg6;
- (double)_verticalOffsetForBoundsHeight:(double)arg1 andScaleFactor:(double)arg2;
- (id)_writingDirectionSortedStrokeIdentifiersFromSubstrokes:(id)arg1 localWritingOrientations:(struct vector<CGVector, std::__1::allocator<CGVector> > { struct CGVector {} *x1; struct CGVector {} *x2; struct __compressed_pair<CGVector *, std::__1::allocator<CGVector> > { struct CGVector {} *x_3_1_1; } x3; }*)arg2;
- (id)averageAngleAndReliabilityForStrokeGroup:(id)arg1;
- (id)initWithStrokeProvider:(id)arg1 sessionLastResult:(id)arg2 locales:(id)arg3;
- (id)recognizableDrawingForStrokeGroup:(id)arg1 orderedStrokesIDs:(id*)arg2;
- (id)updatedGroupingResultWithCancellationBlock:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
