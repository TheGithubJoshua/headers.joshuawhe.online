<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SubStrokeSegment.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreHandwriting.framework/SubStrokeSegment.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreHandwriting.framework/CoreHandwriting (1.2)
 */

@interface SubStrokeSegment : NSObject {
    unsigned long long  _endPointIndex;
    unsigned long long  _endStrokeIndex;
    bool  _isFullStroke;
    NSMutableArray * _relatedSegmentIDs;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _segmentBounds;
    NSNumber * _segmentID;
    unsigned long long  _startPointIndex;
    unsigned long long  _startStrokeIndex;
}

@property (nonatomic) unsigned long long endPointIndex;
@property (nonatomic) unsigned long long endStrokeIndex;
@property (nonatomic) bool isFullStroke;
@property (nonatomic, retain) NSMutableArray *relatedSegmentIDs;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } segmentBounds;
@property (nonatomic, retain) NSNumber *segmentID;
@property (nonatomic) unsigned long long startPointIndex;
@property (nonatomic) unsigned long long startStrokeIndex;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingBoxFromSegmentID:(unsigned long long)arg1 toSegmentID:(unsigned long long)arg2 withSegments:(id)arg3 withSourceDrawing:(id)arg4;
+ (void)computeRelatedSegments:(id)arg1 withDelayedSegments:(id)arg2;
+ (id)generateSubStrokeSegmentsFromDrawing:(id)arg1 withSegmentationPoints:(id)arg2 extractDelayedStrokeIDs:(struct set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned long> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })arg3 extractedDelayedSegments:(id*)arg4;
+ (unsigned long long)indexForSegmentID:(id)arg1 fromSegments:(id)arg2;

- (void)dealloc;
- (unsigned long long)endPointIndex;
- (unsigned long long)endStrokeIndex;
- (id)initWithSegmentID:(id)arg1 startStrokeIndex:(unsigned long long)arg2 startPointIndex:(unsigned long long)arg3 endStrokeIndex:(unsigned long long)arg4 endPointIndex:(unsigned long long)arg5 segmentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6 isFullStroke:(bool)arg7;
- (bool)isFullStroke;
- (id)relatedSegmentIDs;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })segmentBounds;
- (id)segmentID;
- (void)setEndPointIndex:(unsigned long long)arg1;
- (void)setEndStrokeIndex:(unsigned long long)arg1;
- (void)setIsFullStroke:(bool)arg1;
- (void)setRelatedSegmentIDs:(id)arg1;
- (void)setSegmentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSegmentID:(id)arg1;
- (void)setStartPointIndex:(unsigned long long)arg1;
- (void)setStartStrokeIndex:(unsigned long long)arg1;
- (unsigned long long)startPointIndex;
- (unsigned long long)startStrokeIndex;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
