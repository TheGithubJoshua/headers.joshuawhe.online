<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HRElectrocardiogramReportGenerator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HeartRhythmUI.framework/HRElectrocardiogramReportGenerator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HeartRhythmUI.framework/HeartRhythmUI ()
 */

@interface HRElectrocardiogramReportGenerator : NSObject {
    <HRElectrocardiogramReportDataSource> * _dataSource;
    double  _descriptionTextSizeAdjustment;
    unsigned long long  _heartGlyphPositionInFirstSectionText;
    struct CGContext { } * _pdfContext;
    NSArray * _waveformPaths;
}

@property (nonatomic, readonly) <HRElectrocardiogramReportDataSource> *dataSource;
@property (nonatomic) double descriptionTextSizeAdjustment;
@property (nonatomic) unsigned long long heartGlyphPositionInFirstSectionText;
@property (nonatomic) struct CGContext { }*pdfContext;
@property (nonatomic, retain) NSArray *waveformPaths;

- (void).cxx_destruct;
- (id)_appleWatchModelText;
- (id)_averageHeartRateSectionTitleAttributedTextWithText:(id)arg1;
- (id)_averageHeartRateTitleText;
- (id)_birthdateAttributedText;
- (struct CGPoint { double x1; double x2; })_birthdateLeadingOrigin;
- (id)_birthdateText;
- (id)_blackColorWithFraction:(double)arg1;
- (id)_bulletedDescriptionAttributedTextWithBullets:(id)arg1;
- (id)_bulletedDescriptionTextAttributes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_chartRowOneAxisBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_chartRowOneGridBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_chartRowThreeAxisBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_chartRowThreeGridBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_chartRowTwoAxisBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_chartRowTwoGridBox;
- (id)_descriptionAttributedTextWithText:(id)arg1;
- (bool)_didMultilineBulletFlowIntoSectionThree:(id)arg1 remainingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_drawAttributedText:(id)arg1 atOrigin:(struct CGPoint { double x1; double x2; })arg2 leftAligned:(bool)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_drawAttributedText:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 distanceToFirstBaseline:(double)arg3 drawHeartGlyph:(bool)arg4 mustFitInRect:(bool)arg5;
- (void)_drawElectrocardiogramChartWithWaveformPathIndex:(long long)arg1 gridRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 axisRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 axisStartingIndex:(long long)arg4 displayControlSignal:(bool)arg5;
- (void)_drawHorizontalSeparatorAt:(double)arg1;
- (void)_drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawUIKitContentAtDocumentOrigin:(struct CGPoint { double x1; double x2; })arg1 drawingBlock:(id /* block */)arg2;
- (id)_footerAttributedText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_footerBox;
- (id)_horizontalChartResolutionText;
- (double)_horizontalSeparatorY;
- (id)_iOSVersionText;
- (id)_informationalText;
- (id)_leadNameText;
- (id)_nameAttributedText;
- (struct CGPoint { double x1; double x2; })_nameLeadingOrigin;
- (id)_nameText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pdfCropBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pdfMediaBox;
- (id)_rhythmClassificationDescriptionText;
- (id)_rhythmClassificationTitleText;
- (id)_sampleDateAttributedText;
- (id)_sampleDateText;
- (struct CGPoint { double x1; double x2; })_sampleDateTrailingOrigin;
- (id)_samplingRateText;
- (id)_sectionOneAttributedText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_sectionOneBox;
- (id)_sectionThreeAttributedTextWithRemainingSectionTwoAttributedText:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_sectionThreeBox;
- (id)_sectionTitleAttributedTextWithText:(id)arg1;
- (id)_sectionTwoAttributedText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_sectionTwoBox;
- (id)_symptomsContinuedTitleText;
- (id)_symptomsDescriptionText;
- (id)_symtpomsTitleText;
- (id)_verticalChartResolutionText;
- (id)_watchOSVersionText;
- (id)dataSource;
- (double)descriptionTextSizeAdjustment;
- (id)generatePDF;
- (unsigned long long)heartGlyphPositionInFirstSectionText;
- (id)initWithDataSource:(id)arg1;
- (struct CGContext { }*)pdfContext;
- (void)setDescriptionTextSizeAdjustment:(double)arg1;
- (void)setHeartGlyphPositionInFirstSectionText:(unsigned long long)arg1;
- (void)setPdfContext:(struct CGContext { }*)arg1;
- (void)setWaveformPaths:(id)arg1;
- (id)waveformPaths;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
