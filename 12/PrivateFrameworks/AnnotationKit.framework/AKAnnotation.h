<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AKAnnotation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AnnotationKit.framework/AKAnnotation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit (232.3.30)
 */

@interface AKAnnotation : NSObject <NSCopying, NSSecureCoding> {
    NSString * _UUID;
    long long  _akSerializationPlatform;
    long long  _akSerializationVersion;
    id /* block */  _appearanceOverride;
    NSString * _author;
    AKAnnotation * _childAnnotation;
    NSString * _customPlaceholderText;
    bool  _editsDisableAppearanceOverride;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _initialDrawingBoundsForAppearanceOverride;
    bool  _isDraggingHandle;
    bool  _isEdited;
    bool  _isEditingText;
    bool  _isObservingForAppearance;
    bool  _isObservingForIsEdited;
    bool  _isReallyObservingForIsEdited;
    bool  _isTranslating;
    NSDate * _modificationDate;
    long long  _originalExifOrientation;
    double  _originalModelBaseScaleFactor;
    AKAnnotation * _parentAnnotation;
    bool  _shouldUseAppearanceOverride;
    bool  _shouldUsePlaceholderText;
    bool  _textIsClipped;
    bool  _textIsFixedHeight;
    bool  _textIsFixedWidth;
}

@property (readonly) NSString *UUID;
@property long long akSerializationPlatform;
@property long long akSerializationVersion;
@property (copy) id /* block */ appearanceOverride;
@property (copy) NSString *author;
@property AKAnnotation *childAnnotation;
@property (copy) NSString *customPlaceholderText;
@property (readonly) NSString *displayName;
@property (readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } drawingBounds;
@property bool editsDisableAppearanceOverride;
@property (readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } hitTestBounds;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } initialDrawingBoundsForAppearanceOverride;
@property (readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } integralDrawingBounds;
@property bool isDraggingHandle;
@property bool isEdited;
@property bool isEditingText;
@property bool isTranslating;
@property (readonly) bool isUsingAppearanceOverride;
@property (retain) NSDate *modificationDate;
@property (nonatomic) long long originalExifOrientation;
@property (nonatomic) double originalModelBaseScaleFactor;
@property AKAnnotation *parentAnnotation;
@property (readonly) bool shouldBurnIn;
@property bool shouldObserveEdits;
@property bool shouldUseAppearanceOverride;
@property bool shouldUsePlaceholderText;
@property bool textIsClipped;
@property bool textIsFixedHeight;
@property bool textIsFixedWidth;

+ (id)annotationWithData:(id)arg1;
+ (id)defaultPlaceholderText;
+ (id)displayNameForUndoablePropertyChangeWithKey:(id)arg1;
+ (id)keyPathsForValuesAffectingDrawingBounds;
+ (id)keyPathsForValuesAffectingHitTestBounds;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)UUID;
- (void)adjustModelToCompensateForOriginalExif;
- (long long)akSerializationPlatform;
- (long long)akSerializationVersion;
- (id /* block */)appearanceOverride;
- (id)author;
- (id)childAnnotation;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)customPlaceholderText;
- (id)dataRepresentation;
- (void)dealloc;
- (id)displayName;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawingBounds;
- (bool)editsDisableAppearanceOverride;
- (void)encodeWithCoder:(id)arg1;
- (void)flattenModelExifOrientation:(long long)arg1 withModelSize:(struct CGSize { double x1; double x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hitTestBounds;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })initialDrawingBoundsForAppearanceOverride;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })integralDrawingBounds;
- (bool)isDraggingHandle;
- (bool)isEdited;
- (bool)isEditingText;
- (bool)isTranslating;
- (bool)isUsingAppearanceOverride;
- (id)keysForValuesToObserveForAdornments;
- (id)keysForValuesToObserveForRedrawing;
- (id)keysForValuesToObserveForUndo;
- (id)modificationDate;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)originalExifOrientation;
- (double)originalModelBaseScaleFactor;
- (id)parentAnnotation;
- (void)setAkSerializationPlatform:(long long)arg1;
- (void)setAkSerializationVersion:(long long)arg1;
- (void)setAppearanceOverride:(id /* block */)arg1;
- (void)setAuthor:(id)arg1;
- (void)setChildAnnotation:(id)arg1;
- (void)setCustomPlaceholderText:(id)arg1;
- (void)setEditsDisableAppearanceOverride:(bool)arg1;
- (void)setInitialDrawingBoundsForAppearanceOverride:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIsDraggingHandle:(bool)arg1;
- (void)setIsEdited:(bool)arg1;
- (void)setIsEditingText:(bool)arg1;
- (void)setIsTranslating:(bool)arg1;
- (void)setModificationDate:(id)arg1;
- (void)setOriginalExifOrientation:(long long)arg1;
- (void)setOriginalModelBaseScaleFactor:(double)arg1;
- (void)setParentAnnotation:(id)arg1;
- (void)setShouldObserveEdits:(bool)arg1;
- (void)setShouldUseAppearanceOverride:(bool)arg1;
- (void)setShouldUsePlaceholderText:(bool)arg1;
- (void)setTextIsClipped:(bool)arg1;
- (void)setTextIsFixedHeight:(bool)arg1;
- (void)setTextIsFixedWidth:(bool)arg1;
- (bool)shouldBurnIn;
- (bool)shouldObserveEdits;
- (bool)shouldUseAppearanceOverride;
- (bool)shouldUsePlaceholderText;
- (bool)textIsClipped;
- (bool)textIsFixedHeight;
- (bool)textIsFixedWidth;
- (void)translateBy:(struct CGPoint { double x1; double x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
