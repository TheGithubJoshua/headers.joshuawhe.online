<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AKAttributeController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AnnotationKit.framework/AKAttributeController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit (232.3.30)
 */

@interface AKAttributeController : NSObject {
    unsigned long long  _arrowHeadStyle;
    long long  _brushStyle;
    AKController * _controller;
    UIColor * _fillColor;
    UIFont * _font;
    bool  _hasShadow;
    long long  _highlightStyle;
    PKInk * _ink;
    UIColor * _strokeColor;
    bool  _strokeIsDashed;
    double  _strokeWidth;
    NSDictionary * _textAttributes;
    AKPageModelController * modelControllerToObserveForSelections;
}

@property unsigned long long arrowHeadStyle;
@property long long brushStyle;
@property AKController *controller;
@property (retain) UIColor *fillColor;
@property (retain) UIFont *font;
@property bool hasShadow;
@property (nonatomic) long long highlightStyle;
@property (nonatomic, retain) PKInk *ink;
@property (nonatomic, retain) AKPageModelController *modelControllerToObserveForSelections;
@property (nonatomic, retain) UIColor *strokeColor;
@property bool strokeIsDashed;
@property double strokeWidth;
@property (retain) NSDictionary *textAttributes;

+ (id)defaultFont;
+ (id)defaultTextAttributes;
+ (void)initialize;

- (void).cxx_destruct;
- (void)_allAnnotations:(id)arg1 all:(bool*)arg2 atLeastOneShare:(bool*)arg3 attributeFromTag:(long long)arg4;
- (void)_disableInkPicker:(bool)arg1;
- (bool)_isEnabledForSender:(id)arg1 segment:(long long)arg2 withSelectedAnnotations:(id)arg3;
- (void)_persistCurrentAttributes;
- (void)_restorePersistedAttributes;
- (void)_syncAttributesFromSelectedAnnotationsToUI;
- (void)_syncAttributesFromSenderToSelfAndSelectedAnnotations:(id)arg1 segment:(long long)arg2;
- (void)_updateStateOnSender:(id)arg1 segment:(long long)arg2;
- (bool)_updateStateOnSender:(id)arg1 segment:(long long)arg2 fromSelectedAnnotations:(id)arg3;
- (void)_updateStateOnSenderFromSelf:(id)arg1 segment:(long long)arg2;
- (unsigned long long)arrowHeadStyle;
- (void)beganDrawingStroke;
- (long long)brushStyle;
- (id)controller;
- (void)didEndOrCancelStroke;
- (id)fillColor;
- (id)font;
- (bool)hasShadow;
- (long long)highlightStyle;
- (id)initWithController:(id)arg1;
- (id)ink;
- (bool)isAttributeSenderEnabled:(id)arg1 segment:(long long)arg2;
- (id)modelControllerToObserveForSelections;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)performAttributeActionForSender:(id)arg1 segment:(long long)arg2;
- (void)resetToLastDrawingInk;
- (void)restoreStrokeColorToSystemDefault;
- (void)setArrowHeadStyle:(unsigned long long)arg1;
- (void)setBrushStyle:(long long)arg1;
- (void)setController:(id)arg1;
- (void)setDefaultInk;
- (void)setFillColor:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setHasShadow:(bool)arg1;
- (void)setHighlightStyle:(long long)arg1;
- (void)setInk:(id)arg1;
- (void)setModelControllerToObserveForSelections:(id)arg1;
- (void)setStrokeColor:(id)arg1;
- (void)setStrokeIsDashed:(bool)arg1;
- (void)setStrokeWidth:(double)arg1;
- (void)setTextAttributes:(id)arg1;
- (id)strokeColor;
- (bool)strokeColorIsEqualTo:(id)arg1;
- (bool)strokeIsDashed;
- (double)strokeWidth;
- (void)syncFillColorOnSelectionToUI;
- (void)syncStrokeColorOnSelectionToUI;
- (id)textAttributes;
- (void)updateAttributeSenderState:(id)arg1 segment:(long long)arg2 enabled:(bool)arg3;
- (void)updateInkIfNeeded:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
