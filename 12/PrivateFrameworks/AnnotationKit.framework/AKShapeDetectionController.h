<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AKShapeDetectionController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AnnotationKit.framework/AKShapeDetectionController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit (232.3.30)
 */

@interface AKShapeDetectionController : NSObject {
    NSMutableArray * _candidateAKTags;
    NSMutableDictionary * _candidateAKTagsToAnnotationInfoMap;
    AKAnnotation * _candidateAnnotation;
    CHDrawing * _candidateDrawing;
    AKCandidatePickerView_iOS * _candidatePickerView;
    bool  _coalescesDoodles;
    AKController * _controller;
    <AKShapeDetectionControllerDelegate> * _delegate;
    bool  _isPreviousCandidateAnnotationUndecided;
    CHDrawing * _lastDrawing;
    AKPageModelController * _modelControllerToObserveForAnnotationsAndSelections;
    bool  _preferDoodle;
    bool  _shapeDetectionEnabled;
    CHRecognizer * _shapeRecognizer;
    double  _veryHighConfidenceLevel;
}

@property (nonatomic, retain) NSMutableArray *candidateAKTags;
@property (nonatomic, retain) NSMutableDictionary *candidateAKTagsToAnnotationInfoMap;
@property (nonatomic) AKAnnotation *candidateAnnotation;
@property (nonatomic, retain) CHDrawing *candidateDrawing;
@property (nonatomic, retain) AKCandidatePickerView_iOS *candidatePickerView;
@property (nonatomic) bool coalescesDoodles;
@property (nonatomic) AKController *controller;
@property (nonatomic) <AKShapeDetectionControllerDelegate> *delegate;
@property bool isPreviousCandidateAnnotationUndecided;
@property (nonatomic, readonly) bool isShowingCandidatePicker;
@property (nonatomic, retain) CHDrawing *lastDrawing;
@property (nonatomic, retain) AKPageModelController *modelControllerToObserveForAnnotationsAndSelections;
@property (nonatomic) bool preferDoodle;
@property (getter=shapeDetectionEnabled, nonatomic) bool shapeDetectionEnabled;
@property (nonatomic, retain) CHRecognizer *shapeRecognizer;
@property double veryHighConfidenceLevel;

+ (bool)drawingIsValidForRecognition:(id)arg1 withPath:(struct CGPath { }*)arg2;
+ (void)logAllResults:(id)arg1;

- (void).cxx_destruct;
- (id)_createAnnotationWithRecognizerResult:(id)arg1 forDrawingBoundsInInputView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 shouldGoToPageController:(id*)arg3;
- (id)_createDoodleShapeResultWithPath:(struct CGPath { }*)arg1 withDrawingCenter:(struct CGPoint { double x1; double x2; })arg2 pathIsPrestroked:(bool)arg3;
- (id)_createFlippedCHDrawingFromCHDrawing:(id)arg1 withDrawingCenter:(struct CGPoint { double x1; double x2; })arg2;
- (bool)_isResultVeryHighConfidence:(id)arg1;
- (long long)_matchingBlurEffectStyleForCurrentTintColor:(id)arg1;
- (void)_performRecognitionOnDrawing:(id)arg1 withInkDrawing:(id)arg2 orWithDoodlePath:(struct CGPath { }*)arg3 boundsInInputView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 center:(struct CGPoint { double x1; double x2; })arg5 isPrestroked:(bool)arg6 optionalAnnotation:(id)arg7;
- (void)_pickCandidateResult:(id)arg1;
- (void)_pickCandidateResultWithAnnotationType:(long long)arg1;
- (void)_presentCandidatePickerBarWithCandidates:(id)arg1 ofDrawing:(id)arg2;
- (void)_shouldDismissNotification:(id)arg1;
- (void)_showCandidatePickerWithTypes:(id)arg1 forDrawingInInputView:(id)arg2 shouldSurfaceDoodle:(bool)arg3;
- (void)_teardownCandidatePicker;
- (void)_teardownCandidatePickerBar;
- (long long)_toolTagForCHRecognitionResult:(id)arg1;
- (id)candidateAKTags;
- (id)candidateAKTagsToAnnotationInfoMap;
- (id)candidateAnnotation;
- (id)candidateDrawing;
- (id)candidatePickerView;
- (void)clearPreviousCandidateAnnotation;
- (bool)coalescesDoodles;
- (id)controller;
- (id)convertDrawingBoundsInInputView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 outBoundsInPageModel:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (id)createInkResultFromInkDrawing:(id)arg1 annotation:(id)arg2;
- (void)dealloc;
- (id)delegate;
- (void)dismissCandidatePicker;
- (id)initWithController:(id)arg1;
- (bool)isPreviousCandidateAnnotationUndecided;
- (bool)isShowingCandidatePicker;
- (id)lastDrawing;
- (void)logLastDrawingToDisk;
- (id)modelControllerToObserveForAnnotationsAndSelections;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)performRecognitionOnDrawing:(id)arg1 withDrawing:(id)arg2 annotation:(id)arg3 boundsInInputView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 center:(struct CGPoint { double x1; double x2; })arg5;
- (void)performRecognitionOnDrawing:(id)arg1 withPath:(struct CGPath { }*)arg2 boundsInInputView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 center:(struct CGPoint { double x1; double x2; })arg4 isPrestroked:(bool)arg5;
- (bool)preferDoodle;
- (void)reset;
- (void)setCandidateAKTags:(id)arg1;
- (void)setCandidateAKTagsToAnnotationInfoMap:(id)arg1;
- (void)setCandidateAnnotation:(id)arg1;
- (void)setCandidateDrawing:(id)arg1;
- (void)setCandidatePickerView:(id)arg1;
- (void)setCoalescesDoodles:(bool)arg1;
- (void)setController:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsPreviousCandidateAnnotationUndecided:(bool)arg1;
- (void)setLastDrawing:(id)arg1;
- (void)setModelControllerToObserveForAnnotationsAndSelections:(id)arg1;
- (void)setPreferDoodle:(bool)arg1;
- (void)setShapeDetectionEnabled:(bool)arg1;
- (void)setShapeRecognizer:(id)arg1;
- (void)setVeryHighConfidenceLevel:(double)arg1;
- (bool)shapeDetectionEnabled;
- (id)shapeRecognizer;
- (double)veryHighConfidenceLevel;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
