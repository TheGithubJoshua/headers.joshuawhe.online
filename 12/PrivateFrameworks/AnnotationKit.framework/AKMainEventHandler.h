<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AKMainEventHandler.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AnnotationKit.framework/AKMainEventHandler.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit (232.3.30)
 */

@interface AKMainEventHandler : UIResponder <AKFormFeatureDetectorDelegate> {
    AKAnnotationEventHandler * _annotationEventHandler;
    AKAnnotation * _annotationToBeginEditingOnDragEnd;
    AKController * _controller;
    unsigned long long  _currentModifierFlags;
    AKAlignmentGuideController * _dragAlignmentGuideController;
    bool  _dragDidCopySelectedAnnotations;
    AKPageController * _dragPageController;
    double  _draggedAnnotationsMaxBottomEdge;
    double  _draggedAnnotationsMaxLeftEdge;
    double  _draggedAnnotationsMinRightEdge;
    double  _draggedAnnotationsMinTopEdge;
    struct CGPoint { 
        double x; 
        double y; 
    }  _firstDragPoint;
    AKHighlightColorEditorController * _highlightColorEditor;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastDragActualLocation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastDragActualLocationInWindow;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastDragPoint;
    UIEvent * _lastEventWithValidLocationForAutoscroll;
    UIEvent * _lastLeftMouseDownEvent;
    struct CGPoint { 
        double x; 
        double y; 
    }  _leftMouseDownPoint;
    bool  _mainEventHandlerIsInDoodleTrackingLoop;
    bool  _mainEventHandlerIsInRotationLoop;
    bool  _mainEventHandlerIsInTrackingLoop;
    struct CGPoint { 
        double x; 
        double y; 
    }  _panGestureStartPointInWindow;
    bool  _shouldEatNextLeftMouseUp;
    bool  _shouldEatNextRightMouseUp;
    bool  _undoManagerWasGroupingByEvent;
    bool  _wasSelectedByLongPressRecognizer;
}

@property (retain) AKAnnotationEventHandler *annotationEventHandler;
@property AKAnnotation *annotationToBeginEditingOnDragEnd;
@property AKController *controller;
@property unsigned long long currentModifierFlags;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) AKAlignmentGuideController *dragAlignmentGuideController;
@property bool dragDidCopySelectedAnnotations;
@property (retain) AKPageController *dragPageController;
@property double draggedAnnotationsMaxBottomEdge;
@property double draggedAnnotationsMaxLeftEdge;
@property double draggedAnnotationsMinRightEdge;
@property double draggedAnnotationsMinTopEdge;
@property struct CGPoint { double x1; double x2; } firstDragPoint;
@property (readonly) unsigned long long hash;
@property (retain) AKHighlightColorEditorController *highlightColorEditor;
@property struct CGPoint { double x1; double x2; } lastDragActualLocation;
@property struct CGPoint { double x1; double x2; } lastDragActualLocationInWindow;
@property struct CGPoint { double x1; double x2; } lastDragPoint;
@property (retain) UIEvent *lastEventWithValidLocationForAutoscroll;
@property (retain) UIEvent *lastLeftMouseDownEvent;
@property struct CGPoint { double x1; double x2; } leftMouseDownPoint;
@property bool mainEventHandlerIsInDoodleTrackingLoop;
@property bool mainEventHandlerIsInRotationLoop;
@property bool mainEventHandlerIsInTrackingLoop;
@property struct CGPoint { double x1; double x2; } panGestureStartPointInWindow;
@property bool shouldEatNextLeftMouseUp;
@property bool shouldEatNextRightMouseUp;
@property (readonly) Class superclass;
@property bool undoManagerWasGroupingByEvent;
@property bool wasSelectedByLongPressRecognizer;

+ (id)newMainEventHandlerForCurrentPlatformWithController:(id)arg1;

- (void).cxx_destruct;
- (struct CGPoint { double x1; double x2; })_alignedAnnotationDragPointForPoint:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2 orRecognizer:(id)arg3;
- (bool)_detectFormElementInCurrentPageControllerUnderPointInWindow:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_detectFormElementInCurrentPageControllerUnderPointInWindow:(struct CGPoint { double x1; double x2; })arg1 withStartingPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)_didNotHandleEventSoDeselect;
- (struct CGPoint { double x1; double x2; })_modelPointFromPointInWindow:(struct CGPoint { double x1; double x2; })arg1 usingPageController:(id)arg2;
- (void)_setCurrentPageBasedOnPageController:(id)arg1;
- (void)_updateSelectionWithAnnotation:(id)arg1 onPageController:(id)arg2;
- (id)annotationEventHandler;
- (id)annotationToBeginEditingOnDragEnd;
- (id)annotationsPassingBoundingBoxHitTestsWithPoint:(struct CGPoint { double x1; double x2; })arg1 onPageController:(id)arg2;
- (void)applyToAllSelectedAnnotationsRotateEvent:(id)arg1 orRecognizer:(id)arg2;
- (void)applyTranslationToAllSelectedAnnotations:(struct CGPoint { double x1; double x2; })arg1;
- (bool)continueDragEventTrackingLoopWithEvent:(id)arg1 orRecognizer:(id)arg2;
- (bool)continueRotateEventTrackingLoopWithEvent:(id)arg1 orRecognizer:(id)arg2;
- (id)controller;
- (unsigned long long)currentModifierFlags;
- (id)dragAlignmentGuideController;
- (bool)dragDidCopySelectedAnnotations;
- (id)dragPageController;
- (double)draggedAnnotationsMaxBottomEdge;
- (double)draggedAnnotationsMaxLeftEdge;
- (double)draggedAnnotationsMinRightEdge;
- (double)draggedAnnotationsMinTopEdge;
- (bool)enterDragEventTrackingLoopWithEvent:(id)arg1 orRecognizer:(id)arg2;
- (bool)enterRotateEventTrackingLoopWithEvent:(id)arg1 orRecognizer:(id)arg2;
- (void)finishTranslationOfAllSelectedAnnotations;
- (struct CGPoint { double x1; double x2; })firstDragPoint;
- (bool)handleDoubleDownEvent:(id)arg1 orRecognizer:(id)arg2;
- (bool)handleDownEvent:(id)arg1 orRecognizer:(id)arg2;
- (bool)handleKeyboardEvent:(id)arg1;
- (bool)handleRightDownEvent:(id)arg1;
- (bool)handleRotateEvent:(id)arg1 orRecognizer:(id)arg2;
- (id)highlightColorEditor;
- (bool)hitTestAnnotationsIncludingPOI:(bool)arg1 ignoreIfDeselected:(bool)arg2 atPointInWindow:(struct CGPoint { double x1; double x2; })arg3 outAnnotation:(id*)arg4;
- (bool)hitTestPointsOfInterestsAtPoint:(struct CGPoint { double x1; double x2; })arg1 onPageController:(id)arg2 inAnnotations:(id)arg3 event:(id)arg4 recognizer:(id)arg5 cursorUpdateOnly:(bool)arg6;
- (id)initWithController:(id)arg1;
- (struct CGPoint { double x1; double x2; })lastDragActualLocation;
- (struct CGPoint { double x1; double x2; })lastDragActualLocationInWindow;
- (struct CGPoint { double x1; double x2; })lastDragPoint;
- (id)lastEventWithValidLocationForAutoscroll;
- (id)lastLeftMouseDownEvent;
- (struct CGPoint { double x1; double x2; })leftMouseDownPoint;
- (bool)mainEventHandlerIsInDoodleTrackingLoop;
- (bool)mainEventHandlerIsInRotationLoop;
- (bool)mainEventHandlerIsInTrackingLoop;
- (bool)mainHandleEvent:(id)arg1 orRecognizer:(id)arg2;
- (struct CGPoint { double x1; double x2; })modelPointFromEvent:(id)arg1 orRecognizer:(id)arg2 onPageController:(id*)arg3;
- (struct CGPoint { double x1; double x2; })modelPointFromWindowPoint:(struct CGPoint { double x1; double x2; })arg1 foundOnPageController:(id*)arg2;
- (struct CGPoint { double x1; double x2; })panGestureStartPointInWindow;
- (void)setAnnotationEventHandler:(id)arg1;
- (void)setAnnotationToBeginEditingOnDragEnd:(id)arg1;
- (void)setController:(id)arg1;
- (void)setCurrentModifierFlags:(unsigned long long)arg1;
- (void)setDragAlignmentGuideController:(id)arg1;
- (void)setDragDidCopySelectedAnnotations:(bool)arg1;
- (void)setDragPageController:(id)arg1;
- (void)setDraggedAnnotationsMaxBottomEdge:(double)arg1;
- (void)setDraggedAnnotationsMaxLeftEdge:(double)arg1;
- (void)setDraggedAnnotationsMinRightEdge:(double)arg1;
- (void)setDraggedAnnotationsMinTopEdge:(double)arg1;
- (void)setFirstDragPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setHighlightColorEditor:(id)arg1;
- (void)setLastDragActualLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLastDragActualLocationInWindow:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLastDragPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLastEventWithValidLocationForAutoscroll:(id)arg1;
- (void)setLastLeftMouseDownEvent:(id)arg1;
- (void)setLeftMouseDownPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setMainEventHandlerIsInDoodleTrackingLoop:(bool)arg1;
- (void)setMainEventHandlerIsInRotationLoop:(bool)arg1;
- (void)setMainEventHandlerIsInTrackingLoop:(bool)arg1;
- (void)setPanGestureStartPointInWindow:(struct CGPoint { double x1; double x2; })arg1;
- (void)setShouldEatNextLeftMouseUp:(bool)arg1;
- (void)setShouldEatNextRightMouseUp:(bool)arg1;
- (void)setUndoManagerWasGroupingByEvent:(bool)arg1;
- (void)setWasSelectedByLongPressRecognizer:(bool)arg1;
- (bool)shouldEatNextLeftMouseUp;
- (bool)shouldEatNextRightMouseUp;
- (void)teardown;
- (id)topmostAnnotationForBorderAndInteriorHitTestAtPoint:(struct CGPoint { double x1; double x2; })arg1 inAnnotations:(id)arg2 onPageController:(id)arg3 wasOnBorder:(bool*)arg4 wasOnText:(bool*)arg5;
- (bool)undoManagerWasGroupingByEvent;
- (void)updateCursorForEvent:(id)arg1;
- (bool)wasSelectedByLongPressRecognizer;
- (struct CGPoint { double x1; double x2; })windowPointFromEvent:(id)arg1 orRecognizer:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
