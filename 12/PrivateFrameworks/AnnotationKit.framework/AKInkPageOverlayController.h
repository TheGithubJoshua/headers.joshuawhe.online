<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AKInkPageOverlayController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AnnotationKit.framework/AKInkPageOverlayController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit (232.3.30)
 */

@interface AKInkPageOverlayController : NSObject <AKInkOverlayViewDelegate, AKShapeDetectionControllerDelegate> {
    id /* block */  _delayedShapeDetectionBlock;
    bool  _ignoreAnnotationAndSelectionKVO;
    AKInkOverlayView * _inkOverlayView;
    double  _lastStrokeEndTime;
    bool  _onlyPencilDraws;
    AKPageController * _pageController;
    AKShapeDetectionController * _shapeDetectionController;
}

@property (readonly, copy) NSString *debugDescription;
@property (copy) id /* block */ delayedShapeDetectionBlock;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property bool ignoreAnnotationAndSelectionKVO;
@property (retain) AKInkOverlayView *inkOverlayView;
@property double lastStrokeEndTime;
@property bool onlyPencilDraws;
@property AKPageController *pageController;
@property (retain) AKShapeDetectionController *shapeDetectionController;
@property (readonly) Class superclass;

+ (id)newInkOverlayDrawingUndoTargetWithPageController:(id)arg1;

- (void).cxx_destruct;
- (void)_controllerWillSave:(id)arg1;
- (id)_convertCHDrawing:(id)arg1 fromDrawingInCanvasView:(id)arg2 toInkOverlayView:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromDrawingInCanvasView:(id)arg2 toPageControllerModelSpace:(id)arg3;
- (void)_enclosingScrollViewDidScroll:(id)arg1;
- (void)_fullSetup;
- (void)_inkDidChangeNotification:(id)arg1;
- (void)_partialTeardown;
- (void)_performDelayedShapeDetection;
- (void)_setupGestureDependencies;
- (void)_tearDownGestureDependencies;
- (void)_toolStatusUpdated:(id)arg1;
- (void)_updateAllowedTouchTypesAllEnabled:(bool)arg1 pencilEnabled:(bool)arg2;
- (void)_updateGestureDependencyPriority;
- (void)beginIgnoringAnnotationSelectionObservation:(id)arg1;
- (id /* block */)delayedShapeDetectionBlock;
- (void)endIgnoringAnnotationSelectionObservation:(id)arg1;
- (bool)ignoreAnnotationAndSelectionKVO;
- (id)initWithPageController:(id)arg1;
- (id)inkOverlayView;
- (void)inputView:(id)arg1 didCollectDrawingForAnalysis:(id)arg2;
- (bool)inputViewCanBeginDrawing:(id)arg1 withTouch:(id)arg2;
- (void)inputViewDidBeginStroke:(id)arg1;
- (bool)isIgnoringAnnotationAndSelectionKVO:(id)arg1;
- (bool)isWaitingToCoalesceStrokes;
- (double)lastStrokeEndTime;
- (bool)onlyPencilDraws;
- (id)overlayView:(id)arg1;
- (id)pageController;
- (void)setDelayedShapeDetectionBlock:(id /* block */)arg1;
- (void)setIgnoreAnnotationAndSelectionKVO:(bool)arg1;
- (void)setInkOverlayView:(id)arg1;
- (void)setLastStrokeEndTime:(double)arg1;
- (void)setOnlyPencilDraws:(bool)arg1;
- (void)setPageController:(id)arg1;
- (void)setShapeDetectionController:(id)arg1;
- (void)setup;
- (id)shapeDetectionController;
- (bool)shapeDetectionController:(id)arg1 shouldSelectCandidateAnnotation:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })shapeDetectionControllerPositioningRectForCandidatePicker:(id)arg1;
- (void)shapeDetectionControllerWillPickCandidate:(id)arg1 isInk:(bool)arg2;
- (void)teardown;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
