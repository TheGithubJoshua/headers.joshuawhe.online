<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AKSignatureView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AnnotationKit.framework/AKSignatureView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit (232.3.30)
 */

@interface AKSignatureView : UIView {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _accumulatedSignatureDirtyRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _aggregateInvalid;
    AKBitmapFIFO * _bitmapFifo;
    CHBoxcarFilterPointFIFO * _boxcarFIFO;
    struct CGColor { } * _cgColor;
    double  _currentWeight;
    CHQuadCurvePointFIFO * _interpolatingFIFO;
    bool  _isAddingPointWithoutSmoothing;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastPoint;
    double  _lastSetNeedsDisplayCallToSuperTime;
    double  _maxPressure;
    double  _maxThickness;
    double  _minPressure;
    double  _minThickness;
    UIColor * _strokeColor;
    CHPointStrokeFIFO * _strokeFIFO;
    struct CGPoint { 
        double x; 
        double y; 
    }  _strokeLastLocation;
    struct CGPoint { 
        double x; 
        double y; 
    }  _strokeStartLocation;
    double  _strokeStartTime;
    unsigned long long  _totalPointsAdded;
    id  _trackingTouchID;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unionDrawingRect;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } aggregateInvalid;
@property (nonatomic, retain) AKBitmapFIFO *bitmapFifo;
@property (nonatomic, retain) CHBoxcarFilterPointFIFO *boxcarFIFO;
@property (nonatomic) double currentWeight;
@property (nonatomic, readonly) double interfaceScale;
@property (nonatomic, retain) CHQuadCurvePointFIFO *interpolatingFIFO;
@property bool isAddingPointWithoutSmoothing;
@property (nonatomic) double maxPressure;
@property (nonatomic) double maxThickness;
@property (nonatomic) double minPressure;
@property (nonatomic) double minThickness;
@property (nonatomic, retain) UIColor *strokeColor;
@property (nonatomic, retain) CHPointStrokeFIFO *strokeFIFO;
@property struct CGPoint { double x1; double x2; } strokeLastLocation;
@property struct CGPoint { double x1; double x2; } strokeStartLocation;
@property double strokeStartTime;
@property unsigned long long totalPointsAdded;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unionDrawingRect;

- (void).cxx_destruct;
- (void)_commonInit;
- (void)_forceRedisplay;
- (double)_windowBackingScaleFactor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })aggregateInvalid;
- (bool)ak_forceAvailableForTouch:(id)arg1;
- (id)bitmapFifo;
- (id)boxcarFIFO;
- (void)clear;
- (void)continueStroke;
- (void)continueStrokeWithoutSmoothing;
- (struct CGPath { }*)copyStrokedInterpolatedPath;
- (double)currentWeight;
- (void)dealloc;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)handleCoalescedTouches:(id)arg1 forTouch:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)interfaceScale;
- (id)interpolatingFIFO;
- (bool)isAddingPointWithoutSmoothing;
- (double)maxPressure;
- (double)maxThickness;
- (double)minPressure;
- (double)minThickness;
- (void)setAggregateInvalid:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBitmapFifo:(id)arg1;
- (void)setBoxcarFIFO:(id)arg1;
- (void)setCurrentWeight:(double)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInterpolatingFIFO:(id)arg1;
- (void)setIsAddingPointWithoutSmoothing:(bool)arg1;
- (void)setMaxPressure:(double)arg1;
- (void)setMaxThickness:(double)arg1;
- (void)setMinPressure:(double)arg1;
- (void)setMinThickness:(double)arg1;
- (void)setNeedsDisplayInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setStrokeColor:(id)arg1;
- (void)setStrokeFIFO:(id)arg1;
- (void)setStrokeLastLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setStrokeStartLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setStrokeStartTime:(double)arg1;
- (void)setTotalPointsAdded:(unsigned long long)arg1;
- (void)setUnionDrawingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)startStroke;
- (id)strokeColor;
- (id)strokeFIFO;
- (struct CGPoint { double x1; double x2; })strokeLastLocation;
- (struct CGPoint { double x1; double x2; })strokeStartLocation;
- (double)strokeStartTime;
- (void)teardown;
- (void)terminateStroke;
- (unsigned long long)totalPointsAdded;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unionDrawingRect;
- (double)weightForTouch:(id)arg1;
- (double)weightForValue:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
