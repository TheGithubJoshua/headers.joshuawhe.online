<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_DKSyncCoordinator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreDuet.framework/_DKSyncCoordinator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet (1)
 */

@interface _DKSyncCoordinator : NSObject <APSConnectionDelegate> {
    _DKThrottledActivity * _activityThrottler;
    bool  _cloudSyncAvailablityObserverRegistered;
    APSConnection * _connection;
    bool  _databaseObserversRegistered;
    NSObject<OS_dispatch_queue> * _executionQueue;
    bool  _periodJobIsRegistered;
    bool  _siriSyncEnabledObserverRegistered;
    _DKKnowledgeStorage * _storage;
    NSArray * _streamNamesObservedForAdditions;
    NSArray * _streamNamesObservedForDeletions;
    NSString * _syncActivityName;
    NSHashTable * _syncCoordinatorEventNotificationDelegates;
    bool  _syncPolicyChangedObserverRegistered;
    _DKSyncState * _syncState;
    NSString * _triggeredSyncDelayActivityName;
    bool  _triggeredSyncObserverRegistered;
    id  c2;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) _DKKnowledgeStorage *storage;
@property (readonly) Class superclass;

+ (void)validateConfigurationWithStorePath:(id)arg1;

- (void).cxx_destruct;
- (void)__performSyncWithPolicy:(id)arg1 isTriggeredSync:(bool)arg2 localChangeSets:(id)arg3 reply:(id /* block */)arg4;
- (void)_addLastSyncDate:(id)arg1;
- (id)_changeSetsByDeviceFromChangeSets:(id)arg1;
- (void)_checkIfNumChangesTriggersSync;
- (void)_cloudSyncAvailabilityDidChange:(id)arg1;
- (void)_cloudSyncDidReset:(id)arg1;
- (void)_createPushConnection;
- (void)_databaseDidAddToStreamName:(id)arg1;
- (void)_databaseDidDeleteFromStreamName:(id)arg1;
- (void)_databaseDidHaveInsertsAndDeletesWithInsertsAndDeletesCount:(unsigned long long)arg1;
- (void)_deleteAllRemoteSyncDataIfSiriCloudSyncHasBeenDisabled;
- (void)_deleteEventsForDevices:(id)arg1;
- (void)_deleteRemoteCloudEvents;
- (void)_deleteRemoteCloudEventsAndStorage;
- (void)_deleteSiriSyncData;
- (void)_destroyPushConnection;
- (bool)_device:(id)arg1 hasMissingChangeSetInDeletionChangeSets:(id)arg2;
- (id)_fetchLocalChangeSetsSinceQueryStartDate:(id)arg1 error:(id*)arg2;
- (double)_intervalForJobGivenPolicy:(id)arg1 isSingleDevice:(bool)arg2;
- (unsigned long long)_lastChangeCount;
- (id)_lastDaySyncDates;
- (id)_lastLocalQueryEndDate;
- (id)_lastSyncDownFromCloudDate;
- (id)_lastSyncQueryEndDate;
- (id)_lastSyncUpToCloudDate;
- (void)_performPeriodicJob;
- (bool)_performSyncDownWithPolicy:(id)arg1 additionChangeSets:(id)arg2;
- (bool)_performSyncDownWithPolicy:(id)arg1 deletionChangeSets:(id)arg2;
- (bool)_performSyncDownWithPolicy:(id)arg1 queryStartDate:(id)arg2 error:(id*)arg3;
- (void)_performSyncTogglesChangedActions;
- (bool)_performSyncUpWithPolicy:(id)arg1 queryStartDate:(id)arg2 localChangeSets:(id)arg3 error:(id*)arg4;
- (void)_performSyncWithPolicy:(id)arg1 isTriggeredSync:(bool)arg2 localChangeSets:(id)arg3 reply:(id /* block */)arg4;
- (void)_possiblyPerformInitialSync;
- (id)_prunedAdditionChangeSets:(id)arg1 withDevicesToPrune:(id)arg2;
- (id)_prunedAdditionChangeSetsFromSyncChanges:(id)arg1;
- (id)_queryStartDateGivenPolicy:(id)arg1 lastQueryEndDate:(id)arg2 isTriggeredSync:(bool)arg3;
- (void)_registerCloudSyncAvailablityObserver;
- (void)_registerDatabaseObservers;
- (void)_registerPeriodicJob;
- (void)_registerSiriSyncEnabledObserver;
- (void)_registerSyncPolicyChangedObserver;
- (void)_sendNotificationsForAppliedRemoteAdditionChangeSet:(id)arg1;
- (void)_sendNotificationsForAppliedRemoteDeletionChangeSet:(id)arg1 deleted:(unsigned long long)arg2;
- (void)_sendNotificationsForCreatedAdditionChangeSet:(id)arg1;
- (void)_sendNotificationsForCreatedDeletionChangeSet:(id)arg1;
- (unsigned long long)_sequenceNumberOfLastDeletionChangeSetProcessedFromDevice:(id)arg1;
- (void)_setIfHigherSequenceNumber:(unsigned long long)arg1 ofLastDeletionChangeSetProcessedFromDevice:(id)arg2;
- (void)_setLastChangeCount:(unsigned long long)arg1;
- (void)_setLastLocalQueryEndDate:(id)arg1;
- (void)_setLastSyncDownFromCloudDate:(id)arg1;
- (void)_setLastSyncQueryEndDate:(id)arg1;
- (void)_setLastSyncUpToCloudDate:(id)arg1;
- (void)_siriSyncEnabledDidChange;
- (void)_syncPolicyDidChange:(id)arg1;
- (void)_unregisterCloudSyncAvailablityObserver;
- (void)_unregisterDatabaseObservers;
- (void)_unregisterPeriodicJob;
- (void)_unregisterSiriSyncEnabledObserver;
- (void)_unregisterSyncPolicyChangedObserver;
- (void)addSyncCoordinatorEventNotificationDelegate:(id)arg1;
- (id)changeSetForSyncWithInsertedObjects:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 error:(id*)arg4;
- (id)changeSetForSyncWithTombstones:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 error:(id*)arg4;
- (void)connection:(id)arg1 didReceiveIncomingMessage:(id)arg2;
- (void)connection:(id)arg1 didReceivePublicToken:(id)arg2;
- (void)dealloc;
- (void)deleteRemoteStateWithReply:(id /* block */)arg1;
- (id)initWithStorage:(id)arg1;
- (void)knowledgeStorage:(id)arg1 didDeleteEventsWithStreamNameCounts:(id)arg2;
- (void)knowledgeStorage:(id)arg1 didHaveInsertsAndDeletesWithCount:(unsigned long long)arg2;
- (void)knowledgeStorage:(id)arg1 didInsertEventsWithStreamNameCounts:(id)arg2;
- (void)performSyncWithPolicy:(id)arg1 reply:(id /* block */)arg2;
- (void)removeSyncCoordinatorEventNotificationDelegate:(id)arg1;
- (id)storage;
- (void)syncWithReply:(id /* block */)arg1;
- (void)synchronizeWithUrgency:(unsigned long long)arg1 client:(id)arg2 reply:(id /* block */)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
