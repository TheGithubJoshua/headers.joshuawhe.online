<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_DKKnowledgeStorage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreDuet.framework/_DKKnowledgeStorage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet (1)
 */

@interface _DKKnowledgeStorage : NSObject <_DKCoreDataStorageDelegate, _DKKnowledgeDeleting, _DKKnowledgeEventStreamDeleting, _DKKnowledgeQuerying, _DKKnowledgeSaving> {
    NSObject<OS_dispatch_queue> * _defaultResponseQueue;
    _DKPreferences * _defaults;
    NSUUID * _deviceUUID;
    NSString * _directory;
    NSObject<OS_dispatch_queue> * _executionQueue;
    unsigned long long  _insertsAndDeletesObserverCount;
    NSHashTable * _knowledgeStorageEventNotificationDelegates;
    bool  _localOnly;
    NSURL * _modelURL;
    NSObject<OS_dispatch_queue> * _readQueue;
    _DKCoreDataStorage * _storage;
    _DKCoreDataStorage * _syncStorage;
    _DKTombstonePolicy * _tombstonePolicy;
}

@property (nonatomic, readonly) _DKPreferences *defaults;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *executionQueue;
@property (nonatomic, readonly) unsigned long long finalMigrationVersion;
@property (nonatomic, readonly) bool localOnly;
@property (nonatomic, readonly) _DKCoreDataStorage *storage;
@property (nonatomic, readonly) _DKCoreDataStorage *syncStorage;
@property (retain) _DKTombstonePolicy *tombstonePolicy;

+ (id)sourceDeviceIdentityFromDeviceID:(id)arg1;
+ (id)sourceDeviceIdentityFromObject:(id)arg1;
+ (id)storageWithDirectory:(id)arg1 readOnly:(bool)arg2;
+ (id)storageWithDirectory:(id)arg1 readOnly:(bool)arg2 localOnly:(bool)arg3;
+ (id)storeWithDirectory:(id)arg1 readOnly:(bool)arg2;

- (void).cxx_destruct;
- (void)_databaseChangedWithNotification:(id)arg1;
- (unsigned long long)_deleteAllEventsMatchingPredicate:(id)arg1 error:(id*)arg2;
- (bool)_deleteObjects:(id)arg1 error:(id*)arg2;
- (id)_executeQuery:(id)arg1 error:(id*)arg2;
- (id)_requestForChangeSinceDate:(id)arg1;
- (bool)_saveObjects:(id)arg1 error:(id*)arg2;
- (void)_sendEventsNotificationName:(id)arg1 withObjects:(id)arg2;
- (void)_sendInsertEventsNotificationWithObjects:(id)arg1;
- (void)_sendTombstoneNotificationsForRequirementIdentifiers:(id)arg1;
- (void)_sendTombstoneNotificationsWithStreamNameCounts:(id)arg1;
- (void)_tombstoneObjects:(id)arg1 error:(id*)arg2;
- (void)_tombstoneObjectsMatchingPredicate:(id)arg1 batchSize:(unsigned long long)arg2 error:(id*)arg3;
- (void)addKnowledgeStorageEventNotificationDelegate:(id)arg1;
- (void)closeStorage;
- (void)closeSyncStorage;
- (void)configureDeviceUUID;
- (bool)copyValueToManagedObject:(id)arg1;
- (bool)coreDataStorage:(id)arg1 didAutoMigratePersistentStore:(id)arg2 toManagedObjectModel:(id)arg3 havingVersion:(unsigned long long)arg4 error:(id*)arg5;
- (id)coreDataStorage:(id)arg1 needsManagedObjectModelNameForVersion:(unsigned long long)arg2;
- (bool)coreDataStorage:(id)arg1 shouldCallDelegateAfterAutoMigrationToManagedObjectModelHavingVersion:(unsigned long long)arg2;
- (bool)coreDataStorage:(id)arg1 shouldCallDelegateBeforeAutoMigrationFromManagedObjectModelHavingVersion:(unsigned long long)arg2;
- (bool)coreDataStorage:(id)arg1 willAutoMigrateStoreAtURL:(id)arg2 fromManagedObjectModel:(id)arg3 havingVersion:(unsigned long long)arg4 error:(id*)arg5;
- (void)decrementInsertsAndDeletesObserverCount;
- (id)defaults;
- (unsigned long long)deleteAllEventsInEventStream:(id)arg1 error:(id*)arg2;
- (void)deleteAllEventsInEventStream:(id)arg1 responseQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (unsigned long long)deleteAllEventsMatchingPredicate:(id)arg1 error:(id*)arg2;
- (void)deleteAllEventsMatchingPredicate:(id)arg1 responseQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (unsigned long long)deleteEventsMatchingPredicate:(id)arg1 limit:(unsigned long long)arg2;
- (unsigned long long)deleteEventsStartingEarlierThanDate:(id)arg1 limit:(unsigned long long)arg2;
- (unsigned long long)deleteHistogram:(id)arg1;
- (bool)deleteObjects:(id)arg1 error:(id*)arg2;
- (void)deleteObjects:(id)arg1 responseQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (unsigned long long)deleteObjectsInEventStream:(id)arg1 ifNeededToLimitEventCount:(unsigned long long)arg2 batchLimit:(unsigned long long)arg3;
- (unsigned long long)deleteObjectsInEventStreams:(id)arg1 olderThanDate:(id)arg2 limit:(unsigned long long)arg3;
- (unsigned long long)deleteObjectsOlderThanDate:(id)arg1 excludingPredicate:(id)arg2 limit:(unsigned long long)arg3;
- (unsigned long long)deleteOldObjectsIfNeededToLimitTotalNumber:(unsigned long long)arg1 excludingPredicate:(id)arg2 limit:(unsigned long long)arg3;
- (unsigned long long)deleteOrphanedEntities;
- (bool)deleteStorage;
- (bool)deleteSyncStorage;
- (id)deviceUUID;
- (id)errorForException:(id)arg1;
- (unsigned long long)eventCount;
- (id)eventCountPerStreamName;
- (id)executeQuery:(id)arg1 error:(id*)arg2;
- (void)executeQuery:(id)arg1 responseQueue:(id)arg2;
- (void)executeQuery:(id)arg1 responseQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (id)executionQueue;
- (id)fetchLocalChangesSinceDate:(id)arg1 error:(id*)arg2;
- (id)fetchSyncChangesSinceDate:(id)arg1 error:(id*)arg2;
- (unsigned long long)finalMigrationVersion;
- (void)incrementInsertsAndDeletesObserverCount;
- (id)initWithDirectory:(id)arg1 readOnly:(bool)arg2 localOnly:(bool)arg3;
- (id)keyValueObjectForKey:(id)arg1 domain:(id)arg2;
- (id)keyValueStoreForDomain:(id)arg1;
- (id)lastChangeSetWithEntityName:(id)arg1 error:(id*)arg2;
- (unsigned long long)lastSequenceNumberForChangeSetWithEntityName:(id)arg1 error:(id*)arg2;
- (bool)localOnly;
- (id)nilArrayError;
- (id)removeBadObjects:(id)arg1;
- (void)removeKeyValueObjectForKey:(id)arg1 domain:(id)arg2;
- (void)removeKnowledgeStorageEventNotificationDelegate:(id)arg1;
- (void)removeSyncPeer:(id)arg1;
- (bool)saveChangeSetsForSync:(id)arg1 error:(id*)arg2;
- (void)saveHistogram:(id)arg1 responseQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (bool)saveObjects:(id)arg1 error:(id*)arg2;
- (void)saveObjects:(id)arg1 responseQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (bool)saveSyncPeer:(id)arg1 error:(id*)arg2;
- (void)setKeyValueObject:(id)arg1 forKey:(id)arg2 domain:(id)arg3;
- (void)setTombstonePolicy:(id)arg1;
- (id)sourceDeviceIdentity;
- (void)startSyncDownFromCloudWithResponseQueue:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)startSyncUpToCloudWithResponseQueue:(id)arg1 withCompletion:(id /* block */)arg2;
- (id)storage;
- (id)syncPeersWithError:(id*)arg1;
- (id)syncStorage;
- (id)syncStorageAssertion;
- (id)syncStorageIfAvailable;
- (id)tombstonePolicy;
- (bool)updateDataAfterAutoMigrationToVersion:(unsigned long long)arg1 inPersistentStore:(id)arg2 error:(id*)arg3;
- (bool)updateDataBeforeAutoMigrationFromVersion:(unsigned long long)arg1 inStoreAtURL:(id)arg2 error:(id*)arg3;
- (void)updateToFinalMetadata:(id)arg1;
- (id)versionsRequiringManualMigration;
- (id)versionsRequiringManualSetup;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
