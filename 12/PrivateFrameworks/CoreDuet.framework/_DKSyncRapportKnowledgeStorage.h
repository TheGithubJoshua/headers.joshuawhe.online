<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_DKSyncRapportKnowledgeStorage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreDuet.framework/_DKSyncRapportKnowledgeStorage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreDuet.framework/CoreDuet (1)
 */

@interface _DKSyncRapportKnowledgeStorage : NSObject <_DKSyncRemoteKnowledgeStorage> {
    RPCompanionLinkClient * _client;
    NSMutableDictionary * _companionLinkClients;
    NSObject<OS_dispatch_source> * _companionLinkClientsCleanupTimer;
    unsigned long long  _currentChangeSetSequenceNumber;
    <_DKSyncRemoteKnowledgeStorageFetchDelegate> * _delegate;
    NSDictionary * _failIfAsleepOption;
    _DKEventTypeResultStatsCounter * _failIfAsleepStats;
    bool  _isAvailable;
    unsigned long long  _outstandingRequestCount;
    double  _retryTimeout;
}

@property (retain) <_DKSyncRemoteKnowledgeStorageFetchDelegate> *delegate;
@property bool isAvailable;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)cancelOutstandingOperations;
- (id)changeSetForSyncWithEventsToInsert:(id)arg1 eventIDsToDeletes:(id)arg2 error:(id*)arg3;
- (id)changeSetFromCompressedData:(id)arg1 deviceIdentifier:(id)arg2 sequenceNumber:(unsigned long long)arg3;
- (void)clearPrewarmedFlag;
- (id)clientForPeer:(id)arg1;
- (void)companionLinkCleanupTimerFired;
- (void)createOrRescheduleCompanionLinkClientsCleanupTimer;
- (id)dataFromChangeSet:(id)arg1 didCompress:(bool*)arg2;
- (void)dealloc;
- (id)delegate;
- (id)deviceForPeer:(id)arg1;
- (void)fetchAdditionsHighWaterMarkWithPeer:(id)arg1 highPriority:(bool)arg2 completion:(id /* block */)arg3;
- (void)fetchDeletedEventIDsFromPeer:(id)arg1 sinceDate:(id)arg2 streamNames:(id)arg3 limit:(unsigned long long)arg4 highPriority:(bool)arg5 completion:(id /* block */)arg6;
- (void)fetchDeletionsHighWaterMarkWithPeer:(id)arg1 highPriority:(bool)arg2 completion:(id /* block */)arg3;
- (void)fetchEventsFromPeer:(id)arg1 creationDateBetweenDate:(id)arg2 andDate:(id)arg3 streamNames:(id)arg4 limit:(unsigned long long)arg5 fetchOrder:(long long)arg6 highPriority:(bool)arg7 completion:(id /* block */)arg8;
- (void)fetchSourceDeviceIDFromPeer:(id)arg1 highPriority:(bool)arg2 completion:(id /* block */)arg3;
- (void)handleActivateCompanionLinkClient:(id)arg1 forPeer:(id)arg2 error:(id)arg3;
- (void)handleActivateWithError:(id)arg1;
- (void)handleAvailabilityFailureWithPeer:(id)arg1 completion:(id /* block */)arg2;
- (void)handleBeaconWithRequest:(id)arg1 options:(id)arg2 responseHandler:(id /* block */)arg3;
- (void)handleBeaconWithResponse:(id)arg1 options:(id)arg2 error:(id)arg3 peer:(id)arg4 completion:(id /* block */)arg5;
- (void)handleDeviceChanged:(id)arg1 changes:(unsigned int)arg2;
- (void)handleDeviceFound:(id)arg1;
- (void)handleDeviceLost:(id)arg1;
- (void)handleFetchDeletedEventIDsWithRequest:(id)arg1 options:(id)arg2 responseHandler:(id /* block */)arg3;
- (void)handleFetchDeletedEventIDsWithResponse:(id)arg1 options:(id)arg2 error:(id)arg3 peer:(id)arg4 plStartDate:(id)arg5 completion:(id /* block */)arg6;
- (void)handleFetchEventsWithRequest:(id)arg1 options:(id)arg2 responseHandler:(id /* block */)arg3;
- (void)handleFetchEventsWithResponse:(id)arg1 options:(id)arg2 error:(id)arg3 peer:(id)arg4 plStartDate:(id)arg5 completion:(id /* block */)arg6;
- (void)handleFetchSourceDeviceIDWithRequest:(id)arg1 options:(id)arg2 responseHandler:(id /* block */)arg3;
- (void)handleFetchSourceDeviceIDWithResponse:(id)arg1 options:(id)arg2 error:(id)arg3 peer:(id)arg4 plStartDate:(id)arg5 completion:(id /* block */)arg6;
- (void)handleInvalidation;
- (void)handshakeWithDuetSyncPeer:(id)arg1 orError:(id)arg2;
- (bool)hasAdditionsFlagForPeer:(id)arg1;
- (bool)hasDeletionsFlagForPeer:(id)arg1;
- (id)init;
- (bool)isAvailable;
- (bool)isTransportActiveForPeer:(id)arg1;
- (id)myDeviceID;
- (id)name;
- (void)performCompanionLinkCleanup;
- (void)prewarmFetchWithCompletion:(id /* block */)arg1;
- (void)registerRequestIDsWithClient:(id)arg1;
- (void)removeAllClientsWithRetiring:(bool)arg1;
- (void)removeClient:(id)arg1 forPeer:(id)arg2 retiring:(bool)arg3;
- (void)sendBeaconToPeer:(id)arg1 completion:(id /* block */)arg2;
- (void)sendRequestID:(id)arg1 request:(id)arg2 peer:(id)arg3 client:(id)arg4 options:(id)arg5 responseHandler:(id /* block */)arg6;
- (void)sendRequestID:(id)arg1 request:(id)arg2 peer:(id)arg3 options:(id)arg4 responseHandler:(id /* block */)arg5;
- (void)setClient:(id)arg1 forPeer:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setFetchDelegate:(id)arg1;
- (void)setHasAdditionsFlag:(bool)arg1 forPeer:(id)arg2;
- (void)setHasDeletionsFlag:(bool)arg1 forPeer:(id)arg2;
- (void)setIsAvailable:(bool)arg1;
- (void)start;
- (void)startRapport;
- (id)transformCaughtObject:(id)arg1 existingError:(id)arg2;
- (id)transformResponseError:(id)arg1;
- (long long)transportType;
- (void)updateStorageWithAddedEvents:(id)arg1 deletedEventIDs:(id)arg2 highPriority:(bool)arg3 completion:(id /* block */)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
