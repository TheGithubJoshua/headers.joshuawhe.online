<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIQueuingScrollView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIQueuingScrollView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIQueuingScrollView : UIScrollView {
    NSMutableArray * _completionStateQueue;
    struct { 
        unsigned int delegateInterestedInPendingScrolls : 1; 
        unsigned int delegateInterestedInCommittedScrolls : 1; 
        unsigned int delegateInterestedInCompletedScrolls : 1; 
        unsigned int delegateInterestedInBailedOutScrolls : 1; 
        unsigned int delegateInterestedFinishedScrolling : 1; 
        unsigned int delegateCanVetoSubviewLayout : 1; 
        unsigned int dataSourceSuppliesBeforeView : 1; 
        unsigned int dataSourceSuppliesAfterView : 1; 
        unsigned int dataSourceInterestedInFlushedViews : 1; 
    }  _delegateFlags;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _disabledScrollingRegion;
    bool  _manualScrollInProgress;
    long long  _navigationOrientation;
    double  _pageSpacing;
    UIView * _pendingVisibleView;
    <_UIQueuingScrollViewDataSource> * _qDataSource;
    <_UIQueuingScrollViewDelegate> * _qDelegate;
    NSMutableArray * _viewStateQueue;
    NSArray * _views;
    NSArray * _wrapperViews;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } disabledScrollingRegion;
@property (nonatomic) double pageSpacing;
@property (nonatomic) <_UIQueuingScrollViewDataSource> *qDataSource;
@property (nonatomic) <_UIQueuingScrollViewDelegate> *qDelegate;
@property (nonatomic, readonly) UIView *visibleView;

- (void).cxx_destruct;
- (unsigned long long)_abuttedPagingEdges;
- (void)_adjustContentInsets;
- (void)_boundsDidChangeToSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_cleanUpCompletionState:(id)arg1 didFinish:(bool)arg2 didComplete:(bool)arg3;
- (void)_commitGestureDrivenScrollRevealingView:(id)arg1 concealingView:(id)arg2 inDirection:(long long)arg3 canComplete:(bool)arg4;
- (bool)_dataSourceProvidesViews;
- (id)_dequeueViewForIndex:(long long)arg1;
- (void)_didEndDraggingManualScroll;
- (void)_didEndManualScroll;
- (void)_didEndProgrammaticScroll;
- (void)_didEndScroll:(bool)arg1;
- (void)_didScrollWithAnimation:(bool)arg1 force:(bool)arg2;
- (void)_enqueueAnimatedScrollInDirection:(long long)arg1 withView:(id)arg2 completion:(id /* block */)arg3;
- (void)_enqueueCompletionState:(id)arg1;
- (void)_flushView:(id)arg1 animated:(bool)arg2;
- (bool)_gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (void)_handleDirectionalPageWithHorizontalVelocity:(double)arg1 verticalVelocity:(double)arg2;
- (void)_invalidateOffscreenViews;
- (bool)_isDeceleratingInOppositionToNavigationDirection:(long long)arg1;
- (bool)_isScrollInProgress:(bool)arg1;
- (long long)_navigationDirectionForActiveScroll:(bool)arg1;
- (long long)_navigationDirectionFromCurrentOffset;
- (void)_notifyDelegateDidBailoutOfScrollAndRevealedView:(id)arg1;
- (void)_notifyDelegateDidCommitManualScroll:(bool)arg1 toRevealView:(id)arg2 concealView:(id)arg3 direction:(long long)arg4 animated:(bool)arg5 canComplete:(bool)arg6;
- (void)_notifyDelegateDidEndManualScroll:(bool)arg1 toRevealView:(id)arg2 direction:(long long)arg3 animated:(bool)arg4 didFinish:(bool)arg5 didComplete:(bool)arg6;
- (void)_notifyDelegateDidFinishScrolling;
- (void)_notifyDelegateWillManuallyScroll:(bool)arg1 toRevealView:(id)arg2 concealingView:(id)arg3 animated:(bool)arg4;
- (void)_replaceViews:(id)arg1 updatingContents:(bool)arg2 adjustContentInsets:(bool)arg3 animated:(bool)arg4;
- (id)_requestViewForIndex:(long long)arg1;
- (void)_scrollViewAnimationEnded:(id)arg1 finished:(bool)arg2;
- (void)_scrollViewDidEndDecelerating;
- (void)_scrollViewDidEndDraggingWithDeceleration:(bool)arg1;
- (void)_setFrameAndApplyPageSpacing:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setWrappedViewAtIndex:(long long)arg1 withView:(id)arg2;
- (id)_viewAfterView:(id)arg1;
- (id)_viewAtIndex:(long long)arg1 loadingIfNecessary:(bool)arg2 updatingContents:(bool)arg3 animated:(bool)arg4;
- (id)_viewBefore:(bool)arg1 view:(id)arg2;
- (id)_viewBeforeView:(id)arg1;
- (id)_visibleView;
- (bool)canBecomeFocused;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })disabledScrollingRegion;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 navigationOrientation:(long long)arg2;
- (bool)isManualScrollInProgress;
- (bool)isPreviousScrollCompatibleWithScrollInDirection:(long long)arg1;
- (void)layoutSubviews;
- (double)pageSpacing;
- (id)qDataSource;
- (id)qDelegate;
- (void)scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDisabledScrollingRegion:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPageSpacing:(double)arg1;
- (void)setQDataSource:(id)arg1;
- (void)setQDelegate:(id)arg1;
- (void)setView:(id)arg1 direction:(long long)arg2 animated:(bool)arg3 completion:(id /* block */)arg4;
- (id)visibleView;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
