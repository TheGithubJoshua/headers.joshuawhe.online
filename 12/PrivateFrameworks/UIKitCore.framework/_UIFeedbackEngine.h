<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIFeedbackEngine.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIFeedbackEngine.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIFeedbackEngine : NSObject {
    unsigned long long  _backgroundTaskIdentifier;
    NSMutableDictionary * _completionBlocks;
    bool  _enabled;
    unsigned long long  _numberOfClients;
    long long  _prewarmCount;
    long long  _state;
    bool  _suspended;
    long long  _suspensionState;
    NSTimer * _suspensionTimer;
}

@property (nonatomic, readonly) NSString *_stats_key;
@property (getter=_backgroundTaskIdentifier, setter=_setBackgroundTaskIdentifier:, nonatomic) unsigned long long backgroundTaskIdentifier;
@property (nonatomic, readonly) double currentTime;
@property (getter=isEnabled, setter=_setEnabled:, nonatomic) bool enabled;
@property (nonatomic, readonly) unsigned long long numberOfClients;
@property (nonatomic) long long prewarmCount;
@property (getter=_state, setter=_setState:, nonatomic) long long state;
@property (getter=_isSuspended, setter=_setSuspended:, nonatomic) bool suspended;
@property (getter=_suspensionState, nonatomic, readonly) long long suspensionState;

+ (bool)_supportsPlayingFeedback:(id)arg1;
+ (id)engineForFeedback:(id)arg1;
+ (id)sharedEngine;

- (void).cxx_destruct;
- (void)_activateEngine;
- (void)_activateUnderlyingPlayerWithCompletion:(id /* block */)arg1;
- (void)_activateWithCompletionBlock:(id /* block */)arg1;
- (id)_activationCountStatistics;
- (id)_activationDurationStatistics;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidResume:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_applicationWillSuspend:(id)arg1;
- (unsigned long long)_backgroundTaskIdentifier;
- (bool)_canPlayFeedback:(id)arg1;
- (void)_cooldown;
- (void)_cooldownEngineIfPossible;
- (bool)_cooldownUnderlyingPlayerIfPossible;
- (void)_deactivate;
- (void)_deactivateEngineIfPossible;
- (void)_dequeueReusableFeedbackPlayerWithCompletionBlock:(id /* block */)arg1;
- (void)_hostDidEnterBackground:(id)arg1;
- (void)_hostWillEnterForeground:(id)arg1;
- (bool)_isSuspended;
- (id)_outOfChannelsCountStatistics;
- (void)_performAtState:(long long)arg1 block:(id /* block */)arg2;
- (id)_prewarmCountStatistics;
- (id)_prewarmDurationStatistics;
- (void)_prewarmEngine;
- (void)_prewarmUnderlyingPlayerWithCompletion:(id /* block */)arg1;
- (void)_prewarmWithCompletionBlock:(id /* block */)arg1;
- (void)_removeViewControllerWillDisconnect:(id)arg1;
- (void)_serviceBlocksForState:(long long)arg1 withSuccess:(bool)arg2;
- (void)_setBackgroundTaskIdentifier:(unsigned long long)arg1;
- (void)_setEnabled:(bool)arg1;
- (void)_setState:(long long)arg1;
- (void)_setSuspended:(bool)arg1;
- (void)_setupBackgroundTask;
- (void)_startWarmingFeedbacks:(id)arg1;
- (long long)_state;
- (id)_statsSuffix;
- (id)_stats_key;
- (void)_stats_outOfChannels;
- (void)_stats_stateDidChangeFrom:(long long)arg1 to:(long long)arg2;
- (void)_stopWarmingFeedbacks:(id)arg1;
- (void)_suspendEngineNow;
- (long long)_suspensionState;
- (void)_teardownBackgroundTask;
- (bool)_teardownUnderlyingPlayerIfPossible;
- (void)_updateSuspension;
- (void)_willCancelFeedback:(id)arg1;
- (void)_willPlayFeedback:(id)arg1 atTime:(double)arg2;
- (double)currentTime;
- (id)description;
- (id)init;
- (bool)isEnabled;
- (unsigned long long)numberOfClients;
- (long long)prewarmCount;
- (void)runWhenReady:(id /* block */)arg1;
- (void)setPrewarmCount:(long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
