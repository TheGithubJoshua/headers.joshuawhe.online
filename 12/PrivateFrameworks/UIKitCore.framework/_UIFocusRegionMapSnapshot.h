<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIFocusRegionMapSnapshot.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIFocusRegionMapSnapshot.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIFocusRegionMapSnapshot : NSObject <NSCopying> {
    bool  _clipToSnapshotRect;
    bool  _committed;
    NSMutableArray * _detectedFocusContainerGuideMapEntries;
    NSMutableArray * _detectedFocusableGuideMapEntries;
    NSMutableArray * _detectedFocusableViewMapEntries;
    bool  _didSetRegionClipFrame;
    NSArray * _finalFocusableRegionMapEntries;
    unsigned long long  _focusHeading;
    UIView * _focusableRegionAncestorView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _focusedRect;
    bool  _isFocusedRectEmpty;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _mapEntriesFrame;
    bool  _privateSnaphot;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _regionClipFrame;
    _UIFocusRegionMapSnapshotRequest * _request;
    NSMutableArray * _retainedPromiseRegions;
    UIView * _rootView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _snapshottedRect;
    NSArray * _sortedFocusContainerGuideMapEntries;
    UIImage * _visualRepresentation;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _visualRepresentationMinimumArea;
    struct CGPoint { 
        double x; 
        double y; 
    }  _visualRepresentationScreenCenter;
}

@property (nonatomic, readonly, copy) NSArray *allFocusableRegionMapEntries;
@property (nonatomic) bool clipToSnapshotRect;
@property (getter=isCommitted, nonatomic) bool committed;
@property (nonatomic, retain) NSMutableArray *detectedFocusContainerGuideMapEntries;
@property (nonatomic, retain) NSMutableArray *detectedFocusableGuideMapEntries;
@property (nonatomic, retain) NSMutableArray *detectedFocusableViewMapEntries;
@property (nonatomic, copy) NSArray *finalFocusableRegionMapEntries;
@property (nonatomic) unsigned long long focusHeading;
@property (nonatomic) UIView *focusableRegionAncestorView;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } focusedRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } mapEntriesFrame;
@property (getter=isPrivateSnapshot, nonatomic) bool privateSnaphot;
@property (nonatomic, readonly, copy) _UIFocusRegionMapSnapshotRequest *request;
@property (nonatomic, retain) NSMutableArray *retainedPromiseRegions;
@property (nonatomic, readonly) UIView *rootView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } snapshottedRect;
@property (nonatomic, copy) NSArray *sortedFocusContainerGuideMapEntries;
@property (nonatomic, readonly) UIImage *visualRepresentation;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visualRepresentationMinimumArea;
@property (nonatomic) struct CGPoint { double x1; double x2; } visualRepresentationScreenCenter;

+ (id)combinedVisualRepresentationForSnapshots:(id)arg1 scaleFactor:(double)arg2;

- (void).cxx_destruct;
- (void)_addFocusContainerGuide:(id)arg1 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_addFocusableRegion:(id)arg1 isFocusGuide:(bool)arg2 withFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_clippedRegionFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isFocusGuide:(bool)arg2;
- (void)_commit;
- (void)_didChooseFocusCandidateRegion:(id)arg1;
- (id)_finalFocusableRegionMapEntriesFromMapEntries:(id)arg1;
- (id)_finalFocusableRegionMapEntriesFromViewMapEntries:(id)arg1 guideMapEntries:(id)arg2;
- (id)_initWithRequest:(id)arg1;
- (void)_occludeFocusInFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_punchHoleInMap:(id)arg1 atFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)_snapshotByFulfillingPromiseFocusRegionEntry:(id)arg1;
- (id)_sortedEligibleFocusContainerGuidesInArray:(id)arg1;
- (void)_updateFinalFocusableRegionMapEntries;
- (void)_updateSortedFocusContainerGuideMapEntries;
- (id)allFocusableRegionMapEntries;
- (bool)clipToSnapshotRect;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)debugQuickLookObject;
- (id)detectedFocusContainerGuideMapEntries;
- (id)detectedFocusableGuideMapEntries;
- (id)detectedFocusableViewMapEntries;
- (id)finalFocusableRegionMapEntries;
- (unsigned long long)focusHeading;
- (id)focusableRegionAncestorView;
- (id)focusableRegionMapEntriesLimitedByFocusContainerGuide:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })focusedRect;
- (bool)isCommitted;
- (bool)isPrivateSnapshot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })mapEntriesFrame;
- (id)request;
- (id)retainedPromiseRegions;
- (id)rootView;
- (void)setClipToSnapshotRect:(bool)arg1;
- (void)setCommitted:(bool)arg1;
- (void)setDetectedFocusContainerGuideMapEntries:(id)arg1;
- (void)setDetectedFocusableGuideMapEntries:(id)arg1;
- (void)setDetectedFocusableViewMapEntries:(id)arg1;
- (void)setFinalFocusableRegionMapEntries:(id)arg1;
- (void)setFocusHeading:(unsigned long long)arg1;
- (void)setFocusableRegionAncestorView:(id)arg1;
- (void)setFocusedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPrivateSnaphot:(bool)arg1;
- (void)setRetainedPromiseRegions:(id)arg1;
- (void)setSortedFocusContainerGuideMapEntries:(id)arg1;
- (void)setVisualRepresentationMinimumArea:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setVisualRepresentationScreenCenter:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })snapshottedRect;
- (id)sortedFocusContainerGuideMapEntries;
- (id)visualRepresentation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visualRepresentationMinimumArea;
- (struct CGPoint { double x1; double x2; })visualRepresentationScreenCenter;
- (id)visualRepresentationWithMinimumArea:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
