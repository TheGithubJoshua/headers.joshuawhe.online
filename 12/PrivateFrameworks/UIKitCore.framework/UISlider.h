<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UISlider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UISlider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UISlider : UIControl <NSCoding> {
    double  _alpha;
    struct __CFDictionary { } * _contentLookup;
    _UIEdgeFeedbackGenerator * _edgeFeedbackGenerator;
    double  _hitOffset;
    UIImageView * _innerThumbView;
    bool  _maxColorIsValid;
    UIColor * _maxTintColor;
    UIView * _maxTrackClipView;
    UIImageView * _maxTrackView;
    float  _maxValue;
    UIImageView * _maxValueImageView;
    UIColor * _minTintColor;
    UIImageView * _minTrackView;
    float  _minValue;
    UIImageView * _minValueImageView;
    _UIModulationFeedbackGenerator * _modulationFeedbackGenerator;
    struct { 
        unsigned int continuous : 1; 
        unsigned int animating : 1; 
        unsigned int preparingToAnimate : 1; 
        unsigned int showValue : 1; 
        unsigned int trackEnabled : 1; 
        unsigned int creatingSnapshot : 1; 
        unsigned int thumbDisabled : 1; 
        unsigned int minTrackHidden : 1; 
    }  _sliderFlags;
    bool  _thumbIsArtworkBased;
    UIColor * _thumbTintColor;
    UIImageView * _thumbView;
    UIView * _thumbViewNeue;
    NSArray * _trackColors;
    bool  _trackIsArtworkBased;
    bool  _useLookNeue;
    float  _value;
}

@property (nonatomic) double akMaximumValue;
@property (nonatomic) double akMinimumValue;
@property (nonatomic) double akValue;
@property (getter=isContinuous, nonatomic) bool continuous;
@property (nonatomic, readonly) UIImage *currentMaximumTrackImage;
@property (nonatomic, readonly) UIImage *currentMinimumTrackImage;
@property (nonatomic, readonly) UIImage *currentThumbImage;
@property (getter=_edgeFeedbackBehavior, setter=_setEdgeFeedbackBehavior:, nonatomic, retain) _UIEdgeFeedbackGenerator *edgeFeedbackBehavior;
@property (getter=_edgeFeedbackGenerator, setter=_setEdgeFeedbackGenerator:, nonatomic, retain) _UIEdgeFeedbackGenerator *edgeFeedbackGenerator;
@property (nonatomic, retain) UIColor *maximumTrackTintColor;
@property (nonatomic) float maximumValue;
@property (nonatomic, retain) UIImage *maximumValueImage;
@property (nonatomic, retain) UIColor *minimumTrackTintColor;
@property (nonatomic) float minimumValue;
@property (nonatomic, retain) UIImage *minimumValueImage;
@property (getter=_modulationFeedbackGenerator, setter=_setModulationFeedbackGenerator:, nonatomic, retain) _UIModulationFeedbackGenerator *modulationFeedbackGenerator;
@property (nonatomic, retain) UIColor *thumbTintColor;
@property (nonatomic) float value;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (bool)_allowActionsToQueue;

- (void).cxx_destruct;
- (id)__distributionStatisticsForUserInteractionDuration;
- (bool)_alwaysHandleScrollerMouseEvent;
- (void)_buildTrackArtwork;
- (id)_contentForState:(unsigned long long)arg1;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (void)_contentSizeCategoryChanged:(id)arg1;
- (unsigned long long)_controlEventsForActionTriggered;
- (void)_controlTouchBegan:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchEnded:(id)arg1 withEvent:(id)arg2;
- (void)_controlTouchMoved:(id)arg1 withEvent:(id)arg2;
- (double)_cornerRadiusForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_edgeFeedbackBehavior;
- (id)_edgeFeedbackGenerator;
- (void)_initImages;
- (void)_initSubviews;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)_isThumbEnabled;
- (void)_layoutSubviewsForBoundsChange:(bool)arg1;
- (void)_listenForContentSizeCategoryChangesIfNecessary;
- (id)_maxTrackView;
- (id)_maxValueView;
- (id)_maximumTrackImageForState:(unsigned long long)arg1;
- (id)_minTrackView;
- (id)_minValueView;
- (id)_minimumTrackImageForState:(unsigned long long)arg1;
- (id)_modulationFeedbackGenerator;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_rebuildControlThumb:(bool)arg1 track:(bool)arg2;
- (void)_sendDelayedActions;
- (void)_setContent:(id)arg1 forState:(unsigned long long)arg2;
- (void)_setEdgeFeedbackBehavior:(id)arg1;
- (void)_setEdgeFeedbackGenerator:(id)arg1;
- (void)_setMaximumTrackImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setMinimumTrackImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setMinimumTrackVisible:(bool)arg1 withDuration:(double)arg2;
- (void)_setModulationFeedbackGenerator:(id)arg1;
- (void)_setThumbEnabled:(bool)arg1;
- (void)_setThumbImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setThumbTintColor:(id)arg1 forStates:(unsigned long long)arg2;
- (void)_setTrackEnabled:(bool)arg1;
- (void)_setUseLookNeue:(bool)arg1;
- (void)_setValue:(float)arg1 andSendAction:(bool)arg2;
- (void)_setValue:(float)arg1 minValue:(float)arg2 maxValue:(float)arg3 andSendAction:(bool)arg4;
- (void)_setupFeedback;
- (void)_sliderAnimationDidStop:(id)arg1 finished:(id)arg2 context:(id)arg3;
- (void)_sliderAnimationWillStart:(id)arg1 context:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_thumbHitEdgeInsets;
- (id)_thumbImageForState:(unsigned long long)arg1;
- (bool)_trackEnabled;
- (void)_updateAppearanceForEnabled:(bool)arg1;
- (void)_updateMaxTrackColorForInitialization:(bool)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)cancelMouseTracking;
- (bool)cancelTouchTracking;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)createThumbView;
- (id)createThumbViewNeue;
- (id)currentMaximumTrackImage;
- (id)currentMinimumTrackImage;
- (id)currentThumbImage;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAccessibilityElementByDefault;
- (bool)isAnimatingValueChange;
- (bool)isContinuous;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (void)layoutSubviews;
- (id)maximumTrackImageForState:(unsigned long long)arg1;
- (id)maximumTrackTintColor;
- (float)maximumValue;
- (id)maximumValueImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })maximumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)minimumTrackImageForState:(unsigned long long)arg1;
- (id)minimumTrackTintColor;
- (float)minimumValue;
- (id)minimumValueImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })minimumValueImageRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAlpha:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContinuous:(bool)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setMaximumTrackImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setMaximumTrackImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)setMaximumTrackTintColor:(id)arg1;
- (void)setMaximumValue:(float)arg1;
- (void)setMaximumValueImage:(id)arg1;
- (void)setMinimumTrackImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setMinimumTrackImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)setMinimumTrackTintColor:(id)arg1;
- (void)setMinimumValue:(float)arg1;
- (void)setMinimumValueImage:(id)arg1;
- (void)setSelected:(bool)arg1;
- (void)setShowValue:(bool)arg1;
- (void)setThumbImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setThumbImage:(id)arg1 forStates:(unsigned long long)arg2;
- (void)setThumbTintColor:(id)arg1;
- (void)setValue:(float)arg1;
- (void)setValue:(float)arg1 animated:(bool)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)thumbImageForState:(unsigned long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 trackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 value:(float)arg3;
- (id)thumbTintColor;
- (void)tintColorDidChange;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })trackRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (float)value;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })valueTextRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit

- (double)akMaximumValue;
- (double)akMinimumValue;
- (double)akValue;
- (void)setAkMaximumValue:(double)arg1;
- (void)setAkMinimumValue:(double)arg1;
- (void)setAkValue:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
