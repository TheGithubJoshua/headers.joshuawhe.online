<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIInputView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIInputView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIInputView : UIView <UISplittableInputView> {
    bool  _allowsSelfSizing;
    bool  _assertSizingWithPredictionBar;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _backgroundEdgeInsets;
    double  _contentRatio;
    bool  _disableSplitSupport;
    double  _gapWidth;
    bool  _isTransitioning;
    struct CGSize { 
        double width; 
        double height; 
    }  _leftContentSize;
    _UIInputViewContent * _leftContentView;
    double  _leftOffset;
    UIImage * _mergedImage;
    NSMutableDictionary * _mergedSliceMap;
    UIKBRenderConfig * _renderConfig;
    struct CGSize { 
        double width; 
        double height; 
    }  _rightContentSize;
    _UIInputViewContent * _rightContentView;
    UIImage * _splitImage;
    NSMutableDictionary * _splitSliceMap;
    long long  _style;
    bool  _suppressBackgroundStyling;
    double  _transitionGap;
    CALayer * _transitionLayer;
    double  _transitionLeftOffset;
    double  _transitionRatio;
    NSArray * _visibleLayers;
}

@property (nonatomic, retain) UIImage *_mergedImage;
@property (nonatomic, retain) NSMutableDictionary *_mergedSliceMap;
@property (nonatomic, retain) UIImage *_splitImage;
@property (nonatomic, retain) NSMutableDictionary *_splitSliceMap;
@property (nonatomic) bool allowsSelfSizing;
@property (nonatomic) bool assertSizingWithPredictionBar;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } backgroundEdgeInsets;
@property (nonatomic) double contentRatio;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long inputViewStyle;
@property (nonatomic, readonly) UIView *leftContentView;
@property (nonatomic) struct CGSize { double x1; double x2; } leftContentViewSize;
@property (nonatomic, readonly) UIView *rightContentView;
@property (nonatomic) struct CGSize { double x1; double x2; } rightContentViewSize;
@property (readonly) Class superclass;

+ (void)_setupAppearanceIfNecessary;

- (double)_additionalClipHeight;
- (void)_beginSplitTransitionIfNeeded:(double)arg1 gapWidth:(double)arg2;
- (int)_clipCornersOfView:(id)arg1;
- (struct CGSize { double x1; double x2; })_defaultSize;
- (bool)_disableSplitSupport;
- (void)_endSplitTransitionIfNeeded:(bool)arg1;
- (bool)_isSplit;
- (bool)_isToolbars;
- (bool)_isTransitioning;
- (id)_mergedImage;
- (id)_mergedSliceMap;
- (void)_setDisableSplitSupport:(bool)arg1;
- (void)_setLeftOffset:(double)arg1 gapWidth:(double)arg2;
- (void)_setNeedsContentSizeUpdate;
- (void)_setProgress:(double)arg1 boundedBy:(double)arg2;
- (void)_setRenderConfig:(id)arg1;
- (void)_setSuppressBackgroundStyling:(bool)arg1;
- (id)_splitBorderedBackgroundWithCorners:(unsigned long long)arg1;
- (id)_splitImage;
- (id)_splitSliceMap;
- (bool)_supportsSplit;
- (bool)_suppressBackgroundStyling;
- (id)_toolbarBorderedBackground;
- (void)_updateClipCorners;
- (void)_updateWithSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)allowsSelfSizing;
- (bool)assertSizingWithPredictionBar;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })backgroundEdgeInsets;
- (double)contentRatio;
- (void)dealloc;
- (void)didEndSplitTransition;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 inputViewStyle:(long long)arg2;
- (long long)inputViewStyle;
- (void)layoutMergedSubviews;
- (void)layoutSplitSubviewsWithLeftContentSize:(struct CGSize { double x1; double x2; })arg1 rightContentSize:(struct CGSize { double x1; double x2; })arg2;
- (id)leftContentView;
- (struct CGSize { double x1; double x2; })leftContentViewSize;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)rightContentView;
- (struct CGSize { double x1; double x2; })rightContentViewSize;
- (void)setAllowsSelfSizing:(bool)arg1;
- (void)setAssertSizingWithPredictionBar:(bool)arg1;
- (void)setBackgroundEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setContentRatio:(double)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setInputViewStyle:(long long)arg1;
- (void)setLeftContentViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setRightContentViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)set_mergedImage:(id)arg1;
- (void)set_mergedSliceMap:(id)arg1;
- (void)set_splitImage:(id)arg1;
- (void)set_splitSliceMap:(id)arg1;
- (id)tintColor;
- (void)updateMergedSubviewConstraints;
- (void)updateSplitSubviewContraintsWithLeftContentSize:(struct CGSize { double x1; double x2; })arg1 rightContentSize:(struct CGSize { double x1; double x2; })arg2;
- (void)willBeginSplitTransition;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
