<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIKeyboardPredictionCell.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIKeyboardPredictionCell.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIKeyboardPredictionCell : UIView {
    bool  _active;
    long long  _candidateType;
    bool  _isAutocorrection;
    bool  _isEmoji;
    bool  _isLongCandidate;
    bool  _isTypedString;
    UIView * _leftSeperatorView;
    TIKeyboardCandidate * _prediction;
    UIView * _rightSeperatorView;
    unsigned int  _slotID;
    long long  _state;
    UIView * m_activeView;
    UIMorphingLabel * m_label;
    bool  m_lightKeyboard;
    UIView * m_maskView;
    double  m_maskViewMargin;
    UILabel * m_suggestionLabel;
}

@property (nonatomic) bool active;
@property (nonatomic) long long candidateType;
@property (nonatomic) bool isAutocorrection;
@property (nonatomic) bool isEmoji;
@property (nonatomic) bool isLongCandidate;
@property (nonatomic) bool isTypedString;
@property (nonatomic, retain) UIView *leftSeperatorView;
@property (nonatomic, readonly, retain) TIKeyboardCandidate *prediction;
@property (nonatomic, retain) UIView *rightSeperatorView;
@property (nonatomic) unsigned int slotID;
@property (nonatomic) long long state;

+ (double)fontSizeForSingleLineLayout;
+ (double)predictionCellTopPadding;

- (bool)active;
- (long long)candidateType;
- (void)dealloc;
- (void)dimKeys:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAutocorrection;
- (bool)isEmoji;
- (bool)isLongCandidate;
- (bool)isTypedString;
- (id)label;
- (id)leftSeperatorView;
- (bool)needsUpdateForRenderConfig:(id)arg1;
- (id)prediction;
- (id)rightSeperatorView;
- (void)scrollLabelWithText:(id)arg1 force:(bool)arg2;
- (void)setActive:(bool)arg1;
- (void)setActive:(bool)arg1 withAttrText:(id)arg2;
- (void)setActive:(bool)arg1 withText:(id)arg2;
- (void)setCandidateType:(long long)arg1;
- (void)setCellAttributes;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIsAutocorrection:(bool)arg1;
- (void)setIsEmoji:(bool)arg1;
- (void)setIsLongCandidate:(bool)arg1;
- (void)setIsTypedString:(bool)arg1;
- (void)setLeftSeperatorView:(id)arg1;
- (void)setRightSeperatorView:(id)arg1;
- (void)setSlotID:(unsigned int)arg1;
- (void)setState:(long long)arg1;
- (void)setText:(id)arg1 prediction:(id)arg2 active:(bool)arg3 isEmoji:(bool)arg4;
- (void)setVisibleRect;
- (bool)shouldDisplayAsSuggestion:(id)arg1;
- (bool)shouldDisplayHeaderForPrediction:(id)arg1;
- (unsigned int)slotID;
- (long long)state;
- (id)textColor;
- (void)touchMoved:(double)arg1;
- (void)updateBackgroundWithRenderConfig:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
