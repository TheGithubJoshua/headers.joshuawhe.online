<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UITextInteractionAssistant.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UITextInteractionAssistant.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UITextInteractionAssistant : NSObject <UIResponderStandardEditActions, UITextInteraction_AssistantDelegate> {
    struct CGPoint { 
        double x; 
        double y; 
    }  _autoscrollBasePoint;
    double  _autoscrollFactor;
    int  _autoscrollRamp;
    struct CGPoint { 
        double x; 
        double y; 
    }  _autoscrollUntransformedExtentPoint;
    bool  _autoscrolled;
    bool  _didUseStashedRange;
    UITextInteraction * _externalInteractions;
    bool  _externalTextInput;
    bool  _inGesture;
    UITextInteraction * _interactions;
    struct CGPoint { 
        double x; 
        double y; 
    }  _loupeGestureEndPoint;
    bool  _needsGestureUpdate;
    long long  _previousRepeatedGranularity;
    UITextSelectionView * _selectionView;
    UITextRange * _stashedTextRange;
    bool  _suppressSystemUI;
    UITextChecker * _textChecker;
    long long  _textInteractionSet;
    UIResponder<UITextInput> * _view;
    bool  _willHandoffLoupeMagnifier;
}

@property (nonatomic) struct CGPoint { double x1; double x2; } autoscrollUntransformedExtentPoint;
@property (nonatomic) bool autoscrolled;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, retain) UIGestureRecognizer *doubleTapGesture;
@property (nonatomic, retain) UITextInteraction *externalInteractions;
@property (nonatomic, readonly) bool externalTextInput;
@property (nonatomic, readonly) UIFieldEditor *fieldEditor;
@property (nonatomic, readonly, retain) UIGestureRecognizer *forcePressGesture;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool inGesture;
@property (nonatomic, readonly, retain) UITextInteraction *interactions;
@property (nonatomic, readonly, retain) UILongPressGestureRecognizer *loupeGesture;
@property (nonatomic) struct CGPoint { double x1; double x2; } loupeGestureEndPoint;
@property (nonatomic) bool needsGestureUpdate;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, readonly) UITextSelectionView *selectionView;
@property (nonatomic, readonly, retain) UITapGestureRecognizer *singleTapGesture;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIResponder<UITextInput> *textDocument;
@property (nonatomic, readonly) UIResponder<UITextInput> *view;
@property (nonatomic, readonly) bool willHandoffLoupeMagnifier;

+ (long long)_nextGranularityInCycle:(long long)arg1;

- (void).cxx_destruct;
- (id)_asText;
- (id)_scrollable;
- (id)_selectionView;
- (void)activate;
- (void)activateSelection;
- (void)addGestureRecognizersToView:(id)arg1;
- (void)attach;
- (struct CGPoint { double x1; double x2; })autoscrollUntransformedExtentPoint;
- (void)autoscrollWillNotStart;
- (bool)autoscrolled;
- (void)beginFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)canBeginDragCursor:(id)arg1;
- (void)cancelAutoscroll;
- (void)checkEditabilityAndSetFirstResponderIfNecessary;
- (void)clearGestureRecognizers;
- (void)clearGestureRecognizers:(bool)arg1;
- (void)clearSelection;
- (void)clearStashedSelection;
- (struct CGPoint { double x1; double x2; })constrainedPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)containerAllowsSelection;
- (bool)containerAllowsSelectionTintOnly;
- (bool)containerIsAtom;
- (bool)containerIsBrowserView;
- (bool)containerIsPlainStyleAtom;
- (bool)containerIsTextField;
- (void)deactivateSelection;
- (void)dealloc;
- (void)detach;
- (void)detach:(bool)arg1;
- (void)didEndScrollingOverflow;
- (void)didEndSelectionInteraction;
- (bool)didUseStashedSelection;
- (id)doubleTapGesture;
- (void)endFloatingCursor;
- (void)extendSelectionToLoupeOrSetToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)extendSelectionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)externalInteractions;
- (bool)externalTextInput;
- (id)fieldEditor;
- (id)forcePressGesture;
- (id)generatorForRange:(id)arg1 withOptions:(unsigned long long)arg2;
- (bool)hasReplacements;
- (bool)inGesture;
- (id)initWithResponder:(id)arg1;
- (id)initWithView:(id)arg1;
- (id)initWithView:(id)arg1 textInteractionSet:(long long)arg2;
- (id)interactions;
- (void)invalidate;
- (bool)isValid;
- (void)layoutChangedByScrolling:(bool)arg1;
- (id)linkInteractionView;
- (id)loupeGesture;
- (struct CGPoint { double x1; double x2; })loupeGestureEndPoint;
- (void)loupeGestureWithState:(long long)arg1 atGesturePoint:(id /* block */)arg2 shouldCancel:(bool*)arg3;
- (Class)loupeInteractionClass;
- (void)loupeMagnifierWithState:(long long)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)needsGestureUpdate;
- (void)notifyKeyboardSelectionChanged;
- (id)rangeForTextReplacement:(id)arg1;
- (void)rangeSelectionCanceled;
- (void)rangeSelectionEnded:(struct CGPoint { double x1; double x2; })arg1;
- (void)rangeSelectionMoved:(struct CGPoint { double x1; double x2; })arg1 withTouchPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)rangeSelectionStarted:(struct CGPoint { double x1; double x2; })arg1;
- (void)rangedMagnifierWithState:(long long)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)requiresImmediateUpdate;
- (void)resetGestureRecognizersForLinkInteraction;
- (void)resetWillHandoffLoupeMagnifier;
- (void)resignedFirstResponder;
- (void)scheduleChineseTransliteration;
- (void)scheduleDictationReplacementsForAlternatives:(id)arg1 range:(id)arg2;
- (void)scheduleReplacements;
- (void)scheduleReplacementsForRange:(id)arg1 withOptions:(unsigned long long)arg2;
- (void)scheduleReplacementsWithOptions:(unsigned long long)arg1;
- (void)scrollSelectionToVisible;
- (void)scrollSelectionToVisible:(bool)arg1;
- (id)scrollView;
- (void)selectAll:(id)arg1;
- (void)selectWord;
- (void)selectWordWithoutShowingCommands;
- (void)selectionAnimationDidStop:(id)arg1 finished:(id)arg2;
- (void)selectionChanged;
- (Class)selectionInteractionClass;
- (id)selectionView;
- (void)setAutoscrollUntransformedExtentPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAutoscrolled:(bool)arg1;
- (void)setExternalInteractions:(id)arg1;
- (void)setFirstResponderIfNecessary;
- (void)setGestureRecognizers;
- (void)setInGesture:(bool)arg1;
- (void)setLoupeGestureEndPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setNeedsGestureUpdate:(bool)arg1;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setSuppressSystemUI:(bool)arg1;
- (void)setWillHandoffLoupeMagnifier;
- (bool)shouldEnqueueObserverUpdates;
- (bool)shouldSuppressSelectionCommands;
- (id)singleTapGesture;
- (void)startAutoscroll:(struct CGPoint { double x1; double x2; })arg1;
- (void)stashCurrentSelection;
- (bool)swallowsDoubleTapWithScale:(double)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (id)textDocument;
- (id)textSelectionView;
- (void)updateAutoscroll:(id)arg1;
- (void)updateFloatingCursorAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)updateWithMagnifierTerminalPoint:(bool)arg1;
- (bool)useGesturesForEditableContent;
- (id)view;
- (bool)viewCouldBecomeEditable:(id)arg1;
- (void)willBeginSelectionInteraction;
- (bool)willHandoffLoupeMagnifier;
- (void)willStartScrollingOverflow;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
