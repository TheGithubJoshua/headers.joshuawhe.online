<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIPanOrFlickGestureRecognizer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIPanOrFlickGestureRecognizer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIPanOrFlickGestureRecognizer : UIPanGestureRecognizer {
    double  _allowableMovement;
    unsigned long long  _allowedFlickDirections;
    bool  _didLongPress;
    UIDelayedAction * _elapsedAction;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialCentroidLocation;
    bool  _longPressOnly;
    double  _maximumFlickDuration;
    double  _minimumFlickDistance;
    double  _minimumPressDuration;
    UIDelayedAction * _responsivenessAction;
    double  _responsivenessDelay;
    double  _timestampBeforeGestureBegan;
    double  _timestampOfLastEvent;
    unsigned long long  _touchCount;
}

@property (nonatomic) double allowableMovement;
@property (nonatomic) unsigned long long allowedFlickDirections;
@property (nonatomic, readonly) bool didLongPress;
@property (nonatomic, retain) UIDelayedAction *elapsedAction;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialCentroidLocation;
@property (nonatomic) bool longPressOnly;
@property (nonatomic) double maximumFlickDuration;
@property (nonatomic) double minimumFlickDistance;
@property (nonatomic) double minimumPressDuration;
@property (nonatomic, readonly) <_UIPanOrFlickGestureRecognizerDelegate> *panOrFlickDelegate;
@property (nonatomic, readonly) unsigned long long recognizedFlickDirection;
@property (nonatomic, retain) UIDelayedAction *responsivenessAction;
@property (nonatomic) double responsivenessDelay;
@property (nonatomic) double timestampBeforeGestureBegan;
@property (nonatomic) double timestampOfLastEvent;

- (void).cxx_destruct;
- (bool)_shouldTryToBeginWithEvent:(id)arg1;
- (double)allowableMovement;
- (unsigned long long)allowedFlickDirections;
- (void)clearTimer;
- (void)dealloc;
- (bool)didLongPress;
- (id)elapsedAction;
- (void)enoughTimeElapsed:(id)arg1;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;
- (struct CGPoint { double x1; double x2; })initialCentroidLocation;
- (bool)isValidLongPress;
- (bool)longPressOnly;
- (double)maximumFlickDuration;
- (double)minimumFlickDistance;
- (double)minimumPressDuration;
- (id)panOrFlickDelegate;
- (unsigned long long)recognizedFlickDirection;
- (void)reset;
- (id)responsivenessAction;
- (double)responsivenessDelay;
- (void)responsivenessTimeElapsed:(id)arg1;
- (void)setAllowableMovement:(double)arg1;
- (void)setAllowedFlickDirections:(unsigned long long)arg1;
- (void)setElapsedAction:(id)arg1;
- (void)setInitialCentroidLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLongPressOnly:(bool)arg1;
- (void)setMaximumFlickDuration:(double)arg1;
- (void)setMinimumFlickDistance:(double)arg1;
- (void)setMinimumPressDuration:(double)arg1;
- (void)setResponsivenessAction:(id)arg1;
- (void)setResponsivenessDelay:(double)arg1;
- (void)setTimestampBeforeGestureBegan:(double)arg1;
- (void)setTimestampOfLastEvent:(double)arg1;
- (void)startTimer;
- (double)timestampBeforeGestureBegan;
- (double)timestampOfLastEvent;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
