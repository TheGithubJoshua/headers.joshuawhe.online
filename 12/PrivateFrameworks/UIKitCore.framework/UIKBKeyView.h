<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIKBKeyView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIKBKeyView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIKBKeyView : UIView <UIKBCacheableView> {
    struct CGColor { } * _activeBackgroundColor;
    id  _activeCompositingFilter;
    int  _cachedAnchorCorner;
    bool  _cachedControlKeyRenderingPreference;
    double  _cachedOpacity;
    long long  _cachedSelector;
    unsigned long long  _cachedShiftState;
    NSString * _cachedTraitsHashString;
    double  _endingTransitionDuration;
    NSMutableDictionary * _keyLayers;
    UIKeyboardMenuView * _popupMenu;
    bool  _renderAsMask;
    int  _renderedKeyState;
    bool  _singleRerender;
    struct __CFBoolean { } * m_allowsCaching;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  m_drawFrame;
    UIKBRenderFactory * m_factory;
    UIKBTree * m_key;
    UIKBTree * m_keyplane;
    UIKBRenderConfig * m_renderConfig;
}

@property (nonatomic, readonly) long long cacheDeferPriority;
@property (nonatomic, readonly) bool cacheDeferable;
@property (nonatomic, readonly) NSString *cacheKey;
@property (nonatomic) int cachedAnchorCorner;
@property (nonatomic) bool cachedControlKeyRenderingPreference;
@property (readonly) long long cachedRenderFlags;
@property (nonatomic) long long cachedSelector;
@property (nonatomic) unsigned long long cachedShiftState;
@property (nonatomic, retain) NSString *cachedTraitsHashString;
@property (nonatomic, readonly) double cachedWidth;
@property (nonatomic, readonly) UIKBKeyView *contentsKeyView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } displayInsets;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } drawFrame;
@property (nonatomic) double endingTransitionDuration;
@property (nonatomic, retain) UIKBRenderFactory *factory;
@property (nonatomic, readonly) bool hasRendered;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool keepNonPersistent;
@property (nonatomic, readonly) UIKBTree *key;
@property (nonatomic, readonly) UIKBTree *keyplane;
@property (nonatomic) UIKeyboardMenuView *popupMenu;
@property (nonatomic) bool renderAsMask;
@property (nonatomic, retain) UIKBRenderConfig *renderConfig;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } variantFrame;

- (void)_applyAppearanceInvocations;
- (bool)_canDrawContent;
- (id)_generateBackdropMaskImage;
- (void)_populateLayer:(id)arg1 withContents:(id)arg2;
- (bool)_shouldUpdateLayers;
- (bool)_viewShouldBeOpaque;
- (bool)allowBackgroundCachingForRenderFlags:(long long)arg1;
- (bool)cacheDeferable;
- (id)cacheKey;
- (id)cacheKeysForRenderFlags:(id)arg1;
- (int)cachedAnchorCorner;
- (bool)cachedControlKeyRenderingPreference;
- (long long)cachedRenderFlags;
- (long long)cachedSelector;
- (unsigned long long)cachedShiftState;
- (id)cachedTraitsHashString;
- (double)cachedWidth;
- (void)changeBackgroundToActiveIfNecessary;
- (void)changeBackgroundToEnabled;
- (id)contentsKeyView;
- (void)dealloc;
- (long long)didInputSubTree:(id)arg1;
- (void)dimKeys:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })displayInsets;
- (void)displayLayer:(id)arg1;
- (void)drawContentsOfRenderers:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })drawFrame;
- (double)endingTransitionDuration;
- (id)factory;
- (unsigned long long)focusableVariantCount;
- (bool)hasRendered;
- (long long)imageOrientationForLayer:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 keyplane:(id)arg2 key:(id)arg3;
- (bool)keepNonPersistent;
- (id)key;
- (id)keyplane;
- (id)layerForRenderFlags:(long long)arg1;
- (id)popupMenu;
- (void)prepareForDisplay;
- (void)removeFromSuperview;
- (bool)renderAsMask;
- (id)renderConfig;
- (id)renderFlagsForTraits:(id)arg1;
- (bool)requiresSublayers;
- (void)setCachedAnchorCorner:(int)arg1;
- (void)setCachedControlKeyRenderingPreference:(bool)arg1;
- (void)setCachedSelector:(long long)arg1;
- (void)setCachedShiftState:(unsigned long long)arg1;
- (void)setCachedTraitsHashString:(id)arg1;
- (void)setDrawFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEndingTransitionDuration:(double)arg1;
- (void)setFactory:(id)arg1;
- (void)setPopupMenu:(id)arg1;
- (void)setRenderAsMask:(bool)arg1;
- (void)setRenderConfig:(id)arg1;
- (id)subTreeHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (int)textEffectsVisibilityLevel;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)updateForKeyplane:(id)arg1 key:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })variantFrame;
- (void)willDisplayModalActionView:(id)arg1 withSubTreeKeyView:(id)arg2 completion:(id /* block */)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
