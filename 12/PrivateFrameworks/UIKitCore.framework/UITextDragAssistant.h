<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UITextDragAssistant.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UITextDragAssistant.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UITextDragAssistant : NSObject <UIDragInteractionDelegate_Private, UIDropInteractionDelegate_Private, UITextDragDropSupport, UITextPasteSessionDelegate, _UITextPasteProgressSupport> {
    UIDragInteraction * _currentDragInteraction;
    <UIDragSession> * _currentDragSession;
    UITextPosition * _currentDropPosition;
    UITextDropProposal * _currentDropProposal;
    <UIDropSession> * _currentDropSession;
    UIDragInteraction * _dragInteraction;
    NSArray * _draggedTextRanges;
    _UITextDragCaretView * _dropCaret;
    UIDropInteraction * _dropInteraction;
    UITextPasteController * _dropPasteController;
    <UITextPasteSession> * _dropPasteSession;
    struct { 
        unsigned int viewSupportsGhostedRanges : 1; 
        unsigned int geometrySupportsSameViewOperations : 1; 
        unsigned int shouldRestoreFirstResponder : 1; 
        unsigned int draggingOngoing : 1; 
        unsigned int handledCancelAnimation : 1; 
        unsigned int restoreNonEditableAfterDrop : 1; 
        unsigned int restoreSelectableAfterDrop : 1; 
        unsigned int wasSelectableBeforeDrop : 1; 
        unsigned int forceEditable : 1; 
        unsigned int delegateSupportsProposalForDrop : 1; 
        unsigned int delegateSupportsSessionDidUpdate : 1; 
        unsigned int viewSupportsTextStorage : 1; 
        unsigned int textStorageDidChange : 1; 
        unsigned int dropPerformed : 1; 
        unsigned int defaultDropHandling : 1; 
    }  _flags;
    <UITextDraggableGeometry> * _geometry;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialDragLocation;
    UITextRange * _initialDragSelectedRange;
    NSArray * _movedItemsInView;
    NSTextStorage * _observingStorage;
    UITextRange * _preDropSelectionRange;
    NSMapTable * _previewProviders;
    <UITextDraggableGeometrySameViewDropOperation> * _sameViewDropOperation;
    UITextDraggableGeometrySameViewDropOperationResult * _sameViewDropOperationResult;
    NSMapTable * _targetedPreviewProviders;
    UIDragItem * _topmostDropItem;
    UITargetedDragPreview * _topmostDropPreview;
    UIView<UITextDragSupporting><UITextDropSupporting> * _view;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDragActive, nonatomic, readonly) bool dragActive;
@property (nonatomic, readonly) UIDragInteraction *dragInteraction;
@property (getter=isDropActive, nonatomic, readonly) bool dropActive;
@property (nonatomic, readonly) UIDropInteraction *dropInteraction;
@property (nonatomic, readonly) <UITextDraggableGeometry> *geometry;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIView<UITextDragSupporting><UITextDropSupporting> *view;

- (void).cxx_destruct;
- (id)_accessibilityDraggableRanges;
- (void)_addDraggedTextRangeForItems:(id)arg1 defaultRange:(id)arg2;
- (void)_applyOptionsToGeometry;
- (void)_cleanupDrop;
- (void)_clearDraggedTextRanges;
- (id)_closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)_containerViewForDropPreviews;
- (id)_containerViewForLiftPreviews;
- (long long)_dataOwnerForSession:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)_dragInteraction:(id)arg1 competingGestureRecognizerShouldDelayLift:(id)arg2;
- (long long)_dragInteraction:(id)arg1 dataOwnerForAddingToSession:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (long long)_dragInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (bool)_dragInteractionShouldBecomeDraggingSourceDelegate:(id)arg1;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (id)_dropRangeForPosition:(id)arg1;
- (id)_dropRequestWithPosition:(id)arg1 inSession:(id)arg2;
- (void)_forDraggedTextRangesDo:(id /* block */)arg1;
- (void)_ghostDraggedTextRanges:(bool)arg1;
- (bool)_hasDraggedTextRange:(id)arg1;
- (void)_initializeDragSession:(id)arg1 withInteraction:(id)arg2;
- (id)_itemsForDraggedRange:(id)arg1;
- (void)_liftOrDrag:(long long)arg1 didEndWithOperation:(unsigned long long)arg2;
- (void)_performDropToPosition:(id)arg1 inSession:(id)arg2;
- (void)_performSameViewOperation:(id)arg1;
- (void)_prepareSameViewOperation:(unsigned long long)arg1 forItems:(id)arg2 fromRanges:(id)arg3 toRange:(id)arg4;
- (id)_previewForIrrelevantItemFromPreview:(id)arg1;
- (id)_previewForTopmostItem:(id)arg1 withDefault:(id)arg2;
- (void)_restoreResponderIfNeededForOperation:(unsigned long long)arg1;
- (id)_shrinkingPreview:(id)arg1 toPosition:(id)arg2;
- (void)_stopObservingTextStorage;
- (id)_suggestedProposalForPosition:(id)arg1 inSession:(id)arg2 allowCancel:(bool)arg3;
- (double)_textPasteBlockingTimeout;
- (long long)_textPasteRangeBehavior;
- (id)_textPasteSelectableRangeForResult:(id)arg1 fromRange:(id)arg2;
- (bool)_textPasteShouldBlockPasting;
- (id)_textRangeForDraggingFromPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_textStorageDidProcessEditing;
- (void)_updateDropCaretToPosition:(id)arg1;
- (void)_updateDropProposalForPosition:(id)arg1 inSession:(id)arg2 allowCancel:(bool)arg3;
- (bool)_viewHasOtherDragInteraction;
- (bool)accessibilityCanDrag;
- (id)dragInteraction;
- (void)dragInteraction:(id)arg1 item:(id)arg2 willAnimateCancelWithAnimator:(id)arg3;
- (id)dragInteraction:(id)arg1 itemsForAddingToSession:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (id)dragInteraction:(id)arg1 itemsForBeginningSession:(id)arg2;
- (bool)dragInteraction:(id)arg1 prefersFullSizePreviewsForSession:(id)arg2;
- (id)dragInteraction:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;
- (id)dragInteraction:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 didEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 session:(id)arg2 willEndWithOperation:(unsigned long long)arg3;
- (void)dragInteraction:(id)arg1 sessionDidMove:(id)arg2;
- (id)dragInteraction:(id)arg1 sessionForAddingItems:(id)arg2 withTouchAtPoint:(struct CGPoint { double x1; double x2; })arg3;
- (void)dragInteraction:(id)arg1 sessionWillBegin:(id)arg2;
- (void)dragInteraction:(id)arg1 willAnimateLiftWithAnimator:(id)arg2 session:(id)arg3;
- (id)dropInteraction;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 concludeDrop:(id)arg2;
- (void)dropInteraction:(id)arg1 item:(id)arg2 willAnimateDropWithAnimator:(id)arg3;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;
- (void)dropInteraction:(id)arg1 sessionDidEnd:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (id)geometry;
- (id)initWithDraggableOnlyView:(id)arg1;
- (id)initWithView:(id)arg1;
- (id)initWithView:(id)arg1 geometry:(id)arg2;
- (void)installDragInteractionIfNeeded;
- (void)installDropInteractionIfNeeded;
- (bool)isDragActive;
- (bool)isDropActive;
- (void)notifyTextInteraction;
- (void)textPasteSessionDidEndPasting:(id)arg1;
- (void)textPasteSessionWillBeginPasting:(id)arg1;
- (id)view;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
