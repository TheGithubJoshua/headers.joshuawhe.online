<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIAlertView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIAlertView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIAlertView : UIView {
    bool  __currentlyRunningModal;
    NSMutableArray * _actions;
    UIAlertController * _alertController;
    bool  _alertControllerShouldDismiss;
    long long  _alertViewStyle;
    long long  _cancelIndex;
    id  _context;
    long long  _defaultButtonIndex;
    id  _delegate;
    bool  _dismissingAlertController;
    long long  _firstOtherButtonIndex;
    bool  _handlingAlertActionShouldDismiss;
    bool  _hasPreparedAlertActions;
    bool  _isPresented;
    NSString * _message;
    _UIAlertControllerShimPresenter * _presenter;
    UIAlertView * _retainedSelf;
    bool  _runsModal;
    NSString * _subtitle;
}

@property (setter=_setCurrentlyRunningModal:, nonatomic) bool _currentlyRunningModal;
@property (nonatomic) long long alertViewStyle;
@property (nonatomic) long long cancelButtonIndex;
@property (nonatomic) id delegate;
@property (nonatomic, readonly) long long firstOtherButtonIndex;
@property (nonatomic, copy) NSString *message;
@property (nonatomic, readonly) long long numberOfButtons;
@property (nonatomic, copy) NSString *title;
@property (getter=isVisible, nonatomic, readonly) bool visible;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (id)_alertViewForSessionWithRemoteViewController:(id)arg1;
+ (id)_alertViewForWindow:(id)arg1;
+ (bool)_isAlertControllerShimClass;
+ (id)_remoteAlertViewWithBlock:(id /* block */)arg1;
+ (void)_setSpringBoardAlertDisplayingOverApplicationAlert:(bool)arg1;
+ (bool)_springBoardAlertDisplayingOverApplicationAlert;
+ (void)applyTransformToAllAlerts:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
+ (struct CGSize { double x1; double x2; })minimumSize;

- (void).cxx_destruct;
- (id)_addButtonWithTitle:(id)arg1;
- (id)_addButtonWithTitleText:(id)arg1;
- (id)_addTextFieldWithValue:(id)arg1 label:(id)arg2;
- (id)_alertController;
- (void)_beginRunningModallyIfNecessary;
- (id)_buttonAtIndex:(long long)arg1;
- (double)_buttonHeight;
- (bool)_canShowAlerts;
- (void)_changeButtonTitleAtIndex:(long long)arg1 toTitle:(id)arg2;
- (long long)_currentOrientation;
- (bool)_currentlyRunningModal;
- (id)_defaultButton;
- (id)_destructiveButton;
- (id)_dimView;
- (void)_dismissForTappedIndex:(long long)arg1;
- (void)_endRunningModallyIfNecessary;
- (bool)_isAnimating;
- (double)_maxHeight;
- (long long)_maximumNumberOfTextFieldsForCurrentStyle;
- (void)_performPopup:(bool)arg1;
- (void)_performPresentationDismissalWithClickedButtonIndex:(long long)arg1 animated:(bool)arg2;
- (void)_prepareAlertActions;
- (void)_prepareForDisplay;
- (void)_prepareToBeReplaced;
- (bool)_prepareToDismissForTappedIndex:(long long)arg1;
- (id)_preparedAlertActionAtIndex:(unsigned long long)arg1;
- (void)_presentSheetFromView:(id)arg1 above:(bool)arg2;
- (void)_setAccessoryView:(id)arg1;
- (void)_setAccessoryViewController:(id)arg1;
- (void)_setCurrentlyRunningModal:(bool)arg1;
- (void)_setDefaultButton:(id)arg1;
- (void)_setDestructiveButton:(id)arg1;
- (void)_setFirstOtherButtonIndex:(long long)arg1;
- (void)_setIsPresented:(bool)arg1;
- (void)_setTextFieldsHidden:(bool)arg1;
- (bool)_shouldUseUndoStyle;
- (void)_showAnimated:(bool)arg1;
- (void)_showByReplacingAlert:(id)arg1 animated:(bool)arg2;
- (void)_showByReplacingPreviousAlertAnimated:(bool)arg1;
- (void)_textDidChangeInTextField:(id)arg1;
- (id)_titleLabel;
- (void)_updateButtonTitles;
- (void)_updateFirstOtherButtonEnabledState;
- (void)_updateFrameForDisplay;
- (void)_updateMessageAndSubtitle;
- (void)_useLegacyUI:(bool)arg1;
- (void)_useUndoStyle:(bool)arg1;
- (long long)addButtonWithTitle:(id)arg1;
- (id)addButtonWithTitle:(id)arg1 buttonClass:(Class)arg2;
- (id)addButtonWithTitle:(id)arg1 label:(id)arg2;
- (id)addTextFieldWithValue:(id)arg1 label:(id)arg2;
- (long long)alertViewStyle;
- (struct CGSize { double x1; double x2; })backgroundSize;
- (int)bodyMaxLineCount;
- (id)bodyText;
- (id)bodyTextLabel;
- (id)buttonAtIndex:(long long)arg1;
- (int)buttonCount;
- (id)buttonTitleAtIndex:(long long)arg1;
- (long long)cancelButtonIndex;
- (id)context;
- (void)dealloc;
- (id)defaultButton;
- (long long)defaultButtonIndex;
- (id)delegate;
- (bool)dimsBackground;
- (void)dismiss;
- (void)dismissAnimated:(bool)arg1;
- (void)dismissWithClickedButtonIndex:(long long)arg1 animated:(bool)arg2;
- (long long)firstOtherButtonIndex;
- (bool)forceHorizontalButtonsLayout;
- (bool)groupsTextFields;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithTitle:(id)arg1 buttons:(id)arg2 defaultButtonIndex:(int)arg3 delegate:(id)arg4 context:(id)arg5;
- (id)initWithTitle:(id)arg1 message:(id)arg2 delegate:(id)arg3 cancelButtonTitle:(id)arg4 otherButtonTitles:(id)arg5;
- (id)initWithTitle:(id)arg1 message:(id)arg2 delegate:(id)arg3 defaultButton:(id)arg4 cancelButton:(id)arg5 otherButtons:(id)arg6;
- (bool)isBodyTextTruncated;
- (bool)isVisible;
- (id)keyboard;
- (void)layout;
- (void)layoutAnimated:(bool)arg1;
- (id)message;
- (long long)numberOfButtons;
- (int)numberOfLinesInTitle;
- (long long)numberOfRows;
- (void)popupAlertAnimated:(bool)arg1;
- (void)popupAlertAnimated:(bool)arg1 atOffset:(double)arg2;
- (void)presentSheetFromAboveView:(id)arg1;
- (void)presentSheetFromBehindView:(id)arg1;
- (void)presentSheetFromButtonBar:(id)arg1;
- (void)presentSheetInView:(id)arg1;
- (void)presentSheetToAboveView:(id)arg1;
- (void)replaceAlert:(id)arg1;
- (bool)requiresPortraitOrientation;
- (bool)runsModal;
- (void)setAlertViewStyle:(long long)arg1;
- (void)setBodyText:(id)arg1;
- (void)setBodyTextMaxLineCount:(int)arg1;
- (void)setCancelButtonIndex:(long long)arg1;
- (void)setContext:(id)arg1;
- (void)setDefaultButton:(id)arg1;
- (void)setDefaultButtonIndex:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDimView:(id)arg1;
- (void)setDimsBackground:(bool)arg1;
- (void)setForceHorizontalButtonsLayout:(bool)arg1;
- (void)setGroupsTextFields:(bool)arg1;
- (void)setKeyboardShowsOnPopup:(bool)arg1;
- (void)setMessage:(id)arg1;
- (void)setNumberOfRows:(long long)arg1;
- (void)setRunsModal:(bool)arg1;
- (void)setShowsOverSpringBoardAlerts:(bool)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setSuspendTag:(int)arg1;
- (void)setTableShouldShowMinimumContent:(bool)arg1;
- (void)setTaglineText:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleMaxLineCount:(int)arg1;
- (void)show;
- (bool)showsOverSpringBoardAlerts;
- (id)subtitle;
- (int)suspendTag;
- (bool)tableShouldShowMinimumContent;
- (id)tableView;
- (id)taglineTextLabel;
- (id)textField;
- (id)textFieldAtIndex:(long long)arg1;
- (int)textFieldCount;
- (id)title;
- (id)titleLabel;
- (int)titleMaxLineCount;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })titleRect;
- (id)window;

// Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading

- (id)initWithError:(id)arg1;
- (void)showWithCompletionHandler:(id /* block */)arg1;

// Image: /usr/lib/swift/libswiftUIKit.dylib

- (id)initWithTitle:(id)arg1 message:(id)arg2 delegate:(id)arg3 cancelButtonTitle:(id)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
