<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIActivityIndicatorView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIActivityIndicatorView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIActivityIndicatorView : UIView <NSCoding> {
    long long  _activityIndicatorViewStyle;
    long long  _actualActivityIndicatorViewStyle;
    bool  _animating;
    NSString * _artBackupKeyString;
    bool  _clockWise;
    UIColor * _color;
    bool  _disableUpdateColorOnTraitCollectionChange;
    double  _duration;
    bool  _hasShadow;
    bool  _hidesWhenStopped;
    NSString * _highlightArtBackupKeyString;
    double  _innerRadius;
    UIImageView * _internalView;
    UIColor * _shadowColor;
    struct CGSize { 
        double width; 
        double height; 
    }  _shadowOffset;
    bool  _spinning;
    double  _spinningDuration;
    long long  _spokeCount;
    long long  _spokeFrameRatio;
    NSArray * _spokeHighlightImages;
    NSArray * _spokeImages;
    bool  _useArtwork;
    bool  _useOutlineShadow;
    double  _width;
}

@property (nonatomic) long long activityIndicatorViewStyle;
@property (getter=isAnimating, nonatomic, readonly) bool animating;
@property (nonatomic, readonly) NSString *artBackupKeyString;
@property (nonatomic) bool clockWise;
@property (nonatomic, retain) UIColor *color;
@property bool hasShadow;
@property (nonatomic) bool hidesWhenStopped;
@property (nonatomic, readonly) NSString *highlightArtBackupKeyString;
@property (nonatomic) double innerRadius;
@property (nonatomic, readonly) UIImageView *internalView;
@property (nonatomic, retain) UIColor *shadowColor;
@property (nonatomic) struct CGSize { double x1; double x2; } shadowOffset;
@property bool spinning;
@property (nonatomic) double spinningDuration;
@property (nonatomic) long long spokeCount;
@property (nonatomic) long long spokeFrameRatio;
@property (readonly) NSArray *spokeHighlightImages;
@property (readonly) NSArray *spokeImages;
@property (nonatomic) bool useArtwork;
@property (nonatomic) bool useOutlineShadow;
@property (nonatomic) double width;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (bool)_isModernStyle:(long long)arg1;
+ (id)_loadResourcesForStyle:(long long)arg1;
+ (struct CGSize { double x1; double x2; })defaultSizeForStyle:(long long)arg1;
+ (struct CGSize { double x1; double x2; })size;

- (void).cxx_destruct;
- (double)_alphaValueForStep:(long long)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (id)_artBackupKeyWithHighlight:(bool)arg1;
- (bool)_canCustomize;
- (bool)_canCustomizeStyle:(long long)arg1;
- (void)_commonInit;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (bool)_contentHuggingDefault_isUsuallyFixedWidth;
- (long long)_customStyleForStyle:(long long)arg1;
- (id)_defaultColorForStyle:(long long)arg1;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (long long)_externalStyleForStyle:(long long)arg1;
- (void)_feedTheGear;
- (id)_generateImagesForColor:(id)arg1 highlight:(bool)arg2;
- (id)_generateModernImagesForImages:(id)arg1 color:(id)arg2;
- (bool)_hasCustomColor;
- (id)_highlightColorForStyle:(long long)arg1;
- (id)_imageForStep:(long long)arg1 withColor:(id)arg2;
- (long long)_internalStyleForStyle:(long long)arg1;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)_isArtWorkBased;
- (bool)_isModern;
- (id)_layoutInfosForStyle:(long long)arg1;
- (id)_orderedSpokeImagesForStartingAnimation;
- (void)_populateArchivedSubviews:(id)arg1;
- (void)_removeAllAnimations:(bool)arg1;
- (void)_setUpAnimation;
- (bool)_shouldGoBackToBaseStyle;
- (bool)_shouldGoToCustomStyle;
- (double)_spokeLengthForGearWidth:(double)arg1;
- (double)_spokeWidthForGearWidth:(double)arg1;
- (id)_styleNameForStyle:(long long)arg1;
- (void)_tearDownAnimation;
- (void)_updateInternalViewFrameWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)_widthForGearWidth:(double)arg1;
- (long long)activityIndicatorViewStyle;
- (id)artBackupKey;
- (id)artBackupKeyString;
- (bool)clockWise;
- (id)color;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (void)generateImages;
- (bool)hasShadow;
- (bool)hidesWhenStopped;
- (id)highlightArtBackupKeyString;
- (id)initWithActivityIndicatorStyle:(long long)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)innerRadius;
- (id)internalView;
- (bool)isAnimating;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isHighlighted;
- (void)setActivityIndicatorViewStyle:(long long)arg1;
- (void)setAnimating:(bool)arg1;
- (void)setAnimationDuration:(double)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setClockWise:(bool)arg1;
- (void)setColor:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHasShadow:(bool)arg1;
- (void)setHidesWhenStopped:(bool)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setInnerRadius:(double)arg1;
- (void)setShadowColor:(id)arg1;
- (void)setShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setSpinning:(bool)arg1;
- (void)setSpinningDuration:(double)arg1;
- (void)setSpokeCount:(long long)arg1;
- (void)setSpokeFrameRatio:(long long)arg1;
- (void)setStyle:(long long)arg1;
- (void)setUseArtwork:(bool)arg1;
- (void)setUseOutlineShadow:(bool)arg1;
- (void)setWidth:(double)arg1;
- (id)shadowColor;
- (struct CGSize { double x1; double x2; })shadowOffset;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (bool)spinning;
- (double)spinningDuration;
- (long long)spokeCount;
- (long long)spokeFrameRatio;
- (id)spokeHighlightImages;
- (id)spokeImages;
- (void)startAnimating;
- (void)startAnimation;
- (void)stopAnimating;
- (void)stopAnimation;
- (void)tintColorDidChange;
- (void)traitCollectionDidChange:(id)arg1;
- (bool)useArtwork;
- (bool)useOutlineShadow;
- (double)width;

// Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI

- (void)pk_applyAppearance:(id)arg1;
- (id)pk_childrenForAppearance;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
