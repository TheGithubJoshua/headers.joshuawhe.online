<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIKeyboardSplitTransitionView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIKeyboardSplitTransitionView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIKeyboardSplitTransitionView : UIView {
    bool  _centerFilled;
    id /* block */  _completionBlock;
    double  _currentProgress;
    CADisplayLink * _displayLink;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _endFrame;
    double  _finalTransitionStartTime;
    double  _finishDuration;
    double  _finishProgress;
    bool  _isRebuilding;
    bool  _isSplitTranslation;
    double  _liftOffProgress;
    UIKeyboardSliceSet * _sliceSet;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _startFrame;
    <UIKeyboardSplitTransitionDataSource> * _transitionDataSource;
    <UIKeyboardKeyplaneTransitionDelegate> * _transitionDelegate;
}

@property (readonly) NSArray *backgroundLayers;
@property (copy) id /* block */ completionBlock;
@property (readonly) NSArray *shadowLayers;
@property (nonatomic) <UIKeyboardSplitTransitionDataSource> *splitTransitionDataSource;
@property (nonatomic) <UIKeyboardKeyplaneTransitionDelegate> *splitTransitionDelegate;

- (id)backgroundLayers;
- (id)bottomDropShadow;
- (bool)canDisplayTransition;
- (id)centerDropShadow;
- (id)colorsForBackgroundLayer:(int)arg1;
- (id /* block */)completionBlock;
- (void)dealloc;
- (struct CGImage { }*)defaultKeyboardImage;
- (void)didMoveToWindow;
- (void)finalizeTransition;
- (void)finishWithProgress:(double)arg1 completionBlock:(id /* block */)arg2;
- (void)initializeLayers;
- (struct CGImage { }*)keyImageWithToken:(id)arg1;
- (id)outerCenterDropShadow;
- (void)rebuildControlKeys:(unsigned long long)arg1;
- (void)rebuildFromKeyplane:(id)arg1 toKeyplane:(id)arg2 startToken:(id)arg3 endToken:(id)arg4 keyboardType:(long long)arg5 orientation:(long long)arg6;
- (void)rebuildTransitionForSplitStyleChange:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectEnclosingKeyplane:(id)arg1;
- (void)setCompletionBlock:(id /* block */)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSplitTransitionDataSource:(id)arg1;
- (void)setSplitTransitionDelegate:(id)arg1;
- (id)shadowLayers;
- (bool)shouldAllowRubberiness;
- (bool)showDictationKey;
- (bool)showIntlKey;
- (struct CGSize { double x1; double x2; })sizeForShadowLayer:(int)arg1;
- (struct CGImage { }*)splitKeyboardImage;
- (id)splitTransitionDataSource;
- (id)splitTransitionDelegate;
- (id)topDropShadow;
- (void)transformForProgress:(double)arg1;
- (bool)transitionIsVisible;
- (void)transitionToFinalState:(id)arg1;
- (void)updateWithProgress:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
