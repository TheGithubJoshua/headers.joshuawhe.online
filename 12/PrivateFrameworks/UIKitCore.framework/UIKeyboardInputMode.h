<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIKeyboardInputMode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIKeyboardInputMode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIKeyboardInputMode : UITextInputMode <NSCopying> {
    bool  _extensionInputModeHasDictation;
    NSString * _languageWithRegion;
    NSArray * _multilingualLanguages;
    NSString * _primaryLanguage;
    NSString * hardwareLayout;
    NSString * identifier;
    bool  isDisplayed;
    NSString * normalizedIdentifier;
    NSString * softwareLayout;
}

@property (nonatomic, readonly) NSString *automaticHardwareLayout;
@property (nonatomic, readonly) NSBundle *containingBundle;
@property (nonatomic, readonly) NSString *containingBundleDisplayName;
@property (nonatomic, readonly) bool defaultLayoutIsASCIICapable;
@property (nonatomic, readonly) NSString *dictationDisplayName;
@property (nonatomic, retain) NSString *dictationLanguage;
@property (nonatomic, readonly) NSString *displayName;
@property (nonatomic, readonly) NSString *extendedDisplayName;
@property (nonatomic, readonly) NSExtension *extension;
@property (nonatomic) bool extensionInputModeHasDictation;
@property (nonatomic, retain) NSString *hardwareLayout;
@property (nonatomic, retain) NSString *identifier;
@property (nonatomic, readonly) NSString *identifierWithLayouts;
@property (nonatomic, readonly) bool isDefaultRightToLeft;
@property (nonatomic) bool isDisplayed;
@property (nonatomic, readonly) bool isExtensionInputMode;
@property (nonatomic, readonly) bool isStalledExtensionInputMode;
@property (nonatomic, retain) NSString *languageWithRegion;
@property (nonatomic, retain) NSArray *multilingualLanguages;
@property (nonatomic, retain) NSString *normalizedIdentifier;
@property (nonatomic, readonly, retain) NSArray *normalizedIdentifierLevels;
@property (nonatomic, retain) NSString *primaryLanguage;
@property (nonatomic, retain) NSString *softwareLayout;

+ (id)autofillFallbackInputMode;
+ (id)autofillSignupInputMode;
+ (id)canonicalLanguageIdentifierFromIdentifier:(id)arg1;
+ (id)dictationInputMode;
+ (id)hardwareLayoutFromIdentifier:(id)arg1;
+ (id)intlInputMode;
+ (id)keyboardInputModeWithIdentifier:(id)arg1;
+ (id)softwareLayoutFromIdentifier:(id)arg1;
+ (bool)supportsSecureCoding;

- (id)automaticHardwareLayout;
- (id)containingBundle;
- (id)containingBundleDisplayName;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (bool)defaultLayoutIsASCIICapable;
- (id)dictationDisplayName;
- (id)dictationLanguage;
- (id)displayName;
- (void)encodeWithCoder:(id)arg1;
- (id)extendedDisplayName;
- (id)extension;
- (bool)extensionInputModeHasDictation;
- (id)hardwareLayout;
- (id)identifier;
- (id)identifierWithLayouts;
- (bool)includeBarHeight;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (bool)isAllowedForTraits:(id)arg1;
- (bool)isDefaultRightToLeft;
- (bool)isDesiredForTraits:(id)arg1;
- (bool)isDisplayed;
- (bool)isEqual:(id)arg1;
- (bool)isExtensionInputMode;
- (bool)isStalledExtensionInputMode;
- (id)languageWithRegion;
- (id)multilingualLanguages;
- (id)normalizedIdentifier;
- (id)normalizedIdentifierLevels;
- (id)primaryLanguage;
- (void)setDictationLanguage:(id)arg1;
- (void)setExtensionInputModeHasDictation:(bool)arg1;
- (void)setHardwareLayout:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setIsDisplayed:(bool)arg1;
- (void)setLanguageWithRegion:(id)arg1;
- (void)setLastUsedDictationLanguage;
- (void)setMultilingualLanguages:(id)arg1;
- (void)setNormalizedIdentifier:(id)arg1;
- (void)setPrimaryLanguage:(id)arg1;
- (void)setSoftwareLayout:(id)arg1;
- (id)softwareLayout;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
