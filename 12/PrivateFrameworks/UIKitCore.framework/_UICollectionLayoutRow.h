<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UICollectionLayoutRow.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UICollectionLayoutRow.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UICollectionLayoutRow : NSObject {
    struct CGSize { 
        double width; 
        double height; 
    }  _aggregateFrameSizes;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentFrame;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _edgeInsets;
    long long  _expectedItemCount;
    NSMutableArray * _frames;
    NSMutableArray * _insets;
    int  _layoutAxis;
    double  _layoutDimension;
    double  _minimumInterItemSpacing;
    bool  _vertical;
}

@property (nonatomic) struct CGSize { double x1; double x2; } aggregateFrameSizes;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrame;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } edgeInsets;
@property (nonatomic) long long expectedItemCount;
@property (nonatomic, retain) NSMutableArray *frames;
@property (nonatomic, retain) NSMutableArray *insets;
@property (nonatomic) int layoutAxis;
@property (nonatomic) double layoutDimension;
@property (nonatomic) double minimumInterItemSpacing;
@property (nonatomic) bool vertical;

- (void).cxx_destruct;
- (void)_addFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)_alignFramesForOrthogonalAxisCenteredWithDimension:(double)arg1;
- (void)_alignFramesForOrthogonalAxisFromBottomWithDimension:(double)arg1;
- (void)_alignFramesForOrthogonalAxisFromTrailingEdgeWithDimension:(double)arg1;
- (void)_alignFramesFromBottomWithDimension:(double)arg1;
- (void)_alignFramesFromTrailingEdgeWithDimension:(double)arg1;
- (void)_alignFramesJustifiedWithDimension:(double)arg1;
- (bool)_edgeSpaceIncludesVariableSpacing:(double)arg1;
- (double)_effectiveEdgeSpaceForValue:(double)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_effectiveInsetsForInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (double)_fixedSpacingForEdgeSpaces:(id)arg1;
- (id)_frameEdgeSpacingsForInsetsForAxis:(int)arg1;
- (double)_layoutDimensionForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (struct CGPoint { double x1; double x2; })_nextFrameOffsetForInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (long long)_numberOfVariableSpacedEdgesForEdgeSpaces:(id)arg1;
- (void)_spaceFramesEvenlyWithDimension:(double)arg1;
- (void)_spaceFramesOrthogonallyEvenlyWithDimension:(double)arg1;
- (double)_spaceUsedForLayoutDimension;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })addFrameOfSize:(struct CGSize { double x1; double x2; })arg1 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (struct CGSize { double x1; double x2; })aggregateFrameSizes;
- (void)alignFramesForOrthogonalAxisWithAlignmentOption:(long long)arg1 dimension:(double)arg2;
- (void)alignFramesWithAlignmentOption:(long long)arg1 dimension:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrameWithOffset:(struct CGSize { double x1; double x2; })arg1;
- (long long)currentFrameCount;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })edgeInsets;
- (long long)expectedItemCount;
- (id)frames;
- (id)framesWithOffset:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithAxis:(int)arg1 itemCount:(long long)arg2 containerDimensions:(struct CGSize { double x1; double x2; })arg3 insets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg4 minimumInterItemSpacing:(double)arg5;
- (id)insets;
- (bool)isRowFull;
- (bool)isSpaceAvailableForFrameOfSize:(struct CGSize { double x1; double x2; })arg1 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (int)layoutAxis;
- (double)layoutDimension;
- (double)minimumInterItemSpacing;
- (void)setAggregateFrameSizes:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setExpectedItemCount:(long long)arg1;
- (void)setFrames:(id)arg1;
- (void)setInsets:(id)arg1;
- (void)setLayoutAxis:(int)arg1;
- (void)setLayoutDimension:(double)arg1;
- (void)setMinimumInterItemSpacing:(double)arg1;
- (void)setVertical:(bool)arg1;
- (void)spaceFramesEvenlyForLayoutAxis:(int)arg1 withDimension:(double)arg2;
- (bool)vertical;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
