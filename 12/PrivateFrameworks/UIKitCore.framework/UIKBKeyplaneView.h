<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIKBKeyplaneView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIKBKeyplaneView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIKBKeyplaneView : UIKBSplitImageView <UIKBCacheableView> {
    NSTimer * _activatedTimer;
    NSMutableDictionary * _activeViewIndex;
    UIKBCacheToken * _cacheToken;
    UIKBKeyView * _candidateGapView;
    UIKBTree * _defaultKeyplane;
    UIKBCacheToken * _defaultKeyplaneCacheToken;
    NSMutableDictionary * _delayedDeactivationKeys;
    UIKeyboardEmojiKeyDisplayController * _emojiKeyManager;
    UIKBRenderFactory * _factory;
    UIKBSplitImageView * _keyBackgrounds;
    UIKBSplitImageView * _keyBorders;
    UIKBSplitImageView * _keyCaps;
    UIKBKeyViewAnimator * _keyViewAnimator;
    UIKBTree * _keyplane;
    bool  _performingDeactivation;
    UIKBRenderConfig * _renderConfig;
    NSMutableDictionary * _renderedKeyViews;
    UIKBRenderingContext * _renderingContext;
    bool  _shouldDrawRect;
    NSMutableDictionary * _subviewIndex;
}

@property (nonatomic, readonly) long long cacheDeferPriority;
@property (nonatomic, readonly) bool cacheDeferable;
@property (nonatomic, readonly) NSString *cacheKey;
@property (nonatomic, retain) UIKBCacheToken *cacheToken;
@property (nonatomic, readonly) double cachedWidth;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) UIKBTree *defaultKeyplane;
@property (nonatomic, retain) UIKBCacheToken *defaultKeyplaneCacheToken;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIKeyboardEmojiKeyDisplayController *emojiKeyManager;
@property (nonatomic, retain) UIKBRenderFactory *factory;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool keepNonPersistent;
@property (nonatomic, retain) UIKBKeyViewAnimator *keyViewAnimator;
@property (nonatomic, retain) UIKBTree *keyplane;
@property (nonatomic, retain) UIKBRenderConfig *renderConfig;
@property (nonatomic, retain) UIKBRenderingContext *renderingContext;
@property (readonly) Class superclass;

- (bool)_canDrawContent;
- (void)_generateFactoryIfNeeded;
- (void)_generateRenderingContextIfNeeded;
- (bool)_shouldAllowKey:(id)arg1;
- (bool)_shouldInheritScreenScaleAsContentScaleFactor;
- (void)activateKeys;
- (id)activeKeyViews;
- (void)addKeyToDelayedDeactivationSet:(id)arg1;
- (long long)cacheDeferPriority;
- (bool)cacheDeferable;
- (id)cacheIdentifierForKey:(id)arg1;
- (id)cacheIdentifierForKey:(id)arg1 withState:(int)arg2;
- (id)cacheKey;
- (id)cacheKeysForRenderFlags:(id)arg1;
- (id)cacheToken;
- (double)cachedWidth;
- (void)cancelDelayedDeactivation;
- (id)containingViewForKey:(id)arg1 withState:(int)arg2;
- (int)cornerMaskForKey:(id)arg1 recursive:(bool)arg2;
- (void)deactivateAdaptiveKey:(id)arg1;
- (void)deactivateKey:(id)arg1 previousState:(int)arg2;
- (void)deactivateKeys;
- (void)dealloc;
- (id)defaultKeyplane;
- (id)defaultKeyplaneCacheToken;
- (void)dimKeys:(id)arg1;
- (void)displayLayer:(id)arg1;
- (void)drawContentsOfRenderers:(id)arg1;
- (id)emojiKeyManager;
- (id)factory;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 keyplane:(id)arg2;
- (bool)isPasscodeStyle;
- (bool)keepNonPersistent;
- (id)keyViewAnimator;
- (id)keyplane;
- (void)performDelayedDeactivation:(id)arg1;
- (void)prepareForDisplay;
- (void)purgeFactory;
- (void)purgeKeyViews;
- (void)purgeLayerContents;
- (void)purgeSubviews;
- (void)removeFromSuperview;
- (void)removeKeyFromDelayedDeactivationSet:(id)arg1;
- (id)renderConfig;
- (id)renderingContext;
- (void)scheduleDelayedDeactivation;
- (void)setCacheToken:(id)arg1;
- (void)setContentScaleFactor:(double)arg1;
- (void)setDefaultKeyplane:(id)arg1;
- (void)setDefaultKeyplaneCacheToken:(id)arg1;
- (void)setEmojiKeyManager:(id)arg1;
- (void)setFactory:(id)arg1;
- (void)setKeyViewAnimator:(id)arg1;
- (void)setKeyplane:(id)arg1;
- (void)setRenderConfig:(id)arg1;
- (void)setRenderingContext:(id)arg1;
- (void)setState:(int)arg1 forKey:(id)arg2;
- (bool)shouldAnimateInKeyView:(id)arg1;
- (bool)shouldAnimateOutKeyView:(id)arg1;
- (int)stateForKey:(id)arg1;
- (bool)useDefaultKeyplaneCacheTokenForRenderFlags:(long long)arg1;
- (bool)validForKeyplane:(id)arg1 withVisualStyle:(int)arg2;
- (id)viewForKey:(id)arg1;
- (id)viewForKey:(id)arg1 state:(int)arg2;
- (void)willMoveToWindow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
