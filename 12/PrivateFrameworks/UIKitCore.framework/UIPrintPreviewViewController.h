<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIPrintPreviewViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIPrintPreviewViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIPrintPreviewViewController : UICollectionViewController <PageRangeDelegate, UICollectionViewDataSourcePrefetching, UICollectionViewDelegate, UIDocumentInteractionControllerDelegate, UIGestureRecognizerDelegate, UINavigationControllerDelegate, UIScrollViewDelegate, UIViewControllerPreviewingDelegate_Private> {
    bool  _accessibilityScrollTriggered;
    bool  _annotationsOnPreview;
    NSArray * _arrayOfCellSizes;
    NSMutableArray * _arrayOfPageImages;
    UIPrintPaper * _destinationPaper;
    UIDocumentInteractionController * _documentInteractionController;
    bool  _grayscalePreview;
    long long  _initialPageIndexToCenter;
    long long  _numPages;
    long long  _pageIndexOnPageLabel;
    UILabel * _pageLabel;
    UIView * _pageLabelBackgroundView;
    NSLayoutConstraint * _pageLabelBadgeVerticalPositionConstraint;
    UIImageView * _pageLabelOnImageView;
    NSObject<OS_dispatch_queue> * _pageRendererQueue;
    struct CGSize { 
        double width; 
        double height; 
    }  _pageSize;
    struct CGPDFDocument { } * _pdfDocRef;
    NSString * _pdfPassword;
    NSURL * _pdfURL;
    UIImageView * _pinchAnimationView;
    UIView * _pinchAnimationWhiteBackgroundView;
    UICollectionViewCell * _pinchGestureBeginningCell;
    struct CGPoint { 
        double x; 
        double y; 
    }  _pinchGestureLastPoint;
    double  _pinchGestureLastScale;
    bool  _presentingDocumentInteractionController;
    UIPrintPanelViewController * _printPanelViewController;
    NSURL * _quickLookPDFURL;
    bool  _scaleUpOnDestinationPaper;
    NSURL * _sharePDFFileURL;
}

@property bool annotationsOnPreview;
@property (retain) NSArray *arrayOfCellSizes;
@property (retain) NSMutableArray *arrayOfPageImages;
@property (readonly) long long currentCenterPageIndex;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) UIPrintPaper *destinationPaper;
@property bool grayscalePreview;
@property (readonly) unsigned long long hash;
@property long long initialPageIndexToCenter;
@property (readonly) long long numPages;
@property (retain) NSString *pdfPassword;
@property (retain) NSURL *pdfURL;
@property bool presentingDocumentInteractionController;
@property (retain) NSURL *quickLookPDFURL;
@property bool scaleUpOnDestinationPaper;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (long long)_adjustScrollDirectionForLayout:(long long)arg1;
- (id)_newTempURLForPreviewing;
- (bool)accessibilityScroll:(long long)arg1;
- (void)addAllPages:(id)arg1;
- (void)addPage:(id)arg1 forPageIndex:(long long)arg2;
- (void)animateCellAndPresentDocumentInteractionController;
- (bool)annotationsOnPreview;
- (id)arrayOfCellSizes;
- (id)arrayOfPageImages;
- (bool)canAddAllPages:(id)arg1;
- (bool)canAddPage:(id)arg1 forPageIndex:(long long)arg2;
- (bool)canBecomeFirstResponder;
- (bool)canRemovePage:(id)arg1 forPageIndex:(long long)arg2;
- (bool)canSetEndPage:(id)arg1 forPageIndex:(long long)arg2;
- (bool)canSetStartPage:(id)arg1 forPageIndex:(long long)arg2;
- (bool)canShowMenuBar;
- (bool)collectionView:(id)arg1 canPerformAction:(SEL)arg2 forItemAtIndexPath:(id)arg3 withSender:(id)arg4;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)collectionView:(id)arg1 prefetchItemsAtIndexPaths:(id)arg2;
- (bool)collectionView:(id)arg1 shouldShowMenuForItemAtIndexPath:(id)arg2;
- (void)configureCell:(id)arg1 atIndexPath:(id)arg2;
- (long long)currentCenterPageIndex;
- (void)dealloc;
- (id)destinationPaper;
- (void)didReceiveMemoryWarning;
- (void)documentInteractionController:(id)arg1 didEndSendingToApplication:(id)arg2;
- (id)documentInteractionControllerByPreparedForPreviewing;
- (void)documentInteractionControllerDidEndPreview:(id)arg1;
- (id)documentInteractionControllerViewControllerForPreview:(id)arg1;
- (id)excludedActivityTypesForDocumentInteractionController:(id)arg1;
- (void)fetchPageInBackground:(unsigned long long)arg1 reloadWhenDone:(bool)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)gestureRecognizersOfVisibleCells;
- (id)getPageImageForPage:(long long)arg1 grayscale:(bool)arg2 deepColor:(bool)arg3;
- (bool)grayscalePreview;
- (void)handlePinch:(id)arg1;
- (void)handleTap:(id)arg1;
- (id)indexPathNearestToPointInCollectionView:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithPageSize:(struct CGSize { double x1; double x2; })arg1 numberOfPages:(long long)arg2 viewSize:(struct CGSize { double x1; double x2; })arg3 printPanelViewController:(id)arg4;
- (long long)initialPageIndexToCenter;
- (bool)locationInTapTargetOfPageLabelBadge:(struct CGPoint { double x1; double x2; })arg1;
- (long long)numPages;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (void)pageBadgeTapped:(id)arg1;
- (bool)pageIndexIsInRange:(long long)arg1;
- (double)pageLabelBottomSpace;
- (void)pageRangeUpdated;
- (id)pathOfCenterMostCell;
- (id)pdfPassword;
- (id)pdfURL;
- (bool)presentingDocumentInteractionController;
- (void)previewPDF;
- (id)previewViewControllerForItemAtIndexPath:(id)arg1;
- (void)previewingContext:(id)arg1 commitViewController:(id)arg2;
- (id)previewingContext:(id)arg1 viewControllerForLocation:(struct CGPoint { double x1; double x2; })arg2;
- (id)quickLookPDFURL;
- (void)removePage:(id)arg1 forPageIndex:(long long)arg2;
- (void)resetAllPageImages;
- (void)resetCellSizesArray;
- (bool)scaleUpOnDestinationPaper;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)setAnnotationsOnPreview:(bool)arg1;
- (void)setArrayOfCellSizes:(id)arg1;
- (void)setArrayOfPageImages:(id)arg1;
- (void)setDestinationPaper:(id)arg1;
- (void)setEndPage:(id)arg1 forPageIndex:(long long)arg2;
- (void)setGrayscalePreview:(bool)arg1;
- (void)setInitialPageIndexToCenter:(long long)arg1;
- (void)setPdfPassword:(id)arg1;
- (void)setPdfURL:(id)arg1;
- (void)setPresentingDocumentInteractionController:(bool)arg1;
- (void)setQuickLookPDFURL:(id)arg1;
- (void)setScaleUpOnDestinationPaper:(bool)arg1;
- (void)setStartPage:(id)arg1 forPageIndex:(long long)arg2;
- (void)trackCenterCell;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateLayout;
- (void)updatePageBadgeImage;
- (void)updatePageLabel;
- (void)updatePageNumberBadgeLocation;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
