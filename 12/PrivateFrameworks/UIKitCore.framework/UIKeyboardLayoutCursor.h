<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIKeyboardLayoutCursor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIKeyboardLayoutCursor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIKeyboardLayoutCursor : UIKeyboardLayoutStar <UIKBAlertControllerDelegate> {
    bool  _cachedCanMultitap;
    UIKBTree * _cachedMultitapKeyplane;
    UILabel * _dictationHelpLabel;
    bool  _didVariantDelete;
    bool  _disableTouchInput;
    bool  _ignoreEventsUntilPressEnds;
    UIKBTree * _indirectKeyboard;
    bool  _isForwardingEvent;
    NSString * _keyplaneBeforeDictation;
    NSArray * _keyplaneKeys;
    UILexicon * _recentInputs;
    UIAlertController * _recentInputsAlert;
    long long  _selectedKeyBeforeDictation;
    long long  _selectedKeyIndex;
    UIView * _selectionView;
    bool  _suppressOperations;
}

@property (nonatomic, readonly) UIKBTree *currentKey;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *keyplaneBeforeDictation;
@property (nonatomic, retain) UIAlertController *recentInputsAlert;
@property (nonatomic) long long selectedKeyBeforeDictation;
@property (readonly) Class superclass;

+ (id)carKeyboardNameForKeyboard:(id)arg1 screenTraits:(id)arg2;
+ (struct CGSize { double x1; double x2; })keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2 keyboardType:(long long)arg3;

- (void)_handleKeyUIEvent:(id)arg1;
- (bool)_handleMoveWithEvent:(id)arg1;
- (bool)_handlePhysicalButtonEvent:(id)arg1;
- (bool)_handlePhysicalKeyDownWithEvent:(id)arg1;
- (bool)_handleRemoteControlReceivedWithEvent:(id)arg1;
- (bool)_handleWheelChangedWithEvent:(id)arg1;
- (bool)_isDirectionalHeading:(unsigned long long)arg1;
- (id)_keyplaneForKeyplaneProperties;
- (bool)_menuTapShouldExitVariants;
- (void)_moveWithEvent:(id)arg1;
- (void)_wheelChangedWithEvent:(id)arg1;
- (void)acceptRecentInputIfNecessary;
- (int)activeStateForKey:(id)arg1;
- (void)alertDidDismiss;
- (id)cacheTokenForKeyplane:(id)arg1;
- (bool)canHandleEvent:(id)arg1;
- (bool)canMultitap;
- (void)clearVariantStateForKey:(id)arg1;
- (void)configureChildCollectionViewCellsIfNeeded;
- (id)currentKey;
- (unsigned long long)cursorLocation;
- (void)deactivateKey:(id)arg1;
- (void)dealloc;
- (long long)defaultSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2;
- (bool)diacriticForwardCompose;
- (void)didSelectRecentInputString:(id)arg1;
- (unsigned long long)downActionFlagsForKey:(id)arg1;
- (int)enabledStateForKey:(id)arg1;
- (void)endMultitapForKey:(id)arg1;
- (void)flushKeyCache:(id)arg1;
- (unsigned char)getHandRestRecognizerState;
- (bool)handleLinearDirectionalInput:(int)arg1;
- (void)handleVariantDeleteIfNecessaryForKey:(id)arg1;
- (bool)handleVisualDirectionalInput:(int)arg1;
- (bool)ignoresShiftState;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAlphabeticPlane;
- (bool)isKeyplaneDisabledWithName:(id)arg1;
- (id)keyHitTestInSameRowAsCenter:(struct CGPoint { double x1; double x2; })arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (id)keyViewAnimator;
- (id)keyplaneBeforeDictation;
- (void)longPressAction;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (void)pressesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)pressesChanged:(id)arg1 withEvent:(id)arg2;
- (void)pressesEnded:(id)arg1 withEvent:(id)arg2;
- (id)recentInputsAlert;
- (bool)refreshSelectedCellIfNecessaryForKey:(id)arg1;
- (void)remoteControlReceivedWithEvent:(id)arg1;
- (void)returnToKeyplaneAfterDictation;
- (void)runWithSuppressedActions:(id /* block */)arg1;
- (void)selectInitialKeyIfNecessary;
- (long long)selectedKeyBeforeDictation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionFrameForKeyIndex:(long long)arg1;
- (void)setCursorLocation:(unsigned long long)arg1;
- (void)setDisableTouchInput:(bool)arg1;
- (void)setHighlightedVariantIndex:(long long)arg1 key:(id)arg2;
- (void)setKeyboardAppearance:(long long)arg1;
- (void)setKeyboardName:(id)arg1 appearance:(long long)arg2;
- (void)setKeyplaneBeforeDictation:(id)arg1;
- (void)setKeyplaneName:(id)arg1;
- (void)setRecentInputs:(id)arg1;
- (void)setRecentInputsAlert:(id)arg1;
- (void)setRenderConfig:(id)arg1;
- (void)setSelectedKeyBeforeDictation:(long long)arg1;
- (void)setSelectedKeyIndex:(long long)arg1;
- (bool)shouldAllowCurrentKeyplaneReload;
- (bool)shouldDeactivateWithoutWindow;
- (bool)shouldMatchCaseForDomainKeys;
- (bool)shouldMergeKey:(id)arg1;
- (bool)shouldPreventInputManagerHitTestingForKey:(id)arg1;
- (bool)shouldRetestKey:(id)arg1 withKeyplane:(id)arg2;
- (bool)shouldToggleKeyplaneWithName:(id)arg1;
- (bool)shouldUseDefaultShiftStateFromLayout;
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;
- (void)showRecentInputsAlert;
- (int)stateForCandidateListKey:(id)arg1;
- (int)stateForKeyplaneSwitchKey:(id)arg1;
- (bool)supportsEmoji;
- (void)switchToDictationKeyplaneWithActivationIdentifier:(id)arg1;
- (void)takeKeyAction:(id)arg1;
- (unsigned long long)targetEdgesForScreenGestureRecognition;
- (long long)targetKeyIndexAtOffset:(struct CGPoint { double x1; double x2; })arg1 fromKey:(id)arg2;
- (void)updateDictationHelpString;
- (void)updateKeyplaneSwitchEdgeBiases;
- (void)updateRecentInputsKeyIfNecessary;
- (void)updateStatesForGridSelection;
- (bool)usesAutoShift;
- (unsigned long long)variantCountForKey:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
