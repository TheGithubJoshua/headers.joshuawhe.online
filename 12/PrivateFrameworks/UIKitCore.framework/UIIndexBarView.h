<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIIndexBarView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIIndexBarView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIIndexBarView : UIControl {
    double  _cachedDisplayHighlightedIndex;
    double  _deflection;
    <UIIndexBarViewDelegate> * _delegate;
    NSArray * _displayEntries;
    NSArray * _entries;
    long long  _highlightStyle;
    double  _highlightedIndex;
    UIColor * _indexColor;
    UIColor * _nonTrackingBackgroundColor;
    UISelectionFeedbackGenerator * _selectionFeedbackGenerator;
    UIColor * _trackingBackgroundColor;
    <UIIndexBarVisualStyle> * _visualStyle;
}

@property (nonatomic) double cachedDisplayHighlightedIndex;
@property (nonatomic) double deflection;
@property (nonatomic) <UIIndexBarViewDelegate> *delegate;
@property (nonatomic, retain) NSArray *displayEntries;
@property (nonatomic, readonly) double displayHighlightedIndex;
@property (nonatomic, copy) NSArray *entries;
@property (nonatomic) long long highlightStyle;
@property (nonatomic) double highlightedIndex;
@property (nonatomic, copy) UIColor *indexColor;
@property (nonatomic, copy) UIColor *nonTrackingBackgroundColor;
@property (nonatomic, retain) UISelectionFeedbackGenerator *selectionFeedbackGenerator;
@property (nonatomic, copy) UIColor *trackingBackgroundColor;
@property (nonatomic, retain) <UIIndexBarVisualStyle> *visualStyle;

- (void).cxx_destruct;
- (bool)_canDrawContent;
- (bool)_didSelectEntry:(id)arg1 atIndex:(long long)arg2;
- (bool)_selectEntry:(id)arg1 atIndex:(long long)arg2;
- (void)_updateBackgroundColor;
- (void)_updateDisplayEntries;
- (void)_userInteractionStarted;
- (void)_userInteractionStopped;
- (id)backgroundColor;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (double)cachedDisplayHighlightedIndex;
- (bool)canBecomeFocused;
- (void)cancelTrackingWithEvent:(id)arg1;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (double)deflection;
- (id)delegate;
- (id)displayEntries;
- (double)displayHighlightedIndex;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (id)entries;
- (long long)highlightStyle;
- (double)highlightedIndex;
- (id)indexColor;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)layoutSubviews;
- (id)nonTrackingBackgroundColor;
- (void)resetDeflection:(bool)arg1;
- (id)selectionFeedbackGenerator;
- (void)setBackgroundColor:(id)arg1;
- (void)setCachedDisplayHighlightedIndex:(double)arg1;
- (void)setDeflection:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayEntries:(id)arg1;
- (void)setEntries:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlightStyle:(long long)arg1;
- (void)setHighlightedIndex:(double)arg1;
- (void)setIndexColor:(id)arg1;
- (void)setNonTrackingBackgroundColor:(id)arg1;
- (void)setSelectionFeedbackGenerator:(id)arg1;
- (void)setTrackingBackgroundColor:(id)arg1;
- (void)setVisualStyle:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)tintColorDidChange;
- (id)trackingBackgroundColor;
- (void)traitCollectionDidChange:(id)arg1;
- (id)visualStyle;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
