<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIStatusBarItemView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIStatusBarItemView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIStatusBarItemView : UIView {
    bool  _allowsUpdates;
    double  _currentOverlap;
    UIStatusBarForegroundStyleAttributes * _foregroundStyle;
    struct CGContext { } * _imageContext;
    double  _imageContextScale;
    UIStatusBarItem * _item;
    _UILegibilityImageSet * _lastGeneratedTextImage;
    double  _lastGeneratedTextImageLetterSpacing;
    NSString * _lastGeneratedTextImageText;
    UIStatusBarLayoutManager * _layoutManager;
    _UILegibilityView * _legibilityView;
    bool  _shouldTintContentImage;
    bool  _visible;
}

@property (nonatomic) bool allowsUpdates;
@property (nonatomic, readonly) UIStatusBarForegroundStyleAttributes *foregroundStyle;
@property (nonatomic, readonly) UIStatusBarItem *item;
@property (nonatomic) UIStatusBarLayoutManager *layoutManager;
@property (nonatomic, readonly) bool shouldTintContentImage;
@property (getter=isVisible, nonatomic) bool visible;

+ (id)createViewForItem:(id)arg1 withData:(id)arg2 actions:(int)arg3 foregroundStyle:(id)arg4;

- (void).cxx_destruct;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (bool)_shouldReverseLayoutDirection;
- (void)_tintContentLayerIfNeeded;
- (id)accessibilityHUDRepresentation;
- (double)addContentOverlap:(double)arg1;
- (double)adjustFrameToNewSize:(double)arg1;
- (bool)allowsUpdates;
- (bool)allowsUserInteraction;
- (bool)animatesDataChange;
- (void)beginDisablingRasterization;
- (void)beginImageContextWithMinimumWidth:(double)arg1;
- (id)cachedImageWithText:(id)arg1 truncatedWithEllipsesAtMaxWidth:(double)arg2 letterSpacing:(double)arg3;
- (void)clearCachedTextImage;
- (id)contentsIOSurface;
- (id)contentsImage;
- (double)currentLeftOverlap;
- (double)currentOverlap;
- (double)currentRightOverlap;
- (void)dealloc;
- (id)description;
- (void)endDisablingRasterization;
- (void)endImageContext;
- (double)extraLeftPadding;
- (double)extraRightPadding;
- (id)foregroundStyle;
- (id)foregroundView;
- (id)imageFromImageContextClippedToWidth:(double)arg1;
- (id)imageWithShadowNamed:(id)arg1;
- (id)imageWithText:(id)arg1;
- (id)imageWithText:(id)arg1 shouldCache:(bool)arg2;
- (id)initWithItem:(id)arg1 data:(id)arg2 actions:(int)arg3 style:(id)arg4;
- (bool)isVisible;
- (id)item;
- (id)layoutManager;
- (double)legibilityStrength;
- (long long)legibilityStyle;
- (double)maximumOverlap;
- (double)neededSizeForImageSet:(id)arg1;
- (void)performPendedActions;
- (double)resetContentOverlap;
- (void)setAllowsUpdates:(bool)arg1;
- (void)setContentMode:(long long)arg1;
- (void)setCurrentOverlap:(double)arg1;
- (void)setLayerContentsImage:(id)arg1;
- (void)setLayoutManager:(id)arg1;
- (void)setPersistentAnimationsEnabled:(bool)arg1;
- (double)setStatusBarData:(id)arg1 actions:(int)arg2;
- (void)setVisible:(bool)arg1;
- (void)setVisible:(bool)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 duration:(double)arg3;
- (void)setVisible:(bool)arg1 settingAlpha:(bool)arg2;
- (double)shadowPadding;
- (bool)shouldTintContentImage;
- (double)standardPadding;
- (long long)textAlignment;
- (id)textFont;
- (long long)textStyle;
- (double)updateContentsAndWidth;
- (bool)updateForNewData:(id)arg1 actions:(int)arg2;
- (void)updateForNewStyle:(id)arg1;
- (void)willMoveToWindow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
