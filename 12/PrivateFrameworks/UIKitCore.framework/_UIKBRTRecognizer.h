<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIKBRTRecognizer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIKBRTRecognizer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIKBRTRecognizer : NSObject {
    NSMutableSet * _activeTouches;
    NSObject<OS_dispatch_queue> * _activeTouchesQueue;
    NSMutableSet * _averagingRules;
    struct CGSize { 
        double width; 
        double height; 
    }  _clusterRestHaloSize;
    NSMutableSet * _definitiveRules;
    <_UIKBRTRecognizerDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    bool  _disableHomeRowReturn;
    NSMutableArray * _ignoredTouches;
    NSObject<OS_dispatch_queue> * _ignoredTouchesQueue;
    bool  _isWaiting;
    double  _maximumNonRestMoveDistance;
    unsigned long long  _numProlongedTouches;
    NSMutableArray * _touchInfos;
    double  _touchIntervalAverage;
    <_UIKBRTRecognizerTouchLoggingProtocol> * _touchLogger;
    NSObject<OS_dispatch_queue> * _touchQueue;
    <_UIKBRTRecognizerTouchPointTrackingProtocol> * _touchTracker;
}

@property (nonatomic, retain) NSMutableSet *activeTouches;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *activeTouchesQueue;
@property (nonatomic, readonly) NSMutableSet *averagingRules;
@property (nonatomic) struct CGSize { double x1; double x2; } clusterRestHaloSize;
@property (nonatomic, readonly) NSMutableSet *definitiveRules;
@property (nonatomic) <_UIKBRTRecognizerDelegate> *delegate;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (nonatomic) bool disableHomeRowReturn;
@property (nonatomic, retain) NSMutableArray *ignoredTouches;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *ignoredTouchesQueue;
@property (nonatomic) double maximumNonRestMoveDistance;
@property (nonatomic) unsigned long long numProlongedTouches;
@property (nonatomic, retain) NSMutableArray *touchInfos;
@property (nonatomic) double touchIntervalAverage;
@property (nonatomic, retain) <_UIKBRTRecognizerTouchLoggingProtocol> *touchLogger;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *touchQueue;
@property (nonatomic, retain) <_UIKBRTRecognizerTouchPointTrackingProtocol> *touchTracker;

- (void).cxx_destruct;
- (void)_doBeginTouchWithTouchInfo:(id)arg1;
- (void)_doCancelledTouchWithTouchInfo:(id)arg1;
- (void)_doEndedTouchWithTouchInfo:(id)arg1;
- (void)_doIgnoreTouchWithTouchInfo:(id)arg1;
- (void)_doMarkTouchProcessedWithTouchInfo:(id)arg1;
- (void)_doMovedTouchWithTouchInfo:(id)arg1;
- (id)activeTouches;
- (id)activeTouchesQueue;
- (bool)addedToActiveTouches:(id)arg1;
- (id)averagingRules;
- (void)cancelTouchOnLayoutWithTouchInfo:(id)arg1;
- (struct CGSize { double x1; double x2; })clusterRestHaloSize;
- (id)definitiveRules;
- (id)delegate;
- (id)delegateQueue;
- (bool)disableHomeRowReturn;
- (void)explicitlyIgnoreTouch:(id)arg1 withIdentifier:(id)arg2;
- (id)ignoredTouches;
- (id)ignoredTouchesQueue;
- (id)init;
- (void)kbStatusMessage:(id)arg1;
- (float)letRulesModifyNewTouchInfo:(id)arg1;
- (void)letRulesModifyPendingTouchInfo:(id)arg1;
- (bool)makeTouchActive:(id)arg1;
- (void)makeTouchIgnored:(id)arg1 force:(bool)arg2;
- (void)makeTouchIgnored:(id)arg1 force:(bool)arg2 because:(id)arg3;
- (void)makeTouchIgnored:(id)arg1 force:(bool)arg2 withMessage:(id)arg3;
- (void)markTouchProcessed:(id)arg1 withIdentifier:(id)arg2;
- (double)maximumNonRestMoveDistance;
- (void)notifyDelegateOfCancelledTouch:(id)arg1;
- (void)notifyDelegateOfIgnoringTouch:(id)arg1;
- (void)notifyDelegateOfMovedIgnoredTouch:(id)arg1;
- (bool)notifyDelegateOfMovedTouch:(id)arg1;
- (void)notifyDelegateOfRestingTouch:(id)arg1;
- (void)notifyDelegateOfSuccessfulTouch:(id)arg1;
- (unsigned long long)numProlongedTouches;
- (void)processTouchInfo:(id)arg1;
- (bool)queryDelegateOfIgnoringTouch:(id)arg1 forOtherTouch:(bool)arg2;
- (bool)queryDelegateOfRestingTouch:(id)arg1;
- (bool)queryDelegateToBeginTouch:(id)arg1 forBeginState:(unsigned long long)arg2 restartIfNecessary:(bool)arg3;
- (bool)removedFromActiveTouches:(id)arg1;
- (void)reset;
- (void)setActiveTouches:(id)arg1;
- (void)setActiveTouchesQueue:(id)arg1;
- (void)setClusterRestHaloSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setDisableHomeRowReturn:(bool)arg1;
- (void)setIgnoredTouches:(id)arg1;
- (void)setIgnoredTouchesQueue:(id)arg1;
- (void)setMaximumNonRestMoveDistance:(double)arg1;
- (void)setNumProlongedTouches:(unsigned long long)arg1;
- (void)setStandardKeyPixelSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTouchInfos:(id)arg1;
- (void)setTouchIntervalAverage:(double)arg1;
- (void)setTouchLogger:(id)arg1;
- (void)setTouchQueue:(id)arg1;
- (void)setTouchTracker:(id)arg1;
- (void)touchCancelled:(id)arg1 withIdentifier:(id)arg2;
- (void)touchDown:(id)arg1 withIdentifier:(id)arg2 canLogTouch:(bool)arg3;
- (void)touchDragged:(id)arg1 withIdentifier:(id)arg2;
- (id)touchInfos;
- (double)touchIntervalAverage;
- (id)touchLogger;
- (id)touchQueue;
- (id)touchTracker;
- (void)touchUp:(id)arg1 withIdentifier:(id)arg2;
- (void)updateIgnoredTouchesForTouchInfo:(id)arg1 whenTouchInfo:(id)arg2 changesStateTo:(BOOL)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
