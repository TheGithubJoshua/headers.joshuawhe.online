<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIImageView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIImageView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIImageView : UIView <NUCrossFadeViewAnimatable, UIAccessibilityContentSizeCategoryImageAdjusting> {
    bool  __animatesContents;
    bool  _adjustsImageWhenAncestorFocused;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _cachedEdgeInsetsForEffects;
    bool  _edgeInsetsForEffectsAreValid;
    UILayoutGuide * _focusedFrameGuide;
    long long  _lastResolvedLayoutDirectionTrait;
    UITraitCollection * _lastResolvedTraitCollection;
    bool  _masksFocusEffectToContents;
    id  _storage;
    bool  _templateSettingsAreInvalid;
}

@property (setter=_setAnimatesContents:, nonatomic) bool _animatesContents;
@property (setter=_setDefaultRenderingMode:, nonatomic) long long _defaultRenderingMode;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _edgeInsetsForEffects;
@property (setter=_setEdgeInsetsForEffectsAreValid:, nonatomic) bool _edgeInsetsForEffectsAreValid;
@property (nonatomic, readonly) _UIStackedImageContainerView *_layeredImageContainer;
@property (setter=_setLayeredImageCornerRadius:, nonatomic) double _layeredImageCornerRadius;
@property (setter=_setMasksTemplateImages:, nonatomic) bool _masksTemplateImages;
@property (setter=_setTemplateImageRenderingEffects:, nonatomic) unsigned long long _templateImageRenderingEffects;
@property (nonatomic, readonly) bool _templateSettingsAreInvalid;
@property (nonatomic) bool adjustsImageSizeForAccessibilityContentSizeCategory;
@property (nonatomic) bool adjustsImageWhenAncestorFocused;
@property (getter=isAnimating, nonatomic, readonly) bool animating;
@property (nonatomic) double animationDuration;
@property (nonatomic, copy) NSArray *animationImages;
@property (nonatomic) long long animationRepeatCount;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) int drawMode;
@property (readonly) UILayoutGuide *focusedFrameGuide;
@property (readonly) unsigned long long hash;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, copy) NSArray *highlightedAnimationImages;
@property (nonatomic, retain) UIImage *highlightedImage;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic) bool masksFocusEffectToContents;
@property (nonatomic, readonly) UIView *overlayContentView;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIColor *tintColor;
@property (getter=isUserInteractionEnabled, nonatomic) bool userInteractionEnabled;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (bool)_canReuseIOSurface:(struct __IOSurface { }*)arg1 forRenderingCIImageWithIOSurfaceProperties:(id)arg2;
+ (id)_surfacePropertiesForRenderingCIImageWithSize:(struct CGSize { double x1; double x2; })arg1 pixelFormat:(unsigned int)arg2 bytesPerElement:(unsigned long long)arg3;

- (void).cxx_destruct;
- (id)_activeImage;
- (id)_adaptiveImageForImage:(id)arg1 assignedImage:(id)arg2 currentImage:(id)arg3 hasAdapted:(bool*)arg4;
- (void)_ancestorWillUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (bool)_animatesContents;
- (id)_applyImageEffectsToCIImage:(id)arg1 effectiveTintColor:(id)arg2;
- (void)_applySettingsForLegibilityStyle:(long long)arg1;
- (id)_cachedPretiledImageForImage:(id)arg1;
- (bool)_canDrawContent;
- (id)_checkHighlightedImageForAdaptation:(id)arg1 hadAdapted:(bool*)arg2;
- (id)_checkImageForAdaptation:(id)arg1 hasAdapted:(bool*)arg2;
- (void)_cleanUpForStopAnimating;
- (void)_clearPretiledImageCacheForImage:(id)arg1;
- (void)_configureForLayeredImage:(id)arg1;
- (id)_contentsMultiplyColorForEffectiveTintColor:(id)arg1;
- (id)_currentAnimationKeyframeImage;
- (id)_currentHighlightedImage;
- (id)_currentImage;
- (id)_decompressingImageForType:(unsigned long long)arg1;
- (long long)_defaultRenderingMode;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (bool)_displayImageAsLayered:(id)arg1;
- (void)_drawImageEffectsForImage:(id)arg1 inRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 suppressColor:(bool)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsetsForEffects;
- (bool)_edgeInsetsForEffectsAreValid;
- (id)_effectiveTintColorWithImage:(id)arg1;
- (id)_existingOverlayView;
- (id)_generateBackdropMaskImage;
- (bool)_getDrawModeCompositeOperation:(int*)arg1 whiteComponent:(double*)arg2 drawingAlpha:(double*)arg3;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_invalidateTemplateSettings;
- (id)_layeredImageContainer;
- (double)_layeredImageCornerRadius;
- (bool)_masksTemplateImages;
- (bool)_needsImageEffectsForImage:(id)arg1;
- (bool)_needsImageEffectsForImage:(id)arg1 suppressColorizing:(bool)arg2;
- (bool)_recomputePretilingState;
- (void)_resolveImageForTrait:(id)arg1;
- (void)_setAnimatesContents:(bool)arg1;
- (void)_setDecompressingImage:(id)arg1 forType:(unsigned long long)arg2;
- (void)_setDefaultRenderingMode:(long long)arg1;
- (void)_setEdgeInsetsForEffectsAreValid:(bool)arg1;
- (bool)_setImageViewContents:(id)arg1;
- (void)_setLayeredImageContainer:(id)arg1;
- (void)_setLayeredImageCornerRadius:(double)arg1;
- (void)_setMasksTemplateImages:(bool)arg1;
- (void)_setOverlayContentView:(id)arg1;
- (void)_setTemplateImageRenderingEffects:(unsigned long long)arg1;
- (void)_setViewGeometry:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forMetric:(int)arg2;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (bool)_shouldDrawImage:(id)arg1;
- (bool)_shouldTreatImageAsTemplate:(id)arg1;
- (void)_teardownLayeredImage;
- (unsigned long long)_templateImageRenderingEffects;
- (bool)_templateSettingsAreInvalid;
- (void)_templateSettingsDidChange;
- (void)_updateImageViewForOldImage:(id)arg1 newImage:(id)arg2;
- (void)_updateLayerContentsForCIImageBackedImage:(id)arg1;
- (void)_updateLayeredImageIsFocusedWithFocusedView:(id)arg1 focusAnimationCoordinator:(id)arg2;
- (void)_updateMasking;
- (void)_updatePretiledImageCacheForImage:(id)arg1;
- (void)_updateState;
- (void)_updateTemplateProperties;
- (bool)adjustsImageSizeForAccessibilityContentSizeCategory;
- (bool)adjustsImageWhenAncestorFocused;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (double)animationDuration;
- (id)animationImages;
- (long long)animationRepeatCount;
- (void)dealloc;
- (void)decodeRestorableStateWithCoder:(id)arg1;
- (unsigned long long)defaultAccessibilityTraits;
- (int)drawMode;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)focusedFrameGuide;
- (id)highlightedAnimationImages;
- (id)highlightedImage;
- (id)image;
- (struct CGImage { }*)imageRef;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithImage:(id)arg1;
- (id)initWithImage:(id)arg1 highlightedImage:(id)arg2;
- (bool)isAccessibilityElementByDefault;
- (bool)isAnimating;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isHighlighted;
- (void)layoutSubviews;
- (bool)masksFocusEffectToContents;
- (id)overlayContentView;
- (void)setAdjustsImageSizeForAccessibilityContentSizeCategory:(bool)arg1;
- (void)setAdjustsImageWhenAncestorFocused:(bool)arg1;
- (void)setAnimating:(bool)arg1;
- (void)setAnimationDuration:(double)arg1;
- (void)setAnimationImages:(id)arg1;
- (void)setAnimationRepeatCount:(long long)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCGImageRef:(struct CGImage { }*)arg1;
- (void)setContentScaleFactor:(double)arg1;
- (void)setDrawMode:(int)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setHighlightedAnimationImages:(id)arg1;
- (void)setHighlightedImage:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setMasksFocusEffectToContents:(bool)arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (void)setTranslatesAutoresizingMaskIntoConstraints:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)startAnimating;
- (void)stopAnimating;
- (void)tintColorDidChange;
- (void)traitCollectionDidChange:(id)arg1;
- (bool)useBlockyMagnificationInClassic;

// Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI

- (id)pu_extractPlayOverlayBackgroundImageFromCenter:(struct CGPoint { double x1; double x2; })arg1 asynchronously:(bool)arg2 handler:(id /* block */)arg3;

// Image: /System/Library/PrivateFrameworks/MaterialKit.framework/MaterialKit

- (void)mt_applyVibrantStyling:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NanoMediaBridgeUI.framework/NanoMediaBridgeUI

- (id)_imageFromImage:(id)arg1 scaledToSize:(struct CGSize { double x1; double x2; })arg2;
- (void)setArtworkCatalog:(id)arg1 withPlaceholderImage:(id)arg2 withDesiredSize:(struct CGSize { double x1; double x2; })arg3;

// Image: /System/Library/PrivateFrameworks/NewsUI.framework/NewsUI

- (void)nu_crossFadeViewClearVisibleState;
- (void)nu_crossFadeViewSetValue:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NotesUI.framework/NotesUI

- (void)ic_enableLetterpressIfSupported;

// Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRect;
- (struct CGSize { double x1; double x2; })alignmentSize;
- (void)setAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /System/Library/PrivateFrameworks/TouchML.framework/TouchML

+ (void)tmlLoadCategory;

- (void)tmlTraitCollectionDidChange:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
