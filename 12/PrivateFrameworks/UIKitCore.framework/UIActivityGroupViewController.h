<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIActivityGroupViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIActivityGroupViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIActivityGroupViewController : UICollectionViewController <UICollectionViewDataSourcePrefetching, UIGestureRecognizerDelegate, _UIActivityGroupViewDelegateFlowLayout> {
    NSArray * _activities;
    long long  _activityCategory;
    bool  _activityIndexDidChangeWhileDragging;
    bool  _allowsUserCustomization;
    bool  _darkStyleOnLegacyApp;
    <UIActivityGroupViewControllerDataSource> * _dataSource;
    <UIActivityGroupViewControllerDelegate> * _delegate;
    UILongPressGestureRecognizer * _editingGestureRecognizer;
    bool  _embedded;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _externalSafeInset;
    bool  _hasActivities;
    NSIndexPath * _indexPathForMenuActivity;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialDraggingLocation;
    bool  _picker;
    _UIPlaceholderActivity * _placeholderGroupActivity;
    _UIActivityUserDefaults * _userDefaults;
    _UIUserDefaultsActivity * _userDefaultsActivity;
    NSArray * _visibleActivities;
}

@property (nonatomic, copy) NSArray *activities;
@property (nonatomic) long long activityCategory;
@property (nonatomic) bool activityIndexDidChangeWhileDragging;
@property (nonatomic) bool allowsUserCustomization;
@property (nonatomic) bool darkStyleOnLegacyApp;
@property (nonatomic) <UIActivityGroupViewControllerDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <UIActivityGroupViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UILongPressGestureRecognizer *editingGestureRecognizer;
@property (getter=isEmbedded, nonatomic) bool embedded;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } externalSafeInset;
@property (nonatomic) bool hasActivities;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSIndexPath *indexPathForMenuActivity;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialDraggingLocation;
@property (nonatomic, readonly) bool isPlaceholderGroup;
@property (getter=isPicker, nonatomic) bool picker;
@property (nonatomic, retain) _UIPlaceholderActivity *placeholderGroupActivity;
@property (readonly) Class superclass;
@property (nonatomic, retain) _UIActivityUserDefaults *userDefaults;
@property (nonatomic, retain) _UIUserDefaultsActivity *userDefaultsActivity;
@property (nonatomic, copy) NSArray *visibleActivities;

- (void).cxx_destruct;
- (void)_dismissPresentedMenuControllers;
- (void)_performHideActivityForMenuController:(id)arg1;
- (void)_setActivities:(id)arg1 animated:(bool)arg2;
- (void)_setVisibleActivities:(id)arg1 animated:(bool)arg2;
- (id)_titleTextForActivity:(id)arg1;
- (void)_updateItemSizeIfNeeded;
- (void)_updateVisibleActivitiesAnimated:(bool)arg1;
- (id)activities;
- (long long)activityCategory;
- (id)activityForItemAtIndexPath:(id)arg1;
- (id)activityGroupViewLayout;
- (bool)activityIndexDidChangeWhileDragging;
- (void)activityUserDefaultsDidChange:(id)arg1;
- (bool)allowsUserCustomization;
- (bool)canBecomeFirstResponder;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 layout:(id)arg2 moveItemAtIndexPath:(id)arg3 toIndexPath:(id)arg4;
- (id)collectionView:(id)arg1 layout:(id)arg2 needsContainerViewForDraggingItemAtIndexPath:(id)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 preferredSizeForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)collectionView:(id)arg1 prefetchItemsAtIndexPaths:(id)arg2;
- (bool)collectionView:(id)arg1 shouldHighlightItemAtIndexPath:(id)arg2;
- (bool)collectionView:(id)arg1 shouldSelectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 willDisplayCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (bool)darkStyleOnLegacyApp;
- (id)dataSource;
- (void)dealloc;
- (id)delegate;
- (id)editingGestureRecognizer;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })externalSafeInset;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleEditingGesture:(id)arg1;
- (bool)hasActivities;
- (void)hideItemAtIndexPath:(id)arg1;
- (void)ignoreUserDefaultsChangesWhileUsingBlock:(id /* block */)arg1;
- (id)indexPathForMenuActivity;
- (id)initPlaceholderGroupWithActivityCategory:(long long)arg1;
- (id)initWithActivityCategory:(long long)arg1 userDefaults:(id)arg2;
- (id)initWithActivityCategory:(long long)arg1 userDefaults:(id)arg2 userDefaultsIdentifier:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)initWithCollectionViewLayout:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (struct CGPoint { double x1; double x2; })initialDraggingLocation;
- (bool)isEmbedded;
- (bool)isPicker;
- (bool)isPlaceholderGroup;
- (id)placeholderGroupActivity;
- (void)registerClassForContentSizeCategoryChanges;
- (void)registerForActivityUserDefaultsChanges;
- (void)setActivities:(id)arg1;
- (void)setActivities:(id)arg1 animated:(bool)arg2;
- (void)setActivityCategory:(long long)arg1;
- (void)setActivityIndexDidChangeWhileDragging:(bool)arg1;
- (void)setAllowsUserCustomization:(bool)arg1;
- (void)setDarkStyleOnLegacyApp:(bool)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setEditingGestureRecognizer:(id)arg1;
- (void)setEmbedded:(bool)arg1;
- (void)setExternalSafeInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setHasActivities:(bool)arg1;
- (void)setIndexPathForMenuActivity:(id)arg1;
- (void)setInitialDraggingLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPicker:(bool)arg1;
- (void)setPlaceholderGroupActivity:(id)arg1;
- (void)setUserDefaults:(id)arg1;
- (void)setUserDefaultsActivity:(id)arg1;
- (void)setVisibleActivities:(id)arg1;
- (id)targetIndexPathForMoveFromRowAtIndexPath:(id)arg1 toProposedIndexPath:(id)arg2;
- (void)traitCollectionDidChange:(id)arg1;
- (void)unregisterForActivityUserDefaultsChanges;
- (id)userDefaults;
- (id)userDefaultsActivity;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillDisappear:(bool)arg1;
- (id)visibleActivities;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
