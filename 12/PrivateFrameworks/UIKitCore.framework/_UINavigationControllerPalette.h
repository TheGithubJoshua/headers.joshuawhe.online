<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UINavigationControllerPalette.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UINavigationControllerPalette.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UINavigationControllerPalette : UIView {
    NSArray * __backgroundConstraints;
    NSArray * __constraints;
    double  __heightWhenUnscrolled;
    bool  __paletteOverridesPinningBar;
    bool  __palettePinningBarHidden;
    id  __pinningBar;
    struct CGSize { 
        double width; 
        double height; 
    }  __size;
    UIViewController * __unpinnedController;
    long long  __visibilityState;
    double  _backgroundUnderlapHeight;
    _UIBarBackground * _backgroundView;
    unsigned long long  _boundaryEdge;
    UINavigationController * _navController;
    struct { 
        unsigned int isAttached : 1; 
        unsigned int attachmentIsChanging : 1; 
        unsigned int restartPaletteTransitionIfNecessary : 1; 
        unsigned int pinned : 1; 
        unsigned int pinningBarShadowIsHidden : 1; 
        unsigned int paletteShadowIsHidden : 1; 
        unsigned int shouldHideWhenScrolling : 1; 
        unsigned int pinningBarShadowWasHidden : 1; 
    }  _paletteFlags;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _preferredContentInsets;
    bool  _visibleWhenPinningBarIsHidden;
}

@property (getter=_attachmentIsChanging, nonatomic, readonly) bool _attachmentIsChanging;
@property (setter=_setBackgroundConstraints:, nonatomic, retain) NSArray *_backgroundConstraints;
@property (setter=_setBackgroundView:, nonatomic, retain) UIView *_backgroundView;
@property (setter=_setConstraints:, nonatomic, retain) NSArray *_constraints;
@property (setter=_setHeightWhenUnscrolled:, nonatomic) double _heightWhenUnscrolled;
@property (setter=_setPaletteOverridesPinningBar:, nonatomic) bool _paletteOverridesPinningBar;
@property (getter=_isPalettePinningBarHidden, setter=_setPalettePinningBarHidden:, nonatomic) bool _palettePinningBarHidden;
@property (setter=_setPinningBar:, nonatomic) id _pinningBar;
@property (setter=_setRestartPaletteTransitionIfNecessary:, nonatomic) bool _restartPaletteTransitionIfNecessary;
@property (setter=_setShouldHideWhenScrolling:, nonatomic) bool _shouldHideWhenScrolling;
@property (setter=_setSize:, nonatomic) struct CGSize { double x1; double x2; } _size;
@property (nonatomic) UIViewController *_unpinnedController;
@property (setter=_setVisibilityState:, nonatomic) long long _visibilityState;
@property (nonatomic, readonly) unsigned long long boundaryEdge;
@property (nonatomic, readonly) UINavigationController *navController;
@property (nonatomic) bool paletteShadowIsHidden;
@property (getter=isPinned, nonatomic) bool pinned;
@property (nonatomic) bool pinningBarShadowIsHidden;
@property (nonatomic) bool pinningBarShadowWasHidden;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } preferredContentInsets;
@property (getter=isVisibleWhenPinningBarIsHidden, nonatomic) bool visibleWhenPinningBarIsHidden;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

- (id)_attachedPinningTopBar;
- (bool)_attachmentIsChanging;
- (id)_backgroundConstraints;
- (id)_backgroundView;
- (void)_configureConstraintsForBackground:(id)arg1;
- (void)_configurePaletteConstraintsForBoundary;
- (id)_constraints;
- (void)_disableConstraints;
- (void)_enableConstraints;
- (double)_heightWhenUnscrolled;
- (id)_initWithNavigationController:(id)arg1 forEdge:(unsigned long long)arg2;
- (bool)_isPalettePinningBarHidden;
- (bool)_paletteOverridesPinningBar;
- (id)_pinningBar;
- (void)_propagateBackgroundToContents;
- (void)_resetConstraintConstants:(double)arg1;
- (void)_resetHeightConstraintConstant;
- (void)_resetVisibilityStateIfNecessary;
- (bool)_restartPaletteTransitionIfNecessary;
- (void)_setAttached:(bool)arg1 didComplete:(bool)arg2;
- (void)_setAttachmentIsChanging:(bool)arg1;
- (void)_setBackgroundConstraints:(id)arg1;
- (void)_setBackgroundView:(id)arg1;
- (void)_setConstraints:(id)arg1;
- (void)_setHeightWhenUnscrolled:(double)arg1;
- (void)_setLeftConstraintConstant:(double)arg1;
- (void)_setPaletteOverridesPinningBar:(bool)arg1;
- (void)_setPalettePinningBarHidden:(bool)arg1;
- (void)_setPinningBar:(id)arg1;
- (void)_setRestartPaletteTransitionIfNecessary:(bool)arg1;
- (void)_setShouldHideWhenScrolling:(bool)arg1;
- (void)_setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setTopConstraintConstant:(double)arg1;
- (void)_setVisibilityState:(long long)arg1;
- (void)_setVisualAltitude:(double)arg1;
- (void)_setVisualAltitudeBias:(struct CGSize { double x1; double x2; })arg1;
- (void)_setupBackgroundViewIfNecessary;
- (bool)_shouldHideWhenScrolling;
- (bool)_shouldUpdateBackground;
- (struct CGSize { double x1; double x2; })_size;
- (bool)_supportsSpecialSearchBarTransitions;
- (id)_unpinnedController;
- (void)_updateBackgroundConstraintsIfNecessary;
- (void)_updateBackgroundView;
- (void)_updateLayoutForCurrentConfiguration;
- (long long)_visibilityState;
- (unsigned long long)boundaryEdge;
- (void)dealloc;
- (void)didMoveToSuperview;
- (bool)isAttached;
- (bool)isPinned;
- (bool)isVisibleWhenPinningBarIsHidden;
- (id)navController;
- (bool)paletteIsHidden;
- (bool)paletteShadowIsHidden;
- (bool)pinningBarShadowIsHidden;
- (bool)pinningBarShadowWasHidden;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })preferredContentInsets;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 isAnimating:(bool)arg2;
- (void)setPaletteShadowIsHidden:(bool)arg1;
- (void)setPinned:(bool)arg1;
- (void)setPinningBarShadowIsHidden:(bool)arg1;
- (void)setPinningBarShadowWasHidden:(bool)arg1;
- (void)setPreferredContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setVisibleWhenPinningBarIsHidden:(bool)arg1;
- (void)set_unpinnedController:(id)arg1;

// Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit

- (void)__ck_setPaletteFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

// Image: /System/Library/PrivateFrameworks/StoreKitUI.framework/StoreKitUI

- (void)SKUI_beginHidingPaletteShadow;
- (void)SKUI_endHidingPaletteShadow;
- (void)resetBackgroundConstraints;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
