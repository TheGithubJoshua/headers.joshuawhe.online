<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UITableViewRowData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UITableViewRowData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UITableViewRowData : NSObject <NSCopying> {
    double  _defaultSectionFooterHeight;
    double  _defaultSectionHeaderHeight;
    NSIndexPath * _draggedIndexPath;
    double  _draggedRowHeight;
    NSIndexPath * _gapIndexPath;
    double  _gapRowHeight;
    UITableViewHeaderFooterView * _headerFooterViewUsedForMeasurements;
    double  _heightForTableHeaderViewHiding;
    double  _minimumRowHeight;
    long long  _numSections;
    NSIndexPath * _reorderedIndexPath;
    struct { 
        unsigned int tableHeaderHeightValid : 1; 
        unsigned int tableFooterHeightValid : 1; 
        unsigned int tableSidePaddingValid : 1; 
        unsigned int usesVariableMargins : 1; 
        unsigned int pinsTableHeaderView : 1; 
    }  _rowDataFlags;
    double  _rowSpacing;
    id * _sectionRowData;
    long long  _sectionRowDataCapacity;
    double  _tableBottomPadding;
    double  _tableFooterHeight;
    double  _tableHeaderHeight;
    double  _tableSidePadding;
    double  _tableTopPadding;
    <UITable_RowDataSource> * _tableView;
    double  _tableViewWidth;
}

@property (nonatomic, readonly) double defaultSectionFooterHeight;
@property (nonatomic, readonly) double defaultSectionHeaderHeight;
@property (nonatomic, retain) NSIndexPath *draggedIndexPath;
@property (nonatomic) double draggedRowHeight;
@property (nonatomic, retain) NSIndexPath *gapIndexPath;
@property (nonatomic) double gapRowHeight;
@property (nonatomic, readonly) double heightForAutohidingTableHeaderView;
@property (nonatomic, readonly) double heightForTableHeaderViewHiding;
@property (nonatomic) double minimumRowHeight;
@property (nonatomic) bool pinsTableHeaderView;
@property (nonatomic, retain) NSIndexPath *reorderedIndexPath;
@property (nonatomic) double rowSpacing;
@property (nonatomic) double tableBottomPadding;
@property (nonatomic) double tableSidePadding;
@property (nonatomic) double tableTopPadding;
@property (nonatomic, readonly) NSIndexPath *temporarilyDeletedIndexPathBeingReordered;
@property (nonatomic) bool usesVariableMargins;

- (void).cxx_destruct;
- (void)_assertValidIndexPath:(id)arg1 allowEmptySection:(bool)arg2;
- (double)_dropTargetGapHeightForIndexPath:(id)arg1;
- (void)_ensureSectionOffsetIsValidForSection:(long long)arg1;
- (id)_nextIndexPathOrSectionHeader:(id)arg1;
- (id)_previousIndexPathOrSectionHeader:(id)arg1;
- (long long)_sectionForPoint:(struct CGPoint { double x1; double x2; })arg1 beginningWithSection:(long long)arg2 numberOfSections:(long long)arg3;
- (long long)_sectionRowForGlobalRow:(long long)arg1 inSection:(long long*)arg2;
- (void)_updateNumSections;
- (void)_updateSectionRowDataArrayForNumSections:(long long)arg1;
- (void)_updateTopAndBottomPadding;
- (void)addDropTargetGapAtIndexPath:(id)arg1;
- (void)addGapAtIndexPath:(id)arg1;
- (void)adjustSectionOffsetsBeginningAtIndex:(long long)arg1 count:(long long)arg2 delta:(double)arg3 rowDelta:(long long)arg4;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (double)defaultSectionFooterHeight;
- (double)defaultSectionHeaderHeight;
- (id)draggedIndexPath;
- (double)draggedRowHeight;
- (long long)dropLocationForPoint:(struct CGPoint { double x1; double x2; })arg1 atIndexPath:(id)arg2 withInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;
- (void)ensureAllSectionsAreValid;
- (bool)ensureHeightsFaultedInForScrollToIndexPath:(id)arg1 withScrollPosition:(long long)arg2 boundsHeight:(double)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })floatingRectForFooterInSection:(long long)arg1 visibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 heightCanBeGuessed:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })floatingRectForHeaderInSection:(long long)arg1 visibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 heightCanBeGuessed:(bool)arg3;
- (long long)footerAlignmentForSection:(long long)arg1;
- (id)gapIndexPath;
- (double)gapRowHeight;
- (long long)globalRowForRowAtIndexPath:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })globalRowsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 canGuess:(bool)arg2;
- (bool)hasFooterForSection:(long long)arg1;
- (bool)hasHeaderForSection:(long long)arg1;
- (long long)headerAlignmentForSection:(long long)arg1;
- (double)heightForAutohidingTableHeaderView;
- (double)heightForFooterInSection:(long long)arg1 canGuess:(bool)arg2;
- (double)heightForHeaderInSection:(long long)arg1 canGuess:(bool)arg2;
- (double)heightForRow:(long long)arg1 inSection:(long long)arg2 canGuess:(bool)arg3;
- (double)heightForRow:(long long)arg1 inSection:(long long)arg2 canGuess:(bool)arg3 adjustForReorderedRow:(bool)arg4;
- (double)heightForSection:(long long)arg1;
- (double)heightForTable;
- (double)heightForTableFooterView;
- (double)heightForTableHeaderView;
- (double)heightForTableHeaderViewHiding;
- (id)indexPathForRowAtGlobalRow:(long long)arg1;
- (id)indexPathsForRowsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)indexPathsForRowsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 extraHitSpaceBetweenRows:(double)arg2;
- (id)initWithTableView:(id)arg1;
- (void)invalidateAllSectionOffsetsAndUpdatePadding;
- (void)invalidateAllSections;
- (void)invalidateSection:(long long)arg1;
- (double)maxFooterTitleWidthForSection:(long long)arg1;
- (double)maxHeaderTitleWidthForSection:(long long)arg1;
- (double)minimumRowHeight;
- (void)moveDropTargetGapToIndexPath:(id)arg1;
- (void)moveRowAtIndexPathFrom:(id)arg1 toIndexPath:(id)arg2;
- (long long)numberOfRows;
- (long long)numberOfRowsBeforeSection:(long long)arg1;
- (long long)numberOfRowsInSection:(long long)arg1;
- (long long)numberOfSections;
- (double)offsetForSection:(id)arg1;
- (bool)pinsTableHeaderView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForFooterInSection:(long long)arg1 heightCanBeGuessed:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForGap;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForGlobalRow:(long long)arg1 heightCanBeGuessed:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForHeaderInSection:(long long)arg1 heightCanBeGuessed:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForRow:(long long)arg1 inSection:(long long)arg2 heightCanBeGuessed:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForSection:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForTable;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForTableFooterView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForTableHeaderView;
- (void)removeDropTargetGap;
- (void)removeGap;
- (double)removeReorderedRowWithHeight:(double)arg1 atIndexPath:(id)arg2;
- (id)reorderedIndexPath;
- (void)restoreReorderedRowWithHeight:(double)arg1 atIndexPath:(id)arg2;
- (double)rowSpacing;
- (long long)sectionForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)sectionForSectionRowData:(id)arg1;
- (int)sectionLocationForReorderedRow:(long long)arg1 inSection:(long long)arg2;
- (int)sectionLocationForRow:(long long)arg1 inSection:(long long)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })sectionsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDraggedIndexPath:(id)arg1;
- (void)setDraggedRowHeight:(double)arg1;
- (void)setGapIndexPath:(id)arg1;
- (void)setGapRowHeight:(double)arg1;
- (void)setHeight:(double)arg1 forRowAtIndexPath:(id)arg2;
- (void)setHeightForTableHeaderViewHiding:(double)arg1;
- (void)setMinimumRowHeight:(double)arg1;
- (void)setPinsTableHeaderView:(bool)arg1;
- (void)setReorderedIndexPath:(id)arg1;
- (void)setRowSpacing:(double)arg1;
- (void)setTableBottomPadding:(double)arg1;
- (void)setTableSidePadding:(double)arg1;
- (void)setTableTopPadding:(double)arg1;
- (void)setUsesVariableMargins:(bool)arg1;
- (bool)shouldStripHeaderTopPaddingForSection:(long long)arg1;
- (double)tableBottomPadding;
- (void)tableFooterHeightDidChangeToHeight:(double)arg1;
- (void)tableHeaderHeightDidChangeToHeight:(double)arg1;
- (double)tableSidePadding;
- (double)tableTopPadding;
- (void)tableViewWidthDidChangeToWidth:(double)arg1;
- (id)targetIndexPathForPoint:(struct CGPoint { double x1; double x2; })arg1 adjustedForGap:(bool)arg2;
- (id)temporarilyDeletedIndexPathBeingReordered;
- (bool)usesVariableMargins;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
