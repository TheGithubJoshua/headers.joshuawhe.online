<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UICalloutView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UICalloutView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UICalloutView : UIControl {
    struct { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGPoint { 
            double x; 
            double y; 
        } offset; 
        int position; 
        struct CGPoint { 
            double x; 
            double y; 
        } desiredPoint; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } desiredBounds; 
    }  _anchor;
    UIImageView * _bottomAnchor;
    id  _delegate;
    NSMutableArray * _fadeInViews;
    NSMutableArray * _fadeOutViews;
    struct { 
        unsigned int animated : 1; 
        unsigned int didMoveCalled : 1; 
        unsigned int hasPendingAnimatedLayout : 1; 
        unsigned int canAnchorFromBottom : 1; 
        unsigned int reserved : 28; 
    }  _flags;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    NSTimer * _layoutAnimationTimer;
    UIImageView * _leftBackground;
    UIImageView * _leftCap;
    UIView * _leftView;
    double  _maximumWidth;
    UIImageView * _rightBackground;
    UIImageView * _rightCap;
    UIView * _rightView;
    UILabel * _subtitle;
    UILabel * _temporary;
    UILabel * _title;
    UIImageView * _topAnchor;
}

@property (nonatomic, readonly) double UICalloutViewButtonPadding;
@property (nonatomic, readonly) double UICalloutViewCapHeight;
@property (nonatomic, readonly) double UICalloutViewCapPaddingTop;
@property (nonatomic, readonly) double UICalloutViewHorizontalMargin;
@property (nonatomic, readonly) double UICalloutViewHorizontalPadding;
@property (nonatomic, readonly) double UICalloutViewLayoutDuration;
@property (nonatomic, readonly) double UICalloutViewMinimumWidth;
@property (nonatomic, readonly) double UICalloutViewVerticalMargin;
@property (nonatomic) bool canAnchorFromBottom;
@property (nonatomic, retain) UIView *leftView;
@property (nonatomic) double maximumWidth;
@property (nonatomic, retain) UIView *rightView;
@property (nonatomic) long long subtitleLineBreakMode;
@property (nonatomic) long long subtitleTextAlignment;
@property (nonatomic) long long titleLineBreakMode;
@property (nonatomic) long long titleTextAlignment;

+ (id)_backgroundImage;
+ (id)_bottomAnchorImage;
+ (id)_leftCapImage;
+ (id)_rightCapImage;
+ (id)_topAnchorImage;
+ (double)defaultHeight;
+ (id)sharedCalloutView;

- (void).cxx_destruct;
- (double)UICalloutViewButtonPadding;
- (double)UICalloutViewCapHeight;
- (double)UICalloutViewCapPaddingTop;
- (double)UICalloutViewHorizontalMargin;
- (double)UICalloutViewHorizontalPadding;
- (double)UICalloutViewLayoutDuration;
- (double)UICalloutViewMinimumWidth;
- (double)UICalloutViewVerticalMargin;
- (void)_fadeViewsIn:(bool)arg1;
- (void)_layoutAnimation;
- (void)_layoutSubviews:(bool)arg1;
- (void)_markDidMoveCalled;
- (void)_scheduleLayoutAnimation;
- (void)_scheduleViewToFadeIn:(id)arg1;
- (void)_scheduleViewToFadeOut:(id)arg1;
- (void)_setLayoutAnimationTimer:(id)arg1;
- (void)_setLeftView:(id)arg1;
- (void)_setOriginForScale:(double)arg1;
- (void)_setRightView:(id)arg1;
- (void)addTarget:(id)arg1 action:(SEL)arg2;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (void)animationDidStop:(id)arg1 finished:(id)arg2 context:(id)arg3;
- (bool)canAnchorFromBottom;
- (void)completeBounceAnimation;
- (void)dealloc;
- (id)delegate;
- (void)fadeOutWithDuration:(double)arg1;
- (void)getActualAnchorPoint:(struct CGPoint { double x1; double x2; }*)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 position:(int*)arg3 forDesiredAnchorPoint:(struct CGPoint { double x1; double x2; })arg4 boundaryRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)leftView;
- (double)maximumWidth;
- (struct CGPoint { double x1; double x2; })offset;
- (void)removeTarget:(id)arg1;
- (id)rightView;
- (void)setAnchorPoint:(struct CGPoint { double x1; double x2; })arg1 boundaryRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 animate:(bool)arg3;
- (void)setCanAnchorFromBottom:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLeftView:(id)arg1;
- (void)setLeftView:(id)arg1 animated:(bool)arg2;
- (void)setMaximumWidth:(double)arg1;
- (void)setOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRightView:(id)arg1;
- (void)setRightView:(id)arg1 animated:(bool)arg2;
- (void)setSubtitle:(id)arg1;
- (void)setSubtitle:(id)arg1 animated:(bool)arg2;
- (void)setSubtitleLineBreakMode:(long long)arg1;
- (void)setSubtitleTextAlignment:(long long)arg1;
- (void)setTemporaryTitle:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleLineBreakMode:(long long)arg1;
- (void)setTitleTextAlignment:(long long)arg1;
- (id)subtitle;
- (long long)subtitleLineBreakMode;
- (long long)subtitleTextAlignment;
- (id)temporaryTitle;
- (id)title;
- (long long)titleLineBreakMode;
- (long long)titleTextAlignment;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
