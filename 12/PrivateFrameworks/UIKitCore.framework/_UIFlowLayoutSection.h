<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIFlowLayoutSection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIFlowLayoutSection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIFlowLayoutSection : NSObject {
    double  _actualGap;
    double  _beginMargin;
    double  _endMargin;
    bool  _fixedItemSize;
    double  _footerDimension;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _footerFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frame;
    double  _headerDimension;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _headerFrame;
    double  _horizontalInterstice;
    long long  _indexOfIncompleteRow;
    NSMutableSet * _invalidatedIndexPaths;
    bool  _isValid;
    struct CGSize { 
        double width; 
        double height; 
    }  _itemSize;
    NSMutableArray * _items;
    long long  _itemsByRowCount;
    long long  _itemsCount;
    double  _lastRowActualGap;
    double  _lastRowBeginMargin;
    double  _lastRowEndMargin;
    bool  _lastRowIncomplete;
    _UIFlowLayoutInfo * _layoutInfo;
    double  _otherMargin;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _rectToKeepValid;
    struct { 
        int commonRowHorizontalAlignment; 
        int lastRowHorizontalAlignment; 
        int rowVerticalAlignment; 
    }  _rowAlignmentOptions;
    NSMutableArray * _rows;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _sectionMargins;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _validItemRange;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _validRect;
    double  _verticalInterstice;
}

@property (nonatomic, readonly) double actualGap;
@property (nonatomic, readonly) double beginMargin;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } effectiveFooterFrameWithSectionMarginsApplied;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } effectiveHeaderFrameWithSectionMarginsApplied;
@property (nonatomic, readonly) double endMargin;
@property (nonatomic) bool fixedItemSize;
@property (nonatomic, readonly) double footerDimension;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } footerFrame;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frame;
@property (nonatomic, readonly) double headerDimension;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } headerFrame;
@property (nonatomic) double horizontalInterstice;
@property (nonatomic, readonly) long long indexOfIncompleteRow;
@property (nonatomic, readonly) NSArray *invalidatedIndexPaths;
@property (nonatomic) struct CGSize { double x1; double x2; } itemSize;
@property (nonatomic, readonly) NSMutableArray *items;
@property (nonatomic, readonly) long long itemsByRowCount;
@property (nonatomic) long long itemsCount;
@property (nonatomic, readonly) double lastRowActualGap;
@property (nonatomic, readonly) double lastRowBeginMargin;
@property (nonatomic, readonly) double lastRowEndMargin;
@property (nonatomic, readonly) bool lastRowIncomplete;
@property (nonatomic) _UIFlowLayoutInfo *layoutInfo;
@property (nonatomic, readonly) double otherMargin;
@property (nonatomic) struct { int x1; int x2; int x3; } rowAlignmentOptions;
@property (nonatomic, readonly) NSMutableArray *rows;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } sectionMargins;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } validItemRange;
@property (nonatomic) double verticalInterstice;

- (void).cxx_destruct;
- (double)actualGap;
- (void)addInvalidatedIndexPath:(id)arg1;
- (id)addItem;
- (id)addRowAtEnd:(bool)arg1;
- (double)beginMargin;
- (void)computeLayout;
- (void)computeLayoutInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forSection:(long long)arg2 invalidating:(bool)arg3 invalidationContext:(id)arg4;
- (void)computeLayoutValidatingForwardForIndexPath:(id)arg1;
- (id)copyFromLayoutInfo:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectiveFooterFrameWithSectionMarginsApplied;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })effectiveHeaderFrameWithSectionMarginsApplied;
- (double)endMargin;
- (long long)estimatedIndexOfItemAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)fixedItemSize;
- (double)footerDimension;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })footerFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForItemAtIndexPath:(id)arg1;
- (double)headerDimension;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })headerFrame;
- (double)horizontalInterstice;
- (long long)indexOfIncompleteRow;
- (id)init;
- (void)invalidate;
- (id)invalidatedIndexPaths;
- (struct CGSize { double x1; double x2; })itemSize;
- (id)items;
- (long long)itemsByRowCount;
- (long long)itemsCount;
- (double)lastRowActualGap;
- (double)lastRowBeginMargin;
- (double)lastRowEndMargin;
- (bool)lastRowIncomplete;
- (id)layoutInfo;
- (void)logInvalidSizes;
- (void)logInvalidSizesForHorizontalDirection:(bool)arg1 warnAboutDelegateValues:(bool)arg2;
- (double)otherMargin;
- (struct { int x1; int x2; int x3; })rowAlignmentOptions;
- (id)rows;
- (id)rowsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })sectionMargins;
- (void)setEstimatedSize:(struct CGSize { double x1; double x2; })arg1 forSection:(long long)arg2;
- (void)setFixedItemSize:(bool)arg1;
- (void)setFooterDimension:(double)arg1 forSection:(long long)arg2;
- (void)setFooterFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHeaderDimension:(double)arg1 forSection:(long long)arg2;
- (void)setHeaderFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHorizontalInterstice:(double)arg1;
- (void)setItemSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setItemsCount:(long long)arg1;
- (void)setLayoutInfo:(id)arg1;
- (void)setRowAlignmentOptions:(struct { int x1; int x2; int x3; })arg1;
- (void)setSectionMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1 forItemAtIndexPath:(id)arg2 invalidationContext:(id)arg3;
- (void)setVerticalInterstice:(double)arg1;
- (void)sizeChangedForItem:(id)arg1 atIndexPath:(id)arg2 inRow:(id)arg3;
- (id)snapshot;
- (void)updateEstimatedSizeForSection:(long long)arg1;
- (void)updateSize:(struct CGSize { double x1; double x2; })arg1 forItemAtIndexPath:(id)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })validItemRange;
- (double)verticalInterstice;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
