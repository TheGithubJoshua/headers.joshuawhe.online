<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIViewInProcessAnimationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIViewInProcessAnimationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIViewInProcessAnimationManager : NSObject <_UIViewInProcessAnimationManagerDriver> {
    bool  _advancingOnCommitDisabled;
    NSThread * _animationThread;
    NSObject<OS_dispatch_semaphore> * _animationThreadKeepAliveSemaphore;
    NSRunLoop * _animationThreadRunLoop;
    bool  _animationsShouldCompleteImmediately;
    bool  _animationsSuspended;
    <_UIViewInProcessAnimationManagerDriver> * _animatorAdvancer;
    NSObject<OS_dispatch_queue> * _backlightQueue;
    _UIAppCACommitFuture * _caCommitFuture;
    bool  _commitsSynchronously;
    NSThread * _currentTickThread;
    double  _deltaTime;
    CADisplayLink * _displayLink;
    NSObject<OS_dispatch_queue> * _displayLinkAccessQueue;
    bool  _displayLinkInvalidated;
    NSMutableArray * _entries;
    NSObject<OS_dispatch_queue> * _entryLockingQueue;
    unsigned long long  _executionMode;
    NSMutableArray * _newlyAddedEntries;
    bool  _performScheduledBlocksManually;
    NSMutableArray * _postTickBlocks;
    NSObject<OS_dispatch_semaphore> * _postTicksDelaySemaphore;
    NSMutableArray * _preCommitBlocks;
    NSMutableArray * _preExitBlocks;
    NSHashTable * _presentationGroups;
    NSMutableArray * _presentationModifierGroupRequestBlocks;
    unsigned long long  _presentationModifierRequestCount;
    bool  _processingPreCommits;
    double  _refreshInterval;
    int  _screenDimmingNotificationToken;
    bool  _screenIsOff;
    bool  _skipNextFrame;
    NSObject<OS_dispatch_queue> * _tickPrepQueue;
    NSObject<OS_dispatch_queue> * _tickQueue;
    double  _time;
    NSObject<OS_dispatch_queue> * _timerQueue;
    NSObject<OS_dispatch_source> * _timerSource;
    bool  _usesMainThreadExecution;
    bool  _waitingForAnimatorAdvancerToStart;
}

@property (nonatomic) bool advancingOnCommitDisabled;
@property NSThread *animationThread;
@property (retain) NSObject<OS_dispatch_semaphore> *animationThreadKeepAliveSemaphore;
@property NSRunLoop *animationThreadRunLoop;
@property (nonatomic) bool commitsSynchronously;
@property NSThread *currentTickThread;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long executionMode;
@property (readonly) unsigned long long hash;
@property (setter=_setPerformScheduledBlocksManually:, nonatomic) bool performScheduledBlocksManually;
@property (readonly) Class superclass;
@property (nonatomic) bool usesMainThreadExecution;

+ (void)_cancelPresentationModifierGroupRequest:(id)arg1;
+ (void)_dispatchAsyncOntoMainBeforeExit:(id /* block */)arg1;
+ (id)_requestPresentationModifierGroup:(id /* block */)arg1;
+ (void)_setExternalAnimationDriver:(id)arg1;
+ (id)sharedManager;

- (void).cxx_destruct;
- (void)_advanceWithTime:(double)arg1;
- (void)_applicationBecameActive;
- (void)_applicationResignedActive;
- (void)_cancelAllAnimationsImmediately;
- (void)_cancelPresentationModifierGroupRequest:(id)arg1;
- (void)_commitSynchronously;
- (void)_displayLinkFire:(id)arg1;
- (bool)_isInvalidated;
- (void)_performTick:(double)arg1 cancel:(bool)arg2 force:(bool)arg3 eventName:(id)arg4 entry:(id /* block */)arg5 exit:(id /* block */)arg6;
- (void)_performWhenInProcessAnimationsTransactionCommits:(id /* block */)arg1;
- (void)_prepareForTick;
- (void)_processEntriesCollectingEntriesToRemove:(id)arg1 cancel:(bool)arg2;
- (void)_processPostTicks;
- (void)_processPostTicksDelayIfNecessary:(double)arg1;
- (void)_processPreCommitBlocks;
- (void)_processPresentationModifierRequestsAndFlush;
- (void)_processTickExitRemovingEntries:(id)arg1;
- (void)_registerBacklightChangedNotification;
- (id)_requestPresentationModifierGroup:(id /* block */)arg1;
- (unsigned long long)_runPreCommitBlocks;
- (void)_setAnimationExecutionParameters;
- (void)_setCurrentMediaTime:(double)arg1;
- (void)_setPerformScheduledBlocksManually:(bool)arg1;
- (bool)_shouldKeepAnimationThreadAlive;
- (void)addEntry:(id /* block */)arg1;
- (bool)advancingOnCommitDisabled;
- (id)animationThread;
- (id)animationThreadKeepAliveSemaphore;
- (id)animationThreadRunLoop;
- (bool)commitsSynchronously;
- (id)currentTickThread;
- (void)dealloc;
- (unsigned long long)executionMode;
- (void)finishAdvancingAnimationManager;
- (id)init;
- (void)performAfterTick:(id /* block */)arg1;
- (void)performBeforeExiting:(id /* block */)arg1;
- (bool)performScheduledBlocksManually;
- (double)refreshInterval;
- (void)scheduleAnimatorAdvancerToStart;
- (void)setAdvancingOnCommitDisabled:(bool)arg1;
- (void)setAnimationThread:(id)arg1;
- (void)setAnimationThreadKeepAliveSemaphore:(id)arg1;
- (void)setAnimationThreadRunLoop:(id)arg1;
- (void)setCommitsSynchronously:(bool)arg1;
- (void)setCurrentTickThread:(id)arg1;
- (void)setExecutionMode:(unsigned long long)arg1;
- (void)setUsesMainThreadExecution:(bool)arg1;
- (void)startAdvancingAnimationManager:(id)arg1;
- (void)startAnimationAdvancerIfNeeded;
- (bool)usesMainThreadExecution;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
