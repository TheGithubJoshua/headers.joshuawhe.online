<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIFocusEventRecognizer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIFocusEventRecognizer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIFocusEventRecognizer : NSObject <UIGestureRecognizerDelegate, _UIFocusEnginePanGestureRecognizerDelegate, _UIFocusFastScrollingRecognizerDelegate> {
    CARInputDeviceTouchpad * _currentCarTouchpad;
    <_UIFocusEventRecognizerDelegate> * _delegate;
    bool  _enabled;
    _UIFocusFastScrollingRecognizer * _fastScrollingRecognizer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _firstMomentumTouchPoint;
    struct { 
        unsigned int isEligibleToCrossSpeedBump : 1; 
        unsigned int isContinuingTouchWithMomentum : 1; 
        unsigned int isPerformingJoystickRollback : 1; 
        unsigned int isJoystickInRepeatMode : 1; 
        unsigned int isPendingJoystickRepeat : 1; 
        unsigned int isFastScrolling : 1; 
        unsigned int shouldApplyAcceleration : 1; 
    }  _flags;
    unsigned long long  _focusUpdateCountSinceLastPanBegan;
    unsigned long long  _inputType;
    CADisplayLink * _joystickFocusDirectionDisplayLink;
    _UIFocusEngineJoystickGestureRecognizer * _joystickGestureRecognizer;
    NSTimer * _joystickModeExitTimer;
    NSTimer * _joystickModeRepeatTimer;
    long long  _joystickRepeatCount;
    unsigned long long  _joystickRepeatingHeading;
    double  _lastEdgeScrollEdgeValue;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastKnownTouchPoint;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastMomentumTouchPoint;
    UIScrollView * _lastScrolledScroll;
    CADisplayLink * _momentumDisplayLink;
    double  _momentumFriction;
    struct CGPoint { 
        double x; 
        double y; 
    }  _momentumVelocity;
    _UIFocusMotionEffectsController * _motionEffectsController;
    UIMoveEvent * _moveEvent;
    UIView * _owningView;
    _UIFocusEnginePanGestureRecognizer * _panGestureRecognizer;
    _UIFocusMovementInfo * _previousJoystickFocusMovementInfo;
    double  _previousJoystickFocusMovementTime;
    double  _previousJoystickRegionEntryTime;
    struct CGVector { 
        double dx; 
        double dy; 
    }  _progressAccumulator;
    NSArray * _remoteGestures;
    _UIFocusPressGestureRecognizer * _selectGestureRecognizer;
    CARSessionStatus * _sessionStatus;
    bool  _supportsFastScrolling;
    UITapGestureRecognizer * _tapGestureRecognizer;
    struct CGPoint { 
        double x; 
        double y; 
    }  _touchBeganPoint;
    UIView * _viewForTouchDeferredFocus;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <_UIFocusEventRecognizerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (readonly) unsigned long long hash;
@property (getter=_motionEffectsController, nonatomic, readonly) _UIFocusMotionEffectsController *motionEffectsController;
@property (getter=_moveEvent, setter=_setMoveEvent:, nonatomic, retain) UIMoveEvent *moveEvent;
@property (nonatomic, readonly) UIView *owningView;
@property (readonly) Class superclass;
@property (nonatomic) bool supportsFastScrolling;
@property (nonatomic) UIView *viewForTouchDeferredFocus;

- (void).cxx_destruct;
- (void)_addGestureRecognizers;
- (void)_continueTouchWithMomentum;
- (void)_createFastScrollingRecognizerIfNeeded;
- (bool)_didRecognizeFocusMovementRequest:(id)arg1;
- (void)_exitJoystickModeForReal:(id)arg1;
- (void)_fastScrollingBeganInScrollView:(id)arg1;
- (void)_fastScrollingEnded;
- (id)_focusMovementForJoystickPosition:(struct CGPoint { double x1; double x2; })arg1 usingMinimumRadius:(double)arg2 focusMovementStyle:(long long)arg3;
- (id)_focusMovementSystem;
- (void)_focusSystemEnabledStateDidChange:(id)arg1;
- (double)_frictionInterpolationForMomentumSpeed:(double)arg1 totalDistance:(double)arg2 slope:(double)arg3 shortDistance:(double)arg4 longDistance:(double)arg5;
- (void)_gestureRecognizerFailed:(id)arg1;
- (void)_handleButtonGesture:(id)arg1;
- (void)_handleJoystickGesture:(id)arg1;
- (void)_handleJoystickRepeatMode:(id)arg1;
- (void)_handleJoystickTiltMode:(id)arg1;
- (void)_handlePanGesture:(id)arg1;
- (void)_handleSelectGesture:(id)arg1;
- (void)_handleTapGesture:(id)arg1;
- (unsigned long long)_headingForJoystickPosition:(struct CGPoint { double x1; double x2; })arg1 usingMinimumRadius:(double)arg2;
- (double)_horizontalFrictionInterpolationForMomentumSpeed:(double)arg1 totalDistance:(double)arg2;
- (bool)_joystickAttemptFocusMovementWithRequest:(id)arg1;
- (void)_joystickDisplayLinkHeartbeat:(id)arg1;
- (bool)_joystickFocusMovement:(id)arg1 shouldBeConsideredEqualToFocusMovement:(id)arg2;
- (void)_joystickGestureBegan:(id)arg1;
- (void)_joystickGestureEnded:(id)arg1;
- (void)_joystickGestureUpdated:(id)arg1;
- (void)_joystickPerformRepeat:(id)arg1;
- (double)_joystickRepeatDurationForTimeInMovementZone:(double)arg1;
- (struct CGVector { double x1; double x2; })_joystickVelocityForHeading:(unsigned long long)arg1;
- (void)_momentumHeartbeat:(id)arg1;
- (id)_motionEffectsController;
- (id)_moveEvent;
- (bool)_moveInDirection:(unsigned long long)arg1;
- (bool)_moveWithEvent:(id)arg1;
- (void)_panGestureEnd:(id)arg1;
- (void)_panGestureStart:(id)arg1;
- (void)_recordMomentumForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_removeGestureRecognizers;
- (void)_resetJoystick;
- (void)_resetMomentum;
- (void)_resetMotionEffects;
- (void)_resetPanGestureState;
- (void)_resetProgressAccumulatorWithRequest:(id)arg1;
- (void)_sendGestureBeginNotification;
- (void)_sendMomentumEndNotificationsAndAnimateRollback:(bool)arg1;
- (void)_setMoveEvent:(id)arg1;
- (void)_setSupportsFastScrolling:(bool)arg1;
- (bool)_shouldAcceptInputType:(unsigned long long)arg1;
- (bool)_shouldPerformFocusUpdateWithCurrentMomentumStatus;
- (void)_stopMomentumAndPerformRollback;
- (int)_touchRegionForDigitizerLocation:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_touchSensitivityForItem:(id)arg1;
- (void)_uiktest_handlePanGesture:(id)arg1;
- (id)_uiktest_panGestureRecognizer;
- (void)_uiktest_setPanGestureRecognizer:(id)arg1;
- (void)_updatePanLocation:(struct CGPoint { double x1; double x2; })arg1 reportedVelocity:(struct CGVector { double x1; double x2; })arg2;
- (double)_verticalFrictionInterpolationForMomentumSpeed:(double)arg1 totalDistance:(double)arg2;
- (void)dealloc;
- (id)delegate;
- (void)fastScrollingRecognizer:(id)arg1 didRecognizeFastScrollingRequest:(id)arg2;
- (bool)focusEnginePanGestureRecognizerShouldRecognizeImmediately:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)init;
- (id)initWithOwningView:(id)arg1;
- (bool)isEnabled;
- (id)owningView;
- (void)reset;
- (void)setDelegate:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setSupportsFastScrolling:(bool)arg1;
- (void)setViewForTouchDeferredFocus:(id)arg1;
- (bool)supportsFastScrolling;
- (id)viewForTouchDeferredFocus;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
