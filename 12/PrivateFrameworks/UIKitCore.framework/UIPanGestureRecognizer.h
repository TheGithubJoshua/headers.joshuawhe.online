<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIPanGestureRecognizer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIPanGestureRecognizer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIPanGestureRecognizer : UIGestureRecognizer {
    double  _allowableSeparation;
    double  _allowableTouchTimeSeparation;
    unsigned int  _canPanHorizontally;
    unsigned int  _canPanVertically;
    struct CGPoint { 
        double x; 
        double y; 
    }  _digitizerLocation;
    unsigned int  _failsPastHysteresisWithoutMinTouches;
    unsigned int  _failsPastMaxTouches;
    struct CGPoint { 
        double x; 
        double y; 
    }  _firstSceneReferenceLocation;
    double  _hysteresis;
    unsigned int  _ignoresStationaryTouches;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastSceneReferenceLocation;
    unsigned long long  _lastTouchCount;
    double  _lastTouchTime;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastUnadjustedSceneReferenceLocation;
    unsigned long long  _maximumNumberOfTouches;
    unsigned long long  _minimumNumberOfTouches;
    NSMutableArray * _movingTouches;
    unsigned int  _multitouchTimerOn;
    id  _previousVelocitySample;
    unsigned int  _requiresImmediateMultipleTouches;
    NSMutableArray * _touches;
    id  _velocitySample;
}

@property (getter=_previousVelocitySample, readonly) UIPanGestureVelocitySample *_previousVelocitySample;
@property (getter=_velocitySample, readonly) UIPanGestureVelocitySample *_velocitySample;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } direction;
@property (nonatomic) unsigned long long maximumNumberOfTouches;
@property (nonatomic) unsigned long long minimumNumberOfTouches;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } translation;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } velocity;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (double)_defaultHysteresis;
+ (void)_setPanGestureRecognizersEnabled:(bool)arg1;
+ (bool)_shouldDefaultToTouches;

- (void).cxx_destruct;
- (id)_activeTouches;
- (struct CGPoint { double x1; double x2; })_adjustSceneReferenceLocation:(struct CGPoint { double x1; double x2; })arg1;
- (double)_allowableSeparation;
- (double)_allowableTouchTimeSeparation;
- (bool)_canPanHorizontally;
- (bool)_canPanVertically;
- (void)_centroidMovedTo:(struct CGPoint { double x1; double x2; })arg1 atTime:(double)arg2;
- (struct CGPoint { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromSceneReferenceCoordinatesToView:(id)arg2;
- (struct CGPoint { double x1; double x2; })_convertPoint:(struct CGPoint { double x1; double x2; })arg1 toSceneReferenceCoordinatesFromView:(id)arg2;
- (struct CGPoint { double x1; double x2; })_convertVelocitySample:(id)arg1 fromSceneReferenceCoordinatesToView:(id)arg2;
- (struct CGPoint { double x1; double x2; })_digitizerLocation;
- (bool)_failsPastHysteresisWithoutMinTouches;
- (void)_handleEndedTouches:(id)arg1 withFinalStateAdjustments:(id /* block */)arg2;
- (double)_hysteresis;
- (void)_ignoreTouchForTouchIdentifier:(unsigned int)arg1;
- (void)_ignoreTouches:(id)arg1 forEvent:(id)arg2;
- (bool)_ignoresStationaryTouches;
- (long long)_lastTouchCount;
- (struct UIOffset { double x1; double x2; })_offsetInViewFromSceneReferenceLocation:(struct CGPoint { double x1; double x2; })arg1 toSceneReferenceLocation:(struct CGPoint { double x1; double x2; })arg2;
- (id)_previousVelocitySample;
- (void)_processTouchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)_removeHysteresisFromTranslation;
- (bool)_requiresImmediateMultipleTouches;
- (void)_resetGestureRecognizer;
- (void)_resetVelocitySamples;
- (void)_setAllowableSeparation:(double)arg1;
- (void)_setAllowableTouchTimeSeparation:(double)arg1;
- (void)_setCanPanHorizontally:(bool)arg1;
- (void)_setCanPanVertically:(bool)arg1;
- (void)_setFailsPastHysteresisWithoutMinTouches:(bool)arg1;
- (void)_setHysteresis:(double)arg1;
- (void)_setIgnoresStationaryTouches:(bool)arg1;
- (void)_setRequiresImmediateMultipleTouches:(bool)arg1;
- (struct CGPoint { double x1; double x2; })_shiftPanLocationToNewSceneReferenceLocation:(struct CGPoint { double x1; double x2; })arg1 lockingToAxis:(int)arg2;
- (bool)_shouldTryToBeginWithEvent:(id)arg1;
- (bool)_touchesExceedAllowableSeparation;
- (void)_touchesListChangedFrom:(id)arg1 to:(id)arg2;
- (void)_updateDigitizerLocationWithEvent:(id)arg1;
- (bool)_updateMovingTouchesArraySavingOldArray:(id*)arg1;
- (id)_velocitySample;
- (void)_willBeginAfterSatisfyingFailureRequirements;
- (bool)_willScrollX;
- (bool)_willScrollY;
- (void)clearMultitouchTimer;
- (void)encodeWithCoder:(id)arg1;
- (bool)failsPastMaxTouches;
- (id)initWithCoder:(id)arg1;
- (id)initWithTarget:(id)arg1 action:(SEL)arg2;
- (struct CGPoint { double x1; double x2; })locationInView:(id)arg1;
- (struct CGPoint { double x1; double x2; })locationOfTouch:(unsigned long long)arg1 inView:(id)arg2;
- (unsigned long long)maximumNumberOfTouches;
- (unsigned long long)minimumNumberOfTouches;
- (void)multitouchExpired:(id)arg1;
- (unsigned long long)numberOfTouches;
- (void)pressesBegan:(id)arg1 withEvent:(id)arg2;
- (void)setFailsPastMaxTouches:(bool)arg1;
- (void)setMaximumNumberOfTouches:(unsigned long long)arg1;
- (void)setMinimumNumberOfTouches:(unsigned long long)arg1;
- (void)setTranslation:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (void)startMultitouchTimer:(double)arg1;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (struct CGPoint { double x1; double x2; })translationInView:(id)arg1;
- (struct CGPoint { double x1; double x2; })velocityInView:(id)arg1;

// Image: /System/Library/PrivateFrameworks/IMSharedUtilities.framework/Frameworks/XCTest.framework/XCTest

- (id)_automationName;

// Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading

- (struct CGPoint { double x1; double x2; })direction;

// Image: /System/Library/PrivateFrameworks/TouchML.framework/TouchML

- (struct CGPoint { double x1; double x2; })translation;
- (struct CGPoint { double x1; double x2; })velocity;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
