<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UIPreviewInteractionController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UIPreviewInteractionController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UIPreviewInteractionController : NSObject <UIGestureRecognizerDelegate, UIInteractionProgressObserver, UIPreviewInteractionDelegate, _UIForcePresentationControllerDelegate> {
    id  _currentCommitTransition;
    UIPresentationController<UIForcePresentationController> * _currentPresentationController;
    UIViewController * _currentPreviewViewController;
    <UIForceTransitioningDelegate> * _currentTransitionDelegate;
    _UIDeepPressAnalyzer * _deepPressAnalyzer;
    <UIPreviewInteractionControllerDelegate> * _delegate;
    bool  _didSendDelegateWillDismissViewController;
    _UIStatesFeedbackGenerator * _feedbackGenerator;
    bool  _generatorTurnedOn;
    UIInteractionProgress * _interactionProgressForCommit;
    UIInteractionProgress * _interactionProgressForPresentation;
    bool  _isCommitting;
    struct CGPoint { 
        double x; 
        double y; 
    }  _location;
    UIPanGestureRecognizer * _modalPanGestureRecognizer;
    UIViewController * _presentingViewController;
    _UIPreviewGestureRecognizer * _previewGestureRecognizer;
    UIPreviewInteraction * _previewInteraction;
    <UIViewControllerPreviewing_Internal> * _previewingContext;
    _UIRevealGestureRecognizer * _revealGestureRecognizer;
    UIView * _sourceView;
    bool  _statusBarWasHidden;
    _UITouchesObservingGestureRecognizer * _touchObservingGestureRecognizer;
    UIWindow * _windowForPreviewPresentation;
}

@property (nonatomic, readonly) UIGestureRecognizer *beginPreviewGestureRecognizer;
@property (nonatomic, retain) id currentCommitTransition;
@property (nonatomic, retain) UIPresentationController<UIForcePresentationController> *currentPresentationController;
@property (nonatomic, retain) UIViewController *currentPreviewViewController;
@property (nonatomic, retain) <UIForceTransitioningDelegate> *currentTransitionDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) _UIDeepPressAnalyzer *deepPressAnalyzer;
@property (nonatomic) <UIPreviewInteractionControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didSendDelegateWillDismissViewController;
@property (nonatomic, retain) _UIStatesFeedbackGenerator *feedbackGenerator;
@property (nonatomic, readonly) NSArray *gestureRecognizers;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIInteractionProgress *interactionProgressForCommit;
@property (nonatomic, retain) UIInteractionProgress *interactionProgressForPresentation;
@property (nonatomic) struct CGPoint { double x1; double x2; } location;
@property (nonatomic, retain) UIPanGestureRecognizer *modalPanGestureRecognizer;
@property (nonatomic, readonly) UIGestureRecognizer *presentationGestureRecognizer;
@property (nonatomic) UIViewController *presentingViewController;
@property (nonatomic, retain) _UIPreviewGestureRecognizer *previewGestureRecognizer;
@property (nonatomic, retain) UIPreviewInteraction *previewInteraction;
@property (nonatomic) <UIViewControllerPreviewing_Internal> *previewingContext;
@property (nonatomic, retain) _UIRevealGestureRecognizer *revealGestureRecognizer;
@property (nonatomic) UIView *sourceView;
@property (nonatomic) bool statusBarWasHidden;
@property (readonly) Class superclass;
@property (nonatomic, retain) _UITouchesObservingGestureRecognizer *touchObservingGestureRecognizer;
@property (nonatomic, retain) UIWindow *windowForPreviewPresentation;

- (void).cxx_destruct;
- (void)_activateFeedback;
- (void)_activateFeedbackIfNeeded;
- (void)_configureCommitInteractionProgressForView:(id)arg1;
- (void)_deactivateFeedbackIfNeeded;
- (void)_finalizeInteractivePreview;
- (void)_gestureRecognizerFailed:(id)arg1;
- (void)_handleRevealGesture:(id)arg1;
- (void)_handleTouchObservingGesture:(id)arg1;
- (void)_previewPresentationControllerDidScheduleDismiss;
- (bool)_previewingIsPossibleForView:(id)arg1;
- (void)_resetCustomPresentationHooks;
- (void)_setCalloutBarHidden:(bool)arg1;
- (void)_setStatusBarHidden:(bool)arg1;
- (id)_transitionDelegateForPreviewViewController:(id)arg1 atPosition:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3;
- (void)_turnOffFeedbackGenerator;
- (void)_turnOnFeedbackGenerator;
- (bool)_usesPreviewInteraction;
- (bool)_usesPreviewPresentationController;
- (bool)_viewControllerIsChildOfExpandedSplitViewController:(id)arg1;
- (id)beginPreviewGestureRecognizer;
- (void)cancelInteractivePreview;
- (void)commitInteractivePreview;
- (bool)configureRevealTransformSourceViewSnapshotSuppressionFromLocation:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (void)configureRevealTransformWithInteractionProgress:(id)arg1 forLocation:(struct CGPoint { double x1; double x2; })arg2 inView:(id)arg3 containerView:(id)arg4;
- (id)currentCommitTransition;
- (id)currentPresentationController;
- (id)currentPreviewViewController;
- (id)currentTransitionDelegate;
- (void)dealloc;
- (id)deepPressAnalyzer;
- (id)delegate;
- (bool)didSendDelegateWillDismissViewController;
- (id)feedbackGenerator;
- (void)forcePresentationController:(id)arg1 didSelectMenuItem:(id)arg2;
- (void)forcePresentationControllerDidDismiss:(id)arg1;
- (void)forcePresentationControllerWantsToCommit:(id)arg1;
- (void)forcePresentationControllerWillDismiss:(id)arg1;
- (void)forcePresentationTransitionWillBegin:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)gestureRecognizers;
- (id)init;
- (void)initGestureRecognizers;
- (id)initWithView:(id)arg1;
- (void)interactionProgress:(id)arg1 didEnd:(bool)arg2;
- (void)interactionProgressDidUpdate:(id)arg1;
- (id)interactionProgressForCommit;
- (id)interactionProgressForPresentation;
- (struct CGPoint { double x1; double x2; })location;
- (id)modalPanGestureRecognizer;
- (id)presentationGestureRecognizer;
- (id)presentingViewController;
- (id)previewGestureRecognizer;
- (id)previewInteraction;
- (void)previewInteraction:(id)arg1 didUpdateCommitTransition:(double)arg2 ended:(bool)arg3;
- (void)previewInteraction:(id)arg1 didUpdatePreviewTransition:(double)arg2 ended:(bool)arg3;
- (void)previewInteractionDidCancel:(id)arg1;
- (bool)previewInteractionShouldBegin:(id)arg1;
- (id)previewingContext;
- (id)revealGestureRecognizer;
- (void)setCurrentCommitTransition:(id)arg1;
- (void)setCurrentPresentationController:(id)arg1;
- (void)setCurrentPreviewViewController:(id)arg1;
- (void)setCurrentTransitionDelegate:(id)arg1;
- (void)setDeepPressAnalyzer:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidSendDelegateWillDismissViewController:(bool)arg1;
- (void)setFeedbackGenerator:(id)arg1;
- (void)setInteractionProgressForCommit:(id)arg1;
- (void)setInteractionProgressForPresentation:(id)arg1;
- (void)setLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setModalPanGestureRecognizer:(id)arg1;
- (void)setPresentingViewController:(id)arg1;
- (void)setPreviewGestureRecognizer:(id)arg1;
- (void)setPreviewInteraction:(id)arg1;
- (void)setPreviewingContext:(id)arg1;
- (void)setRevealGestureRecognizer:(id)arg1;
- (void)setSourceView:(id)arg1;
- (void)setStatusBarWasHidden:(bool)arg1;
- (void)setTouchObservingGestureRecognizer:(id)arg1;
- (void)setWindowForPreviewPresentation:(id)arg1;
- (id)sourceView;
- (bool)startInteractivePreviewAtLocation:(struct CGPoint { double x1; double x2; })arg1 inView:(id)arg2;
- (bool)startInteractivePreviewWithGestureRecognizer:(id)arg1;
- (bool)statusBarWasHidden;
- (id)touchObservingGestureRecognizer;
- (id)windowForPreviewPresentation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
