<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIKeyboardTextSelectionGestureController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIKeyboardTextSelectionGestureController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIKeyboardTextSelectionGestureController : NSObject {
    struct CGPoint { 
        double x; 
        double y; 
    }  _accumulatedAcceleration;
    struct CGPoint { 
        double x; 
        double y; 
    }  _accumulatedBounding;
    NSMutableArray * _activeGestures;
    struct CGPoint { 
        double x; 
        double y; 
    }  _cursorLocationBase;
    NSMutableArray * _deallocHandlers;
    <_UIKeyboardTextSelectionGestureControllerDelegate> * _delegate;
    bool  _didFloatCursor;
    bool  _didSuppressSelectionGrabbers;
    _UIStatesFeedbackGenerator * _feedbackBehaviour;
    bool  _hadSpacePanTap;
    bool  _isLongPressing;
    bool  _isPanning;
    bool  _isSpacePan;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastPanTranslation;
    double  _lastPressTimestamp;
    UIDelayedAction * _longForcePressAction;
    long long  _panGestureState;
    int  _previousForcePressCount;
    long long  _previousRepeatedGranularity;
    double  _spacePanDistance;
    bool  _suppressTwoFingerPan;
    UIDelayedAction * _tapLogTimer;
    double  _twoFingerTapTimestamp;
    bool  _wasNestedPinchingDisabled;
    bool  _wasScrollingEnabled;
    UITextMagnifierTimeWeightedPoint * _weightedPoint;
}

@property (nonatomic) struct CGPoint { double x1; double x2; } accumulatedAcceleration;
@property (nonatomic) struct CGPoint { double x1; double x2; } accumulatedBounding;
@property (nonatomic, retain) NSMutableArray *activeGestures;
@property (nonatomic) struct CGPoint { double x1; double x2; } cursorLocationBase;
@property (nonatomic) <_UIKeyboardTextSelectionGestureControllerDelegate> *delegate;
@property (nonatomic) bool didFloatCursor;
@property (nonatomic) bool didSuppressSelectionGrabbers;
@property (nonatomic, retain) _UIStatesFeedbackGenerator *feedbackBehaviour;
@property (nonatomic) bool hadSpacePanTap;
@property (nonatomic) bool isLongPressing;
@property (nonatomic) bool isPanning;
@property (nonatomic) bool isSpacePan;
@property (nonatomic) struct CGPoint { double x1; double x2; } lastPanTranslation;
@property (nonatomic) double lastPressTimestamp;
@property (nonatomic, retain) UIDelayedAction *longForcePressAction;
@property (nonatomic) long long panGestureState;
@property (nonatomic) int previousForcePressCount;
@property (nonatomic) long long previousRepeatedGranularity;
@property (nonatomic) double spacePanDistance;
@property (nonatomic) bool suppressTwoFingerPan;
@property (nonatomic, retain) UIDelayedAction *tapLogTimer;
@property (nonatomic) double twoFingerTapTimestamp;
@property (nonatomic) bool wasNestedPinchingDisabled;
@property (nonatomic) bool wasScrollingEnabled;
@property (nonatomic, retain) UITextMagnifierTimeWeightedPoint *weightedPoint;

+ (id)sharedInstance;

- (void)_cleanupDeadGesturesIfNecessary;
- (bool)_longPressAllowedForView:(id)arg1;
- (struct CGPoint { double x1; double x2; })accumulatedAcceleration;
- (struct CGPoint { double x1; double x2; })accumulatedBounding;
- (id)activeGestures;
- (id)addDeallocationHandler:(id /* block */)arg1;
- (id)addLongPressTextSelectionInteractionsToView:(id)arg1;
- (id)addOneFingerTextSelectionInteractionsToView:(id)arg1;
- (id)addTwoFingerTextSelectionInteractionsToView:(id)arg1;
- (bool)allowOneFingerDeepPress;
- (void)configureOneFingerForcePressRecognizer:(id)arg1;
- (void)configureTwoFingerPanGestureRecognizer:(id)arg1;
- (void)configureTwoFingerTapGestureRecognizer:(id)arg1;
- (struct CGPoint { double x1; double x2; })cursorLocationBase;
- (void)dealloc;
- (id)delegate;
- (bool)didFloatCursor;
- (void)didRemoveSelectionController;
- (bool)didSuppressSelectionGrabbers;
- (void)enableEnclosingScrollViewNestedPinching;
- (id)feedbackBehaviour;
- (bool)hadSpacePanTap;
- (id)init;
- (bool)isLongPressing;
- (bool)isPanning;
- (bool)isSpacePan;
- (struct CGPoint { double x1; double x2; })lastPanTranslation;
- (double)lastPressTimestamp;
- (id)longForcePressAction;
- (double)oneFingerForcePressAllowableMovement;
- (double)oneFingerForcePressMinimumDuration;
- (bool)oneFingerForcePressShouldCancelTouchesInView;
- (bool)oneFingerForcePressShouldFailWithoutForce;
- (long long)panGestureState;
- (int)previousForcePressCount;
- (long long)previousRepeatedGranularity;
- (void)redisableEnclosingScrollViewNestedPinching;
- (void)removeDeallocationHandler:(id)arg1;
- (id)selectionController;
- (void)setAccumulatedAcceleration:(struct CGPoint { double x1; double x2; })arg1;
- (void)setAccumulatedBounding:(struct CGPoint { double x1; double x2; })arg1;
- (void)setActiveGestures:(id)arg1;
- (void)setCursorLocationBase:(struct CGPoint { double x1; double x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidFloatCursor:(bool)arg1;
- (void)setDidSuppressSelectionGrabbers:(bool)arg1;
- (void)setFeedbackBehaviour:(id)arg1;
- (void)setHadSpacePanTap:(bool)arg1;
- (void)setIsLongPressing:(bool)arg1;
- (void)setIsPanning:(bool)arg1;
- (void)setIsSpacePan:(bool)arg1;
- (void)setLastPanTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLastPressTimestamp:(double)arg1;
- (void)setLongForcePressAction:(id)arg1;
- (void)setPanGestureState:(long long)arg1;
- (void)setPreviousForcePressCount:(int)arg1;
- (void)setPreviousRepeatedGranularity:(long long)arg1;
- (void)setSpacePanDistance:(double)arg1;
- (void)setSuppressTwoFingerPan:(bool)arg1;
- (void)setTapLogTimer:(id)arg1;
- (void)setTwoFingerTapTimestamp:(double)arg1;
- (void)setWasNestedPinchingDisabled:(bool)arg1;
- (void)setWasScrollingEnabled:(bool)arg1;
- (void)setWeightedPoint:(id)arg1;
- (double)spacePanDistance;
- (bool)suppressTwoFingerPan;
- (id)tapLogTimer;
- (Class)textInteractionClass;
- (double)twoFingerTapTimestamp;
- (bool)wasNestedPinchingDisabled;
- (bool)wasScrollingEnabled;
- (id)weightedPoint;
- (void)willRemoveSelectionController;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
