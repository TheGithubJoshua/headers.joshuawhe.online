<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIKBRTTouchDrifting.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIKBRTTouchDrifting.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIKBRTTouchDrifting : _UIKBRTKeyboardTouchObserver {
    <_UIKBRTTouchDriftingDelegate> * _delegate;
    _UIKBRTDecayingObject * _enableLatchObj;
    _UIKBRTTouchHistory * _fHistory;
    UIView * _feedbackParentView;
    NSTimer * _feedbackTimer;
    NSArray * _indexSearchOrder;
    _UIKBRTTouchHistory * _jHistory;
    UIView * _leftDriftFeedbackView;
    NSMutableSet * _leftDriftLockTouchIDs;
    bool  _leftDriftRemovingItems;
    _UIKBRTDecayingOffset * _leftHandDriftOffsetObj;
    _UIKBRTDecayingOffset * _leftHandFixedOffsetObj;
    _UIKBRTTouchHistoryInfo * _leftIndexFingerInfo;
    _UIKBRTTouchHistory * _otherHistory;
    UIView * _rightDriftFeedbackView;
    NSMutableSet * _rightDriftLockTouchIDs;
    bool  _rightDriftRemovingItems;
    _UIKBRTDecayingOffset * _rightHandDriftOffsetObj;
    _UIKBRTDecayingOffset * _rightHandFixedOffsetObj;
    _UIKBRTTouchHistoryInfo * _rightIndexFingerInfo;
    bool  _supportsDrifting;
    struct { 
        double up; 
        double down; 
        double left; 
        double right; 
    }  _touchError;
    UIView * _touchHistoryFeedbackView;
    NSMapTable * _touchHistoryViewMap;
    NSMutableDictionary * _touches;
}

@property (nonatomic) <_UIKBRTTouchDriftingDelegate> *delegate;
@property (nonatomic, retain) _UIKBRTDecayingObject *enableLatchObj;
@property (nonatomic, retain) _UIKBRTTouchHistory *fHistory;
@property (nonatomic) UIView *feedbackParentView;
@property (nonatomic, retain) NSTimer *feedbackTimer;
@property (nonatomic, retain) NSArray *indexSearchOrder;
@property (nonatomic, retain) _UIKBRTTouchHistory *jHistory;
@property (nonatomic, retain) UIView *leftDriftFeedbackView;
@property (nonatomic, retain) NSMutableSet *leftDriftLockTouchIDs;
@property (nonatomic) bool leftDriftRemovingItems;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } leftHandDriftOffset;
@property (nonatomic, retain) _UIKBRTDecayingOffset *leftHandDriftOffsetObj;
@property (nonatomic, retain) _UIKBRTDecayingOffset *leftHandFixedOffsetObj;
@property (nonatomic, retain) _UIKBRTTouchHistoryInfo *leftIndexFingerInfo;
@property (nonatomic, retain) _UIKBRTTouchHistory *otherHistory;
@property (nonatomic, retain) UIView *rightDriftFeedbackView;
@property (nonatomic, retain) NSMutableSet *rightDriftLockTouchIDs;
@property (nonatomic) bool rightDriftRemovingItems;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } rightHandDriftOffset;
@property (nonatomic, retain) _UIKBRTDecayingOffset *rightHandDriftOffsetObj;
@property (nonatomic, retain) _UIKBRTDecayingOffset *rightHandFixedOffsetObj;
@property (nonatomic, retain) _UIKBRTTouchHistoryInfo *rightIndexFingerInfo;
@property (nonatomic) bool supportsDrifting;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } touchError;
@property (nonatomic, retain) UIView *touchHistoryFeedbackView;
@property (nonatomic, retain) NSMapTable *touchHistoryViewMap;
@property (nonatomic, retain) NSMutableDictionary *touches;

+ (bool)isEnabled;

- (void).cxx_destruct;
- (struct CGPoint { double x1; double x2; })_offsetForPoint:(struct CGPoint { double x1; double x2; })arg1 fromPoint:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGPoint { double x1; double x2; })_pinOffset:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_pointFromPoint:(struct CGPoint { double x1; double x2; })arg1 plusOffset:(struct CGPoint { double x1; double x2; })arg2;
- (void)_resetFeedback;
- (id)_touchDictWithFingerIds:(id)arg1;
- (void)_updateDriftForFingers:(id)arg1 leftHand:(bool)arg2 newestTouch:(id)arg3;
- (void)_updateDriftView;
- (void)_updateDriftViewTimer:(id)arg1;
- (void)_updateDriftWithTouchInfo:(id)arg1;
- (void)_updateHistory;
- (void)addTouchLocation:(struct CGPoint { double x1; double x2; })arg1 withRadius:(double)arg2 withTouchTime:(double)arg3 withIdentifier:(id)arg4;
- (void)dealloc;
- (id)delegate;
- (id)enableLatchObj;
- (id)fHistory;
- (id)feedbackParentView;
- (id)feedbackTimer;
- (void)ignoreTouchWithIdentifier:(id)arg1 withTouchTime:(double)arg2;
- (id)indexSearchOrder;
- (id)init;
- (id)initWithParentView:(id)arg1;
- (id)jHistory;
- (id)leftDriftFeedbackView;
- (id)leftDriftLockTouchIDs;
- (bool)leftDriftRemovingItems;
- (struct CGPoint { double x1; double x2; })leftHandDriftOffset;
- (id)leftHandDriftOffsetObj;
- (id)leftHandFixedOffsetObj;
- (id)leftIndexFingerInfo;
- (void)moveTouchWithIdentifier:(id)arg1 toLocation:(struct CGPoint { double x1; double x2; })arg2 withRadius:(double)arg3 atTouchTime:(double)arg4;
- (id)otherHistory;
- (void)removeTouchWithIdentifier:(id)arg1 touchCancelled:(bool)arg2;
- (void)reset;
- (id)rightDriftFeedbackView;
- (id)rightDriftLockTouchIDs;
- (bool)rightDriftRemovingItems;
- (struct CGPoint { double x1; double x2; })rightHandDriftOffset;
- (id)rightHandDriftOffsetObj;
- (id)rightHandFixedOffsetObj;
- (id)rightIndexFingerInfo;
- (void)setDelegate:(id)arg1;
- (void)setEnableLatchObj:(id)arg1;
- (void)setFHistory:(id)arg1;
- (void)setFeedbackParentView:(id)arg1;
- (void)setFeedbackTimer:(id)arg1;
- (void)setIndexSearchOrder:(id)arg1;
- (void)setJHistory:(id)arg1;
- (void)setLeftDriftFeedbackView:(id)arg1;
- (void)setLeftDriftLockTouchIDs:(id)arg1;
- (void)setLeftDriftRemovingItems:(bool)arg1;
- (void)setLeftHandDriftOffsetObj:(id)arg1;
- (void)setLeftHandFixedOffsetObj:(id)arg1;
- (void)setLeftIndexFingerInfo:(id)arg1;
- (void)setOtherHistory:(id)arg1;
- (void)setRightDriftFeedbackView:(id)arg1;
- (void)setRightDriftLockTouchIDs:(id)arg1;
- (void)setRightDriftRemovingItems:(bool)arg1;
- (void)setRightHandDriftOffsetObj:(id)arg1;
- (void)setRightHandFixedOffsetObj:(id)arg1;
- (void)setRightIndexFingerInfo:(id)arg1;
- (void)setSupportsDrifting:(bool)arg1;
- (void)setTouchError:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setTouchHistoryFeedbackView:(id)arg1;
- (void)setTouchHistoryViewMap:(id)arg1;
- (void)setTouches:(id)arg1;
- (bool)supportsDrifting;
- (struct { double x1; double x2; double x3; double x4; })touchError;
- (id)touchHistoryFeedbackView;
- (id)touchHistoryViewMap;
- (id)touches;
- (void)updateTouchWithIdentifier:(id)arg1 withTouchTime:(double)arg2 resultingError:(struct CGPoint { double x1; double x2; })arg3 rowOffsetFromHomeRow:(long long)arg4;
- (void)updateWithFCenter:(struct CGPoint { double x1; double x2; })arg1 jCenter:(struct CGPoint { double x1; double x2; })arg2 keySize:(struct CGSize { double x1; double x2; })arg3 rowOffsets:(id)arg4 homeRowOffsetIndex:(int)arg5;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
