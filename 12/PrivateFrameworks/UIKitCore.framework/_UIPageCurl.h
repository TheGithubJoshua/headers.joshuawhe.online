<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIPageCurl.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIPageCurl.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIPageCurl : NSObject {
    NSMutableArray * _activeStateQueue;
    NSMutableSet * _completedStates;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentRect;
    UIView * _contentView;
    double  _delayBetweenSuccessiveAnimations;
    double  _manualPageCurlMaxDAngle;
    _UIPageCurlState * _manualPageCurlState;
    double  _pageDiagonalAngle;
    double  _pageDiagonalLength;
    NSMutableArray * _pendingStateQueue;
    long long  _spineLocation;
}

@property (getter=_isManualPageCurlInProgressAndUncommitted, nonatomic, readonly) bool _manualPageCurlInProgressAndUncommitted;
@property (setter=_setManualPageCurlMaxDAngle:, nonatomic) double _manualPageCurlMaxDAngle;
@property (nonatomic, readonly) long long _spineLocation;
@property (nonatomic, readonly) NSNumber *_wrappedManualPageCurlDirection;

- (void).cxx_destruct;
- (void)_abortManualCurlAtLocation:(struct CGPoint { double x1; double x2; })arg1 withSuggestedVelocity:(double)arg2;
- (id)_animationKeyPaths;
- (bool)_areAnimationsInFlightOrPending;
- (double)_baseAngleOffsetForState:(id)arg1;
- (void)_beginCurlWithState:(id)arg1 previousState:(id)arg2;
- (void)_cancelAllActiveTransitionsAndAbandonCallbacks:(bool)arg1;
- (void)_cancelTransitionWithState:(id)arg1 invalidatingPageCurl:(bool)arg2;
- (void)_cleanupState:(id)arg1;
- (void)_completeManualCurlAtLocation:(struct CGPoint { double x1; double x2; })arg1 withSuggestedVelocity:(double)arg2;
- (double)_distanceToTravelWithCurrentSpineLocation;
- (double)_durationForManualCurlEndAnimationWithSuggestedVelocity:(double)arg1 shouldComplete:(bool)arg2;
- (void)_endManualCurlAtLocation:(struct CGPoint { double x1; double x2; })arg1 withSuggestedVelocity:(double)arg2 shouldComplete:(bool)arg3;
- (void)_enqueueCurlOfType:(long long)arg1 fromLocation:(struct CGPoint { double x1; double x2; })arg2 inDirection:(long long)arg3 withView:(id)arg4 revealingView:(id)arg5 completion:(id /* block */)arg6 finally:(id /* block */)arg7;
- (void)_ensureCurlFilterOnLayer:(id)arg1;
- (void)_forceCleanupState:(id)arg1 finished:(bool)arg2 completed:(bool)arg3;
- (void)_fromValue:(double*)arg1 toValue:(double*)arg2 fromState:(id)arg3 forAnimationWithKeyPath:(id)arg4;
- (double)_inputTimeForProgress:(double)arg1 distanceToTravel:(double)arg2 radius:(double*)arg3 minRadius:(double)arg4 angle:(double)arg5 dAngle:(double)arg6 touchLocation:(struct CGPoint { double x1; double x2; })arg7 state:(id)arg8;
- (bool)_isManualPageCurlInProgressAndUncommitted;
- (bool)_isPreviousCurlCompatibleWithCurlOfType:(long long)arg1 inDirection:(long long)arg2;
- (double)_manualPageCurlMaxDAngle;
- (id)_newAnimationForState:(id)arg1 withKeyPath:(id)arg2 duration:(double)arg3 fromValue:(id)arg4;
- (id)_newCurlFilter;
- (void)_pageCurlAnimationDidStop:(id)arg1 withState:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pageViewFrame:(bool)arg1;
- (bool)_populateFromValue:(double*)arg1 toValue:(double*)arg2 fromState:(id)arg3 forAnimationWithKeyPath:(id)arg4;
- (struct CGPoint { double x1; double x2; })_referenceLocationForInitialLocation:(struct CGPoint { double x1; double x2; })arg1 direction:(long long)arg2;
- (void)_setContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setManualPageCurlMaxDAngle:(double)arg1;
- (long long)_spineLocation;
- (void)_updateCurlFromState:(id)arg1 withTime:(double)arg2 radius:(double)arg3 angle:(double)arg4 addingAnimations:(id)arg5;
- (void)_updateManualCurlToLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_updatedInputsFromState:(id)arg1 forLocation:(struct CGPoint { double x1; double x2; })arg2 time:(double*)arg3 radius:(double*)arg4 angle:(double*)arg5;
- (long long)_validatedPageCurlTypeForPageCurlType:(long long)arg1 inDirection:(long long)arg2;
- (id)_wrappedManualPageCurlDirection;
- (void)dealloc;
- (id)initWithSpineLocation:(long long)arg1 andContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 inContentView:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
