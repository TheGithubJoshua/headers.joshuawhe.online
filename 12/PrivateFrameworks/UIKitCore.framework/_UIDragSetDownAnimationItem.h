<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_UIDragSetDownAnimationItem.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/_UIDragSetDownAnimationItem.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface _UIDragSetDownAnimationItem : NSObject {
    bool  _almostToTarget;
    int  _animationCount;
    struct CGPoint { 
        double x; 
        double y; 
    }  _center;
    id /* block */  _completionHandler;
    UIView * _componentsView;
    bool  _done;
    unsigned long long  _droppedItemIndex;
    bool  _fastAnimation;
    bool  _hasStartedSpringAnimation;
    bool  _ignoreRetargeting;
    double  _initialDistanceFromTargetFrame;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialTargetVelocity;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialVelocity;
    _UIInternalDraggingItem * _item;
    id /* block */  _midpointHandler;
    bool  _midwayToTarget;
    id /* block */  _nearCompletionHandler;
    bool  _portalHidden;
    UIViewPropertyAnimator * _propertyAnimator;
    bool  _reachedTarget;
    bool  _requiresDefaultAnimation;
    _UIPortalView * _retargetingContainerPortalView;
    UIView * _retargetingContainerView;
    bool  _shouldDrivePropertyAnimator;
    UIViewPropertyAnimator * _systemDefaultPropertyAnimator;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _targetFrame;
    id /* block */  _targetUpdateHandler;
    id /* block */  _updatedDroppedItemHandler;
    UIView * _view;
    <_UIDraggingItemVisualTarget> * _visualTarget;
}

@property (nonatomic) bool almostToTarget;
@property (nonatomic) int animationCount;
@property (nonatomic) struct CGPoint { double x1; double x2; } center;
@property (nonatomic, copy) id /* block */ completionHandler;
@property (nonatomic, retain) UIView *componentsView;
@property (nonatomic) bool done;
@property (nonatomic) unsigned long long droppedItemIndex;
@property (nonatomic) bool fastAnimation;
@property (nonatomic) bool hasStartedSpringAnimation;
@property (nonatomic) bool ignoreRetargeting;
@property (nonatomic) double initialDistanceFromTargetFrame;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialTargetVelocity;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialVelocity;
@property (nonatomic, retain) _UIInternalDraggingItem *item;
@property (nonatomic, copy) id /* block */ midpointHandler;
@property (nonatomic) bool midwayToTarget;
@property (nonatomic, copy) id /* block */ nearCompletionHandler;
@property (getter=isPortalHidden, nonatomic) bool portalHidden;
@property (nonatomic, retain) UIViewPropertyAnimator *propertyAnimator;
@property (nonatomic) bool reachedTarget;
@property (nonatomic) bool requiresDefaultAnimation;
@property (nonatomic, retain) _UIPortalView *retargetingContainerPortalView;
@property (nonatomic, retain) UIView *retargetingContainerView;
@property (nonatomic) bool shouldDrivePropertyAnimator;
@property (nonatomic, retain) UIViewPropertyAnimator *systemDefaultPropertyAnimator;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } targetFrame;
@property (nonatomic, copy) id /* block */ targetUpdateHandler;
@property (nonatomic, copy) id /* block */ updatedDroppedItemHandler;
@property (nonatomic, retain) UIView *view;
@property (nonatomic, retain) <_UIDraggingItemVisualTarget> *visualTarget;

- (void).cxx_destruct;
- (bool)almostToTarget;
- (int)animationCount;
- (struct CGPoint { double x1; double x2; })center;
- (id /* block */)completionHandler;
- (id)componentsView;
- (bool)done;
- (unsigned long long)droppedItemIndex;
- (bool)fastAnimation;
- (bool)hasStartedSpringAnimation;
- (bool)ignoreRetargeting;
- (double)initialDistanceFromTargetFrame;
- (struct CGPoint { double x1; double x2; })initialTargetVelocity;
- (struct CGPoint { double x1; double x2; })initialVelocity;
- (bool)isPortalHidden;
- (id)item;
- (id /* block */)midpointHandler;
- (bool)midwayToTarget;
- (id /* block */)nearCompletionHandler;
- (id)propertyAnimator;
- (bool)reachedTarget;
- (bool)requiresDefaultAnimation;
- (id)retargetingContainerPortalView;
- (id)retargetingContainerView;
- (void)setAlmostToTarget:(bool)arg1;
- (void)setAnimationCount:(int)arg1;
- (void)setCenter:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCompletionHandler:(id /* block */)arg1;
- (void)setComponentsView:(id)arg1;
- (void)setDone:(bool)arg1;
- (void)setDroppedItemIndex:(unsigned long long)arg1;
- (void)setFastAnimation:(bool)arg1;
- (void)setHasStartedSpringAnimation:(bool)arg1;
- (void)setIgnoreRetargeting:(bool)arg1;
- (void)setInitialDistanceFromTargetFrame:(double)arg1;
- (void)setInitialTargetVelocity:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInitialVelocity:(struct CGPoint { double x1; double x2; })arg1;
- (void)setItem:(id)arg1;
- (void)setMidpointHandler:(id /* block */)arg1;
- (void)setMidwayToTarget:(bool)arg1;
- (void)setNearCompletionHandler:(id /* block */)arg1;
- (void)setPortalHidden:(bool)arg1;
- (void)setPropertyAnimator:(id)arg1;
- (void)setReachedTarget:(bool)arg1;
- (void)setRequiresDefaultAnimation:(bool)arg1;
- (void)setRetargetingContainerPortalView:(id)arg1;
- (void)setRetargetingContainerView:(id)arg1;
- (void)setShouldDrivePropertyAnimator:(bool)arg1;
- (void)setSystemDefaultPropertyAnimator:(id)arg1;
- (void)setTargetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTargetUpdateHandler:(id /* block */)arg1;
- (void)setUpdatedDroppedItemHandler:(id /* block */)arg1;
- (void)setView:(id)arg1;
- (void)setVisualTarget:(id)arg1;
- (bool)shouldDrivePropertyAnimator;
- (id)systemDefaultPropertyAnimator;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetFrame;
- (id /* block */)targetUpdateHandler;
- (id /* block */)updatedDroppedItemHandler;
- (id)view;
- (id)visualTarget;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
