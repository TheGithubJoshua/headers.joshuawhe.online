<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UICollectionViewCell.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIKitCore.framework/UICollectionViewCell.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore (61000)
 */

@interface UICollectionViewCell : UICollectionReusableView <UIGestureRecognizerDelegate, _UILayoutEngineSuspending> {
    UIView * _backgroundView;
    struct { 
        unsigned int selected : 1; 
        unsigned int highlighted : 1; 
        unsigned int showingMenu : 1; 
        unsigned int clearSelectionWhenMenuDisappears : 1; 
        unsigned int waitingForSelectionAnimationHalfwayPoint : 1; 
        unsigned int contentViewWantsSystemLayoutSizeFittingSize : 1; 
    }  _collectionCellFlags;
    UIView * _contentView;
    long long  _dragState;
    bool  _dragging;
    long long  _focusStyle;
    _UIFloatingContentView * _focusedFloatingContentView;
    bool  _highlighted;
    id  _highlightingSupport;
    bool  _isLayoutEngineSuspended;
    UILongPressGestureRecognizer * _menuGesture;
    bool  _selected;
    UIView * _selectedBackgroundView;
    id  _selectionSegueTemplate;
}

@property (getter=_dragState, setter=_setDragState:, nonatomic) long long _dragState;
@property (getter=_isLayoutEngineSuspended, setter=_setLayoutEngineSuspended:, nonatomic) bool _layoutEngineSuspended;
@property (nonatomic, retain) UIView *backgroundView;
@property (nonatomic, retain) UIView *contentView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDragging, nonatomic) bool dragging;
@property (getter=_focusStyle, setter=_setFocusStyle:, nonatomic) long long focusStyle;
@property (readonly) unsigned long long hash;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (getter=isSelected, nonatomic) bool selected;
@property (nonatomic, retain) UIView *selectedBackgroundView;
@property (getter=_selectionAnimationDuration, nonatomic, readonly) double selectionAnimationDuration;
@property (readonly) Class superclass;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

+ (Class)_contentViewClass;

- (void).cxx_destruct;
- (bool)_canFocusProgrammatically;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentViewFrame;
- (bool)_descendantsShouldHighlight;
- (void)_descendent:(id)arg1 didMoveFromSuperview:(id)arg2 toSuperview:(id)arg3;
- (void)_descendent:(id)arg1 willMoveFromSuperview:(id)arg2 toSuperview:(id)arg3;
- (void)_didUpdateFocusInContext:(id)arg1 withAnimationCoordinator:(id)arg2;
- (long long)_dragState;
- (id)_encodableSubviews;
- (void)_ensureFocusedFloatingContentView;
- (long long)_focusStyle;
- (bool)_forwardsSystemLayoutFittingSizeToContentView:(id)arg1;
- (bool)_gestureRecognizerShouldBegin:(id)arg1;
- (void)_handleMenuGesture:(id)arg1;
- (bool)_highlightDescendantsWhenSelected;
- (bool)_isLayoutEngineSuspended;
- (bool)_isUsingOldStyleMultiselection;
- (void)_menuDismissed:(id)arg1;
- (void)_performAction:(SEL)arg1 sender:(id)arg2;
- (id)_preferredConfigurationForFocusAnimation:(long long)arg1 inContext:(id)arg2;
- (double)_selectionAnimationDuration;
- (id)_selectionSegueTemplate;
- (void)_setContentView:(id)arg1 addToHierarchy:(bool)arg2;
- (void)_setDragState:(long long)arg1;
- (void)_setFocusStyle:(long long)arg1;
- (void)_setHighlighted:(bool)arg1 animated:(bool)arg2;
- (void)_setLayoutAttributes:(id)arg1;
- (void)_setLayoutEngineSuspended:(bool)arg1;
- (void)_setOpaque:(bool)arg1 forSubview:(id)arg2;
- (void)_setSelected:(bool)arg1 animated:(bool)arg2;
- (void)_setSelectionSegueTemplate:(id)arg1;
- (void)_setupHighlightingSupport;
- (bool)_shouldSaveOpaqueStateForView:(id)arg1;
- (void)_teardownHighlightingSupportIfReady;
- (void)_updateBackgroundView;
- (void)_updateFocusedFloatingContentControlStateAnimated:(bool)arg1;
- (void)_updateFocusedFloatingContentControlStateInContext:(id)arg1 withAnimationCoordinator:(id)arg2 animated:(bool)arg3;
- (void)_updateGhostedAppearance;
- (void)_updateHighlightColorsForAnimationHalfwayPoint;
- (void)_updateHighlightColorsForView:(id)arg1 highlight:(bool)arg2;
- (id)backgroundView;
- (bool)canBecomeFocused;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)contentView;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)dragStateDidChange:(long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDragging;
- (bool)isEditing;
- (bool)isHighlighted;
- (bool)isSelected;
- (void)layoutSubviews;
- (void)paste:(id)arg1;
- (void)prepareForReuse;
- (id)selectedBackgroundView;
- (void)setBackgroundView:(id)arg1;
- (void)setContentView:(id)arg1;
- (void)setDragging:(bool)arg1;
- (void)setEditing:(bool)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setSelected:(bool)arg1;
- (void)setSelectedBackgroundView:(id)arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })systemLayoutSizeFittingSize:(struct CGSize { double x1; double x2; })arg1 withHorizontalFittingPriority:(float)arg2 verticalFittingPriority:(float)arg3;

// Image: /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI

- (void)downcastWithCellHandler:(id /* block */)arg1 listCellHandler:(id /* block */)arg2;

// Image: /System/Library/PrivateFrameworks/SiriUI.framework/SiriUI

- (void)unloadExpensiveViews;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
