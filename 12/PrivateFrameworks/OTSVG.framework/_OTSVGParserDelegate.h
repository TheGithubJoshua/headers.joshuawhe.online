<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_OTSVGParserDelegate.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/OTSVG.framework/_OTSVGParserDelegate.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/OTSVG.framework/OTSVG ()
 */

@interface _OTSVGParserDelegate : NSObject <NSXMLParserDelegate> {
    unsigned int  elementCount;
    bool  errorOccurred;
    struct unordered_map<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { 
        struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { 
            struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { 
                struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> {} **__value_; 
                    struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { 
                        struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { 
                            unsigned long long __value_; 
                        } __data_; 
                    } __value_; 
                } __ptr_; 
            } __bucket_list_; 
            struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> > > { 
                struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> { 
                    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> {} *__next_; 
                } __value_; 
            } __p1_; 
            struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true> > { 
                unsigned long long __value_; 
            } __p2_; 
            struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true> > { 
                float __value_; 
            } __p3_; 
        } __table_; 
    }  namespaces;
    struct unique_ptr<SVG::SVGElement, std::__1::default_delete<SVG::SVGElement> > { struct __compressed_pair<SVG::SVGElement *, std::__1::default_delete<SVG::SVGElement> > { struct SVGElement {} *x_1_1_1; } x1; } * root;
    unsigned int  skipDepth;
    struct vector<std::__1::reference_wrapper<SVG::Element>, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { 
        struct reference_wrapper<SVG::Element> {} *__begin_; 
        struct reference_wrapper<SVG::Element> {} *__end_; 
        struct __compressed_pair<std::__1::reference_wrapper<SVG::Element> *, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { 
            struct reference_wrapper<SVG::Element> {} *__value_; 
        } __end_cap_; 
    }  stack;
    unsigned int  unitsPerEm;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property unsigned int elementCount;
@property bool errorOccurred;
@property (readonly) unsigned long long hash;
@property /* Warning: unhandled struct encoding: '{unordered_map<std::__1::basic_string<char>' */ struct  namespaces; /* unknown property attribute:  true> >=f}}} */
@property /* Warning: unhandled struct encoding: '{unique_ptr<SVG::SVGElement' */ struct *root; /* unknown property attribute:  std::__1::default_delete<SVG::SVGElement> >=^{SVGElement}}} */
@property unsigned int skipDepth;
@property /* Warning: unhandled struct encoding: '{vector<std::__1::reference_wrapper<SVG::Element>' */ struct  stack; /* unknown property attribute:  std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > >=^{reference_wrapper<SVG::Element>}}} */
@property (readonly) Class superclass;
@property unsigned int unitsPerEm;

- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned int)elementCount;
- (bool)errorOccurred;
- (id)initWithUnitsPerEm:(unsigned int)arg1;
- (struct unordered_map<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; })namespaces;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 didEndMappingPrefix:(id)arg2;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (void)parser:(id)arg1 didStartMappingPrefix:(id)arg2 toURI:(id)arg3;
- (void)parser:(id)arg1 parseErrorOccurred:(id)arg2;
- (void)parser:(id)arg1 validationErrorOccurred:(id)arg2;
- (void)parserDidEndDocument:(id)arg1;
- (void)parserDidStartDocument:(id)arg1;
- (struct unique_ptr<SVG::SVGElement, std::__1::default_delete<SVG::SVGElement> > { struct __compressed_pair<SVG::SVGElement *, std::__1::default_delete<SVG::SVGElement> > { struct SVGElement {} *x_1_1_1; } x1; }*)root;
- (void)setElementCount:(unsigned int)arg1;
- (void)setErrorOccurred:(bool)arg1;
- (void)setNamespaces:(struct unordered_map<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > >, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > > > > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::stack<std::__1::basic_string<char>, std::__1::deque<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > > > >, void *> *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; } x1; })arg1;
- (void)setRoot:(struct unique_ptr<SVG::SVGElement, std::__1::default_delete<SVG::SVGElement> > { struct __compressed_pair<SVG::SVGElement *, std::__1::default_delete<SVG::SVGElement> > { struct SVGElement {} *x_1_1_1; } x1; }*)arg1;
- (void)setSkipDepth:(unsigned int)arg1;
- (void)setStack:(struct vector<std::__1::reference_wrapper<SVG::Element>, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { struct reference_wrapper<SVG::Element> {} *x1; struct reference_wrapper<SVG::Element> {} *x2; struct __compressed_pair<std::__1::reference_wrapper<SVG::Element> *, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { struct reference_wrapper<SVG::Element> {} *x_3_1_1; } x3; })arg1;
- (void)setUnitsPerEm:(unsigned int)arg1;
- (unsigned int)skipDepth;
- (struct vector<std::__1::reference_wrapper<SVG::Element>, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { struct reference_wrapper<SVG::Element> {} *x1; struct reference_wrapper<SVG::Element> {} *x2; struct __compressed_pair<std::__1::reference_wrapper<SVG::Element> *, std::__1::allocator<std::__1::reference_wrapper<SVG::Element> > > { struct reference_wrapper<SVG::Element> {} *x_3_1_1; } x3; })stack;
- (unsigned int)unitsPerEm;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
