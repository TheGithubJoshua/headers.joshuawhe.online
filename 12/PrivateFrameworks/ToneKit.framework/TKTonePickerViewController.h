<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TKTonePickerViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ToneKit.framework/TKTonePickerViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ToneKit.framework/ToneKit (1)
 */

@interface TKTonePickerViewController : UITableViewController <MPMediaPickerControllerDelegate, TKTonePickerControllerDelegate, TKTonePickerControllerDelegateInternal, TKTonePickerTableViewControllerHelper, TKTonePickerTableViewLayoutMarginsObserver, TKTonePickerTableViewSeparatorObserver, TKVibrationPickerViewControllerDelegate, TKVibrationPickerViewControllerDismissalDelegate> {
    UIImage * _checkmarkImage;
    <TKTonePickerViewControllerDelegate> * _delegate;
    bool  _isHandlingSwitchControlValueChanged;
    NSMutableArray * _mediaItems;
    MPMediaPickerController * _mediaPickerController;
    MPMusicPlayerController * _musicPlayer;
    bool  _needsScrollPositionReset;
    bool  _showsIgnoreMute;
    bool  _showsMedia;
    bool  _showsToneStore;
    bool  _showsToneStoreWasSetExplicitly;
    UIBarButtonItem * _storeBarButtonItem;
    <TKTonePickerStyleProvider> * _styleProvider;
    NSMutableArray * _switchControlsBeingObserved;
    TKTonePickerTableViewCellLayoutManager * _tableViewCellLayoutManagerForIndentedRows;
    TKTonePickerTableViewCellLayoutManager * _tableViewCellLayoutManagerForUnindentedRows;
    TKToneClassicsTableViewController * _toneClassicsTableViewController;
    TKTonePickerController * _tonePickerController;
    NSMutableDictionary * _toneSectionHeaderViews;
    TKVibrationPickerViewController * _vibrationPickerViewController;
}

@property (nonatomic, copy) NSString *accountIdentifier;
@property (nonatomic, readonly) long long alertType;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) NSString *defaultToneIdentifier;
@property (nonatomic) <TKTonePickerViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ignoreMute;
@property (getter=isMediaAtTop, nonatomic) bool mediaAtTop;
@property (getter=isNoneAtTop, nonatomic) bool noneAtTop;
@property (nonatomic, copy) NSString *noneString;
@property (nonatomic, copy) NSNumber *selectedMediaIdentifier;
@property (nonatomic, copy) NSString *selectedToneIdentifier;
@property (nonatomic, copy) NSString *selectedVibrationIdentifier;
@property (nonatomic) bool showsDefault;
@property (nonatomic) bool showsIgnoreMute;
@property (nonatomic) bool showsMedia;
@property (nonatomic) bool showsNone;
@property (nonatomic) bool showsNothingSelected;
@property (nonatomic) bool showsStoreButtonInNavigationBar;
@property (nonatomic) bool showsToneStore;
@property (nonatomic) bool showsVibrations;
@property (nonatomic, retain) <TKTonePickerStyleProvider> *styleProvider;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *topic;

- (void).cxx_destruct;
- (unsigned long long)_addMediaIdentifierToList:(id)arg1;
- (void)_configureTextColorOfLabelInCell:(id)arg1 shouldTintText:(bool)arg2 checked:(bool)arg3;
- (id)_customHeaderViewForHeaderInSection:(long long)arg1;
- (void)_didSelectMediaItemWithIdentifier:(id)arg1;
- (void)_didSelectToneWithIdentifier:(id)arg1;
- (void)_handleMediaLibraryDidChangeNotification;
- (void)_handleSwitchControlValueChanged:(id)arg1;
- (id)_mediaItemForIdentifier:(id)arg1;
- (double)_minimumTextIndentationForTableView:(id)arg1 withCheckmarkImage:(id)arg2;
- (id)_musicPlayer;
- (id)_pickerRowItemForIndexPath:(id)arg1;
- (void)_playMediaItemWithIdentifier:(id)arg1;
- (void)_reloadData;
- (void)_resetScrollingPosition;
- (bool)_shouldShowCheckmarkOnTrailingEdge;
- (void)_stopMediaItemPlaybackWithFadeOutDuration:(double)arg1;
- (void)_togglePlayMediaItemWithIdentifier:(id)arg1;
- (void)_updateCell:(id)arg1 withDownloadProgress:(float)arg2 animated:(bool)arg3;
- (void)_updateMinimumTextIndentation;
- (void)_updateStyleOfTableView:(id)arg1 forStyleProvider:(id)arg2;
- (id)accountIdentifier;
- (void)addMediaItems:(id)arg1;
- (long long)alertType;
- (void)applicationWillSuspend;
- (void)dealloc;
- (id)defaultToneIdentifier;
- (id)delegate;
- (bool)ignoreMute;
- (id)initWithAlertType:(long long)arg1;
- (id)initWithStyle:(long long)arg1;
- (bool)isMediaAtTop;
- (bool)isNoneAtTop;
- (void)layoutMarginsDidChangeInTonePickerTableView:(id)arg1;
- (void)loadView;
- (void)loadViewForTonePickerTableViewController:(id)arg1;
- (void)mediaPicker:(id)arg1 didPickMediaItems:(id)arg2;
- (void)mediaPickerDidCancel:(id)arg1;
- (id)noneString;
- (unsigned long long)numberOfMediaItemsInTonePickerController:(id)arg1;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (void)removeMediaItems:(id)arg1;
- (id)selectedIdentifier:(bool*)arg1;
- (id)selectedMediaIdentifier;
- (id)selectedToneIdentifier;
- (id)selectedTonePickerItem;
- (id)selectedVibrationIdentifier;
- (void)separatorColorDidChangeInTonePickerTableView:(id)arg1;
- (void)setAccountIdentifier:(id)arg1;
- (void)setDefaultToneIdentifier:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIgnoreMute:(bool)arg1;
- (void)setMediaAtTop:(bool)arg1;
- (void)setNoneAtTop:(bool)arg1;
- (void)setNoneString:(id)arg1;
- (void)setSelectedMediaIdentifier:(id)arg1;
- (void)setSelectedToneIdentifier:(id)arg1;
- (void)setSelectedVibrationIdentifier:(id)arg1;
- (void)setShowsDefault:(bool)arg1;
- (void)setShowsIgnoreMute:(bool)arg1;
- (void)setShowsMedia:(bool)arg1;
- (void)setShowsNone:(bool)arg1;
- (void)setShowsNothingSelected:(bool)arg1;
- (void)setShowsStoreButtonInNavigationBar:(bool)arg1;
- (void)setShowsToneStore:(bool)arg1;
- (void)setShowsVibrations:(bool)arg1;
- (void)setStyleProvider:(id)arg1;
- (void)setTopic:(id)arg1;
- (bool)showsDefault;
- (bool)showsIgnoreMute;
- (bool)showsMedia;
- (bool)showsNone;
- (bool)showsNothingSelected;
- (bool)showsStoreButtonInNavigationBar;
- (bool)showsToneStore;
- (bool)showsVibrations;
- (id)styleProvider;
- (id)tableView:(id)arg1 cellForPickerRowItem:(id)arg2;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2 forPickerRowItem:(id)arg3;
- (double)tableView:(id)arg1 heightForHeaderInSection:(long long)arg2;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (bool)tableView:(id)arg1 shouldHighlightRowAtIndexPath:(id)arg2;
- (id)tableView:(id)arg1 titleForFooterInSection:(long long)arg2;
- (id)tableView:(id)arg1 titleForHeaderInSection:(long long)arg2;
- (void)tableView:(id)arg1 updateCell:(id)arg2 withSeparatorForPickerRowItem:(id)arg3;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forPickerRowItem:(id)arg3;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (void)tonePickerController:(id)arg1 didDeletePickerRowItem:(id)arg2 completion:(id /* block */)arg3;
- (void)tonePickerController:(id)arg1 didInsertPickerRowItems:(id)arg2 andTonePickerSectionItems:(id)arg3;
- (void)tonePickerController:(id)arg1 didSelectMediaItemAtIndex:(unsigned long long)arg2 selectionDidChange:(bool)arg3;
- (void)tonePickerController:(id)arg1 didUpdateCheckedStatus:(bool)arg2 ofTonePickerItem:(id)arg3;
- (void)tonePickerController:(id)arg1 didUpdateDetailText:(id)arg2 ofTonePickerItem:(id)arg3;
- (void)tonePickerController:(id)arg1 didUpdateDownloadProgressOfTonePickerItem:(id)arg2;
- (void)tonePickerController:(id)arg1 didUpdateFooterText:(id)arg2 ofTonePickerSectionItem:(id)arg3;
- (void)tonePickerController:(id)arg1 didUpdateIgnoreMute:(bool)arg2 forTonePickerItem:(id)arg3 atIndexPath:(id)arg4;
- (void)tonePickerController:(id)arg1 didUpdateTonePickerItem:(id)arg2;
- (id)tonePickerController:(id)arg1 identifierOfMediaItemAtIndex:(unsigned long long)arg2;
- (unsigned long long)tonePickerController:(id)arg1 indexOfMediaItemWithIdentifier:(id)arg2;
- (void)tonePickerController:(id)arg1 requestsPresentingAlertWithTitle:(id)arg2 message:(id)arg3;
- (void)tonePickerController:(id)arg1 requestsPresentingToneClassicsPickerForItem:(id)arg2;
- (void)tonePickerController:(id)arg1 selectedMediaItemWithIdentifier:(id)arg2;
- (void)tonePickerController:(id)arg1 selectedToneWithIdentifier:(id)arg2;
- (id)tonePickerController:(id)arg1 titleOfMediaItemAtIndex:(unsigned long long)arg2;
- (void)tonePickerController:(id)arg1 willBeginPlaybackOfToneWithIdentifier:(id)arg2;
- (void)tonePickerControllerDidReloadTones:(id)arg1;
- (void)tonePickerControllerDidStopPlaying:(id)arg1 withFadeOutDuration:(double)arg2;
- (void)tonePickerControllerRequestsMediaItemsRefresh:(id)arg1;
- (void)tonePickerControllerRequestsPresentingMediaItemPicker:(id)arg1;
- (void)tonePickerControllerRequestsPresentingVibrationPicker:(id)arg1;
- (bool)tonePickerControllerShouldShowMedia:(id)arg1;
- (void)tonePickerTableViewControllerWillBeDeallocated:(id)arg1;
- (void)tonePickerTableViewWillDisappear:(bool)arg1;
- (id)topic;
- (void)updateCell:(id)arg1 withCheckedStatus:(bool)arg2 forTonePickerItem:(id)arg3;
- (void)updateCell:(id)arg1 withDetailText:(id)arg2;
- (void)updateDividerContentColorToMatchSeparatorColorInTableView:(id)arg1;
- (void)vibrationPickerViewController:(id)arg1 selectedVibrationWithIdentifier:(id)arg2;
- (void)vibrationPickerViewControllerWasDismissed:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
