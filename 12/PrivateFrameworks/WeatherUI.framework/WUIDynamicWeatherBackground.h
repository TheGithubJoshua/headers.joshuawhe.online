<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WUIDynamicWeatherBackground.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WeatherUI.framework/WUIDynamicWeatherBackground.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WeatherUI.framework/WeatherUI (1)
 */

@interface WUIDynamicWeatherBackground : UIView {
    NSCache * _backgroundCache;
    WUIWeatherCondition * _condition;
    CALayer * _currentBackground;
    CALayer * _darkeningLayer;
    WUIGradientLayer * _gradientLayer;
    CALayer * _rootLayer;
    NSNumber * _sunHeightOverride;
    CALayer * _transitionBackground;
}

@property (nonatomic, retain) NSCache *backgroundCache;
@property (nonatomic, retain) WUIWeatherCondition *condition;
@property (nonatomic) CALayer *currentBackground;
@property (nonatomic, retain) CALayer *darkeningLayer;
@property (nonatomic, retain) WUIGradientLayer *gradientLayer;
@property (nonatomic, retain) CALayer *rootLayer;
@property (nonatomic, copy) NSNumber *sunHeightOverride;
@property (nonatomic) CALayer *transitionBackground;

+ (void)beginReuseRestrictionForCity:(id)arg1;
+ (id)dequeueBackgroundForCity:(id)arg1;
+ (void)endReuseRestriction;
+ (void)enqueueBackground:(id)arg1;
+ (void)handleMemoryWarning;
+ (void)initialize;

- (void).cxx_destruct;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)addSublayer:(id)arg1;
- (void)animateTransitionToSize:(struct CGSize { double x1; double x2; })arg1;
- (id)backgroundCache;
- (void)completeTransitionWithSuccess:(bool)arg1;
- (id)condition;
- (id)currentBackground;
- (id)darkeningLayer;
- (double)darkeningLayerOpacityForDay:(bool)arg1;
- (void)darkerSystemColorsStatusDidChange:(id)arg1;
- (void)getTopColor:(id*)arg1 middleColor:(id*)arg2 bottomColor:(id*)arg3 gradientStopPoint:(double*)arg4 forCity:(id)arg5 date:(id)arg6;
- (id)gradientLayer;
- (bool)hasSublayer:(id)arg1;
- (id)imageLayerFromConditon:(long long)arg1 isDay:(bool)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)layoutSublayersOfLayer:(id)arg1;
- (struct { float x1; float x2; float x3; float x4; })mixedColorsForIndex:(long long)arg1 solarHeight:(float)arg2 condition:(long long)arg3 latitude:(float)arg4;
- (struct { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; })mixedGradientForSunheight:(double)arg1 hourAngle:(double)arg2 condition:(long long)arg3 latitude:(float)arg4;
- (id)rootLayer;
- (void)setBackgroundCache:(id)arg1;
- (void)setCity:(id)arg1;
- (void)setCity:(id)arg1 animate:(bool)arg2;
- (void)setCity:(id)arg1 animationDuration:(double)arg2;
- (void)setCondition:(id)arg1;
- (void)setCurrentBackground:(id)arg1;
- (void)setDarkeningLayer:(id)arg1;
- (void)setGradientLayer:(id)arg1;
- (void)setRootLayer:(id)arg1;
- (void)setSunHeightOverride:(id)arg1;
- (void)setTransitionBackground:(id)arg1;
- (id)springAnimationForKeyPath:(id)arg1 mass:(double)arg2 fromValue:(id)arg3 toValue:(id)arg4;
- (id)sunHeightOverride;
- (id)transitionBackground;
- (void)updateForDarkerSystemColors;
- (id)updateFromCity:(id)arg1 toCity:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
