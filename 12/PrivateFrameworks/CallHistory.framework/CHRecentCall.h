<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CHRecentCall.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CallHistory.framework/CHRecentCall.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CallHistory.framework/CallHistory (870.6)
 */

@interface CHRecentCall : CHSynchronizable <NSCopying, NSSecureCoding> {
    NSString * _addressBookCallerIDMultiValueId;
    NSString * _addressBookRecordId;
    NSValue * _addressBookRecordRef;
    bool  _answered;
    NSNumber * _bytesOfDataUsed;
    unsigned int  _callCategory;
    NSMutableArray * _callOccurrences;
    unsigned int  _callStatus;
    unsigned int  _callType;
    NSString * _callerId;
    unsigned int  _callerIdAvailability;
    NSString * _callerIdFormatted;
    bool  _callerIdIsBlocked;
    NSString * _callerIdLabel;
    NSString * _callerIdLocation;
    NSString * _callerName;
    NSString * _callerNetworkFirstName;
    NSString * _callerNetworkName;
    NSString * _callerNetworkSecondName;
    NSString * _clientAddressBookRecordId;
    NSString * _contactIdentifier;
    CNContact * _contactRef;
    NSDate * _date;
    NSString * _devicePhoneId;
    NSNumber * _disconnectedCause;
    double  _duration;
    long long  _handleType;
    NSString * _isoCountryCode;
    CHHandle * _localParticipantHandle;
    NSUUID * _localParticipantUUID;
    long long  _mediaType;
    NSString * _mobileCountryCode;
    NSString * _mobileNetworkCode;
    bool  _mobileOriginated;
    bool  _multiCall;
    NSUUID * _outgoingLocalParticipantUUID;
    <CHPhoneBookManagerProtocol> * _phoneBookManager;
    bool  _read;
    NSSet * _remoteParticipantHandles;
    NSString * _serviceProvider;
    NSNumber * _timeToEstablish;
    long long  _ttyType;
    NSString * _uniqueId;
    unsigned long long  _unreadCount;
}

@property (nonatomic, copy) NSString *addressBookCallerIDMultiValueId;
@property (nonatomic, copy) NSString *addressBookRecordId;
@property (copy) NSValue *addressBookRecordRef;
@property bool answered;
@property (nonatomic, copy) NSNumber *bytesOfDataUsed;
@property (nonatomic) unsigned int callCategory;
@property (nonatomic, retain) NSMutableArray *callOccurrences;
@property (nonatomic) unsigned int callStatus;
@property (nonatomic) unsigned int callType;
@property (copy) NSString *callerId;
@property (nonatomic) unsigned int callerIdAvailability;
@property (getter=callerIdForDisplay, nonatomic, copy) NSString *callerIdFormatted;
@property bool callerIdIsBlocked;
@property (nonatomic, copy) NSString *callerIdLabel;
@property (nonatomic, copy) NSString *callerIdLocation;
@property (nonatomic, copy) NSString *callerName;
@property (copy) NSString *callerNetworkFirstName;
@property (nonatomic, copy) NSString *callerNetworkName;
@property (copy) NSString *callerNetworkSecondName;
@property (copy) NSString *clientAddressBookRecordId;
@property (nonatomic, copy) NSString *contactIdentifier;
@property (nonatomic, copy) CNContact *contactRef;
@property (nonatomic, copy) NSDate *date;
@property (copy) NSString *devicePhoneId;
@property (copy) NSNumber *disconnectedCause;
@property (nonatomic) double duration;
@property (nonatomic) long long handleType;
@property (nonatomic, copy) NSString *isoCountryCode;
@property (nonatomic, retain) CHHandle *localParticipantHandle;
@property (nonatomic, retain) NSUUID *localParticipantUUID;
@property (nonatomic) long long mediaType;
@property (copy) NSString *mobileCountryCode;
@property (copy) NSString *mobileNetworkCode;
@property bool mobileOriginated;
@property bool multiCall;
@property (nonatomic, retain) NSUUID *outgoingLocalParticipantUUID;
@property (retain) <CHPhoneBookManagerProtocol> *phoneBookManager;
@property (nonatomic) bool read;
@property (nonatomic, copy) NSSet *remoteParticipantHandles;
@property (nonatomic, copy) NSString *serviceProvider;
@property (nonatomic, copy) NSNumber *timeToEstablish;
@property (nonatomic) long long ttyType;
@property (nonatomic, copy) NSString *uniqueId;
@property unsigned long long unreadCount;

+ (id)callCategoryAsString:(unsigned int)arg1;
+ (id)callHandleTypeAsString:(long long)arg1;
+ (id)callMediaTypeAsString:(long long)arg1;
+ (id)callStatusAsString:(unsigned int)arg1;
+ (id)callTTYTypeAsString:(long long)arg1;
+ (id)callTypeAsString:(unsigned int)arg1;
+ (unsigned int)categoryForCallType:(unsigned int)arg1;
+ (unsigned int)categoryForMediaType:(long long)arg1 andTTYType:(long long)arg2;
+ (unsigned int)getCallTypeForCategory:(unsigned int)arg1 andServiceProvider:(id)arg2;
+ (id)getLocationForCallerId:(id)arg1 andIsoCountryCode:(id)arg2;
+ (long long)mediaTypeForCallCategory:(unsigned int)arg1;
+ (id)serviceProviderForCallType:(unsigned int)arg1;
+ (bool)supportsSecureCoding;
+ (long long)ttyTypeForCallCategory:(unsigned int)arg1;
+ (id)unarchivedObjectClasses;
+ (id)unarchivedObjectFromData:(id)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (void)addOccurrencesFromArraySync:(id)arg1;
- (id)addressBookCallerIDMultiValueId;
- (void)addressBookChanged;
- (id)addressBookRecordId;
- (id)addressBookRecordIdSync;
- (id)addressBookRecordRef;
- (id)addressBookRecordRefSync;
- (bool)answered;
- (id)archivedDataWithError:(id*)arg1;
- (id)bytesOfDataUsed;
- (unsigned int)callCategory;
- (id)callOccurrences;
- (id)callOccurrencesAsStringSync;
- (id)callOccurrencesSync;
- (unsigned int)callStatus;
- (unsigned int)callType;
- (id)callerId;
- (unsigned int)callerIdAvailability;
- (id)callerIdForDisplay;
- (id)callerIdForDisplaySync;
- (bool)callerIdIsBlocked;
- (bool)callerIdIsEmailAddress;
- (bool)callerIdIsEmailAddressSync;
- (id)callerIdLabel;
- (id)callerIdLabelSync;
- (id)callerIdLocation;
- (id)callerIdLocationSync;
- (id)callerIdSubStringForDisplay;
- (id)callerName;
- (id)callerNameForDisplay;
- (id)callerNameForDisplaySync;
- (id)callerNameSync;
- (id)callerNetworkFirstName;
- (id)callerNetworkName;
- (id)callerNetworkSecondName;
- (bool)canCoalesceSyncWithCall:(id)arg1 withStrategy:(id)arg2;
- (bool)canCoalesceSyncWithCollapseIfEqualStrategyWithCall:(id)arg1;
- (bool)canCoalesceSyncWithRecentsStrategyWithCall:(id)arg1;
- (bool)canCoalesceWithCall:(id)arg1 withStrategy:(id)arg2;
- (id)clientAddressBookRecordId;
- (bool)coalesceWithCall:(id)arg1 withStrategy:(id)arg2;
- (id)coalescingHash;
- (id)contactIdentifier;
- (id)contactIdentifierSync;
- (id)contactRef;
- (id)contactRefSync;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)createOccurrenceArraySync;
- (id)date;
- (id)description;
- (id)descriptionInDepth;
- (id)devicePhoneId;
- (id)disconnectedCause;
- (double)duration;
- (void)encodeWithCoder:(id)arg1;
- (void)fetchAndSetContactIdentifierSync;
- (void)fetchAndSetFullContactSync;
- (void)fixCallTypeInfo;
- (id)getLocalizedStringSync:(id)arg1;
- (long long)handleType;
- (long long)handleTypeSync;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithQueue:(id)arg1;
- (bool)isAddressBookContactASuggestion;
- (bool)isAddressBookContactASuggestionSync;
- (bool)isEqual:(id)arg1;
- (id)isoCountryCode;
- (id)localParticipantHandle;
- (id)localParticipantUUID;
- (long long)mediaType;
- (id)mobileCountryCode;
- (id)mobileNetworkCode;
- (bool)mobileOriginated;
- (bool)multiCall;
- (unsigned long long)numberOfOccurrences;
- (unsigned long long)numberOfOccurrencesSync;
- (id)outgoingLocalParticipantUUID;
- (id)phoneBookManager;
- (bool)read;
- (id)remoteParticipantHandles;
- (bool)representsCallAtDate:(id)arg1;
- (id)serviceProvider;
- (void)setAddressBookCallerIDMultiValueId:(id)arg1;
- (void)setAddressBookRecordId:(id)arg1;
- (void)setAddressBookRecordRef:(id)arg1;
- (void)setAnswered:(bool)arg1;
- (void)setBytesOfDataUsed:(id)arg1;
- (void)setCallCategory:(unsigned int)arg1;
- (void)setCallOccurrences:(id)arg1;
- (void)setCallStatus:(unsigned int)arg1;
- (void)setCallType:(unsigned int)arg1;
- (void)setCallerId:(id)arg1;
- (void)setCallerIdAvailability:(unsigned int)arg1;
- (void)setCallerIdFormatted:(id)arg1;
- (void)setCallerIdIsBlocked:(bool)arg1;
- (void)setCallerIdLabel:(id)arg1;
- (void)setCallerIdLocation:(id)arg1;
- (void)setCallerName:(id)arg1;
- (void)setCallerNetworkFirstName:(id)arg1;
- (void)setCallerNetworkName:(id)arg1;
- (void)setCallerNetworkSecondName:(id)arg1;
- (void)setClientAddressBookRecordId:(id)arg1;
- (void)setContactIdentifier:(id)arg1;
- (void)setContactRef:(id)arg1;
- (void)setDate:(id)arg1;
- (void)setDevicePhoneId:(id)arg1;
- (void)setDisconnectedCause:(id)arg1;
- (void)setDuration:(double)arg1;
- (void)setHandleType:(long long)arg1;
- (void)setIsoCountryCode:(id)arg1;
- (void)setLocalParticipantHandle:(id)arg1;
- (void)setLocalParticipantUUID:(id)arg1;
- (void)setMediaType:(long long)arg1;
- (void)setMobileCountryCode:(id)arg1;
- (void)setMobileNetworkCode:(id)arg1;
- (void)setMobileOriginated:(bool)arg1;
- (void)setMultiCall:(bool)arg1;
- (void)setOutgoingLocalParticipantUUID:(id)arg1;
- (void)setPhoneBookManager:(id)arg1;
- (void)setRead:(bool)arg1;
- (void)setRemoteParticipantHandles:(id)arg1;
- (void)setServiceProvider:(id)arg1;
- (void)setTimeToEstablish:(id)arg1;
- (void)setTtyType:(long long)arg1;
- (void)setUniqueId:(id)arg1;
- (void)setUnreadCount:(unsigned long long)arg1;
- (id)timeToEstablish;
- (long long)ttyType;
- (id)uniqueId;
- (unsigned long long)unreadCount;
- (void)updateTTYAndMediaType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
