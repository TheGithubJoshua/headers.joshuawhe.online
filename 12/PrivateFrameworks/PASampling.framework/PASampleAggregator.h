<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PASampleAggregator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PASampling.framework/PASampleAggregator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PASampling.framework/PASampling (218.2)
 */

@interface PASampleAggregator : NSObject {
    NSMutableArray * _machTimestamps;
    PASampleAggregatorOptions * _options;
    double  _sampleIntervalLimit;
    PASampleTimeSeriesDataStore * _sampleStore;
    NSMutableSet * _tasks;
    NSMutableArray * _wallTimestamps;
}

@property bool aggregateStacksByProcess;
@property bool aggregateStacksByThread;
@property bool binaryImagesBeforeStacks;
@property (readonly) unsigned long long count;
@property bool displayAddressesInBlockedReasons;
@property bool displayAllBinaries;
@property bool displayAllHIDEvents;
@property bool displayBinaryImageAddresses;
@property bool displayBinaryImagesLackingNameOrPath;
@property bool displayBlockedReasons;
@property bool displayBlockedReasonsLackingProcessOwners;
@property bool displayBlockedThreads;
@property bool displayBody;
@property bool displayEmptyBootArgs;
@property bool displayFooter;
@property bool displayFrameAddresses;
@property bool displayHeader;
@property bool displayIdleWorkQueueThreads;
@property bool displayOffsetsFromUnnamedSymbols;
@property bool displayProcessFirstLastTimes;
@property bool displayRunnableThreads;
@property bool displayRunningThreads;
@property bool displayStateChangesOnIdleThreads;
@property bool displaySub1MsCpuTime;
@property bool displaySymbolInformation;
@property (copy) PASampleAggregatorOptions *options;
@property (readonly) double sampleIntervalLimit;
@property (readonly) PASampleTimeSeriesDataStore *sampleStore;
@property bool tabDelineateBinaryImageSections;
@property (retain) NSMutableSet *tasks;
@property bool verbose;

- (void).cxx_destruct;
- (void)_printToOutputStream:(id)arg1;
- (void)addSampleTask:(id)arg1 atTimestampIndex:(unsigned long long)arg2;
- (bool)aggregateStacksByProcess;
- (bool)aggregateStacksByThread;
- (bool)binaryImagesBeforeStacks;
- (unsigned long long)count;
- (bool)displayAddressesInBlockedReasons;
- (bool)displayAllBinaries;
- (bool)displayAllHIDEvents;
- (bool)displayBinaryImageAddresses;
- (bool)displayBinaryImagesLackingNameOrPath;
- (bool)displayBlockedReasons;
- (bool)displayBlockedReasonsLackingProcessOwners;
- (bool)displayBlockedThreads;
- (bool)displayBody;
- (bool)displayEmptyBootArgs;
- (bool)displayFooter;
- (bool)displayFrameAddresses;
- (bool)displayHeader;
- (bool)displayIdleWorkQueueThreads;
- (bool)displayOffsetsFromUnnamedSymbols;
- (bool)displayProcessFirstLastTimes;
- (bool)displayRunnableThreads;
- (bool)displayRunningThreads;
- (bool)displayStateChangesOnIdleThreads;
- (bool)displaySub1MsCpuTime;
- (bool)displaySymbolInformation;
- (unsigned long long)firstTimestampIndexAfterMachTime:(double)arg1;
- (unsigned long long)firstTimestampIndexAfterWallTime:(double)arg1;
- (id)initWithSampleStore:(id)arg1;
- (double)machTimeAtTimestampIndex:(unsigned long long)arg1;
- (id)newAggregatedTaskForIdentificationPurposesWithSampleTask:(id)arg1;
- (id)newAggregatedTaskForSampleTask:(id)arg1 atTimestampIndex:(unsigned long long)arg2;
- (id)options;
- (void)printDateToOutputStream:(id)arg1;
- (void)printFooterToOutputStream:(id)arg1;
- (void)printHeaderToOutputStream:(id)arg1;
- (void)printToMutableData:(id)arg1;
- (void)printToStream:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1;
- (double)sampleIntervalLimit;
- (id)sampleStore;
- (void)setAggregateStacksByProcess:(bool)arg1;
- (void)setAggregateStacksByThread:(bool)arg1;
- (void)setBinaryImagesBeforeStacks:(bool)arg1;
- (void)setDisplayAddressesInBlockedReasons:(bool)arg1;
- (void)setDisplayAllBinaries:(bool)arg1;
- (void)setDisplayAllHIDEvents:(bool)arg1;
- (void)setDisplayBinaryImageAddresses:(bool)arg1;
- (void)setDisplayBinaryImagesLackingNameOrPath:(bool)arg1;
- (void)setDisplayBlockedReasons:(bool)arg1;
- (void)setDisplayBlockedReasonsLackingProcessOwners:(bool)arg1;
- (void)setDisplayBlockedThreads:(bool)arg1;
- (void)setDisplayBody:(bool)arg1;
- (void)setDisplayEmptyBootArgs:(bool)arg1;
- (void)setDisplayFooter:(bool)arg1;
- (void)setDisplayFrameAddresses:(bool)arg1;
- (void)setDisplayHeader:(bool)arg1;
- (void)setDisplayIdleWorkQueueThreads:(bool)arg1;
- (void)setDisplayOffsetsFromUnnamedSymbols:(bool)arg1;
- (void)setDisplayProcessFirstLastTimes:(bool)arg1;
- (void)setDisplayRunnableThreads:(bool)arg1;
- (void)setDisplayRunningThreads:(bool)arg1;
- (void)setDisplayStateChangesOnIdleThreads:(bool)arg1;
- (void)setDisplaySub1MsCpuTime:(bool)arg1;
- (void)setDisplaySymbolInformation:(bool)arg1;
- (void)setHeaderOnly:(bool)arg1;
- (void)setOptions:(id)arg1;
- (void)setSamples:(id)arg1;
- (void)setTabDelineateBinaryImageSections:(bool)arg1;
- (void)setTasks:(id)arg1;
- (void)setVerbose:(bool)arg1;
- (id)sortedTasks;
- (bool)tabDelineateBinaryImageSections;
- (id)tasks;
- (bool)verbose;
- (double)wallTimeAtTimestampIndex:(unsigned long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
