<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PASampleThreadData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PASampling.framework/PASampleThreadData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PASampling.framework/PASampling (218.2)
 */

@interface PASampleThreadData : NSObject <PASerializable> {
    int  currentScheduledPriority;
    unsigned long long  cycles;
    unsigned long long  dispatchQueueId;
    unsigned long long  instructions;
    unsigned char  ioTier;
    unsigned int  isDarwinBG;
    unsigned int  isGlobalForcedIdle;
    unsigned int  isIOPassive;
    unsigned int  isIdleWorkQueue;
    unsigned int  isRunning;
    unsigned int  isSuspended;
    PASampleFrame * leafKernelFrame;
    PASampleFrame * leafUserFrame;
    NSString * name;
    int  schedulerFlags;
    int  state;
    int  staticPriority;
    unsigned long long  systemTimeInNs;
    unsigned long long  threadId;
    BOOL  threadQos;
    BOOL  threadQosIpcOverride;
    BOOL  threadQosPromote;
    BOOL  threadQosSyncIpcOverride;
    BOOL  threadRequestedQos;
    BOOL  threadRequestedQosOverride;
    unsigned long long  userTimeInNs;
    unsigned long long  voucherIdentifier;
    PASampleWaitInfo * waitInfo;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) bool hasAnyInfo;
@property (readonly) bool hasDispatchQueue;
@property (readonly) bool hasValidPowerstatsFlags;
@property (readonly) unsigned long long hash;
@property (readonly) bool isAbortingInterruptibleWaits;
@property (readonly) bool isAbortingInterruptibleWaitsAtSafePoints;
@property (readonly) bool isHaltedAtTermination;
@property (readonly) bool isProcessorIdleThread;
@property (readonly) bool isRunnable;
@property (readonly) bool isStopped;
@property (readonly) bool isWaiting;
@property (readonly) bool isWaitingUninterruptibly;
@property (readonly) unsigned int powerstatsFlags;
@property (readonly) Class superclass;

+ (id)classDictionaryKey;
+ (id)newInstanceWithoutReferencesFromBufferPosition:(const void*)arg1;

- (void).cxx_destruct;
- (bool)addSelfToBufferAtPosition:(void*)arg1 withCompletedSerializationDictionary:(id)arg2;
- (void)addSelfToSerializationDictionary:(id)arg1;
- (id)debugDescription;
- (bool)hasAnyInfo;
- (bool)hasDispatchQueue;
- (bool)hasValidPowerstatsFlags;
- (unsigned long long)hash;
- (id)initWithKCDataStackshotDeltaThreadV2:(const struct thread_delta_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; unsigned int x6; short x7; short x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; }*)arg1 withName:(id)arg2 andLeafUserFrame:(id)arg3 andLeafKernelFrame:(id)arg4 andOldThreadData:(id)arg5 andWaitInfo:(id)arg6;
- (id)initWithKCDataStackshotDeltaThreadV3:(const struct thread_delta_snapshot_v3 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; unsigned int x6; short x7; short x8; unsigned char x9; unsigned char x10; unsigned char x11; unsigned char x12; unsigned long long x13; unsigned long long x14; }*)arg1 withName:(id)arg2 andLeafUserFrame:(id)arg3 andLeafKernelFrame:(id)arg4 andOldThreadData:(id)arg5 andWaitInfo:(id)arg6 threadPolicyVersion:(unsigned int)arg7;
- (id)initWithKCDataStackshotThreadV2:(const struct thread_snapshot_v2 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; short x14; short x15; unsigned char x16; unsigned char x17; unsigned char x18; unsigned char x19; }*)arg1 withName:(id)arg2 andLeafUserFrame:(id)arg3 andLeafKernelFrame:(id)arg4 andMachTimebase:(struct mach_timebase_info { unsigned int x1; unsigned int x2; })arg5 andWaitInfo:(id)arg6;
- (id)initWithKCDataStackshotThreadV4:(const struct thread_snapshot_v4 { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned long long x6; unsigned long long x7; unsigned long long x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; unsigned int x12; unsigned int x13; short x14; short x15; unsigned char x16; unsigned char x17; unsigned char x18; unsigned char x19; unsigned long long x20; unsigned long long x21; unsigned long long x22; }*)arg1 withName:(id)arg2 leafUserFrame:(id)arg3 leafKernelFrame:(id)arg4 machTimebase:(struct mach_timebase_info { unsigned int x1; unsigned int x2; })arg5 waitInfo:(id)arg6 threadPolicyVersion:(unsigned int)arg7 threadInstructionCycles:(const struct instrs_cycles_snapshot { unsigned long long x1; unsigned long long x2; }*)arg8;
- (id)initWithStackshotThread:(id)arg1 andLeafUserFrame:(id)arg2 andLeafKernelFrame:(id)arg3;
- (id)initWithTid:(unsigned long long)arg1;
- (bool)isAbortingInterruptibleWaits;
- (bool)isAbortingInterruptibleWaitsAtSafePoints;
- (bool)isEqual:(id)arg1;
- (bool)isHaltedAtTermination;
- (bool)isProcessorIdleThread;
- (bool)isRunnable;
- (bool)isStackEqualTo:(id)arg1;
- (bool)isStopped;
- (bool)isWaiting;
- (bool)isWaitingUninterruptibly;
- (void)populateReferencesUsingBufferPosition:(const void*)arg1 andDeserializationDictionary:(id)arg2 andDataBufferDictionary:(id)arg3;
- (unsigned int)powerstatsFlags;
- (unsigned long long)sizeInBytesForSerializedVersion;
- (id)stack;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
