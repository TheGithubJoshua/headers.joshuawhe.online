<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CUIPSDImageRef.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreUI.framework/CUIPSDImageRef.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreUI.framework/CoreUI (499.12)
 */

@interface CUIPSDImageRef : NSObject {
    int  _file;
    bool  _parsedForLayers;
    NSString * _path;
    struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_5_3_1; struct CPSDLayerRecord {} *x_5_3_2; struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_3_4_1; } x_5_3_3; } x_4_2_5; struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_6_3_1; struct CPSDLayerChannelGroup {} **x_6_3_2; struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_3_4_1; } x_6_3_3; } x_4_2_6; } x_22_1_4; struct CPSDGlobalLayerMaskInfo { int (**x_5_2_1)(); struct CPSDFile {} *x_5_2_2; unsigned int x_5_2_3; unsigned short x_5_2_4; unsigned short x_5_2_5[4]; unsigned short x_5_2_6; unsigned char x_5_2_7; unsigned int x_5_2_8; } x_22_1_5; } x22; } * _psd;
    _CUIPSDSublayerInfo * _rootLayers;
}

@property (nonatomic) int file;
@property (nonatomic, copy) NSString *path;
@property (nonatomic) struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; /* Warning: unhandled struct encoding: '{vector<CPSDLayerRecord' */ struct x_4_2_5; } x_22_1_4; } x22; }*psd; /* unknown property attribute:  std::__1::allocator<CPSDLayerChannelGroup *> >=^^{CPSDLayerChannelGroup}}}}{CPSDGlobalLayerMaskInfo=^^?^{CPSDFile}IS[4S]SCI}{CPSDAdditionalLayerInfo=^^?^{CPSDFile}I^{CPSDAdditionalLayerInfoItem}}}C} */

+ (bool)isValidPSDResourceAtPath:(id)arg1;
+ (bool)isValidPSDResourceAtPath:(id)arg1 withImageInfo:(struct _PSDImageInfo { unsigned int x1; unsigned int x2; unsigned short x3; unsigned short x4; unsigned short x5; int x6; }*)arg2;
+ (bool)isValidPSDResourceAtPath:(id)arg1 withLayerCount:(unsigned int*)arg2;
+ (bool)isValidPSDResourceAtPath:(id)arg1 withLayerCount:(unsigned int*)arg2 validateLayers:(bool)arg3;

- (unsigned int)_absoluteIndexOfRootLayer:(unsigned int)arg1;
- (id)_bevelEmbossFromLayerEffectsInfo:(struct CPSDObjectEffectsLayerInfo { int (**x1)(); struct CPSDFile {} *x2; unsigned int x3; unsigned long long x4; char *x5; unsigned int x6; unsigned int x7; struct CPSDAdditionalLayerInfoItem {} *x8; struct CPSDString { unsigned int x_9_1_1; unsigned short *x_9_1_2; } x9; char *x10; unsigned int x11; unsigned int x12; unsigned int x13; struct vector<CPSDActionKeyedItem, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_14_1_1; struct CPSDActionKeyedItem {} *x_14_1_2; struct __compressed_pair<CPSDActionKeyedItem *, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_3_2_1; } x_14_1_3; } x14; unsigned int x15; unsigned int x16; }*)arg1;
- (int)_blendModeAtAbsluteIndex:(unsigned int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsAtAbsoluteIndex:(unsigned int)arg1;
- (id)_colorOverlayFromLayerEffectsInfo:(struct CPSDObjectEffectsLayerInfo { int (**x1)(); struct CPSDFile {} *x2; unsigned int x3; unsigned long long x4; char *x5; unsigned int x6; unsigned int x7; struct CPSDAdditionalLayerInfoItem {} *x8; struct CPSDString { unsigned int x_9_1_1; unsigned short *x_9_1_2; } x9; char *x10; unsigned int x11; unsigned int x12; unsigned int x13; struct vector<CPSDActionKeyedItem, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_14_1_1; struct CPSDActionKeyedItem {} *x_14_1_2; struct __compressed_pair<CPSDActionKeyedItem *, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_3_2_1; } x_14_1_3; } x14; unsigned int x15; unsigned int x16; }*)arg1;
- (struct CGImage { }*)_copyCGImageAtAbsoluteIndex:(unsigned int)arg1;
- (id)_copySublayerInfoAtAbsoluteIndex:(unsigned int)arg1 atRoot:(bool)arg2;
- (id)_createMaskFromSlice:(unsigned int)arg1 atAbsoluteIndex:(unsigned int)arg2;
- (id)_dropShadowFromLayerEffectsInfo:(struct CPSDObjectEffectsLayerInfo { int (**x1)(); struct CPSDFile {} *x2; unsigned int x3; unsigned long long x4; char *x5; unsigned int x6; unsigned int x7; struct CPSDAdditionalLayerInfoItem {} *x8; struct CPSDString { unsigned int x_9_1_1; unsigned short *x_9_1_2; } x9; char *x10; unsigned int x11; unsigned int x12; unsigned int x13; struct vector<CPSDActionKeyedItem, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_14_1_1; struct CPSDActionKeyedItem {} *x_14_1_2; struct __compressed_pair<CPSDActionKeyedItem *, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_3_2_1; } x_14_1_3; } x14; unsigned int x15; unsigned int x16; }*)arg1;
- (double)_fillOpacityAtAbsoluteIndex:(unsigned int)arg1;
- (id)_fillSampleAtAbsoluteIndex:(unsigned int)arg1;
- (id)_gradientAtAbsoluteIndex:(unsigned int)arg1;
- (id)_gradientOverlayFromLayerEffectsAtAbsoluteIndex:(unsigned int)arg1;
- (id)_imageAtAbsoluteIndex:(unsigned int)arg1 isZeroSizeImage:(bool*)arg2;
- (id)_imageFromSlice:(unsigned int)arg1 atAbsoluteIndex:(unsigned int)arg2 isEmptyImage:(bool*)arg3;
- (id)_innerGlowFromLayerEffectsInfo:(struct CPSDObjectEffectsLayerInfo { int (**x1)(); struct CPSDFile {} *x2; unsigned int x3; unsigned long long x4; char *x5; unsigned int x6; unsigned int x7; struct CPSDAdditionalLayerInfoItem {} *x8; struct CPSDString { unsigned int x_9_1_1; unsigned short *x_9_1_2; } x9; char *x10; unsigned int x11; unsigned int x12; unsigned int x13; struct vector<CPSDActionKeyedItem, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_14_1_1; struct CPSDActionKeyedItem {} *x_14_1_2; struct __compressed_pair<CPSDActionKeyedItem *, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_3_2_1; } x_14_1_3; } x14; unsigned int x15; unsigned int x16; }*)arg1;
- (id)_innerShadowFromLayerEffectsInfo:(struct CPSDObjectEffectsLayerInfo { int (**x1)(); struct CPSDFile {} *x2; unsigned int x3; unsigned long long x4; char *x5; unsigned int x6; unsigned int x7; struct CPSDAdditionalLayerInfoItem {} *x8; struct CPSDString { unsigned int x_9_1_1; unsigned short *x_9_1_2; } x9; char *x10; unsigned int x11; unsigned int x12; unsigned int x13; struct vector<CPSDActionKeyedItem, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_14_1_1; struct CPSDActionKeyedItem {} *x_14_1_2; struct __compressed_pair<CPSDActionKeyedItem *, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_3_2_1; } x_14_1_3; } x14; unsigned int x15; unsigned int x16; }*)arg1;
- (id)_layerEffectsAtAbsoluteIndex:(unsigned int)arg1;
- (int)_layerIndexFromLayerNames:(id)arg1 indexRangeBegin:(int)arg2 indexRangeEnd:(int)arg3 isTopLevel:(bool)arg4;
- (id)_layerInfo;
- (id)_layerRefAtAbsoluteIndex:(unsigned int)arg1;
- (void)_logInvalidAbsoluteIndex:(unsigned int)arg1 psd:(struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_5_3_1; struct CPSDLayerRecord {} *x_5_3_2; struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_3_4_1; } x_5_3_3; } x_4_2_5; struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_6_3_1; struct CPSDLayerChannelGroup {} **x_6_3_2; struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_3_4_1; } x_6_3_3; } x_4_2_6; } x_22_1_4; struct CPSDGlobalLayerMaskInfo { int (**x_5_2_1)(); struct CPSDFile {} *x_5_2_2; unsigned int x_5_2_3; unsigned short x_5_2_4; unsigned short x_5_2_5[4]; unsigned short x_5_2_6; unsigned char x_5_2_7; unsigned int x_5_2_8; } x_22_1_5; } x22; }*)arg2;
- (id)_nameAtAbsoluteIndex:(unsigned int)arg1;
- (id)_namesOfSublayers:(id)arg1;
- (double)_opacityAtAbsoluteIndex:(unsigned int)arg1;
- (id)_outerGlowFromLayerEffectsInfo:(struct CPSDObjectEffectsLayerInfo { int (**x1)(); struct CPSDFile {} *x2; unsigned int x3; unsigned long long x4; char *x5; unsigned int x6; unsigned int x7; struct CPSDAdditionalLayerInfoItem {} *x8; struct CPSDString { unsigned int x_9_1_1; unsigned short *x_9_1_2; } x9; char *x10; unsigned int x11; unsigned int x12; unsigned int x13; struct vector<CPSDActionKeyedItem, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_14_1_1; struct CPSDActionKeyedItem {} *x_14_1_2; struct __compressed_pair<CPSDActionKeyedItem *, std::__1::allocator<CPSDActionKeyedItem> > { struct CPSDActionKeyedItem {} *x_3_2_1; } x_14_1_3; } x14; unsigned int x15; unsigned int x16; }*)arg1;
- (id)_patternFromSlice:(unsigned int)arg1 atAbsoluteIndex:(unsigned int)arg2 isZeroSizeImage:(bool*)arg3;
- (struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_5_3_1; struct CPSDLayerRecord {} *x_5_3_2; struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_3_4_1; } x_5_3_3; } x_4_2_5; struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_6_3_1; struct CPSDLayerChannelGroup {} **x_6_3_2; struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_3_4_1; } x_6_3_3; } x_4_2_6; } x_22_1_4; struct CPSDGlobalLayerMaskInfo { int (**x_5_2_1)(); struct CPSDFile {} *x_5_2_2; unsigned int x_5_2_3; unsigned short x_5_2_4; unsigned short x_5_2_5[4]; unsigned short x_5_2_6; unsigned char x_5_2_7; unsigned int x_5_2_8; } x_22_1_5; } x22; }*)_psdFileWithLayers:(bool)arg1;
- (struct CPSDLayerRecord { int (**x1)(); struct CPSDFile {} *x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned short x7; struct vector<CPSDChannelLengthInfo, std::__1::allocator<CPSDChannelLengthInfo> > { struct CPSDChannelLengthInfo {} *x_8_1_1; struct CPSDChannelLengthInfo {} *x_8_1_2; struct __compressed_pair<CPSDChannelLengthInfo *, std::__1::allocator<CPSDChannelLengthInfo> > { struct CPSDChannelLengthInfo {} *x_3_2_1; } x_8_1_3; } x8; unsigned int x9; unsigned int x10; unsigned char x11; unsigned char x12; unsigned char x13; unsigned char x14; unsigned int x15; struct CPSDLayerMaskData { int (**x_16_1_1)(); struct CPSDFile {} *x_16_1_2; unsigned int x_16_1_3; unsigned int x_16_1_4; unsigned int x_16_1_5; unsigned int x_16_1_6; unsigned int x_16_1_7; unsigned char x_16_1_8; unsigned char x_16_1_9; unsigned short x_16_1_10; unsigned int x_16_1_11; unsigned int x_16_1_12; unsigned int x_16_1_13; unsigned int x_16_1_14; unsigned char x_16_1_15; unsigned char x_16_1_16; } x16; struct CPSDLayerBlendingRanges { int (**x_17_1_1)(); struct CPSDFile {} *x_17_1_2; unsigned int x_17_1_3; unsigned int x_17_1_4; unsigned int x_17_1_5; struct vector<CPSDChannelBlendingInfo, std::__1::allocator<CPSDChannelBlendingInfo> > { struct CPSDChannelBlendingInfo {} *x_6_2_1; struct CPSDChannelBlendingInfo {} *x_6_2_2; struct __compressed_pair<CPSDChannelBlendingInfo *, std::__1::allocator<CPSDChannelBlendingInfo> > { struct CPSDChannelBlendingInfo {} *x_3_3_1; } x_6_2_3; } x_17_1_6; } x17; }*)_psdLayerRecordAtAbsoluteIndex:(unsigned int)arg1;
- (bool)_treatDividerAsLayer;
- (bool)_visibilityAtAbsoluteIndex:(unsigned int)arg1;
- (int)absoluteLayerIndexFromLayerNames:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsAtLayer:(unsigned int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForSlice:(unsigned int)arg1;
- (int)cgBlendModeForPSDLayerOrLayerEffectBlendMode:(unsigned int)arg1;
- (id)colorFromDocumentColor:(double*)arg1;
- (id)compositeImage;
- (struct CGColorSpace { }*)copyColorSpace;
- (struct CGImage { }*)createCGImageAtLayer:(unsigned int)arg1;
- (struct CGImage { }*)createCompositeCGImage;
- (void)dealloc;
- (void)enumerateLayersUsingBlock:(id /* block */)arg1;
- (int)file;
- (id)fillSampleAtLayer:(unsigned int)arg1;
- (id)gradientAtLayer:(unsigned int)arg1;
- (id)imageAtLayer:(unsigned int)arg1;
- (id)imageAtLayer:(unsigned int)arg1 isZeroSizeImage:(bool*)arg2;
- (id)imageFromRef:(struct CGImage { }*)arg1;
- (id)imageFromSlice:(unsigned int)arg1 atAbsoluteLayer:(unsigned int)arg2;
- (id)imageFromSlice:(unsigned int)arg1 atLayer:(unsigned int)arg2;
- (id)imageFromSlice:(unsigned int)arg1 atLayer:(unsigned int)arg2 isEmptyImage:(bool*)arg3;
- (struct _PSDImageInfo { unsigned int x1; unsigned int x2; unsigned short x3; unsigned short x4; unsigned short x5; int x6; })imageInfo;
- (id)initWithPath:(id)arg1;
- (id)layerEnumerator;
- (id)layerNames;
- (id)layerRefAtIndex:(unsigned int)arg1;
- (bool)loadPSDFileWithLayers:(bool)arg1;
- (id)maskFromCompositeAlphaChannel:(long long)arg1;
- (id)maskFromSlice:(unsigned int)arg1 atLayer:(unsigned int)arg2;
- (id)metadataString;
- (struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })metricsInAlphaChannel:(long long)arg1 forRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })metricsInMask:(id)arg1 forRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (unsigned int)numberOfChannels;
- (unsigned int)numberOfLayers;
- (unsigned int)numberOfSlices;
- (bool)openImageFile;
- (id)path;
- (id)patternFromSlice:(unsigned int)arg1 atLayer:(unsigned int)arg2;
- (id)patternFromSlice:(unsigned int)arg1 atLayer:(unsigned int)arg2 isZeroSizeImage:(bool*)arg3;
- (struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_5_3_1; struct CPSDLayerRecord {} *x_5_3_2; struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_3_4_1; } x_5_3_3; } x_4_2_5; struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_6_3_1; struct CPSDLayerChannelGroup {} **x_6_3_2; struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_3_4_1; } x_6_3_3; } x_4_2_6; } x_22_1_4; struct CPSDGlobalLayerMaskInfo { int (**x_5_2_1)(); struct CPSDFile {} *x_5_2_2; unsigned int x_5_2_3; unsigned short x_5_2_4; unsigned short x_5_2_5[4]; unsigned short x_5_2_6; unsigned char x_5_2_7; unsigned int x_5_2_8; } x_22_1_5; } x22; }*)psd;
- (struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_5_3_1; struct CPSDLayerRecord {} *x_5_3_2; struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_3_4_1; } x_5_3_3; } x_4_2_5; struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_6_3_1; struct CPSDLayerChannelGroup {} **x_6_3_2; struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_3_4_1; } x_6_3_3; } x_4_2_6; } x_22_1_4; struct CPSDGlobalLayerMaskInfo { int (**x_5_2_1)(); struct CPSDFile {} *x_5_2_2; unsigned int x_5_2_3; unsigned short x_5_2_4; unsigned short x_5_2_5[4]; unsigned short x_5_2_6; unsigned char x_5_2_7; unsigned int x_5_2_8; } x_22_1_5; } x22; }*)psdFile;
- (struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_5_3_1; struct CPSDLayerRecord {} *x_5_3_2; struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_3_4_1; } x_5_3_3; } x_4_2_5; struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_6_3_1; struct CPSDLayerChannelGroup {} **x_6_3_2; struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_3_4_1; } x_6_3_3; } x_4_2_6; } x_22_1_4; struct CPSDGlobalLayerMaskInfo { int (**x_5_2_1)(); struct CPSDFile {} *x_5_2_2; unsigned int x_5_2_3; unsigned short x_5_2_4; unsigned short x_5_2_5[4]; unsigned short x_5_2_6; unsigned char x_5_2_7; unsigned int x_5_2_8; } x_22_1_5; } x22; }*)psdFileForComposite;
- (void)setFile:(int)arg1;
- (void)setPath:(id)arg1;
- (void)setPsd:(struct CPSDFile { int (**x1)(); struct CPSDFile {} *x2; char *x3; unsigned int x4; unsigned int x5; unsigned char x6; unsigned int x7; unsigned int x8; unsigned short x9; unsigned long long x10; unsigned short x11; unsigned short x12; char *x13; struct CPSDChannelLengthInfo {} *x14; char **x15; unsigned short x16; void *x17; unsigned char x18; struct CPSDHeader { int (**x_19_1_1)(); struct CPSDFile {} *x_19_1_2; unsigned int x_19_1_3; unsigned short x_19_1_4; unsigned char x_19_1_5[6]; unsigned short x_19_1_6; unsigned int x_19_1_7; unsigned int x_19_1_8; unsigned short x_19_1_9; unsigned short x_19_1_10; } x19; struct CPSDColorModeData { int (**x_20_1_1)(); struct CPSDFile {} *x_20_1_2; unsigned int x_20_1_3; char *x_20_1_4; } x20; struct CPSDImageResources { int (**x_21_1_1)(); struct CPSDFile {} *x_21_1_2; unsigned int x_21_1_3; struct CPSDImageResourceBlock {} *x_21_1_4; } x21; struct CPSDLayerAndMaskInfo { int (**x_22_1_1)(); struct CPSDFile {} *x_22_1_2; unsigned int x_22_1_3; struct CPSDLayerInfo { int (**x_4_2_1)(); struct CPSDFile {} *x_4_2_2; unsigned int x_4_2_3; unsigned short x_4_2_4; struct vector<CPSDLayerRecord, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_5_3_1; struct CPSDLayerRecord {} *x_5_3_2; struct __compressed_pair<CPSDLayerRecord *, std::__1::allocator<CPSDLayerRecord> > { struct CPSDLayerRecord {} *x_3_4_1; } x_5_3_3; } x_4_2_5; struct vector<CPSDLayerChannelGroup *, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_6_3_1; struct CPSDLayerChannelGroup {} **x_6_3_2; struct __compressed_pair<CPSDLayerChannelGroup **, std::__1::allocator<CPSDLayerChannelGroup *> > { struct CPSDLayerChannelGroup {} **x_3_4_1; } x_6_3_3; } x_4_2_6; } x_22_1_4; struct CPSDGlobalLayerMaskInfo { int (**x_5_2_1)(); struct CPSDFile {} *x_5_2_2; unsigned int x_5_2_3; unsigned short x_5_2_4; unsigned short x_5_2_5[4]; unsigned short x_5_2_6; unsigned char x_5_2_7; unsigned int x_5_2_8; } x_22_1_5; } x22; }*)arg1;
- (struct CGSize { double x1; double x2; })size;
- (bool)visibilityAtLayer:(unsigned int)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
