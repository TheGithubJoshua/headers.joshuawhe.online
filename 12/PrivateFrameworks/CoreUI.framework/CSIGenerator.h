<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CSIGenerator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreUI.framework/CSIGenerator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreUI.framework/CoreUI (499.12)
 */

@interface CSIGenerator : NSObject {
    bool  _allowsDeepmapImageCompression;
    bool  _allowsHevcCompression;
    bool  _allowsMultiPassEncoding;
    bool  _allowsOptimalRowbytesPacking;
    bool  _allowsPaletteImageCompression;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _alphaCroppedFrame;
    NSString * _assetPackIdentifier;
    NSMutableArray * _bitmaps;
    int  _blendMode;
    bool  _clampMetrics;
    NSArray * _colorComponents;
    short  _colorSpaceID;
    double  _compressionQuality;
    long long  _compressionType;
    NSArray * _containedNamedElements;
    CUIShapeEffectPreset * _effectPreset;
    int  _exifOrientation;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _externalReferenceFrame;
    NSSet * _externalTags;
    CUIPSDGradient * _gradient;
    bool  _isCubeMap;
    bool  _isExcludedFromFilter;
    bool  _isFPOHint;
    bool  _isFlippable;
    bool  _isTintable;
    bool  _isVectorBased;
    NSMutableArray * _layerReferences;
    short  _layout;
    unsigned short  _linkLayout;
    NSMutableArray * _metrics;
    NSMutableArray * _mipReferences;
    NSDate * _modtime;
    NSString * _name;
    int  _objectVersion;
    double  _opacity;
    bool  _optOutOfThinning;
    struct CGSize { 
        double width; 
        double height; 
    }  _originalUncroppedSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _physicalSizeInMeters;
    unsigned int  _pixelFormat;
    bool  _preservedVectorRepresentation;
    NSData * _rawData;
    NSDictionary * _renditionProperties;
    unsigned long long  _rowbytes;
    unsigned int  _scaleFactor;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    NSDictionary * _sizesByIndex;
    NSMutableArray * _slices;
    NSString * _systemColorName;
    long long  _templateRenderingMode;
    long long  _textureFormat;
    long long  _textureInterpretation;
    bool  _textureOpaque;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _transformation;
    NSString * _utiType;
}

@property (nonatomic) bool allowsDeepmapImageCompression;
@property (nonatomic) bool allowsHevcCompression;
@property (nonatomic) bool allowsMultiPassEncoding;
@property (nonatomic) bool allowsOptimalRowbytesPacking;
@property (nonatomic) bool allowsPaletteImageCompression;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } alphaCroppedFrame;
@property (nonatomic) int blendMode;
@property (nonatomic) bool clampMetrics;
@property (nonatomic, copy) NSArray *colorComponents;
@property (nonatomic) short colorSpaceID;
@property (nonatomic) double compressionQuality;
@property long long compressionType;
@property (nonatomic) bool cubemap;
@property (nonatomic, retain) CUIShapeEffectPreset *effectPreset;
@property (getter=isExcludedFromContrastFilter, nonatomic) bool excludedFromContrastFilter;
@property (nonatomic) int exifOrientation;
@property (nonatomic, retain) CUIPSDGradient *gradient;
@property (nonatomic) bool isFlippable;
@property (nonatomic) bool isRenditionFPO;
@property (nonatomic) bool isTintable;
@property (nonatomic) bool isVectorBased;
@property (nonatomic, readonly) NSArray *layerReferences;
@property (nonatomic, readonly) NSArray *mipReferences;
@property (nonatomic, copy) NSDate *modtime;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) int objectVersion;
@property (nonatomic) double opacity;
@property (nonatomic) bool optOutOfThinning;
@property (nonatomic) struct CGSize { double x1; double x2; } originalUncroppedSize;
@property (nonatomic) struct CGSize { double x1; double x2; } physicalSizeInMeters;
@property (nonatomic) unsigned int pixelFormat;
@property (nonatomic) bool preservedVectorRepresentation;
@property (nonatomic, copy) NSDictionary *renditionProperties;
@property (nonatomic) unsigned int scaleFactor;
@property (nonatomic) struct CGSize { double x1; double x2; } size;
@property (nonatomic, copy) NSDictionary *sizesByIndex;
@property (nonatomic) long long templateRenderingMode;
@property (nonatomic) long long textureFormat;
@property (nonatomic) long long textureInterpretation;
@property (nonatomic) bool textureOpaque;
@property (nonatomic) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } transformation;
@property (nonatomic, copy) NSString *utiType;

+ (int)fileEncoding;
+ (void)initialize;
+ (void)setFileEncoding:(int)arg1;

- (id)CSIRepresentationWithCompression:(bool)arg1;
- (void)_addNodes:(id)arg1 toNodeList:(struct _csigradientdatanode { unsigned int x1; float x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; }*)arg2;
- (bool)_shouldUseCompactCompressionForBitmap:(id)arg1;
- (void)_updateCompressionInfoFor:(id)arg1;
- (void)addBitmap:(id)arg1;
- (void)addLayerReference:(id)arg1;
- (void)addMetrics:(struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; })arg1;
- (void)addMipReference:(id)arg1;
- (void)addSliceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)allowsDeepmapImageCompression;
- (bool)allowsHevcCompression;
- (bool)allowsMultiPassEncoding;
- (bool)allowsOptimalRowbytesPacking;
- (bool)allowsPaletteImageCompression;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alphaCroppedFrame;
- (int)blendMode;
- (bool)clampMetrics;
- (id)colorComponents;
- (short)colorSpaceID;
- (double)compressionQuality;
- (long long)compressionType;
- (bool)cubemap;
- (void)dealloc;
- (id)effectPreset;
- (int)exifOrientation;
- (void)formatCSIHeader:(struct _csiheader { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8 : 4; unsigned int x9 : 28; struct _csimetadata { unsigned int x_10_1_1; unsigned short x_10_1_2; unsigned short x_10_1_3; BOOL x_10_1_4[128]; } x10; unsigned int x11; struct _csibitmaplist { unsigned int x_12_1_1; unsigned int x_12_1_2[0]; } x12; }*)arg1;
- (id)gradient;
- (id)initWithCanvasSize:(struct CGSize { double x1; double x2; })arg1 sliceCount:(unsigned int)arg2 layout:(short)arg3;
- (id)initWithColorNamed:(id)arg1 colorSpaceID:(unsigned long long)arg2 components:(id)arg3;
- (id)initWithColorNamed:(id)arg1 colorSpaceID:(unsigned long long)arg2 components:(id)arg3 linkedToSystemColorWithName:(id)arg4;
- (id)initWithExternalReference:(id)arg1 tags:(id)arg2;
- (id)initWithInternalReferenceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 layout:(short)arg2;
- (id)initWithLayerStackData:(id)arg1 withCanvasSize:(struct CGSize { double x1; double x2; })arg2;
- (id)initWithMultisizeImageSetNamed:(id)arg1 sizesByIndex:(id)arg2;
- (id)initWithNameList:(id)arg1;
- (id)initWithRawData:(id)arg1 pixelFormat:(unsigned int)arg2 layout:(short)arg3;
- (id)initWithShapeEffectPreset:(id)arg1 forScaleFactor:(unsigned int)arg2;
- (id)initWithTextureForPixelFormat:(long long)arg1;
- (id)initWithTextureImageWithSize:(struct CGSize { double x1; double x2; })arg1 forPixelFormat:(long long)arg2 cubeMap:(bool)arg3;
- (bool)isExcludedFromContrastFilter;
- (bool)isFlippable;
- (bool)isRenditionFPO;
- (bool)isTintable;
- (bool)isVectorBased;
- (id)layerReferences;
- (id)mipReferences;
- (id)modtime;
- (id)name;
- (int)objectVersion;
- (double)opacity;
- (bool)optOutOfThinning;
- (struct CGSize { double x1; double x2; })originalUncroppedSize;
- (struct CGSize { double x1; double x2; })physicalSizeInMeters;
- (unsigned int)pixelFormat;
- (bool)preservedVectorRepresentation;
- (id)rawData;
- (id)renditionProperties;
- (unsigned int)scaleFactor;
- (void)setAllowsDeepmapImageCompression:(bool)arg1;
- (void)setAllowsHevcCompression:(bool)arg1;
- (void)setAllowsMultiPassEncoding:(bool)arg1;
- (void)setAllowsOptimalRowbytesPacking:(bool)arg1;
- (void)setAllowsPaletteImageCompression:(bool)arg1;
- (void)setAlphaCroppedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBlendMode:(int)arg1;
- (void)setClampMetrics:(bool)arg1;
- (void)setColorComponents:(id)arg1;
- (void)setColorSpaceID:(short)arg1;
- (void)setCompressionQuality:(double)arg1;
- (void)setCompressionType:(long long)arg1;
- (void)setCubemap:(bool)arg1;
- (void)setEffectPreset:(id)arg1;
- (void)setExcludedFromContrastFilter:(bool)arg1;
- (void)setExifOrientation:(int)arg1;
- (void)setGradient:(id)arg1;
- (void)setIsFlippable:(bool)arg1;
- (void)setIsRenditionFPO:(bool)arg1;
- (void)setIsTintable:(bool)arg1;
- (void)setIsVectorBased:(bool)arg1;
- (void)setModtime:(id)arg1;
- (void)setName:(id)arg1;
- (void)setObjectVersion:(int)arg1;
- (void)setOpacity:(double)arg1;
- (void)setOptOutOfThinning:(bool)arg1;
- (void)setOriginalUncroppedSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPhysicalSizeInMeters:(struct CGSize { double x1; double x2; })arg1;
- (void)setPixelFormat:(unsigned int)arg1;
- (void)setPreservedVectorRepresentation:(bool)arg1;
- (void)setRenditionProperties:(id)arg1;
- (void)setScaleFactor:(unsigned int)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setSizesByIndex:(id)arg1;
- (void)setTemplateRenderingMode:(long long)arg1;
- (void)setTextureFormat:(long long)arg1;
- (void)setTextureInterpretation:(long long)arg1;
- (void)setTextureOpaque:(bool)arg1;
- (void)setTransformation:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setUtiType:(id)arg1;
- (struct CGSize { double x1; double x2; })size;
- (id)sizesByIndex;
- (long long)templateRenderingMode;
- (long long)textureFormat;
- (long long)textureInterpretation;
- (bool)textureOpaque;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })transformation;
- (id)utiType;
- (unsigned long long)writeBitmap:(id)arg1 toData:(id)arg2 compress:(bool)arg3;
- (unsigned long long)writeColorToData:(id)arg1;
- (unsigned long long)writeExternalLinkToData:(id)arg1;
- (unsigned long long)writeGradientToData:(id)arg1;
- (void)writeHeader:(struct _csiheader { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8 : 4; unsigned int x9 : 28; struct _csimetadata { unsigned int x_10_1_1; unsigned short x_10_1_2; unsigned short x_10_1_3; BOOL x_10_1_4[128]; } x10; unsigned int x11; struct _csibitmaplist { unsigned int x_12_1_1; unsigned int x_12_1_2[0]; } x12; }*)arg1 toData:(id)arg2;
- (unsigned long long)writeMultisizeImageSetToData:(id)arg1;
- (unsigned long long)writeRawDataToData:(id)arg1;
- (unsigned long long)writeRecognitionObjectToData:(id)arg1;
- (unsigned long long)writeResourcesToData:(id)arg1;
- (unsigned long long)writeTextureToData:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
