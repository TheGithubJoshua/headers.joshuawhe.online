<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NUVideoCompositionInstruction.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NeutrinoCore.framework/NUVideoCompositionInstruction.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NeutrinoCore.framework/NeutrinoCore (3462.2.130)
 */

@interface NUVideoCompositionInstruction : NSObject <AVVideoCompositionInstruction, NSCopying> {
    NUComposition * _adjustmentComposition;
    NUColorSpace * _colorSpace;
    NSArray * _pipelineFilters;
    NURenderContext * _renderContext;
    NURenderJob * _renderJob;
    struct { 
        long long numerator; 
        long long denominator; 
    }  _renderScale;
    NSArray * _requiredSourceTrackIDs;
    long long  _sampleMode;
    NSMutableDictionary * _sourceIdentifiersByTrackID;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _timeRange;
}

@property (nonatomic, retain) NUComposition *adjustmentComposition;
@property (nonatomic, retain) NUColorSpace *colorSpace;
@property (nonatomic, readonly) bool containsTweening;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool enablePostProcessing;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) int passthroughTrackID;
@property (nonatomic, retain) NSArray *pipelineFilters;
@property (retain) NURenderContext *renderContext;
@property (nonatomic) NURenderJob *renderJob;
@property (nonatomic) struct { long long x1; long long x2; } renderScale;
@property (nonatomic, retain) NSArray *requiredSourceTrackIDs;
@property (nonatomic) long long sampleMode;
@property (readonly) Class superclass;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } timeRange;

+ (id)instructionFromBase:(id)arg1;

- (void).cxx_destruct;
- (id)adjustmentComposition;
- (id)colorSpace;
- (bool)containsTweening;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)enablePostProcessing;
- (id)init;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToInstruction:(id)arg1;
- (int)passthroughTrackID;
- (id)pipelineFilters;
- (id)renderContext;
- (id)renderJob;
- (struct { long long x1; long long x2; })renderScale;
- (id)requiredSourceTrackIDs;
- (long long)sampleMode;
- (void)setAdjustmentComposition:(id)arg1;
- (void)setColorSpace:(id)arg1;
- (void)setPipelineFilters:(id)arg1;
- (void)setRenderContext:(id)arg1;
- (void)setRenderJob:(id)arg1;
- (void)setRenderScale:(struct { long long x1; long long x2; })arg1;
- (void)setRequiredSourceTrackIDs:(id)arg1;
- (void)setSampleMode:(long long)arg1;
- (void)setSourceIdentifier:(id)arg1 forTrackID:(id)arg2;
- (void)setTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (id)sourceIdentifierForTrackID:(id)arg1;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })timeRange;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
