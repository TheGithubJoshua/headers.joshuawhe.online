<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CCUIControlCenterButton.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ControlCenterUIKit.framework/CCUIControlCenterButton.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ControlCenterUIKit.framework/ControlCenterUIKit (1)
 */

@interface CCUIControlCenterButton : SBFButton <_UISettingsKeyObserver> {
    UIImageView * _alteredStateGlyphImageView;
    UILabel * _alteredStateLabel;
    bool  _animatesStateChanges;
    UIView * _backgroundFlatColorView;
    unsigned long long  _buttonType;
    <CCUIControlCenterButtonDelegate> * _delegate;
    UIImage * _glyphImage;
    UIImageView * _glyphImageView;
    UILabel * _label;
    double  _naturalHeight;
    unsigned long long  _roundCorners;
    UIColor * _selectedColor;
    UIImage * _selectedGlyphImage;
    bool  _showingMenu;
}

@property (nonatomic) bool animatesStateChanges;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CCUIControlCenterButtonDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIFont *font;
@property (nonatomic, retain) UIImage *glyphImage;
@property (readonly) unsigned long long hash;
@property (getter=isInternal, nonatomic, readonly) bool internal;
@property (nonatomic) double naturalHeight;
@property (nonatomic) long long numberOfLines;
@property (nonatomic) unsigned long long roundCorners;
@property (nonatomic, retain) UIImage *selectedGlyphImage;
@property (getter=isShowingMenu, nonatomic) bool showingMenu;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *text;

+ (id)_buttonWithSelectedColor:(id)arg1 text:(id)arg2 type:(unsigned long long)arg3;
+ (id)capsuleButtonWithText:(id)arg1;
+ (id)circularButtonWithSelectedColor:(id)arg1;
+ (id)roundRectButton;
+ (id)roundRectButtonWithText:(id)arg1;
+ (id)roundRectButtonWithText:(id)arg1 selectedGlyphColor:(id)arg2;
+ (id)smallCircularButtonWithSelectedColor:(id)arg1;

- (void).cxx_destruct;
- (void)_calculateRectForGlyph:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 rectForLabel:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2 ignoringBounds:(bool)arg3;
- (id)_controlStateStringFromState:(long long)arg1;
- (long long)_currentState;
- (bool)_drawingAsSelected;
- (id)_effectiveSelectedColor;
- (id)_glyphImageForState:(long long)arg1;
- (bool)_isCapsuleButton;
- (bool)_isCircleButton;
- (bool)_isRectButton;
- (bool)_isRectTextButton;
- (bool)_isTextButton;
- (void)_pressAction;
- (void)_setButtonType:(unsigned long long)arg1;
- (bool)_shouldAnimatePropertyWithKey:(id)arg1;
- (void)_updateBackgroundForStateChange;
- (void)_updateEffects;
- (void)_updateForDarkerSystemColorsChange:(id)arg1;
- (void)_updateForReduceTransparencyChange;
- (void)_updateForStateChange;
- (void)_updateGlyphAndTextForStateChange;
- (void)_updateNaturalHeight;
- (bool)animatesStateChanges;
- (id)ccuiPunchOutMaskForView:(id)arg1;
- (double)cornerRadius;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToSuperview;
- (id)font;
- (id)glyphImage;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 selectedColor:(id)arg2 text:(id)arg3 type:(unsigned long long)arg4;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isInternal;
- (bool)isShowingMenu;
- (void)layoutSubviews;
- (double)naturalHeight;
- (long long)numberOfLines;
- (unsigned long long)roundCorners;
- (id)selectedGlyphImage;
- (void)setAnimatesStateChanges:(bool)arg1;
- (void)setBackgroundImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGlyphImage:(id)arg1;
- (void)setGlyphImage:(id)arg1 selectedGlyphImage:(id)arg2 name:(id)arg3;
- (void)setImage:(id)arg1 forState:(unsigned long long)arg2;
- (void)setNaturalHeight:(double)arg1;
- (void)setNumberOfLines:(long long)arg1;
- (void)setRoundCorners:(unsigned long long)arg1;
- (void)setSelectedGlyphImage:(id)arg1;
- (void)setShowingMenu:(bool)arg1;
- (void)setText:(id)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)text;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
