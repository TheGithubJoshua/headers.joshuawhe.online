<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WBSSiteMetadataImageCache.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SafariShared.framework/WBSSiteMetadataImageCache.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SafariShared.framework/SafariShared (607.3.18)
 */

@interface WBSSiteMetadataImageCache : NSObject {
    WBSCacheRetainReleasePolicy * _cachePolicy;
    NSMutableDictionary * _cacheSettings;
    WBSCoalescedAsynchronousWriter * _cacheSettingsWriter;
    <WBSSiteMetadataImageCacheDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _diskAccessQueue;
    unsigned long long  _fileProtectionOptions;
    NSURL * _imageDirectoryURL;
    long long  _imageType;
    NSMutableDictionary * _imagesForKeyStrings;
    NSObject<OS_dispatch_queue> * _internalQueue;
    NSMutableSet * _missingImageKeyStrings;
    NSMutableSet * _pendingKeyStringRequests;
    bool  _terminating;
}

@property (nonatomic) <WBSSiteMetadataImageCacheDelegate> *delegate;
@property (nonatomic, readonly) NSURL *imageDirectoryURL;
@property (nonatomic, readonly) long long imageType;
@property (getter=isTerminating, nonatomic, readonly) bool terminating;

- (void).cxx_destruct;
- (id)_cacheSettingsFileURL;
- (void)_didLoadImage:(id)arg1 forKeyString:(id)arg2 fromDisk:(bool)arg3;
- (id)_diskAccessQueueName;
- (void)_dispatchDiskAccessBlock:(id /* block */)arg1;
- (void)_emptyCacheDirectory;
- (id)_fileLocationForKeyString:(id)arg1;
- (id)_fileNameForKeyString:(id)arg1;
- (id)_internalImageForKeyString:(id)arg1;
- (long long)_internalImageStateForKeyString:(id)arg1;
- (void)_internalPurgeUnneededImages;
- (void)_internalQueueDispatchBarrierAsync:(id /* block */)arg1;
- (void)_internalQueueDispatchSync:(id /* block */)arg1;
- (id)_internalQueueName;
- (void)_internalReleaseImageForKeyString:(id)arg1;
- (void)_internalRemoveAllImages;
- (void)_internalRemoveImagesFromCacheForKeyStrings:(id)arg1;
- (void)_internalSaveImageToDisk:(id)arg1 forKeyString:(id)arg2;
- (void)_internalSetImageState:(long long)arg1 forKeyString:(id)arg2;
- (void)_internalSetSetting:(id)arg1 forKey:(id)arg2;
- (void)_internalSetUpImageCache;
- (id)_internalSettingForKey:(id)arg1;
- (id)_loadImageFromDiskForKeyString:(id)arg1;
- (void)_notifyDidFinishLoadingSettings;
- (void)_removeImagesPassingTest:(id /* block */)arg1;
- (void)_requestImageForKeyString:(id)arg1;
- (void)_saveCacheSettingsSoon;
- (id)delegate;
- (void)emptyCache;
- (id)imageDirectoryURL;
- (id)imageForKeyString:(id)arg1;
- (long long)imageStateForKeyString:(id)arg1;
- (long long)imageType;
- (id)init;
- (id)initWithImageDirectoryURL:(id)arg1 imageType:(long long)arg2;
- (id)initWithImageDirectoryURL:(id)arg1 imageType:(long long)arg2 fileProtectionOptions:(unsigned long long)arg3;
- (bool)isImageRetainedForKeyString:(id)arg1;
- (bool)isTerminating;
- (void)purgeUnneededImages;
- (void)releaseImageForKeyString:(id)arg1;
- (void)releaseImageWithKeyStringProvider:(id /* block */)arg1;
- (void)releaseImagesForKeyStrings:(id)arg1;
- (void)removeAllImages;
- (void)removeImagesFromCacheForKeyStrings:(id)arg1;
- (void)retainImageForKeyString:(id)arg1;
- (void)retainImageWithKeyStringProvider:(id /* block */)arg1;
- (void)retainImagesForKeyStrings:(id)arg1;
- (void)saveImageToDisk:(id)arg1 forKeyString:(id)arg2;
- (void)savePendingChangesBeforeTermination;
- (void)setDelegate:(id)arg1;
- (void)setImage:(id)arg1 forKeyString:(id)arg2;
- (void)setImageState:(long long)arg1 forKeyString:(id)arg2;
- (void)setSetting:(id)arg1 forKey:(id)arg2;
- (void)setUpImageCache;
- (id)settingForKey:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
