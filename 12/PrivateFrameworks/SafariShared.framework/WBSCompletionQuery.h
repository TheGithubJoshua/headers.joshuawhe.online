<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WBSCompletionQuery.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SafariShared.framework/WBSCompletionQuery.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SafariShared.framework/SafariShared (607.3.18)
 */

@interface WBSCompletionQuery : NSObject <NSCopying> {
    bool  _forLastSearch;
    unsigned long long  _indexInFeedbackArray;
    NSString * _normalizedQueryStringForParsec;
    NSString * _parsecFeedbackQueryIdentifier;
    struct duration<long long, std::__1::ratio<1, 1000> > { 
        long long __rep_; 
    }  _parsecLatency;
    NSURLRequest * _parsecSearchRequest;
    long long  _queryID;
    NSString * _queryString;
    NSArray * _querySuggestions;
    NSString * _rewrittenQueryStringFromParsec;
    NSString * _searchSuggestionProviderIdentifier;
    struct duration<long long, std::__1::ratio<1, 1000> > { 
        long long __rep_; 
    }  _searchSuggestionProviderLatency;
    struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { 
        struct duration<long long, std::__1::ratio<1, 1000000000> > { 
            long long __rep_; 
        } __d_; 
    }  _timestamp;
    unsigned long long  _triggerEvent;
}

@property (getter=isForLastSearch, nonatomic) bool forLastSearch;
@property (nonatomic) unsigned long long indexInFeedbackArray;
@property (nonatomic, readonly) NSString *normalizedQueryStringForParsec;
@property (nonatomic, copy) NSString *parsecFeedbackQueryIdentifier;
@property (nonatomic) /* Warning: unhandled struct encoding: '{duration<long long' */ struct  parsecLatency; /* unknown property attribute:  1000> >=q} */
@property (nonatomic, copy) NSURLRequest *parsecSearchRequest;
@property (nonatomic, readonly) long long queryID;
@property (nonatomic, readonly) NSString *queryString;
@property (copy) NSArray *querySuggestions;
@property (nonatomic, copy) NSString *rewrittenQueryStringFromParsec;
@property (nonatomic, copy) NSString *searchSuggestionProviderIdentifier;
@property (nonatomic) /* Warning: unhandled struct encoding: '{duration<long long' */ struct  searchSuggestionProviderLatency; /* unknown property attribute:  1000> >=q} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{time_point<std::__1::chrono::steady_clock' */ struct  timestamp; /* unknown property attribute:  1000000000> >=q}} */
@property (nonatomic) unsigned long long triggerEvent;

+ (void)initialize;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_initWithQueryString:(id)arg1 queryID:(long long)arg2 timestamp:(struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x_1_1_1; } x1; })arg3 indexInFeedbackArray:(unsigned long long)arg4 triggerEvent:(unsigned long long)arg5;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (unsigned long long)indexInFeedbackArray;
- (id)init;
- (id)initWithQueryString:(id)arg1;
- (id)initWithQueryString:(id)arg1 queryID:(long long)arg2;
- (id)initWithQueryString:(id)arg1 queryID:(long long)arg2 triggerEvent:(unsigned long long)arg3;
- (id)initWithQueryString:(id)arg1 triggerEvent:(unsigned long long)arg2;
- (bool)isForLastSearch;
- (id)normalizedQueryStringForParsec;
- (id)parsecFeedbackQueryIdentifier;
- (struct duration<long long, std::__1::ratio<1, 1000> > { long long x1; })parsecLatency;
- (id)parsecSearchRequest;
- (long long)queryID;
- (id)queryString;
- (id)querySuggestions;
- (id)rewrittenQueryStringFromParsec;
- (id)searchSuggestionProviderIdentifier;
- (struct duration<long long, std::__1::ratio<1, 1000> > { long long x1; })searchSuggestionProviderLatency;
- (void)setForLastSearch:(bool)arg1;
- (void)setIndexInFeedbackArray:(unsigned long long)arg1;
- (void)setParsecFeedbackQueryIdentifier:(id)arg1;
- (void)setParsecLatency:(struct duration<long long, std::__1::ratio<1, 1000> > { long long x1; })arg1;
- (void)setParsecSearchRequest:(id)arg1;
- (void)setQuerySuggestions:(id)arg1;
- (void)setRewrittenQueryStringFromParsec:(id)arg1;
- (void)setSearchSuggestionProviderIdentifier:(id)arg1;
- (void)setSearchSuggestionProviderLatency:(struct duration<long long, std::__1::ratio<1, 1000> > { long long x1; })arg1;
- (void)setTriggerEvent:(unsigned long long)arg1;
- (struct time_point<std::__1::chrono::steady_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000000> > > { struct duration<long long, std::__1::ratio<1, 1000000000> > { long long x_1_1_1; } x1; })timestamp;
- (unsigned long long)triggerEvent;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
