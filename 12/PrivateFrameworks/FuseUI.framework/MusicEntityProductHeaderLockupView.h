<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MusicEntityProductHeaderLockupView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/FuseUI.framework/MusicEntityProductHeaderLockupView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/FuseUI.framework/FuseUI (1)
 */

@interface MusicEntityProductHeaderLockupView : MusicEntityAbstractLockupView <UITextViewDelegate> {
    MPUTextButton * _addSongsButton;
    UIView * _artworkEditingOverlayView;
    _UIBackdropView * _backdropView;
    UIView * _bottomHairlineView;
    double  _cachedTallestButtonHeight;
    <MusicEntityProductHeaderLockupViewDelegate> * _delegate;
    double  _downloadProgress;
    MusicDownloadProgressButton * _downloadProgressButton;
    long long  _downloadProgressType;
    MPUTextButton * _editButton;
    NSString * _editableText;
    UIView * _editableTextBottomHairlineView;
    UILabel * _editableTextHeaderLabel;
    UITextView * _editableTextPlaceholderView;
    UITextView * _editableTextView;
    bool  _editableTitleShouldBecomeFirstResponder;
    bool  _editing;
    UIButton * _likeDislikeButton;
    long long  _likeDislikeButtonState;
    MusicEntityViewProductHeaderLockupContentDescriptor * _productHeaderLockupContentDescriptor;
    UIActivityIndicatorView * _refreshActivityIndicatorView;
    UIButton * _refreshButton;
    UIButton * _shareButton;
    bool  _shouldIgnoreArtworkImageChanges;
    bool  _shouldUpdateTallestButtonHeightCache;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MusicEntityProductHeaderLockupViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) double downloadProgress;
@property (nonatomic, readonly) MusicDownloadProgressButton *downloadProgressButton;
@property (nonatomic) long long downloadProgressType;
@property (nonatomic, readonly) NSString *editableText;
@property (nonatomic) bool editableTitleShouldBecomeFirstResponder;
@property (getter=isEditing, nonatomic) bool editing;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long likeDislikeButtonState;
@property (nonatomic, retain) MusicEntityViewProductHeaderLockupContentDescriptor *productHeaderLockupContentDescriptor;
@property (nonatomic, readonly) UIButton *shareButton;
@property (readonly) Class superclass;

+ (double)_buttonHeight;
+ (double)maximumRowHeightForHorizontalLockupContentDescriptor:(id)arg1 traitCollection:(id)arg2;

- (void).cxx_destruct;
- (void)_addSongsButtonTapped:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustAvailableContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forActionControl:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustAvailableContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forActionView:(id)arg2;
- (void)_artworkViewImageDidChange;
- (void)_contentDescriptorDidChange:(id)arg1;
- (void)_downloadProgressButtonTapped:(id)arg1;
- (void)_editButtonTapped:(id)arg1;
- (id)_genericActionButtonWithImage:(id)arg1;
- (id)_genericActionButtonWithImageName:(id)arg1;
- (id)_genericActionButtonWithText:(id)arg1;
- (void)_layoutButtonsWithAvailableContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 insetContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_layoutEditingSubviews;
- (void)_layoutEditingSubviewsForEditing:(bool)arg1 editingViewsAlpha:(double)arg2;
- (void)_layoutSubviewsForCompactHorizontalSizeClass;
- (void)_layoutSubviewsForRegularHorizontalSizeClass;
- (void)_likeDislikeButtonTapped:(id)arg1;
- (id)_newTextView;
- (void)_refreshButtonTapped:(id)arg1;
- (id)_refreshImage;
- (void)_setFrameOfActionButton:(id)arg1 basedOnAvailableContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 customHeight:(double)arg3 maximumHeightForCentering:(double)arg4;
- (void)_setFrameOfActionControl:(id)arg1 basedOnAvailableContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 maximumHeightForCentering:(double)arg3 buttonHeightForCentering:(double)arg4 buttonBaselineOffset:(double)arg5;
- (void)_shareButtonTapped:(id)arg1;
- (bool)_shouldEnableArtworkViewUserInteraction;
- (bool)_shouldShowPlayButton;
- (void)_updateColorsOfGenericActionControl:(id)arg1;
- (void)_updateColorsOfGenericActionView:(id)arg1;
- (void)_updateEditableTextPlaceholderViewVisibility;
- (void)_updateLikeDislikeButtonStateAppearance;
- (void)_updateTextView:(id)arg1 forTextDescriptor:(id)arg2 textColor:(id)arg3;
- (void)dealloc;
- (id)delegate;
- (double)downloadProgress;
- (id)downloadProgressButton;
- (long long)downloadProgressType;
- (id)editableText;
- (bool)editableTitleShouldBecomeFirstResponder;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isEditing;
- (void)layoutSubviews;
- (long long)likeDislikeButtonState;
- (void)music_inheritedLayoutInsetsDidChange;
- (id)productHeaderLockupContentDescriptor;
- (void)setDelegate:(id)arg1;
- (void)setDownloadProgress:(double)arg1;
- (void)setDownloadProgressType:(long long)arg1;
- (void)setEditableTitleShouldBecomeFirstResponder:(bool)arg1;
- (void)setEditing:(bool)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setEntityValueProvider:(id)arg1;
- (void)setLikeDislikeButtonState:(long long)arg1;
- (void)setProductHeaderLockupContentDescriptor:(id)arg1;
- (id)shareButton;
- (bool)textView:(id)arg1 shouldChangeTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementText:(id)arg3;
- (void)textViewDidChange:(id)arg1;
- (void)tintColorDidChange;
- (void)traitCollectionDidChange:(id)arg1;
- (void)willMoveToSuperview:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
