<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SKUIStorePageSectionsViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/StoreKitUI.framework/SKUIStorePageSectionsViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/StoreKitUI.framework/StoreKitUI (1)
 */

@interface SKUIStorePageSectionsViewController : SKUIViewController <SKUIItemStateCenterObserver, SKUILayoutCacheDelegate, SKUIProductPageOverlayDelegate, SKUIStorePageCollectionViewDelegate, SKUIViewControllerTesting, UICollectionViewDataSource, UIGestureRecognizerDelegate, UIViewControllerPreviewingDelegate, UIViewControllerPreviewingDelegate_Private> {
    SKUIMetricsImpressionSession * _activeMetricsImpressionSession;
    SKUIProductPageOverlayController * _activeOverlayController;
    SKUICollectionView * _collectionView;
    UITapGestureRecognizer * _collectionViewTapGestureRecognizer;
    SKUIColorScheme * _colorScheme;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentInsetAdjustments;
    id  _deferredSplitsDescription;
    <SKUIStorePageSectionsDelegate> * _delegate;
    bool  _delegateWantsDidScroll;
    bool  _delegateWantsWillScrollToOffsetVisibleRange;
    bool  _didInitialReload;
    NSMapTable * _entityProviderToRelevantSections;
    NSMutableIndexSet * _expandInsertSections;
    NSMutableIndexSet * _expandRemoveSections;
    NSMapTable * _expandSectionContexts;
    long long  _ignoreSectionsChangeCount;
    SKUIIndexBarControl * _indexBarControl;
    NSIndexPath * _indexPathOfEditedCell;
    NSArray * _initialOverlayURLs;
    bool  _itemsChangedStateWhileDisappeared;
    long long  _lastInterfaceOrientation;
    NSNumber * _lastKnownWidth;
    long long  _layoutStyle;
    NSMapTable * _menuSectionContexts;
    SKUIMetricsController * _metricsController;
    SKUIProductPageOverlayController * _overlayController;
    long long  _pinningTransitionStyle;
    <SKUICollectionViewPullToRefreshDelegate> * _pullToRefreshDelegate;
    UIRefreshControl * _refreshControl;
    bool  _rendersWithParallax;
    bool  _rendersWithPerspective;
    SKUIResourceLoader * _resourceLoader;
    bool  _scrollOffsetHasChanged;
    NSMutableArray * _sections;
    SKUIStorePageSplitsDescription * _splitsDescription;
    UIView * _splitsDividerView;
    SKUIStackedBar * _stackedBar;
    SKUILayoutCache * _textLayoutCache;
    <UIViewControllerPreviewing> * _viewControllerPreviewing;
}

@property (nonatomic, retain) SKUIMetricsImpressionSession *activeMetricsImpressionSession;
@property (nonatomic, readonly) UICollectionView *collectionView;
@property (nonatomic, copy) SKUIColorScheme *colorScheme;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SKUIStorePageSectionsDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDisplayingOverlays, nonatomic, readonly) bool displayingOverlays;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) SKUIIndexBarControl *indexBarControl;
@property (nonatomic, retain) SKUIMetricsController *metricsController;
@property (nonatomic) long long pinningTransitionStyle;
@property (nonatomic) <SKUICollectionViewPullToRefreshDelegate> *pullToRefreshDelegate;
@property (nonatomic, retain) SKUIResourceLoader *resourceLoader;
@property (nonatomic, readonly) NSArray *sections;
@property (readonly) Class superclass;

+ (bool)_shouldForwardViewWillTransitionToSize;
+ (id)viewControllerWithRestorationIdentifierPath:(id)arg1 coder:(id)arg2;

- (void).cxx_destruct;
- (id)SKUIStackedBar;
- (void)_applyColorScheme:(id)arg1 toIndexBarControl:(id)arg2;
- (void)_beginActiveImpressionsForImpressionableViewElements;
- (void)_beginIgnoringSectionChanges;
- (id)_childSectionsForMenuComponent:(id)arg1 selectedIndex:(long long)arg2;
- (id)_collectionViewSublayouts;
- (void)_contentSizeChangeNotification:(id)arg1;
- (id)_createSectionsForExpandPageComponent:(id)arg1 context:(id)arg2 newSections:(id)arg3 sectionCount:(long long)arg4 sectionsByViewElement:(id)arg5 updateStyle:(long long)arg6;
- (id)_currentBackdropGroupName;
- (id)_defaultSectionForGridComponent:(id)arg1;
- (id)_defaultSectionForSwooshComponent:(id)arg1;
- (void)_deselectCellsForAppearance:(bool)arg1;
- (void)_endAllPendingActiveImpression;
- (void)_endIgnoringSectionChanges;
- (void)_entityProviderDidInvalidateNotification:(id)arg1;
- (void)_enumerateSectionContextsUsingBlock:(id /* block */)arg1;
- (void)_enumerateVisibleSectionsUsingBlock:(id /* block */)arg1;
- (id)_expandContextForMenuComponent:(id)arg1;
- (void)_handleTap:(id)arg1;
- (id)_impressionableViewElements;
- (void)_insertSectionsWithComponents:(id)arg1 afterSection:(id)arg2;
- (void)_invalidateIfLastKnownWidthChanged;
- (void)_invalidateLayoutWithNewSize:(struct CGSize { double x1; double x2; })arg1 transitionCoordinator:(id)arg2;
- (void)_longPressAction:(id)arg1;
- (id)_menuContextForMenuComponent:(id)arg1;
- (id)_newSectionContext;
- (id)_newSectionsWithPageComponent:(id)arg1;
- (id)_newSectionsWithPageComponents:(id)arg1;
- (id)_newStorePageCollectionViewLayout;
- (void)_pageSectionDidDismissOverlayController:(id)arg1;
- (void)_prefetchArtworkForVisibleSections;
- (id)_prepareLayoutForSections;
- (void)_registerForNotificationsForEntityProvider:(id)arg1;
- (void)_reloadCollectionView;
- (void)_reloadRelevantEntityProviders;
- (void)_scrollFirstAppearanceSectionToView;
- (void)_setActiveProductPageOverlayController:(id)arg1;
- (void)_setPageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setRendersWithParallax:(bool)arg1;
- (void)_setRendersWithPerspective:(bool)arg1;
- (void)_setSelectedIndex:(long long)arg1 forMenuSection:(id)arg2;
- (id)_splitForSectionIndex:(long long)arg1;
- (void)_startRefresh:(id)arg1;
- (id)_textLayoutCache;
- (void)_unregisterForNotificationsForEntityProvider:(id)arg1;
- (void)_updateCollectionViewWithUpdates:(id /* block */)arg1;
- (void)_updateSectionsAfterMenuChange;
- (void)_updateSectionsForIndex:(long long)arg1 menuSection:(id)arg2;
- (id)_visibleMetricsImpressionsString;
- (id)activeMetricsImpressionSession;
- (id)backgroundColorForSection:(long long)arg1;
- (id)collectionView;
- (bool)collectionView:(id)arg1 canScrollCellAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didConfirmButtonElement:(id)arg2 withClickInfo:(id)arg3 forItemAtIndexPath:(id)arg4;
- (void)collectionView:(id)arg1 didEndDisplayingCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 didEndEditingItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 editorialView:(id)arg2 didSelectLink:(id)arg3;
- (void)collectionView:(id)arg1 expandEditorialForLabelElement:(id)arg2 indexPath:(id)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionView:(id)arg1 layout:(id)arg2 pinningContentInsetForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 layout:(id)arg2 pinningGroupForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 layout:(id)arg2 pinningStyleForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 layout:(id)arg2 pinningTransitionStyleForItemAtIndexPath:(id)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 layout:(id)arg2 willApplyLayoutAttributes:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)collectionView:(id)arg1 performDefaultActionForViewElement:(id)arg2 indexPath:(id)arg3;
- (bool)collectionView:(id)arg1 shouldHighlightItemAtIndexPath:(id)arg2;
- (bool)collectionView:(id)arg1 shouldSelectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 willBeginEditingItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 willDisplayCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (id)colorScheme;
- (void)dealloc;
- (void)decodeRestorableStateWithCoder:(id)arg1;
- (id)defaultSectionForComponent:(id)arg1;
- (id)delegate;
- (void)dismissOverlays;
- (void)encodeRestorableStateWithCoder:(id)arg1;
- (id)indexBarControl;
- (id)indexPathsForGradientItemsInCollectionView:(id)arg1 layout:(id)arg2;
- (id)indexPathsForPinningItemsInCollectionView:(id)arg1 layout:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithLayoutStyle:(long long)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)invalidateAndReload;
- (bool)isDisplayingOverlays;
- (void)itemCollectionView:(id)arg1 didConfirmItemOfferForCell:(id)arg2;
- (void)itemCollectionView:(id)arg1 didTapVideoForCollectionViewCell:(id)arg2;
- (void)itemStateCenter:(id)arg1 itemStatesChanged:(id)arg2;
- (void)layoutCacheDidFinishBatch:(id)arg1;
- (void)loadView;
- (id)metricsController;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (bool)performTestWithName:(id)arg1 options:(id)arg2;
- (long long)pinningTransitionStyle;
- (void)previewingContext:(id)arg1 commitViewController:(id)arg2;
- (id)previewingContext:(id)arg1 viewControllerForLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)productPageOverlayDidDismiss:(id)arg1;
- (id)pullToRefreshDelegate;
- (void)reloadSections:(id)arg1;
- (id)resourceLoader;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (id)sections;
- (void)setActiveMetricsImpressionSession:(id)arg1;
- (void)setColorScheme:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIndexBarControl:(id)arg1;
- (void)setMetricsController:(id)arg1;
- (void)setPinningTransitionStyle:(long long)arg1;
- (void)setPullToRefreshDelegate:(id)arg1;
- (void)setResourceLoader:(id)arg1;
- (void)setSKUIStackedBar:(id)arg1;
- (void)setSectionsWithPageComponents:(id)arg1;
- (void)setSectionsWithSplitsDescription:(id)arg1;
- (void)setUsePullToRefresh:(bool)arg1;
- (void)showOverlayWithProductPage:(id)arg1 metricsPageEvent:(id)arg2;
- (void)skuiCollectionViewWillLayoutSubviews:(id)arg1;
- (void)skui_viewWillAppear:(bool)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (void)willPresentPreviewViewController:(id)arg1 forLocation:(struct CGPoint { double x1; double x2; })arg2 inSourceView:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
