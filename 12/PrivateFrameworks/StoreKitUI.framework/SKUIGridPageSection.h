<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SKUIGridPageSection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/StoreKitUI.framework/SKUIGridPageSection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/StoreKitUI.framework/StoreKitUI (1)
 */

@interface SKUIGridPageSection : SKUIStorePageSection <SKUIArtworkRequestDelegate, SKUIEmbeddedMediaViewDelegate, SKUIItemStateCenterObserver, SKUIMissingItemDelegate, SKUIProductPageOverlayDelegate> {
    NSMapTable * _artworkRequests;
    SKUIClientContext * _clientContext;
    bool  _containsLockups;
    NSMapTable * _editorialLayouts;
    NSMutableIndexSet * _hiddenIconIndexSet;
    bool  _isLandscape;
    bool  _isPad;
    NSMapTable * _lockupArtworkContexts;
    struct CGSize { 
        double width; 
        double height; 
    }  _lockupImageBoundingSize;
    SKUIMissingItemLoader * _missingItemLoader;
    NSString * _moreButtonTitle;
    long long  _numberOfColumns;
    SKUIProductPageOverlayController * _overlayController;
    long long  _overlaySourceItemIndex;
    long long  _screenScale;
    SKUIVideoImageDataConsumer * _videoImageDataConsumer;
    NSMutableDictionary * _videoPlaceholderImages;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) SKUIGridComponent *pageComponent;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_artworkContextForLockupSize:(long long)arg1;
- (id)_cellImageForItem:(id)arg1 lockupSize:(long long)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_contentInsetForMediaIndex:(long long)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_contentInsetForVideoLockupIndex:(long long)arg1;
- (id)_editorialCellWithEditorials:(id)arg1 indexPath:(id)arg2;
- (id)_editorialLayoutForEditorial:(id)arg1;
- (id)_editorialLayoutForLockup:(id)arg1;
- (id)_editorialLockupCellWithLockups:(id)arg1 indexPath:(id)arg2;
- (void)_enumerateItemsFromStartIndex:(long long)arg1 withBlock:(id /* block */)arg2;
- (void)_enumerateVisibleIndexPathsWithBlock:(id /* block */)arg1;
- (void)_enumerateVisibleItemsWithBlock:(id /* block */)arg1;
- (double)_heightForEditorialAtIndexPath:(id)arg1;
- (double)_heightForEditorialLockup:(id)arg1;
- (double)_heightForEditorialLockupAtIndexPath:(id)arg1;
- (double)_heightForLockupAtIndexPath:(id)arg1 gridType:(long long)arg2;
- (double)_heightForMedia:(id)arg1 width:(double)arg2;
- (double)_heightForMediaAtIndexPath:(id)arg1;
- (id)_itemCellWithLockups:(id)arg1 indexPath:(id)arg2;
- (id)_itemForIndex:(long long)arg1;
- (void)_loadImageForItem:(id)arg1 lockupSize:(long long)arg2 loader:(id)arg3 reason:(long long)arg4;
- (void)_loadImageForVideo:(id)arg1 thumbnailSize:(struct CGSize { double x1; double x2; })arg2 loader:(id)arg3 reason:(long long)arg4;
- (void)_loadMissingItemsFromIndex:(long long)arg1 withReason:(long long)arg2;
- (id)_mediaCellWithMedia:(id)arg1 indexPath:(id)arg2;
- (double)_mediaWidthForMediaIndex:(long long)arg1 gridWidth:(double)arg2;
- (id)_missingItemLoader;
- (id)_newSizeToFitArtworkRequestWithArtwork:(id)arg1 mediaIndex:(long long)arg2;
- (long long)_numberOfLandscapeColumnsWithGridType:(long long)arg1;
- (long long)_numberOfPortraitColumnsWithGridType:(long long)arg1;
- (id)_popSourceViewForOverlayController:(id)arg1;
- (void)_reloadEditorialLockupCell:(id)arg1 withLockup:(id)arg2 index:(long long)arg3;
- (void)_reloadItemCell:(id)arg1 withLockup:(id)arg2 index:(long long)arg3;
- (void)_selectItem:(id)arg1 withIndex:(long long)arg2;
- (void)_setPositionForClickEvent:(id)arg1 withElementIndex:(long long)arg2;
- (void)_showProductPageWithItem:(id)arg1 index:(long long)arg2 animated:(bool)arg3;
- (void)_updateVisibileEditorialWithEditorialOrientation:(long long)arg1;
- (id)_videoThumbnailImageForVideo:(id)arg1 thumbnailSize:(struct CGSize { double x1; double x2; })arg2;
- (void)addImpressionsForIndexPath:(id)arg1 toSession:(id)arg2;
- (void)artworkRequest:(id)arg1 didLoadImage:(id)arg2;
- (id)cellForIndexPath:(id)arg1;
- (struct CGSize { double x1; double x2; })cellSizeForIndexPath:(id)arg1;
- (id)clickEventWithItem:(id)arg1 elementName:(id)arg2 index:(long long)arg3;
- (void)collectionViewDidConfirmItemOfferAtIndexPath:(id)arg1;
- (void)collectionViewDidEndDisplayingCellForItemAtIndexPath:(id)arg1;
- (void)collectionViewDidSelectItemAtIndexPath:(id)arg1;
- (void)collectionViewDidTapVideoAtIndexPath:(id)arg1;
- (void)collectionViewWillApplyLayoutAttributes:(id)arg1;
- (void)dealloc;
- (id)initWithPageComponent:(id)arg1;
- (id)itemOfferClickEventWithItem:(id)arg1 elementName:(id)arg2 index:(long long)arg3;
- (void)itemStateCenter:(id)arg1 itemStatesChanged:(id)arg2;
- (void)itemStateCenterRestrictionsChanged:(id)arg1;
- (void)mediaView:(id)arg1 playbackStateDidChange:(long long)arg2;
- (void)missingItemLoader:(id)arg1 didLoadItems:(id)arg2 invalidItemIdentifiers:(id)arg3;
- (long long)numberOfCells;
- (void)prefetchResourcesWithReason:(long long)arg1;
- (id)productPageOverlay:(id)arg1 flipSourceViewToDismissItem:(id)arg2;
- (id)productPageOverlay:(id)arg1 flipSourceViewToPresentItem:(id)arg2;
- (void)productPageOverlayDidDismiss:(id)arg1;
- (void)willAppearInContext:(id)arg1;
- (void)willHideInContext:(id)arg1;
- (void)willTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
