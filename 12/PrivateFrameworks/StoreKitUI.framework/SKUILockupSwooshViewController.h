<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SKUILockupSwooshViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/StoreKitUI.framework/SKUILockupSwooshViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/StoreKitUI.framework/StoreKitUI (1)
 */

@interface SKUILockupSwooshViewController : SKUISwooshViewController <UICollectionViewDataSource, UICollectionViewDelegate> {
    SKUIItemArtworkContext * _artworkContext;
    UICollectionView * _collectionView;
    struct SKUILockupStyle { 
        long long artworkSize; 
        long long layoutStyle; 
        unsigned long long visibleFields; 
    }  _defaultLockupStyle;
    bool  _delegateWantsWillDisplay;
    bool  _didInitialReload;
    struct CGSize { 
        double width; 
        double height; 
    }  _expectedImageSize;
    NSMutableIndexSet * _hiddenIconIndexSet;
    NSArray * _lockups;
    struct CGSize { 
        double width; 
        double height; 
    }  _maxCellSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _maxImageSize;
    struct { 
        struct CGSize { 
            double width; 
            double height; 
        } iconSize; 
        struct CGSize { 
            double width; 
            double height; 
        } newsstandSize; 
        struct CGSize { 
            double width; 
            double height; 
        } newsstandSwooshSize; 
        struct CGSize { 
            double width; 
            double height; 
        } videoLockupIconSize; 
        struct CGSize { 
            double width; 
            double height; 
        } videoThumbnailSize; 
        double horizontalPadding; 
        double interItemSpacingMixed; 
        double interItemSpacingNewsstand; 
        double interItemSpacingVideoLockup; 
    }  _metrics;
    bool  _seeAllHidden;
    long long  _seeAllStyle;
    NSString * _seeAllTitle;
    NSURL * _seeAllURL;
    long long  _swooshType;
    SKUISwooshView * _swooshView;
    SKUIVideoImageDataConsumer * _videoImageConsumer;
}

@property (nonatomic, readonly) SKUIItemArtworkContext *artworkContext;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *items;
@property (nonatomic, copy) NSArray *lockups;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } seeAllButtonFrame;
@property (getter=isSeeAllHidden, nonatomic) bool seeAllHidden;
@property (nonatomic, readonly) NSURL *seeAllURL;
@property (readonly) Class superclass;
@property (nonatomic) long long swooshType;
@property (nonatomic, readonly) SKUIVideoImageDataConsumer *videoImageConsumer;

+ (long long)_swooshTypeForLockups:(id)arg1;

- (void).cxx_destruct;
- (struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; struct CGSize { double x_3_1_1; double x_3_1_2; } x3; struct CGSize { double x_4_1_1; double x_4_1_2; } x4; struct CGSize { double x_5_1_1; double x_5_1_2; } x5; double x6; double x7; double x8; double x9; })_lockupSwooshMetrics;
- (struct CGSize { double x1; double x2; })_maximumCellSizeForImageSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_newArtworkContextForSwooshType:(long long)arg1;
- (id)_newLockupComponentWithItem:(id)arg1 defaultStyle:(struct SKUILockupStyle { long long x1; long long x2; unsigned long long x3; })arg2;
- (void)_reloadSizes;
- (void)_seeAllAction:(id)arg1;
- (void)_setExpectedImageSize:(struct CGSize { double x1; double x2; })arg1;
- (id)artworkContext;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)dealloc;
- (void)deselectAllItems;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForItemAtIndex:(long long)arg1;
- (id)indexPathsForVisibleItems;
- (id)initWithItemList:(id)arg1;
- (id)initWithSwoosh:(id)arg1;
- (bool)isSeeAllHidden;
- (id)items;
- (void)loadView;
- (id)lockups;
- (id)popImageViewForItemAtIndex:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })seeAllButtonFrame;
- (id)seeAllURL;
- (void)setClientContext:(id)arg1;
- (void)setColorScheme:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setImage:(id)arg1 forItemAtIndex:(long long)arg2;
- (void)setItemsWithLockups:(id)arg1;
- (void)setLockups:(id)arg1;
- (void)setSeeAllHidden:(bool)arg1;
- (void)setSwooshType:(long long)arg1;
- (void)setVideoThumbnail:(id)arg1 forItemAtIndex:(long long)arg2;
- (long long)swooshType;
- (void)unhideImages;
- (id)videoImageConsumer;
- (void)viewWillAppear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
