<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHAJobCoordinator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoAnalysis.framework/PHAJobCoordinator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoAnalysis.framework/PhotoAnalysis (3462.4.210)
 */

@interface PHAJobCoordinator : NSObject <PHAActivityGovernorDelegate, PHADirtyChangeCoalescerDelegate, PHAGraphManagerClientMessagesReceiver, PHAJobCoalescerDelegate, PHAJobConstraintsObserverDelegate, PHAWorkerJobDelegate, PLPhotoAnalysisJobServiceProtocol> {
    PHAActivityGovernor * _activityGovernor;
    PHAJobConstraintsObserver * _constraintsObserver;
    PHAWorkerJob * _currentBackgroundJob;
    PHAJobConstraints * _currentConstraints;
    PHAWorkerJob * _currentForegroundJob;
    <PHAJobCoordinatorDelegate> * _delegate;
    PHADirtyChangeCoalescer * _dirtyCoalescer;
    NSObject<OS_os_transaction> * _foregroundTransaction;
    bool  _graphUpdateNeeded;
    PHAWorkerHealthMonitor * _healthMonitor;
    PHAJobCoalescer * _jobCoalescer;
    PHAJobGenerator * _jobGenerator;
    NSObject<OS_dispatch_source> * _maintenanceTimer;
    PHAManager * _manager;
    double  _maxIntervalSinceLastJobReport;
    bool  _newConstraintsPending;
    _Atomic int  _pendingAsyncTasksCount;
    NSObject<OS_dispatch_queue> * _queue;
    NSObject<OS_os_transaction> * _runningJobTransaction;
    bool  _shouldIgnoreConstraintChanges;
    NSMutableArray * _waitingForegroundJobs;
    PHAWorkerWarmer * _warmer;
    NSMutableSet * _workerTypesServicedForUserFG;
    NSDictionary * _workersByType;
}

@property (nonatomic, readonly) PHAActivityGovernor *activityGovernor;
@property (nonatomic) bool activityGovernorOverride;
@property (nonatomic, readonly) PHAJobConstraintsObserver *constraintsObserver;
@property (nonatomic, retain) PHAWorkerJob *currentBackgroundJob;
@property (copy) PHAJobConstraints *currentConstraints;
@property (nonatomic, retain) PHAWorkerJob *currentForegroundJob;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PHAJobCoordinatorDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) PHADirtyChangeCoalescer *dirtyCoalescer;
@property (nonatomic, retain) NSObject<OS_os_transaction> *foregroundTransaction;
@property (readonly) bool graphUpdateNeeded;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) PHAWorkerHealthMonitor *healthMonitor;
@property (nonatomic, readonly) PHAJobCoalescer *jobCoalescer;
@property (nonatomic, readonly) PHAJobGenerator *jobGenerator;
@property (nonatomic, readonly) NSObject<OS_dispatch_source> *maintenanceTimer;
@property (nonatomic) PHAManager *manager;
@property (nonatomic) double maxIntervalSinceLastJobReport;
@property (nonatomic) bool newConstraintsPending;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (getter=isQuiescent, nonatomic, readonly) bool quiescent;
@property (nonatomic, retain) NSObject<OS_os_transaction> *runningJobTransaction;
@property (nonatomic) bool shouldIgnoreConstraintChanges;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSMutableArray *waitingForegroundJobs;
@property (nonatomic, readonly) PHAWorkerWarmer *warmer;
@property (nonatomic, retain) NSMutableSet *workerTypesServicedForUserFG;
@property (nonatomic, readonly) NSDictionary *workersByType;

- (void).cxx_destruct;
- (void)_cleanupStuckAnalysisState;
- (id)_defaultWorkersByType;
- (void)_dispatchTransactionAsyncWithName:(const char *)arg1 block:(id /* block */)arg2;
- (void)_inq_enforceTimeoutForJob:(id)arg1;
- (void)_inq_enqueueForegroundJob:(id)arg1;
- (void)_inq_handleJobFinished:(id)arg1;
- (void)_inq_handleNoMoreJobsExpected;
- (bool)_inq_isQuiescent;
- (void)_inq_launchJob:(id)arg1;
- (id)_inq_nextForegroundJobCanRunAutomatic:(bool)arg1 canRunUserFG:(bool)arg2 canRunImmediate:(bool)arg3;
- (void)_inq_reconsiderWantsFGActivityBasedOnConstraints:(id)arg1;
- (id)_inq_runningJobs;
- (void)_inq_stopJobDueToConstraintOrActivityChange:(id)arg1;
- (void)_inq_stopJobsAfterConstraintOrActivityChange;
- (void)_inq_timeoutJob:(id)arg1;
- (void)_installMaintenanceTimer;
- (id)_nextAdditionalJobForWorkerTypeObj:(id)arg1 scenario:(unsigned long long)arg2;
- (void)_scheduleNextJob;
- (id)_workerForJob:(id)arg1;
- (id)activityGovernor;
- (bool)activityGovernorOverride;
- (void)coalescer:(id)arg1 didCoalesce:(id)arg2;
- (id)constraintsObserver;
- (id)currentBackgroundJob;
- (id)currentConstraints;
- (id)currentForegroundJob;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)didFinishJob:(id)arg1;
- (id)dirtyCoalescer;
- (void)enforceTimeouts;
- (void)enqueueForegroundJob:(id)arg1;
- (id)foregroundTransaction;
- (void)governorDidGrantBackgroundAccess:(id)arg1;
- (void)governorDidGrantForegroundAccess:(id)arg1;
- (void)governorDidRevokeBackgroundAccess:(id)arg1;
- (void)governorDidRevokeForegroundAccess:(id)arg1;
- (void)graphManagerDidUnloadGraph:(id)arg1;
- (void)graphManagerWillLoadGraph:(id)arg1;
- (bool)graphUpdateNeeded;
- (void)handleOperation:(id)arg1;
- (id)healthMonitor;
- (id)initWithManager:(id)arg1;
- (id)initWithManager:(id)arg1 initialConstraints:(id)arg2 additionalWorkersByType:(id)arg3;
- (bool)isQuiescent;
- (id)jobCoalescer;
- (void)jobCoalescer:(id)arg1 didProduceJob:(id)arg2;
- (void)jobConstraintsObserver:(id)arg1 constraintsDidChange:(id)arg2 mask:(id)arg3 completion:(id /* block */)arg4;
- (id)jobGenerator;
- (id)maintenanceTimer;
- (id)manager;
- (double)maxIntervalSinceLastJobReport;
- (bool)newConstraintsPending;
- (void)operationDidFinish:(id)arg1;
- (id)photoLibrary;
- (void)processJobs;
- (id)queue;
- (id)runningJobTransaction;
- (void)scheduleAssetForOnDemandAnalysisWithUUID:(id)arg1 workerType:(short)arg2 workerFlags:(int)arg3 context:(id)arg4 reply:(id /* block */)arg5;
- (void)setActivityGovernorOverride:(bool)arg1;
- (void)setCurrentBackgroundJob:(id)arg1;
- (void)setCurrentConstraints:(id)arg1;
- (void)setCurrentForegroundJob:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setForegroundTransaction:(id)arg1;
- (void)setJobProcessingConstraintsWithValues:(id)arg1 mask:(id)arg2 context:(id)arg3 reply:(id /* block */)arg4;
- (void)setManager:(id)arg1;
- (void)setMaxIntervalSinceLastJobReport:(double)arg1;
- (void)setNewConstraintsPending:(bool)arg1;
- (void)setQueue:(id)arg1;
- (void)setRunningJobTransaction:(id)arg1;
- (void)setShouldIgnoreConstraintChanges:(bool)arg1;
- (void)setWorkerTypesServicedForUserFG:(id)arg1;
- (bool)shouldIgnoreConstraintChanges;
- (void)shutdown;
- (id)statusAsDictionary;
- (id)waitingForegroundJobs;
- (id)warmer;
- (id)workerTypesServicedForUserFG;
- (id)workersByType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
