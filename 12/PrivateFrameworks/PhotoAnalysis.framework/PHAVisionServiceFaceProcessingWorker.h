<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHAVisionServiceFaceProcessingWorker.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoAnalysis.framework/PHAVisionServiceFaceProcessingWorker.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoAnalysis.framework/PhotoAnalysis (3462.4.210)
 */

@interface PHAVisionServiceFaceProcessingWorker : PHAVisionServiceWorker <PLPhotoAnalysisVisionServiceFaceProcessingProtocol, PVNotificationListener, PVPersonPromoterDelegate, PVVisionIntegrating> {
    struct { 
        double startTimeInterval; 
        unsigned long long assetCount; 
        unsigned long long faceCount; 
        unsigned long long clusteringCount; 
    }  _analysisStatistics;
    bool  _clustererNeedsSyncing;
    bool  _disabledByUserDefaults;
    unsigned long long  _faceAnalysisOptions;
    unsigned long long  _faceIDModelRebuildPeriod;
    unsigned long long  _incrementalPersonProcessingStage;
    unsigned long long  _lastMinimumFaceGroupSizeForCreatingMergeCandidates;
    PHAVisionServicePersistenceDelegate * _persistenceDelegate;
    bool  _personBuilderMergeCandidatesEnabled;
    PhotoVision * _photoVision;
    NSMutableDictionary * _state;
    NSURL * _suggestionLoggingDirectory;
    bool  _suggestionLoggingSessionOpen;
    bool  _suggestionsLoggingEnabled;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long incrementalPersonProcessingStage;
@property (nonatomic) unsigned long long lastMinimumFaceGroupSizeForCreatingMergeCandidates;
@property (nonatomic) bool personBuilderMergeCandidatesEnabled;
@property (readonly) Class superclass;

+ (long long)applicationDataFolderIdentifier;
+ (bool)runsExclusively;
+ (short)workerType;

- (void).cxx_destruct;
- (unsigned long long)_analyzeAsset:(id)arg1 withAttributes:(id)arg2 usingPVImageProvidedByBlock:(id /* block */)arg3 error:(id*)arg4;
- (id)_analyzePVImage:(id)arg1 forAsset:(id)arg2 withAttributes:(id)arg3 error:(id*)arg4;
- (void)_appendToSuggestionsLog:(id)arg1;
- (bool)_buildPersonsIncrementally:(bool)arg1 error:(id*)arg2;
- (void)_closeSuggestionsLoggingSession;
- (bool)_clusterFacesWithPhotoVision:(id)arg1 incrementally:(bool)arg2 error:(id*)arg3;
- (void)_copyImageAtURLToSuggestionsLoggingSession:(id)arg1;
- (bool)_deleteAllVerifiedPersonsWithError:(id*)arg1;
- (void)_didPerformFaceClustering;
- (id)_faceToFaceCountMapForFaces:(id)arg1;
- (int)_faceWorkerTasksToPerformOnAsset:(id)arg1 accordingToAnalysisAttributes:(id)arg2;
- (id)_facesRequiringFaceCropGenerationForAsset:(id)arg1 error:(id*)arg2;
- (void)_finalizeSuggestionsLog;
- (bool)_generateAndAssociateFaceprintedFaceForFaceCrop:(id)arg1 createFaceTorsoprint:(bool)arg2 error:(id*)arg3;
- (bool)_generateAndPersistFaceCropsOfFaces:(id)arg1 inImage:(id)arg2 forAsset:(id)arg3 error:(id*)arg4;
- (bool)_generateAndPersistFaceCropsOfUserConfirmedFacesInImage:(id)arg1 forAsset:(id)arg2 error:(id*)arg3;
- (void)_logAnalysisStatistics;
- (void)_logFaceToSuggestionsLog:(id)arg1;
- (bool)_needToRunClusteringJobForScenario:(unsigned long long)arg1;
- (bool)_needToRunFaceCropProcessingJobForScenario:(unsigned long long)arg1;
- (bool)_needToRunFaceIDModelCreationForScenario:(unsigned long long)arg1;
- (bool)_needToRunPersonBuildingJobForScenario:(unsigned long long)arg1;
- (bool)_needToRunPersonPromoterForScenario:(unsigned long long)arg1;
- (void)_openSuggestionsLoggingSession;
- (void)_performFaceCropProcessingWhileKeepingAliveJob:(id)arg1;
- (void)_performFullVisionCleanup;
- (void)_performIntermediateVisionCleanup;
- (int)_performPersistedFaceAnalysisOfPVImage:(id)arg1 withAttributes:(id)arg2 forAsset:(id)arg3 error:(id*)arg4;
- (int)_performPersistedFaceAnalysisOfResource:(id)arg1 withAttributes:(id)arg2 forAsset:(id)arg3 error:(id*)arg4;
- (id)_photoVisionAllowingCreation:(bool)arg1 syncClusterCache:(bool)arg2 error:(id*)arg3;
- (bool)_promotePersonsWithError:(id*)arg1;
- (id)_pvImageForAsset:(id)arg1 error:(id*)arg2;
- (id)_pvImageForAssetResource:(id)arg1 asset:(id)arg2 error:(id*)arg3;
- (id)_pvImageForAssetResourceFileURL:(id)arg1 forAsset:(id)arg2 error:(id*)arg3;
- (void)_readState;
- (bool)_renderFaceTilesForFaceLocalIdentifiers:(id)arg1 inAssetWithLocalIdentifier:(id)arg2 error:(id*)arg3;
- (void)_resetAnalysisStatistics;
- (bool)_resetFaceClusteringStateWithContext:(id)arg1 error:(id*)arg2;
- (bool)_setAllFaceGroupsNeedPersonBuilding;
- (void)_setStateValue:(id)arg1 forKey:(id)arg2;
- (id)_suggestionsForPersonLocalIdentifier:(id)arg1 clusterSequenceNumbers:(id)arg2 excludePersonLocalIdentifiers:(id)arg3 operation:(id)arg4 context:(id)arg5 error:(id*)arg6;
- (id)_suggestionsForPersonWithLocalIdentifier:(id)arg1 toBeConfirmedPersonSuggestions:(id)arg2 toBeRejectedPersonSuggestions:(id)arg3 operation:(id)arg4 error:(id*)arg5;
- (bool)_synchronouslyGenerateFaceTilesForFaces:(id)arg1 fromAsset:(id)arg2 assetImage:(id)arg3 error:(id*)arg4;
- (bool)_updateFaceCropFace:(id)arg1 withFaceprintForFaceCrop:(id)arg2 createFaceTorsoprint:(bool)arg3 error:(id*)arg4;
- (bool)_validateAsset:(id)arg1 error:(id*)arg2;
- (void)_willPerformFaceClustering;
- (unsigned long long)analyzeAssetResourceFileAtURL:(id)arg1 forAsset:(id)arg2 withAttributes:(id)arg3 error:(id*)arg4;
- (unsigned long long)analyzeImageData:(id)arg1 forAsset:(id)arg2 withAttributes:(id)arg3 error:(id*)arg4;
- (id)bestRepresentativeFaceForPerson:(id)arg1 qualityMeasureByFace:(id)arg2 canceler:(id)arg3;
- (void)configureRequest:(id)arg1 algorithmUmbrellaVersion:(unsigned int)arg2;
- (void)cooldown;
- (bool)deletePersonModel;
- (id)densityClusteringForObjects:(id)arg1 maximumDistance:(double)arg2 minimumNumberOfObjects:(unsigned long long)arg3 withDistanceBlock:(id /* block */)arg4;
- (void)faceCandidatesforKeyFaceForPersonsWithLocalIdentifiers:(id)arg1 context:(id)arg2 reply:(id /* block */)arg3;
- (void)faceClusteringInformation:(unsigned long long)arg1 withContext:(id)arg2 reply:(id /* block */)arg3;
- (bool)faceIDModelLastGenerationDidExceedTimeInterval;
- (void)faceProcessingStatusForUserInterfaceWithContext:(id)arg1 reply:(id /* block */)arg2;
- (id)fetchPersonsForFaceIDModel;
- (void)generateFaceIDModelShouldForce:(bool)arg1 progress:(id)arg2 extendTimeoutBlock:(id /* block */)arg3;
- (bool)getLocallyAvailableAssetResource:(id*)arg1 forAnalyzingAsset:(id)arg2 error:(id*)arg3;
- (void)handlePVNotification:(id)arg1;
- (bool)hasAdditionalJobsForScenario:(unsigned long long)arg1 requestReason:(unsigned long long)arg2;
- (bool)hasStandaloneJobsForScenario:(unsigned long long)arg1;
- (unsigned long long)incrementalPersonProcessingStage;
- (id)initWithPhotoAnalysisManager:(id)arg1 dataLoader:(id)arg2;
- (void)interruptPhotoVision;
- (bool)isEnabled;
- (id)keyFaceForPerson:(id)arg1 qualityMeasureByFace:(id)arg2 updateBlock:(id /* block */)arg3;
- (unsigned long long)lastMinimumFaceGroupSizeForCreatingMergeCandidates;
- (void)markLastBackgroundFaceIDModelRebuildJobDate;
- (id)nextAdditionalJobWithScenario:(unsigned long long)arg1 requestReason:(unsigned long long)arg2;
- (bool)performFaceClusteringWithCompletion:(id /* block */)arg1 error:(id*)arg2;
- (void)performFaceProcessingOnAssetWithLocalIdentifier:(id)arg1 context:(id)arg2 reply:(id /* block */)arg3;
- (bool)performPersonBuildingWithCanceler:(id)arg1 error:(id*)arg2;
- (id)performSocialGroupsIdentifiersWithPersonClusterManager:(id)arg1 forPersons:(id)arg2 overTheYearsComputation:(bool)arg3 updateBlock:(id /* block */)arg4;
- (bool)persistPersonModel:(id)arg1;
- (bool)personBuilderMergeCandidatesEnabled;
- (id)personModelPath;
- (void)personPromoterStatusWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)pingFaceWorkerWithOptions:(id)arg1 context:(id)arg2 reply:(id /* block */)arg3;
- (id)preferredAssetResourcesForAnalyzingAsset:(id)arg1;
- (bool)processAsset:(id)arg1 error:(id*)arg2;
- (bool)processDirtyFaceCrop:(id)arg1 error:(id*)arg2;
- (void)processDirtyFaceCrops;
- (void)processPersonsWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)rebuildPersonsWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)reclusterFacesWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)renderFaceTilesForFaceLocalIdentifiers:(id)arg1 inAssetWithLocalIdentifier:(id)arg2 context:(id)arg3 reply:(id /* block */)arg4;
- (void)requestSuggestedMePersonIdentifierWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)resetFaceClassificationModelWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)resetFaceClusteringStateWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)resetPeopleWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)setIncrementalPersonProcessingStage:(unsigned long long)arg1;
- (void)setLastMinimumFaceGroupSizeForCreatingMergeCandidate:(unsigned long long)arg1;
- (void)setLastMinimumFaceGroupSizeForCreatingMergeCandidates:(unsigned long long)arg1;
- (void)setPersonBuilderMergeCandidatesEnabled:(bool)arg1;
- (bool)shouldRebuildFaceIDModel;
- (void)shutdown;
- (id)statusAsDictionary;
- (bool)stopAnalysisJob:(id)arg1 error:(id*)arg2;
- (void)suggestPersonsForPersonWithLocalIdentifier:(id)arg1 toBeConfirmedPersonSuggestions:(id)arg2 toBeRejectedPersonSuggestions:(id)arg3 context:(id)arg4 reply:(id /* block */)arg5;
- (void)suggestVerifiedPersonLocalIdentifierForFaceWithLocalIdentifier:(id)arg1 context:(id)arg2 reply:(id /* block */)arg3;
- (void)suggestVerifiedPersonLocalIdentifierForPersonWithLocalIdentifier:(id)arg1 context:(id)arg2 reply:(id /* block */)arg3;
- (id)suggestedMeIdentifierWithPersonClusterManager:(id)arg1 forPersons:(id)arg2 updateBlock:(id /* block */)arg3;
- (void)terminatePhotoVision;
- (void)updateKeyFacesOfPersonsWithLocalIdentifiers:(id)arg1 forceUpdate:(bool)arg2 context:(id)arg3 reply:(id /* block */)arg4;
- (void)validateClusterCacheWithContext:(id)arg1 reply:(id /* block */)arg2;
- (void)warmup;
- (void)willCompleteJob:(id)arg1;
- (id)workerStateFileURL;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
