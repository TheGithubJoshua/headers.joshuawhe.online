<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GKVoiceChatServicePrivate.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GameKitServices.framework/GKVoiceChatServicePrivate.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices (1475.1.8)
 */

@interface GKVoiceChatServicePrivate : NSObject <VideoConferenceDelegate> {
    int  chatMode;
    <GKVoiceChatClient> * client;
    NSLock * clientLock;
    VideoConference * conf;
    unsigned int  curCallID;
    struct tagCONNRESULT { 
        unsigned int dwCallID; 
        int iResultCount; 
        int iRole; 
        unsigned int dwRemoteCallID; 
        int proto; 
        int bIfRelay; 
        unsigned short wRelayServType; 
        unsigned short wChannelNumber; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbLocal; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemote; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbDst; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemoteSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRelayExt; 
        unsigned int dwRTT; 
        int bIfLocalCellularQoS; 
        int bIfRemoteCellularQoS; 
        int iLocalCellTech; 
        int iRemoteCellTech; 
        unsigned short wCellularMTU; 
        int bIfUpgrade; 
        int bIfPrimary; 
        int bIfReplaceOnly; 
        struct tagCONNRESULT {} *next; 
    }  currentConnResult;
    bool  focus;
    bool  forceNoICE;
    GKVoiceChatDictionary * incomingCallDict;
    bool  inputMeteringEnabled;
    bool  microphoneMuted;
    GKVoiceChatDictionary * outgoingCallDict;
    bool  outputMeteringEnabled;
    int  state;
    NSRecursiveLock * stateLock;
    GKVoiceChatService * wrapperService;
}

@property int chatMode;
@property (nonatomic) id client;
@property (getter=isFocus) bool focus;
@property (nonatomic, readonly) float inputMeterLevel;
@property (getter=isInputMeteringEnabled) bool inputMeteringEnabled;
@property (readonly) double localBitrate;
@property (readonly) double localFramerate;
@property (nonatomic) void*localVideoLayer;
@property (getter=isMicrophoneMuted) bool microphoneMuted;
@property (nonatomic, readonly) float outputMeterLevel;
@property (getter=isOutputMeteringEnabled) bool outputMeteringEnabled;
@property (readonly) double remoteBitrate;
@property (readonly) double remoteFramerate;
@property float remoteParticipantVolume;
@property (nonatomic) void*remoteVideoLayer;
@property int state;
@property GKVoiceChatService *wrapperService;

+ (id)defaultVoiceChatService;

- (bool)acceptCallID:(unsigned int)arg1 error:(id*)arg2;
- (int)chatMode;
- (void)cleanup;
- (id)client;
- (id)createInvite:(id*)arg1 toParticipant:(id)arg2 callID:(unsigned int*)arg3;
- (id)createReplyUsingDictionary:(id)arg1 replyCode:(unsigned long long)arg2 error:(id*)arg3;
- (void)dealloc;
- (void)denyCallID:(unsigned int)arg1;
- (void)forceNoICE:(bool)arg1;
- (bool)getNSError:(id*)arg1 code:(long long)arg2 description:(id)arg3 hResult:(int)arg4;
- (bool)getNSError:(id*)arg1 code:(long long)arg2 description:(id)arg3 reason:(id)arg4;
- (void)informClientOfInviteFromParticipant:(id)arg1;
- (void)informClientVoiceChatDidNotStart:(id)arg1;
- (void)informClientVoiceChatDidNotStartMainSelector:(id)arg1;
- (void)informClientVoiceChatDidStart:(id)arg1;
- (void)informClientVoiceChatDidStartMainSelector:(id)arg1;
- (void)informClientVoiceChatDidStop:(id)arg1;
- (id)init;
- (float)inputMeterLevel;
- (bool)inviteIsValid:(id)arg1;
- (bool)isFocus;
- (bool)isInputMeteringEnabled;
- (bool)isMicrophoneMuted;
- (bool)isOutputMeteringEnabled;
- (double)localBitrate;
- (id)localDisplayNameForCallID:(unsigned int)arg1;
- (double)localFramerate;
- (void*)localVideoLayer;
- (float)outputMeterLevel;
- (void)receivedData:(id)arg1 fromParticipantID:(id)arg2;
- (double)remoteBitrate;
- (id)remoteDisplayNameForCallID:(unsigned int)arg1;
- (double)remoteFramerate;
- (float)remoteParticipantVolume;
- (void*)remoteVideoLayer;
- (void)resetState;
- (void)setChatMode:(int)arg1;
- (void)setClient:(id)arg1;
- (void)setFocus:(bool)arg1;
- (void)setInputMeteringEnabled:(bool)arg1;
- (void)setLocalVideoLayer:(void*)arg1;
- (void)setMicrophoneMuted:(bool)arg1;
- (void)setOutputMeteringEnabled:(bool)arg1;
- (void)setRemoteParticipantVolume:(float)arg1;
- (void)setRemoteVideoLayer:(void*)arg1;
- (void)setState:(int)arg1;
- (void)setWrapperService:(id)arg1;
- (int)startICEConnectionCheck:(id)arg1 isCaller:(bool)arg2;
- (int)startICEConnectionCheck:(id)arg1 isCaller:(bool)arg2 withCallID:(unsigned int)arg3;
- (bool)startVoiceChatWithParticipantID:(id)arg1 error:(id*)arg2;
- (int)state;
- (void)stopVoiceChatProc:(id)arg1;
- (void)stopVoiceChatWithParticipantID:(id)arg1;
- (void)videoConference:(id)arg1 didStartSession:(bool)arg2 withCallID:(unsigned int)arg3 error:(id)arg4;
- (void)videoConference:(id)arg1 didStopWithCallID:(unsigned int)arg2 error:(id)arg3;
- (id)wrapperService;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
