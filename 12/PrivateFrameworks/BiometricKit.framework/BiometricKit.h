<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BiometricKit.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/BiometricKit.framework/BiometricKit.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/BiometricKit.framework/BiometricKit (100.99)
 */

@interface BiometricKit : NSObject <BiometricKitDelegateXpcProtocol> {
    bool  _ariadneSignposts;
    struct { 
        int count; 
        int capa; 
        struct { /* ? */ } **items; 
        int unusedImageCount; 
        int componentCount; 
        int componentCapa; 
        int bestComponentIndex; 
        int bestMapiComponentIndex; 
        struct { /* ? */ } **components; 
        short mapiNodeAddedIndex; 
        short mapiNodeRemovedIndex; 
        int updateCount; 
        bool structureIsInconsistent; 
    }  _compSet;
    <BiometricKitDelegate> * _delegate;
    struct { 
        struct { 
            NSData *imageData; 
            unsigned int width; 
            unsigned int height; 
        } nodes[300]; 
    }  _enrollImageSet;
    int  _enrollProgressConfigRenderMode;
    int  _enrollingMode;
    NSDictionary * _images;
    bool  _inUse;
    bool  _isInternalInstall;
    int  _matchingMode;
    NSObject<OS_os_log> * _osLog;
    NSObject<OS_os_log> * _osLogTrace;
    bool  _showDebugImages;
    BiometricKitStatistics * _statistics;
    BiometricKitXPCClient * _xpcClient;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <BiometricKitDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) int enrollProgressConfigRenderMode;
@property (readonly) unsigned long long hash;
@property bool inUse;
@property (readonly) Class superclass;

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (long long)getSensorPatchVersion;
+ (id)manager;

- (void).cxx_destruct;
- (void)_enrollResult:(id)arg1;
- (void)_homeButtonPressed;
- (void)_matchResult:(id)arg1 withDictionary:(id)arg2;
- (void)_statusMessage:(unsigned int)arg1;
- (void)_taskResumeStatus:(int)arg1;
- (void)_templateUpdate:(id)arg1 withDictionary:(id)arg2;
- (void)_touchIDButtonPressed:(bool)arg1;
- (void)appDidBecomeActive:(id)arg1;
- (void)appDidEnterBackground:(id)arg1;
- (void)appWillEnterForeground:(id)arg1;
- (void)appWillResignActive:(id)arg1;
- (void)cancel;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)createMatchInfo:(id)arg1 withTopology:(const struct { short x1; short x2; short x3; struct { short x_4_1_1; short x_4_1_2; short x_4_1_3; } x4; struct { short x_5_1_1; short x_5_1_2; short x_5_1_3; short x_5_1_4; short x_5_1_5; short x_5_1_6; short x_5_1_7; unsigned char x_5_1_8[16]; unsigned char x_5_1_9[16]; short x_5_1_10; struct { struct { short x_1_3_1; short x_1_3_2; short x_1_3_3; } x_11_2_1; short x_11_2_2; short x_11_2_3; } x_5_1_11[300]; short x_5_1_12; short x_5_1_13; short x_5_1_14; short x_5_1_15; short x_5_1_16; short x_5_1_17; } x5; int x6; int x7; }*)arg2 withMatchImage:(struct { id x1; unsigned int x2; unsigned int x3; }*)arg3;
- (void)dealloc;
- (id)delegate;
- (int)detectFingerWithOptions:(id)arg1;
- (int)detectPresenceWithOptions:(id)arg1;
- (int)diagnostics:(int)arg1 withOptions:(id)arg2 passed:(bool*)arg3 withDetails:(id*)arg4;
- (int)dropUnlockToken;
- (int)enableBackgroundFdet:(bool)arg1;
- (int)enroll:(int)arg1 forUser:(unsigned int)arg2 withOptions:(id)arg3;
- (int)enroll:(int)arg1 withOptions:(id)arg2;
- (void)enrollFeedback:(id)arg1 client:(unsigned long long)arg2;
- (int)enrollProgressConfigRenderMode;
- (void)enrollProgressMessage:(unsigned int)arg1;
- (void)enrollResult:(id)arg1 client:(unsigned long long)arg2;
- (void)enrollUpdate:(id)arg1 client:(unsigned long long)arg2;
- (bool)fileRadarWithLogs:(id)arg1 withDescription:(id)arg2;
- (int)forceBioLockout;
- (int)forceBioLockoutForUser:(unsigned int)arg1;
- (long long)getBioLockoutState;
- (long long)getBioLockoutStateForUser:(unsigned int)arg1;
- (long long)getCalBlobVersion;
- (id)getCalibrationDataInfo;
- (long long)getCalibrationDataState;
- (int)getCountersignedStoreToken:(id*)arg1;
- (long long)getFreeIdentityCount:(int)arg1 forUser:(unsigned int)arg2;
- (id)getIdentitiesDatabaseHash;
- (id)getIdentitiesDatabaseHashForUser:(unsigned int)arg1;
- (id)getIdentitiesDatabaseUUID;
- (id)getIdentitiesDatabaseUUIDForUser:(unsigned int)arg1;
- (id)getIdentityFromUUID:(id)arg1;
- (id)getLogs:(bool)arg1 withDetails:(id*)arg2;
- (id)getMatchPolicyInfo;
- (long long)getMaxIdentityCount:(int)arg1;
- (float)getModulationRatio;
- (id)getProtectedConfiguration;
- (id)getProtectedConfigurationForUser:(unsigned int)arg1;
- (long long)getProvisioningState;
- (long long)getSensorCalibrationStatus;
- (id)getSensorInfo;
- (id)getSystemProtectedConfiguration;
- (id)getTemplateInfo:(id)arg1;
- (void)homeButtonPressed:(unsigned long long)arg1;
- (id)identities:(id)arg1;
- (id)imageDictFromRawImageData:(struct { id x1; unsigned int x2; unsigned int x3; }*)arg1;
- (bool)inUse;
- (id)init;
- (bool)isDelegate;
- (bool)isFingerOn;
- (bool)isTouchIDAvailableWithInfo:(long long*)arg1;
- (bool)isTouchIDCapable;
- (void)logEventOrCode:(unsigned long long)arg1;
- (int)match:(id)arg1;
- (int)match:(id)arg1 withOptions:(id)arg2;
- (void)matchResult:(id)arg1 details:(id)arg2 client:(unsigned long long)arg3;
- (id)pullCalibrationData;
- (id)pullCaptureBuffer;
- (id)pullDebugImage:(bool)arg1 rotated:(bool)arg2;
- (void)pullDebugImageData:(bool)arg1 rotated:(bool)arg2 target:(struct { id x1; unsigned int x2; unsigned int x3; }*)arg3;
- (int)registerDSID:(unsigned long long)arg1 withAuthToken:(id)arg2;
- (int)registerDSID:(unsigned long long)arg1 withOptions:(id)arg2;
- (int)registerStoreToken:(id)arg1;
- (int)removeAllIdentitiesForUser:(unsigned int)arg1 withOptions:(id)arg2;
- (int)removeIdentity:(id)arg1;
- (int)removeIdentity:(id)arg1 withOptions:(id)arg2;
- (int)resetAppleConnectCounter;
- (void)setDebugImages:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnrollProgressConfigRenderMode:(int)arg1;
- (void)setInUse:(bool)arg1;
- (int)setProtectedConfiguration:(id)arg1 forUser:(unsigned int)arg2 withOptions:(id)arg3;
- (int)setProtectedConfiguration:(id)arg1 withAuthToken:(id)arg2;
- (int)setProtectedConfiguration:(id)arg1 withOptions:(id)arg2;
- (int)setSystemProtectedConfiguration:(id)arg1 withOptions:(id)arg2;
- (int)setUserDSID:(unsigned long long)arg1 withAuthToken:(id)arg2;
- (int)setUserDSID:(unsigned long long)arg1 withOptions:(id)arg2;
- (void)statusMessage:(unsigned int)arg1 client:(unsigned long long)arg2;
- (void)statusMessage:(unsigned int)arg1 details:(id)arg2 client:(unsigned long long)arg3;
- (void)taskResumeStatus:(int)arg1 client:(unsigned long long)arg2;
- (void)templateUpdate:(id)arg1 details:(id)arg2 client:(unsigned long long)arg3;
- (void)timestampEvent:(unsigned long long)arg1;
- (void)touchIDButtonPressed:(bool)arg1 client:(unsigned long long)arg2;
- (int)updateIdentity:(id)arg1;
- (int)updateIdentity:(id)arg1 withOptions:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
