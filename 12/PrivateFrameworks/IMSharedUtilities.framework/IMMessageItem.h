<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMMessageItem.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMSharedUtilities.framework/IMMessageItem.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMSharedUtilities.framework/IMSharedUtilities (1000)
 */

@interface IMMessageItem : IMItem <IMRemoteObjectCoding, NSCopying, NSSecureCoding> {
    bool  _backwardsCompatibleVersion;
    NSDictionary * _bizIntent;
    bool  _blockingRichLinks;
    NSAttributedString * _body;
    NSData * _bodyData;
    NSData * _contactsAvatarRecipeData;
    unsigned int  _error;
    long long  _expireState;
    NSString * _expressiveSendStyleID;
    NSArray * _fileTransferGUIDs;
    unsigned long long  _flags;
    bool  _isSOS;
    NSString * _locale;
    NSDictionary * _messageSummaryInfo;
    NSString * _notificationIDSTokenURI;
    NSData * _payloadData;
    NSString * _plainBody;
    long long  _replaceID;
    NSString * _subject;
    NSDate * _timeDelivered;
    NSDate * _timeExpressiveSendPlayed;
    NSDate * _timePlayed;
    NSDate * _timeRead;
    NSData * _typingIndicatorIcon;
    bool  _updatingDataSourcePayload;
}

@property (nonatomic) bool backwardsCompatibleVersion;
@property (nonatomic, retain) NSDictionary *bizIntent;
@property (nonatomic) bool blockingRichLinks;
@property (nonatomic, retain) NSAttributedString *body;
@property (nonatomic, retain) NSData *bodyData;
@property (nonatomic, readonly, copy) NSAttributedString *breadcrumbText;
@property (nonatomic, retain) NSData *contactsAvatarRecipeData;
@property (nonatomic) unsigned int errorCode;
@property (nonatomic) long long expireState;
@property (nonatomic, retain) NSString *expressiveSendStyleID;
@property (nonatomic, retain) NSArray *fileTransferGUIDs;
@property (nonatomic) unsigned long long flags;
@property (nonatomic) bool hasDataDetectorResults;
@property (nonatomic, readonly) bool isAlert;
@property (nonatomic, readonly) bool isAudioMessage;
@property (nonatomic) bool isCorrupt;
@property (nonatomic, readonly) bool isDelivered;
@property (nonatomic, readonly) bool isEmote;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) bool isExpirable;
@property (nonatomic, readonly) bool isFinished;
@property (nonatomic, readonly) bool isFromExternalSource;
@property (nonatomic, readonly) bool isLocatingMessage;
@property (nonatomic, readonly) bool isPlayed;
@property (nonatomic, readonly) bool isPrepared;
@property (nonatomic, readonly) bool isRead;
@property (nonatomic) bool isSOS;
@property (nonatomic, readonly) bool isSent;
@property (nonatomic, readonly) bool isTypingMessage;
@property (nonatomic, retain) NSString *locale;
@property (nonatomic, retain) NSDictionary *messageSummaryInfo;
@property (nonatomic, retain) NSString *notificationIDSTokenURI;
@property (nonatomic, retain) NSData *payloadData;
@property (nonatomic, retain) NSString *plainBody;
@property (nonatomic) long long replaceID;
@property (nonatomic, retain) NSString *subject;
@property (nonatomic, retain) NSDate *timeDelivered;
@property (nonatomic, retain) NSDate *timeExpressiveSendPlayed;
@property (nonatomic, retain) NSDate *timePlayed;
@property (nonatomic, retain) NSDate *timeRead;
@property (nonatomic, retain) NSData *typingIndicatorIcon;
@property (getter=isUpdatingDataSourcePayload, nonatomic) bool updatingDataSourcePayload;
@property (nonatomic, readonly) bool wasDataDetected;
@property (nonatomic, readonly) bool wasDowngraded;

// Image: /System/Library/PrivateFrameworks/IMSharedUtilities.framework/IMSharedUtilities

+ (bool)messageContainsSurfDD:(id)arg1;
+ (bool)supportsSecureCoding;

- (void)_clearBodyData;
- (void)_generateBodyDataIfNeeded;
- (void)_generateBodyTextIfNeeded;
- (id)_localizedBackwardsCompatibleExpressiveSendText;
- (void)_regenerateBodyData;
- (void)_regenerateBodyText;
- (void)_updateFlags:(unsigned long long)arg1;
- (void)adjustIsEmptyFlag;
- (bool)backwardsCompatibleVersion;
- (id)bizIntent;
- (bool)blockingRichLinks;
- (id)body;
- (id)bodyData;
- (id)breadcrumbText;
- (id)contactsAvatarRecipeData;
- (id)copyDictionaryRepresentation;
- (id)copyForBackwardsCompatibility;
- (id)copyWithFlags:(unsigned long long)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateAttachmentGUIDsWithBlock:(id /* block */)arg1;
- (unsigned int)errorCode;
- (long long)expireState;
- (id)expressiveSendStyleID;
- (id)fileTransferGUIDs;
- (unsigned long long)flags;
- (bool)hasDataDetectorResults;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)initWithDictionary:(id)arg1 hint:(id)arg2;
- (id)initWithSender:(id)arg1 time:(id)arg2 body:(id)arg3 attributes:(id)arg4 fileTransferGUIDs:(id)arg5 flags:(unsigned long long)arg6 error:(id)arg7 guid:(id)arg8;
- (id)initWithSender:(id)arg1 time:(id)arg2 body:(id)arg3 attributes:(id)arg4 fileTransferGUIDs:(id)arg5 flags:(unsigned long long)arg6 error:(id)arg7 guid:(id)arg8 type:(long long)arg9;
- (id)initWithSender:(id)arg1 time:(id)arg2 guid:(id)arg3 type:(long long)arg4;
- (id)initWithSenderInfo:(id)arg1 time:(id)arg2 guid:(id)arg3 messageID:(long long)arg4 account:(id)arg5 accountID:(id)arg6 service:(id)arg7 handle:(id)arg8 roomName:(id)arg9 unformattedID:(id)arg10 countryCode:(id)arg11;
- (id)initWithSenderInfo:(id)arg1 time:(id)arg2 timeRead:(id)arg3 timeDelivered:(id)arg4 timePlayed:(id)arg5 subject:(id)arg6 body:(id)arg7 bodyData:(id)arg8 attributes:(id)arg9 fileTransferGUIDs:(id)arg10 flags:(unsigned long long)arg11 guid:(id)arg12 messageID:(long long)arg13 account:(id)arg14 accountID:(id)arg15 service:(id)arg16 handle:(id)arg17 roomName:(id)arg18 unformattedID:(id)arg19 countryCode:(id)arg20 expireState:(long long)arg21 balloonBundleID:(id)arg22 payloadData:(id)arg23 expressiveSendStyleID:(id)arg24 timeExpressiveSendPlayed:(id)arg25 bizIntent:(id)arg26 locale:(id)arg27 errorType:(unsigned int)arg28;
- (id)initWithSenderInfo:(id)arg1 time:(id)arg2 timeRead:(id)arg3 timeDelivered:(id)arg4 timePlayed:(id)arg5 subject:(id)arg6 body:(id)arg7 bodyData:(id)arg8 attributes:(id)arg9 fileTransferGUIDs:(id)arg10 flags:(unsigned long long)arg11 guid:(id)arg12 messageID:(long long)arg13 account:(id)arg14 accountID:(id)arg15 service:(id)arg16 handle:(id)arg17 roomName:(id)arg18 unformattedID:(id)arg19 countryCode:(id)arg20 expireState:(long long)arg21 balloonBundleID:(id)arg22 payloadData:(id)arg23 expressiveSendStyleID:(id)arg24 timeExpressiveSendPlayed:(id)arg25 bizIntent:(id)arg26 locale:(id)arg27 errorType:(unsigned int)arg28 type:(long long)arg29;
- (bool)isAlert;
- (bool)isAudioMessage;
- (bool)isCorrupt;
- (bool)isDelivered;
- (bool)isEmote;
- (bool)isEmpty;
- (bool)isEqual:(id)arg1;
- (bool)isExpirable;
- (bool)isFinished;
- (bool)isFirstMessageCandidate;
- (bool)isFromExternalSource;
- (bool)isFromMe;
- (bool)isLastMessageCandidate;
- (bool)isLocatingMessage;
- (bool)isPlayed;
- (bool)isPrepared;
- (bool)isRead;
- (bool)isSOS;
- (bool)isSent;
- (bool)isTypingMessage;
- (bool)isUpdatingDataSourcePayload;
- (id)locale;
- (id)messageSummaryInfo;
- (id)notificationIDSTokenURI;
- (id)payloadData;
- (id)plainBody;
- (long long)replaceID;
- (id)sender;
- (void)setBackwardsCompatibleVersion:(bool)arg1;
- (void)setBizIntent:(id)arg1;
- (void)setBlockingRichLinks:(bool)arg1;
- (void)setBody:(id)arg1;
- (void)setBodyData:(id)arg1;
- (void)setContactsAvatarRecipeData:(id)arg1;
- (void)setErrorCode:(unsigned int)arg1;
- (void)setExpireState:(long long)arg1;
- (void)setExpressiveSendStyleID:(id)arg1;
- (void)setFileTransferGUIDs:(id)arg1;
- (void)setFlags:(unsigned long long)arg1;
- (void)setHasDataDetectorResults:(bool)arg1;
- (void)setIsCorrupt:(bool)arg1;
- (void)setIsSOS:(bool)arg1;
- (void)setLocale:(id)arg1;
- (void)setMessageSummaryInfo:(id)arg1;
- (void)setNotificationIDSTokenURI:(id)arg1;
- (void)setPayloadData:(id)arg1;
- (void)setPlainBody:(id)arg1;
- (void)setReplaceID:(long long)arg1;
- (void)setSubject:(id)arg1;
- (void)setTimeDelivered:(id)arg1;
- (void)setTimeExpressiveSendPlayed:(id)arg1;
- (void)setTimePlayed:(id)arg1;
- (void)setTimeRead:(id)arg1;
- (void)setTypingIndicatorIcon:(id)arg1;
- (void)setUpdatingDataSourcePayload:(bool)arg1;
- (void)setWasDataDetected:(bool)arg1;
- (id)subject;
- (id)timeDelivered;
- (id)timeExpressiveSendPlayed;
- (id)timePlayed;
- (id)timeRead;
- (id)typingIndicatorIcon;
- (bool)wasDataDetected;
- (bool)wasDowngraded;

// Image: /System/Library/PrivateFrameworks/IMCore.framework/IMCore

+ (Class)contextClass;

- (id)_copy;
- (id)_copyWithFlags:(unsigned long long)arg1;
- (bool)_hasMessageChatItem;
- (bool)_isInvitation;
- (id)_newChatItems;
- (id)_newChatItemsWithFilteredChat:(bool)arg1 isBusiness:(bool)arg2 parentChatIsSpam:(bool)arg3 hasKnownParticipants:(bool)arg4;
- (id)_service;
- (void)_setInivtation:(bool)arg1;
- (id)descriptionForPurpose:(long long)arg1 isGroupMessage:(bool)arg2 messageDataSource:(id /* block */)arg3 attachmentDataSource:(id /* block */)arg4;
- (bool)isCancelTypingMessage;
- (bool)isExtensibleMessageWithPluginPayload:(id*)arg1;
- (bool)isIncomingTypingMessage;
- (bool)isIncomingTypingOrCancelTypingMessage;
- (bool)isSystemMessage;
- (bool)isTypingOrCancelTypingMessage;
- (id)message;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
