<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMEventListener.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMSharedUtilities.framework/IMEventListener.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMSharedUtilities.framework/IMSharedUtilities (1000)
 */

@interface IMEventListener : NSObject {
    id /* block */  _completionBlock;
    id /* block */  _didInvokeCompletion;
    unsigned long long  _eventCount;
    NSObject<OS_dispatch_semaphore> * _semaphore;
    id  _target;
    double  _timeLastEventReceived;
    double  _timeListeningStarted;
    double  _timeListeningStopped;
    double  _timeout;
    double  _timerStart;
    id /* block */  _willInvokeCompletion;
    bool  _willRepeat;
}

@property (copy) id /* block */ completionBlock;
@property (copy) id /* block */ didInvokeCompletion;
@property (readonly) double elapsedWaitingTime;
@property (readonly) unsigned long long eventCount;
@property (getter=isListening, readonly) bool listening;
@property (nonatomic, readonly) NSObject<OS_dispatch_semaphore> *semaphore;
@property id target;
@property (readonly) double timeLastEventReceived;
@property (readonly) double timeListeningStarted;
@property (readonly) double timeListeningStopped;
@property double timeout;
@property (nonatomic) double timerStart;
@property (copy) id /* block */ willInvokeCompletion;
@property (nonatomic) bool willRepeat;

+ (id)_mutableListenerDictionary;
+ (id)allListeners;
+ (id)eventListener;
+ (id)eventListenerWithNotificationName:(id)arg1 object:(id)arg2;

- (void).cxx_destruct;
- (void)_addToListeners;
- (void)_cancelTimeoutTimer;
- (void)_didReceiveEvent:(bool)arg1 userInfo:(id)arg2 error:(id)arg3;
- (void)_dispatchStartEventBlock:(id /* block */)arg1;
- (void)_handleTimeout:(id)arg1;
- (void)_invokeCompletion:(bool)arg1 userInfo:(id)arg2 error:(id)arg3;
- (void)_removeFromListeners;
- (void)_reset;
- (void)_startListening;
- (void)_startTimeoutTimerIfNeeded;
- (void)_stopListening;
- (id /* block */)completionBlock;
- (id)createResult:(bool)arg1 userInfo:(id)arg2 error:(id)arg3;
- (id /* block */)didInvokeCompletion;
- (double)elapsedWaitingTime;
- (unsigned long long)eventCount;
- (bool)isListening;
- (void)reset;
- (id)semaphore;
- (void)setCompletionBlock:(id /* block */)arg1;
- (void)setDidInvokeCompletion:(id /* block */)arg1;
- (void)setTarget:(id)arg1;
- (void)setTimeout:(double)arg1;
- (void)setTimerStart:(double)arg1;
- (void)setWillInvokeCompletion:(id /* block */)arg1;
- (void)setWillRepeat:(bool)arg1;
- (void)startListening;
- (void)startListeningForEventTarget:(id)arg1 completion:(id /* block */)arg2;
- (void)startListeningForEventTarget:(id)arg1 sendStartingEvent:(id /* block */)arg2 completion:(id /* block */)arg3;
- (void)stopListening;
- (id)target;
- (double)timeLastEventReceived;
- (double)timeListeningStarted;
- (double)timeListeningStopped;
- (double)timeout;
- (double)timerStart;
- (void)waitForCompletion;
- (id /* block */)willInvokeCompletion;
- (bool)willRepeat;
- (void)willReset;
- (void)willStartListening;
- (void)willStopListening;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
