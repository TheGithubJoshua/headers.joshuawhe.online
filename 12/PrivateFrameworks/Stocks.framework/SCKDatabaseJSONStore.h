<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCKDatabaseJSONStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Stocks.framework/SCKDatabaseJSONStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Stocks.framework/Stocks ()
 */

@interface SCKDatabaseJSONStore : NSObject <NSFilePresenter, SCKDatabaseStore, SCKDatabaseStoreCoordinator, SCKOperationThrottlerDelegate> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    NSObject<OS_dispatch_source> * _changeListenerSource;
    bool  _cloudBackupEnabled;
    unsigned long long  _diskReadCount;
    unsigned long long  _diskWriteCount;
    NSFileCoordinator * _fileCoordinator;
    NSMutableDictionary * _foreignZoneDictsByName;
    bool  _havePendingChanges;
    NSDate * _lastDirtyDate;
    unsigned int  _lastKnownStoreChangeTag;
    NSDate * _lastSyncDate;
    bool  _loadedFromDisk;
    NSHashTable * _observers;
    NSOperationQueue * _presentedItemOperationQueue;
    NSURL * _presentedItemURL;
    <SCKOperationThrottler> * _saveThrottler;
    CKServerChangeToken * _serverChangeToken;
    NSURL * _storeURL;
    NSObject<OS_dispatch_queue> * _workQueue;
    NSMutableDictionary * _zoneStoresByName;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *accessQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *changeListenerSource;
@property (getter=isCloudBackupEnabled, nonatomic) bool cloudBackupEnabled;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long diskReadCount;
@property (nonatomic, readonly) unsigned long long diskWriteCount;
@property (nonatomic, retain) NSFileCoordinator *fileCoordinator;
@property (nonatomic, retain) NSMutableDictionary *foreignZoneDictsByName;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool havePendingChanges;
@property (nonatomic, copy) NSDate *lastDirtyDate;
@property (nonatomic) unsigned int lastKnownStoreChangeTag;
@property (nonatomic, copy) NSDate *lastSyncDate;
@property (nonatomic) bool loadedFromDisk;
@property (readonly) NSSet *observedPresentedItemUbiquityAttributes;
@property (nonatomic, retain) NSHashTable *observers;
@property (readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property (readonly, copy) NSURL *presentedItemURL;
@property (readonly, copy) NSURL *primaryPresentedItemURL;
@property (nonatomic, retain) <SCKOperationThrottler> *saveThrottler;
@property (nonatomic, copy) CKServerChangeToken *serverChangeToken;
@property (nonatomic, readonly, copy) NSURL *storeURL;
@property (readonly) Class superclass;
@property (nonatomic, readonly) <SCKDatabaseStore> *underlyingStore;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *workQueue;
@property (nonatomic, retain) NSMutableDictionary *zoneStoresByName;

+ (id)preferredFileURLForSchema:(id)arg1 parentDirectoryURL:(id)arg2;

- (void).cxx_destruct;
- (void)_applyCloudBackupEnabledPropertyToStoreURL;
- (id)_decodeCodableObjectOfClass:(Class)arg1 from:(id)arg2 error:(id*)arg3;
- (id)_decodeDate:(id)arg1;
- (id)_encodeCodableObject:(id)arg1;
- (id)_encodeDate:(id)arg1;
- (void)_listenForChangesToFileURL:(id)arg1;
- (void)_loadFromFileURL:(id)arg1;
- (void)_reloadIfNeededFromFileURL:(id)arg1;
- (void)_saveIfNeededToFileURL:(id)arg1;
- (void)_saveToFileURL:(id)arg1;
- (id)accessQueue;
- (void)addObserver:(id)arg1;
- (id)changeListenerSource;
- (unsigned long long)diskReadCount;
- (unsigned long long)diskWriteCount;
- (id)fileCoordinator;
- (bool)flushToDiskWithTimeout:(double)arg1;
- (id)foreignZoneDictsByName;
- (bool)havePendingChanges;
- (id)initWithSchema:(id)arg1 fileURL:(id)arg2;
- (id)initWithSchema:(id)arg1 parentDirectoryURL:(id)arg2;
- (bool)isCloudBackupEnabled;
- (id)lastDirtyDate;
- (unsigned int)lastKnownStoreChangeTag;
- (id)lastSyncDate;
- (bool)loadedFromDisk;
- (id)observers;
- (void)operationThrottlerPerformOperation:(id)arg1;
- (id)presentedItemOperationQueue;
- (id)presentedItemURL;
- (void)readWithAccessor:(id /* block */)arg1;
- (void)readZone:(id)arg1 withAccessor:(id /* block */)arg2;
- (void)reloadWithAccessor:(id /* block */)arg1;
- (void)removeObserver:(id)arg1;
- (void)savePresentedItemChangesWithCompletionHandler:(id /* block */)arg1;
- (id)saveThrottler;
- (id)serverChangeToken;
- (void)setAccessQueue:(id)arg1;
- (void)setChangeListenerSource:(id)arg1;
- (void)setCloudBackupEnabled:(bool)arg1;
- (void)setFileCoordinator:(id)arg1;
- (void)setForeignZoneDictsByName:(id)arg1;
- (void)setHavePendingChanges:(bool)arg1;
- (void)setLastDirtyDate:(id)arg1;
- (void)setLastKnownStoreChangeTag:(unsigned int)arg1;
- (void)setLastSyncDate:(id)arg1;
- (void)setLoadedFromDisk:(bool)arg1;
- (void)setObservers:(id)arg1;
- (void)setSaveThrottler:(id)arg1;
- (void)setServerChangeToken:(id)arg1;
- (void)setWorkQueue:(id)arg1;
- (void)setZoneStoresByName:(id)arg1;
- (id)storeURL;
- (id)underlyingStore;
- (id)workQueue;
- (void)writeWithAccessor:(id /* block */)arg1;
- (void)writeZone:(id)arg1 withAccessor:(id /* block */)arg2;
- (id)zoneStoreForSchema:(id)arg1;
- (id)zoneStoresByName;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
