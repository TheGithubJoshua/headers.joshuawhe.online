<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CoreDAVContainerSyncTaskGroup.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreDAV.framework/CoreDAVContainerSyncTaskGroup.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreDAV.framework/CoreDAV (347)
 */

@interface CoreDAVContainerSyncTaskGroup : CoreDAVTaskGroup <CoreDAVDeleteTaskDelegate, CoreDAVGetTaskDelegate, CoreDAVPutTaskDelegate> {
    NSMutableArray * _actions;
    bool  _actionsOnly;
    NSURL * _addMemberURL;
    Class  _appSpecificDataItemClass;
    NSString * _bulkChangeCheckCTag;
    NSDictionary * _bulkRequests;
    bool  _ensureUpdatedCTag;
    NSURL * _folderURL;
    NSMutableArray * _localItemURLOrder;
    unsigned long long  _maxIndependentTasks;
    unsigned long long  _multiGetBatchSize;
    NSString * _nextCTag;
    NSString * _nextSyncToken;
    int  _phase;
    NSString * _previousCTag;
    NSString * _previousSyncToken;
    NSMutableDictionary * _remainingHREFsToModDeleteActions;
    NSMutableDictionary * _remainingUUIDsToAddActions;
    bool  _syncItemOrder;
    NSMutableSet * _syncReportDeletedURLs;
    NSMutableArray * _unsubmittedTasks;
    NSMutableDictionary * _urlToETag;
    bool  _useMultiGet;
    bool  _useSyncCollection;
}

@property (nonatomic) bool actionsOnly;
@property (nonatomic, retain) NSURL *addMemberURL;
@property (nonatomic, retain) NSString *bulkChangeCheckCTag;
@property (nonatomic, retain) NSDictionary *bulkRequests;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CoreDAVLocalDBInfoProvider> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool ensureUpdatedCTag;
@property (nonatomic, readonly) NSURL *folderURL;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *localItemURLOrder;
@property (nonatomic) unsigned long long maxIndependentTasks;
@property (nonatomic) unsigned long long multiGetBatchSize;
@property (nonatomic, retain) NSString *nextCTag;
@property (nonatomic, retain) NSString *previousCTag;
@property (nonatomic, retain) NSString *previousSyncToken;
@property (readonly) Class superclass;
@property (nonatomic) bool useMultiGet;
@property (nonatomic) bool useSyncCollection;

- (void).cxx_destruct;
- (void)_bulkChange;
- (void)_bulkChangeTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_configureMultiGet:(id)arg1;
- (void)_getCTag;
- (void)_getDataPayloads;
- (void)_getETags;
- (void)_getOrder;
- (void)_getTask:(id)arg1 finishedWithParsedContents:(id)arg2 deletedItems:(id)arg3 error:(id)arg4;
- (void)_postTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_pushActions;
- (void)_sendNextBatch;
- (unsigned long long)_submitTasks;
- (void)_syncReportTask:(id)arg1 didFinishWithError:(id)arg2;
- (void)_tearDownAllUnsubmittedTasks;
- (bool)actionsOnly;
- (id)addMemberURL;
- (void)applyAdditionalPropertiesFromPostTask:(id)arg1;
- (void)applyAdditionalPropertiesFromPutTask:(id)arg1;
- (void)bailWithError:(id)arg1;
- (id)bulkChangeCheckCTag;
- (Class)bulkChangeTaskClass;
- (id)bulkRequests;
- (void)cancelTaskGroup;
- (id)copyAdditionalResourcePropertiesToFetch;
- (id)copyGetEtagTaskWithPropertiesToFind:(id)arg1;
- (id)copyGetTaskWithURL:(id)arg1;
- (id)copyMultiGetTaskWithURLs:(id)arg1;
- (id)copyPostTaskWithPayloadItem:(id)arg1 forAction:(id)arg2;
- (id)copyPutTaskWithPayloadItem:(id)arg1 forAction:(id)arg2;
- (id)dataContentType;
- (void)deleteResourceURLs:(id)arg1;
- (void)deleteTask:(id)arg1 completedWithError:(id)arg2;
- (id)description;
- (bool)ensureUpdatedCTag;
- (id)folderURL;
- (void)getTask:(id)arg1 data:(id)arg2 error:(id)arg3;
- (id)initWithFolderURL:(id)arg1 previousCTag:(id)arg2 previousSyncToken:(id)arg3 actions:(id)arg4 syncItemOrder:(bool)arg5 context:(id)arg6 accountInfoProvider:(id)arg7 taskManager:(id)arg8;
- (bool)isWhitelistedError:(id)arg1;
- (id)localItemURLOrder;
- (unsigned long long)maxIndependentTasks;
- (unsigned long long)multiGetBatchSize;
- (id)nextCTag;
- (id)previousCTag;
- (id)previousSyncToken;
- (void)propFindTask:(id)arg1 parsedResponses:(id)arg2 error:(id)arg3;
- (void)putTask:(id)arg1 completedWithNewETag:(id)arg2 error:(id)arg3;
- (void)receivedPropertiesToValues:(id)arg1 forURL:(id)arg2;
- (void)setActionsOnly:(bool)arg1;
- (void)setAddMemberURL:(id)arg1;
- (void)setBulkChangeCheckCTag:(id)arg1;
- (void)setBulkRequests:(id)arg1;
- (void)setEnsureUpdatedCTag:(bool)arg1;
- (void)setMaxIndependentTasks:(unsigned long long)arg1;
- (void)setMultiGetBatchSize:(unsigned long long)arg1;
- (void)setNextCTag:(id)arg1;
- (void)setPreviousCTag:(id)arg1;
- (void)setPreviousSyncToken:(id)arg1;
- (void)setUseMultiGet:(bool)arg1;
- (void)setUseSyncCollection:(bool)arg1;
- (bool)shouldDownloadResource:(id)arg1 localETag:(id)arg2 serverETag:(id)arg3;
- (bool)shouldFetchMoreETags;
- (bool)shouldFetchResourceWithEtag:(id)arg1 propertiesToValues:(id)arg2;
- (void)startTaskGroup;
- (void)syncAway;
- (void)task:(id)arg1 didFinishWithError:(id)arg2;
- (void)taskGroupWillCancelWithError:(id)arg1;
- (bool)useMultiGet;
- (bool)useSyncCollection;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
