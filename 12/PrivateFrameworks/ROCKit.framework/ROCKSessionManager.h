<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ROCKSessionManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ROCKit.framework/ROCKSessionManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ROCKit.framework/ROCKit (27.6)
 */

@interface ROCKSessionManager : NSObject {
    NSMapTable * _checkedInForwardingProxies;
    NSMapTable * _classesToProtocols;
    ROCKConnectionManager * _connectionManager;
    NSObject<OS_dispatch_queue> * _connectionQueue;
    id /* block */  _eventHandler;
    NSObject<OS_dispatch_queue> * _eventQueue;
    NSMapTable * _impersonatableProxies;
    NSMapTable * _impersonatedObjects;
    NSObject<OS_dispatch_queue> * _instancesQueue;
    NSObject<OS_dispatch_queue> * _invocationQueue;
    NSMapTable * _objCTypesToMethodSignatures;
    NSHashTable * _pendingForwardingProxies;
    NSMapTable * _protocolsToMethodSignatures;
    NSMapTable * _serializers;
    NSObject<OS_xpc_object> * _serviceConnection;
    NSObject<OS_dispatch_queue> * _stateQueue;
    bool  _useMainThreadChecker;
    NSMapTable * _xpcProtocolsToClasses;
}

@property (nonatomic, retain) NSMapTable *checkedInForwardingProxies;
@property (nonatomic, retain) NSMapTable *classesToProtocols;
@property (nonatomic, retain) ROCKConnectionManager *connectionManager;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *connectionQueue;
@property (nonatomic, copy) id /* block */ eventHandler;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *eventQueue;
@property (nonatomic, retain) NSMapTable *impersonatableProxies;
@property (nonatomic, retain) NSMapTable *impersonatedObjects;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *instancesQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *invocationQueue;
@property (nonatomic, retain) NSMapTable *objCTypesToMethodSignatures;
@property (nonatomic, retain) NSHashTable *pendingForwardingProxies;
@property (nonatomic, retain) NSMapTable *protocolsToMethodSignatures;
@property (nonatomic, retain) NSMapTable *serializers;
@property (nonatomic, retain) NSObject<OS_xpc_object> *serviceConnection;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *stateQueue;
@property (nonatomic) bool useMainThreadChecker;
@property (nonatomic, retain) NSMapTable *xpcProtocolsToClasses;

+ (id)forwardingProxyWithBlock:(id)arg1 xpcAnonymousConnection:(id)arg2 eventQueue:(id)arg3 eventHandler:(id /* block */)arg4;
+ (id)forwardingProxyWithBlock:(id)arg1 xpcAnonymousConnection:(id)arg2 options:(id)arg3 eventQueue:(id)arg4 eventHandler:(id /* block */)arg5;
+ (void)forwardingProxyWithInstance:(id)arg1 eventQueue:(id)arg2 eventHandler:(id /* block */)arg3;
+ (id)forwardingProxyWithInstance:(id)arg1 machServiceName:(id)arg2 eventQueue:(id)arg3 eventHandler:(id /* block */)arg4;
+ (id)forwardingProxyWithInstance:(id)arg1 machServiceName:(id)arg2 options:(id)arg3 eventQueue:(id)arg4 eventHandler:(id /* block */)arg5;
+ (void)forwardingProxyWithInstance:(id)arg1 options:(id)arg2 eventQueue:(id)arg3 eventHandler:(id /* block */)arg4;
+ (id)forwardingProxyWithInstance:(id)arg1 xpcAnonymousConnection:(id)arg2 eventQueue:(id)arg3 eventHandler:(id /* block */)arg4;
+ (id)forwardingProxyWithInstance:(id)arg1 xpcAnonymousConnection:(id)arg2 options:(id)arg3 eventQueue:(id)arg4 eventHandler:(id /* block */)arg5;
+ (id)remoteProxyWithMachServiceName:(id)arg1 eventQueue:(id)arg2 eventHandler:(id /* block */)arg3;
+ (id)remoteProxyWithMachServiceName:(id)arg1 options:(id)arg2 eventQueue:(id)arg3 eventHandler:(id /* block */)arg4;
+ (id)remoteProxyWithServiceName:(id)arg1 eventQueue:(id)arg2 eventHandler:(id /* block */)arg3;
+ (id)remoteProxyWithServiceName:(id)arg1 options:(id)arg2 eventQueue:(id)arg3 eventHandler:(id /* block */)arg4;
+ (id)remoteProxyWithXPCConnection:(id)arg1 eventQueue:(id)arg2 eventHandler:(id /* block */)arg3;
+ (id)remoteProxyWithXPCConnection:(id)arg1 options:(id)arg2 eventQueue:(id)arg3 eventHandler:(id /* block */)arg4;
+ (id)sessionManagerWithOptions:(id)arg1 eventQueue:(id)arg2 eventHandler:(id /* block */)arg3;

- (void).cxx_destruct;
- (id)checkedInForwardingProxies;
- (id)classesToProtocols;
- (id)connectionManager;
- (id)connectionQueue;
- (void)dealloc;
- (id /* block */)eventHandler;
- (id)eventQueue;
- (id)impersonatableProxies;
- (id)impersonatedObjects;
- (id)init;
- (id)initWithOptions:(id)arg1 eventQueue:(id)arg2 eventHandler:(id /* block */)arg3;
- (id)instancesQueue;
- (id)invocationQueue;
- (id)objCTypesToMethodSignatures;
- (id)pendingForwardingProxies;
- (id)protocolsToMethodSignatures;
- (id)serializers;
- (id)serviceConnection;
- (void)setCheckedInForwardingProxies:(id)arg1;
- (void)setClassesToProtocols:(id)arg1;
- (void)setConnectionManager:(id)arg1;
- (void)setConnectionQueue:(id)arg1;
- (void)setEventHandler:(id /* block */)arg1;
- (void)setEventQueue:(id)arg1;
- (void)setImpersonatableProxies:(id)arg1;
- (void)setImpersonatedObjects:(id)arg1;
- (void)setInstancesQueue:(id)arg1;
- (void)setInvocationQueue:(id)arg1;
- (void)setObjCTypesToMethodSignatures:(id)arg1;
- (void)setPendingForwardingProxies:(id)arg1;
- (void)setProtocolsToMethodSignatures:(id)arg1;
- (void)setSerializers:(id)arg1;
- (void)setServiceConnection:(id)arg1;
- (void)setStateQueue:(id)arg1;
- (void)setUseMainThreadChecker:(bool)arg1;
- (void)setXpcProtocolsToClasses:(id)arg1;
- (id)stateQueue;
- (bool)useMainThreadChecker;
- (id)xpcProtocolsToClasses;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
