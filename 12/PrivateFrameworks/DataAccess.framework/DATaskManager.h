<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>DATaskManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DataAccess.framework/DATaskManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DataAccess.framework/DataAccess (1.0)
 */

@interface DATaskManager : NSObject {
    DAAccount * _account;
    <DATask> * _activeExclusiveTask;
    <DATask> * _activeModalTask;
    <DATask> * _activeQueuedTask;
    DAActivity * _daActivity;
    bool  _didLogSyncStart;
    NSMutableSet * _heldIndependentTasks;
    NSMutableSet * _independentTasks;
    NSMutableArray * _mQueuedTasks;
    NSTimer * _managerIdleTimer;
    <DATask> * _modalHeldActiveQueuedTask;
    NSMutableSet * _modalHeldIndependentTasks;
    NSTimer * _powerLogIdleTimer;
    NSMutableArray * _queuedExclusiveTasks;
    NSMutableArray * _queuedModalTasks;
    int  _state;
    DATransaction * _transaction;
    NSTimer * _userInitiatedSyncTimer;
    NSTimer * _xpcTransactionTimer;
}

@property (nonatomic) DAAccount *account;
@property (nonatomic, retain) <DATask> *activeExclusiveTask;
@property (nonatomic, retain) <DATask> *activeModalTask;
@property (nonatomic, retain) <DATask> *activeQueuedTask;
@property (nonatomic, readonly) NSArray *allTasks;
@property (nonatomic) bool didLogSyncStart;
@property (nonatomic, retain) NSMutableSet *heldIndependentTasks;
@property (nonatomic, retain) NSMutableSet *independentTasks;
@property (nonatomic, retain) NSMutableArray *mQueuedTasks;
@property (nonatomic, retain) NSTimer *managerIdleTimer;
@property (nonatomic, retain) <DATask> *modalHeldActiveQueuedTask;
@property (nonatomic, retain) NSMutableSet *modalHeldIndependentTasks;
@property (nonatomic, retain) NSTimer *powerLogIdleTimer;
@property (nonatomic, retain) NSMutableArray *queuedExclusiveTasks;
@property (nonatomic, retain) NSMutableArray *queuedModalTasks;
@property (nonatomic, readonly) NSArray *queuedTasks;
@property (nonatomic) int state;
@property (nonatomic, retain) NSTimer *userInitiatedSyncTimer;
@property (nonatomic, retain) NSTimer *xpcTransactionTimer;

- (void).cxx_destruct;
- (id)OAuth2Token;
- (void)_cancelTasksWithReason:(int)arg1;
- (void)_clearUserInitiatedSyncTimer;
- (void)_endXpcTransaction;
- (bool)_hasTasksForcingNetworkConnection;
- (bool)_hasTasksIndicatingARunningSync;
- (void)_logSyncEnd;
- (void)_makeStateTransition;
- (void)_performTask:(id)arg1;
- (void)_populateVersionDescriptions;
- (id)_powerLogInfoDictionary;
- (void)_reactivateHeldTasks;
- (void)_releasePowerAssertionForTask:(id)arg1;
- (void)_requestCancelTasksWithReason:(int)arg1;
- (void)_retainPowerAssertionForTask:(id)arg1;
- (void)_schedulePerformTask:(id)arg1;
- (void)_scheduleSelector:(SEL)arg1 withArgument:(id)arg2;
- (void)_scheduleStartModal:(id)arg1;
- (void)_startModal:(id)arg1;
- (bool)_taskForcesNetworking:(id)arg1;
- (bool)_taskInQueueForcesNetworkConnection:(id)arg1;
- (bool)_useFakeDescriptions;
- (void)_useOpportunisticSocketsAgain;
- (id)_version;
- (id)account;
- (id)accountID;
- (id)accountPersistentUUID;
- (id)activeExclusiveTask;
- (id)activeModalTask;
- (id)activeQueuedTask;
- (id)allTasks;
- (void)cancelAllTasks;
- (void)cancelTask:(id)arg1;
- (void)cancelTask:(id)arg1 withUnderlyingError:(id)arg2;
- (void)cancelTasksDueToOnPowerMode;
- (void)dealloc;
- (id)deviceType;
- (bool)didLogSyncStart;
- (id)heldIndependentTasks;
- (id)identityPersist;
- (id)independentTasks;
- (id)init;
- (id)initWithAccount:(id)arg1;
- (bool)isShutdown;
- (id)mQueuedTasks;
- (id)managerIdleTimer;
- (id)modalHeldActiveQueuedTask;
- (id)modalHeldIndependentTasks;
- (id)password;
- (long long)port;
- (id)powerLogIdleTimer;
- (id)queuedExclusiveTasks;
- (id)queuedModalTasks;
- (id)queuedTasks;
- (id)server;
- (void)setAccount:(id)arg1;
- (void)setActiveExclusiveTask:(id)arg1;
- (void)setActiveModalTask:(id)arg1;
- (void)setActiveQueuedTask:(id)arg1;
- (void)setDidLogSyncStart:(bool)arg1;
- (void)setHeldIndependentTasks:(id)arg1;
- (void)setIndependentTasks:(id)arg1;
- (void)setMQueuedTasks:(id)arg1;
- (void)setManagerIdleTimer:(id)arg1;
- (void)setModalHeldActiveQueuedTask:(id)arg1;
- (void)setModalHeldIndependentTasks:(id)arg1;
- (void)setPowerLogIdleTimer:(id)arg1;
- (void)setQueuedExclusiveTasks:(id)arg1;
- (void)setQueuedModalTasks:(id)arg1;
- (void)setState:(int)arg1;
- (void)setUserInitiatedSyncTimer:(id)arg1;
- (void)setXpcTransactionTimer:(id)arg1;
- (bool)shouldCancelTaskDueToOnPowerFetchMode;
- (void)shutdown;
- (int)state;
- (id)stateString;
- (void)submitExclusiveTask:(id)arg1;
- (void)submitExclusiveTask:(id)arg1 toFrontOfQueue:(bool)arg2;
- (void)submitIndependentTask:(id)arg1;
- (void)submitQueuedTask:(id)arg1;
- (void)taskDidFinish:(id)arg1;
- (void)taskEndModal:(id)arg1;
- (bool)taskIsModal:(id)arg1;
- (void)taskManagerDidAddTask:(id)arg1;
- (void)taskManagerWillRemoveTask:(id)arg1;
- (void)taskRequestModal:(id)arg1;
- (bool)useSSL;
- (id)user;
- (id)userAgent;
- (id)userInitiatedSyncTimer;
- (id)xpcTransactionTimer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
