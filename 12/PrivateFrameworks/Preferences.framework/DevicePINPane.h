<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>DevicePINPane.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Preferences.framework/DevicePINPane.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Preferences.framework/Preferences (1.0)
 */

@interface DevicePINPane : PSEditingPane <PSPINEntryViewDelegate, UIKeyInput, UITextInputTraits> {
    unsigned int  _PINLength;
    long long  _autocapitalizationType;
    long long  _autocorrectionType;
    bool  _isBlocked;
    long long  _keyboardAppearance;
    long long  _keyboardType;
    UIKeyboard * _keypad;
    bool  _keypadActive;
    DevicePINKeypadContainerView * _keypadContainerView;
    bool  _numericKeyboard;
    id /* block */  _passcodeOptionsHandler;
    UIView<PINEntryView> * _pinView;
    bool  _playSound;
    bool  _simplePIN;
    UITransitionView * _transitionView;
    bool  _transitioning;
}

@property (nonatomic) unsigned int PINLength;
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic) long long autocorrectionType;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic, readonly) bool hasText;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic, copy) id /* block */ passcodeOptionsHandler;
@property (nonatomic, copy) UITextInputPasswordRules *passwordRules;
@property (nonatomic, retain) UIView<PINEntryView> *pinView;
@property (nonatomic) long long returnKeyType;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (nonatomic) long long smartDashesType;
@property (nonatomic) long long smartInsertDeleteType;
@property (nonatomic) long long smartQuotesType;
@property (nonatomic) long long spellCheckingType;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *textContentType;

- (void).cxx_destruct;
- (unsigned int)PINLength;
- (void)_setKeypadState:(bool)arg1 animated:(bool)arg2;
- (void)_setPlaysKeyboardClicks:(bool)arg1;
- (void)activateKeypadView;
- (long long)autocapitalizationType;
- (long long)autocorrectionType;
- (bool)becomeFirstResponder;
- (bool)canBecomeFirstResponder;
- (void)clearPassword;
- (void)deactivateKeypadView;
- (void)dealloc;
- (void)delayForTextEntryAnimationsWithCompletion:(id /* block */)arg1;
- (void)deleteBackward;
- (void)dismissKeypad;
- (bool)hasText;
- (void)hideError;
- (void)hideFailedAttempts;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)insertText:(id)arg1;
- (bool)isSecureTextEntry;
- (long long)keyboardAppearance;
- (long long)keyboardType;
- (void)keyboardWillChangeFrame:(id)arg1;
- (void)layoutSubviews;
- (void)okButtonPressed;
- (id /* block */)passcodeOptionsHandler;
- (id)password;
- (id)pinView;
- (void)pinView:(id)arg1 pinEntered:(id)arg2;
- (void)pinView:(id)arg1 pinValueChanged:(id)arg2;
- (bool)requiresKeyboard;
- (bool)resignFirstResponder;
- (void)setAutocapitalizationType:(long long)arg1;
- (void)setAutocorrectionType:(long long)arg1;
- (void)setKeyboardAppearance:(long long)arg1;
- (void)setKeyboardIsNumeric:(bool)arg1;
- (void)setKeyboardType:(long long)arg1;
- (void)setKeyboardUserInteractionEnabled:(bool)arg1;
- (void)setPINLength:(unsigned int)arg1;
- (void)setPINPolicyString:(id)arg1 visible:(bool)arg2;
- (void)setPasscodeOptionsHandler:(id /* block */)arg1;
- (void)setPinView:(id)arg1;
- (void)setSimplePIN:(bool)arg1 requiresKeyboard:(bool)arg2;
- (void)setSimplePIN:(bool)arg1 requiresKeyboard:(bool)arg2 numericOnly:(bool)arg3;
- (void)setSimplePIN:(bool)arg1 requiresKeyboard:(bool)arg2 numericOnly:(bool)arg3 showsOptions:(bool)arg4;
- (void)setText:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)showError:(id)arg1 error:(id)arg2 isBlocked:(bool)arg3 animate:(bool)arg4;
- (void)showFailedAttempts:(long long)arg1;
- (bool)simplePIN;
- (void)slideToNewPasscodeField:(bool)arg1 requiresKeyboard:(bool)arg2 numericOnly:(bool)arg3;
- (void)slideToNewPasscodeField:(bool)arg1 requiresKeyboard:(bool)arg2 numericOnly:(bool)arg3 transition:(int)arg4 showsOptionsButton:(bool)arg5;
- (void)slideToNewPasscodeField:(bool)arg1 withKeyboard:(bool)arg2;
- (id)specifierLabel;
- (id)text;
- (void)transitionToSimplePIN:(bool)arg1 requiresKeyboard:(bool)arg2 numericOnly:(bool)arg3 showsOptions:(bool)arg4;
- (void)transitionViewDidComplete:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
