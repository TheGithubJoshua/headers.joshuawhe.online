<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PhotoVision.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotoVision.framework/PhotoVision.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotoVision.framework/PhotoVision (3462.12.130)
 */

@interface PhotoVision : NSObject {
    PVVisionAnalyzer * _analyzer;
    NSURL * _cacheDirUrl;
    PVClusterer * _clusterer;
    PVContext * _context;
    PVDataAccessor * _dataAccessor;
    PVEventManager * _eventManager;
    unsigned int  _faceAlgorithmUmbrellaVersion;
    PVFaceMerger * _faceMerger;
    <PVNotificationListener> * _notificationListener;
    <PVPersistenceDelegate> * _persistenceDelegate;
    unsigned int  _sceneAlgorithmUmbrellaVersion;
    <PVVisionIntegrating> * _visionIntegration;
}

@property (nonatomic, readonly) unsigned int faceAlgorithmUmbrellaVersion;
@property (nonatomic, readonly) unsigned int sceneAlgorithmUmbrellaVersion;

+ (int)_intValueForKey:(id)arg1 defaultValue:(int)arg2;
+ (unsigned long long)defaultFaceAnalysisOptionsForFaceAlgorithmUmbrellaVersion:(unsigned int)arg1;
+ (unsigned long long)faceprintAnalysisOptionsForFaceAlgorithmUmbrellaVersion:(unsigned int)arg1;
+ (bool)isAppleInternal;
+ (unsigned int)maximumFaceAlgorithmUmbrellaVersion;
+ (unsigned int)maximumSceneAlgorithmUmbrellaVersion;
+ (unsigned int)minimumFaceAlgorithmUmbrellaVersion;
+ (unsigned int)minimumSceneAlgorithmUmbrellaVersion;
+ (void)setAlgorithmRevisionForRequest:(id)arg1 algorithmUmbrellaVersion:(unsigned int)arg2 algorithmCollectionType:(unsigned long long)arg3;
+ (id)supportedFaceAlgorithmUmbrellaVersions;
+ (id)supportedSceneAlgorithmUmbrellaVersions;

- (void).cxx_destruct;
- (id)analyzeImage:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (bool)buildPersonsWithCanceler:(id)arg1 keyFaceUpdateBlock:(id /* block */)arg2 error:(id*)arg3;
- (void)cancelAllSuggestionRequests;
- (void)cancelFaceClustering;
- (void)cancelSuggestionRequest:(id)arg1;
- (bool)clustererIsReadyToReturnSuggestions;
- (long long)clustererState;
- (id)clusteringStatus;
- (id)context;
- (id)differencesBetweenClustersInClusterCacheAndLibrary:(id*)arg1;
- (unsigned int)faceAlgorithmUmbrellaVersion;
- (bool)getFaceClusters:(id*)arg1 clusteringThreshold:(double*)arg2 utilizingGPU:(bool*)arg3 error:(id*)arg4;
- (id)initWithPersistenceDelegate:(id)arg1 visionIntegration:(id)arg2 workingDirectoryURL:(id)arg3 faceAlgorithmUmbrellaVersion:(unsigned int)arg4 sceneAlgorithmUmbrellaVersion:(unsigned int)arg5 notificationListener:(id)arg6;
- (id)mergeExistingFaces:(id)arg1 withDetectedFaces:(id)arg2 forImage:(id)arg3;
- (unsigned long long)numberOfFacesPendingClustering;
- (void)performFaceClusteringAndWait;
- (void)performFaceClusteringIfNecessaryAndWait;
- (void)performFaceClusteringWithCompletion:(id /* block */)arg1;
- (bool)reclusterFacesWithThreshold:(id)arg1 shouldRecluster:(bool)arg2 withContext:(id)arg3 error:(id*)arg4;
- (id)requestSuggestionsForFaceClusterSequenceNumbers:(id)arg1 withClusteringFlags:(id)arg2 updateHandler:(id /* block */)arg3 error:(id*)arg4;
- (void)resetClusterer;
- (bool)resetFaceClusteringStateWithContext:(id)arg1 error:(id*)arg2;
- (unsigned int)sceneAlgorithmUmbrellaVersion;
- (void)scheduleClusteringOfFacesWithLocalIdentifiers:(id)arg1;
- (void)scheduleUnclusteringOfFacesWithClusterSequenceNumbers:(id)arg1;
- (void)startAndSyncClusterCacheWithLibrary:(bool)arg1 reply:(id /* block */)arg2;
- (void)stop;
- (id)suggestedPersonLocalIdentifierForFaceLocalIdentifier:(id)arg1 error:(id*)arg2;
- (id)suggestedPersonLocalIdentifierForPersonLocalIdentifier:(id)arg1 error:(id*)arg2;
- (id)suggestionsForFaceClusterSequenceNumbers:(id)arg1 error:(id*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
