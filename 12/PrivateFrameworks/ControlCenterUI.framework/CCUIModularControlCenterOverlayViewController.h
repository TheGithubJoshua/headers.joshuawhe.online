<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CCUIModularControlCenterOverlayViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ControlCenterUI.framework/CCUIModularControlCenterOverlayViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI (1)
 */

@interface CCUIModularControlCenterOverlayViewController : CCUIModularControlCenterViewController <CCUIOverlayMetricsProvider, CCUIOverlayViewProvider, CCUIScrollViewDelegate, CCUIStatusBarDelegate, CCUIStatusLabelViewControllerDelegate, UIGestureRecognizerDelegate> {
    MTMaterialView * _backgroundView;
    NSHashTable * _blockingGestureRecognizers;
    CCUIFlickGestureRecognizer * _collectionViewDismissalFlickGesture;
    UIPanGestureRecognizer * _collectionViewDismissalPanGesture;
    UITapGestureRecognizer * _collectionViewDismissalTapGesture;
    UIPanGestureRecognizer * _collectionViewScrollPanGesture;
    UIStatusBar_Modern * _compactLeadingStatusBar;
    UIView * _containerView;
    NSUUID * _currentTransitionUUID;
    CCUIHeaderPocketView * _headerPocketView;
    UIPanGestureRecognizer * _headerPocketViewDismissalPanGesture;
    UITapGestureRecognizer * _headerPocketViewDismissalTapGesture;
    <CCUIHostStatusBarStyleProvider> * _hostStatusBarStyleProvider;
    CCUIStatusBarStyleSnapshot * _hostStatusBarStyleSnapshot;
    bool  _presentationPanGestureActive;
    <CCUIOverlayPresentationProvider> * _presentationProvider;
    unsigned long long  _presentationState;
    CCUIOverlayTransitionState * _previousTransitionState;
    CCUIAnimationRunner * _primaryAnimationRunner;
    bool  _reachabilityActive;
    CCUIScrollView * _scrollView;
    CCUIAnimationRunner * _secondaryAnimationRunner;
    unsigned long long  _transitionState;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CCUIModularControlCenterOverlayViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) <CCUIHostStatusBarStyleProvider> *hostStatusBarStyleProvider;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } overlayBackgroundFrame;
@property (nonatomic, readonly) MTMaterialView *overlayBackgroundView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } overlayContainerFrame;
@property (nonatomic, readonly) UIView *overlayContainerView;
@property (nonatomic, readonly) CCUIHeaderPocketView *overlayHeaderView;
@property (nonatomic, readonly) long long overlayInterfaceOrientation;
@property (nonatomic, readonly) UIStatusBar *overlayLeadingStatusBar;
@property (nonatomic, readonly) CCUIModuleCollectionView *overlayModuleCollectionView;
@property (nonatomic, readonly) double overlayReachabilityHeight;
@property (nonatomic, readonly) UIScrollView *overlayScrollView;
@property (nonatomic, readonly, copy) CCUIStatusBarStyleSnapshot *overlayStatusBarStyle;
@property (nonatomic, readonly) CCUIStatusLabelViewController *overlayStatusLabelViewController;
@property (nonatomic) unsigned long long presentationState;
@property (getter=isReachabilityActive, nonatomic) bool reachabilityActive;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long transitionState;

+ (id)_presentationProviderForDevice;

- (void).cxx_destruct;
- (unsigned long long)__supportedInterfaceOrientations;
- (id)_beginDismissalAnimated:(bool)arg1 interactive:(bool)arg2;
- (id)_beginPresentationAnimated:(bool)arg1 interactive:(bool)arg2;
- (void)_cancelDismissalPanGestures;
- (bool)_dismissalFlickGestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (bool)_dismissalFlickGestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)_dismissalFlickGestureRecognizerShouldBegin:(id)arg1;
- (void)_dismissalPanGestureRecognizerBegan:(id)arg1;
- (void)_dismissalPanGestureRecognizerCancelled:(id)arg1;
- (void)_dismissalPanGestureRecognizerChanged:(id)arg1;
- (void)_dismissalPanGestureRecognizerEnded:(id)arg1;
- (void)_dismissalPanGestureRecognizerFailed:(id)arg1;
- (bool)_dismissalPanGestureRecognizerShouldBegin:(id)arg1;
- (bool)_dismissalTapGestureRecognizerShouldBegin:(id)arg1;
- (void)_endDismissalWithUUID:(id)arg1 animated:(bool)arg2 success:(bool)arg3;
- (void)_endPresentationWithUUID:(id)arg1 success:(bool)arg2;
- (bool)_gestureRecognizerIsActive:(id)arg1;
- (void)_handleDismissalFlickGestureRecognizer:(id)arg1;
- (void)_handleDismissalPanGestureRecognizer:(id)arg1;
- (void)_handleDismissalTapGestureRecognizer:(id)arg1;
- (id)_initWithSystemAgent:(id)arg1 presentationProvider:(id)arg2;
- (id)_moduleCollectionViewContainerView;
- (void)_reparentAndBecomeActive;
- (bool)_scrollPanGestureRecognizerCanBeginForGestureVelocity:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_scrollPanGestureRecognizerShouldBegin:(id)arg1;
- (bool)_scrollViewCanAcceptDownwardsPan;
- (bool)_scrollViewIsScrollable;
- (void)_setupPanGestureFailureRequirements;
- (id)_statusLabelViewContainerView;
- (void)_updateChevronStateForTransitionState:(id)arg1;
- (void)_updateHotPocket:(bool)arg1 animated:(bool)arg2;
- (void)_updateHotPocketAnimated:(bool)arg1;
- (void)_updatePresentationForTransitionState:(id)arg1 withCompletionHander:(id /* block */)arg2;
- (void)_updatePresentationForTransitionType:(unsigned long long)arg1 translation:(struct CGPoint { double x1; double x2; })arg2 interactive:(bool)arg3;
- (void)beginPresentationWithLocation:(struct CGPoint { double x1; double x2; })arg1 translation:(struct CGPoint { double x1; double x2; })arg2 velocity:(struct CGPoint { double x1; double x2; })arg3;
- (void)cancelPresentationWithLocation:(struct CGPoint { double x1; double x2; })arg1 translation:(struct CGPoint { double x1; double x2; })arg2 velocity:(struct CGPoint { double x1; double x2; })arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })compactAvoidanceFrameForStatusBar:(id)arg1;
- (id)compactTrailingStyleRequestForStatusBar:(id)arg1;
- (void)dismissAnimated:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)dismissControlCenterForContentModuleContext:(id)arg1;
- (void)endPresentationWithLocation:(struct CGPoint { double x1; double x2; })arg1 translation:(struct CGPoint { double x1; double x2; })arg2 velocity:(struct CGPoint { double x1; double x2; })arg3;
- (bool)gestureRecognizer:(id)arg1 shouldBeRequiredToFailByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)hostStatusBarStyleProvider;
- (id)initWithSystemAgent:(id)arg1;
- (bool)isReachabilityActive;
- (void)moduleCollectionViewController:(id)arg1 didAddModuleContainerViewController:(id)arg2;
- (void)moduleCollectionViewController:(id)arg1 willCloseExpandedModule:(id)arg2;
- (void)moduleCollectionViewController:(id)arg1 willOpenExpandedModule:(id)arg2;
- (void)moduleInstancesChangedForModuleInstanceManager:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })overlayAdditionalEdgeInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overlayBackgroundFrame;
- (id)overlayBackgroundView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overlayContainerFrame;
- (id)overlayContainerView;
- (id)overlayHeaderView;
- (long long)overlayInterfaceOrientation;
- (id)overlayLeadingStatusBar;
- (id)overlayModuleCollectionView;
- (double)overlayReachabilityHeight;
- (id)overlayScrollView;
- (id)overlayStatusBarStyle;
- (id)overlayStatusLabelViewController;
- (unsigned long long)preferredScreenEdgesDeferringSystemGestures;
- (void)presentAnimated:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (unsigned long long)presentationState;
- (bool)scrollView:(id)arg1 gestureRecognizerShouldBegin:(id)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)setHostStatusBarStyleProvider:(id)arg1;
- (void)setOverlayStatusBarHidden:(bool)arg1;
- (void)setPresentationState:(unsigned long long)arg1;
- (void)setReachabilityActive:(bool)arg1;
- (void)statusLabelViewControllerDidFinishStatusUpdates:(id)arg1;
- (void)statusLabelViewControllerWillBeginStatusUpdates:(id)arg1;
- (unsigned long long)supportedInterfaceOrientations;
- (unsigned long long)transitionState;
- (void)updatePresentationWithLocation:(struct CGPoint { double x1; double x2; })arg1 translation:(struct CGPoint { double x1; double x2; })arg2 velocity:(struct CGPoint { double x1; double x2; })arg3;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
