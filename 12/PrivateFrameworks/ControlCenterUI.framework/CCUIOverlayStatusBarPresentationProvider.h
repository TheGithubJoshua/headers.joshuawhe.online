<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CCUIOverlayStatusBarPresentationProvider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ControlCenterUI.framework/CCUIOverlayStatusBarPresentationProvider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI (1)
 */

@interface CCUIOverlayStatusBarPresentationProvider : NSObject <CCUIOverlayFlickGestureBehavior, CCUIOverlayPresentationProvider> {
    <CCUIOverlayMetricsProvider> * _metricsProvider;
    <CCUIOverlayViewProvider> * _viewProvider;
}

@property (nonatomic, readonly) bool allowHotPocketDuringTransition;
@property (nonatomic, readonly) unsigned long long backgroundMaterialOptions;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long dismissalFlickAllowedDirections;
@property (nonatomic, readonly) double dismissalFlickMaximumTime;
@property (nonatomic, readonly) double dismissalFlickMinimumVelocity;
@property (nonatomic, readonly, copy) <CCUIOverlayFlickGestureBehavior> *flickGestureBehavior;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long headerMode;
@property (nonatomic) <CCUIOverlayMetricsProvider> *metricsProvider;
@property (getter=isPanDismissalAvailable, nonatomic, readonly) bool panDismissalAvailable;
@property (readonly) Class superclass;
@property (nonatomic) <CCUIOverlayViewProvider> *viewProvider;

+ (id)_baseC2AnimationParametersForTransitionState:(id)arg1;
+ (id)_compactTrailingStatusBarAlphaCAAnimationParametersForTransitionState:(id)arg1;
+ (id)_expandedLeadingStatusBarAlphaCAAnimationParametersForTransitionState:(id)arg1;
+ (id)_expandedTrailingStatusBarAlphaCAAnimationParametersForTransitionState:(id)arg1;
+ (id)_hiddenStatusBarFadeAnimationParameters;
+ (id)_leadingStatusBarCAAnimationParametersForTransitionState:(id)arg1;
+ (id)_moduleAlphaCAAnimationParametersForTransitionState:(id)arg1;
+ (id)_moduleC2AnimationParametersForTransitionState:(id)arg1 layoutRect:(struct CCUILayoutRect { struct CCUILayoutPoint { unsigned long long x_1_1_1; unsigned long long x_1_1_2; } x1; struct CCUILayoutSize { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; })arg2;
+ (id)_moduleScaleCAAnimationParametersForTransitionState:(id)arg1;
+ (id)_reducedMotionStatusBarStateCAAnimationParameters;
+ (id)_trailingStatusBarCAAnimationParametersForTransitionState:(id)arg1;

- (void).cxx_destruct;
- (void)_addBackgroundViewWeightingAnimationToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addHeaderContentTransformAnimationToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addLeadingStatusBarAlphaAnimationToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addModuleAlphaAnimationsToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addModuleScaleAnimationsToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addModuleTransformAnimationsToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addReducedMotionStatusBarStateAnimationToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addScrollViewContentOffsetAnimationToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addStatusBarAlphaAnimationToBatch:(id)arg1 transitionState:(id)arg2;
- (void)_addStatusBarStateAnimationToBatch:(id)arg1 transitionState:(id)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_compactStatusBar:(id)arg1 transformForTransitionState:(id)arg2;
- (double)_delayForTransitionState:(id)arg1 layoutRect:(struct CCUILayoutRect { struct CCUILayoutPoint { unsigned long long x_1_1_1; unsigned long long x_1_1_2; } x1; struct CCUILayoutSize { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; })arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsetsForContentSize:(struct CGSize { double x1; double x2; })arg1 withinBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 contentEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 orientation:(long long)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_headerViewFrameForContentSize:(struct CGSize { double x1; double x2; })arg1 withinBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 contentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3 contentEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg4 orientation:(long long)arg5;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_headerViewTransformForTransitionState:(id)arg1;
- (double)_leadingStatusBarAlphaForTransitionState:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_moduleViewScaleTransformForTransitionState:(id)arg1 layoutRect:(struct CCUILayoutRect { struct CCUILayoutPoint { unsigned long long x_1_1_1; unsigned long long x_1_1_2; } x1; struct CCUILayoutSize { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; })arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_moduleViewTransformForTransitionState:(id)arg1 layoutRect:(struct CCUILayoutRect { struct CCUILayoutPoint { unsigned long long x_1_1_1; unsigned long long x_1_1_2; } x1; struct CCUILayoutSize { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_presentedViewFrame;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_transformForTransitionState:(id)arg1 rubberBandingHeight:(double)arg2;
- (bool)allowHotPocketDuringTransition;
- (id)animationBatchForTransitionState:(id)arg1 previousTransitionState:(id)arg2;
- (bool)backdropViewShouldUseAlphaTransformer;
- (unsigned long long)backgroundMaterialOptions;
- (id)cleanupForDismissal;
- (unsigned long long)dismissalFlickAllowedDirections;
- (double)dismissalFlickMaximumTime;
- (double)dismissalFlickMinimumVelocity;
- (unsigned long long)finalTransitionTypeForState:(id)arg1 gestureTranslation:(struct CGPoint { double x1; double x2; })arg2 gestureVelocity:(struct CGPoint { double x1; double x2; })arg3;
- (id)flickGestureBehavior;
- (unsigned long long)headerMode;
- (bool)isPanDismissalAvailable;
- (void)layoutViews;
- (id)metricsProvider;
- (id)prepareForPresentation;
- (id)secondaryAnimationBatchForTransitionState:(id)arg1 previousTransitionState:(id)arg2;
- (void)setMetricsProvider:(id)arg1;
- (void)setViewProvider:(id)arg1;
- (bool)tapAllowsDismissalForLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)transitionStateForType:(unsigned long long)arg1 interactive:(bool)arg2 translation:(struct CGPoint { double x1; double x2; })arg3;
- (id)viewProvider;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
