<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CCUIModuleCollectionViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ControlCenterUI.framework/CCUIModuleCollectionViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ControlCenterUI.framework/ControlCenterUI (1)
 */

@interface CCUIModuleCollectionViewController : UIViewController <CCUIContentModuleContainerViewControllerDelegate, CCUILayoutViewLayoutSource, CCUIModuleInstanceManagerObserver, CCUIModuleSettingsManagerObserver, CCUISafeAppearancePropagationProvider> {
    NSHashTable * _currentModules;
    <CCUIModuleCollectionViewControllerDelegate> * _delegate;
    NSHashTable * _expandedModules;
    bool  _homeGestureDismissalAllowed;
    NSHashTable * _homeGestureDismissalAllowedModules;
    CCUIControlCenterPositionProvider * _landscapePositionProvider;
    CCUILayoutOptions * _layoutOptions;
    NSObject<OS_dispatch_group> * _moduleCloseDispatchGroup;
    NSDictionary * _moduleContainerViewByIdentifier;
    CCUIModuleInstanceManager * _moduleManager;
    NSDictionary * _moduleViewControllerByIdentifier;
    CCUIControlCenterPositionProvider * _portraitPositionProvider;
    CCUIModuleSettingsManager * _settingsManager;
    CCUIExpandedModuleBackgroundView * _sharedExpandedModuleBackgroundView;
}

@property (nonatomic, readonly) NSArray *childViewControllersForAppearancePropagation;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CCUIModuleCollectionViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) unsigned long long expandedModuleCount;
@property (readonly) unsigned long long hash;
@property (getter=isHomeGestureDismissalAllowed, nonatomic, readonly) bool homeGestureDismissalAllowed;
@property (nonatomic, retain) CCUIModuleCollectionView *moduleCollectionView;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_activePositionProvider;
- (id)_currentLayoutOptions;
- (long long)_interfaceOrientation;
- (id)_moduleInstances;
- (void)_populateModuleViewControllers;
- (id)_positionProviderForInterfaceOrientation:(long long)arg1;
- (void)_refreshPositionProviders;
- (void)_removeAndTearDownModuleViewControllerFromHierarchy:(id)arg1;
- (id)_setupAndAddModuleViewControllerToHierarchy:(id)arg1;
- (bool)_shouldApplyBackgroundEffects;
- (id)_sizesForModuleIdentifiers:(id)arg1 moduleInstanceByIdentifier:(id)arg2 interfaceOrientation:(long long)arg3;
- (void)_updateEnabledModuleIdentifiers;
- (void)_updateHomeGestureDismissalAllowed;
- (void)_updateModuleControllers;
- (id)backgroundViewForContentModuleContainerViewController:(id)arg1;
- (id)childViewControllersForAppearancePropagation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })compactModeFrameForContentModuleContainerViewController:(id)arg1;
- (bool)contentModuleContainerViewController:(id)arg1 canBeginInteractionWithModule:(id)arg2;
- (void)contentModuleContainerViewController:(id)arg1 didBeginInteractionWithModule:(id)arg2;
- (void)contentModuleContainerViewController:(id)arg1 didCloseExpandedModule:(id)arg2;
- (void)contentModuleContainerViewController:(id)arg1 didFinishInteractionWithModule:(id)arg2;
- (void)contentModuleContainerViewController:(id)arg1 didOpenExpandedModule:(id)arg2;
- (void)contentModuleContainerViewController:(id)arg1 willCloseExpandedModule:(id)arg2;
- (void)contentModuleContainerViewController:(id)arg1 willOpenExpandedModule:(id)arg2;
- (id)delegate;
- (void)didUpdateHomeGestureDismissalAllowed:(bool)arg1 forModuleWithIdentifier:(id)arg2;
- (void)dismissExpandedModuleAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)dismissPresentedContentAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)expandModuleWithIdentifier:(id)arg1;
- (unsigned long long)expandedModuleCount;
- (void)expandedModuleDidChangeSizeWithIdentifier:(id)arg1;
- (id)initWithModuleInstanceManager:(id)arg1;
- (bool)isAtMaxHeight;
- (bool)isHomeGestureDismissalAllowed;
- (bool)isModuleExpandedForIdentifier:(id)arg1;
- (struct CCUILayoutSize { unsigned long long x1; unsigned long long x2; })layoutSizeForLayoutView:(id)arg1;
- (struct CCUILayoutRect { struct CCUILayoutPoint { unsigned long long x_1_1_1; unsigned long long x_1_1_2; } x1; struct CCUILayoutSize { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; })layoutView:(id)arg1 layoutRectForSubview:(id)arg2;
- (void)loadView;
- (id)moduleCollectionView;
- (void)moduleInstancesChangedForModuleInstanceManager:(id)arg1;
- (void)orderedEnabledModuleIdentifiersChangedForSettingsManager:(id)arg1;
- (struct CGSize { double x1; double x2; })preferredContentSize;
- (id)queryAllTopLevelBlockingGestureRecognizers;
- (id)relevantSnapHeightsForOrientation:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setModuleCollectionView:(id)arg1;
- (bool)shouldApplyBackgroundEffectsForContentModuleContainerViewController:(id)arg1;
- (bool)shouldAutomaticallyForwardAppearanceMethods;
- (struct CGSize { double x1; double x2; })sizeForChildContentContainer:(id)arg1 withParentContainerSize:(struct CGSize { double x1; double x2; })arg2;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)willBecomeActive;
- (void)willResignActive;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
