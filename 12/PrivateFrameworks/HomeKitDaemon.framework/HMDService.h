<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HMDService.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeKitDaemon.framework/HMDService.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon (484.7.17.1)
 */

@interface HMDService : HMFObject <HMDBackingStoreObjectProtocol, HMDBulletinIdentifiers, HMDHomeMessageReceiver, HMFDumpState, NSSecureCoding> {
    HMDHAPAccessory * _accessory;
    HMDApplicationData * _appData;
    NSString * _associatedServiceType;
    HMDBulletinBoardNotification * _bulletinBoardNotification;
    NSUUID * _cachedAccessoryUUID;
    NSArray * _characteristics;
    NSNumber * _configurationState;
    NSString * _configuredName;
    NSString * _defaultName;
    NSMutableDictionary * _deviceLastRequestPresenceDateMap;
    NSString * _expectedConfiguredName;
    bool  _hidden;
    NSNumber * _instanceID;
    NSNumber * _labelIndex;
    NSNumber * _labelNamespace;
    NSNumber * _lastKnownDiscoveryMode;
    NSString * _lastSeenConfiguredName;
    NSArray * _linkedServices;
    NSString * _logID;
    NSArray * _mediaSourceDisplayOrder;
    NSNumber * _mediaSourceIdentifier;
    HMFMessageDispatcher * _messageDispatcher;
    NSString * _name;
    <HMDServiceOwner> * _owner;
    bool  _primary;
    NSObject<OS_dispatch_queue> * _propertyQueue;
    NSString * _providedName;
    NSString * _serviceSubtype;
    NSString * _serviceType;
    NSUUID * _uuid;
}

@property (nonatomic, readonly) HMDHAPAccessory *accessory;
@property (nonatomic, retain) HMDApplicationData *appData;
@property (nonatomic, readonly) NSString *associatedServiceType;
@property (nonatomic, retain) HMDBulletinBoardNotification *bulletinBoardNotification;
@property (nonatomic, retain) NSUUID *cachedAccessoryUUID;
@property (nonatomic, copy) NSArray *characteristics;
@property (nonatomic, retain) NSNumber *configurationState;
@property (nonatomic, copy) NSString *configuredName;
@property (nonatomic, readonly, copy) NSString *contextID;
@property (nonatomic, readonly, copy) NSUUID *contextSPIUniqueIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) NSString *defaultName;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableDictionary *deviceLastRequestPresenceDateMap;
@property (nonatomic, copy) NSString *expectedConfiguredName;
@property (readonly) unsigned long long hash;
@property (getter=isHidden, nonatomic) bool hidden;
@property (nonatomic, readonly) HMDHome *home;
@property (nonatomic, copy) NSNumber *instanceID;
@property (nonatomic, retain) NSNumber *labelIndex;
@property (nonatomic, retain) NSNumber *labelNamespace;
@property (nonatomic, retain) NSNumber *lastKnownDiscoveryMode;
@property (nonatomic, copy) NSString *lastSeenConfiguredName;
@property (nonatomic, copy) NSArray *linkedServices;
@property (nonatomic, readonly) NSString *logID;
@property (nonatomic, retain) NSArray *mediaSourceDisplayOrder;
@property (nonatomic, retain) NSNumber *mediaSourceIdentifier;
@property (nonatomic, readonly) HMFMessageDispatcher *messageDispatcher;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (readonly, copy) NSSet *messageReceiverChildren;
@property (nonatomic, readonly) NSUUID *messageTargetUUID;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) <HMDServiceOwner> *owner;
@property (getter=isPrimary) bool primary;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *propertyQueue;
@property (nonatomic, retain) NSString *providedName;
@property (nonatomic, readonly, copy) NSString *serviceIdentifier;
@property (nonatomic, retain) NSString *serviceSubtype;
@property (nonatomic, retain) NSString *serviceType;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *type;
@property (nonatomic, readonly) NSUUID *uuid;

+ (id)generateUUIDWithAccessoryUUID:(id)arg1 serviceID:(id)arg2;
+ (bool)hasMessageReceiverChildren;
+ (id)logCategory;
+ (bool)supportsSecureCoding;
+ (bool)validateProvidedName:(id)arg1;

- (void).cxx_destruct;
- (id)_checkIfDefaultNameChanged;
- (void)_createNotification;
- (id)_deriveDefaultName;
- (void)_handleSetAppData:(id)arg1;
- (id)_messagesForConfiguredNameChange;
- (void)_processTransactionForNameComponents:(id)arg1 messagesToSendToAcccessory:(id)arg2 result:(id)arg3;
- (void)_readRequiredBTLECharacteristicValuesForceReadFWVersion:(bool)arg1;
- (void)_recalculateUUID;
- (void)_registerForMessages;
- (id)_sanitizeNameToWriteToAccessory:(id)arg1;
- (void)_saveCurrentNameAsExpectedAndLastSeen:(id)arg1;
- (void)_saveForExpectedConfiguredNameUpdate;
- (void)_saveForLastSeenConfiguredNameUpdate;
- (void)_saveLastSeenAndExpectedConfiguredName:(id)arg1;
- (void)_setServiceProperties:(id)arg1;
- (void)_shouldServiceBeHidden;
- (bool)_supportsBulletinNotification;
- (void)_transactionServiceUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3;
- (void)_updateAndCacheDiscoveryModeState;
- (void)_updateDefaultName;
- (bool)_updateLastKnownDiscoveryMode:(id)arg1;
- (id)_updateProvidedName:(id)arg1;
- (bool)_validateAndUpdateLastKnownDiscoveryMode:(id)arg1;
- (bool)_validateLastKnownDiscoveryMode:(id)arg1;
- (void)_writeConfiguredNameToAccessory:(id)arg1;
- (id)accessory;
- (id)appData;
- (void)appDataRemoved:(id)arg1 message:(id)arg2;
- (void)appDataUpdated:(id)arg1 message:(id)arg2;
- (id)assistantObject;
- (id)associatedServiceType;
- (id)backingStoreObjects:(long long)arg1;
- (id)bulletinBoardNotification;
- (id)cachedAccessoryUUID;
- (id)characteristics;
- (id)configurationState;
- (void)configureBulletinNotification:(id /* block */)arg1;
- (void)configureMsgDispatcher:(id)arg1;
- (id)configureWithService:(id)arg1 accessory:(id)arg2;
- (id)configureWithService:(id)arg1 accessory:(id)arg2 shouldRead:(bool)arg3 added:(bool)arg4;
- (id)configuredName;
- (id)configuredNameChangedMessage;
- (id)contextID;
- (id)contextSPIUniqueIdentifier;
- (id)defaultName;
- (id)description;
- (id)deviceLastRequestPresenceDateMap;
- (id)dumpState;
- (void)encodeWithCoder:(id)arg1;
- (id)expectedConfiguredName;
- (id)findCharacteristic:(id)arg1;
- (id)findCharacteristicWithType:(id)arg1;
- (id)gatherRequiredReadRequestsForceReadFWVersion:(bool)arg1;
- (id)getConfiguredName;
- (id)getConfiguredNameForXPCClients;
- (id)getLastSeenConfiguredName;
- (id)home;
- (id)init;
- (id)initWithAccessory:(id)arg1 owner:(id)arg2 instance:(id)arg3 uuid:(id)arg4;
- (id)initWithCoder:(id)arg1;
- (id)initWithTransaction:(id)arg1 accessory:(id)arg2 owner:(id)arg3;
- (id)instanceID;
- (bool)isEmptyConfiguredNameAllowed;
- (bool)isHidden;
- (bool)isPrimary;
- (bool)isReadingRequiredForBTLEServiceCharacteristic:(id)arg1;
- (id)labelIndex;
- (id)labelNamespace;
- (id)lastKnownDiscoveryMode;
- (id)lastSeenConfiguredName;
- (id)linkedServices;
- (bool)listsEqual:(id)arg1 to:(id)arg2;
- (id)logID;
- (id)logIdentifier;
- (id)mediaSourceDisplayOrder;
- (id)mediaSourceIdentifier;
- (id)messageDispatcher;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (id)messagesForUpdatedRoom:(id)arg1;
- (id)modelObjectWithChangeType:(unsigned long long)arg1;
- (id)name;
- (id)nameChangedMessage;
- (id)owner;
- (void)persistLastKnownDiscoveryMode;
- (void)persistMediaSourceDisplayOrder:(id)arg1 requestMessage:(id)arg2;
- (void)populateModelObjectWithChangeType:(id)arg1 version:(long long)arg2;
- (bool)processInitialUpdate:(id)arg1 forCharacteristicType:(id)arg2 serviceTransaction:(id)arg3 changed:(bool*)arg4;
- (id)propertyQueue;
- (id)providedName;
- (id)serviceIdentifier;
- (id)serviceSubtype;
- (id)serviceType;
- (void)setAppData:(id)arg1;
- (void)setBulletinBoardNotification:(id)arg1;
- (void)setCachedAccessoryUUID:(id)arg1;
- (void)setCharacteristics:(id)arg1;
- (void)setConfigurationState:(id)arg1;
- (void)setConfiguredName:(id)arg1;
- (void)setDefaultName:(id)arg1;
- (void)setDeviceLastRequestPresenceDateMap:(id)arg1;
- (void)setExpectedConfiguredName:(id)arg1;
- (void)setHidden:(bool)arg1;
- (void)setInstanceID:(id)arg1;
- (void)setLabelIndex:(id)arg1;
- (void)setLabelNamespace:(id)arg1;
- (void)setLastKnownDiscoveryMode:(id)arg1;
- (void)setLastSeenConfiguredName:(id)arg1;
- (void)setLinkedServices:(id)arg1;
- (void)setMediaSourceDisplayOrder:(id)arg1;
- (void)setMediaSourceIdentifier:(id)arg1;
- (void)setName:(id)arg1;
- (void)setOwner:(id)arg1;
- (void)setPrimary:(bool)arg1;
- (void)setProvidedName:(id)arg1;
- (void)setServiceSubtype:(id)arg1;
- (void)setServiceType:(id)arg1;
- (bool)shouldEnableDaemonRelaunch;
- (bool)shouldIncludePresenceForDeviceWithDestination:(id)arg1;
- (bool)shouldUpdateLastKnownDiscoveryMode:(id)arg1;
- (bool)shouldUpdateLastSeenConfiguredName:(id)arg1;
- (void)transactionObjectRemoved:(id)arg1 message:(id)arg2;
- (void)transactionObjectUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3;
- (id)transactionWithObjectChangeType:(unsigned long long)arg1;
- (id)type;
- (bool)updateAssociatedServiceType:(id)arg1 error:(id*)arg2;
- (bool)updateCharacteristics:(id)arg1;
- (void)updateLastKnownValues;
- (void)updateMediaSourceDisplayOrder:(id)arg1 requestMessage:(id)arg2;
- (void)updatePresenceRequestTimeForDeviceWithDestination:(id)arg1;
- (id)url;
- (id)uuid;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
