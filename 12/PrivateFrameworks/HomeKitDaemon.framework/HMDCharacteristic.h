<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HMDCharacteristic.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeKitDaemon.framework/HMDCharacteristic.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon (484.7.17.1)
 */

@interface HMDCharacteristic : HMFObject <HMDBulletinIdentifiers, HMFDumpState, NSSecureCoding> {
    HMDHAPAccessory * _accessory;
    NSData * _authorizationData;
    bool  _broadcastNotificationEnabled;
    NSNumber * _characteristicInstanceID;
    HMDCharacteristicMetadata * _characteristicMetadata;
    long long  _characteristicProperties;
    NSString * _characteristicType;
    NSSet * _hapCharacteristicTuples;
    id  _lastKnownValue;
    NSDate * _lastKnownValueUpdateTime;
    NSDate * _notificationEnabledTime;
    bool  _notificationRegisteredWithRemoteGateway;
    NSMutableSet * _notificationRegistrations;
    HMDService * _service;
    NSNumber * _stateNumber;
}

@property (nonatomic, readonly) HMDHAPAccessory *accessory;
@property (nonatomic, copy) NSData *authorizationData;
@property (nonatomic) bool broadcastNotificationEnabled;
@property (nonatomic, readonly) NSDictionary *bulletinContext;
@property (nonatomic, retain) NSNumber *characteristicInstanceID;
@property (nonatomic, retain) HMDCharacteristicMetadata *characteristicMetadata;
@property (nonatomic) long long characteristicProperties;
@property (nonatomic, retain) NSString *characteristicType;
@property (nonatomic, readonly, copy) NSString *contextID;
@property (nonatomic, readonly, copy) NSUUID *contextSPIUniqueIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSSet *hapCharacteristicTuples;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) NSNumber *instanceID;
@property (nonatomic, retain) id lastKnownValue;
@property (nonatomic, retain) NSDate *lastKnownValueUpdateTime;
@property (nonatomic, readonly) HMDCharacteristicMetadata *metadata;
@property (nonatomic, retain) NSDate *notificationEnabledTime;
@property (nonatomic) bool notificationRegisteredWithRemoteGateway;
@property (nonatomic, retain) NSMutableSet *notificationRegistrations;
@property (nonatomic, readonly) long long properties;
@property (nonatomic, readonly) NSString *serializedIdentifier;
@property (nonatomic, readonly) HMDService *service;
@property (setter=setStateNumber:, nonatomic, copy) NSNumber *stateNumber;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *type;
@property (nonatomic, readonly, copy) id value;

+ (bool)supportsSecureCoding;
+ (bool)value:(id)arg1 differentThan:(id)arg2;

- (void).cxx_destruct;
- (id)accessory;
- (id)authorizationData;
- (bool)broadcastNotificationEnabled;
- (struct NSDictionary { Class x1; }*)bulletinContext;
- (id)characteristicForHAPAccessory:(id)arg1;
- (id)characteristicInstanceID;
- (id)characteristicMetadata;
- (long long)characteristicProperties;
- (id)characteristicType;
- (id)characteristicTypeDescription;
- (void)configureWithCharacteristic:(id)arg1;
- (id)contextID;
- (id)contextSPIUniqueIdentifier;
- (bool)deregisterNotificationForClientIdentifier:(id)arg1;
- (id)description;
- (id)dumpState;
- (void)encodeWithCoder:(id)arg1;
- (id)getCharacteristicDictionary;
- (id)hapCharacteristicTupleWithIdentifier:(id)arg1 linkType:(long long)arg2;
- (id)hapCharacteristicTuples;
- (id)initWithCharacteristic:(id)arg1 service:(id)arg2 accessory:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (id)instanceID;
- (bool)isClientNotificationEnabled;
- (bool)isNonClientNotificationEnabled;
- (bool)isNonHomeNotificationsEnabled;
- (bool)isNotificationEnabled;
- (bool)isNotificationEnabledForClientIdentifier:(id)arg1;
- (bool)isNotificationEnabledForClientIdentifierPrefix:(id)arg1;
- (bool)isValueUpdatedFromHAPCharacteristic:(id)arg1;
- (id)lastKnownValue;
- (id)lastKnownValueUpdateTime;
- (id)metadata;
- (id)notificationEnabledTime;
- (bool)notificationRegisteredWithRemoteGateway;
- (id)notificationRegistrations;
- (long long)properties;
- (id)serializedIdentifier;
- (id)service;
- (void)setAuthorizationData:(id)arg1;
- (void)setBroadcastNotificationEnabled:(bool)arg1;
- (void)setCharacteristicInstanceID:(id)arg1;
- (void)setCharacteristicMetadata:(id)arg1;
- (void)setCharacteristicProperties:(long long)arg1;
- (void)setCharacteristicType:(id)arg1;
- (void)setHapCharacteristicTuples:(id)arg1;
- (void)setLastKnownValue:(id)arg1;
- (void)setLastKnownValueUpdateTime:(id)arg1;
- (void)setNotificationEnabled:(bool)arg1 forClientIdentifier:(id)arg2;
- (void)setNotificationEnabledTime:(id)arg1;
- (void)setNotificationRegisteredWithRemoteGateway:(bool)arg1;
- (void)setNotificationRegistrations:(id)arg1;
- (void)setStateNumber:(id)arg1;
- (id)shortTypeDescription;
- (id)stateNumber;
- (bool)supportsNotification;
- (bool)supportsRead;
- (bool)supportsWrite;
- (id)type;
- (void)unconfigure;
- (void)unconfigureForServerIdentifier:(id)arg1 linkType:(long long)arg2;
- (void)updateLastKnownValue;
- (void)updateService:(id)arg1 accessory:(id)arg2;
- (void)updateValue:(id)arg1 updatedTime:(id)arg2 stateNumber:(id)arg3;
- (bool)updateWithDictionary:(id)arg1;
- (id)validateValue:(id)arg1 outValue:(id*)arg2;
- (id)validateValueForNotify:(id)arg1 outValue:(id*)arg2;
- (id)validateValueForWrite:(id)arg1 outValue:(id*)arg2;
- (id)value;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
