<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HMDEventTrigger.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeKitDaemon.framework/HMDEventTrigger.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon (484.7.17.1)
 */

@interface HMDEventTrigger : HMDTrigger <HMDEventDelegate, HMFLogging> {
    unsigned long long  _activationState;
    unsigned long long  _activationType;
    NSPredicate * _evaluationCondition;
    NSMutableArray * _events;
    bool  _executeOnce;
    HMDEventTriggerExecutionSession * _executionSession;
    bool  _migratedEventsToRecords;
    HMDPredicateUtilities * _predicateUtilities;
    NSArray * _recurrences;
    HMDEventTriggerUserConfirmationSession * _userConfirmationSession;
}

@property (nonatomic) unsigned long long activationState;
@property (nonatomic) unsigned long long activationType;
@property (nonatomic, readonly) NSArray *calendarEvents;
@property (nonatomic, readonly) NSArray *charThresholdEvents;
@property (nonatomic, readonly) NSArray *characteristicBaseEvents;
@property (nonatomic, readonly) NSArray *characteristicEvents;
@property (nonatomic, readonly) bool computedActive;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSArray *durationEvents;
@property (nonatomic, readonly) NSArray *endEvents;
@property (nonatomic, retain) NSPredicate *evaluationCondition;
@property (nonatomic, readonly) NSMutableArray *events;
@property (nonatomic) bool executeOnce;
@property (nonatomic, retain) HMDEventTriggerExecutionSession *executionSession;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *locationEvents;
@property (nonatomic) bool migratedEventsToRecords;
@property (nonatomic, retain) HMDPredicateUtilities *predicateUtilities;
@property (nonatomic, readonly) NSArray *presenceEvents;
@property (nonatomic, readonly) NSArray *recurrences;
@property (nonatomic, readonly) NSArray *significantTimeEvents;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *timeEvents;
@property (nonatomic, readonly) NSArray *triggerEvents;
@property (nonatomic, retain) HMDEventTriggerUserConfirmationSession *userConfirmationSession;

+ (bool)__validateRecurrences:(id)arg1;
+ (bool)hasMessageReceiverChildren;
+ (id)logCategory;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_activateAfterResidentChangeWithCompletion:(id /* block */)arg1;
- (void)_activateEvents:(id /* block */)arg1;
- (void)_activateWithCompletion:(id /* block */)arg1;
- (void)_addEventToEventTrigger:(id)arg1;
- (bool)_checkAddEventModel:(id)arg1 message:(id)arg2;
- (void)_computeActivation;
- (void)_evaluationConditionUpdated:(id)arg1 message:(id)arg2;
- (void)_eventTriggerRecurrencesUpdated:(id)arg1 message:(id)arg2;
- (void)_executeOnceUpdated:(id)arg1 message:(id)arg2;
- (void)_handleAddEventModel:(id)arg1 message:(id)arg2;
- (void)_handleAddEventToEventTrigger:(id)arg1;
- (void)_handleCharacteristicRemove:(id)arg1 eventsToRemove:(id)arg2;
- (void)_handleEventTriggerUpdate:(id)arg1 message:(id)arg2;
- (void)_handleLocationAuthorizationChangedNotification:(id)arg1;
- (void)_handleRemoveEventModel:(id)arg1 message:(id)arg2;
- (void)_handleRemoveEventsFromEventTrigger:(id)arg1;
- (void)_handleUpdateEventTriggerCondition:(id)arg1;
- (void)_handleUpdateEventTriggerExecuteOnce:(id)arg1;
- (void)_handleUpdateEventTriggerRecurrences:(id)arg1;
- (void)_handleUpdateEventsOnEventTrigger:(id)arg1;
- (void)_handleUpdateOwningDevice:(id)arg1;
- (void)_handleUserPermissionRequest:(id)arg1;
- (bool)_isTriggerFiredNotificationEntitled;
- (void)_migrateEventsToRecords;
- (void)_reevaluateIfRelaunchRequired;
- (void)_registerForMessages;
- (void)_removeEvents:(id)arg1;
- (void)_removeEventsFromEventTrigger:(id)arg1;
- (void)_resetExecutionState;
- (void)_transactionObjectRemoved:(id)arg1 message:(id)arg2;
- (void)_transactionObjectUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3;
- (void)_updateCondition:(id)arg1;
- (void)_updateEventTriggerCondition:(id)arg1;
- (void)_updateEventTriggerExecuteOnce:(id)arg1;
- (void)_updateEventTriggerRecurrences:(id)arg1;
- (id)_updateEventsOnEventTrigger:(id)arg1;
- (void)_updateOwningDevice:(id)arg1;
- (void)_userDidConfirmExecute:(bool)arg1 completionHandler:(id /* block */)arg2;
- (unsigned long long)activationState;
- (unsigned long long)activationType;
- (bool)addEventsFromMessage:(id)arg1;
- (id)backingStoreObjects:(long long)arg1;
- (id)calendarEvents;
- (id)charThresholdEvents;
- (id)characteristicBaseEvents;
- (id)characteristicEvents;
- (bool)checkSharedEventTriggerActivationResidentRequirement:(id)arg1;
- (bool)compatible:(id)arg1 user:(id)arg2;
- (bool)computedActive;
- (void)configure:(id)arg1 messageDispatcher:(id)arg2 queue:(id)arg3;
- (bool)containsRecurrences;
- (id)createEventModel:(id)arg1 endEvent:(bool)arg2 message:(id)arg3 checkForSupport:(bool)arg4 error:(id*)arg5;
- (void)dealloc;
- (id)didOccurEvent:(id)arg1 causingDevice:(id)arg2;
- (id)dumpState;
- (id)durationEvents;
- (id)emptyModelObject;
- (void)encodeWithCoder:(id)arg1;
- (id)endEvents;
- (id)evaluationCondition;
- (id)events;
- (bool)executeOnce;
- (void)executionComplete:(id)arg1 error:(id)arg2;
- (id)executionSession;
- (void)fixupForReplacementAccessory:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithModel:(id)arg1 home:(id)arg2 message:(id)arg3;
- (void)invalidate;
- (bool)isEventTriggerOnLocalDeviceForAccessory:(id)arg1;
- (bool)isEventTriggerOnRemoteGatewayForAccessory:(id)arg1;
- (id)locationEvents;
- (id)messageReceiverChildren;
- (id)metric:(bool)arg1;
- (bool)migratedEventsToRecords;
- (id)modelObjectWithChangeType:(unsigned long long)arg1 version:(long long)arg2;
- (id)predicateUtilities;
- (id)presenceEvents;
- (void)processEventRecords:(id)arg1 message:(id)arg2;
- (id)recurrences;
- (void)removeAccessory:(id)arg1;
- (void)removeCharacteristic:(id)arg1;
- (void)removeService:(id)arg1;
- (void)removeUser:(id)arg1;
- (bool)requiresDataVersion4;
- (void)resetExecutionState;
- (void)sendTriggerFiredNotification:(id)arg1;
- (void)setActivationState:(unsigned long long)arg1;
- (void)setActivationType:(unsigned long long)arg1;
- (void)setEvaluationCondition:(id)arg1;
- (void)setExecuteOnce:(bool)arg1;
- (void)setExecutionSession:(id)arg1;
- (void)setMigratedEventsToRecords:(bool)arg1;
- (void)setPredicateUtilities:(id)arg1;
- (void)setUserConfirmationSession:(id)arg1;
- (bool)shouldActivateOnLocalDevice;
- (bool)shouldEncodeLastFireDate:(id)arg1;
- (id)significantTimeEvents;
- (void)takeOverOwnershipOfTrigger;
- (id)timeEvents;
- (void)timerFired:(id)arg1;
- (id)triggerEvents;
- (unsigned long long)triggerType;
- (id)userConfirmationSession;
- (void)userDidConfirmExecute:(bool)arg1 completionHandler:(id /* block */)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
