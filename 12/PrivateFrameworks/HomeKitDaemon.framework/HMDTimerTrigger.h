<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HMDTimerTrigger.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeKitDaemon.framework/HMDTimerTrigger.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon (484.7.17.1)
 */

@interface HMDTimerTrigger : HMDTrigger {
    NSDate * _currentFireDate;
    NSDate * _fireDate;
    NSTimeZone * _fireDateTimeZone;
    NSDateComponents * _fireRepeatInterval;
    NSArray * _recurrences;
    NSString * _significantEvent;
    NSDateComponents * _significantEventOffset;
    NSTimer * _timer;
    NSString * _timerID;
}

@property (nonatomic, retain) NSDate *currentFireDate;
@property (nonatomic, copy) NSDate *fireDate;
@property (nonatomic, copy) NSTimeZone *fireDateTimeZone;
@property (nonatomic, copy) NSDateComponents *fireRepeatInterval;
@property (nonatomic, copy) NSArray *recurrences;
@property (nonatomic, copy) NSString *significantEvent;
@property (nonatomic, copy) NSDateComponents *significantEventOffset;
@property (nonatomic, retain) NSTimer *timer;
@property (nonatomic, retain) NSString *timerID;

+ (id)getCalendar:(id)arg1;
+ (id)logCategory;
+ (bool)supportsSecureCoding;
+ (id)validateRecurrence:(id)arg1 calendar:(id)arg2 fireDate:(id)arg3;
+ (id)validateRecurrences:(id)arg1;
+ (id)validateSignificantOffset:(id)arg1;
+ (id)validateTriggerModel:(id)arg1 message:(id)arg2 currentFireDate:(id)arg3;
+ (id)validateWholeMinuteDate:(id)arg1 onCalendar:(id)arg2;

- (void).cxx_destruct;
- (void)_activateWithCompletion:(id /* block */)arg1;
- (void)_closestDatesForStartDate:(id)arg1 earliestDate:(id)arg2 timeZone:(id)arg3 deliveryRepeatInterval:(id)arg4 returnDateBefore:(id*)arg5 returnDateAfter:(id*)arg6;
- (void)_disableTimerOffReactivationFailure;
- (void)_handleTimerTriggerUpdate:(id)arg1 message:(id)arg2;
- (void)_handleUpdateTimerTriggerPropertiesModel:(id)arg1 message:(id)arg2;
- (void)_handleUpdateTimerTriggerPropertiesRequest:(id)arg1;
- (id)_nextFireDate;
- (id)_nextSignificantEventFireDate;
- (bool)_reactivateFireDateTrigger;
- (bool)_reactivateSignificantEventTrigger;
- (bool)_reactivateTrigger;
- (void)_reactiveTriggerAfterDelay;
- (void)_registerForMessages;
- (id)_serializeForAdd;
- (bool)_shouldExecuteActionSet;
- (void)_startTimer:(id)arg1;
- (void)_startTimerWithFireDate:(id)arg1;
- (void)_startTimerWithSignificantEventDate:(id)arg1;
- (void)_stopTimer;
- (void)_timerTriggered;
- (void)_transactionObjectRemoved:(id)arg1 message:(id)arg2;
- (void)_transactionObjectUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3;
- (id)backingStoreObjects:(long long)arg1;
- (void)completeConfiguration;
- (void)configure:(id)arg1 messageDispatcher:(id)arg2 queue:(id)arg3;
- (id)currentFireDate;
- (void)dealloc;
- (id)description;
- (id)dumpState;
- (id)emptyModelObject;
- (void)encodeWithCoder:(id)arg1;
- (id)fireDate;
- (id)fireDateTimeZone;
- (id)fireRepeatInterval;
- (id)getCalendar;
- (id)getFireInterval;
- (id)initWithCoder:(id)arg1;
- (id)initWithModel:(id)arg1 home:(id)arg2 message:(id)arg3;
- (id)initWithName:(id)arg1 uuid:(id)arg2;
- (id)modelObjectWithChangeType:(unsigned long long)arg1;
- (void)nsTimerTriggered:(id)arg1;
- (id)recurrences;
- (void)setCurrentFireDate:(id)arg1;
- (void)setFireDate:(id)arg1;
- (void)setFireDateTimeZone:(id)arg1;
- (void)setFireRepeatInterval:(id)arg1;
- (void)setRecurrences:(id)arg1;
- (void)setSignificantEvent:(id)arg1;
- (void)setSignificantEventOffset:(id)arg1;
- (void)setTimer:(id)arg1;
- (void)setTimerID:(id)arg1;
- (bool)shouldActivateOnLocalDevice;
- (id)significantEvent;
- (id)significantEventOffset;
- (id)timer;
- (void)timerFired:(id)arg1;
- (id)timerID;
- (void)timerTriggered;
- (unsigned long long)triggerType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
