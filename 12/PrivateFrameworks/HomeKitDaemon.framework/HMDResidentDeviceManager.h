<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HMDResidentDeviceManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeKitDaemon.framework/HMDResidentDeviceManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon (484.7.17.1)
 */

@interface HMDResidentDeviceManager : HMFObject <HMDBackingStoreObjectProtocol, HMDHomeMessageReceiver, HMFLogging, HMFTimerDelegate, NSSecureCoding> {
    NSObject<OS_dispatch_queue> * _clientQueue;
    bool  _confirming;
    <HMDResidentDeviceManagerDelegate> * _delegate;
    bool  _firstHomeZoneFetch;
    bool  _firstLegacyFetch;
    HMDHome * _home;
    long long  _lastAtHomeLevel;
    HMFMessageDispatcher * _messageDispatcher;
    NSUUID * _primaryResidentUUID;
    NSObject<OS_dispatch_queue> * _propertyQueue;
    HMDCentralMessageDispatcher * _remoteMessageDispatcher;
    bool  _residentAvailable;
    NSMutableSet * _residentDevices;
    HMFTimer * _residentMonitorTimer;
    bool  _residentSupported;
    NSUUID * _uuid;
}

@property (nonatomic, readonly) NSArray *availableResidentDevices;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *clientQueue;
@property (getter=isConfirming, nonatomic) bool confirming;
@property (getter=isCurrentDeviceAvaliableResident, nonatomic, readonly) bool currentDeviceAvaliableResident;
@property (readonly, copy) NSString *debugDescription;
@property <HMDResidentDeviceManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=hasFirstHomeZoneFetch, nonatomic) bool firstHomeZoneFetch;
@property (getter=hasFirstLegacyFetch, nonatomic) bool firstLegacyFetch;
@property (readonly) unsigned long long hash;
@property (nonatomic) HMDHome *home;
@property (nonatomic) long long lastAtHomeLevel;
@property (nonatomic, readonly) HMFMessageDispatcher *messageDispatcher;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *messageReceiveQueue;
@property (readonly, copy) NSSet *messageReceiverChildren;
@property (nonatomic, readonly) NSUUID *messageTargetUUID;
@property (nonatomic, readonly) HMDResidentDevice *primaryResidentDevice;
@property (nonatomic, retain) NSUUID *primaryResidentUUID;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *propertyQueue;
@property (nonatomic, readonly) HMDCentralMessageDispatcher *remoteMessageDispatcher;
@property (getter=isResidentAvailable, nonatomic, readonly) bool residentAvailable;
@property (nonatomic, readonly, copy) NSArray *residentDevices;
@property (retain) HMFTimer *residentMonitorTimer;
@property (getter=isResidentSupported, nonatomic) bool residentSupported;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSUUID *uuid;

+ (long long)compareElectionVersions:(id)arg1 otherVersion:(id)arg2;
+ (bool)hasMessageReceiverChildren;
+ (id)logCategory;
+ (id)shortDescription;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)__currentDeviceUpdated:(id)arg1 completion:(id /* block */)arg2;
- (void)__handleAppleAccountResolved:(id)arg1;
- (void)_addResidentDevice:(id)arg1;
- (void)_addResidentDeviceWithModel:(id)arg1 message:(id)arg2;
- (void)_confirmResidentDevice:(id)arg1 electionParameters:(id)arg2 againstDevices:(id)arg3 completionBlock:(id /* block */)arg4;
- (void)_electResidentDevice;
- (id)_electionParameters;
- (id)_electionParameters:(id)arg1;
- (void)_handleCloudManagerDidCompleteInitialFetchNotification:(id)arg1;
- (void)_handleConfirmResidentDevice:(id)arg1;
- (void)_handleResidentDeviceUpdateEnabled:(id)arg1;
- (void)_handleResidentElectionParameters:(id)arg1;
- (bool)_isAtHome;
- (void)_notifyClientsOfAddedResidentDevice:(id)arg1;
- (void)_notifyClientsOfRemovedResidentDevice:(id)arg1;
- (id)_orderedDevicesForElection;
- (void)_pingResident;
- (void)_registerForMessages;
- (void)_removeResidentDevice:(id)arg1;
- (void)_removeResidentDeviceWithModel:(id)arg1 message:(id)arg2;
- (void)_run;
- (void)_setupSessionWithPrimaryResidentDevice;
- (void)_startMonitoringResident;
- (void)_stopMonitoringResident;
- (void)_teardownSessionWithPrimaryResidentDevice;
- (void)_updateChargingTimer;
- (void)_updateDischargingTimer:(long long)arg1;
- (void)_updateReachability:(bool)arg1 forResidentDevice:(id)arg2;
- (void)_updateResidentAvailability;
- (void)atHomeLevelChanged:(long long)arg1;
- (id)availableResidentDevices;
- (id)clientQueue;
- (long long)compareResidentDevice:(id)arg1 electionParameters:(id)arg2;
- (long long)compareResidentDeviceA:(id)arg1 electionParametersA:(id)arg2 residentDeviceB:(id)arg3 electionParametersB:(id)arg4;
- (void)conditionallyConfirmOnBoot;
- (void)configureWithHome:(id)arg1;
- (void)confirmAsResident;
- (void)confirmOnAvailability;
- (void)dealloc;
- (id)debugDescription;
- (id)delegate;
- (id)description;
- (id)descriptionWithPointer:(bool)arg1;
- (id)dumpState;
- (void)electResidentDevice;
- (void)encodeWithCoder:(id)arg1;
- (void)handleBatteryLevelChange:(id)arg1;
- (void)handleBatteryStateChange:(id)arg1;
- (void)handleCurrentDeviceChanged:(id)arg1;
- (void)handleCurrentDeviceUpdated:(id)arg1;
- (void)handleResidentDeviceIsNotReachable:(id)arg1;
- (void)handleResidentDeviceIsReachable:(id)arg1;
- (bool)hasFirstHomeZoneFetch;
- (bool)hasFirstLegacyFetch;
- (id)home;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (bool)isConfirming;
- (bool)isCurrentDeviceAvaliableResident;
- (bool)isResidentAvailable;
- (bool)isResidentSupported;
- (long long)lastAtHomeLevel;
- (id)logIdentifier;
- (id)messageDispatcher;
- (id)messageReceiveQueue;
- (id)messageTargetUUID;
- (void)notifyClientsOfUpdatedResidentDevice:(id)arg1;
- (void)notifyResidentAvailable:(bool)arg1;
- (void)notifyUpdatedPrimaryResident:(id)arg1;
- (id)ourSelf;
- (id)primaryResidentDevice;
- (id)primaryResidentUUID;
- (id)propertyQueue;
- (id)remoteMessageDispatcher;
- (void)removeResidentDevice:(id)arg1;
- (id)residentDeviceForDevice:(id)arg1;
- (id)residentDevices;
- (id)residentMonitorTimer;
- (id)residentWithUUID:(id)arg1;
- (void)run;
- (void)setConfirming:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFirstHomeZoneFetch:(bool)arg1;
- (void)setFirstLegacyFetch:(bool)arg1;
- (void)setHome:(id)arg1;
- (void)setLastAtHomeLevel:(long long)arg1;
- (void)setPrimaryResidentUUID:(id)arg1;
- (void)setResidentAvailable:(bool)arg1;
- (void)setResidentDevices:(id)arg1;
- (void)setResidentMonitorTimer:(id)arg1;
- (void)setResidentSupported:(bool)arg1;
- (id)shortDescription;
- (void)timerDidFire:(id)arg1;
- (void)transactionObjectRemoved:(id)arg1 message:(id)arg2;
- (void)transactionObjectUpdated:(id)arg1 newValues:(id)arg2 message:(id)arg3;
- (void)updatePrimaryResidentWithUUID:(id)arg1;
- (void)updateResidentAvailability;
- (id)uuid;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
