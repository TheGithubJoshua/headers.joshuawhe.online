<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>DEDController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DiagnosticExtensionsDaemon.framework/DEDController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DiagnosticExtensionsDaemon.framework/DiagnosticExtensionsDaemon (1)
 */

@interface DEDController : NSObject <DEDPairingProtocol, DEDSecureArchiving, DEDXPCConnectorDaemonDelegate, DEDXPCProtocol> {
    DEDIDSConnection * __idsConnection;
    DEDSharingConnection * __sharingConnection;
    NSObject<OS_dispatch_queue> * _bugSessionCallbackQueue;
    <DEDClientProtocol> * _clientDelegate;
    NSMutableDictionary * _devices;
    id /* block */  _devicesCompletion;
    id /* block */  _didCancelCompletion;
    bool  _embeddedInApp;
    bool  _isDaemon;
    NSObject<OS_os_log> * _log;
    <DEDPairingProtocol> * _pairingDelegate;
    id /* block */  _pongBlock;
    NSObject<OS_dispatch_queue> * _replyQueue;
    NSMutableDictionary * _sessionDidStartBlocks;
    id /* block */  _sessionExistsCompletion;
    NSMutableDictionary * _sessionStartBlocks;
    double  _sessionStartTimeout;
    NSMutableDictionary * _sessions;
    bool  _started;
    bool  _useIDS;
    bool  _useSharing;
    NSObject<OS_dispatch_queue> * _workQueue;
    <DEDWorkerProtocol> * _workerDelegate;
    DEDXPCConnector * _xpcConnector;
    DEDXPCInbound * _xpcInbound;
    NSXPCConnection * _xpcOutboundConnection;
}

@property (retain) DEDIDSConnection *_idsConnection;
@property (retain) DEDSharingConnection *_sharingConnection;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *bugSessionCallbackQueue;
@property <DEDClientProtocol> *clientDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) NSMutableDictionary *devices;
@property (copy) id /* block */ devicesCompletion;
@property (copy) id /* block */ didCancelCompletion;
@property bool embeddedInApp;
@property (readonly) unsigned long long hash;
@property bool isDaemon;
@property (retain) NSObject<OS_os_log> *log;
@property <DEDPairingProtocol> *pairingDelegate;
@property (copy) id /* block */ pongBlock;
@property (retain) NSObject<OS_dispatch_queue> *replyQueue;
@property (retain) NSMutableDictionary *sessionDidStartBlocks;
@property (copy) id /* block */ sessionExistsCompletion;
@property (retain) NSMutableDictionary *sessionStartBlocks;
@property double sessionStartTimeout;
@property (retain) NSMutableDictionary *sessions;
@property bool started;
@property (readonly) Class superclass;
@property bool useIDS;
@property bool useSharing;
@property (retain) NSObject<OS_dispatch_queue> *workQueue;
@property <DEDWorkerProtocol> *workerDelegate;
@property (retain) DEDXPCConnector *xpcConnector;
@property (retain) DEDXPCInbound *xpcInbound;
@property NSXPCConnection *xpcOutboundConnection;

+ (id)archivedClasses;

- (void).cxx_destruct;
- (id)_allKnownDevicesWithIdentifier:(id)arg1;
- (id)_deviceForIncomingDevice:(id)arg1;
- (id)_deviceForIncomingDevice:(id)arg1 needsReady:(bool)arg2;
- (void)_didAbortSessionWithID:(id)arg1;
- (id)_idsConnection;
- (id)_sharingConnection;
- (id)_sharingDeviceForIncomingDevice:(id)arg1;
- (void)_timeOutSessionStartBlockWithIdentifier:(id)arg1 timeout:(double)arg2;
- (void)abortSession:(id)arg1;
- (void)abortSession:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)addDevice:(id)arg1;
- (void)addDidStartSessionCompletion:(id /* block */)arg1 withIdentifier:(id)arg2;
- (void)addSessionStartCompletion:(id /* block */)arg1 withIdentifier:(id)arg2;
- (id)allKnownDevices;
- (id)bugSessionCallbackQueue;
- (id)clientDelegate;
- (void)configureClientDelegate:(id)arg1;
- (void)configureForDaemon;
- (void)configureForEmbedded:(bool)arg1;
- (void)configureForIDS:(bool)arg1;
- (void)configureForSharing:(bool)arg1;
- (void)configurePairingDelegate:(id)arg1;
- (void)configureWorkerDelegate:(id)arg1;
- (void)connector:(id)arg1 didLooseConnectionToProcessWithPid:(int)arg2;
- (id)devices;
- (id /* block */)devicesCompletion;
- (id)devicesWithIdentifier:(id)arg1;
- (id /* block */)didCancelCompletion;
- (void)didDiscoverDevices:(id)arg1;
- (void)didStartBugSessionWithInfo:(id)arg1;
- (void)discoverAllAvailableDevices;
- (void)discoverDevicesWithCompletion:(id /* block */)arg1;
- (bool)embeddedInApp;
- (void)gotDeviceUpdate:(id)arg1;
- (void)hasActiveSession:(id)arg1;
- (void)hasActiveSessionForIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (bool)hasCompletionBlockWithIdentifier:(id)arg1;
- (bool)hasDevice:(id)arg1;
- (id)idsConnection;
- (bool)induceTimeOutIfNeededAndReturnCanProceedWithDevice:(id)arg1 sessionId:(id)arg2;
- (id)init;
- (bool)isDaemon;
- (id)knownSessions;
- (id)log;
- (id)pairingDelegate;
- (id)persistence;
- (void)ping;
- (void)pingDaemonWithCompletion:(id /* block */)arg1;
- (void)pong;
- (id /* block */)pongBlock;
- (id /* block */)popDidStartSessionCompletionWithIdentifier:(id)arg1;
- (id /* block */)popSessionStartCompletionWithIdentifier:(id)arg1;
- (void)promptPINForDevice:(id)arg1;
- (id)purgeStaleSessions:(id)arg1;
- (id)remoteXPCObject;
- (id)replyQueue;
- (void)reset;
- (id)sessionDidStartBlocks;
- (id /* block */)sessionExistsCompletion;
- (id)sessionForIdentifier:(id)arg1;
- (id)sessionStartBlocks;
- (double)sessionStartTimeout;
- (void)sessionWithIdentifier:(id)arg1 isActive:(bool)arg2;
- (id)sessions;
- (void)setBugSessionCallbackQueue:(id)arg1;
- (void)setClientDelegate:(id)arg1;
- (void)setDevices:(id)arg1;
- (void)setDevicesCompletion:(id /* block */)arg1;
- (void)setDidCancelCompletion:(id /* block */)arg1;
- (void)setEmbeddedInApp:(bool)arg1;
- (void)setIsDaemon:(bool)arg1;
- (void)setLog:(id)arg1;
- (void)setPairingDelegate:(id)arg1;
- (void)setPongBlock:(id /* block */)arg1;
- (void)setReplyQueue:(id)arg1;
- (void)setSessionDidStartBlocks:(id)arg1;
- (void)setSessionExistsCompletion:(id /* block */)arg1;
- (void)setSessionStartBlocks:(id)arg1;
- (void)setSessionStartTimeout:(double)arg1;
- (void)setSessions:(id)arg1;
- (void)setStarted:(bool)arg1;
- (void)setUseIDS:(bool)arg1;
- (void)setUseSharing:(bool)arg1;
- (void)setWorkQueue:(id)arg1;
- (void)setWorkerDelegate:(id)arg1;
- (void)setXpcConnector:(id)arg1;
- (void)setXpcInbound:(id)arg1;
- (void)setXpcOutboundConnection:(id)arg1;
- (void)set_idsConnection:(id)arg1;
- (void)set_sharingConnection:(id)arg1;
- (id)sharingConnection;
- (void)start;
- (void)startBugSessionWithIdentifier:(id)arg1 configuration:(id)arg2 caller:(id)arg3 target:(id)arg4;
- (void)startBugSessionWithIdentifier:(id)arg1 configuration:(id)arg2 target:(id)arg3 completion:(id /* block */)arg4;
- (void)startPairSetupForDevice:(id)arg1;
- (bool)started;
- (void)stopDeviceDiscovery;
- (void)stopDiscovery;
- (void)successPINForDevice:(id)arg1;
- (void)tryPIN:(id)arg1 forDevice:(id)arg2;
- (bool)useIDS;
- (bool)useSharing;
- (id)workQueue;
- (id)workerDelegate;
- (id)xpcConnector;
- (id)xpcInbound;
- (id)xpcOutboundConnection;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
