<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CEMNetworkWiFiDeclaration_EAPClientConfiguration.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ConfigurationEngineModel.framework/CEMNetworkWiFiDeclaration_EAPClientConfiguration.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ConfigurationEngineModel.framework/ConfigurationEngineModel (25.9)
 */

@interface CEMNetworkWiFiDeclaration_EAPClientConfiguration : CEMPayloadBase {
    NSArray * _payloadAcceptEAPTypes;
    NSNumber * _payloadEAPFASTProvisionPAC;
    NSNumber * _payloadEAPFASTProvisionPACAnonymously;
    NSNumber * _payloadEAPFASTUsePAC;
    NSNumber * _payloadEAPSIMAKAEncryptedIdentityEnabled;
    NSNumber * _payloadEAPSIMNumberOfRANDs;
    NSNumber * _payloadOneTimePassword;
    NSNumber * _payloadOneTimeUserPassword;
    NSString * _payloadOuterIdentity;
    NSArray * _payloadPayloadCertificateAnchorUUID;
    NSString * _payloadSystemModeCredentialsSource;
    NSNumber * _payloadSystemModeUseOpenDirectoryCredentials;
    NSNumber * _payloadTLSAllowTrustExceptions;
    NSNumber * _payloadTLSCertificateIsRequired;
    NSString * _payloadTLSMaximumVersion;
    NSString * _payloadTLSMinimumVersion;
    NSArray * _payloadTLSTrustedCertificates;
    NSArray * _payloadTLSTrustedServerNames;
    NSString * _payloadTTLSInnerAuthentication;
    NSString * _payloadUserName;
    NSString * _payloadUserPassword;
}

@property (nonatomic, copy) NSArray *payloadAcceptEAPTypes;
@property (nonatomic, copy) NSNumber *payloadEAPFASTProvisionPAC;
@property (nonatomic, copy) NSNumber *payloadEAPFASTProvisionPACAnonymously;
@property (nonatomic, copy) NSNumber *payloadEAPFASTUsePAC;
@property (nonatomic, copy) NSNumber *payloadEAPSIMAKAEncryptedIdentityEnabled;
@property (nonatomic, copy) NSNumber *payloadEAPSIMNumberOfRANDs;
@property (nonatomic, copy) NSNumber *payloadOneTimePassword;
@property (nonatomic, copy) NSNumber *payloadOneTimeUserPassword;
@property (nonatomic, copy) NSString *payloadOuterIdentity;
@property (nonatomic, copy) NSArray *payloadPayloadCertificateAnchorUUID;
@property (nonatomic, copy) NSString *payloadSystemModeCredentialsSource;
@property (nonatomic, copy) NSNumber *payloadSystemModeUseOpenDirectoryCredentials;
@property (nonatomic, copy) NSNumber *payloadTLSAllowTrustExceptions;
@property (nonatomic, copy) NSNumber *payloadTLSCertificateIsRequired;
@property (nonatomic, copy) NSString *payloadTLSMaximumVersion;
@property (nonatomic, copy) NSString *payloadTLSMinimumVersion;
@property (nonatomic, copy) NSArray *payloadTLSTrustedCertificates;
@property (nonatomic, copy) NSArray *payloadTLSTrustedServerNames;
@property (nonatomic, copy) NSString *payloadTTLSInnerAuthentication;
@property (nonatomic, copy) NSString *payloadUserName;
@property (nonatomic, copy) NSString *payloadUserPassword;

+ (id)allowedPayloadKeys;
+ (id)buildRequiredOnlyWithAcceptEAPTypes:(id)arg1;
+ (id)buildWithAcceptEAPTypes:(id)arg1 withUserName:(id)arg2 withUserPassword:(id)arg3 withOneTimePassword:(id)arg4 withPayloadCertificateAnchorUUID:(id)arg5 withTLSTrustedCertificates:(id)arg6 withTLSTrustedServerNames:(id)arg7 withTLSAllowTrustExceptions:(id)arg8 withTLSCertificateIsRequired:(id)arg9 withTTLSInnerAuthentication:(id)arg10 withTLSMinimumVersion:(id)arg11 withTLSMaximumVersion:(id)arg12 withOuterIdentity:(id)arg13 withEAPFASTUsePAC:(id)arg14 withEAPFASTProvisionPAC:(id)arg15 withEAPFASTProvisionPACAnonymously:(id)arg16 withEAPSIMNumberOfRANDs:(id)arg17 withSystemModeCredentialsSource:(id)arg18 withSystemModeUseOpenDirectoryCredentials:(id)arg19 withOneTimeUserPassword:(id)arg20 withEAPSIMAKAEncryptedIdentityEnabled:(id)arg21;

- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)loadPayload:(id)arg1 error:(id*)arg2;
- (id)payloadAcceptEAPTypes;
- (id)payloadEAPFASTProvisionPAC;
- (id)payloadEAPFASTProvisionPACAnonymously;
- (id)payloadEAPFASTUsePAC;
- (id)payloadEAPSIMAKAEncryptedIdentityEnabled;
- (id)payloadEAPSIMNumberOfRANDs;
- (id)payloadOneTimePassword;
- (id)payloadOneTimeUserPassword;
- (id)payloadOuterIdentity;
- (id)payloadPayloadCertificateAnchorUUID;
- (id)payloadSystemModeCredentialsSource;
- (id)payloadSystemModeUseOpenDirectoryCredentials;
- (id)payloadTLSAllowTrustExceptions;
- (id)payloadTLSCertificateIsRequired;
- (id)payloadTLSMaximumVersion;
- (id)payloadTLSMinimumVersion;
- (id)payloadTLSTrustedCertificates;
- (id)payloadTLSTrustedServerNames;
- (id)payloadTTLSInnerAuthentication;
- (id)payloadUserName;
- (id)payloadUserPassword;
- (id)serializePayloadWithAssetProviders:(id)arg1;
- (void)setPayloadAcceptEAPTypes:(id)arg1;
- (void)setPayloadEAPFASTProvisionPAC:(id)arg1;
- (void)setPayloadEAPFASTProvisionPACAnonymously:(id)arg1;
- (void)setPayloadEAPFASTUsePAC:(id)arg1;
- (void)setPayloadEAPSIMAKAEncryptedIdentityEnabled:(id)arg1;
- (void)setPayloadEAPSIMNumberOfRANDs:(id)arg1;
- (void)setPayloadOneTimePassword:(id)arg1;
- (void)setPayloadOneTimeUserPassword:(id)arg1;
- (void)setPayloadOuterIdentity:(id)arg1;
- (void)setPayloadPayloadCertificateAnchorUUID:(id)arg1;
- (void)setPayloadSystemModeCredentialsSource:(id)arg1;
- (void)setPayloadSystemModeUseOpenDirectoryCredentials:(id)arg1;
- (void)setPayloadTLSAllowTrustExceptions:(id)arg1;
- (void)setPayloadTLSCertificateIsRequired:(id)arg1;
- (void)setPayloadTLSMaximumVersion:(id)arg1;
- (void)setPayloadTLSMinimumVersion:(id)arg1;
- (void)setPayloadTLSTrustedCertificates:(id)arg1;
- (void)setPayloadTLSTrustedServerNames:(id)arg1;
- (void)setPayloadTTLSInnerAuthentication:(id)arg1;
- (void)setPayloadUserName:(id)arg1;
- (void)setPayloadUserPassword:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
