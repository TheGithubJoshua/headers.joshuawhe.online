<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WGWidgetDiscoveryController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Widgets.framework/WGWidgetDiscoveryController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Widgets.framework/Widgets (1)
 */

@interface WGWidgetDiscoveryController : NSObject <LSApplicationWorkspaceObserverProtocol, WGWidgetDataSourceObserver, WGWidgetListEditViewControllerDataSource, WGWidgetListEditViewControllerDelegate, WGWidgetViewControllerDelegate> {
    struct NSMutableDictionary { Class x1; } * _archive;
    NSObject<OS_dispatch_queue> * _archiveWriteQueue;
    NSMutableDictionary * _dataSourceIdentifiersToDatumIdentifiers;
    <WGWidgetDebugging> * _debuggingHandler;
    NSMutableSet * _defaultEnabledIDs;
    <WGWidgetDiscoveryControllerDelegate> * _delegate;
    NSMutableDictionary * _identifiersToDataSources;
    NSMutableDictionary * _identifiersToDatums;
    NSMutableDictionary * _identifiersToWidgetInfos;
    NSObject<OS_dispatch_queue> * _newWidgetsCountPostQueue;
    NSPointerArray * _observers;
    NSMutableArray * _orderedEnabledTodayIdentifiers;
    NSMutableArray * _orderedEnabledWidgetsIdentifiers;
    NSArray * _orderedVisibleTodayIdentifiers;
    NSArray * _orderedVisibleWidgetsIdentifiers;
    WGWidgetPersistentStateController * _persistentStateController;
    WGWidgetListEditViewController * _presentedEditViewController;
    id  _presentedEditViewControllerStatusBarAssertion;
    bool  _shouldPurgeNonASTCSnapshots;
    bool  _shouldPurgeNonCAMLSnapshots;
    NSMutableDictionary * _widgetIDsToPendingTestCompletions;
    NSMutableDictionary * _widgetIDsToPendingTestTearDowns;
    NSMutableDictionary * _widgetIDsToWidgets;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <WGWidgetDebugging> *debuggingHandler;
@property (nonatomic) <WGWidgetDiscoveryControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (setter=_setPresentedEditViewController:, nonatomic) WGWidgetListEditViewController *presentedEditViewController;
@property (getter=_presentedEditViewControllerStatusBarAssertion, setter=_setPresentedEditViewControllerStatusBarAssertion:, nonatomic, retain) id presentedEditViewControllerStatusBarAssertion;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMutableDictionary *widgetIDsToPendingTestCompletions;
@property (nonatomic, retain) NSMutableDictionary *widgetIDsToPendingTestTearDowns;
@property (getter=_widgetIDsToWidgets, nonatomic, readonly) NSMutableDictionary *widgetIDsToWidgets;

+ (id /* block */)generatorForWidgetViewControllerWithBundleID:(id)arg1 containingBundleID:(id)arg2 timeout:(unsigned long long)arg3;
+ (long long)layoutModeForSize:(struct CGSize { double x1; double x2; })arg1;

- (void).cxx_destruct;
- (void)_applicationIconChanged:(id)arg1;
- (void)_beginObservingDataSourcesIfNecessary;
- (void)_calculateAndPostNewWidgetsCount;
- (void)_dataSourcesDidChange:(id)arg1;
- (id)_defaultGroupForWidgetWithIdentifier:(id)arg1;
- (id)_disabledIdentifiers;
- (void)_externalSourceRequestsInsertionOfWidgetWithIdentifier:(id)arg1 insertAtTop:(bool)arg2;
- (id)_groupForWidgetWithIdentifier:(id)arg1;
- (void)_handleWidgetLaunchRecommendation:(id)arg1 completion:(id /* block */)arg2;
- (id)_insertWidgetWithIdentifier:(id)arg1 atTop:(bool)arg2;
- (void)_invalidateVisibleIdentifiersForGroup:(id)arg1;
- (void)_invalidateWidgetListEditViewControllerStatusBarAssertion:(id)arg1;
- (bool)_isApplicationLockedOutWithProxy:(id)arg1;
- (bool)_isElementWithIdentifierEnabled:(id)arg1;
- (bool)_isElementWithIdentifierKnown:(id)arg1;
- (id)_newWidgetListEditViewController;
- (id)_newWidgetListEditViewControllerStatusBarAssertion;
- (id)_newWidgetWithIdentifier:(id)arg1 delegate:(id)arg2;
- (int)_nextSequenceNumber;
- (void)_notifyObserversOfOrderChange;
- (void)_notifyObserversOfVisibilityChange:(bool)arg1 ofWidgetWithIdentifier:(id)arg2 inGroup:(id)arg3;
- (id)_orderedEnabledIdentifiersForGroup:(id)arg1;
- (id)_orderedEnabledWidgetIdentifiersForGroup:(id)arg1 includingNoContent:(bool)arg2;
- (id)_orderedVisibleIdentifiersForGroup:(id)arg1;
- (id)_orderedVisibleIdentifiersForTodayGroup;
- (id)_orderedVisibleIdentifiersForWidgetGroup;
- (id)_preferredViewControllerForPresentingFromViewController:(id)arg1;
- (id)_presentedEditViewControllerStatusBarAssertion;
- (void)_removeWidgetWithIdentifier:(id)arg1;
- (void)_requestUnlockWithCompletion:(id /* block */)arg1;
- (bool)_setEnabled:(bool)arg1 forElementWithIdentifier:(id)arg2;
- (void)_setPresentedEditViewController:(id)arg1;
- (void)_setPresentedEditViewControllerStatusBarAssertion:(id)arg1;
- (void)_updateLockedOutStateForWidget:(id)arg1;
- (void)_updateLockedOutStateForWidget:(id)arg1 withContainingAppProxy:(id)arg2;
- (id)_updatePublicationStateOfDatumWithIdentifier:(id)arg1 visibilityChanged:(bool)arg2 contentStateChanged:(bool)arg3 insertAtTop:(bool)arg4 notifyingObservers:(bool)arg5;
- (void)_widget:(id)arg1 withIdentifier:(id)arg2 didRemoveSnapshotAtURL:(id)arg3;
- (id)_widgetIDsToWidgets;
- (void)_widgetListEditViewControllerWillDisappear:(id)arg1;
- (void)_widgetViewControllerDidRemoveSnapshot:(id)arg1;
- (void)_widgetViewControllerRequestsAdd:(id)arg1;
- (id)_widgetViewControllerWithBundleID:(id)arg1 containingBundleID:(id)arg2 didConnect:(id /* block */)arg3 canTearDown:(id /* block */)arg4;
- (void)addDiscoveryObserver:(id)arg1;
- (void)beginDiscovery;
- (void)debugWidgetWithBundleID:(id)arg1 options:(id)arg2 completion:(id /* block */)arg3;
- (id)debuggingHandler;
- (id)delegate;
- (void)deviceManagementPolicyDidChange:(id)arg1;
- (id)disabledInterfaceItemIdentifiersForWidgetListEditViewController:(id)arg1;
- (id)disabledWidgetIdentifiers;
- (void)dismissWidgetListEditViewController:(id)arg1 animated:(bool)arg2 withCompletion:(id /* block */)arg3;
- (void)dismissWidgetListEditViewControllerAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (id)enabledWidgetIdentifiersForAllGroups;
- (id)groupsForWidgetListEditViewController:(id)arg1;
- (id)init;
- (long long)largestAvailableDisplayModeForWidget:(id)arg1;
- (long long)largestAvailableDisplayModeForWidgetWithIdentifier:(id)arg1;
- (long long)layoutModeForWidgetListEditViewController:(id)arg1;
- (void)presentWidgetListEditViewControllerFromViewController:(id)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (id)presentedEditViewController;
- (void)remoteViewControllerDidConnectForWidgetViewController:(id)arg1;
- (void)remoteViewControllerViewDidAppearForWidgetViewController:(id)arg1;
- (void)removeDiscoveryObserver:(id)arg1;
- (void)setDebuggingHandler:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHasContent:(bool)arg1 forWidgetWithIdentifier:(id)arg2;
- (void)setLargestAvailableDisplayMode:(long long)arg1 forWidgetWithIdentifier:(id)arg2;
- (void)setUserSpecifiedDisplayMode:(long long)arg1 forWidgetWithIdentifier:(id)arg2;
- (void)setWidgetIDsToPendingTestCompletions:(id)arg1;
- (void)setWidgetIDsToPendingTestTearDowns:(id)arg1;
- (void)setWidgetLoggingEnabled:(bool)arg1;
- (void)setWidgetSnapshotTimestampsEnabled:(bool)arg1;
- (bool)shouldPurgeArchivedSnapshotsForWidget:(id)arg1;
- (bool)shouldPurgeNonASTCSnapshotsForWidget:(id)arg1;
- (bool)shouldPurgeNonCAMLSnapshotsForWidget:(id)arg1;
- (bool)shouldRemoveSnapshotWhenNotVisibleForWidget:(id)arg1;
- (long long)userSpecifiedDisplayModeForWidget:(id)arg1;
- (long long)userSpecifiedDisplayModeForWidgetWithIdentifier:(id)arg1;
- (id)visibleWidgetIdentifiersForGroup:(id)arg1;
- (unsigned long long)visibleWidgetsCount;
- (void)widget:(id)arg1 didChangeLargestAvailableDisplayMode:(long long)arg2;
- (void)widget:(id)arg1 didChangeUserSpecifiedDisplayMode:(long long)arg2;
- (void)widget:(id)arg1 didEncounterProblematicSnapshotAtURL:(id)arg2;
- (void)widget:(id)arg1 didRemoveSnapshotAtURL:(id)arg2;
- (void)widgetDataSource:(id)arg1 removeDatum:(id)arg2;
- (void)widgetDataSource:(id)arg1 replaceWithDatum:(id)arg2;
- (id)widgetIDsToPendingTestCompletions;
- (id)widgetIDsToPendingTestTearDowns;
- (void)widgetListEditViewController:(id)arg1 acknowledgeInterfaceItemsWithIdentifiers:(id)arg2;
- (id)widgetListEditViewController:(id)arg1 defaultGroupForItemWithIdentifier:(id)arg2;
- (void)widgetListEditViewController:(id)arg1 didReorderItemsWithIdentifiersInGroups:(id)arg2;
- (id)widgetListEditViewController:(id)arg1 displayNameForItemWithIdentifier:(id)arg2;
- (bool)widgetListEditViewController:(id)arg1 isItemWithIdentifierEnabled:(id)arg2;
- (bool)widgetListEditViewController:(id)arg1 isItemWithIdentifierNew:(id)arg2;
- (id)widgetListEditViewController:(id)arg1 itemIdentifiersForGroup:(id)arg2;
- (void)widgetListEditViewController:(id)arg1 requestsIconForItemWithIdentifier:(id)arg2 withHandler:(id /* block */)arg3;
- (void)widgetListEditViewController:(id)arg1 setEnabled:(bool)arg2 forItemsWithIdentifiers:(id)arg3;
- (bool)widgetListEditViewControllerShouldIncludeInternalWidgets:(id)arg1;
- (id)widgetWithIdentifier:(id)arg1 delegate:(id)arg2 forRequesterWithIdentifier:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
