<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CUSystemMonitor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreUtils.framework/CUSystemMonitor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreUtils.framework/CoreUtils (592.2)
 */

@interface CUSystemMonitor : NSObject {
    bool  _activateCalled;
    bool  _activateCompleted;
    id /* block */  _bluetoothAddressChangedHandler;
    id /* block */  _callChangedHandler;
    id /* block */  _consoleUserChangedHandler;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    id /* block */  _familyUpdatedHandler;
    id /* block */  _firstUnlockHandler;
    bool  _invalidateCalled;
    bool  _invalidateCalled2;
    id /* block */  _invalidationHandler;
    id /* block */  _manateeChangedHandler;
    id /* block */  _meDeviceChangedHandler;
    id /* block */  _netFlagsChangedHandler;
    id /* block */  _powerUnlimitedChangedHandler;
    id /* block */  _primaryAppleIDChangedHandler;
    id /* block */  _primaryIPChangedHandler;
    id /* block */  _primaryNetworkChangedHandler;
    id /* block */  _rotatingIdentifierChangedHandler;
    id /* block */  _screenLockedChangedHandler;
    id /* block */  _screenOnChangedHandler;
    id /* block */  _screenSaverChangedHandler;
    id /* block */  _systemLockStateChangedHandler;
    id /* block */  _wifiStateChangedHandler;
}

@property (readonly) int activeCallCount;
@property (readonly) struct { unsigned char x1[6]; } bluetoothAddress48;
@property (copy) id /* block */ bluetoothAddressChangedHandler;
@property (readonly, copy) NSData *bluetoothAddressData;
@property (copy) id /* block */ callChangedHandler;
@property (readonly) int connectedCallCount;
@property (nonatomic, copy) id /* block */ consoleUserChangedHandler;
@property (readonly) unsigned int consoleUserID;
@property (readonly, copy) NSString *consoleUserName;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (readonly, copy) NSArray *familyMembers;
@property (copy) id /* block */ familyUpdatedHandler;
@property (nonatomic, copy) id /* block */ firstUnlockHandler;
@property (nonatomic, readonly) bool firstUnlocked;
@property (nonatomic, copy) id /* block */ invalidationHandler;
@property (readonly) bool manateeAvailable;
@property (nonatomic, copy) id /* block */ manateeChangedHandler;
@property (copy) id /* block */ meDeviceChangedHandler;
@property (readonly, copy) NSString *meDeviceFMFDeviceID;
@property (readonly, copy) NSString *meDeviceIDSDeviceID;
@property (readonly) bool meDeviceIsMe;
@property (readonly, copy) NSString *meDeviceName;
@property (readonly) bool meDeviceValid;
@property (readonly) unsigned int netFlags;
@property (copy) id /* block */ netFlagsChangedHandler;
@property (readonly) bool powerUnlimited;
@property (copy) id /* block */ powerUnlimitedChangedHandler;
@property (copy) id /* block */ primaryAppleIDChangedHandler;
@property (readonly) bool primaryAppleIDIsHSA2;
@property (copy) id /* block */ primaryIPChangedHandler;
@property (nonatomic, readonly) union { struct sockaddr { unsigned char x_1_1_1; unsigned char x_1_1_2; BOOL x_1_1_3[14]; } x1; struct sockaddr_in { unsigned char x_2_1_1; unsigned char x_2_1_2; unsigned short x_2_1_3; struct in_addr { unsigned int x_4_2_1; } x_2_1_4; BOOL x_2_1_5[8]; } x2; struct sockaddr_in6 { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned short x_3_1_3; unsigned int x_3_1_4; struct in6_addr { union { unsigned char x_1_3_1[16]; unsigned short x_1_3_2[8]; unsigned int x_1_3_3[4]; } x_5_2_1; } x_3_1_5; unsigned int x_3_1_6; } x3; } primaryIPv4Addr;
@property (nonatomic, readonly) union { struct sockaddr { unsigned char x_1_1_1; unsigned char x_1_1_2; BOOL x_1_1_3[14]; } x1; struct sockaddr_in { unsigned char x_2_1_1; unsigned char x_2_1_2; unsigned short x_2_1_3; struct in_addr { unsigned int x_4_2_1; } x_2_1_4; BOOL x_2_1_5[8]; } x2; struct sockaddr_in6 { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned short x_3_1_3; unsigned int x_3_1_4; struct in6_addr { union { unsigned char x_1_3_1[16]; unsigned short x_1_3_2[8]; unsigned int x_1_3_3[4]; } x_5_2_1; } x_3_1_5; unsigned int x_3_1_6; } x3; } primaryIPv6Addr;
@property (nonatomic, copy) id /* block */ primaryNetworkChangedHandler;
@property (nonatomic, readonly, copy) NSString *primaryNetworkSignature;
@property (readonly) struct { unsigned char x1[6]; } rotatingIdentifier48;
@property (copy) id /* block */ rotatingIdentifierChangedHandler;
@property (readonly, copy) NSData *rotatingIdentifierData;
@property (readonly) bool screenLocked;
@property (copy) id /* block */ screenLockedChangedHandler;
@property (readonly) bool screenOn;
@property (copy) id /* block */ screenOnChangedHandler;
@property (readonly) bool screenSaverActive;
@property (copy) id /* block */ screenSaverChangedHandler;
@property (nonatomic, readonly) int systemLockState;
@property (nonatomic, copy) id /* block */ systemLockStateChangedHandler;
@property (nonatomic, readonly) unsigned int wifiFlags;
@property (nonatomic, readonly) int wifiState;
@property (nonatomic, copy) id /* block */ wifiStateChangedHandler;

- (void).cxx_destruct;
- (void)activateWithCompletion:(id /* block */)arg1;
- (int)activeCallCount;
- (struct { unsigned char x1[6]; })bluetoothAddress48;
- (id /* block */)bluetoothAddressChangedHandler;
- (id)bluetoothAddressData;
- (id /* block */)callChangedHandler;
- (int)connectedCallCount;
- (id /* block */)consoleUserChangedHandler;
- (unsigned int)consoleUserID;
- (id)consoleUserName;
- (id)dispatchQueue;
- (id)familyMembers;
- (id /* block */)familyUpdatedHandler;
- (id /* block */)firstUnlockHandler;
- (bool)firstUnlocked;
- (id)init;
- (void)invalidate;
- (id /* block */)invalidationHandler;
- (bool)manateeAvailable;
- (id /* block */)manateeChangedHandler;
- (id /* block */)meDeviceChangedHandler;
- (id)meDeviceFMFDeviceID;
- (id)meDeviceIDSDeviceID;
- (bool)meDeviceIsMe;
- (id)meDeviceName;
- (bool)meDeviceValid;
- (unsigned int)netFlags;
- (id /* block */)netFlagsChangedHandler;
- (bool)powerUnlimited;
- (id /* block */)powerUnlimitedChangedHandler;
- (id /* block */)primaryAppleIDChangedHandler;
- (bool)primaryAppleIDIsHSA2;
- (id /* block */)primaryIPChangedHandler;
- (union { struct sockaddr { unsigned char x_1_1_1; unsigned char x_1_1_2; BOOL x_1_1_3[14]; } x1; struct sockaddr_in { unsigned char x_2_1_1; unsigned char x_2_1_2; unsigned short x_2_1_3; struct in_addr { unsigned int x_4_2_1; } x_2_1_4; BOOL x_2_1_5[8]; } x2; struct sockaddr_in6 { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned short x_3_1_3; unsigned int x_3_1_4; struct in6_addr { union { unsigned char x_1_3_1[16]; unsigned short x_1_3_2[8]; unsigned int x_1_3_3[4]; } x_5_2_1; } x_3_1_5; unsigned int x_3_1_6; } x3; })primaryIPv4Addr;
- (union { struct sockaddr { unsigned char x_1_1_1; unsigned char x_1_1_2; BOOL x_1_1_3[14]; } x1; struct sockaddr_in { unsigned char x_2_1_1; unsigned char x_2_1_2; unsigned short x_2_1_3; struct in_addr { unsigned int x_4_2_1; } x_2_1_4; BOOL x_2_1_5[8]; } x2; struct sockaddr_in6 { unsigned char x_3_1_1; unsigned char x_3_1_2; unsigned short x_3_1_3; unsigned int x_3_1_4; struct in6_addr { union { unsigned char x_1_3_1[16]; unsigned short x_1_3_2[8]; unsigned int x_1_3_3[4]; } x_5_2_1; } x_3_1_5; unsigned int x_3_1_6; } x3; })primaryIPv6Addr;
- (id /* block */)primaryNetworkChangedHandler;
- (id)primaryNetworkSignature;
- (struct { unsigned char x1[6]; })rotatingIdentifier48;
- (id /* block */)rotatingIdentifierChangedHandler;
- (id)rotatingIdentifierData;
- (bool)screenLocked;
- (id /* block */)screenLockedChangedHandler;
- (bool)screenOn;
- (id /* block */)screenOnChangedHandler;
- (bool)screenSaverActive;
- (id /* block */)screenSaverChangedHandler;
- (void)setBluetoothAddressChangedHandler:(id /* block */)arg1;
- (void)setCallChangedHandler:(id /* block */)arg1;
- (void)setConsoleUserChangedHandler:(id /* block */)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setFamilyUpdatedHandler:(id /* block */)arg1;
- (void)setFirstUnlockHandler:(id /* block */)arg1;
- (void)setInvalidationHandler:(id /* block */)arg1;
- (void)setManateeChangedHandler:(id /* block */)arg1;
- (void)setMeDeviceChangedHandler:(id /* block */)arg1;
- (void)setNetFlagsChangedHandler:(id /* block */)arg1;
- (void)setPowerUnlimitedChangedHandler:(id /* block */)arg1;
- (void)setPrimaryAppleIDChangedHandler:(id /* block */)arg1;
- (void)setPrimaryIPChangedHandler:(id /* block */)arg1;
- (void)setPrimaryNetworkChangedHandler:(id /* block */)arg1;
- (void)setRotatingIdentifierChangedHandler:(id /* block */)arg1;
- (void)setScreenLockedChangedHandler:(id /* block */)arg1;
- (void)setScreenOnChangedHandler:(id /* block */)arg1;
- (void)setScreenSaverChangedHandler:(id /* block */)arg1;
- (void)setSystemLockStateChangedHandler:(id /* block */)arg1;
- (void)setWifiStateChangedHandler:(id /* block */)arg1;
- (int)systemLockState;
- (id /* block */)systemLockStateChangedHandler;
- (unsigned int)wifiFlags;
- (int)wifiState;
- (id /* block */)wifiStateChangedHandler;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
