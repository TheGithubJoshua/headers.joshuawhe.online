<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EasyConfigDevice.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/EasyConfig.framework/EasyConfigDevice.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/EasyConfig.framework/EasyConfig (592.2)
 */

@interface EasyConfigDevice : NSObject <NSCopying> {
    NSDictionary * _airplayBonjourInfo;
    struct BonjourBrowser { } * _airplayBrowser;
    double  _applyConfigFinishTime;
    double  _applyConfigStartTime;
    NSDictionary * _configResponse;
    unsigned int  _configSeed;
    double  _configStartTime;
    NSDictionary * _configuration;
    unsigned long long  _deviceIdentifier;
    NSDictionary * _deviceInfo;
    unsigned int  _enterSetupCodeMs;
    unsigned long long  _features;
    double  _findPostConfigFoundTime;
    double  _findPostConfigStartTime;
    double  _findPreConfigFoundTime;
    double  _findPreConfigStartTime;
    int  _firstErr;
    NSDictionary * _hapBonjourInfo;
    struct BonjourBrowser { } * _hapBrowser;
    bool  _hasPairingDelegate;
    struct HTTPClientPrivate { } * _httpClient;
    NSObject<OS_dispatch_queue> * _internalQueue;
    NSDictionary * _mfiConfigBonjourInfo;
    struct BonjourBrowser { } * _mfiConfigBrowser;
    struct MFiSAP { } * _mfiSAP;
    NSString * _model;
    NSString * _name;
    unsigned int  _pairSetupFlags;
    unsigned int  _pairVerifyFlags;
    struct { 
        void *context; 
        int (*showSetupCode_f)(); 
        int (*hideSetupCode_f)(); 
        int (*promptForSetupCode_f)(); 
        int (*copyIdentity_f)(); 
        int (*findPeer_f)(); 
        int (*savePeer_f)(); 
        int (*resumeRequest_f)(); 
        int (*resumeResponse_f)(); 
    }  _pairingDelegate;
    struct PairingSessionPrivate { } * _pairingSession;
    bool  _pausesAfterApply;
    double  _postConfigCheckFinishTime;
    double  _postConfigCheckStartTime;
    struct { 
        double secondsToGetLinkUpOnDestination; 
        int wifiJoinDestinationAPError; 
        unsigned char destinationNetworkPSKInKeychain; 
        unsigned char hitJoiningDestinationAPTimeout; 
        int rssiOfDestinationAP; 
        unsigned int snrOfDestinationAP; 
        unsigned int channelOfDestinationAP; 
    }  _postConfigMetrics;
    bool  _postConfigMetricsSet;
    struct { 
        double startTime; 
        unsigned char userChangedFriendlyName; 
        unsigned char playPasswordSet; 
        unsigned char adminPasswordSet; 
        unsigned char destinationNetworkRecommendationUsed; 
        double secondsToGetLinkUpOnSWAP; 
        int wifiJoinSWAPError; 
        unsigned char hitJoiningTargetSWAPTimeout; 
        int rssiOfSWAP; 
        unsigned int snrOfSWAP; 
        unsigned int channelOfSWAP; 
    }  _preConfigMetrics;
    bool  _preConfigMetricsSet;
    id /* block */  _progressHandler;
    id /* block */  _promptForSetupCodeBlock;
    double  _promptForSetupCodeTime;
    NSDictionary * _raopBonjourInfo;
    struct BonjourBrowser { } * _raopBrowser;
    NSDictionary * _scanRecord;
    double  _securityFinishTime;
    double  _securityStartTime;
    bool  _skipPairSetup;
    bool  _started;
    int  _state;
    bool  _supportsHAP;
    bool  _supportsHAP2;
    bool  _supportsMFi;
    bool  _supportsPairSetup;
    bool  _supportsTLV;
    NSObject<OS_dispatch_source> * _timeoutTimer;
    NSObject<OS_dispatch_queue> * _userQueue;
}

@property (nonatomic, copy) NSDictionary *configuration;
@property (nonatomic) unsigned long long deviceIdentifier;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic) unsigned long long features;
@property (nonatomic, copy) NSString *model;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) unsigned int pairSetupFlags;
@property (nonatomic) unsigned int pairVerifyFlags;
@property (nonatomic) bool pausesAfterApply;
@property (nonatomic, copy) id /* block */ progressHandler;
@property (nonatomic) bool skipPairSetup;

+ (id)deviceWithInfo:(id)arg1;
+ (id)deviceWithScanRecord:(id)arg1;
+ (bool)supportedScanRecord:(id)arg1;

- (void).cxx_destruct;
- (void)_applyConfigCompletion:(struct HTTPMessagePrivate { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct HTTPMessagePrivate {} *x2; struct { BOOL x_3_1_1[8192]; unsigned long long x_3_1_2; char *x_3_1_3; unsigned long long x_3_1_4; char *x_3_1_5; unsigned long long x_3_1_6; int x_3_1_7; char *x_3_1_8; unsigned long long x_3_1_9; struct { char *x_10_2_1; unsigned long long x_10_2_2; char *x_10_2_3; unsigned long long x_10_2_4; char *x_10_2_5; unsigned long long x_10_2_6; char *x_10_2_7; unsigned long long x_10_2_8; char *x_10_2_9; unsigned long long x_10_2_10; char *x_10_2_11; unsigned long long x_10_2_12; char *x_10_2_13; unsigned long long x_10_2_14; char *x_10_2_15; char *x_10_2_16; char *x_10_2_17; unsigned long long x_10_2_18; char *x_10_2_19; unsigned long long x_10_2_20; } x_3_1_10; char *x_3_1_11; unsigned long long x_3_1_12; int x_3_1_13; char *x_3_1_14; unsigned long long x_3_1_15; unsigned char x_3_1_16; unsigned long long x_3_1_17; unsigned char x_3_1_18; int x_3_1_19; } x3; unsigned char x4; int x5; unsigned char x6; }*)arg1;
- (int)_applyConfigStart;
- (int)_configureStart:(id)arg1;
- (void)_findDevicePostConfigEvent:(unsigned int)arg1 info:(id)arg2;
- (int)_findDevicePostConfigStart;
- (void)_findDevicePreConfigEvent:(unsigned int)arg1 info:(id)arg2;
- (int)_findDevicePreConfigStart;
- (void)_handleError:(int)arg1;
- (void)_logEnded;
- (int)_mfiSAPNext:(struct HTTPMessagePrivate { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct HTTPMessagePrivate {} *x2; struct { BOOL x_3_1_1[8192]; unsigned long long x_3_1_2; char *x_3_1_3; unsigned long long x_3_1_4; char *x_3_1_5; unsigned long long x_3_1_6; int x_3_1_7; char *x_3_1_8; unsigned long long x_3_1_9; struct { char *x_10_2_1; unsigned long long x_10_2_2; char *x_10_2_3; unsigned long long x_10_2_4; char *x_10_2_5; unsigned long long x_10_2_6; char *x_10_2_7; unsigned long long x_10_2_8; char *x_10_2_9; unsigned long long x_10_2_10; char *x_10_2_11; unsigned long long x_10_2_12; char *x_10_2_13; unsigned long long x_10_2_14; char *x_10_2_15; char *x_10_2_16; char *x_10_2_17; unsigned long long x_10_2_18; char *x_10_2_19; unsigned long long x_10_2_20; } x_3_1_10; char *x_3_1_11; unsigned long long x_3_1_12; int x_3_1_13; char *x_3_1_14; unsigned long long x_3_1_15; unsigned char x_3_1_16; unsigned long long x_3_1_17; unsigned char x_3_1_18; int x_3_1_19; } x3; unsigned char x4; int x5; unsigned char x6; }*)arg1;
- (int)_mfiSAPStart;
- (int)_pairSetupNext:(struct HTTPMessagePrivate { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct HTTPMessagePrivate {} *x2; struct { BOOL x_3_1_1[8192]; unsigned long long x_3_1_2; char *x_3_1_3; unsigned long long x_3_1_4; char *x_3_1_5; unsigned long long x_3_1_6; int x_3_1_7; char *x_3_1_8; unsigned long long x_3_1_9; struct { char *x_10_2_1; unsigned long long x_10_2_2; char *x_10_2_3; unsigned long long x_10_2_4; char *x_10_2_5; unsigned long long x_10_2_6; char *x_10_2_7; unsigned long long x_10_2_8; char *x_10_2_9; unsigned long long x_10_2_10; char *x_10_2_11; unsigned long long x_10_2_12; char *x_10_2_13; unsigned long long x_10_2_14; char *x_10_2_15; char *x_10_2_16; char *x_10_2_17; unsigned long long x_10_2_18; char *x_10_2_19; unsigned long long x_10_2_20; } x_3_1_10; char *x_3_1_11; unsigned long long x_3_1_12; int x_3_1_13; char *x_3_1_14; unsigned long long x_3_1_15; unsigned char x_3_1_16; unsigned long long x_3_1_17; unsigned char x_3_1_18; int x_3_1_19; } x3; unsigned char x4; int x5; unsigned char x6; }*)arg1;
- (int)_pairSetupStart;
- (int)_pairVerifyNext:(struct HTTPMessagePrivate { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct HTTPMessagePrivate {} *x2; struct { BOOL x_3_1_1[8192]; unsigned long long x_3_1_2; char *x_3_1_3; unsigned long long x_3_1_4; char *x_3_1_5; unsigned long long x_3_1_6; int x_3_1_7; char *x_3_1_8; unsigned long long x_3_1_9; struct { char *x_10_2_1; unsigned long long x_10_2_2; char *x_10_2_3; unsigned long long x_10_2_4; char *x_10_2_5; unsigned long long x_10_2_6; char *x_10_2_7; unsigned long long x_10_2_8; char *x_10_2_9; unsigned long long x_10_2_10; char *x_10_2_11; unsigned long long x_10_2_12; char *x_10_2_13; unsigned long long x_10_2_14; char *x_10_2_15; char *x_10_2_16; char *x_10_2_17; unsigned long long x_10_2_18; char *x_10_2_19; unsigned long long x_10_2_20; } x_3_1_10; char *x_3_1_11; unsigned long long x_3_1_12; int x_3_1_13; char *x_3_1_14; unsigned long long x_3_1_15; unsigned char x_3_1_16; unsigned long long x_3_1_17; unsigned char x_3_1_18; int x_3_1_19; } x3; unsigned char x4; int x5; unsigned char x6; }*)arg1;
- (int)_pairVerifyStart;
- (void)_postConfigCheckCompletion:(struct HTTPMessagePrivate { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct HTTPMessagePrivate {} *x2; struct { BOOL x_3_1_1[8192]; unsigned long long x_3_1_2; char *x_3_1_3; unsigned long long x_3_1_4; char *x_3_1_5; unsigned long long x_3_1_6; int x_3_1_7; char *x_3_1_8; unsigned long long x_3_1_9; struct { char *x_10_2_1; unsigned long long x_10_2_2; char *x_10_2_3; unsigned long long x_10_2_4; char *x_10_2_5; unsigned long long x_10_2_6; char *x_10_2_7; unsigned long long x_10_2_8; char *x_10_2_9; unsigned long long x_10_2_10; char *x_10_2_11; unsigned long long x_10_2_12; char *x_10_2_13; unsigned long long x_10_2_14; char *x_10_2_15; char *x_10_2_16; char *x_10_2_17; unsigned long long x_10_2_18; char *x_10_2_19; unsigned long long x_10_2_20; } x_3_1_10; char *x_3_1_11; unsigned long long x_3_1_12; int x_3_1_13; char *x_3_1_14; unsigned long long x_3_1_15; unsigned char x_3_1_16; unsigned long long x_3_1_17; unsigned char x_3_1_18; int x_3_1_19; } x3; unsigned char x4; int x5; unsigned char x6; }*)arg1;
- (void)_postConfigCheckStart:(id)arg1;
- (void)_postNote:(id)arg1 info:(id)arg2;
- (void)_postProgress:(int)arg1 info:(id)arg2;
- (void)_postProgress:(int)arg1 withResponse:(id)arg2;
- (int)_setupClient:(id)arg1;
- (void)_start;
- (int)_startBonjourWithTimeout:(int)arg1 handler:(id /* block */)arg2;
- (void)_stop:(int)arg1;
- (int)_timeoutTimerStart:(int)arg1 block:(id /* block */)arg2;
- (void)_trySetupCode:(id)arg1;
- (id)configuration;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (unsigned long long)deviceIdentifier;
- (id)dispatchQueue;
- (unsigned long long)features;
- (id)init;
- (id)model;
- (id)name;
- (unsigned int)pairSetupFlags;
- (unsigned int)pairVerifyFlags;
- (bool)pausesAfterApply;
- (id /* block */)progressHandler;
- (bool)removed:(id)arg1;
- (void)resumePostConfig;
- (void)setConfiguration:(id)arg1;
- (void)setDeviceIdentifier:(unsigned long long)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setFeatures:(unsigned long long)arg1;
- (void)setModel:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPairSetupFlags:(unsigned int)arg1;
- (void)setPairVerifyFlags:(unsigned int)arg1;
- (void)setPairingDelegate:(const void*)arg1;
- (void)setPausesAfterApply:(bool)arg1;
- (void)setPostConfigMetrics:(const struct { double x1; int x2; unsigned char x3; unsigned char x4; int x5; unsigned int x6; unsigned int x7; }*)arg1;
- (void)setPreConfigMetrics:(const struct { double x1; unsigned char x2; unsigned char x3; unsigned char x4; unsigned char x5; double x6; int x7; unsigned char x8; int x9; unsigned int x10; unsigned int x11; }*)arg1;
- (void)setProgressHandler:(id /* block */)arg1;
- (void)setPromptForSetupCodeHandler:(id /* block */)arg1;
- (void)setSkipPairSetup:(bool)arg1;
- (bool)skipPairSetup;
- (void)start;
- (void)stop;
- (void)trySetupCode:(id)arg1;
- (bool)updated:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
