<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXUIElement.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AXRuntime.framework/AXUIElement.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AXRuntime.framework/AXRuntime (1)
 */

@interface AXUIElement : NSObject <UIElementProtocol> {
    struct __AXUIElement { } * _axElement;
    NSMutableDictionary * _cachedAttributes;
    long long  _cachedRefCount;
    bool  _isValid;
}

@property (nonatomic, readonly) struct __AXUIElement { }*axElement;
@property (nonatomic, readonly, copy) NSMutableDictionary *cachedAttributes;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)applyElementAttributeCacheScheme:(unsigned long long)arg1;
+ (void)initialize;
+ (struct __AXUIElement { }*)systemWideAXUIElement;
+ (id)uiApplicationAtCoordinate:(struct CGPoint { double x1; double x2; })arg1;
+ (id)uiApplicationForContext:(unsigned int)arg1;
+ (id)uiElementAtCoordinate:(struct CGPoint { double x1; double x2; })arg1;
+ (id)uiElementAtCoordinate:(struct CGPoint { double x1; double x2; })arg1 forApplication:(struct __AXUIElement { }*)arg2 contextId:(unsigned int)arg3;
+ (id)uiElementAtCoordinate:(struct CGPoint { double x1; double x2; })arg1 startWithElement:(id)arg2;
+ (id)uiElementWithAXElement:(struct __AXUIElement { }*)arg1;
+ (id)uiElementWithAXElement:(struct __AXUIElement { }*)arg1 cache:(id)arg2;
+ (id)uiSystemWideApplication;

- (void).cxx_destruct;
- (id)_attributedValueForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void*)_cachedValueForAttribute:(long long)arg1;
- (void)_createCache:(bool)arg1;
- (id)_elementsWithParameter:(long long)arg1 count:(unsigned long long)arg2 prefetchAttributes:(bool)arg3;
- (void)_invalidate;
- (long long)_lineEndPosition;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_lineRangeForPosition:(unsigned long long)arg1;
- (long long)_lineStartPosition;
- (id)_objectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withParameterizedAttribute:(long long)arg2;
- (id)_outputCache;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_selectedTextRange;
- (void)_setCachedValue:(void*)arg1 forAttribute:(long long)arg2;
- (id)_valueForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)arrayWithAXAttribute:(long long)arg1;
- (struct __AXUIElement { }*)axElement;
- (bool)boolWithAXAttribute:(long long)arg1;
- (id)cachedAttributes;
- (bool)canPerformAXAction:(int)arg1;
- (struct CGColor { }*)colorWithAXAttribute:(long long)arg1;
- (void)dealloc;
- (void)disableCache;
- (void)enableCache:(bool)arg1;
- (unsigned long long)hash;
- (id)initWithAXElement:(struct __AXUIElement { }*)arg1;
- (id)initWithAXElement:(struct __AXUIElement { }*)arg1 cache:(id)arg2;
- (bool)isEqual:(id)arg1;
- (bool)isMockElement;
- (bool)isValid;
- (bool)isValidForApplication:(id)arg1;
- (void*)modifyStaticCacheValue:(void*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })nextCursorRangeInDirection:(unsigned long long)arg1 unit:(unsigned long long)arg2 outputRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })nextCursorRangeInDirection:(unsigned long long)arg1 unit:(unsigned long long)arg2 outputRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 currentCursorRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (id)nextElementsIncludingPrefetchedAttributesWithCount:(unsigned long long)arg1;
- (id)nextElementsWithCount:(unsigned long long)arg1;
- (id)numberWithAXAttribute:(long long)arg1;
- (id)objectWithAXAttribute:(long long)arg1;
- (id)objectWithAXAttribute:(long long)arg1 parameter:(void*)arg2;
- (struct CGPath { }*)pathWithAXAttribute:(long long)arg1;
- (bool)performAXAction:(int)arg1;
- (bool)performAXAction:(int)arg1 withValue:(id)arg2;
- (bool)performAXAction:(int)arg1 withValue:(id)arg2 fencePort:(unsigned int)arg3;
- (int)pid;
- (struct CGPoint { double x1; double x2; })pointWithAXAttribute:(long long)arg1;
- (id)previousElementsWithCount:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeWithAXAttribute:(long long)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectWithAXAttribute:(long long)arg1;
- (void)setAXAttribute:(long long)arg1 withArray:(id)arg2;
- (void)setAXAttribute:(long long)arg1 withBOOL:(bool)arg2;
- (void)setAXAttribute:(long long)arg1 withFloat:(float)arg2;
- (void)setAXAttribute:(long long)arg1 withLong:(long long)arg2;
- (void)setAXAttribute:(long long)arg1 withNumber:(id)arg2;
- (void)setAXAttribute:(long long)arg1 withObject:(id)arg2;
- (void)setAXAttribute:(long long)arg1 withObject:(id)arg2 synchronous:(bool)arg3;
- (void)setAXAttribute:(long long)arg1 withPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)setAXAttribute:(long long)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setAXAttribute:(long long)arg1 withSize:(struct CGSize { double x1; double x2; })arg2;
- (void)setAXAttribute:(long long)arg1 withString:(id)arg2;
- (void)setAXAttribute:(long long)arg1 withUIElement:(id)arg2;
- (void)setAXAttribute:(long long)arg1 withUIElementArray:(id)arg2;
- (void)setAXElement:(struct __AXUIElement { }*)arg1;
- (void)setCachedAttributes:(id)arg1;
- (id)stringWithAXAttribute:(long long)arg1;
- (id)uiElementsWithAttribute:(long long)arg1;
- (id)uiElementsWithAttribute:(long long)arg1 parameter:(void*)arg2;
- (id)uiElementsWithAttribute:(long long)arg1 parameter:(void*)arg2 fetchAttributes:(bool)arg3;
- (void)updateCache:(long long)arg1;
- (void)updateCacheWithAttributes:(id)arg1;
- (id)valueArrayWithAXAttributes:(struct __CFArray { }*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
