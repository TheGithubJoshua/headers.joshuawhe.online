<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CRDefaultCaptureSessionManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreRecognition.framework/CRDefaultCaptureSessionManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreRecognition.framework/CoreRecognition (112.6.1)
 */

@interface CRDefaultCaptureSessionManager : NSObject <CRCaptureSessionManager> {
    AVCaptureVideoPreviewLayer * _avfPreviewLayer;
    NSString * _cameraMode;
    long long  _cameraPosition;
    struct CGSize { 
        double width; 
        double height; 
    }  _cameraResolution;
    AVCaptureSession * _captureSession;
    <AVCaptureVideoDataOutputSampleBufferDelegate> * _captureSessionDelegate;
    <AVCaptureMetadataOutputObjectsDelegate> * _captureSessionMetadataDelegate;
    AVCaptureVideoDataOutput * _captureVideoDataOutput;
    NSString * _currentDeviceID;
    AVCaptureDeviceInput * _deviceInput;
    bool  _enableMetadataOutput;
    bool  _exposureAdjustmentInProgress;
    int  _exposureAdjustmentInProgressTimeoutCount;
    long long  _exposureMode;
    struct { struct { /* ? */ } *x1; int x2; double x3; double x4; } * _exposure_table;
    long long  _focusMode;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _highISOThresholdDuration;
    id  _inputPortFormatObserver;
    AVCaptureInputPort * _inputPortFormatSender;
    float  _maxISO;
    float  _minISO;
    bool  _runningManualExposure;
    long long  _torchMode;
    long long  _whiteBalanceMode;
}

@property (nonatomic, retain) AVCaptureVideoPreviewLayer *avfPreviewLayer;
@property (nonatomic, copy) NSString *cameraMode;
@property (nonatomic) long long cameraPosition;
@property struct CGSize { double x1; double x2; } cameraResolution;
@property (nonatomic, retain) AVCaptureSession *captureSession;
@property <AVCaptureVideoDataOutputSampleBufferDelegate> *captureSessionDelegate;
@property <AVCaptureMetadataOutputObjectsDelegate> *captureSessionMetadataDelegate;
@property (nonatomic, retain) AVCaptureVideoDataOutput *captureVideoDataOutput;
@property (retain) NSString *currentDeviceID;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) AVCaptureDeviceInput *deviceInput;
@property bool enableMetadataOutput;
@property bool exposureAdjustmentInProgress;
@property int exposureAdjustmentInProgressTimeoutCount;
@property (nonatomic) long long exposureMode;
@property struct { struct { /* ? */ } *x1; int x2; double x3; double x4; }*exposure_table;
@property (nonatomic) long long focusMode;
@property (readonly) unsigned long long hash;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } highISOThresholdDuration;
@property (retain) id inputPortFormatObserver;
@property (nonatomic) AVCaptureInputPort *inputPortFormatSender;
@property float maxISO;
@property float minISO;
@property (nonatomic, readonly) CALayer *previewLayer;
@property bool runningManualExposure;
@property (readonly) Class superclass;
@property (nonatomic) long long torchMode;
@property (nonatomic) long long whiteBalanceMode;

- (void).cxx_destruct;
- (void)_refocusOnPoint:(struct CGPoint { double x1; double x2; })arg1 focusMode:(long long)arg2 exposure:(bool)arg3;
- (id)avfPreviewLayer;
- (id)backFacingCamera;
- (void)cacheCameraResolution:(id)arg1;
- (unsigned long long)cameraCount;
- (id)cameraMode;
- (long long)cameraPosition;
- (struct CGSize { double x1; double x2; })cameraResolution;
- (id)captureDeviceWithIdentifier:(id)arg1;
- (id)captureDeviceWithPosition:(long long)arg1;
- (id)captureSession;
- (id)captureSessionDelegate;
- (id)captureSessionMetadataDelegate;
- (id)captureVideoDataOutput;
- (void)changeCameraConfiguration;
- (struct CGPoint { double x1; double x2; })convertCameraPoint:(struct CGPoint { double x1; double x2; })arg1 fromLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertCameraPoint:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertCameraPoint:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2 flipped:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertCameraRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromLayer:(id)arg2;
- (id)currentDeviceID;
- (id)deviceInput;
- (bool)enableMetadataOutput;
- (bool)exposureAdjustmentInProgress;
- (int)exposureAdjustmentInProgressTimeoutCount;
- (long long)exposureMode;
- (struct { struct { /* ? */ } *x1; int x2; double x3; double x4; }*)exposure_table;
- (long long)focusMode;
- (struct CGPoint { double x1; double x2; })focusPointOfInterest;
- (id)frontFacingCamera;
- (void)highISOAdjustExposure;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })highISOThresholdDuration;
- (id)inputPortFormatObserver;
- (id)inputPortFormatSender;
- (bool)isAdjustingFocus;
- (bool)isFocusPointOfInterestSupported;
- (bool)isPreviewVideoMirrored;
- (bool)isRearCamera;
- (bool)isRunning;
- (float)maxISO;
- (float)minISO;
- (id)previewLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })previewVisibleRect;
- (void)refocusOnPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)refocusOnPoint:(struct CGPoint { double x1; double x2; })arg1 exposure:(bool)arg2;
- (void)resetFocus;
- (bool)runningManualExposure;
- (void)setAvfPreviewLayer:(id)arg1;
- (void)setCameraMode:(id)arg1;
- (void)setCameraPosition:(long long)arg1;
- (void)setCameraResolution:(struct CGSize { double x1; double x2; })arg1;
- (void)setCaptureSession:(id)arg1;
- (void)setCaptureSessionDelegate:(id)arg1;
- (void)setCaptureSessionMetadataDelegate:(id)arg1;
- (void)setCaptureVideoDataOutput:(id)arg1;
- (void)setCurrentDeviceID:(id)arg1;
- (void)setDeviceInput:(id)arg1;
- (void)setEnableMetadataOutput:(bool)arg1;
- (void)setExposureAdjustmentInProgress:(bool)arg1;
- (void)setExposureAdjustmentInProgressTimeoutCount:(int)arg1;
- (void)setExposureMode:(long long)arg1;
- (void)setExposure_table:(struct { struct { /* ? */ } *x1; int x2; double x3; double x4; }*)arg1;
- (void)setFocusMode:(long long)arg1;
- (void)setHighISOThresholdDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setInputPortFormatObserver:(id)arg1;
- (void)setInputPortFormatSender:(id)arg1;
- (void)setMaxISO:(float)arg1;
- (void)setMinISO:(float)arg1;
- (void)setPreviewOrientation:(long long)arg1;
- (void)setRunningManualExposure:(bool)arg1;
- (void)setTorchMode:(long long)arg1;
- (void)setWhiteBalanceMode:(long long)arg1;
- (void)setupCameraSession;
- (void)setupCameraSessionWithCaptureDevice:(id)arg1;
- (void)setupHighISO:(id)arg1;
- (void)startRunning;
- (void)stopRunning;
- (bool)switchToCamera:(long long)arg1;
- (bool)switchToCameraWithDeviceID:(id)arg1;
- (int)targetVideoFormat;
- (void)teardownCameraSession;
- (bool)toggleCamera;
- (long long)torchMode;
- (long long)whiteBalanceMode;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
