<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSStringDrawingContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIFoundation.framework/NSStringDrawingContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation (553)
 */

@interface NSStringDrawingContext : NSObject {
    CUICatalog * _CUICatalog;
    CUIStyleEffectConfiguration * _CUIStyleEffects;
    double  _actualScaleFactor;
    double  _actualTrackingAdjustment;
    double  _baselineOffset;
    double  _firstBaselineOffset;
    id  _layout;
    NSDictionary * _linkAttributes;
    unsigned long long  _maximumNumberOfLines;
    double  _minimumScaleFactor;
    double  _minimumTrackingAdjustment;
    unsigned long long  _numberOfLineFragments;
    double  _scaledBaselineOffset;
    double  _scaledLineHeight;
    struct { 
        unsigned int _wantsNumberOfLineFragments : 1; 
        unsigned int _wrapsForTruncationMode : 1; 
        unsigned int _wantsBaselineOffset : 1; 
        unsigned int _wantsScaledBaselineOffset : 1; 
        unsigned int _wantsScaledLineHeight : 1; 
        unsigned int _drawsDebugBaselines : 1; 
        unsigned int _cachesLayout : 1; 
        unsigned int _usesSimpleTextEffects : 1; 
        unsigned int _activeRenderers : 4; 
        unsigned int _applicationPlatformContext : 3; 
    }  _sdcFlags;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _totalBounds;
}

@property (nonatomic) unsigned long long activeRenderers;
@property (nonatomic) double actualScaleFactor;
@property (nonatomic, readonly) double actualTrackingAdjustment;
@property (nonatomic) double actualTrackingAdjustment;
@property (nonatomic) double baselineOffset;
@property (nonatomic) bool cachesLayout;
@property (nonatomic, retain) CUICatalog *cuiCatalog;
@property (nonatomic, retain) CUIStyleEffectConfiguration *cuiStyleEffects;
@property (nonatomic) bool drawsDebugBaselines;
@property (nonatomic) double firstBaselineOffset;
@property (nonatomic, retain) id layout;
@property (nonatomic) unsigned long long maximumNumberOfLines;
@property (nonatomic) double minimumScaleFactor;
@property (nonatomic) double minimumTrackingAdjustment;
@property (nonatomic) unsigned long long numberOfLineFragments;
@property (nonatomic) double scaledBaselineOffset;
@property (nonatomic) double scaledLineHeight;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } totalBounds;
@property (nonatomic) bool usesSimpleTextEffects;
@property (nonatomic) bool wantsBaselineOffset;
@property (nonatomic) bool wantsNumberOfLineFragments;
@property (nonatomic) bool wantsScaledBaselineOffset;
@property (nonatomic) bool wantsScaledLineHeight;
@property (nonatomic) bool wrapsForTruncationMode;

- (unsigned long long)activeRenderers;
- (double)actualScaleFactor;
- (double)actualTrackingAdjustment;
- (long long)applicationFrameworkContext;
- (double)baselineOffset;
- (bool)cachesLayout;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)cuiCatalog;
- (id)cuiStyleEffects;
- (void)dealloc;
- (id)description;
- (bool)drawsDebugBaselines;
- (double)firstBaselineOffset;
- (id)init;
- (id)layout;
- (unsigned long long)maximumNumberOfLines;
- (double)minimumScaleFactor;
- (double)minimumTrackingAdjustment;
- (unsigned long long)numberOfLineFragments;
- (double)scaledBaselineOffset;
- (double)scaledLineHeight;
- (void)setActiveRenderers:(unsigned long long)arg1;
- (void)setActualScaleFactor:(double)arg1;
- (void)setActualTrackingAdjustment:(double)arg1;
- (void)setApplicationFrameworkContext:(long long)arg1;
- (void)setBaselineOffset:(double)arg1;
- (void)setCachesLayout:(bool)arg1;
- (void)setCuiCatalog:(id)arg1;
- (void)setCuiStyleEffects:(id)arg1;
- (void)setDrawsDebugBaselines:(bool)arg1;
- (void)setFirstBaselineOffset:(double)arg1;
- (void)setLayout:(id)arg1;
- (void)setMaximumNumberOfLines:(unsigned long long)arg1;
- (void)setMinimumScaleFactor:(double)arg1;
- (void)setMinimumTrackingAdjustment:(double)arg1;
- (void)setNumberOfLineFragments:(unsigned long long)arg1;
- (void)setScaledBaselineOffset:(double)arg1;
- (void)setScaledLineHeight:(double)arg1;
- (void)setTotalBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUsesSimpleTextEffects:(bool)arg1;
- (void)setWantsBaselineOffset:(bool)arg1;
- (void)setWantsNumberOfLineFragments:(bool)arg1;
- (void)setWantsScaledBaselineOffset:(bool)arg1;
- (void)setWantsScaledLineHeight:(bool)arg1;
- (void)setWrapsForTruncationMode:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })totalBounds;
- (bool)usesSimpleTextEffects;
- (bool)wantsBaselineOffset;
- (bool)wantsNumberOfLineFragments;
- (bool)wantsScaledBaselineOffset;
- (bool)wantsScaledLineHeight;
- (bool)wrapsForTruncationMode;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
