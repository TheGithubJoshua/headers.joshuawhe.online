<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSLineFragmentRenderingContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIFoundation.framework/NSLineFragmentRenderingContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation (553)
 */

@interface NSLineFragmentRenderingContext : NSObject <NSTextApplicationFrameworkContextClient> {
    struct CGSize { double x1; double x2; } * _advancements;
    CUICatalog * _catalog;
    double  _elasticWidth;
    struct { 
        unsigned int _isRTL : 1; 
        unsigned int _vAdvance : 1; 
        unsigned int _flipped : 1; 
        unsigned int _usesSimpleTextEffects : 1; 
        unsigned int _applicationFrameworkContext : 3; 
        unsigned int _reserved : 25; 
    }  _flags;
    unsigned short * _glyphs;
    NSGraphicsContext * _graphicsContext;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _imageBounds;
    double  _leftControlWidth;
    double  _leftSideDelta;
    double  _lineWidth;
    long long  _numRuns;
    long long  _resolvedAlignment;
    long long  _resolvedDirection;
    double  _rightControlWidth;
    void * _runs;
    CUIStyleEffectConfiguration * _styleEffects;
}

@property long long applicationFrameworkContext;
@property (nonatomic, retain) CUICatalog *cuiCatalog;
@property (nonatomic, retain) CUIStyleEffectConfiguration *cuiStyleEffects;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSGraphicsContext *graphicsContext;
@property (readonly) unsigned long long hash;
@property long long resolvedBaseWritingDirection;
@property long long resolvedTextAlignment;
@property (readonly) Class superclass;
@property (getter=_usesSimpleTextEffects, setter=_setUsesSimpleTextEffects:, nonatomic) bool usesSimpleTextEffects;

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (void)initialize;

- (bool)_isDeallocating;
- (void)_setUsesSimpleTextEffects:(bool)arg1;
- (bool)_tryRetain;
- (bool)_usesSimpleTextEffects;
- (long long)applicationFrameworkContext;
- (id)cuiCatalog;
- (id)cuiStyleEffects;
- (void)dealloc;
- (void)drawAtPoint:(struct CGPoint { double x1; double x2; })arg1 inContext:(struct CGContext { }*)arg2;
- (double)elasticWidth;
- (void)finalize;
- (void)getMaximumAscender:(double*)arg1 minimumDescender:(double*)arg2;
- (id)graphicsContext;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageBounds;
- (id)initWithRuns:(struct __CFArray { }*)arg1 glyphOrigin:(double)arg2 lineFragmentWidth:(double)arg3 elasticWidth:(double)arg4 usesScreenFonts:(bool)arg5 isRTL:(bool)arg6;
- (bool)isRTL;
- (double)lineFragmentWidth;
- (oneway void)release;
- (long long)resolvedBaseWritingDirection;
- (long long)resolvedTextAlignment;
- (void)setApplicationFrameworkContext:(long long)arg1;
- (void)setCuiCatalog:(id)arg1;
- (void)setCuiStyleEffects:(id)arg1;
- (void)setGraphicsContext:(id)arg1;
- (void)setResolvedBaseWritingDirection:(long long)arg1;
- (void)setResolvedTextAlignment:(long long)arg1;
- (struct CGSize { double x1; double x2; })sizeWithBehavior:(long long)arg1 usesFontLeading:(bool)arg2 baselineDelta:(double*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
