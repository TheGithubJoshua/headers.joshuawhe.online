<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSATSGlyphStorage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIFoundation.framework/NSATSGlyphStorage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation (553)
 */

@interface NSATSGlyphStorage : CTGlyphStorageInterface {
    long long  _bufferSize;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _characterRange;
    struct __CFSet { } * _children;
    struct { 
        unsigned int _hasNonNominalGlyph : 1; 
        unsigned int _hasPositionalStake : 1; 
        unsigned int _hasBidiRun : 1; 
        unsigned int _isEllipsisStorage : 1; 
        unsigned int _hasNonNominalStringIndexes : 1; 
        unsigned int _isUnordered : 1; 
        unsigned int _hasTotalAbsorbedCount : 1; 
        unsigned int _reserved : 25; 
    }  _gFlags;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _glyphRange;
    struct __CTGlyphStorage { } * _glyphStorage;
    const struct { id x1; id x2; long long x3; long long x4; double x5; double x6; double x7; double x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9; struct { unsigned int x_10_1_1 : 1; unsigned int x_10_1_2 : 1; unsigned int x_10_1_3 : 1; unsigned int x_10_1_4 : 1; unsigned int x_10_1_5 : 1; unsigned int x_10_1_6 : 1; unsigned int x_10_1_7 : 1; unsigned int x_10_1_8 : 1; unsigned int x_10_1_9 : 24; } x10; } * _lastElasticRun;
    long long  _lastElasticRunLocation;
    struct __CFArray { } * _masterRuns;
    long long  _numRuns;
    long long  _paraEndElasticCharIndex;
    double  _paraEndElasticCharWidth;
    NSATSGlyphStorage * _parent;
    long long  _runBufferSize;
    struct { id x1; id x2; long long x3; long long x4; double x5; double x6; double x7; double x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9; struct { unsigned int x_10_1_1 : 1; unsigned int x_10_1_2 : 1; unsigned int x_10_1_3 : 1; unsigned int x_10_1_4 : 1; unsigned int x_10_1_5 : 1; unsigned int x_10_1_6 : 1; unsigned int x_10_1_7 : 1; unsigned int x_10_1_8 : 1; unsigned int x_10_1_9 : 24; } x10; } * _runs;
    struct { long long x1; struct { unsigned short x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; long long x_2_1_5; } x2[0]; } * _stack;
    NSString * _textString;
    long long  _totalAbsorbedCount;
    NSATSTypesetter * _typesetter;
}

+ (id)allocWithZone:(struct _NSZone { }*)arg1;

- (const struct { id x1; id x2; long long x3; long long x4; double x5; double x6; double x7; double x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9; struct { unsigned int x_10_1_1 : 1; unsigned int x_10_1_2 : 1; unsigned int x_10_1_3 : 1; unsigned int x_10_1_4 : 1; unsigned int x_10_1_5 : 1; unsigned int x_10_1_6 : 1; unsigned int x_10_1_7 : 1; unsigned int x_10_1_8 : 1; unsigned int x_10_1_9 : 24; } x10; }*)_attributeRunForCharacterAtIndex:(long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_collectElasticRangeSurroundingCharacterAtIndex:(long long)arg1 minimumCharacterIndex:(long long)arg2;
- (struct __CTRun { }*)_createEllipsisRunWithStringRange:(struct { long long x1; long long x2; })arg1 attributes:(struct __CFDictionary { }*)arg2;
- (void)_flushCachedObjects;
- (void)_invalidate;
- (bool)_isDeallocating;
- (bool)_resolvePositionalStakeGlyphsForLineFragment:(struct __CTLine { }*)arg1 lineFragmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 minPosition:(double)arg3 maxPosition:(double)arg4 maxLineFragmentWidth:(double)arg5 breakHint:(long long*)arg6;
- (bool)_tryRetain;
- (double)_widthForStringRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)childGlyphStorageWithCharacterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct __CTTypesetter { }*)createCTTypesetter;
- (struct __CTGlyphStorage { }*)createCopy:(struct { long long x1; long long x2; })arg1;
- (void)dealloc;
- (void)disposeGlyphStack;
- (void)finalize;
- (void)getCustomAdvance:(struct CGSize { double x1; double x2; }*)arg1 forIndex:(long long)arg2;
- (void)initGlyphStack:(long long)arg1;
- (id)initWithTypesetter:(id)arg1;
- (void)insertGlyphs:(struct { long long x1; long long x2; })arg1;
- (void)moveGlyphsTo:(long long)arg1 from:(struct { long long x1; long long x2; })arg2;
- (void)popGlyph:(long long)arg1;
- (void)pushGlyph:(long long)arg1;
- (oneway void)release;
- (void)setAbsorbedCount:(long long)arg1 forIndex:(long long)arg2;
- (void)setAdvance:(struct CGSize { double x1; double x2; })arg1 forIndex:(long long)arg2;
- (void)setGlyphID:(unsigned short)arg1 forIndex:(long long)arg2;
- (void)setGlyphRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 characterRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setProps:(unsigned int)arg1 forIndex:(long long)arg2;
- (void)setStringIndex:(long long)arg1 forIndex:(long long)arg2;
- (void)swapGlyph:(long long)arg1 withIndex:(long long)arg2;
- (id)typesetter;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
