<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UINibDecoder.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIFoundation.framework/UINibDecoder.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation (553)
 */

@interface UINibDecoder : NSCoder {
    Class  arrayClass;
    Class * classes;
    id  delegate;
    Class  dictionaryClass;
    long long  failedByKeyMask;
    struct UINibDecoderHeader { 
        unsigned char type[10]; 
        unsigned int formatVersion; 
        unsigned int coderVersion; 
        struct UINibArchiveTableInfo { 
            unsigned int count; 
            unsigned int offset; 
        } objects; 
        struct UINibArchiveTableInfo { 
            unsigned int count; 
            unsigned int offset; 
        } keys; 
        struct UINibArchiveTableInfo { 
            unsigned int count; 
            unsigned int offset; 
        } values; 
        struct UINibArchiveTableInfo { 
            unsigned int count; 
            unsigned int offset; 
        } classes; 
    }  header;
    long long  inlinedValueKey;
    struct UIKeyToKeyIDCache { 
        NSString *previousKey[64]; 
        void *previousKeyID[64]; 
        bool previousKeyExists[64]; 
        long long hashHits; 
        long long hashHotMisses; 
        long long hashColdMisses; 
    }  keyIDCache;
    UINibStringIDTable * keyIDTable;
    unsigned int * keyMasks;
    unsigned int * longObjectClassIDs;
    long long  lookupRounds;
    long long  maxPossibleLookupRounds;
    id * missingClasses;
    struct UINibDecoderObjectEntry { unsigned int x1; unsigned int x2; } * objects;
    id * objectsByObjectID;
    struct UINibDecoderRecursiveState { 
        long long objectID; 
        long long nextGenericKey; 
        unsigned int nextValueSearchIndex; 
        bool replaced; 
    }  recursiveState;
    long long  savedByKeyMask;
    Class  setClass;
    char * shortObjectClassIDs;
    struct UIKeyAndScopeToValueCache { 
        unsigned int previousScope; 
        unsigned int previousKey; 
        struct UINibDecoderValue {} *previousValue; 
    }  valueCache;
    void * valueData;
    unsigned long long  valueDataSize;
    char * valueTypes;
    struct UINibDecoderValue { unsigned int x1; unsigned int x2; } * values;
}

@property id delegate;
@property (getter=isReusable, nonatomic, readonly) bool reusable;
@property (nonatomic, readonly) long long uniqueIDForCurrentlyDecodingObject;

+ (id)unarchiveObjectWithData:(id)arg1;
+ (id)unarchiveObjectWithFile:(id)arg1;

- (bool)allowsKeyedCoding;
- (bool)containsValueForKey:(id)arg1;
- (void)dealloc;
- (bool)decodeArrayOfCGFloats:(double*)arg1 count:(long long)arg2 forKey:(id)arg3;
- (bool)decodeArrayOfDoubles:(double*)arg1 count:(long long)arg2 forKey:(id)arg3;
- (bool)decodeArrayOfFloats:(float*)arg1 count:(long long)arg2 forKey:(id)arg3;
- (void)decodeArrayOfObjCType:(const char *)arg1 count:(unsigned long long)arg2 at:(void*)arg3;
- (bool)decodeBoolForKey:(id)arg1;
- (const char *)decodeBytesForKey:(id)arg1 returnedLength:(unsigned long long*)arg2;
- (void*)decodeBytesWithReturnedLength:(unsigned long long*)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })decodeCGAffineTransformForKey:(id)arg1;
- (struct CGPoint { double x1; double x2; })decodeCGPointForKey:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })decodeCGRectForKey:(id)arg1;
- (struct CGSize { double x1; double x2; })decodeCGSizeForKey:(id)arg1;
- (id)decodeDataObject;
- (double)decodeDoubleForKey:(id)arg1;
- (float)decodeFloatForKey:(id)arg1;
- (int)decodeInt32ForKey:(id)arg1;
- (long long)decodeInt64ForKey:(id)arg1;
- (int)decodeIntForKey:(id)arg1;
- (long long)decodeIntegerForKey:(id)arg1;
- (id)decodeNXObject;
- (id)decodeObject;
- (id)decodeObjectForKey:(id)arg1;
- (id)decodePropertyList;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })decodeUIEdgeInsetsForKey:(id)arg1;
- (void)decodeValueOfObjCType:(const char *)arg1 at:(void*)arg2;
- (void)decodeValuesOfObjCTypes:(const char *)arg1;
- (id)delegate;
- (void)finishDecoding;
- (id)initForReadingWithData:(id)arg1;
- (id)initForReadingWithData:(id)arg1 error:(id*)arg2;
- (bool)isReusable;
- (id)nextGenericKey;
- (void)replaceObject:(id)arg1 withObject:(id)arg2;
- (void)setDelegate:(id)arg1;
- (unsigned int)systemVersion;
- (long long)uniqueIDForCurrentlyDecodingObject;
- (bool)validateAndIndexClasses:(const void*)arg1 length:(unsigned long long)arg2;
- (bool)validateAndIndexData:(id)arg1 error:(id*)arg2;
- (bool)validateAndIndexKeys:(const void*)arg1 length:(unsigned long long)arg2;
- (bool)validateAndIndexObjects:(const void*)arg1 length:(unsigned long long)arg2;
- (bool)validateAndIndexValues:(const void*)arg1 length:(unsigned long long)arg2;
- (long long)versionForClassName:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
