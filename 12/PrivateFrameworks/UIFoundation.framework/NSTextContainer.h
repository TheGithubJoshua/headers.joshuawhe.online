<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSTextContainer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UIFoundation.framework/NSTextContainer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation (553)
 */

@interface NSTextContainer : NSObject <NSCoding, NSTextLayoutOrientationProvider> {
    long long  _applicationFrameworkContext;
    NSDictionary * _attributesForExtraLineFragment;
    double  _cacheBoundsMaxY;
    double  _cacheBoundsMinY;
    struct CGPath { } * _cachedBoundingPath;
    struct __CFArray { } * _cachedBounds;
    struct __CFArray { } * _cachedClippingAttributes;
    NSArray * _exclusionPaths;
    NSLayoutManager * _layoutManager;
    long long  _layoutOrientation;
    double  _lineFragmentPadding;
    unsigned long long  _maximumLines;
    double  _minimumWidth;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    struct __tcFlags { 
        unsigned int widthTracksTextView : 1; 
        unsigned int heightTracksTextView : 1; 
        unsigned int observingFrameChanges : 1; 
        unsigned int lineBreakMode : 4; 
        unsigned int oldAPI : 1; 
        unsigned int _reserved : 8; 
    }  _tcFlags;
    UIView<NSTextContainerView> * _textView;
}

@property (nonatomic, copy) NSArray *exclusionPaths;
@property (nonatomic) bool heightTracksTextView;
@property (nonatomic) NSLayoutManager *layoutManager;
@property (nonatomic, readonly) long long layoutOrientation;
@property (nonatomic) long long lineBreakMode;
@property (nonatomic) double lineFragmentPadding;
@property (nonatomic) unsigned long long maximumNumberOfLines;
@property (getter=isSimpleRectangularTextContainer, nonatomic, readonly) bool simpleRectangularTextContainer;
@property (nonatomic) struct CGSize { double x1; double x2; } size;
@property (nonatomic) bool widthTracksTextView;

// Image: /System/Library/PrivateFrameworks/UIFoundation.framework/UIFoundation

+ (void)initialize;

- (void)_commonInit;
- (bool)_containerObservesTextViewFrameChanges;
- (void)_containerTextViewFrameChanged:(id)arg1;
- (void)_resizeAccordingToTextView:(id)arg1;
- (id)attributesForExtraLineFragment;
- (struct CGSize { double x1; double x2; })containerSize;
- (bool)containsPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)coordinateAccess:(id /* block */)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)exclusionPaths;
- (bool)heightTracksTextView;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithContainerSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)isSimpleRectangularTextContainer;
- (id)layoutManager;
- (long long)layoutOrientation;
- (long long)lineBreakMode;
- (double)lineFragmentPadding;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })lineFragmentRectForProposedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 atIndex:(unsigned long long)arg2 writingDirection:(long long)arg3 remainingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })lineFragmentRectForProposedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 remainingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (unsigned long long)maximumNumberOfLines;
- (double)minimumLineFragmentWidth;
- (void)replaceLayoutManager:(id)arg1;
- (void)setAttributesForExtraLineFragment:(id)arg1;
- (void)setContainerSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setExclusionPaths:(id)arg1;
- (void)setHeightTracksTextView:(bool)arg1;
- (void)setLayoutManager:(id)arg1;
- (void)setLayoutOrientation:(long long)arg1;
- (void)setLineBreakMode:(long long)arg1;
- (void)setLineFragmentPadding:(double)arg1;
- (void)setMaximumNumberOfLines:(unsigned long long)arg1;
- (void)setMinimumLineFragmentWidth:(double)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTextView:(id)arg1;
- (void)setWidthTracksTextView:(bool)arg1;
- (struct CGSize { double x1; double x2; })size;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })textContainerInsetsForView:(id)arg1;
- (struct NSEdgeInsets { double x1; double x2; double x3; double x4; })textContainerInsetsForView_iOS:(id)arg1;
- (struct CGPoint { double x1; double x2; })textContainerOrigin;
- (id)textView;
- (bool)widthTracksTextView;

// Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit

- (struct CGSize { double x1; double x2; })akContainerSize;
- (void)akSetContainerSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithContainerSize:(struct CGSize { double x1; double x2; })arg1;

// Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit

- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1 textAlignmentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; }*)arg2 isSingleLine:(bool*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
