<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKDMMCSItem.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudKitDaemon.framework/CKDMMCSItem.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon (736.235)
 */

@interface CKDMMCSItem : NSObject {
    CKAsset * _asset;
    NSDictionary * _assetChunkerOptions;
    NSData * _assetKey;
    CKDAssetZoneKey * _assetZoneKey;
    NSString * _authToken;
    NSData * _boundaryKey;
    unsigned int  _chunkCount;
    NSData * _clearAssetKey;
    NSFileHandle * _clientOpenedFileHandle;
    NSURL * _constructedAssetDownloadURL;
    unsigned long long  _constructedAssetEstimatedSize;
    NSURL * _contentBaseURL;
    NSNumber * _deviceID;
    CKAssetDownloadPreauthorization * _downloadPreauthorization;
    unsigned long long  _downloadTokenExpiration;
    NSError * _error;
    NSNumber * _fileID;
    unsigned long long  _fileSize;
    NSURL * _fileURL;
    bool  _finished;
    NSNumber * _generationID;
    bool  _hasOffset;
    bool  _hasSize;
    bool  _inMemoryDownloadLooksOkay;
    bool  _isAlreadyRegistered;
    bool  _isReaderReadFrom;
    bool  _isRereferencedAssetUpload;
    unsigned long long  _itemID;
    NSString * _itemTypeHint;
    NSNumber * _modTimeInSeconds;
    unsigned long long  _offset;
    NSString * _owner;
    CKPackage * _package;
    unsigned long long  _packageIndex;
    unsigned long long  _paddedFileSize;
    double  _progress;
    NSString * _putPackageSectionIdentifier;
    CKRecordID * _recordID;
    NSString * _recordKey;
    NSString * _recordType;
    NSData * _referenceSignature;
    NSString * _requestor;
    NSMutableArray * _sectionItems;
    bool  _shouldReadRawEncryptedData;
    NSData * _signature;
    bool  _temporary;
    NSString * _trackingUUID;
    NSString * _uploadReceipt;
    double  _uploadReceiptExpiration;
    unsigned long long  _uploadTokenExpiration;
    NSData * _wrappedAssetKey;
    CKDMMCSItemCommandWriter * _writer;
}

@property (nonatomic, retain) CKAsset *asset;
@property (nonatomic, retain) NSDictionary *assetChunkerOptions;
@property (nonatomic, retain) NSData *assetKey;
@property (nonatomic, retain) CKDAssetZoneKey *assetZoneKey;
@property (nonatomic, retain) NSString *authToken;
@property (nonatomic, retain) NSData *boundaryKey;
@property (nonatomic) unsigned int chunkCount;
@property (nonatomic, retain) NSData *clearAssetKey;
@property (nonatomic, retain) NSFileHandle *clientOpenedFileHandle;
@property (nonatomic, retain) NSURL *constructedAssetDownloadURL;
@property (nonatomic) unsigned long long constructedAssetEstimatedSize;
@property (nonatomic, retain) NSURL *contentBaseURL;
@property (nonatomic, retain) NSNumber *deviceID;
@property (nonatomic, retain) CKAssetDownloadPreauthorization *downloadPreauthorization;
@property (nonatomic) unsigned long long downloadTokenExpiration;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, retain) NSNumber *fileID;
@property (nonatomic) unsigned long long fileSize;
@property (nonatomic, retain) NSURL *fileURL;
@property (nonatomic) bool finished;
@property (nonatomic, retain) NSNumber *generationID;
@property (nonatomic) bool hasOffset;
@property (nonatomic) bool hasSize;
@property (nonatomic) bool inMemoryDownloadLooksOkay;
@property (nonatomic) bool isAlreadyRegistered;
@property (nonatomic) bool isReaderReadFrom;
@property (nonatomic) bool isRereferencedAssetUpload;
@property (nonatomic) unsigned long long itemID;
@property (nonatomic, retain) NSString *itemTypeHint;
@property (nonatomic, retain) NSNumber *modTimeInSeconds;
@property (nonatomic) unsigned long long offset;
@property (nonatomic, retain) NSString *owner;
@property (nonatomic, retain) CKPackage *package;
@property (nonatomic) unsigned long long packageIndex;
@property (nonatomic) unsigned long long paddedFileSize;
@property (nonatomic) double progress;
@property (nonatomic, retain) NSString *putPackageSectionIdentifier;
@property (nonatomic, retain) CKRecordID *recordID;
@property (nonatomic, retain) NSString *recordKey;
@property (nonatomic, retain) NSString *recordType;
@property (nonatomic, retain) NSData *referenceSignature;
@property (nonatomic, retain) NSString *requestor;
@property (nonatomic, retain) NSMutableArray *sectionItems;
@property (nonatomic) bool shouldReadRawEncryptedData;
@property (nonatomic, retain) NSData *signature;
@property (getter=isTemporary, nonatomic) bool temporary;
@property (nonatomic, retain) NSString *trackingUUID;
@property (nonatomic, retain) NSString *uploadReceipt;
@property (nonatomic) double uploadReceiptExpiration;
@property (nonatomic) unsigned long long uploadTokenExpiration;
@property (nonatomic, retain) NSData *wrappedAssetKey;
@property (nonatomic, retain) CKDMMCSItemCommandWriter *writer;

- (void).cxx_destruct;
- (id)CKPropertiesDescription;
- (id)_openInfo;
- (id)asset;
- (id)assetChunkerOptions;
- (id)assetKey;
- (id)assetZoneKey;
- (id)authToken;
- (id)boundaryKey;
- (bool)canBeRegistered;
- (unsigned int)chunkCount;
- (id)clearAssetKey;
- (void)clearFileSize;
- (id)clientOpenedFileHandle;
- (id)constructedAssetDownloadURL;
- (unsigned long long)constructedAssetEstimatedSize;
- (id)contentBaseURL;
- (id)description;
- (id)deviceID;
- (id)downloadPreauthorization;
- (unsigned long long)downloadTokenExpiration;
- (id)error;
- (id)fileID;
- (unsigned long long)fileSize;
- (id)fileURL;
- (bool)finished;
- (id)generationID;
- (id)getFileMetadataWithFileHandle:(id)arg1 error:(id*)arg2;
- (id)getFileMetadataWithProxy:(id)arg1 fileHandle:(id)arg2 error:(id*)arg3;
- (id)getFileSizeWithError:(id*)arg1;
- (id)getFileSizeWithProxy:(id)arg1 error:(id*)arg2;
- (bool)hasOffset;
- (bool)hasSize;
- (bool)inMemoryDownloadLooksOkay;
- (id)init;
- (id)initWithAsset:(id)arg1;
- (id)initWithPackage:(id)arg1;
- (bool)isAlreadyRegistered;
- (bool)isReaderReadFrom;
- (bool)isRereferencedAssetUpload;
- (bool)isTemporary;
- (unsigned long long)itemID;
- (id)itemTypeHint;
- (id)modTimeInSeconds;
- (unsigned long long)offset;
- (id)openWithError:(id*)arg1;
- (id)openWithProxy:(id)arg1 error:(id*)arg2;
- (id)owner;
- (id)package;
- (unsigned long long)packageIndex;
- (unsigned long long)paddedFileSize;
- (double)progress;
- (id)putPackageSectionIdentifier;
- (id)recordID;
- (id)recordKey;
- (id)recordType;
- (id)referenceSignature;
- (id)requestor;
- (id)sectionItems;
- (void)setAsset:(id)arg1;
- (void)setAssetChunkerOptions:(id)arg1;
- (void)setAssetKey:(id)arg1;
- (void)setAssetZoneKey:(id)arg1;
- (void)setAuthToken:(id)arg1;
- (void)setBoundaryKey:(id)arg1;
- (void)setChunkCount:(unsigned int)arg1;
- (void)setClearAssetKey:(id)arg1;
- (void)setClientOpenedFileHandle:(id)arg1;
- (void)setConstructedAssetDownloadURL:(id)arg1;
- (void)setConstructedAssetEstimatedSize:(unsigned long long)arg1;
- (void)setContentBaseURL:(id)arg1;
- (void)setDeviceID:(id)arg1;
- (void)setDownloadPreauthorization:(id)arg1;
- (void)setDownloadTokenExpiration:(unsigned long long)arg1;
- (void)setError:(id)arg1;
- (void)setFileID:(id)arg1;
- (void)setFileSize:(unsigned long long)arg1;
- (void)setFileURL:(id)arg1;
- (void)setFinished:(bool)arg1;
- (void)setGenerationID:(id)arg1;
- (void)setHasOffset:(bool)arg1;
- (void)setHasSize:(bool)arg1;
- (void)setInMemoryDownloadLooksOkay:(bool)arg1;
- (void)setIsAlreadyRegistered:(bool)arg1;
- (void)setIsReaderReadFrom:(bool)arg1;
- (void)setIsRereferencedAssetUpload:(bool)arg1;
- (void)setItemID:(unsigned long long)arg1;
- (void)setItemTypeHint:(id)arg1;
- (void)setModTimeInSeconds:(id)arg1;
- (void)setOffset:(unsigned long long)arg1;
- (void)setOwner:(id)arg1;
- (void)setPackage:(id)arg1;
- (void)setPackageIndex:(unsigned long long)arg1;
- (void)setPaddedFileSize:(unsigned long long)arg1;
- (void)setProgress:(double)arg1;
- (void)setPutPackageSectionIdentifier:(id)arg1;
- (void)setRecordID:(id)arg1;
- (void)setRecordKey:(id)arg1;
- (void)setRecordType:(id)arg1;
- (void)setReferenceSignature:(id)arg1;
- (void)setRequestor:(id)arg1;
- (void)setSectionItems:(id)arg1;
- (void)setShouldReadRawEncryptedData:(bool)arg1;
- (void)setSignature:(id)arg1;
- (void)setTemporary:(bool)arg1;
- (void)setTrackingUUID:(id)arg1;
- (void)setUploadReceipt:(id)arg1;
- (void)setUploadReceiptExpiration:(double)arg1;
- (void)setUploadTokenExpiration:(unsigned long long)arg1;
- (void)setWrappedAssetKey:(id)arg1;
- (void)setWriter:(id)arg1;
- (void)setupForGetChunkKeysWithAsset:(id)arg1;
- (bool)shouldReadRawEncryptedData;
- (id)signature;
- (id)trackingUUID;
- (id)uploadReceipt;
- (double)uploadReceiptExpiration;
- (unsigned long long)uploadTokenExpiration;
- (id)wrappedAssetKey;
- (id)writer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
