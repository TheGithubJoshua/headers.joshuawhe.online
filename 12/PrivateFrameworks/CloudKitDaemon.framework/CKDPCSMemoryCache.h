<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKDPCSMemoryCache.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudKitDaemon.framework/CKDPCSMemoryCache.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon (736.235)
 */

@interface CKDPCSMemoryCache : NSObject {
    NSObject<OS_dispatch_queue> * _accessQueue;
    NSMutableDictionary * _cacheEntries;
    unsigned long long  _maxEntries;
    unsigned long long  _memoryCacheDeleteCount;
    unsigned long long  _memoryCacheEvictCount;
    <NSObject> * _memoryCacheEvictNotificationObserver;
    unsigned long long  _memoryCacheHighwaterCount;
    unsigned long long  _memoryCacheHitCount;
    unsigned long long  _memoryCacheRequestCount;
    unsigned long long  _memoryCacheUpdateCount;
    NSObject<OS_dispatch_source> * _memoryNotificationSource;
    unsigned long long  _memoryStatus;
    bool  _memoryStatusChanged;
    double  _minAge;
    double  _oldestCacheEntry;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *accessQueue;
@property (nonatomic, retain) NSMutableDictionary *cacheEntries;
@property (nonatomic) unsigned long long maxEntries;
@property unsigned long long memoryCacheDeleteCount;
@property unsigned long long memoryCacheEvictCount;
@property (nonatomic, retain) <NSObject> *memoryCacheEvictNotificationObserver;
@property unsigned long long memoryCacheHighwaterCount;
@property unsigned long long memoryCacheHitCount;
@property unsigned long long memoryCacheRequestCount;
@property unsigned long long memoryCacheUpdateCount;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *memoryNotificationSource;
@property unsigned long long memoryStatus;
@property bool memoryStatusChanged;
@property (nonatomic) double minAge;
@property double oldestCacheEntry;

+ (id)globalEvictQueue;
+ (void)registerEvictionActivity;

- (void).cxx_destruct;
- (id)CKStatusReportArray;
- (unsigned long long)_cacheCount;
- (void)_lockedEvictEntriesFromCache;
- (id)accessQueue;
- (id)cacheEntries;
- (void)clearCache;
- (void)dealloc;
- (void)getPCSDataFromCacheForID:(id)arg1 databaseScope:(long long)arg2 withCompletionHandler:(id /* block */)arg3;
- (bool)hasStatusToReport;
- (id)init;
- (unsigned long long)maxEntries;
- (unsigned long long)memoryCacheDeleteCount;
- (unsigned long long)memoryCacheEvictCount;
- (id)memoryCacheEvictNotificationObserver;
- (unsigned long long)memoryCacheHighwaterCount;
- (unsigned long long)memoryCacheHitCount;
- (unsigned long long)memoryCacheRequestCount;
- (unsigned long long)memoryCacheUpdateCount;
- (id)memoryNotificationSource;
- (unsigned long long)memoryStatus;
- (bool)memoryStatusChanged;
- (double)minAge;
- (double)oldestCacheEntry;
- (void)runCacheEviction;
- (void)setAccessQueue:(id)arg1;
- (void)setCacheEntries:(id)arg1;
- (void)setMaxEntries:(unsigned long long)arg1;
- (void)setMemoryCacheDeleteCount:(unsigned long long)arg1;
- (void)setMemoryCacheEvictCount:(unsigned long long)arg1;
- (void)setMemoryCacheEvictNotificationObserver:(id)arg1;
- (void)setMemoryCacheHighwaterCount:(unsigned long long)arg1;
- (void)setMemoryCacheHitCount:(unsigned long long)arg1;
- (void)setMemoryCacheRequestCount:(unsigned long long)arg1;
- (void)setMemoryCacheUpdateCount:(unsigned long long)arg1;
- (void)setMemoryNotificationSource:(id)arg1;
- (void)setMemoryStatus:(unsigned long long)arg1;
- (void)setMemoryStatusChanged:(bool)arg1;
- (void)setMinAge:(double)arg1;
- (void)setOldestCacheEntry:(double)arg1;
- (void)setPCSData:(id)arg1 forItemID:(id)arg2 databaseScope:(long long)arg3 withCompletionHandler:(id /* block */)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
