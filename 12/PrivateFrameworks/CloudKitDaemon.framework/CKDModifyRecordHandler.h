<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKDModifyRecordHandler.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudKitDaemon.framework/CKDModifyRecordHandler.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon (736.235)
 */

@interface CKDModifyRecordHandler : NSObject {
    long long  _batchRank;
    bool  _didRollRecordPCSMasterKey;
    NSError * _error;
    NSString * _etag;
    bool  _isDelete;
    bool  _needsRefetch;
    CKDModifyRecordsOperation * _operation;
    NSObject<OS_dispatch_group> * _pcsGroup;
    CKDProgressTracker * _progressTracker;
    CKRecord * _record;
    CKRecordID * _recordID;
    CKDRecordPCSData * _recordPCSData;
    NSMutableDictionary * _rereferencedAssetArrayByFieldname;
    int  _saveAttempts;
    bool  _saveCompletionBlockCalled;
    CKRecord * _serverRecord;
    CKDSharePCSData * _sharePCSData;
    unsigned long long  _state;
}

@property (nonatomic) long long batchRank;
@property (nonatomic) bool didRollRecordPCSMasterKey;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, retain) NSString *etag;
@property (nonatomic) bool isDelete;
@property (nonatomic, readonly) bool isShare;
@property (nonatomic) bool needsRefetch;
@property (nonatomic) CKDModifyRecordsOperation *operation;
@property (nonatomic, readonly) CKDPCSCache *pcsCache;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *pcsGroup;
@property (nonatomic, readonly) CKDPCSManager *pcsManager;
@property (nonatomic, retain) CKDProgressTracker *progressTracker;
@property (nonatomic, retain) CKRecord *record;
@property (nonatomic, retain) CKRecordID *recordID;
@property (nonatomic, retain) CKDRecordPCSData *recordPCSData;
@property (nonatomic, retain) NSMutableDictionary *rereferencedAssetArrayByFieldname;
@property (nonatomic) int saveAttempts;
@property (nonatomic) bool saveCompletionBlockCalled;
@property (nonatomic, retain) CKRecord *serverRecord;
@property (nonatomic, retain) CKDSharePCSData *sharePCSData;
@property (nonatomic) unsigned long long state;

+ (id)_stringForState:(unsigned long long)arg1;
+ (id)modifyHandlerForDeleteWithRecordID:(id)arg1 operation:(id)arg2;
+ (id)modifyHandlerWithRecord:(id)arg1 operation:(id)arg2;

- (void).cxx_destruct;
- (id)_addParentPCS:(id)arg1 toRecordPCS:(id)arg2;
- (void)_addShareToPCSData:(id)arg1 withError:(id)arg2;
- (bool)_canSetPreviousProtectionEtag;
- (void)_clearRecordProtectionDataForRecord;
- (void)_continueCreateAndSavePCSWithZonePCS:(id)arg1 sharePCS:(id)arg2;
- (void)_createAndSavePCS;
- (bool)_createPublicSharingKeyWithError:(id*)arg1;
- (void)_fetchExistingPCSForProvidedPCSData:(id)arg1;
- (void)_fetchPCSData;
- (void)_fetchParentPCSForData:(id)arg1 withError:(id)arg2;
- (void)_fetchParentPCSForID:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)_fetchSharePCSForID:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)_handlePCSData:(id)arg1 withError:(id)arg2;
- (id)_initCommonWithOperation:(id)arg1;
- (id)_initForDeleteWithRecordID:(id)arg1 operation:(id)arg2;
- (id)_initWithRecord:(id)arg1 operation:(id)arg2;
- (void)_loadPCSData;
- (bool)_prepareAsset:(id)arg1 recordKey:(id)arg2 record:(id)arg3 error:(id*)arg4;
- (void)_pretendToWrapEncryptedDataForRecordValueStore:(id)arg1;
- (void)_reallyFetchPCSDataWithOptions:(unsigned long long)arg1;
- (void)_unwrapRecordPCSForParent;
- (void)_unwrapRecordPCSForZone;
- (void)_unwrapRecordPCSWithShareID:(id)arg1;
- (bool)_wrapEncryptedData:(id)arg1 withPCS:(struct _OpaquePCSShareProtection { }*)arg2 forField:(id)arg3 recordID:(id)arg4;
- (bool)_wrapEncryptedDataForRecordValueStore:(id)arg1 withPCS:(struct _OpaquePCSShareProtection { }*)arg2;
- (bool)_wrapEncryptedDataOnRecord:(id)arg1;
- (id)assetsWhichNeedRecordFetch;
- (long long)batchRank;
- (void)clearProtectionDataForRecord;
- (id)description;
- (bool)didRollRecordPCSMasterKey;
- (id)error;
- (id)etag;
- (void)fetchRecordPCSData;
- (void)fetchSharePCSData;
- (bool)isDelete;
- (bool)isShare;
- (bool)needsRefetch;
- (void)noteSideEffectRecordAbsent:(id)arg1;
- (void)noteSideEffectRecordPendingDelete:(id)arg1;
- (void)noteSideEffectRecordPendingModify:(id)arg1;
- (id)operation;
- (id)pcsCache;
- (id)pcsGroup;
- (id)pcsManager;
- (id)prepareAssetsForUploadWithError:(id*)arg1;
- (void)prepareForSave;
- (id)progressTracker;
- (id)record;
- (id)recordID;
- (id)recordPCSData;
- (id)rereferencedAssetArrayByFieldname;
- (int)saveAttempts;
- (bool)saveCompletionBlockCalled;
- (void)savePCSDataToCache;
- (id)serverRecord;
- (void)setBatchRank:(long long)arg1;
- (void)setDidRollRecordPCSMasterKey:(bool)arg1;
- (void)setError:(id)arg1;
- (void)setEtag:(id)arg1;
- (void)setIsDelete:(bool)arg1;
- (void)setNeedsRefetch:(bool)arg1;
- (void)setOperation:(id)arg1;
- (void)setPcsGroup:(id)arg1;
- (void)setProgressTracker:(id)arg1;
- (void)setRecord:(id)arg1;
- (void)setRecordID:(id)arg1;
- (void)setRecordPCSData:(id)arg1;
- (void)setRereferencedAssetArrayByFieldname:(id)arg1;
- (void)setSaveAttempts:(int)arg1;
- (void)setSaveCompletionBlockCalled:(bool)arg1;
- (void)setServerRecord:(id)arg1;
- (void)setSharePCSData:(id)arg1;
- (void)setState:(unsigned long long)arg1;
- (id)sharePCSData;
- (id)sideEffectRecordIDs;
- (unsigned long long)state;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
