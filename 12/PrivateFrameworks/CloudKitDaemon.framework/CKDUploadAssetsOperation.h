<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKDUploadAssetsOperation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudKitDaemon.framework/CKDUploadAssetsOperation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon (736.235)
 */

@interface CKDUploadAssetsOperation : CKDDatabaseOperation {
    CKDAssetRequestPlanner * _assetRequestPlanner;
    NSArray * _assetsToUpload;
    bool  _atomic;
    CKDCancelTokenGroup * _cancelTokens;
    unsigned long long  _maxPackageUploadsPerBatch;
    NSMutableArray * _openedPackages;
    NSMutableArray * _packageManifests;
    NSObject<OS_dispatch_queue> * _queue;
    id /* block */  _uploadCompletionBlock;
    id /* block */  _uploadPreparationBlock;
    id /* block */  _uploadProgressBlock;
    NSMapTable * _uploadTasksByPackages;
}

@property (nonatomic, retain) CKDAssetRequestPlanner *assetRequestPlanner;
@property (nonatomic, retain) NSArray *assetsToUpload;
@property (nonatomic) bool atomic;
@property (nonatomic, retain) CKDCancelTokenGroup *cancelTokens;
@property (nonatomic) unsigned long long maxPackageUploadsPerBatch;
@property (nonatomic, retain) NSMutableArray *openedPackages;
@property (nonatomic, retain) NSMutableArray *packageManifests;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, copy) id /* block */ uploadCompletionBlock;
@property (nonatomic, copy) id /* block */ uploadPreparationBlock;
@property (nonatomic, copy) id /* block */ uploadProgressBlock;
@property (nonatomic, retain) NSMapTable *uploadTasksByPackages;

+ (long long)isPredominatelyDownload;

- (void).cxx_destruct;
- (id)CKStatusReportLogGroups;
- (void)_closeAllPackages;
- (void)_closePackage:(id)arg1;
- (void)_collectMetricsFromCompletedItemGroup:(id)arg1;
- (void)_collectMetricsFromCompletedItemGroupSet:(id)arg1;
- (void)_collectMetricsFromMMCSOperationMetrics:(id)arg1;
- (bool)_didFetchUploadTokensForAssetTokenRequest:(id)arg1 error:(id)arg2 newError:(id*)arg3;
- (void)_didGetChunkKeysForAssetBatch:(id)arg1 error:(id)arg2;
- (void)_didMakeProgressForAsset:(id)arg1 progress:(double)arg2;
- (void)_didMakeProgressForMMCSItem:(id)arg1;
- (void)_didMakeProgressForMMCSSectionItem:(id)arg1 task:(id)arg2;
- (void)_didPrepareAsset:(id)arg1;
- (void)_didPrepareAssetBatch:(id)arg1 error:(id)arg2;
- (void)_didPutChunkKeysForAssetBatch:(id)arg1 error:(id)arg2;
- (void)_didUploadAsset:(id)arg1 error:(id)arg2;
- (void)_didUploadMMCSItem:(id)arg1 error:(id)arg2;
- (void)_didUploadMMCSItems:(id)arg1 error:(id)arg2;
- (void)_didUploadMMCSSectionItem:(id)arg1 task:(id)arg2 error:(id)arg3;
- (void)_didUploadMMCSSectionItems:(id)arg1 task:(id)arg2 error:(id)arg3;
- (void)_didUploadPackageWithTask:(id)arg1;
- (void)_failAllItemsInAssetBatch:(id)arg1 error:(id)arg2;
- (bool)_fetchAssetRereferenceRecords;
- (bool)_fetchUploadTokens;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_openPackage:(id)arg1;
- (bool)_planSectionsForPackage:(id)arg1 error:(id*)arg2;
- (bool)_prepareForUpload;
- (void)_removePackageManifests;
- (bool)_upload;
- (void)_uploadPackageSection:(id)arg1 task:(id)arg2 completionBlock:(id /* block */)arg3;
- (void)_uploadPackageSectionsWithEnumerator:(id)arg1 task:(id)arg2 completionBlock:(id /* block */)arg3;
- (void)_uploadPackageSectionsWithPendingTasks:(id)arg1 uploadingTasks:(id)arg2 completedTasks:(id)arg3;
- (void)_uploadPackageSectionsWithTask:(id)arg1 completionBlock:(id /* block */)arg2;
- (id)assetRequestPlanner;
- (id)assetsToUpload;
- (bool)atomic;
- (void)cancel;
- (id)cancelTokens;
- (void)finishWithError:(id)arg1;
- (id)initWithOperationInfo:(id)arg1 clientContext:(id)arg2;
- (void)main;
- (bool)makeStateTransition;
- (unsigned long long)maxPackageUploadsPerBatch;
- (id)nameForState:(unsigned long long)arg1;
- (id)openedPackages;
- (id)packageManifests;
- (id)queue;
- (void)setAssetRequestPlanner:(id)arg1;
- (void)setAssetsToUpload:(id)arg1;
- (void)setAtomic:(bool)arg1;
- (void)setCancelTokens:(id)arg1;
- (void)setMaxPackageUploadsPerBatch:(unsigned long long)arg1;
- (void)setOpenedPackages:(id)arg1;
- (void)setPackageManifests:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setUploadCompletionBlock:(id /* block */)arg1;
- (void)setUploadPreparationBlock:(id /* block */)arg1;
- (void)setUploadProgressBlock:(id /* block */)arg1;
- (void)setUploadTasksByPackages:(id)arg1;
- (id /* block */)uploadCompletionBlock;
- (id /* block */)uploadPreparationBlock;
- (id /* block */)uploadProgressBlock;
- (id)uploadTasksByPackages;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
