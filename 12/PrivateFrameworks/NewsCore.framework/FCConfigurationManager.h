<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCConfigurationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCConfigurationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCConfigurationManager : NSObject <FCCoreConfigurationManager, FCFeldsparIDProviderObserving, FCMagazinesConfigurationManager, FCNewsAppConfigurationManager> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    NSHashTable * _appConfigObservers;
    bool  _attemptedAppConfigFetch;
    NSDictionary * _cachedWidgetConfigurationDict;
    FCContextConfiguration * _contextConfiguration;
    NSHashTable * _coreConfigObservers;
    FCNewsAppConfig * _currentAppConfiguration;
    NSData * _currentMagazinesConfiguration;
    <FCFeldsparIDProvider> * _feldsparIDProvider;
    FCKeyValueStore * _localStore;
    RCConfigurationManager * _remoteConfigurationManager;
    FCAsyncSerialQueue * _requestSerialQueue;
    bool  _runningUnitTests;
    NSArray * _segmentSetIDs;
    bool  _shouldIgnoreCache;
    NSArray * _treatmentIDs;
    NSArray * _widgetChangeTags;
}

@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *accessQueue;
@property (nonatomic, retain) NSHashTable *appConfigObservers;
@property (nonatomic, readonly) <FCNewsAppConfiguration> *appConfiguration;
@property (nonatomic) bool attemptedAppConfigFetch;
@property (nonatomic, retain) NSDictionary *cachedWidgetConfigurationDict;
@property (nonatomic, readonly) <FCCoreConfiguration> *configuration;
@property (nonatomic, readonly) FCContextConfiguration *contextConfiguration;
@property (nonatomic, retain) NSHashTable *coreConfigObservers;
@property (nonatomic, copy) FCNewsAppConfig *currentAppConfiguration;
@property (nonatomic, copy) NSData *currentMagazinesConfiguration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSString *feldsparID;
@property (nonatomic, readonly) <FCFeldsparIDProvider> *feldsparIDProvider;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <FCNewsAppConfiguration><FCJSONEncodableObjectProviding> *jsonEncodableAppConfiguration;
@property (nonatomic, retain) FCKeyValueStore *localStore;
@property (nonatomic, readonly) NSData *magazinesConfigurationData;
@property (nonatomic, readonly) <FCNewsAppConfiguration> *possiblyUnfetchedAppConfiguration;
@property (nonatomic, readonly) RCConfigurationManager *remoteConfigurationManager;
@property (nonatomic, readonly) FCAsyncSerialQueue *requestSerialQueue;
@property (getter=isRunningUnitTests, nonatomic) bool runningUnitTests;
@property (nonatomic, copy) NSArray *segmentSetIDs;
@property (nonatomic) bool shouldIgnoreCache;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSArray *treatmentIDs;
@property (nonatomic, copy) NSArray *widgetChangeTags;

+ (id)internalOverrideAdditionalSegmentSetIDs;
+ (id)internalOverrideSegmentSetIDs;
+ (id)overrideAppConfigID;

- (void).cxx_destruct;
- (id)_changeTagsInRecords:(id)arg1;
- (id)_changeTagsInWidgetConfigurationDict:(id)arg1;
- (bool)_checkIfShouldIgnoreCache;
- (void)_configurationDidChangeSignificantConfigChange:(bool)arg1;
- (id)_configurationSettingsWithRequestInfos:(id)arg1 feldsparID:(id)arg2 storefrontID:(id)arg3 contextConfiguration:(id)arg4 useBackgroundRefreshRate:(bool)arg5;
- (unsigned long long)_configurationSourceForSourceName:(id)arg1;
- (id)_deserializeChangeTags:(id)arg1;
- (void)_fetchAppConfigurationIfNeededWithCompletionQueue:(id)arg1 shouldRefresh:(bool)arg2 completion:(id /* block */)arg3;
- (void)_fetchAppConfigurationWithConfigurationSettings:(id)arg1 completionQueue:(id)arg2 completion:(id /* block */)arg3;
- (void)_fetchAppWidgetConfigurationIfNeededUseBackgroundRefreshRate:(bool)arg1 completionQueue:(id)arg2 completion:(id /* block */)arg3;
- (void)_fetchMagazinesConfigurationIfNeededWithCompletionQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)_loadConfigurationFromStore:(id)arg1;
- (id)_mergeCachedDataWithWidgetConfigurationData:(id)arg1;
- (id)_mergeRecords:(id)arg1 withCachedRecords:(id)arg2;
- (id)_permanentURLForRequestKey:(id)arg1 storefrontID:(id)arg2;
- (id)_recordIDForRequestKey:(id)arg1 storefrontID:(id)arg2;
- (unsigned long long)_remoteConfigurationEnvironmentForContextIdentifier:(long long)arg1;
- (id)_requestInfoForRequestKey:(id)arg1 storefrontID:(id)arg2 additionalChangeTags:(id)arg3;
- (id)_responseKeyForRequestKey:(id)arg1;
- (id)_serializeChangeTags:(id)arg1;
- (id)_storefrontID;
- (id)accessQueue;
- (void)addAppConfigObserver:(id)arg1;
- (void)addObserver:(id)arg1;
- (id)appConfigObservers;
- (id)appConfiguration;
- (bool)attemptedAppConfigFetch;
- (id)cachedWidgetConfigurationDict;
- (id)configuration;
- (id)contextConfiguration;
- (id)coreConfigObservers;
- (id)currentAppConfiguration;
- (id)currentMagazinesConfiguration;
- (id)feldsparID;
- (id)feldsparIDProvider;
- (void)feldsparIDProviderDidChangeFeldsparID:(id)arg1;
- (void)fetchAppConfigurationIfNeededWithCompletion:(id /* block */)arg1;
- (void)fetchAppConfigurationIfNeededWithCompletionQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchAppWidgetConfigurationUseBackgroundRefreshRate:(bool)arg1 completion:(id /* block */)arg2;
- (void)fetchConfigurationIfNeededWithCompletion:(id /* block */)arg1;
- (void)fetchConfigurationIfNeededWithCompletionQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchMagazinesConfigurationIfNeededWithCompletionQueue:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchTrendingSearchesIfNeededWithCompletion:(id /* block */)arg1;
- (id)init;
- (id)initForTesting;
- (id)initWithContextConfiguration:(id)arg1 contentHostDirectoryFileURL:(id)arg2 feldsparIDProvider:(id)arg3;
- (bool)isRunningUnitTests;
- (id)jsonEncodableAppConfiguration;
- (id)localStore;
- (id)magazinesConfigurationData;
- (id)possiblyUnfetchedAppConfiguration;
- (void)refreshAppConfigurationIfNeededWithCompletionQueue:(id)arg1 refreshCompletion:(id /* block */)arg2;
- (id)remoteConfigurationManager;
- (void)removeAppConfigObserver:(id)arg1;
- (void)removeObserver:(id)arg1;
- (id)requestSerialQueue;
- (id)segmentSetIDs;
- (void)setAppConfigObservers:(id)arg1;
- (void)setAttemptedAppConfigFetch:(bool)arg1;
- (void)setCachedWidgetConfigurationDict:(id)arg1;
- (void)setCoreConfigObservers:(id)arg1;
- (void)setCurrentAppConfiguration:(id)arg1;
- (void)setCurrentMagazinesConfiguration:(id)arg1;
- (void)setLocalStore:(id)arg1;
- (void)setRunningUnitTests:(bool)arg1;
- (void)setSegmentSetIDs:(id)arg1;
- (void)setShouldIgnoreCache:(bool)arg1;
- (void)setTreatmentIDs:(id)arg1;
- (void)setWidgetChangeTags:(id)arg1;
- (bool)shouldIgnoreCache;
- (id)treatmentIDs;
- (id)widgetChangeTags;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
