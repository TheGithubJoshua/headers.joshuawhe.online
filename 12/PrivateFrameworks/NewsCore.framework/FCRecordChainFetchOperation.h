<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCRecordChainFetchOperation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCRecordChainFetchOperation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCRecordChainFetchOperation : FCOperation {
    NSMutableSet * _actualTopLevelRecordIDs;
    NSArray * _additionalRecordSources;
    NSDictionary * _cachePoliciesByRecordType;
    FCHeldRecords * _cachedRecords;
    id /* block */  _cachedRecordsLookupBlock;
    <FCContentContext> * _context;
    id /* block */  _dynamicCachePolicyBlock;
    FCEdgeCacheHint * _edgeCacheHint;
    NSDictionary * _linkKeysByRecordType;
    NSMutableSet * _missingCachedOnlyTopLevelRecordIDs;
    NSMutableArray * _mutableNetworkEvents;
    NSDictionary * _pbRecordTypesByRecordType;
    id /* block */  _recordChainCompletionHandler;
    NSArray * _recordSources;
    NSDictionary * _recordSourcesByRecordType;
    NSDictionary * _resultHeldRecordsByType;
    bool  _shouldBypassRecordSourcePersistence;
    bool  _shouldReturnErrorWhenSomeRecordsMissing;
    NSMutableSet * _skippedTopLevelRecordIDs;
    NSArray * _topLevelRecordIDs;
}

@property (nonatomic, retain) NSMutableSet *actualTopLevelRecordIDs;
@property (nonatomic, retain) NSArray *additionalRecordSources;
@property (nonatomic, copy) NSDictionary *cachePoliciesByRecordType;
@property (nonatomic, retain) FCHeldRecords *cachedRecords;
@property (nonatomic, copy) id /* block */ cachedRecordsLookupBlock;
@property (nonatomic, retain) <FCContentContext> *context;
@property (nonatomic, copy) id /* block */ dynamicCachePolicyBlock;
@property (nonatomic, copy) FCEdgeCacheHint *edgeCacheHint;
@property (nonatomic, copy) NSDictionary *linkKeysByRecordType;
@property (nonatomic, retain) NSMutableSet *missingCachedOnlyTopLevelRecordIDs;
@property (nonatomic, retain) NSMutableArray *mutableNetworkEvents;
@property (nonatomic, readonly, copy) NSArray *networkEvents;
@property (nonatomic, retain) NSDictionary *pbRecordTypesByRecordType;
@property (nonatomic, copy) id /* block */ recordChainCompletionHandler;
@property (nonatomic, retain) NSArray *recordSources;
@property (nonatomic, retain) NSDictionary *recordSourcesByRecordType;
@property (nonatomic, retain) NSDictionary *resultHeldRecordsByType;
@property (nonatomic) bool shouldBypassRecordSourcePersistence;
@property (nonatomic) bool shouldReturnErrorWhenSomeRecordsMissing;
@property (nonatomic, retain) NSMutableSet *skippedTopLevelRecordIDs;
@property (nonatomic, copy) NSArray *topLevelRecordIDs;

- (void).cxx_destruct;
- (void)_collectActualTopLevelRecordIDsFromRecordIDs:(id)arg1 visitedRecordIDs:(id)arg2;
- (void)_collectCachedRecordsFromRecordIDs:(id)arg1;
- (id)_errorForMissingRecordNames:(id)arg1;
- (void)_filterOrphansFromCachedRecords;
- (void)_finalizeResultFromCachedRecords;
- (void)_issueCloudRequestIfNeeded;
- (id)_partialFetchErrorForMissingRecordName:(id)arg1;
- (id)_partialUncachedErrorForMissingRecordName:(id)arg1;
- (int)_pbRecordTypeForRecordID:(id)arg1;
- (int)_pbRecordTypeForRecordType:(id)arg1;
- (id)_recordIDsMissingFromCachedRecords;
- (id)_recordSourceForRecordType:(id)arg1;
- (id)_recordTypeForRecordID:(id)arg1;
- (void)_walkRecordChainStartingWithRecordIDs:(id)arg1 visitedRecordIDs:(id)arg2 recordsLookupBlock:(id /* block */)arg3 visitorBlock:(id /* block */)arg4;
- (id)actualTopLevelRecordIDs;
- (id)additionalRecordSources;
- (id)cachePoliciesByRecordType;
- (id)cachedRecords;
- (id /* block */)cachedRecordsLookupBlock;
- (id)context;
- (id /* block */)dynamicCachePolicyBlock;
- (id)edgeCacheHint;
- (id)init;
- (id)linkKeysByRecordType;
- (id)missingCachedOnlyTopLevelRecordIDs;
- (id)mutableNetworkEvents;
- (id)networkEvents;
- (void)operationWillFinishWithError:(id)arg1;
- (id)pbRecordTypesByRecordType;
- (void)performOperation;
- (void)prepareOperation;
- (id /* block */)recordChainCompletionHandler;
- (id)recordSources;
- (id)recordSourcesByRecordType;
- (id)resultHeldRecordsByType;
- (void)setActualTopLevelRecordIDs:(id)arg1;
- (void)setAdditionalRecordSources:(id)arg1;
- (void)setCachePoliciesByRecordType:(id)arg1;
- (void)setCachedRecords:(id)arg1;
- (void)setCachedRecordsLookupBlock:(id /* block */)arg1;
- (void)setContext:(id)arg1;
- (void)setDynamicCachePolicyBlock:(id /* block */)arg1;
- (void)setEdgeCacheHint:(id)arg1;
- (void)setLinkKeysByRecordType:(id)arg1;
- (void)setMissingCachedOnlyTopLevelRecordIDs:(id)arg1;
- (void)setMutableNetworkEvents:(id)arg1;
- (void)setPbRecordTypesByRecordType:(id)arg1;
- (void)setRecordChainCompletionHandler:(id /* block */)arg1;
- (void)setRecordSources:(id)arg1;
- (void)setRecordSourcesByRecordType:(id)arg1;
- (void)setResultHeldRecordsByType:(id)arg1;
- (void)setShouldBypassRecordSourcePersistence:(bool)arg1;
- (void)setShouldReturnErrorWhenSomeRecordsMissing:(bool)arg1;
- (void)setSkippedTopLevelRecordIDs:(id)arg1;
- (void)setTopLevelRecordIDs:(id)arg1;
- (bool)shouldBypassRecordSourcePersistence;
- (bool)shouldReturnErrorWhenSomeRecordsMissing;
- (id)skippedTopLevelRecordIDs;
- (id)topLevelRecordIDs;
- (bool)validateOperation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
