<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCDeflatedHeadline.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCDeflatedHeadline.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCDeflatedHeadline : NSObject <FCHeadlineProviding> {
    NTPBFeedViewportHeadline * _pbHeadline;
    FCSharedStringIndex * _sharedStrings;
}

@property (nonatomic, readonly, copy) NSString *accessoryText;
@property (nonatomic, readonly, copy) NSArray *allowedStorefrontIDs;
@property (getter=isANF, nonatomic, readonly) bool anf;
@property (nonatomic, readonly, copy) NSString *articleID;
@property (nonatomic, readonly) NSString *articleRecirculationConfigJSON;
@property (nonatomic, readonly) <FCNativeAdProviding> *associatedAd;
@property (nonatomic, readonly) long long backendArticleVersion;
@property (nonatomic, readonly) NSData *backingArticleRecordData;
@property (nonatomic, readonly, copy) NSArray *blockedStorefrontIDs;
@property (getter=isBoundToContext, nonatomic, readonly) bool boundToContext;
@property (getter=isBundlePaid, nonatomic, readonly) bool bundlePaid;
@property (nonatomic, readonly, copy) NSString *callToActionText;
@property (nonatomic, readonly) bool canBePurchased;
@property (nonatomic, readonly, copy) NSString *clusterID;
@property (nonatomic, readonly) unsigned long long contentType;
@property (nonatomic, readonly, copy) NSURL *contentURL;
@property (nonatomic, readonly) FCCoverArt *coverArt;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isDeleted, nonatomic, readonly) bool deleted;
@property (readonly, copy) NSString *description;
@property (getter=isDisplayingAsNativeAd, nonatomic, readonly) bool displayAsNativeAd;
@property (nonatomic, readonly, copy) NSDate *displayDate;
@property (nonatomic, readonly, copy) FCHeadlineExperimentalTitleMetadata *experimentalTitleMetadata;
@property (getter=isExplicitContent, nonatomic, readonly) bool explicitContent;
@property (getter=isFeatureCandidate, nonatomic, readonly) bool featureCandidate;
@property (nonatomic, readonly) long long feedElementType;
@property (nonatomic, readonly) unsigned long long feedHalfLifeMilliseconds;
@property (nonatomic, readonly, copy) NSString *feedID;
@property (nonatomic, readonly) unsigned long long feedOrder;
@property (getter=isFromBlockedStorefront, nonatomic, readonly) bool fromBlockedStorefront;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLCohortList *globalCohorts;
@property (nonatomic, readonly) double globalUserFeedback;
@property (nonatomic, readonly) unsigned long long halfLife;
@property (nonatomic, readonly) bool hasGlobalUserFeedback;
@property (nonatomic, readonly) bool hasThumbnail;
@property (nonatomic, readonly) bool hasVideo;
@property (readonly) unsigned long long hash;
@property (getter=isHiddenFromAutoFavorites, nonatomic, readonly) bool hiddenFromAutoFavorites;
@property (getter=isHiddenFromFeeds, nonatomic, readonly) bool hiddenFromFeeds;
@property (nonatomic, readonly, copy) NSArray *iAdCategories;
@property (nonatomic, readonly, copy) NSArray *iAdKeywords;
@property (nonatomic, readonly, copy) NSArray *iAdSectionIDs;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (nonatomic, readonly) bool isBlockedExplicitContent;
@property (nonatomic, readonly) bool isDraft;
@property (nonatomic, readonly) bool isLocalDraft;
@property (nonatomic, readonly) bool isTopStory;
@property (getter=isIssueOnly, nonatomic, readonly) bool issueOnly;
@property (nonatomic, readonly, copy) NSString *itemID;
@property (nonatomic, readonly, copy) NSString *language;
@property (nonatomic, readonly, copy) NSDate *lastFetchedDate;
@property (nonatomic, readonly, copy) NSDate *lastModifiedDate;
@property (nonatomic, readonly, copy) NSArray *linkedArticleIDs;
@property (nonatomic, readonly, copy) NSArray *linkedIssueIDs;
@property (nonatomic, readonly, copy) NSString *localDraftPath;
@property (nonatomic, readonly, copy) FCIssue *masterIssue;
@property (nonatomic, readonly) long long minimumNewsVersion;
@property (nonatomic, readonly, copy) NSArray *moreFromPublisherArticleIDs;
@property (nonatomic, readonly) bool needsRapidUpdates;
@property (nonatomic, readonly) unsigned long long order;
@property (getter=isPaid, nonatomic, readonly) bool paid;
@property (nonatomic, readonly) NTPBFeedViewportHeadline *pbHeadline;
@property (getter=isPressRelease, nonatomic, readonly) bool pressRelease;
@property (nonatomic, readonly, copy) NSString *primaryAudience;
@property (nonatomic, readonly, copy) NSDate *publishDate;
@property (nonatomic, readonly) unsigned long long publishDateMilliseconds;
@property (nonatomic, readonly) long long publisherArticleVersion;
@property (nonatomic, readonly) COMAPPLEFELDSPARPROTOCOLLIVERPOOLCohortList *publisherCohorts;
@property (nonatomic, readonly, copy) NSString *publisherID;
@property (nonatomic, readonly) NSArray *publisherSpecifiedArticleIDs;
@property (nonatomic, readonly, copy) NSString *referencedArticleID;
@property (nonatomic, readonly, copy) NSArray *relatedArticleIDs;
@property (nonatomic, readonly) unsigned long long role;
@property (nonatomic, readonly) FCFeedPersonalizedItemScoreProfile *scoreProfile;
@property (nonatomic, readonly) FCSharedStringIndex *sharedStrings;
@property (nonatomic, readonly, copy) NSString *shortExcerpt;
@property (nonatomic, readonly) bool showBundleSoftPaywall;
@property (nonatomic, readonly) bool showMinimalChrome;
@property (nonatomic, readonly) bool showPublisherLogo;
@property (nonatomic, readonly) bool showSubscriptionRequiredText;
@property (nonatomic, readonly, copy) <FCChannelProviding> *sourceChannel;
@property (nonatomic, readonly, copy) NSString *sourceChannelID;
@property (nonatomic, readonly, copy) NSString *sourceFeedID;
@property (nonatomic, readonly, copy) NSString *sourceName;
@property (getter=isSponsored, nonatomic, readonly) bool sponsored;
@property (nonatomic, readonly, copy) NSString *sponsoredBy;
@property (nonatomic, readonly) <FCHeadlineStocksFields> *stocksFields;
@property (nonatomic, readonly) FCTopStoriesStyleConfiguration *storyStyle;
@property (nonatomic, readonly) unsigned long long storyType;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *surfacedByBinID;
@property (nonatomic, readonly, copy) NSString *surfacedByChannelID;
@property (nonatomic, readonly, copy) NSString *surfacedBySectionID;
@property (nonatomic, readonly, copy) NSSet *surfacedByTagIDs;
@property (nonatomic, readonly, copy) NSString *surfacedByTopicID;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnail;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } thumbnailFocalFrame;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnailHQ;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnailLQ;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnailMedium;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnailUltraHQ;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnailWidget;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnailWidgetHQ;
@property (nonatomic, readonly) FCHeadlineThumbnail *thumbnailWidgetLQ;
@property (nonatomic, readonly) double tileProminenceScore;
@property (nonatomic, readonly, copy) NSString *title;
@property (nonatomic, readonly, copy) NSString *titleCompact;
@property (nonatomic, readonly) unsigned long long topStoryType;
@property (nonatomic, readonly, copy) NSArray *topicIDs;
@property (nonatomic, readonly, copy) NSArray *topics;
@property (nonatomic, readonly) bool usesImageOnTopLayout;
@property (nonatomic, readonly, copy) NSString *versionIdentifier;
@property (nonatomic, readonly, copy) NSString *videoCallToActionTitle;
@property (nonatomic, readonly, copy) NSURL *videoCallToActionURL;
@property (nonatomic, readonly) double videoDuration;
@property (nonatomic, readonly) NSURL *videoURL;
@property (nonatomic, readonly) bool webEmbedsEnabled;

- (void).cxx_destruct;
- (id)accessoryText;
- (id)allowedStorefrontIDs;
- (unsigned long long)articleContentType;
- (id)articleID;
- (id)articleRecirculationConfigJSON;
- (id)associatedAd;
- (long long)backendArticleVersion;
- (id)blockedStorefrontIDs;
- (id)callToActionText;
- (bool)canBePurchased;
- (id)clusterID;
- (unsigned long long)contentType;
- (id)contentURL;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)coverArt;
- (id)description;
- (id)displayDate;
- (void)enumerateTopicCohortsWithBlock:(id /* block */)arg1;
- (id)experimentalTitleMetadata;
- (long long)feedElementType;
- (unsigned long long)feedHalfLifeMilliseconds;
- (id)feedID;
- (unsigned long long)feedOrder;
- (id)globalCohorts;
- (double)globalScore;
- (double)globalUserFeedback;
- (unsigned long long)halfLife;
- (bool)hasGlobalUserFeedback;
- (bool)hasThumbnail;
- (bool)hasVideo;
- (id)iAdCategories;
- (id)iAdKeywords;
- (id)iAdSectionIDs;
- (id)identifier;
- (id)initWithPBHeadline:(id)arg1 sharedStrings:(id)arg2;
- (bool)isANF;
- (bool)isBlockedExplicitContent;
- (bool)isBoundToContext;
- (bool)isBundlePaid;
- (bool)isDeleted;
- (bool)isDisplayingAsNativeAd;
- (bool)isDraft;
- (bool)isExplicitContent;
- (bool)isFeatureCandidate;
- (bool)isFromBlockedStorefront;
- (bool)isGap;
- (bool)isHiddenFromAutoFavorites;
- (bool)isHiddenFromFeeds;
- (bool)isPaid;
- (bool)isPressRelease;
- (bool)isSponsored;
- (bool)isTopStory;
- (id)itemID;
- (id)language;
- (id)lastFetchedDate;
- (id)lastModifiedDate;
- (id)localDraftPath;
- (long long)minimumNewsVersion;
- (id)moreFromPublisherArticleIDs;
- (bool)needsRapidUpdates;
- (unsigned long long)order;
- (id)pbHeadline;
- (id)primaryAudience;
- (id)publishDate;
- (unsigned long long)publishDateMilliseconds;
- (long long)publisherArticleVersion;
- (id)publisherCohorts;
- (id)publisherID;
- (id)publisherSpecifiedArticleIDs;
- (id)referencedArticleID;
- (id)relatedArticleIDs;
- (unsigned long long)role;
- (id)scoreProfile;
- (id)sharedStrings;
- (id)shortExcerpt;
- (bool)showMinimalChrome;
- (bool)showPublisherLogo;
- (bool)showSubscriptionRequiredText;
- (id)sourceChannel;
- (id)sourceChannelID;
- (id)sourceFeedID;
- (id)sourceName;
- (id)sponsoredBy;
- (id)storyStyle;
- (unsigned long long)storyType;
- (id)surfacedByBinID;
- (id)surfacedByChannelID;
- (id)surfacedBySectionID;
- (id)surfacedByTagIDs;
- (id)surfacedByTopicID;
- (id)thumbnail;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbnailFocalFrame;
- (id)thumbnailHQ;
- (id)thumbnailLQ;
- (id)thumbnailMedium;
- (id)thumbnailUltraHQ;
- (id)thumbnailWidget;
- (id)thumbnailWidgetHQ;
- (id)thumbnailWidgetHQTagged;
- (id)thumbnailWidgetLQ;
- (id)thumbnailWidgetLQTagged;
- (id)thumbnailWidgetTagged;
- (double)tileProminenceScore;
- (id)title;
- (id)titleCompact;
- (unsigned long long)topStoryType;
- (id)topicIDs;
- (id)topics;
- (bool)usesImageOnTopLayout;
- (id)versionIdentifier;
- (id)videoCallToActionTitle;
- (id)videoCallToActionURL;
- (double)videoDuration;
- (id)videoURL;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
