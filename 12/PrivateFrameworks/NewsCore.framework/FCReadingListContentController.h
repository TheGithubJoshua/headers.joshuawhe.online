<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCReadingListContentController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCReadingListContentController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCReadingListContentController : NSObject <FCKeyedOperationQueueDelegate, FCNetworkReachabilityObserving, FCOperationThrottlerDelegate> {
    NSObject<OS_dispatch_group> * _articleContentDownloadGroup;
    FCKeyedOperationQueue * _articleContentDownloadKeyQueue;
    NSArray * _articleIDsAvailableForOfflineReading;
    NSArray * _articleIDsOfInterest;
    FCCloudContext * _context;
    NSMutableSet * _fetchResults;
    bool  _hasBeenEnabled;
    NSDictionary * _holdInterestTokensByArticleID;
    NSMutableDictionary * _outstandingOperationsByArticleID;
    FCThreadSafeMutableSet * _readingListAvailableForOfflineReading;
    <FCOperationThrottler> * _updateHoldInterestTokensThrottler;
    <FCReadingListContentControllerObserving> * observer;
}

@property (nonatomic, retain) NSObject<OS_dispatch_group> *articleContentDownloadGroup;
@property (nonatomic, retain) FCKeyedOperationQueue *articleContentDownloadKeyQueue;
@property (nonatomic, copy) NSArray *articleIDsAvailableForOfflineReading;
@property (nonatomic, copy) NSArray *articleIDsOfInterest;
@property (nonatomic, retain) FCCloudContext *context;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableSet *fetchResults;
@property (nonatomic) bool hasBeenEnabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSDictionary *holdInterestTokensByArticleID;
@property (nonatomic) <FCReadingListContentControllerObserving> *observer;
@property (nonatomic, retain) NSMutableDictionary *outstandingOperationsByArticleID;
@property (nonatomic, retain) FCThreadSafeMutableSet *readingListAvailableForOfflineReading;
@property (nonatomic, readonly) NSSet *readingListForOfflineReading;
@property (readonly) Class superclass;
@property (nonatomic, retain) <FCOperationThrottler> *updateHoldInterestTokensThrottler;

- (void).cxx_destruct;
- (void)_fetchHoldInterestTokensForArticleIDs:(id)arg1 completion:(id /* block */)arg2;
- (void)_updateInterestsIfNeeded;
- (id)articleContentDownloadGroup;
- (id)articleContentDownloadKeyQueue;
- (id)articleIDsAvailableForOfflineReading;
- (id)articleIDsOfInterest;
- (id)context;
- (void)dealloc;
- (void)enableDownloadingForOfflineReading;
- (void)expressInterestInOfflineArticlesWithCompletionHandler:(id /* block */)arg1;
- (id)fetchResults;
- (bool)hasBeenEnabled;
- (id)holdInterestTokensByArticleID;
- (id)init;
- (id)initWithContext:(id)arg1;
- (bool)isArticleAvailableForOfflineReading:(id)arg1;
- (id)keyedOperationQueue:(id)arg1 performAsyncOperationForKey:(id)arg2 completion:(id /* block */)arg3;
- (void)networkReachabilityDidChange:(id)arg1;
- (void)notifyWhenFinishedDownloadingForOfflineReadingWithTimeout:(unsigned long long)arg1 block:(id /* block */)arg2;
- (id)observer;
- (void)operationThrottler:(id)arg1 performAsyncOperationWithCompletion:(id /* block */)arg2;
- (id)outstandingOperationsByArticleID;
- (id)readingListAvailableForOfflineReading;
- (id)readingListForOfflineReading;
- (void)setArticleContentDownloadGroup:(id)arg1;
- (void)setArticleContentDownloadKeyQueue:(id)arg1;
- (void)setArticleIDsAvailableForOfflineReading:(id)arg1;
- (void)setArticleIDsOfInterest:(id)arg1;
- (void)setContext:(id)arg1;
- (void)setFetchResults:(id)arg1;
- (void)setHasBeenEnabled:(bool)arg1;
- (void)setHoldInterestTokensByArticleID:(id)arg1;
- (void)setObserver:(id)arg1;
- (void)setOutstandingOperationsByArticleID:(id)arg1;
- (void)setReadingListAvailableForOfflineReading:(id)arg1;
- (void)setUpdateHoldInterestTokensThrottler:(id)arg1;
- (id)updateHoldInterestTokensThrottler;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
