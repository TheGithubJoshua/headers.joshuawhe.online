<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCAssetDownloadOperation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCAssetDownloadOperation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCAssetDownloadOperation : FCNetworkOperation {
    NSURL * _URL;
    NSDictionary * _additionalRequestHTTPHeaders;
    id /* block */  _dataDownloadCompletionHandler;
    long long  _downloadDestination;
    NSData * _downloadedData;
    NSURL * _downloadedFileURL;
    NSError * _error;
    id /* block */  _fileDownloadCompletionHandler;
    NSHTTPURLResponse * _httpResponse;
    NSString * _loggingKey;
    FCNetworkBehaviorMonitor * _networkBehaviorMonitor;
    long long  _networkEventType;
    NSString * _requestUUID;
    NSString * _responseMIMEType;
    unsigned long long  _responseSize;
    double  _taskStartTime;
    NSDictionary * _timingData;
}

@property (nonatomic, retain) NSURL *URL;
@property (nonatomic, copy) NSDictionary *additionalRequestHTTPHeaders;
@property (nonatomic, copy) id /* block */ dataDownloadCompletionHandler;
@property (nonatomic) long long downloadDestination;
@property (nonatomic, retain) NSData *downloadedData;
@property (nonatomic, retain) NSURL *downloadedFileURL;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, copy) id /* block */ fileDownloadCompletionHandler;
@property (nonatomic, retain) NSHTTPURLResponse *httpResponse;
@property (nonatomic, copy) NSString *loggingKey;
@property (nonatomic, retain) FCNetworkBehaviorMonitor *networkBehaviorMonitor;
@property (nonatomic) long long networkEventType;
@property (nonatomic, retain) NSString *requestUUID;
@property (nonatomic, retain) NSString *responseMIMEType;
@property (nonatomic) unsigned long long responseSize;
@property (nonatomic) double taskStartTime;
@property (nonatomic, retain) NSDictionary *timingData;

+ (id)sharedURLRequestScheduler;
+ (id)sharedURLSession;

- (void).cxx_destruct;
- (id)URL;
- (id)additionalRequestHTTPHeaders;
- (id /* block */)dataDownloadCompletionHandler;
- (long long)downloadDestination;
- (id)downloadedData;
- (id)downloadedFileURL;
- (id)error;
- (id /* block */)fileDownloadCompletionHandler;
- (id)httpResponse;
- (id)loggingKey;
- (id)networkBehaviorMonitor;
- (long long)networkEventType;
- (void)operationWillFinishWithError:(id)arg1;
- (void)performOperation;
- (id)requestUUID;
- (void)resetForRetry;
- (id)responseMIMEType;
- (unsigned long long)responseSize;
- (void)setAdditionalRequestHTTPHeaders:(id)arg1;
- (void)setDataDownloadCompletionHandler:(id /* block */)arg1;
- (void)setDownloadDestination:(long long)arg1;
- (void)setDownloadedData:(id)arg1;
- (void)setDownloadedFileURL:(id)arg1;
- (void)setError:(id)arg1;
- (void)setFileDownloadCompletionHandler:(id /* block */)arg1;
- (void)setHttpResponse:(id)arg1;
- (void)setLoggingKey:(id)arg1;
- (void)setNetworkBehaviorMonitor:(id)arg1;
- (void)setNetworkEventType:(long long)arg1;
- (void)setRequestUUID:(id)arg1;
- (void)setResponseMIMEType:(id)arg1;
- (void)setResponseSize:(unsigned long long)arg1;
- (void)setTaskStartTime:(double)arg1;
- (void)setTimingData:(id)arg1;
- (void)setURL:(id)arg1;
- (double)taskStartTime;
- (id)throttleGroup;
- (id)timingData;
- (bool)validateOperation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
