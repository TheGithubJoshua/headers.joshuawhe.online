<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCCommandQueue.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCCommandQueue.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCCommandQueue : NSObject <FCAppActivityObserving, FCCommandDelegate, FCNetworkReachabilityObserving> {
    FCCloudContext * _context;
    NSObject<OS_dispatch_source> * _cooldownTimer;
    <FCCommandQueueDelegate> * _delegate;
    bool  _executingCommand;
    NSObject<OS_dispatch_group> * _executingCommandsGroup;
    NSString * _name;
    NSMutableArray * _pendingCommands;
    NSObject<OS_dispatch_group> * _pendingCommandsGroup;
    FCKeyValueStore * _persistentStore;
    NSString * _persistentStorePath;
    bool  _suspended;
    long long  _urgency;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, retain) FCCloudContext *context;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *cooldownTimer;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <FCCommandQueueDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isExecutingCommand, nonatomic) bool executingCommand;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *executingCommandsGroup;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, retain) NSMutableArray *pendingCommands;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *pendingCommandsGroup;
@property (nonatomic, retain) FCKeyValueStore *persistentStore;
@property (nonatomic, copy) NSString *persistentStorePath;
@property (readonly) Class superclass;
@property (getter=isSuspended, nonatomic) bool suspended;
@property (nonatomic) long long urgency;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *workQueue;

+ (id)sharedWorkQueue;

- (void).cxx_destruct;
- (void)_addCommand:(id)arg1 saveCompletion:(id /* block */)arg2;
- (void)_applicationDidEnterBackground;
- (id)_decodeCommand:(id)arg1;
- (id)_deserializeCommandsFromStore:(id)arg1;
- (id)_encodeCommand:(id)arg1;
- (void)_executeNextCommand;
- (bool)_isEmpty;
- (void)_loadFromDisk;
- (long long)_qualityOfServiceForCommand:(id)arg1;
- (void)_savePendingCommandsWithCompletionHandler:(id /* block */)arg1;
- (void)_scheduleCommandExecution;
- (void)_serializeCommands:(id)arg1 toStore:(id)arg2;
- (void)activityObservingApplicationDidEnterBackground;
- (void)addCommand:(id)arg1;
- (void)addCommand:(id)arg1 saveCompletion:(id /* block */)arg2;
- (void)clear;
- (void)command:(id)arg1 didFinishWithStatus:(unsigned long long)arg2;
- (id)context;
- (id)cooldownTimer;
- (void)dealloc;
- (id)delegate;
- (id)executingCommandsGroup;
- (void)flushWithCompletionHandler:(id /* block */)arg1;
- (id)initWithContext:(id)arg1 persistentStorePath:(id)arg2 urgency:(long long)arg3 suspended:(bool)arg4 delegate:(id)arg5;
- (id)initWithContext:(id)arg1 storeDirectory:(id)arg2 storeFilename:(id)arg3 urgency:(long long)arg4 suspended:(bool)arg5 delegate:(id)arg6;
- (id)initWithContext:(id)arg1 urgency:(long long)arg2 suspended:(bool)arg3 delegate:(id)arg4;
- (bool)isExecutingCommand;
- (bool)isSuspended;
- (id)name;
- (void)networkReachabilityDidChange:(id)arg1;
- (id)pendingCommands;
- (id)pendingCommandsGroup;
- (id)persistentStore;
- (id)persistentStorePath;
- (void)resume;
- (void)setContext:(id)arg1;
- (void)setCooldownTimer:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExecutingCommand:(bool)arg1;
- (void)setExecutingCommandsGroup:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPendingCommands:(id)arg1;
- (void)setPendingCommandsGroup:(id)arg1;
- (void)setPersistentStore:(id)arg1;
- (void)setPersistentStorePath:(id)arg1;
- (void)setSuspended:(bool)arg1;
- (void)setUrgency:(long long)arg1;
- (void)setWorkQueue:(id)arg1;
- (long long)urgency;
- (id)workQueue;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
