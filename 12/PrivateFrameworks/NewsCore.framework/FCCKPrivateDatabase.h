<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCCKPrivateDatabase.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCCKPrivateDatabase.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCCKPrivateDatabase : NSObject {
    bool  _activelyStartingUp;
    bool  _beganInitialStartUp;
    NSArray * _containers;
    unsigned long long  _countOfFailedStartUpAttempts;
    CKDatabase * _database;
    CKDatabase * _databaseWithZoneWidePCS;
    NSDate * _dateOfLastFailedStartUpAttempt;
    <FCCKDatabaseEncryptionDelegate> * _encryptionDelegate;
    bool  _encryptionEnabled;
    NSData * _encryptionKey;
    bool  _finishedInitialStartUp;
    NSObject<OS_dispatch_group> * _initialStartUpGroup;
    NSArray * _middleware;
    FCNetworkBehaviorMonitor * _networkBehaviorMonitor;
    NSOperationQueue * _noPreflightOperationQueue;
    NSArray * _operationMiddleware;
    NSObject<OS_dispatch_queue> * _queue;
    NSArray * _recordMiddleware;
    NSArray * _remainingStartUpMiddleware;
    FCCKPrivateDatabaseSchema * _schema;
    CKDatabase * _secureDatabase;
    NSData * _secureEncryptionKey;
    NSOperationQueue * _serialOperationQueue;
    long long  _startUpResult;
    NSArray * _zonePruningAssistants;
    NSArray * _zoneRestorationSources;
}

@property (nonatomic) bool activelyStartingUp;
@property (nonatomic) bool beganInitialStartUp;
@property (nonatomic, retain) NSArray *containers;
@property (nonatomic) unsigned long long countOfFailedStartUpAttempts;
@property (nonatomic, readonly) CKDatabase *database;
@property (nonatomic, readonly) CKDatabase *databaseWithZoneWidePCS;
@property (nonatomic, retain) NSDate *dateOfLastFailedStartUpAttempt;
@property (nonatomic, readonly) <FCCKDatabaseEncryptionDelegate> *encryptionDelegate;
@property (getter=isEncryptionEnabled) bool encryptionEnabled;
@property (retain) NSData *encryptionKey;
@property (nonatomic) bool finishedInitialStartUp;
@property (nonatomic, retain) NSObject<OS_dispatch_group> *initialStartUpGroup;
@property (nonatomic, retain) NSArray *middleware;
@property (nonatomic, readonly) FCNetworkBehaviorMonitor *networkBehaviorMonitor;
@property (nonatomic, retain) NSOperationQueue *noPreflightOperationQueue;
@property (getter=isOnline, nonatomic, readonly) bool online;
@property (nonatomic, retain) NSArray *operationMiddleware;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSArray *recordMiddleware;
@property (nonatomic, retain) NSArray *remainingStartUpMiddleware;
@property (nonatomic, retain) FCCKPrivateDatabaseSchema *schema;
@property (nonatomic, readonly) CKDatabase *secureDatabase;
@property (retain) NSData *secureEncryptionKey;
@property (nonatomic, retain) NSOperationQueue *serialOperationQueue;
@property (nonatomic) long long startUpResult;
@property (getter=isStartingUp, nonatomic, readonly) bool startingUp;
@property (getter=isTemporarilySuspended, nonatomic, readonly) bool temporarilySuspended;
@property (nonatomic, readonly) NSArray *zoneIDsUsingSecureContainer;
@property (nonatomic, readonly) NSArray *zonePruningAssistants;
@property (nonatomic, readonly) NSArray *zoneRestorationSources;

+ (id /* block */)_privateDatabaseDeprecatedRecordTestBlock;
+ (id)privateDatabaseSchema;
+ (id)testingDatabase;
+ (id)testingDatabaseWithCKDatabase:(id)arg1 middleware:(id)arg2;
+ (id)testingDatabaseWithCKDatabase:(id)arg1 middleware:(id)arg2 schema:(id)arg3;
+ (id)testingDatabaseWithCKDatabase:(id)arg1 middleware:(id)arg2 schema:(id)arg3 encryptionDelegate:(id)arg4;

- (void).cxx_destruct;
- (void)_addCKOperation:(id)arg1 destination:(long long)arg2;
- (void)_beginInitialStartUpIfNeeded;
- (void)_cancelOperation:(id)arg1;
- (id)_clientRecordID:(id)arg1;
- (id)_clientToServerRecord:(id)arg1;
- (id)_clientToServerRecordZoneID:(id)arg1;
- (void)_continueStartUp;
- (bool)_doesOperationRequireSecureContainer:(id)arg1;
- (bool)_doesOperationRequireZoneWidePCS:(id)arg1;
- (void)_finishStartUpWithError:(id)arg1;
- (id)_mapObjects:(id)arg1 withRecordMiddlewareBlock:(id /* block */)arg2;
- (id)_mapRecordIDs:(id)arg1 toClient:(bool)arg2;
- (id)_mapRecordZoneIDs:(id)arg1 toClient:(bool)arg2;
- (id)_mapRecordZoneIDs:(id)arg1 toClient:(bool)arg2 expectUnknownZones:(bool)arg3;
- (id)_mapRecords:(id)arg1 toClient:(bool)arg2;
- (id)_mapZones:(id)arg1 toClient:(bool)arg2;
- (void)_possiblyRetryStartUp;
- (void)_possiblySimulateCrashForError:(id)arg1 message:(id)arg2;
- (void)_preflightOperation:(id)arg1;
- (void)_preflightRecordsInDatabaseChangesOperation:(id)arg1;
- (void)_preflightRecordsInFetchOperation:(id)arg1;
- (void)_preflightRecordsInModifyOperation:(id)arg1;
- (void)_preflightRecordsInRecordZoneChangesOperation:(id)arg1;
- (void)_preflightZoneIDsInModifyZonesOperation:(id)arg1;
- (void)_preflightZonesIDsInFetchZonesOperation:(id)arg1;
- (id)_queueForOperation:(id)arg1;
- (id)_recordZoneIDsFromOperation:(id)arg1;
- (id)_serverRecordID:(id)arg1;
- (id)_serverToClientError:(id)arg1;
- (id)_serverToClientRecord:(id)arg1;
- (id)_serverToClientRecordType:(id)arg1 withRecordID:(id)arg2;
- (id)_serverToClientRecordZoneID:(id)arg1;
- (id)_serverToClientRecordZoneID:(id)arg1 expectUnknownZones:(bool)arg2;
- (id)_serverToClientZone:(id)arg1;
- (void)_validateClientRecords:(id)arg1;
- (void)_validateClientZones:(id)arg1;
- (bool)activelyStartingUp;
- (void)addCKOperation:(id)arg1 destination:(long long)arg2;
- (void)addCKOperationNoPreflight:(id)arg1 destination:(long long)arg2;
- (void)addOperation:(id)arg1;
- (bool)beganInitialStartUp;
- (id)containers;
- (unsigned long long)countOfFailedStartUpAttempts;
- (id)database;
- (id)databaseWithZoneWidePCS;
- (id)dateOfLastFailedStartUpAttempt;
- (id)encryptionDelegate;
- (id)encryptionKey;
- (void)enumerateActiveDestinationsWithOptions:(long long)arg1 handler:(id /* block */)arg2;
- (void)enumeratePayloadsWithRecordIDs:(id)arg1 records:(id)arg2 zoneIDs:(id)arg3 zones:(id)arg4 options:(long long)arg5 payloadHandler:(id /* block */)arg6;
- (void)fetchAllDatabaseChangesWithServerChangeToken:(id)arg1 qualityOfService:(long long)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)fetchChangesForRecordZoneID:(id)arg1 changeToken:(id)arg2 desiredKeys:(id)arg3 fetchAllChanges:(bool)arg4 qualityOfService:(long long)arg5 completionHandler:(id /* block */)arg6;
- (void)fetchSecureDatabaseSupportedWithCompletionHandler:(id /* block */)arg1;
- (bool)finishedInitialStartUp;
- (id)initWithContainerIdentifier:(id)arg1 secureContainerIdentifier:(id)arg2 productionEnvironment:(bool)arg3 encryptionDelegate:(id)arg4 networkBehaviorMonitor:(id)arg5 privateDataSyncingEnabled:(bool)arg6;
- (id)initWithContainers:(id)arg1 database:(id)arg2 databaseWithZoneWidePCS:(id)arg3 secureDatabase:(id)arg4 schema:(id)arg5 middleware:(id)arg6 encryptionDelegate:(id)arg7 networkBehaviorMonitor:(id)arg8;
- (id)initialStartUpGroup;
- (bool)isEncryptionEnabled;
- (bool)isOnline;
- (bool)isStartingUp;
- (bool)isTemporarilySuspended;
- (id)middleware;
- (id)networkBehaviorMonitor;
- (id)noPreflightOperationQueue;
- (id)operationMiddleware;
- (id)pruningAssistantForZoneName:(id)arg1;
- (id)queue;
- (id)recordMiddleware;
- (void)registerZonePruningAssistants:(id)arg1;
- (void)registerZoneRestorationSources:(id)arg1;
- (id)remainingStartUpMiddleware;
- (void)reportEncryptionMigrationError:(id)arg1;
- (void)reportFatalStartUpError:(id)arg1;
- (void)reportPostMigrationCleanupError:(id)arg1;
- (void)reportRecoverableStartUpError:(id)arg1;
- (id)schema;
- (id)secureDatabase;
- (id)secureEncryptionKey;
- (id)serialOperationQueue;
- (void)setActivelyStartingUp:(bool)arg1;
- (void)setBeganInitialStartUp:(bool)arg1;
- (void)setContainers:(id)arg1;
- (void)setCountOfFailedStartUpAttempts:(unsigned long long)arg1;
- (void)setDateOfLastFailedStartUpAttempt:(id)arg1;
- (void)setEncryptionEnabled:(bool)arg1;
- (void)setEncryptionKey:(id)arg1;
- (void)setFinishedInitialStartUp:(bool)arg1;
- (void)setInitialStartUpGroup:(id)arg1;
- (void)setMiddleware:(id)arg1;
- (void)setNoPreflightOperationQueue:(id)arg1;
- (void)setOperationMiddleware:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setRecordMiddleware:(id)arg1;
- (void)setRemainingStartUpMiddleware:(id)arg1;
- (void)setSchema:(id)arg1;
- (void)setSecureEncryptionKey:(id)arg1;
- (void)setSerialOperationQueue:(id)arg1;
- (void)setStartUpResult:(long long)arg1;
- (long long)startUpResult;
- (void)t_performStartUpWithCompletion:(id /* block */)arg1;
- (void)takeDatabaseOfflineDueToError:(id)arg1;
- (id)zoneIDsUsingSecureContainer;
- (id)zonePruningAssistants;
- (id)zoneRestorationSources;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
