<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCPurchaseController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCPurchaseController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCPurchaseController : NSObject <FCAppActivityObserving, FCPurchaseProviderType, FCUserInfoObserving, NSURLSessionDelegate> {
    FCCloudContext * _cloudContext;
    FCAsyncSerialQueue * _entitlementQueue;
    <FCEntitlementsOverrideProviderType> * _entitlementsOverrideProvider;
    NSDate * _lastEntitlementCheckTime;
    FCKeyValueStore * _localStore;
    FCPurchaseLookUpEntriesManager * _purchaseLookupEntriesManager;
    NSSet * _purchasesDiscoveredTagIDs;
    NSDictionary * _readOnlyPurchaseLookUpEntriesByTagID;
    NSObject<OS_dispatch_queue> * _readWriteQueue;
    NSURLSession * _session;
    NSMutableDictionary * _webAccessEntriesByTagID;
}

@property (nonatomic, readonly) NSSet *allPurchasedTagIDs;
@property (nonatomic, readonly) NSSet *allTagIDs;
@property (nonatomic, retain) FCCloudContext *cloudContext;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) FCAsyncSerialQueue *entitlementQueue;
@property (nonatomic, retain) <FCEntitlementsOverrideProviderType> *entitlementsOverrideProvider;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) NSDate *lastEntitlementCheckTime;
@property (nonatomic, readonly) NSString *lastSignedInItunesAccountName;
@property (nonatomic, retain) FCKeyValueStore *localStore;
@property (nonatomic, readonly) NSDictionary *purchaseLookUpEntriesByTagID;
@property (nonatomic, retain) FCPurchaseLookUpEntriesManager *purchaseLookupEntriesManager;
@property (nonatomic, readonly, copy) NSSet *purchasedTagIDs;
@property (nonatomic, retain) NSSet *purchasesDiscoveredTagIDs;
@property (copy) NSDictionary *readOnlyPurchaseLookUpEntriesByTagID;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *readWriteQueue;
@property (nonatomic, retain) NSURLSession *session;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMutableDictionary *webAccessEntriesByTagID;

// Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore

- (void).cxx_destruct;
- (id)_allPurchasedTagIDs;
- (void)_applicationDidEnterBackground;
- (void)_entitlementCheckWithIgnoreCache:(bool)arg1 callbackQueue:(id)arg2 completion:(id /* block */)arg3;
- (void)_entitlementCheckWithIgnoreCache:(bool)arg1 restorableBundleIAPs:(id)arg2 callbackQueue:(id)arg3 completion:(id /* block */)arg4 serialCompletion:(id /* block */)arg5;
- (void)_initializeAppStorePurchaseDiscoveredList;
- (void)_removeFromPurchasedChannelsListWithTagIDs:(id)arg1;
- (id)_webAccessEntryIDForTagID:(id)arg1;
- (void)activityObservingApplicationDidEnterBackground;
- (void)addAppStoreDiscoveredChannelsToFavorites:(id)arg1;
- (void)addAppStorePurchaseWithTagID:(id)arg1 purchaseID:(id)arg2;
- (void)addExpiredPurchaseWithTagID:(id)arg1 purchaseID:(id)arg2 purchaseType:(unsigned long long)arg3 isNewsAppPurchase:(bool)arg4 expirationDate:(id)arg5;
- (void)addPurchaseWithTagID:(id)arg1 purchaseID:(id)arg2 purchaseType:(unsigned long long)arg3 isNewsAppPurchase:(bool)arg4;
- (void)addToPurchasedChannelsListWithTagID:(id)arg1 purchaseID:(id)arg2 purchaseType:(unsigned long long)arg3 purchaseValidationState:(unsigned long long)arg4 isNewsAppPurchase:(bool)arg5 lastVerificationTime:(id)arg6;
- (void)addToWebAccessEntryListWithEntry:(id)arg1;
- (void)addToWebAccessOptedInListWithTagID:(id)arg1;
- (id)allAppStorePurchasedTagIDs;
- (id)allAppStorePurchasedTagIDsByPurchaseID;
- (id)allPurchasedTagIDs;
- (id)allTagIDs;
- (bool)atleastOneValidAppStorePurchase;
- (void)cleanupExpiredPurchaseLookupEntriesIfNeeded;
- (void)clearAllAppStorePurchases;
- (void)clearAllPurchases;
- (id)cloudContext;
- (void)dealloc;
- (id)entitlementQueue;
- (id)entitlementsOverrideProvider;
- (id)expiredPurchaseChannelIDs;
- (void)feldsparEntitlementCheckWithCallbackQueue:(id)arg1 ignoreCache:(bool)arg2 completion:(id /* block */)arg3;
- (void)fetchChannelIDsForPurchaseIDs:(id)arg1 callbackQueue:(id)arg2 completion:(id /* block */)arg3;
- (id)fetchOperationForPurchaseLookupWithPurchaseIDs:(id)arg1;
- (void)forceExpireAllSubscriptionsIfNeeded;
- (void)handleAccessTokenChangeWithTagID:(id)arg1 userInitiated:(bool)arg2;
- (void)handleAccessTokenVerificationFailureWithTagID:(id)arg1;
- (void)handleAccessTokenVerificationSuccessWithTagID:(id)arg1 subscribed:(bool)arg2 accessToken:(id)arg3;
- (void)handleWebAcccessFailureWithTagID:(id)arg1 purchaseID:(id)arg2 email:(id)arg3 purchaseReceipt:(id)arg4;
- (void)handleWebAccessSuccessWithTagID:(id)arg1;
- (bool)hasPurchaseTypeAppStore;
- (id)init;
- (id)initWithCloudContext:(id)arg1;
- (id)initWithCloudContext:(id)arg1 keyValueStoreOption:(unsigned long long)arg2;
- (bool)isPaidSubscriber;
- (bool)isPaidSubscriberFromAppStore;
- (bool)isPaidSubscriberFromNews;
- (bool)isPaidSubscriberFromWeb;
- (id)lastEntitlementCheckTime;
- (id)lastSignedInItunesAccountDSID;
- (id)lastSignedInItunesAccountName;
- (void)loadLocalCachesFromStore;
- (id)localStore;
- (void)notifyPurchaseAddedWithTagIDs:(id)arg1;
- (void)notifyPurchaseListChanged;
- (void)notifyPurchaseRemovedWithTagIDs:(id)arg1;
- (void)notifyPurchasesDiscoveredWithTagIDs:(id)arg1;
- (void)notifyWebAccessOptedInListChanged;
- (void)performEntitlementCheckWithIgnoreCache:(bool)arg1 callbackQueue:(id)arg2 completion:(id /* block */)arg3;
- (void)performHTTPRequestForVerifyAccessTokenWithURL:(id)arg1 accessToken:(id)arg2 consumedArticleCount:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (id)purchaseLookUpEntriesByTagID;
- (id)purchaseLookUpEntryForTagID:(id)arg1;
- (id)purchaseLookupEntriesManager;
- (id)purchasedTagIDs;
- (id)purchasesDiscoveredTagIDs;
- (id)readOnlyPurchaseLookUpEntriesByTagID;
- (id)readWriteQueue;
- (void)removeFromPurchasedChannelsListWithTagIDs:(id)arg1;
- (void)removeFromPurchasesDiscoveredList:(id)arg1 completion:(id /* block */)arg2;
- (void)removeFromWebAccessOptedInListWithTagID:(id)arg1;
- (void)removeWebPurchaseForTagID:(id)arg1 userInitiated:(bool)arg2;
- (void)renewalNoticeShownForPurchasedChannelsListWithTagIDs:(id)arg1;
- (void)saveToDisk;
- (id)session;
- (void)setCloudContext:(id)arg1;
- (void)setEntitlementQueue:(id)arg1;
- (void)setEntitlementsOverrideProvider:(id)arg1;
- (void)setLastEntitlementCheckTime:(id)arg1;
- (void)setLastSignedInItunesAccountDSIDWithDSID:(id)arg1;
- (void)setLastSignedInItunesAccountNameWithName:(id)arg1;
- (void)setLocalStore:(id)arg1;
- (void)setPurchaseLookupEntriesManager:(id)arg1;
- (void)setPurchasesDiscoveredTagIDs:(id)arg1;
- (void)setReadOnlyPurchaseLookUpEntriesByTagID:(id)arg1;
- (void)setReadWriteQueue:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setWebAccessEntriesByTagID:(id)arg1;
- (void)shouldShowSignedInWithDifferentiTunesAccountAlertWithiTunesAccountName:(id)arg1 iTunesAccountDSID:(id)arg2 isUserSignedIntoiTunes:(bool)arg3 isBundleSubscriber:(bool)arg4 completion:(id /* block */)arg5;
- (void)shouldShowiTunesSignedOutAlertWithiTunesAccountName:(id)arg1 iTunesAccountDSID:(id)arg2 isUserSignedIntoiTunes:(bool)arg3 isBundleSubscriber:(bool)arg4 completion:(id /* block */)arg5;
- (void)silentRemoveFromPurchasedChannelsListWithTagIDs:(id)arg1;
- (void)submitWebAccessWithTagID:(id)arg1 purchaseID:(id)arg2 emailAddress:(id)arg3 purchaseReceipt:(id)arg4 serialCompletion:(id /* block */)arg5 completion:(id /* block */)arg6;
- (id)subscriptionNotSupportedChannelIDs;
- (void)updatePurchaseEntryToExpired:(id)arg1;
- (void)updatePurchaseEntryToExpired:(id)arg1 hasShownRenewalNotice:(bool)arg2;
- (void)updatePurchaseEntryToExpiredForTagIDs:(id)arg1;
- (void)updatePurchaseEntryToSubcsriptionNotSupported:(id)arg1;
- (void)updatePurchaseEntryToValid:(id)arg1 purchaseType:(unsigned long long)arg2;
- (void)userInfo:(id)arg1 didChangeAccessTokenForTagID:(id)arg2;
- (void)userInfo:(id)arg1 didRemoveAccessTokenForTagID:(id)arg2 userInitiated:(bool)arg3;
- (void)verifyAccessTokenWithTagID:(id)arg1 accessToken:(id)arg2 consumedArticleCount:(unsigned long long)arg3 serialCompletion:(id /* block */)arg4 callbackQueue:(id)arg5 completion:(id /* block */)arg6;
- (id)webAccessEntriesByTagID;
- (id)webAccessEntryForTagID:(id)arg1;
- (id)webAccessOptedInTagIDs;

// Image: /System/Library/PrivateFrameworks/Stocks/StocksCore.framework/StocksCore

- (void)stocks_syncEntitlementWithCallbackQueue:(id)arg1 ignoreCache:(bool)arg2 completion:(id /* block */)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
