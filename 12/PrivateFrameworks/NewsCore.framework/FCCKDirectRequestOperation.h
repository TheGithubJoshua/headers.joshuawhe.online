<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FCCKDirectRequestOperation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsCore.framework/FCCKDirectRequestOperation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore (2166)
 */

@interface FCCKDirectRequestOperation : FCOperation {
    NSDictionary * _additionalRequestHTTPHeaders;
    NSString * _containerName;
    id /* block */  _criticalNodeFailureTest;
    FCEdgeCacheHint * _edgeCacheHint;
    FCNetworkEvent * _networkEvent;
    long long  _networkEventType;
    bool  _operationFailsOnRequestFailure;
    bool  _production;
    id /* block */  _requestCompletionHandler;
    long long  _requestType;
    NSString * _requestUUID;
    NSArray * _requests;
    NSError * _resultError;
    NSMutableDictionary * _resultErrorsByRequestID;
    NSMutableArray * _resultResponses;
    double  _timeoutIntervalForRequest;
}

@property (nonatomic, copy) NSDictionary *additionalRequestHTTPHeaders;
@property (nonatomic, copy) NSString *containerName;
@property (nonatomic, copy) id /* block */ criticalNodeFailureTest;
@property (nonatomic, copy) FCEdgeCacheHint *edgeCacheHint;
@property (nonatomic, retain) FCNetworkEvent *networkEvent;
@property (nonatomic) long long networkEventType;
@property (nonatomic) bool operationFailsOnRequestFailure;
@property (nonatomic) bool production;
@property (nonatomic, copy) id /* block */ requestCompletionHandler;
@property (nonatomic) long long requestType;
@property (nonatomic, copy) NSString *requestUUID;
@property (nonatomic, copy) NSArray *requests;
@property (nonatomic, retain) NSError *resultError;
@property (nonatomic, retain) NSMutableDictionary *resultErrorsByRequestID;
@property (nonatomic, retain) NSMutableArray *resultResponses;
@property (nonatomic) double timeoutIntervalForRequest;

+ (id)URLSession;
+ (bool)_enableDebugLogLevel;
+ (id)_headersImpactingEdgeCache;

- (void).cxx_destruct;
- (id)_bundleIDToReport;
- (id)_errorFromHTTPResponse:(id)arg1;
- (id)_errorFromOperationResultError:(id)arg1;
- (id)_mmeClientInfo;
- (void)_processResponseData:(id)arg1;
- (id)_requestBodyData;
- (id)_requestHeadersWithBaseURL:(id)arg1;
- (id)additionalRequestHTTPHeaders;
- (id)containerName;
- (id /* block */)criticalNodeFailureTest;
- (id)edgeCacheHint;
- (id)generateHTTPRequest;
- (id)init;
- (id)networkEvent;
- (long long)networkEventType;
- (bool)operationFailsOnRequestFailure;
- (void)operationWillFinishWithError:(id)arg1;
- (void)performOperation;
- (void)prepareOperation;
- (bool)production;
- (id /* block */)requestCompletionHandler;
- (long long)requestType;
- (id)requestUUID;
- (id)requests;
- (id)resultError;
- (id)resultErrorsByRequestID;
- (id)resultResponses;
- (void)setAdditionalRequestHTTPHeaders:(id)arg1;
- (void)setContainerName:(id)arg1;
- (void)setCriticalNodeFailureTest:(id /* block */)arg1;
- (void)setEdgeCacheHint:(id)arg1;
- (void)setNetworkEvent:(id)arg1;
- (void)setNetworkEventType:(long long)arg1;
- (void)setOperationFailsOnRequestFailure:(bool)arg1;
- (void)setProduction:(bool)arg1;
- (void)setRequestCompletionHandler:(id /* block */)arg1;
- (void)setRequestType:(long long)arg1;
- (void)setRequestUUID:(id)arg1;
- (void)setRequests:(id)arg1;
- (void)setResultError:(id)arg1;
- (void)setResultErrorsByRequestID:(id)arg1;
- (void)setResultResponses:(id)arg1;
- (void)setTimeoutIntervalForRequest:(double)arg1;
- (double)timeoutIntervalForRequest;
- (bool)validateOperation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
