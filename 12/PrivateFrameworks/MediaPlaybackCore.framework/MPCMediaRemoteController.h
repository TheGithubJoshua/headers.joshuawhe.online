<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPCMediaRemoteController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MediaPlaybackCore.framework/MPCMediaRemoteController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore (1)
 */

@interface MPCMediaRemoteController : NSObject <MSVLRUDictionaryDelegate> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    NSObject<OS_dispatch_queue> * _calloutQueue;
    MSVLRUDictionary * _contentItemArtwork;
    NSMutableDictionary * _contentItemArtworkFutures;
    NSMutableDictionary * _contentItemArtworkIdentifiers;
    NSMutableDictionary * _contentItemChanges;
    NSMapTable * _contentItemFutures;
    NSMutableArray * _contentItemIDs;
    NSMapTable * _contentItemIDsFutures;
    MSVLRUDictionary * _contentItems;
    id  _invalidationToken;
    struct _MSVSignedRange { 
        long long location; 
        long long length; 
    }  _loadedContentItemsRange;
    <MPArtworkDataSource> * _mediaRemoteArtworkDataSource;
    NSMutableDictionary * _optimisticStateContentItems;
    long long  _playbackStateCacheState;
    MPCFuture * _playbackStateFuture;
    long long  _playingIdentifierCacheState;
    NSString * _playingItemIdentifier;
    MPCFuture * _playingItemIdentifierFuture;
    NSString * _queueIdentifier;
    long long  _queueIdentifierCacheState;
    MPCFuture * _queueIdentifierFuture;
    struct _MSVSignedRange { 
        long long location; 
        long long length; 
    }  _requestedContentItemsRange;
    MPCPlayerPath * _resolvedPlayerPath;
    <MPCSupportedCommands> * _supportedCommands;
    long long  _supportedCommandsCacheState;
    MPCFuture * _supportedCommandsFuture;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *accessQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *calloutQueue;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) id invalidationToken;
@property (nonatomic, readonly) <MPArtworkDataSource> *mediaRemoteArtworkDataSource;
@property (nonatomic, readonly) MPCFuture *playbackState;
@property (nonatomic, readonly) long long playbackStateCacheState;
@property (nonatomic, readonly) MPCFuture *playingIdentifier;
@property (nonatomic, readonly) long long playingIdentifierCacheState;
@property (nonatomic, readonly) MPCFuture *queueIdentifier;
@property (nonatomic, readonly) long long queueIdentifierCacheState;
@property (nonatomic, readonly) <MPArtworkDataSource> *remotePlayerArtworkDataSource;
@property (nonatomic, retain) MPCPlayerPath *resolvedPlayerPath;
@property (readonly) Class superclass;
@property (nonatomic, readonly) MPCFuture *supportedCommands;
@property (nonatomic, readonly) long long supportedCommandsCacheState;

+ (void)_sendCommand:(unsigned int)arg1 options:(id)arg2 appOptions:(unsigned int)arg3 toPlayerPath:(id)arg4 completion:(id /* block */)arg5;
+ (void)_sendLocalCommand:(unsigned int)arg1 playbackIntent:(id)arg2 options:(id)arg3 toPlayerPath:(id)arg4 completion:(id /* block */)arg5;
+ (void)_sendRemoteCommand:(unsigned int)arg1 playbackIntent:(id)arg2 options:(id)arg3 toPlayerPath:(id)arg4 completion:(id /* block */)arg5;
+ (bool)_shouldRegisterForNotifications;
+ (id)controllerForPlayerPath:(id)arg1;
+ (void)sendCommand:(unsigned int)arg1 options:(id)arg2 toPlayerPath:(id)arg3 completion:(id /* block */)arg4;

- (void).cxx_destruct;
- (void)_contentItemArtworkChangedNotification:(id)arg1;
- (id)_init;
- (id)_legacyCommands;
- (id)_onQueue_identifiersForRange:(struct _MSVSignedRange { long long x1; long long x2; })arg1;
- (void)_onQueue_invalidateArtworkFuturesForContentItemID:(id)arg1;
- (void)_onQueue_mergeContentItems:(id)arg1 queueRange:(struct _MSVSignedRange { long long x1; long long x2; })arg2 requestRange:(struct _MSVSignedRange { long long x1; long long x2; })arg3;
- (void)_onQueue_purgeArtworkForContentItemIdentifier:(id)arg1;
- (void)_onQueue_purgeArtworkForContentItemIdentifier:(id)arg1 artworkIdentifier:(id)arg2;
- (id /* block */)_onQueue_setOptimisticElapsedTimeForContentItem:(id)arg1 elapsedTime:(double)arg2 rate:(float)arg3;
- (id /* block */)_onQueue_setOptimisticPlaybackState:(unsigned int)arg1 withOptions:(id)arg2;
- (id /* block */)_onQueue_setOptimisticPlayingItemIdentifier:(id)arg1;
- (void)_onQueue_setOptimisticReorderedPlaybackQueueWithMovingContentItemIdentifier:(id)arg1 afterContentItemIdentifier:(id)arg2;
- (id /* block */)_onQueue_updateOptimisticStateForCommand:(unsigned int)arg1 options:(id)arg2;
- (void)_playbackQueueChangedNotification:(id)arg1;
- (void)_playbackQueueContentItemsChangedNotification:(id)arg1;
- (void)_playbackStateDidChangeNotification:(id)arg1;
- (void)_supportedCommandsDidChangedNotification:(id)arg1;
- (id)accessQueue;
- (id)calloutQueue;
- (long long)contentItemArtworkCacheStateForArtworkIdentifier:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (id)contentItemArtworkForContentItemIdentifier:(id)arg1 artworkIdentifier:(id)arg2 size:(struct CGSize { double x1; double x2; })arg3;
- (long long)contentItemCacheStateForIdentifier:(id)arg1;
- (id)contentItemForIdentifier:(id)arg1;
- (void)dealloc;
- (void)dictionary:(id)arg1 willRemoveObject:(id)arg2 forKey:(id)arg3;
- (void)invalidateAllTokens;
- (id)invalidationToken;
- (id)mediaRemoteArtworkDataSource;
- (long long)playQueueIdentifiersCacheStateForRange:(struct _MSVSignedRange { long long x1; long long x2; })arg1;
- (id)playQueueIdentifiersForRange:(struct _MSVSignedRange { long long x1; long long x2; })arg1;
- (id)playQueueIdentifiersForRequest:(void*)arg1;
- (id)playbackState;
- (long long)playbackStateCacheState;
- (id)playingIdentifier;
- (long long)playingIdentifierCacheState;
- (id)queueIdentifier;
- (long long)queueIdentifierCacheState;
- (id)remotePlayerArtworkDataSource;
- (id)resolvedPlayerPath;
- (void)sendCommand:(unsigned int)arg1 options:(id)arg2 completion:(id /* block */)arg3;
- (void)setAccessQueue:(id)arg1;
- (void)setCalloutQueue:(id)arg1;
- (void)setInvalidationToken:(id)arg1;
- (void)setResolvedPlayerPath:(id)arg1;
- (id)supportedCommands;
- (long long)supportedCommandsCacheState;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
