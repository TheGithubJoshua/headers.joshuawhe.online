<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPCReportingPlaybackEventSource.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MediaPlaybackCore.framework/MPCReportingPlaybackEventSource.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore (1)
 */

@interface MPCReportingPlaybackEventSource : NSObject {
    long long  _equivalencySourceAdamID;
    double  _eventDuration;
    NSString * _featureName;
    <MPCReportingIdentityPropertiesLoading> * _identityPropertiesLoader;
    MPModelGenericObject * _itemGenericObject;
    NSData * _jingleTimedMetadata;
    NSString * _lyricsID;
    MPModelPlayEvent * _modelPlayEvent;
    unsigned long long  _overrideItemType;
    NSNumber * _privateListeningEnabled;
    NSData * _recommendationData;
    NSString * _requestingBundleIdentifier;
    NSString * _requestingBundleVersion;
    bool  _shouldReportPlayEventsToStore;
    NSNumber * _siriInitiated;
    NSData * _trackInfo;
}

@property (nonatomic) long long equivalencySourceAdamID;
@property (nonatomic) double eventDuration;
@property (nonatomic, copy) NSString *featureName;
@property (nonatomic, retain) <MPCReportingIdentityPropertiesLoading> *identityPropertiesLoader;
@property (nonatomic, retain) MPModelGenericObject *itemGenericObject;
@property (nonatomic, copy) NSData *jingleTimedMetadata;
@property (nonatomic, copy) NSString *lyricsID;
@property (nonatomic, retain) MPModelPlayEvent *modelPlayEvent;
@property (nonatomic) unsigned long long overrideItemType;
@property (getter=isPrivateListeningEnabled, nonatomic, copy) NSNumber *privateListeningEnabled;
@property (nonatomic, copy) NSData *recommendationData;
@property (nonatomic, copy) NSString *requestingBundleIdentifier;
@property (nonatomic, copy) NSString *requestingBundleVersion;
@property (nonatomic) bool shouldReportPlayEventsToStore;
@property (getter=isSiriInitiated, nonatomic, copy) NSNumber *siriInitiated;
@property (nonatomic, copy) NSData *trackInfo;

- (void).cxx_destruct;
- (long long)equivalencySourceAdamID;
- (double)eventDuration;
- (id)featureName;
- (id)identityPropertiesLoader;
- (id)init;
- (id)initWithAVItem:(id)arg1;
- (id)isPrivateListeningEnabled;
- (id)isSiriInitiated;
- (id)itemGenericObject;
- (id)jingleTimedMetadata;
- (id)lyricsID;
- (id)modelPlayEvent;
- (unsigned long long)overrideItemType;
- (id)recommendationData;
- (id)requestingBundleIdentifier;
- (id)requestingBundleVersion;
- (void)setEquivalencySourceAdamID:(long long)arg1;
- (void)setEventDuration:(double)arg1;
- (void)setFeatureName:(id)arg1;
- (void)setIdentityPropertiesLoader:(id)arg1;
- (void)setItemGenericObject:(id)arg1;
- (void)setJingleTimedMetadata:(id)arg1;
- (void)setLyricsID:(id)arg1;
- (void)setModelPlayEvent:(id)arg1;
- (void)setOverrideItemType:(unsigned long long)arg1;
- (void)setPrivateListeningEnabled:(id)arg1;
- (void)setRecommendationData:(id)arg1;
- (void)setRequestingBundleIdentifier:(id)arg1;
- (void)setRequestingBundleVersion:(id)arg1;
- (void)setShouldReportPlayEventsToStore:(bool)arg1;
- (void)setSiriInitiated:(id)arg1;
- (void)setTrackInfo:(id)arg1;
- (bool)shouldReportPlayEventsToStore;
- (id)trackInfo;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
