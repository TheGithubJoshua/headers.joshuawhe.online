<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PMMPredictor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProactiveMagicalMoments.framework/PMMPredictor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProactiveMagicalMoments.framework/ProactiveMagicalMoments (1)
 */

@interface PMMPredictor : NSObject <CXCallObserverDelegate, PMMDataProtectionMonitorDelegate> {
    bool  _callInProgress;
    CXCallObserver * _callObserver;
    PMMTelephonyConnection * _ctConnection;
    PMMDataProtectionMonitor * _dataProtectionMonitor;
    long long  _dataProtectionStatus;
    NSDate * _dateOfLastNowPlayingEvent;
    PMMAudioDisconnectListener * _disconnectListener;
    long long  _encryptedDataAvailability;
    PETScalarEventTracker * _heroAppSuggestion;
    PETScalarEventTracker * _mmAppSuggestion;
    NSString * _mostRecentNowPlayingApp;
    RTPredictedApplication * _mostRecentNowPlayingPrediction;
    RTPredictedApplication * _mostRecentPrediction;
    PMMMusicStateProcessor * _musicStateProcessor;
    PMMAppsSettingsMonitor * _myAppsSettingsMonitor;
    NSObject<OS_dispatch_queue> * _nowPlayingStatusQueue;
    NSObject<OS_dispatch_queue> * _queue;
    RTRoutineManager * _routineManager;
    bool  _unlockedSinceBoot;
}

@property (nonatomic, retain) PMMTelephonyConnection *ctConnection;
@property (nonatomic, retain) PMMDataProtectionMonitor *dataProtectionMonitor;
@property (nonatomic) long long dataProtectionStatus;
@property (nonatomic, retain) NSDate *dateOfLastNowPlayingEvent;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) PMMAudioDisconnectListener *disconnectListener;
@property (nonatomic) long long encryptedDataAvailability;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PETScalarEventTracker *heroAppSuggestion;
@property (nonatomic, retain) PETScalarEventTracker *mmAppSuggestion;
@property (nonatomic, retain) NSString *mostRecentNowPlayingApp;
@property (nonatomic, retain) RTPredictedApplication *mostRecentNowPlayingPrediction;
@property (nonatomic, retain) RTPredictedApplication *mostRecentPrediction;
@property (nonatomic, retain) PMMMusicStateProcessor *musicStateProcessor;
@property (nonatomic, retain) PMMAppsSettingsMonitor *myAppsSettingsMonitor;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *nowPlayingStatusQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) RTRoutineManager *routineManager;
@property (readonly) Class superclass;
@property (nonatomic) bool unlockedSinceBoot;

+ (bool)_predictionIsAudio:(id)arg1;
+ (bool)_predictionPopulatesContinuity:(id)arg1;
+ (bool)_predictionPopulatesNowPlaying:(id)arg1 fromUnitTest:(bool)arg2;
+ (bool)_predictionPopulatesSpringboard:(id)arg1;
+ (bool)_predictionPopulatesStark:(id)arg1;
+ (bool)bundleSupportsINPlayMediaIntentForBundleId:(id)arg1 fromUnitTest:(bool)arg2;
+ (id)getHighestConfidencePredictionForNowPlayingConsumerFromPredictions:(id)arg1 fromUnitTest:(bool)arg2;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)_clearAllRecommendations;
- (void)_handleNowPlayingInfoDidChange;
- (void)_notifyAppPredictionAboutMMUpdate:(id)arg1;
- (id)_publishPredictionWithPredictedApplication:(id)arg1 fromUnitTest:(bool)arg2;
- (bool)_recommendingAudioWhileAlreadyPlaying:(id)arg1;
- (void)_updatePredictionBasedOnPreviousDataProtectionStatus:(long long)arg1 previousEncryptedDataAvailability:(long long)arg2;
- (void)callObserver:(id)arg1 callChanged:(id)arg2;
- (id)ctConnection;
- (id)dataProtectionMonitor;
- (void)dataProtectionMonitor:(id)arg1 dataProtectionStatusDidChange:(long long)arg2;
- (void)dataProtectionMonitor:(id)arg1 encryptedDataAvailbilityDidChange:(long long)arg2;
- (void)dataProtectionMonitor:(id)arg1 unlockedSinceBoot:(bool)arg2;
- (long long)dataProtectionStatus;
- (id)dateOfLastNowPlayingEvent;
- (id)disconnectListener;
- (long long)encryptedDataAvailability;
- (id)expirationForReason:(long long)arg1;
- (void)fetchMediaRemoteNowPlayingApplicationBundleId:(id /* block */)arg1;
- (void)fetchMediaRemoteNowPlayingApplicationPlaybackState:(id /* block */)arg1;
- (void)handleNowPlayingInfoDidChange;
- (void)handlePredictedApplications:(id)arg1 error:(id)arg2;
- (id)heroAppSuggestion;
- (id)init;
- (void)logPrediction:(id)arg1 predictionSource:(unsigned long long)arg2 mmReason:(long long)arg3 decReason:(long long)arg4 reasonSingle:(long long)arg5 reasonMetadata:(id)arg6;
- (id)metadataForPredictionApplication:(id)arg1;
- (id)mmAppSuggestion;
- (id)mostRecentNowPlayingApp;
- (id)mostRecentNowPlayingPrediction;
- (id)mostRecentPrediction;
- (id)musicStateProcessor;
- (id)myAppsSettingsMonitor;
- (id)notifyNonNowPlayingConsumersOfPredictionItem:(id)arg1 withPredictedApplication:(id)arg2;
- (void)notifyNowPlayingConsumerOfPredictionItem:(id)arg1 withPredictedApplication:(id)arg2;
- (id)nowPlayingStatusQueue;
- (id)preprocessPrediction:(id)arg1 predictionSource:(unsigned long long)arg2 mmReason:(long long)arg3 decReason:(long long)arg4 reasonSingle:(long long)arg5 reasonMetadata:(id)arg6;
- (id)queue;
- (id)routineManager;
- (long long)rtReasonToDECReason:(long long)arg1;
- (long long)rtReasonToMMReason:(long long)arg1;
- (void)setCtConnection:(id)arg1;
- (void)setDataProtectionMonitor:(id)arg1;
- (void)setDataProtectionStatus:(long long)arg1;
- (void)setDateOfLastNowPlayingEvent:(id)arg1;
- (void)setDisconnectListener:(id)arg1;
- (void)setEncryptedDataAvailability:(long long)arg1;
- (void)setHeroAppSuggestion:(id)arg1;
- (void)setMmAppSuggestion:(id)arg1;
- (void)setMostRecentNowPlayingApp:(id)arg1;
- (void)setMostRecentNowPlayingPrediction:(id)arg1;
- (void)setMostRecentPrediction:(id)arg1;
- (void)setMusicStateProcessor:(id)arg1;
- (void)setMyAppsSettingsMonitor:(id)arg1;
- (void)setNowPlayingStatusQueue:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setRoutineManager:(id)arg1;
- (void)setUnlockedSinceBoot:(bool)arg1;
- (bool)unlockedSinceBoot;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
