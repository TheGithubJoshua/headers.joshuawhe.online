<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IDSService.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IDS.framework/IDSService.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IDS.framework/IDS (1000)
 */

@interface IDSService : NSObject {
    _IDSService * _internal;
}

@property (nonatomic, readonly) _IDSService *_internal;
@property (nonatomic, readonly, copy) NSSet *accounts;
@property (nonatomic, readonly, copy) NSArray *devices;
@property (getter=hmd_isActive, nonatomic, readonly) bool hmd_active;
@property (readonly, copy) NSArray *hmd_handles;
@property (readonly, copy) HMDDeviceHandle *hmd_localDeviceHandle;
@property (readonly, copy) HMDAccountHandle *hmd_preferredHandle;
@property (nonatomic, readonly, copy) NSSet *internalAccounts;

// Image: /System/Library/PrivateFrameworks/IDS.framework/IDS

+ (bool)checkMessageSize:(unsigned long long)arg1 priority:(long long)arg2;
+ (id)removeSentinelFromAliases:(id)arg1;

- (void).cxx_destruct;
- (id)_accountWithAlias:(id)arg1;
- (id)_internal;
- (id)accounts;
- (void)activateAlias:(id)arg1;
- (void)activateAliases:(id)arg1;
- (id)activeAliases;
- (void)addDelegate:(id)arg1 queue:(id)arg2;
- (id)aliases;
- (bool)cancelIdentifier:(id)arg1 error:(id*)arg2;
- (id)datagramChannelForSessionDestination:(id)arg1 error:(id*)arg2;
- (id)datagramChannelForSocketDescriptor:(int)arg1 error:(id*)arg2;
- (id)datagramConnectionForSessionDestination:(id)arg1 error:(id*)arg2;
- (id)datagramConnectionForSocketDescriptor:(int)arg1 error:(id*)arg2;
- (void)deactivateAlias:(id)arg1;
- (void)deactivateAliases:(id)arg1;
- (void)dealloc;
- (id)deviceForFromID:(id)arg1;
- (id)deviceForUniqueID:(id)arg1;
- (id)devices;
- (id)devicesForBTUUID:(id)arg1;
- (void)disable;
- (void)disablePhoneUser;
- (void)disableiCloudUser;
- (void)enable;
- (void)enablePhoneUser;
- (void)enableiCloudUser;
- (id)firstRoutableInternetDestinationForSelf;
- (bool)getProgressUpdateForIdentifier:(id)arg1 error:(id*)arg2;
- (id)iCloudAccount;
- (id)initWithService:(id)arg1;
- (id)initWithService:(id)arg1 commands:(id)arg2;
- (id)initWithService:(id)arg1 manuallyAckMessages:(bool)arg2;
- (id)initWithService:(id)arg1 serviceDomain:(id)arg2;
- (id)internal;
- (id)internalAccounts;
- (bool)isPretendingToBeFull;
- (long long)maxHomeKitPayloadSize;
- (void)performGroupTask:(id /* block */)arg1;
- (SEL)protobufActionForIncomingRequestsOfType:(unsigned short)arg1;
- (SEL)protobufActionForIncomingResponsesOfType:(unsigned short)arg1;
- (void)removeDelegate:(id)arg1;
- (void)scheduleTransactionLogTask:(id)arg1;
- (bool)sendAccessoryData:(id)arg1 toAccessoryID:(id)arg2 accessToken:(id)arg3 options:(id)arg4 identifier:(id*)arg5 error:(id*)arg6;
- (void)sendAckForMessageWithContext:(id)arg1;
- (bool)sendAheadGroup:(id)arg1 priority:(long long)arg2 options:(id)arg3 identifier:(id*)arg4 error:(id*)arg5;
- (bool)sendData:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id*)arg6 error:(id*)arg7;
- (bool)sendData:(id)arg1 priority:(long long)arg2 options:(id)arg3 identifier:(id*)arg4 error:(id*)arg5;
- (bool)sendData:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id*)arg5 error:(id*)arg6;
- (bool)sendMessage:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 options:(id)arg4 identifier:(id*)arg5 error:(id*)arg6;
- (bool)sendMessage:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id*)arg6 error:(id*)arg7;
- (bool)sendMessage:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id*)arg5 error:(id*)arg6;
- (bool)sendProtobuf:(id)arg1 fromAccount:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id*)arg6 error:(id*)arg7;
- (bool)sendProtobuf:(id)arg1 toDestinations:(id)arg2 priority:(long long)arg3 options:(id)arg4 identifier:(id*)arg5 error:(id*)arg6;
- (bool)sendResourceAtURL:(id)arg1 metadata:(id)arg2 toDestinations:(id)arg3 priority:(long long)arg4 options:(id)arg5 identifier:(id*)arg6 error:(id*)arg7;
- (bool)sendServerMessage:(id)arg1 command:(id)arg2 fromAccount:(id)arg3;
- (id)serviceDomain;
- (void)setLinkPreferences:(id)arg1;
- (void)setPreferInfraWiFi:(bool)arg1;
- (void)setPretendingToBeFull:(bool)arg1;
- (void)setProtobufAction:(SEL)arg1 forIncomingRequestsOfType:(unsigned short)arg2;
- (void)setProtobufAction:(SEL)arg1 forIncomingResponsesOfType:(unsigned short)arg2;
- (void)startOTRTest:(long long)arg1;
- (id)streamConnectionForSessionDestination:(id)arg1 error:(id*)arg2;
- (id)streamConnectionForSocketDescriptor:(int)arg1 error:(id*)arg2;
- (void)testCloudQRConnection;
- (void)updateSubServices:(id)arg1;
- (bool)updateSubServices:(id)arg1 forDevice:(id)arg2;
- (id)uriForFromID:(id)arg1;

// Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon

- (id)hmd_handles;
- (bool)hmd_isActive;
- (id)hmd_localDeviceHandle;
- (id)hmd_preferredHandle;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
