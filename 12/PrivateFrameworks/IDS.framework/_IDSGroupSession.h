<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_IDSGroupSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IDS.framework/_IDSGroupSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IDS.framework/IDS (1000)
 */

@interface _IDSGroupSession : NSObject <IDSBaseSocketPairConnectionDelegate, IDSDaemonListenerProtocol> {
    NSString * _accountID;
    bool  _alwaysSkipSelf;
    id  _boostContext;
    bool  _cfsJoinReply;
    bool  _cfsLeaveReply;
    struct cfs_client_s { } * _cfs_client;
    int  _cfs_requestID;
    NSString * _clientUUID;
    unsigned long long  _connectionCountHint;
    CUTWeakReference * _delegate;
    id  _delegateContext;
    NSSet * _destinations;
    bool  _didJoinCallback;
    bool  _didLeaveCallback;
    bool  _disallowCellularInterface;
    bool  _disallowWifiInterface;
    NSArray * _existingParticipants;
    NSString * _fromID;
    NSString * _groupID;
    NSString * _instanceID;
    bool  _isInvalidated;
    NSError * _joinLeaveError;
    bool  _needsToWaitForPreConnectionData;
    NSDictionary * _participantInfo;
    bool  _preferCellularForCallSetup;
    NSMutableDictionary * _preferences;
    unsigned long long  _preferredAddressFamily;
    NSNumber * _previousError;
    NSNumber * _qrReason;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableDictionary * _sessionConfig;
    unsigned int  _sessionEndedReason;
    NSString * _stableGroupID;
    unsigned int  _state;
    long long  _transportType;
    NSString * _uniqueID;
    IDSBaseSocketPairConnection * _unreliableSocketPairConnection;
    bool  _useConfServer;
}

@property (nonatomic, retain) id boostContext;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned int sessionEndedReason;
@property (nonatomic, readonly) unsigned int state;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *uniqueID;

- (void).cxx_destruct;
- (void)_broadcastNewSessionToDaemon;
- (void)_callDelegateWithBlock:(id /* block */)arg1;
- (void)_cleanupSocketPairConnections;
- (id)boostContext;
- (void)daemonDisconnected;
- (void)dealloc;
- (void)groupSessionDidTerminate:(id)arg1;
- (void)groupSessionEnded:(id)arg1 withReason:(unsigned int)arg2 error:(id)arg3;
- (id)initWithAccount:(id)arg1 destinations:(id)arg2 options:(id)arg3 delegateContext:(id)arg4;
- (void)invalidate;
- (void)joinGroupSession;
- (void)joinWithOptions:(id)arg1;
- (void)leaveGroupSession;
- (void)requestActiveParticipants;
- (void)session:(id)arg1 didReceiveActiveParticipants:(id)arg2 success:(bool)arg3;
- (void)session:(id)arg1 didReceiveReport:(id)arg2;
- (void)session:(id)arg1 participantDidJoinGroupWithInfo:(id)arg2;
- (void)session:(id)arg1 participantDidLeaveGroupWithInfo:(id)arg2;
- (void)sessionDidJoinGroup:(id)arg1 participantInfo:(id)arg2 error:(id)arg3;
- (void)sessionDidJoinGroup:(id)arg1 participantUpdateDictionary:(id)arg2 error:(id)arg3;
- (void)sessionDidJoinGroup:(id)arg1 participantsInfo:(id)arg2 error:(id)arg3;
- (void)sessionDidLeaveGroup:(id)arg1 error:(id)arg2;
- (unsigned int)sessionEndedReason;
- (void)setBoostContext:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setParticipantInfo:(id)arg1;
- (void)setPreferences:(id)arg1;
- (unsigned int)state;
- (id)uniqueID;
- (void)updateMembers:(id)arg1 withContext:(id)arg2 triggeredLocally:(bool)arg3;
- (void)updateParticipantData:(id)arg1 withContext:(id)arg2;
- (void)xpcObject:(id)arg1 objectContext:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
