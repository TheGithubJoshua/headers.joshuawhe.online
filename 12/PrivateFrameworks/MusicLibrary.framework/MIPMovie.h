<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MIPMovie.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MusicLibrary.framework/MIPMovie.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary (18)
 */

@interface MIPMovie : PBCodable <NSCopying> {
    MIPArtist * _artist;
    int  _audioLanguage;
    int  _audioTrackId;
    int  _audioTrackIndex;
    NSString * _extendedContentName;
    NSData * _flattenedChapterData;
    struct { 
        unsigned int rentalDuration : 1; 
        unsigned int rentalPlaybackDuration : 1; 
        unsigned int rentalPlaybackStartedDateTime : 1; 
        unsigned int rentalStartedDateTime : 1; 
        unsigned int audioLanguage : 1; 
        unsigned int audioTrackId : 1; 
        unsigned int audioTrackIndex : 1; 
        unsigned int subtitleLanguage : 1; 
        unsigned int subtitleTrackIndex : 1; 
        unsigned int videoQuality : 1; 
        unsigned int hasAlternateAudio : 1; 
        unsigned int hasChapterData : 1; 
        unsigned int hasSubtitles : 1; 
        unsigned int rental : 1; 
    }  _has;
    bool  _hasAlternateAudio;
    bool  _hasChapterData;
    bool  _hasSubtitles;
    NSString * _movieInfo;
    bool  _rental;
    long long  _rentalDuration;
    long long  _rentalPlaybackDuration;
    long long  _rentalPlaybackStartedDateTime;
    long long  _rentalStartedDateTime;
    int  _subtitleLanguage;
    int  _subtitleTrackIndex;
    int  _videoQuality;
}

@property (nonatomic, retain) MIPArtist *artist;
@property (nonatomic) int audioLanguage;
@property (nonatomic) int audioTrackId;
@property (nonatomic) int audioTrackIndex;
@property (nonatomic, retain) NSString *extendedContentName;
@property (nonatomic, retain) NSData *flattenedChapterData;
@property (nonatomic) bool hasAlternateAudio;
@property (nonatomic, readonly) bool hasArtist;
@property (nonatomic) bool hasAudioLanguage;
@property (nonatomic) bool hasAudioTrackId;
@property (nonatomic) bool hasAudioTrackIndex;
@property (nonatomic) bool hasChapterData;
@property (nonatomic, readonly) bool hasExtendedContentName;
@property (nonatomic, readonly) bool hasFlattenedChapterData;
@property (nonatomic) bool hasHasAlternateAudio;
@property (nonatomic) bool hasHasChapterData;
@property (nonatomic) bool hasHasSubtitles;
@property (nonatomic, readonly) bool hasMovieInfo;
@property (nonatomic) bool hasRental;
@property (nonatomic) bool hasRentalDuration;
@property (nonatomic) bool hasRentalPlaybackDuration;
@property (nonatomic) bool hasRentalPlaybackStartedDateTime;
@property (nonatomic) bool hasRentalStartedDateTime;
@property (nonatomic) bool hasSubtitleLanguage;
@property (nonatomic) bool hasSubtitleTrackIndex;
@property (nonatomic) bool hasSubtitles;
@property (nonatomic) bool hasVideoQuality;
@property (nonatomic, retain) NSString *movieInfo;
@property (nonatomic) bool rental;
@property (nonatomic) long long rentalDuration;
@property (nonatomic) long long rentalPlaybackDuration;
@property (nonatomic) long long rentalPlaybackStartedDateTime;
@property (nonatomic) long long rentalStartedDateTime;
@property (nonatomic) int subtitleLanguage;
@property (nonatomic) int subtitleTrackIndex;
@property (nonatomic) int videoQuality;

- (void).cxx_destruct;
- (id)artist;
- (int)audioLanguage;
- (int)audioTrackId;
- (int)audioTrackIndex;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (id)extendedContentName;
- (id)flattenedChapterData;
- (bool)hasAlternateAudio;
- (bool)hasArtist;
- (bool)hasAudioLanguage;
- (bool)hasAudioTrackId;
- (bool)hasAudioTrackIndex;
- (bool)hasChapterData;
- (bool)hasExtendedContentName;
- (bool)hasFlattenedChapterData;
- (bool)hasHasAlternateAudio;
- (bool)hasHasChapterData;
- (bool)hasHasSubtitles;
- (bool)hasMovieInfo;
- (bool)hasRental;
- (bool)hasRentalDuration;
- (bool)hasRentalPlaybackDuration;
- (bool)hasRentalPlaybackStartedDateTime;
- (bool)hasRentalStartedDateTime;
- (bool)hasSubtitleLanguage;
- (bool)hasSubtitleTrackIndex;
- (bool)hasSubtitles;
- (bool)hasVideoQuality;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (id)movieInfo;
- (bool)readFrom:(id)arg1;
- (bool)rental;
- (long long)rentalDuration;
- (long long)rentalPlaybackDuration;
- (long long)rentalPlaybackStartedDateTime;
- (long long)rentalStartedDateTime;
- (void)setArtist:(id)arg1;
- (void)setAudioLanguage:(int)arg1;
- (void)setAudioTrackId:(int)arg1;
- (void)setAudioTrackIndex:(int)arg1;
- (void)setExtendedContentName:(id)arg1;
- (void)setFlattenedChapterData:(id)arg1;
- (void)setHasAlternateAudio:(bool)arg1;
- (void)setHasAudioLanguage:(bool)arg1;
- (void)setHasAudioTrackId:(bool)arg1;
- (void)setHasAudioTrackIndex:(bool)arg1;
- (void)setHasChapterData:(bool)arg1;
- (void)setHasHasAlternateAudio:(bool)arg1;
- (void)setHasHasChapterData:(bool)arg1;
- (void)setHasHasSubtitles:(bool)arg1;
- (void)setHasRental:(bool)arg1;
- (void)setHasRentalDuration:(bool)arg1;
- (void)setHasRentalPlaybackDuration:(bool)arg1;
- (void)setHasRentalPlaybackStartedDateTime:(bool)arg1;
- (void)setHasRentalStartedDateTime:(bool)arg1;
- (void)setHasSubtitleLanguage:(bool)arg1;
- (void)setHasSubtitleTrackIndex:(bool)arg1;
- (void)setHasSubtitles:(bool)arg1;
- (void)setHasVideoQuality:(bool)arg1;
- (void)setMovieInfo:(id)arg1;
- (void)setRental:(bool)arg1;
- (void)setRentalDuration:(long long)arg1;
- (void)setRentalPlaybackDuration:(long long)arg1;
- (void)setRentalPlaybackStartedDateTime:(long long)arg1;
- (void)setRentalStartedDateTime:(long long)arg1;
- (void)setSubtitleLanguage:(int)arg1;
- (void)setSubtitleTrackIndex:(int)arg1;
- (void)setVideoQuality:(int)arg1;
- (int)subtitleLanguage;
- (int)subtitleTrackIndex;
- (int)videoQuality;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
