<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MSPCloudSynchronizer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MapsSupport.framework/MSPCloudSynchronizer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MapsSupport.framework/MapsSupport (1)
 */

@interface MSPCloudSynchronizer : NSObject <MSPJournaling> {
    <MSPCloudAccess> * _access;
    unsigned long long  _countOfInFlightMerges;
    <MSPCloudSynchronizerDelegate> * _delegate;
    struct atomic_flag { 
        _Atomic bool _Value; 
    }  _didScheduleInitialMerge;
    unsigned long long  _failedResolutionAttempts;
    NSTimer * _identityRecheckTimer;
    MSPJournal * _journal;
    long long  _loginStatus;
    NSMutableArray * _mergeCompletionHandlers;
    NSDate * _minimumDateAfterTooManyFailedResolutionAttempts;
    bool  _needsMerge;
    MSPMapsPaths * _paths;
    bool  _started;
    NSOperationQueue * _taskAttemptsQueue;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MSPCloudSynchronizerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=_loginStatus, setter=_setLoginStatus:) long long loginStatus;
@property (readonly) Class superclass;

+ (double)_batchingTimeInterval;
+ (long long)_boostedQualityOfServiceForOpportunisticTask;
+ (long long)_boostedQualityOfServiceForUserObservableTask;
+ (double)_identityRecheckInterval;
+ (long long)_maximumResolutionAttemptsCount;
+ (double)_minimumReattemptInterval;
+ (long long)_qualityOfServiceForInitialDownload;
+ (long long)_qualityOfServiceForOpportunisticTask;
+ (long long)_qualityOfServiceForUserObservableTask;
+ (double)_timeIntervalToWaitAfterTooManyResolutionAttempts;
+ (double)_timeIntervalToWaitBetweenBoosts;

- (void).cxx_destruct;
- (void)_availabilityDidChange;
- (void)_beginWaitingForAvailabilityAndStartQueueIfPossible;
- (long long)_boostIfNeededQualityOfServiceForTask:(id)arg1 thatIsUserObservable:(bool)arg2;
- (void)_cancelAllOperationsWithCompletion:(id /* block */)arg1;
- (void)_completeOperation:(id)arg1 isMerge:(bool)arg2 withError:(id)arg3 canReattempt:(bool)arg4 maxAttempts:(unsigned long long)arg5 minimumReattemptDate:(id)arg6 completion:(id /* block */)arg7;
- (void)_enqueueOperation:(id)arg1 requireBeingLoggedIn:(bool)arg2;
- (long long)_loginStatus;
- (bool)_mergesAreSuspendedAfterTooManyFailedResolvingAttempts;
- (id)_minimumReattemptDateForProposedDate:(id)arg1;
- (void)_resetTooManyResolvingAttemptsHolds;
- (void)_scheduleMergeForUserObservableChange:(bool)arg1;
- (void)_scheduleMergeForUserObservableChange:(bool)arg1 isInitialMerge:(bool)arg2;
- (id)_scheduleTaskIfAny:(id)arg1 isMerge:(bool)arg2 qualityOfService:(long long)arg3 completion:(id /* block */)arg4;
- (void)_setLoginStatus:(long long)arg1;
- (bool)_shouldContinueAfterFailingResolutionAttempt;
- (void)_taskThatIncludedResolutionAttemptSucceeded;
- (bool)_wasTaskScheduledWhenTokenCreated:(id)arg1;
- (id)delegate;
- (id)init;
- (id)initWithAccess:(id)arg1;
- (id)scheduleTask:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setNeedsMergeForUserObservableChange:(bool)arg1 completion:(id /* block */)arg2;
- (void)setNeedsMergeWithOptions:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (bool)shouldReportState:(id)arg1;
- (void)start;
- (void)stop;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
