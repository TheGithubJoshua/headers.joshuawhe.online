<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>LAUIHorizontalArrowView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/LocalAuthenticationPrivateUI.framework/LAUIHorizontalArrowView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/LocalAuthenticationPrivateUI.framework/LocalAuthenticationPrivateUI (1)
 */

@interface LAUIHorizontalArrowView : UIView {
    bool  _animated;
    bool  _animating;
    UIView * _arrow_container;
    UIColor * _color;
    UIView * _container;
    long long  _direction;
    unsigned short  _dismissal_animation_count;
    double  _displacement;
    struct UIOffset { 
        double horizontal; 
        double vertical; 
    }  _displacementOffset;
    bool  _effective_animating;
    UIImageView * _head;
    struct periodic_animation_state { 
        bool enabled; 
        NSString *_key; 
        CALayer *_layer; 
        NSObject<OS_dispatch_source> *_removal_timer; 
    }  _head_pulse;
    UILabel * _label;
    struct CGSize { 
        double width; 
        double height; 
    }  _maximum_line_size;
    bool  _pulsing;
    double  _resting_height;
    UIImageView * _tail;
    UIView * _tail_container;
    struct periodic_animation_state { 
        bool enabled; 
        NSString *_key; 
        CALayer *_layer; 
        NSObject<OS_dispatch_source> *_removal_timer; 
    }  _tail_container_pulse;
    struct periodic_animation_state { 
        bool enabled; 
        NSString *_key; 
        CALayer *_layer; 
        NSObject<OS_dispatch_source> *_removal_timer; 
    }  _tail_counter_pulse;
    NSString * _text;
}

@property (getter=isAnimating, nonatomic) bool animating;
@property (nonatomic) long long direction;
@property (nonatomic) double displacement;
@property (nonatomic) struct UIOffset { double x1; double x2; } displacementOffset;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumLineSize;
@property (nonatomic, copy) NSString *text;

// Image: /System/Library/PrivateFrameworks/LocalAuthenticationPrivateUI.framework/LocalAuthenticationPrivateUI

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_layoutIfNeededAnimated:(bool)arg1;
- (void)_updateAnimatingAnimated:(bool)arg1;
- (void)_updateDirectionTransform;
- (void)_updateFont;
- (void)_updateLabelSize;
- (void)_updatePulsingWithDelay:(double)arg1;
- (void)_updateViewsWithColor;
- (void)boldTextStatusDidChange:(id)arg1;
- (void)contentSizeCategoryDidChange:(id)arg1;
- (void)dealloc;
- (void)didMoveToWindow;
- (long long)direction;
- (double)displacement;
- (struct UIOffset { double x1; double x2; })displacementOffset;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAnimating;
- (void)layoutSubviews;
- (struct CGSize { double x1; double x2; })maximumLineSize;
- (void)setAnimating:(bool)arg1;
- (void)setDirection:(long long)arg1;
- (void)setDisplacement:(double)arg1;
- (void)setDisplacementOffset:(struct UIOffset { double x1; double x2; })arg1;
- (void)setMaximumLineSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setText:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)text;
- (void)tintColorDidChange;

// Image: /System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI

+ (unsigned int)pkui_cameraEdgeForScreen:(id)arg1;

- (bool)pkui_updateFrame;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
