<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>LAUIPearlGlyphLabel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/LocalAuthenticationPrivateUI.framework/LAUIPearlGlyphLabel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/LocalAuthenticationPrivateUI.framework/LocalAuthenticationPrivateUI (1)
 */

@interface LAUIPearlGlyphLabel : UIView {
    bool  _allowDelayedVisibility;
    bool  _animated;
    CABackdropLayer * _background;
    UIColor * _backgroundColor;
    UIFont * _baseFont;
    UIView * _container;
    struct CGSize { 
        double width; 
        double height; 
    }  _currentLabelSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _currentMaximumSize;
    LAUIPearlGlyphView * _glyph;
    UIView * _glyphContainer;
    bool  _inWindow;
    UILabel * _label;
    UIView * _labelContainer;
    /* Warning: unhandled struct encoding: '{vector<UIView *, std::__1::allocator<UIView *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<UIView *__strong *, std::__1::allocator<UIView *> >="__value_"^@}}' */ struct vector<UIView *, std::__1::allocator<UIView *> > { 
        __end_ **__begin_; 
    }  _labelSnapshots;
    struct map<CALayer *__unsafe_unretained, CALayer *, std::__1::less<CALayer *__unsafe_unretained>, std::__1::allocator<std::__1::pair<CALayer *const __unsafe_unretained, CALayer *> > > { 
        struct __tree<std::__1::__value_type<CALayer *__unsafe_unretained, CALayer *>, std::__1::__map_value_compare<CALayer *__unsafe_unretained, std::__1::__value_type<CALayer *__unsafe_unretained, CALayer *>, std::__1::less<CALayer *__unsafe_unretained>, true>, std::__1::allocator<std::__1::__value_type<CALayer *__unsafe_unretained, CALayer *> > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CALayer *__unsafe_unretained, CALayer *>, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<CALayer *__unsafe_unretained, std::__1::__value_type<CALayer *__unsafe_unretained, CALayer *>, std::__1::less<CALayer *__unsafe_unretained>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _masks;
    struct CGSize { 
        double width; 
        double height; 
    }  _maximumSize;
    bool  _reduceBlur;
    bool  _shimmerEnabled;
    long long  _style;
    NSString * _text;
    UIColor * _textColor;
    bool  _textNeedsUpdate;
    bool  _textUpdateNeedsAnimation;
    NSObject<OS_dispatch_source> * _visibilityTimer;
    bool  _visible;
    bool  _visibleNeedsUpdate;
}

@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maximumSize;
@property (getter=isShimmerEnabled, nonatomic, readonly) bool shimmerEnabled;
@property (nonatomic, readonly) long long style;
@property (nonatomic, readonly, copy) NSString *text;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_applyStyle;
- (void)_applyVisibilityAnimated:(bool)arg1;
- (void)_updateBoundsSizeAnimated:(bool)arg1;
- (void)_updateFontAnimated:(bool)arg1;
- (void)_updateGlyphPaused;
- (void)_updateReduceBlurState;
- (void)_updateText;
- (void)_updateVisibilityAnimated:(bool)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)boldTextStatusDidChange:(id)arg1;
- (void)contentSizeCategoryDidChange:(id)arg1;
- (void)dealloc;
- (void)didMoveToWindow;
- (id)init;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithStyle:(long long)arg1;
- (bool)isShimmerEnabled;
- (void)layoutIfNeededAnimated:(bool)arg1;
- (void)layoutSubviews;
- (struct CGSize { double x1; double x2; })maximumSize;
- (void)reduceMotionDidChange:(id)arg1;
- (void)reduceTransparencyDidChange:(id)arg1;
- (void)setMaximumSize:(struct CGSize { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)setShimmerEnabled:(bool)arg1 animated:(bool)arg2;
- (void)setStyle:(long long)arg1 animated:(bool)arg2;
- (void)setText:(id)arg1 animated:(bool)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)style;
- (id)text;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
