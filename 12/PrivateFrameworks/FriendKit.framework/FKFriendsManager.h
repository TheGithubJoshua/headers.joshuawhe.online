<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FKFriendsManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/FriendKit.framework/FKFriendsManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/FriendKit.framework/FriendKit (1)
 */

@interface FKFriendsManager : NSObject <FKFriendGroupDelegate, IDSBatchIDQueryControllerDelegate> {
    NSTimer * _addressBookRefreshTimer;
    NSMutableDictionary * _cachedStatuses;
    NSMutableDictionary * _changeLog;
    NSObject<OS_dispatch_queue> * _changeLogQueue;
    bool  _didCompleteInitialLoading;
    NSString * _domain;
    struct __CFString { } * _friendGroupTitleChangedExternallyNotificationName;
    NSMutableArray * _friendGroups;
    NSMutableArray * _friendList;
    struct __CFString { } * _friendsChangedExternallyNotificationName;
    NSMutableSet * _highPriorityDestinations;
    NSMapTable * _identifiersToPersonMap;
    NSTimer * _idsQueryTimeoutTimer;
    bool  _lastLoadHadChanges;
    unsigned long long  _maxFriendGroups;
    unsigned long long  _maxFriendsPerGroup;
    bool  _needsAddressBookRefresh;
    bool  _needsFriendListSync;
    NPSManager * _npsManager;
    NSArray * _pendingDestinations;
    unsigned long long  _postCount;
    IDSBatchIDQueryController * _queryController;
    bool  _refreshAgainstContactsEnabled;
    FKDelayedOperation * _saveOperation;
    NSObject<OS_dispatch_queue> * _saveQueue;
    NSString * _serviceName;
    bool  _shouldAddEmptyTrailingGroup;
    bool  _shouldDeduplicateFriendList;
    bool  _shouldRemoveDestinationlessFriends;
    NSHashTable * _sourcedPersons;
}

@property (nonatomic, retain) NSMutableDictionary *changeLog;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=didLastLoadHaveChanges, nonatomic) bool lastLoadHadChanges;
@property (getter=isRefreshAgainstContactsEnabled, nonatomic) bool refreshAgainstContactsEnabled;
@property (nonatomic, retain) FKDelayedOperation *saveOperation;
@property (nonatomic, retain) NSString *serviceName;
@property (readonly) Class superclass;

+ (id)collapseChangeLogsIntoChangeLog:(id)arg1;
+ (id)managerForDomain:(id)arg1;
+ (void)setEnableEmptyTrailingGroup:(bool)arg1 domain:(id)arg2;
+ (void)setFriendGroupTitleChangedExternallyNotificationName:(id)arg1 domain:(id)arg2;
+ (void)setFriendsChangedExternallyNotificationName:(id)arg1 domain:(id)arg2;
+ (void)setGroupSize:(unsigned long long)arg1 domain:(id)arg2;
+ (void)setMaxGroupCount:(unsigned long long)arg1 domain:(id)arg2;
+ (void)setRefreshAgainstContactsOnInitEnabled:(bool)arg1 domain:(id)arg2;

- (void).cxx_destruct;
- (void)_addCuratedFriends:(id)arg1;
- (void)_addEmptyGroup;
- (void)_addEntryToChangeLogForPerson:(id)arg1 changeType:(id)arg2;
- (void)_addPersonToIdentifiersToPersonMap:(id)arg1;
- (void)_addressBookChanged:(id)arg1;
- (bool)_addressBookSequenceNumberDidChange;
- (void)_aggdLogFriendCount;
- (void)_aggdLogFriendGroupCount;
- (void)_aggdSetValue:(long long)arg1 forScalarKey:(struct __CFString { }*)arg2;
- (bool)_canAddFriendGroup;
- (bool)_changeLogContainsFriendAdditionsOrUpdates;
- (unsigned long long)_changeLogCount;
- (void)_cleanUpFriendListIfNecessary;
- (long long)_compareStatus:(long long)arg1 toStatus:(long long)arg2;
- (id)_copyAndResetChangeLog;
- (void)_createAddressToPersonDictionary;
- (void)_createEmptyFriendList;
- (id)_curatedFriendList;
- (void)_deduplicateFriendListIfNecessary;
- (id)_destinations;
- (long long)_firstEmptyPosition;
- (id)_friendAtPosition:(unsigned long long)arg1;
- (void)_friendsChangedExternally;
- (void)_groupTitleChangedExternally;
- (void)_idsQueryTimeoutTimerFired;
- (void)_incrementExternalChangePostCount;
- (unsigned long long)_indexForPosition:(unsigned long long)arg1 inGroup:(id)arg2;
- (void)_initiateIDSDestinationStatusQuery:(id)arg1;
- (int)_lastKnownAddressBookSequenceNumber;
- (void)_loadFriendList;
- (void)_loadGroupTitles;
- (struct __CFString { }*)_notificationForExternalListChange;
- (unsigned long long)_numberOfFriendsInList:(id)arg1;
- (void)_personValuesChanged:(id)arg1;
- (void)_postChangeNotificationIfNecessary;
- (void)_postGroupListChangedNotification;
- (void)_queryDestinations:(id)arg1;
- (void)_removeDestinationlessFriendsIfNecessary;
- (void)_removeFriendsAtIndices:(id)arg1;
- (void)_removeGroupAtIndex:(unsigned long long)arg1;
- (void)_removePersonFromIdentifiersToPersonMap:(id)arg1;
- (void)_save;
- (void)_setupQueryController;
- (bool)_shouldAddEmptyGroup;
- (bool)_shouldBypassDestinationStatusCheck;
- (void)_startIDSQueryTimeoutTimer;
- (void)_stopIDSQueryTimeoutTimer;
- (void)_storeSourcedPerson:(id)arg1;
- (void)_updateFriendGroups;
- (void)_updateFriends:(id)arg1;
- (void)_updateLastKnownAddressBookSequenceNumber:(int)arg1;
- (bool)addFriend:(id)arg1;
- (id)allPeople;
- (bool)canAddFriend;
- (id)changeLog;
- (bool)containsFriendWithABRecordGUID:(id)arg1;
- (void)dealloc;
- (bool)didLastLoadHaveChanges;
- (void)friendGroup:(id)arg1 didMoveFriends:(id)arg2;
- (void)friendGroup:(id)arg1 didRemoveFriend:(id)arg2 atPosition:(unsigned long long)arg3;
- (void)friendGroup:(id)arg1 didSetFriend:(id)arg2 atPosition:(unsigned long long)arg3;
- (id)friendGroups;
- (unsigned long long)groupIndexContainingFriend:(id)arg1;
- (void)idStatusUpdatedForDestinations:(id)arg1;
- (id)initWithDomain:(id)arg1;
- (bool)isPersonFriend:(id)arg1;
- (bool)isRefreshAgainstContactsEnabled;
- (void)markFriendListAsNormalized;
- (id)personLikePerson:(id)arg1;
- (id)personWithABRecordGUID:(id)arg1;
- (id)personWithDestinations:(id)arg1;
- (unsigned long long)positionOfFriendInGroup:(id)arg1;
- (void)purgeEmptyFriendGroups;
- (id)reachableDestinationsForPerson:(id)arg1;
- (bool)refreshAgainstAddressBook;
- (void)refreshDestinationStatuses;
- (void)reloadFriendList;
- (void)save;
- (void)saveFriendGroupTitles;
- (id)saveOperation;
- (id)serviceName;
- (void)setChangeLog:(id)arg1;
- (void)setLastLoadHadChanges:(bool)arg1;
- (void)setRefreshAgainstContactsEnabled:(bool)arg1;
- (void)setSaveOperation:(id)arg1;
- (void)setServiceName:(id)arg1;
- (bool)shouldAllowAddingContact:(id)arg1 withContactStore:(id)arg2 personValueCache:(id)arg3;
- (long long)statusForPerson:(id)arg1 requery:(bool)arg2;
- (void)syncFriendGroup:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
