<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TIKeyboardState.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TextInput.framework/TIKeyboardState.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput (1.0)
 */

@interface TIKeyboardState : NSObject <NSCopying, NSSecureCoding> {
    union { 
        long long integerValue; 
        struct { 
            unsigned int displayed : 1; 
            unsigned int autoDisplayMode : 1; 
        } fields; 
    }  _autocorrectionListUIState;
    NSDictionary * _autofillContext;
    unsigned long long  _autofillMode;
    NSString * _clientIdentifier;
    TIKeyboardCandidate * _currentCandidate;
    NSUUID * _documentIdentifier;
    TIDocumentState * _documentState;
    TIInputContextHistory * _inputContextHistory;
    NSString * _inputForMarkedText;
    NSString * _inputMode;
    TIKeyboardLayout * _keyLayout;
    TIKeyboardLayoutState * _layoutState;
    union { 
        long long integerValue; 
        struct { 
            unsigned int userSelectedCurrentCandidate : 1; 
            unsigned int shouldSkipCandidateSelection : 1; 
            unsigned int suppressingCandidateSelection : 1; 
            unsigned int needsCandidateMetadata : 1; 
            unsigned int keyboardEventsLagging : 1; 
            unsigned int hardwareKeyboardMode : 1; 
            unsigned int splitKeyboardMode : 1; 
            unsigned int wordLearningEnabled : 1; 
            unsigned int autocorrectionEnabled : 1; 
            unsigned int shortcutConversionEnabled : 1; 
            unsigned int candidateSelectionPredictionEnabled : 1; 
            unsigned int autocapitalizationEnabled : 1; 
            unsigned int canSendCurrentLocation : 1; 
            unsigned int isScreenLocked : 1; 
            unsigned int longPredictionListEnabled : 1; 
            unsigned int needAutofill : 1; 
            unsigned int needOneTimeCodeAutofill : 1; 
        } fields; 
    }  _mask;
    NSString * _recipientIdentifier;
    NSString * _responseContext;
    NSString * _searchStringForMarkedText;
    TIKeyboardSecureCandidateRenderTraits * _secureCandidateRenderTraits;
    int  _shiftState;
    NSArray * _supportedPayloadIds;
    TITextInputTraits * _textInputTraits;
}

@property (nonatomic) bool autocapitalizationEnabled;
@property (nonatomic) unsigned long long autocapitalizationType;
@property (nonatomic) bool autocorrectionEnabled;
@property (nonatomic) bool autocorrectionListUIAutoDisplayMode;
@property (nonatomic) bool autocorrectionListUIDisplayed;
@property (nonatomic, retain) NSDictionary *autofillContext;
@property (nonatomic) unsigned long long autofillMode;
@property (nonatomic) bool canSendCurrentLocation;
@property (nonatomic) bool candidateSelectionPredictionEnabled;
@property (nonatomic, copy) NSString *clientIdentifier;
@property (nonatomic, retain) TIKeyboardCandidate *currentCandidate;
@property (nonatomic, retain) NSUUID *documentIdentifier;
@property (nonatomic, retain) TIDocumentState *documentState;
@property (nonatomic) bool hardwareKeyboardMode;
@property (nonatomic, retain) TIInputContextHistory *inputContextHistory;
@property (nonatomic, copy) NSString *inputForMarkedText;
@property (nonatomic, copy) NSString *inputMode;
@property (nonatomic) bool isScreenLocked;
@property (nonatomic, retain) TIKeyboardLayout *keyLayout;
@property (nonatomic) bool keyboardEventsLagging;
@property (nonatomic) unsigned long long keyboardType;
@property (nonatomic, copy) TIKeyboardLayoutState *layoutState;
@property (nonatomic) bool longPredictionListEnabled;
@property (nonatomic) bool needAutofill;
@property (nonatomic) bool needOneTimeCodeAutofill;
@property (nonatomic) bool needsCandidateMetadata;
@property (nonatomic, copy) NSString *recipientIdentifier;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic, copy) NSString *searchStringForMarkedText;
@property (nonatomic, copy) TIKeyboardSecureCandidateRenderTraits *secureCandidateRenderTraits;
@property (nonatomic) bool secureTextEntry;
@property (nonatomic) int shiftState;
@property (nonatomic) bool shortcutConversionEnabled;
@property (nonatomic) bool shouldSkipCandidateSelection;
@property (nonatomic) bool splitKeyboardMode;
@property (nonatomic, copy) NSArray *supportedPayloadIds;
@property (nonatomic) bool suppressingCandidateSelection;
@property (nonatomic, retain) TITextInputTraits *textInputTraits;
@property (nonatomic) bool userSelectedCurrentCandidate;
@property (nonatomic) bool wordLearningEnabled;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_createTextInputTraitsIfNecessary;
- (bool)autocapitalizationEnabled;
- (unsigned long long)autocapitalizationType;
- (bool)autocorrectionEnabled;
- (bool)autocorrectionListUIAutoDisplayMode;
- (bool)autocorrectionListUIDisplayed;
- (id)autofillContext;
- (unsigned long long)autofillMode;
- (bool)canSendCurrentLocation;
- (bool)candidateSelectionPredictionEnabled;
- (id)clientIdentifier;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentCandidate;
- (id)description;
- (id)documentIdentifier;
- (id)documentState;
- (void)encodeWithCoder:(id)arg1;
- (bool)hardwareKeyboardMode;
- (id)initWithCoder:(id)arg1;
- (id)inputContextHistory;
- (id)inputForMarkedText;
- (id)inputMode;
- (bool)isEqual:(id)arg1;
- (bool)isScreenLocked;
- (id)keyLayout;
- (bool)keyboardEventsLagging;
- (unsigned long long)keyboardType;
- (id)layoutState;
- (bool)longPredictionListEnabled;
- (bool)needAutofill;
- (bool)needOneTimeCodeAutofill;
- (bool)needsCandidateMetadata;
- (id)recipientIdentifier;
- (id)responseContext;
- (id)searchStringForMarkedText;
- (id)secureCandidateRenderTraits;
- (bool)secureTextEntry;
- (void)setAutocapitalizationEnabled:(bool)arg1;
- (void)setAutocapitalizationType:(unsigned long long)arg1;
- (void)setAutocorrectionEnabled:(bool)arg1;
- (void)setAutocorrectionListUIAutoDisplayMode:(bool)arg1;
- (void)setAutocorrectionListUIDisplayed:(bool)arg1;
- (void)setAutofillContext:(id)arg1;
- (void)setAutofillMode:(unsigned long long)arg1;
- (void)setCanSendCurrentLocation:(bool)arg1;
- (void)setCandidateSelectionPredictionEnabled:(bool)arg1;
- (void)setClientIdentifier:(id)arg1;
- (void)setCurrentCandidate:(id)arg1;
- (void)setDocumentIdentifier:(id)arg1;
- (void)setDocumentState:(id)arg1;
- (void)setHardwareKeyboardMode:(bool)arg1;
- (void)setInputContextHistory:(id)arg1;
- (void)setInputForMarkedText:(id)arg1;
- (void)setInputMode:(id)arg1;
- (void)setIsScreenLocked:(bool)arg1;
- (void)setKeyLayout:(id)arg1;
- (void)setKeyboardEventsLagging:(bool)arg1;
- (void)setKeyboardType:(unsigned long long)arg1;
- (void)setLayoutState:(id)arg1;
- (void)setLongPredictionListEnabled:(bool)arg1;
- (void)setNeedAutofill:(bool)arg1;
- (void)setNeedOneTimeCodeAutofill:(bool)arg1;
- (void)setNeedsCandidateMetadata:(bool)arg1;
- (void)setRecipientIdentifier:(id)arg1;
- (void)setResponseContext:(id)arg1;
- (void)setSearchStringForMarkedText:(id)arg1;
- (void)setSecureCandidateRenderTraits:(id)arg1;
- (void)setSecureTextEntry:(bool)arg1;
- (void)setShiftState:(int)arg1;
- (void)setShortcutConversionEnabled:(bool)arg1;
- (void)setShouldSkipCandidateSelection:(bool)arg1;
- (void)setSplitKeyboardMode:(bool)arg1;
- (void)setSupportedPayloadIds:(id)arg1;
- (void)setSuppressingCandidateSelection:(bool)arg1;
- (void)setTextInputTraits:(id)arg1;
- (void)setUserSelectedCurrentCandidate:(bool)arg1;
- (void)setWordLearningEnabled:(bool)arg1;
- (int)shiftState;
- (bool)shortcutConversionEnabled;
- (bool)shouldSkipCandidateSelection;
- (bool)splitKeyboardMode;
- (id)supportedPayloadIds;
- (bool)suppressingCandidateSelection;
- (id)textInputTraits;
- (bool)userSelectedCurrentCandidate;
- (bool)wordLearningEnabled;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
