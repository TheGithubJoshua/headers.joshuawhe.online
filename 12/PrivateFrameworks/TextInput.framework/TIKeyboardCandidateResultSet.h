<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TIKeyboardCandidateResultSet.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TextInput.framework/TIKeyboardCandidateResultSet.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput (1.0)
 */

@interface TIKeyboardCandidateResultSet : NSObject <NSCopying, NSSecureCoding> {
    TIKeyboardCandidate * _acceptedCandidate;
    unsigned long long  _batchCandidateLocation;
    NSArray * _candidates;
    TIKeyboardCandidate * _defaultCandidate;
    bool  _excludedExtensionCandidates;
    unsigned long long  _generatedCandidateCount;
    NSDictionary * _indexTitles;
    unsigned long long  _initialSelectedIndex;
    NSArray * _initiallyHiddenCandidates;
    NSArray * _proactiveTriggers;
    unsigned long long  _selectedHiddenCandidateIndex;
    NSDictionary * _showExtensionCandidates;
    NSDictionary * _sortMethodGroups;
    NSArray * _sortMethods;
    TIKeyboardIntermediateText * _uncommittedText;
}

@property (nonatomic, retain) TIKeyboardCandidate *acceptedCandidate;
@property (nonatomic) unsigned long long batchCandidateLocation;
@property (nonatomic, retain) NSArray *candidates;
@property (nonatomic, copy) TIKeyboardCandidate *defaultCandidate;
@property (nonatomic) bool excludedExtensionCandidates;
@property (nonatomic, readonly) TIKeyboardCandidate *firstCandidate;
@property (nonatomic) unsigned long long generatedCandidateCount;
@property (nonatomic, readonly) bool hasCandidates;
@property (nonatomic, readonly) bool hasMetadata;
@property (nonatomic, readonly) bool hasOnlyCompletionCandidates;
@property (nonatomic, readonly) bool hasOnlyProactiveCandidates;
@property (nonatomic, readonly) bool hasOnlySlottedCandidates;
@property (nonatomic, retain) NSDictionary *indexTitles;
@property (nonatomic) unsigned long long initialSelectedIndex;
@property (nonatomic, retain) NSArray *initiallyHiddenCandidates;
@property (nonatomic, readonly) bool isDummySet;
@property (nonatomic, readonly) NSArray *proactiveTriggers;
@property (nonatomic) unsigned long long selectedHiddenCandidateIndex;
@property (nonatomic, retain) NSDictionary *showExtensionCandidates;
@property (nonatomic, readonly) unsigned long long slottedCandidatesCount;
@property (nonatomic, retain) NSDictionary *sortMethodGroups;
@property (nonatomic, retain) NSArray *sortMethods;
@property (nonatomic, retain) TIKeyboardIntermediateText *uncommittedText;

// Image: /System/Library/PrivateFrameworks/TextInput.framework/TextInput

+ (id)dummySet;
+ (id)setWithCandidates:(id)arg1;
+ (id)setWithCandidates:(id)arg1 initialSelectedIndex:(unsigned long long)arg2 defaultCandidate:(id)arg3 sortMethods:(id)arg4 sortMethodGroups:(id)arg5 indexTitles:(id)arg6 showExtensionCandidates:(id)arg7 initiallyHiddenCandidates:(id)arg8 selectedHiddenCandidateIndex:(unsigned long long)arg9;
+ (id)setWithCandidates:(id)arg1 initialSelectedIndex:(unsigned long long)arg2 defaultCandidate:(id)arg3 sortMethods:(id)arg4 sortMethodGroups:(id)arg5 indexTitles:(id)arg6 showExtensionCandidates:(id)arg7 initiallyHiddenCandidates:(id)arg8 selectedHiddenCandidateIndex:(unsigned long long)arg9 proactiveTriggers:(id)arg10;
+ (id)setWithCandidates:(id)arg1 proactiveTriggers:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)acceptedCandidate;
- (unsigned long long)batchCandidateLocation;
- (id)candidates;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)defaultCandidate;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (bool)excludedExtensionCandidates;
- (id)firstCandidate;
- (unsigned long long)generatedCandidateCount;
- (bool)hasCandidates;
- (bool)hasMetadata;
- (bool)hasOnlyProactiveCandidates;
- (id)indexTitles;
- (id)initWithCandidates:(id)arg1 initialSelectedIndex:(unsigned long long)arg2 defaultCandidate:(id)arg3 sortMethods:(id)arg4 sortMethodGroups:(id)arg5 indexTitles:(id)arg6 showExtensionCandidates:(id)arg7 initiallyHiddenCandidates:(id)arg8 selectedHiddenCandidateIndex:(unsigned long long)arg9 proactiveTriggers:(id)arg10;
- (id)initWithCoder:(id)arg1;
- (unsigned long long)initialSelectedIndex;
- (id)initiallyHiddenCandidates;
- (bool)isDummySet;
- (bool)isEqual:(id)arg1;
- (bool)isSubsetOf:(id)arg1;
- (unsigned long long)positionInCandidateList:(id)arg1;
- (id)proactiveTriggers;
- (unsigned long long)selectedHiddenCandidateIndex;
- (void)setAcceptedCandidate:(id)arg1;
- (void)setBatchCandidateLocation:(unsigned long long)arg1;
- (id)setByAppendingSet:(id)arg1;
- (void)setCandidates:(id)arg1;
- (void)setDefaultCandidate:(id)arg1;
- (void)setExcludedExtensionCandidates:(bool)arg1;
- (void)setGeneratedCandidateCount:(unsigned long long)arg1;
- (void)setIndexTitles:(id)arg1;
- (void)setInitialSelectedIndex:(unsigned long long)arg1;
- (void)setInitiallyHiddenCandidates:(id)arg1;
- (void)setSelectedHiddenCandidateIndex:(unsigned long long)arg1;
- (void)setShowExtensionCandidates:(id)arg1;
- (void)setSortMethodGroups:(id)arg1;
- (void)setSortMethods:(id)arg1;
- (void)setUncommittedText:(id)arg1;
- (id)showExtensionCandidates;
- (id)sortMethodGroups;
- (id)sortMethods;
- (id)uncommittedText;

// Image: /System/Library/PrivateFrameworks/UIKitCore.framework/UIKitCore

- (id)candidateGroupsForSortIndex:(long long)arg1;
- (bool)candidatesForSortIndexShowAlternativeText:(long long)arg1;
- (bool)hasOnlyCompletionCandidates;
- (bool)hasOnlySlottedCandidates;
- (unsigned long long)slottedCandidatesCount;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
