<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MetalFAST9BRIEF.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AutoLoop.framework/MetalFAST9BRIEF.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AutoLoop.framework/AutoLoop (1)
 */

@interface MetalFAST9BRIEF : NSObject {
    <MTLFunction> * _boxBlurKernel;
    <MTLFunction> * _boxBlurKernel_R8;
    <MTLComputePipelineState> * _boxBlurPipelineState;
    <MTLComputePipelineState> * _boxBlurR8PipelineState;
    <MTLSamplerState> * _clampedLinearNonNormSamplerState;
    <MTLFunction> * _compactMPSBuffersKernel;
    <MTLComputePipelineState> * _compactMPSBuffersPipelineState;
    <MTLFunction> * _compute4HistogramKernel;
    <MTLFunction> * _computeHistogramKernel;
    <MTLFunction> * _cumulativeSumSimpleKernel;
    <MTLComputePipelineState> * _cumulativeSumSimplePipelineState;
    <MTLDevice> * _device;
    <MTLFunction> * _extractORBKernel;
    <MTLComputePipelineState> * _extractORBPipelineState;
    <MTLFunction> * _gaussianishBlurKernel;
    <MTLFunction> * _histogramThresholdKernel;
    <MTLComputePipelineState> * _histogramThresholdPipelineState;
    <MTLLibrary> * _library;
    <MTLFunction> * _listKeypoints2Kernel;
    <MTLComputePipelineState> * _listKeypoints2PipelineState;
    <MTLFunction> * _listKeypoints3Kernel;
    <MTLComputePipelineState> * _listKeypoints3PipelineState;
    <MTLFunction> * _listKeypointsKernel;
    <MTLComputePipelineState> * _listKeypointsPipelineState;
    <MTLFunction> * _listKeypointsSimpleKernel;
    <MTLComputePipelineState> * _listKeypointsSimplePipelineState;
    PipelineStatePromise * _pipelineStates;
    <MTLCommandQueue> * _queue;
    <MTLFunction> * _refineKeypointKernel;
    <MTLComputePipelineState> * _refineKeypointPipelineState;
    <MTLFunction> * _response4MapKernel;
    <MTLFunction> * _responseMapKernel;
    <MTLFunction> * _suppress4MapKernel;
    <MTLFunction> * _suppressMapKernel;
    struct __CVMetalTextureCache { } * _textureCache;
}

@property (readonly, retain) <MTLDevice> *device;
@property (readonly, retain) <MTLCommandQueue> *queue;

+ (id)_createMTLBufferFromRectRegionsDesiredKeypoints:(id)arg1 device:(id)arg2 storageMode:(unsigned long long)arg3 maxAllowedDescriptors:(unsigned long long*)arg4;
+ (id)_createMTLBufferFromRects:(id)arg1 device:(id)arg2 storageMode:(unsigned long long)arg3 maxRectWidth:(unsigned long long*)arg4 maxRectHeight:(unsigned long long*)arg5;

- (void).cxx_destruct;
- (void)ORBDescriptorsFromPixelBuffer_metal:(id)arg1 inputBuffer:(struct __CVBuffer { }*)arg2 descriptorBuffer:(id)arg3 refinedKeypointsBuffer:(id)arg4 responseBuffer:(id)arg5 cumulativeKeypointsPerRegionBuffer:(id)arg6 intermediateBuffers:(id)arg7;
- (void)_ORBDescriptorsFromTextures_part1_metal:(id)arg1 inputTexture_RGBA8Uint:(id)arg2 inputTexture_R8Unorm:(id)arg3 responseBuffer:(id)arg4 cumulativeKeypointsPerRegionBuffer:(id)arg5 intermediateBuffers:(id)arg6;
- (void)_ORBDescriptorsFromTextures_part2_metal:(id)arg1 inputTexture_RGBA8Uint:(id)arg2 inputTexture_R8Unorm:(id)arg3 descriptorBuffer:(id)arg4 refinedKeypointsBuffer:(id)arg5 cumulativeKeypointsPerRegionBuffer:(id)arg6 intermediateBuffers:(id)arg7 keypointCount:(int)arg8;
- (void)_boxBlur_metal:(id)arg1 inputImageTexture:(id)arg2 boxBlurredTexture:(id)arg3;
- (void)_computeResponseMap_metal:(id)arg1 inputTexture:(id)arg2 outputTexture:(id)arg3 garbagePixelCount:(unsigned int)arg4;
- (void)_cumulativeSum_metal:(id)arg1 expectedPointsBuffer:(id)arg2 cumulativePointsBuffer:(id)arg3 regionCountBuffer:(id)arg4 keypointCountBuffer:(id)arg5 regionCount:(unsigned long long)arg6;
- (void)_extractORB_metal:(id)arg1 boxBlurredTexture:(id)arg2 keypointLocationsBuffer:(id)arg3 outputORBDescriptorBuffer:(id)arg4 keypointCountBuffer:(id)arg5 keypointCount:(unsigned long long)arg6;
- (void)_gaussianishBlur_metal:(id)arg1 inputTexture:(id)arg2 outputTexture:(id)arg3 offset:(struct CGPoint { double x1; double x2; })arg4;
- (void)_generateHistograms_metal:(id)arg1 suppressedTexture:(id)arg2 tileBuffer:(id)arg3 desiredKeypointCountsBuffer:(id)arg4 thresholdsBuffer:(id)arg5 histogramBuffer:(id)arg6 thresholdRangeBuffer:(id)arg7 keypointsAtChosenThresholdBuffer:(id)arg8 truncatedRegionsBuffer:(id)arg9 tileCount:(unsigned long long)arg10 maxTileHeight:(unsigned long long)arg11;
- (void)_listKeypoints2_metal:(id)arg1 suppressedResponseMapTexture:(id)arg2 tileBuffer:(id)arg3 tileCountBuffer:(id)arg4 tileCount:(unsigned long long)arg5 thresholdsBuffer:(id)arg6 cumulativePointsBuffer:(id)arg7 keypointLocationsBuffer:(id)arg8 keypointResponsesBuffer:(id)arg9 maxRegionHeight:(double)arg10;
- (void)_listKeypoints3_metal:(id)arg1 suppressedResponseMapTexture:(id)arg2 tileBuffer:(id)arg3 tileCountBuffer:(id)arg4 tileCount:(unsigned long long)arg5 thresholdsBuffer:(id)arg6 cumulativePointsBuffer:(id)arg7 keypointLocationsBuffer:(id)arg8 keypointResponsesBuffer:(id)arg9 maxRegionHeight:(double)arg10 maxRegionWidth:(double)arg11;
- (void)_listKeypointsSimple_metal:(id)arg1 suppressedResponseMapTexture:(id)arg2 tileBuffer:(id)arg3 tileCountBuffer:(id)arg4 tileCount:(unsigned long long)arg5 thresholdsBuffer:(id)arg6 cumulativePointsBuffer:(id)arg7 keypointLocationsBuffer:(id)arg8 keypointResponsesBuffer:(id)arg9 desiredKeypointsBuffer:(id)arg10 indexBuffer:(id)arg11;
- (void)_refineKeypoints_metal:(id)arg1 inputImageTexture:(id)arg2 keypointLocationsBuffer:(id)arg3 refinedLocationsBuffer:(id)arg4 keypointCountBuffer:(id)arg5 keypointCount:(unsigned long long)arg6 debugIntermediatesBuffer:(id)arg7 cumulativePointsBuffer:(id)arg8 tileCountBuffer:(id)arg9;
- (void)_suppressResponseMap_metal:(id)arg1 unsuppressedTexture:(id)arg2 suppressedTexture:(id)arg3 garbagePixelCount:(unsigned int)arg4;
- (id)_textureFromPixelBuffer:(struct __CVBuffer { }*)arg1 forcedMetalPixelFormat:(unsigned long long)arg2 forcedWidthDivisior:(int)arg3;
- (void)dealloc;
- (id)device;
- (bool)didFinishInitializationWithTimeout:(double)arg1;
- (id)init;
- (id)queue;
- (struct __CVMetalTextureCache { }*)textureCache;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
