<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VideoFrameWriterQueue.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AutoLoop.framework/VideoFrameWriterQueue.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AutoLoop.framework/AutoLoop (1)
 */

@interface VideoFrameWriterQueue : NSObject {
    bool  _doneQueueing;
    NSConditionLock * _drainConditionLock;
    unsigned int  _drainMaximum;
    unsigned int  _drainMinimum;
    unsigned long long  _drainTarget;
    NSConditionLock * _writingDoneLock;
    bool  canceled;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  endTime;
    NSMutableArray * frameArray;
    NSLock * frameArrayLock;
    NSObject<OS_dispatch_queue> * frameWriteQueue;
    <VideoFrameWriterProgressRecipient> * frameWriterUpdateCallback;
    AVAssetWriterInputPixelBufferAdaptor * inputAdaptor;
    unsigned long long  nextFrameIndex;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  startTime;
    AVAssetWriter * videoWriter;
    NSError * writeError;
    bool  writeSuccess;
    AVAssetWriterInput * writerInput;
}

@property bool canceled;
@property bool doneQueueing;
@property (retain) NSConditionLock *drainConditionLock;
@property unsigned int drainMaximum;
@property unsigned int drainMinimum;
@property unsigned long long drainTarget;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } endTime;
@property (retain) NSMutableArray *frameArray;
@property (nonatomic, retain) NSLock *frameArrayLock;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *frameWriteQueue;
@property <VideoFrameWriterProgressRecipient> *frameWriterUpdateCallback;
@property (nonatomic, retain) AVAssetWriterInputPixelBufferAdaptor *inputAdaptor;
@property unsigned long long nextFrameIndex;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } startTime;
@property (nonatomic, retain) AVAssetWriter *videoWriter;
@property (retain) NSError *writeError;
@property bool writeSuccess;
@property (nonatomic, retain) AVAssetWriterInput *writerInput;
@property (retain) NSConditionLock *writingDoneLock;

- (void).cxx_destruct;
- (void)AddAFrame:(id)arg1;
- (void)DrainIfAbove:(unsigned int)arg1 downTo:(unsigned int)arg2;
- (id)FindFrameWithIndex:(long long)arg1;
- (void)FrameRequestCallback;
- (unsigned long long)FramesInQueue;
- (void)StartWatchingForFrames;
- (bool)WaitForFinish;
- (bool)canceled;
- (void)dealloc;
- (bool)doneQueueing;
- (id)drainConditionLock;
- (unsigned int)drainMaximum;
- (unsigned int)drainMinimum;
- (unsigned long long)drainTarget;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })endTime;
- (id)frameArray;
- (id)frameArrayLock;
- (id)frameWriteQueue;
- (id)frameWriterUpdateCallback;
- (id)initWithOutputURL:(id)arg1 forMovieDimensions:(struct CGSize { double x1; double x2; })arg2 outputTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 startTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4 endTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg5;
- (id)inputAdaptor;
- (unsigned long long)nextFrameIndex;
- (void)setCanceled:(bool)arg1;
- (void)setDoneQueueing:(bool)arg1;
- (void)setDrainConditionLock:(id)arg1;
- (void)setDrainMaximum:(unsigned int)arg1;
- (void)setDrainMinimum:(unsigned int)arg1;
- (void)setDrainTarget:(unsigned long long)arg1;
- (void)setEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setFrameArray:(id)arg1;
- (void)setFrameArrayLock:(id)arg1;
- (void)setFrameWriteQueue:(id)arg1;
- (void)setFrameWriterUpdateCallback:(id)arg1;
- (void)setInputAdaptor:(id)arg1;
- (void)setNextFrameIndex:(unsigned long long)arg1;
- (void)setStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoWriter:(id)arg1;
- (void)setWriteError:(id)arg1;
- (void)setWriteSuccess:(bool)arg1;
- (void)setWriterInput:(id)arg1;
- (void)setWritingDoneLock:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })startTime;
- (id)videoWriter;
- (id)writeError;
- (bool)writeSuccess;
- (id)writerInput;
- (id)writingDoneLock;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
