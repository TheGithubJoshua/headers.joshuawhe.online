<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VideoReader.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AutoLoop.framework/VideoReader.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AutoLoop.framework/AutoLoop (1)
 */

@interface VideoReader : NSObject {
    struct opaqueCMSampleBuffer { } * _lastFrame;
    unsigned int  _pixelFormatOptions;
    bool  _readAheadEnable;
    struct opaqueCMSampleBuffer { } * _readaheadBuf;
    NSCondition * _readaheadLock;
    int  _readaheadState;
    AVAsset * asset;
    AVAssetReader * assetReader;
    NSArray * formatDescriptions;
    float  fps;
    bool  fullRangeVideo;
    unsigned int  imageHeight;
    unsigned int  imageWidth;
    NSError * lastError;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  lastPresentationTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  minFrameDuration;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  preferredTransform;
    float  readLength;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  readLengthT;
    float  readStart;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  readStartT;
    int  timeScale;
    float  trackLength;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  trackLengthT;
    AVAssetReaderOutput * trackOutput;
    float  trackStart;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  trackStartT;
    AVAssetTrack * videoTrack;
}

@property (readonly) AVAsset *asset;
@property (readonly) AVAssetReader *assetReader;
@property (readonly) NSArray *formatDescriptions;
@property (readonly) float fps;
@property (readonly) bool fullRangeVideo;
@property (readonly) unsigned int imageHeight;
@property (readonly) unsigned int imageWidth;
@property (readonly) NSError *lastError;
@property struct opaqueCMSampleBuffer { }*lastFrame;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } lastPresentationTime;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } minFrameDuration;
@property unsigned int pixelFormatOptions;
@property (readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } preferredTransform;
@property (setter=setReadAheadEnable:) bool readAheadEnable;
@property float readLength;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } readLengthT;
@property float readStart;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } readStartT;
@property struct opaqueCMSampleBuffer { }*readaheadBuf;
@property (retain) NSCondition *readaheadLock;
@property int readaheadState;
@property (readonly) int timeScale;
@property (readonly) float trackLength;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } trackLengthT;
@property (readonly) AVAssetReaderOutput *trackOutput;
@property (readonly) float trackStart;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } trackStartT;
@property (readonly) AVAssetTrack *videoTrack;

- (void).cxx_destruct;
- (id)asset;
- (id)assetReader;
- (int)buildAssetReader;
- (void)dealloc;
- (void)fireReadahead;
- (id)formatDescriptions;
- (float)fps;
- (bool)fullRangeVideo;
- (int)getFrame:(struct CGImage {}**)arg1;
- (int)getFrameAsSampleBuf:(struct opaqueCMSampleBuffer {}**)arg1;
- (int)getFrameAtTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 exactTime:(bool)arg2 frame:(struct opaqueCMSampleBuffer {}**)arg3;
- (unsigned int)imageHeight;
- (unsigned int)imageWidth;
- (id)initFromFile:(id)arg1;
- (id)initWithAsset:(id)arg1;
- (id)lastError;
- (struct opaqueCMSampleBuffer { }*)lastFrame;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })lastPresentationTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })minFrameDuration;
- (struct opaqueCMSampleBuffer { }*)nextSampleBuf;
- (unsigned int)pixelFormatOptions;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })preferredTransform;
- (bool)readAheadEnable;
- (float)readLength;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })readLengthT;
- (float)readStart;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })readStartT;
- (struct opaqueCMSampleBuffer { }*)readaheadBuf;
- (id)readaheadLock;
- (int)readaheadState;
- (int)reset;
- (void)setLastFrame:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)setPixelFormatOptions:(unsigned int)arg1;
- (void)setReadAheadEnable:(bool)arg1;
- (void)setReadLength:(float)arg1;
- (void)setReadLengthT:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setReadStart:(float)arg1;
- (void)setReadStartT:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setReadaheadBuf:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)setReadaheadLock:(id)arg1;
- (void)setReadaheadState:(int)arg1;
- (int)skipFrames:(unsigned int)arg1;
- (int)timeScale;
- (float)trackLength;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trackLengthT;
- (id)trackOutput;
- (float)trackStart;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trackStartT;
- (id)videoTrack;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
