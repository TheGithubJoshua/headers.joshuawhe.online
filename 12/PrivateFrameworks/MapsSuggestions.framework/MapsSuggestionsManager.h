<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MapsSuggestionsManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MapsSuggestions.framework/MapsSuggestionsManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MapsSuggestions.framework/MapsSuggestions (1)
 */

@interface MapsSuggestionsManager : NSObject <MapsSuggestionsLocationUpdaterDelegate, MapsSuggestionsObject, MapsSuggestionsSourceDelegate> {
    struct NSMutableDictionary { Class x1; } * _additionalFiltersPerSink;
    GEOAutomobileOptions * _automobileOptions;
    unsigned long long  _countToRequest;
    CLLocation * _currentLocation;
    int  _defaultTansportType;
    MapsSuggestionsCanKicker * _deferredSourcesUpdater;
    bool  _dirtyFlag;
    NSDate * _etaValidUntil;
    MapsSuggestionsCanKicker * _expiredEntryInvalidator;
    MapsSuggestionsFakeSource * _fakeSource;
    NSObject<OS_dispatch_queue> * _gatheringQueue;
    struct NSArray { Class x1; } * _latestResults;
    <MapsSuggestionsLocationUpdater> * _locationUpdater;
    int  _mapType;
    NSHashTable * _sinks;
    struct NSMutableSet { Class x1; } * _sources;
    struct NSMutableDictionary { Class x1; } * _storage;
    NSObject<OS_dispatch_queue> * _storageQueue;
    <MapsSuggestionsStrategy> * _strategy;
    long long  _style;
    MapsSuggestionsTracker * _tracker;
    MapsSuggestionsCanKicker * _wipeStaleETAWiper;
}

@property (nonatomic, retain) GEOAutomobileOptions *automobileOptions;
@property (retain) CLLocation *currentLocation;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) MapsSuggestionsFakeSource *fakeSource;
@property (readonly) unsigned long long hash;
@property (nonatomic) <MapsSuggestionsLocationUpdater> *locationUpdater;
@property (nonatomic) int mapType;
@property (nonatomic, retain) <MapsSuggestionsStrategy> *strategy;
@property (nonatomic) long long style;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *uniqueName;

- (void).cxx_destruct;
- (unsigned long long)_addOrUpdateSuggestionEntries:(struct NSArray { Class x1; }*)arg1 source:(struct NSString { Class x1; }*)arg2;
- (unsigned long long)_deleteEntries:(struct NSArray { Class x1; }*)arg1 source:(struct NSString { Class x1; }*)arg2;
- (struct NSArray { Class x1; }*)_filteredEntries:(struct NSArray { Class x1; }*)arg1 forSink:(struct NSString { Class x1; }*)arg2 limit:(unsigned long long)arg3;
- (bool)_loadStorageFromFile:(id)arg1;
- (struct NSArray { Class x1; }*)_pruneExpiredFromEntries:(struct NSArray { Class x1; }*)arg1;
- (void)_pruneExpiredSourceEntries;
- (bool)_removeEntry:(id)arg1;
- (bool)_removeEntry:(id)arg1 sourceName:(struct NSString { Class x1; }*)arg2;
- (void)_restartLocationUpdaterIfNeeded;
- (void)_scheduleInvalidateSinksOnFirstExpiredOfEntries:(struct NSArray { Class x1; }*)arg1;
- (void)_sendInvalidateToAllSinks;
- (bool)_sink:(struct NSString { Class x1; }*)arg1 allowsEntry:(id)arg2;
- (void)_startAllSources;
- (void)_startLocationUpdater;
- (void)_startSource:(id)arg1;
- (void)_stopAllSources;
- (void)_stopLocationUpdater;
- (void)_updateAllSourcesOnce;
- (void)_updateCurrentLocation:(id)arg1;
- (bool)_updateResult;
- (void)_updateSource:(id)arg1 forType:(long long)arg2 repeat:(bool)arg3;
- (void)_updateSource:(id)arg1 repeat:(bool)arg2;
- (void)_wipeStaleETAs;
- (void)addAdditionalFilter:(id)arg1 forSink:(struct NSString { Class x1; }*)arg2;
- (unsigned long long)addOrUpdateSuggestionEntries:(struct NSArray { Class x1; }*)arg1 source:(struct NSString { Class x1; }*)arg2;
- (unsigned long long)addOrUpdateSuggestionEntries:(struct NSArray { Class x1; }*)arg1 source:(struct NSString { Class x1; }*)arg2 deleteMissing:(bool)arg3;
- (bool)attachSink:(id)arg1;
- (bool)attachSource:(id)arg1;
- (id)automobileOptions;
- (void)awaitGatheringQueue;
- (void)awaitStorageQueue;
- (unsigned long long)clearAllEntriesFromSource:(struct NSString { Class x1; }*)arg1;
- (void)clearResults;
- (id)currentBestLocation;
- (id)currentLocation;
- (void)dealloc;
- (unsigned long long)deleteEntries:(struct NSArray { Class x1; }*)arg1 source:(struct NSString { Class x1; }*)arg2;
- (bool)detachSink:(id)arg1;
- (bool)detachSource:(id)arg1;
- (id)dumpStorage;
- (id)fakeSource;
- (void)hintRefreshOfType:(long long)arg1;
- (id)initWithStrategy:(id)arg1 locationUpdater:(id)arg2 ETARequirements:(id)arg3;
- (bool)loadStorageFromFile:(id)arg1;
- (bool)loadStorageFromFile:(id)arg1 callback:(id /* block */)arg2 callbackQueue:(id)arg3;
- (id)locationUpdater;
- (int)mapType;
- (void)removeAdditionalFilter:(id)arg1 forSink:(struct NSString { Class x1; }*)arg2;
- (bool)removeEntry:(id)arg1 behavior:(long long)arg2 handler:(id /* block */)arg3;
- (bool)saveStorageToFile:(id)arg1;
- (void)scheduleUpdateAllSourcesOnce;
- (void)sendInvalidateToAllSinks;
- (void)setAutomobileOptions:(id)arg1;
- (void)setCurrentLocation:(id)arg1;
- (void)setFakeSource:(id)arg1;
- (void)setLocationUpdater:(id)arg1;
- (void)setMapType:(int)arg1;
- (void)setStrategy:(id)arg1;
- (void)setStyle:(long long)arg1;
- (void)setTitleFormatter:(id)arg1 forType:(long long)arg2;
- (struct NSSet { Class x1; }*)sinks;
- (struct NSSet { Class x1; }*)sources;
- (struct NSDictionary { Class x1; }*)storage;
- (struct NSArray { Class x1; }*)storageForSource:(id)arg1;
- (id)strategy;
- (long long)style;
- (bool)topSuggestionsForSink:(id)arg1 count:(unsigned long long)arg2 transportType:(int)arg3 callback:(id /* block */)arg4 onQueue:(id)arg5;
- (void)trackerRefreshedETAsUntil:(id)arg1;
- (struct NSString { Class x1; }*)uniqueName;
- (void)updateLocation:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
