<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXMIDIManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AccessibilityUtilities.framework/AXMIDIManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities (1.0)
 */

@interface AXMIDIManager : NSObject <AXMIDIDeviceProtocol> {
    NSString * _clientIdentifier;
    NSMutableSet * _devices;
    id /* block */  _eventHandler;
    unsigned int  _midiClientRef;
    unsigned int  _midiInputPortRef;
    AXMIDIParser * _parser;
}

@property (nonatomic, retain) NSString *clientIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableSet *devices;
@property (nonatomic, copy) id /* block */ eventHandler;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned int midiClientRef;
@property (nonatomic) unsigned int midiInputPortRef;
@property (nonatomic, retain) AXMIDIParser *parser;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_addMidiDestination:(unsigned int)arg1;
- (void)_addMidiEntity:(unsigned int)arg1;
- (void)_addMidiSource:(unsigned int)arg1;
- (id)_deviceForMidiDevice:(unsigned int)arg1 addIfNeeded:(bool)arg2;
- (void)_handleIOErrorNotification:(struct MIDIIOErrorNotification { int x1; unsigned int x2; unsigned int x3; int x4; }*)arg1;
- (void)_handleObjectAddedNotification:(struct MIDIObjectAddRemoveNotification { int x1; unsigned int x2; unsigned int x3; int x4; unsigned int x5; int x6; }*)arg1;
- (void)_handleObjectRemovedNotification:(struct MIDIObjectAddRemoveNotification { int x1; unsigned int x2; unsigned int x3; int x4; unsigned int x5; int x6; }*)arg1;
- (void)_handlePropertyChangedNotification:(struct MIDIObjectPropertyChangeNotification { int x1; unsigned int x2; unsigned int x3; int x4; struct __CFString {} *x5; }*)arg1;
- (void)_handleSerialPortOwnerChangedNotification:(struct MIDIObjectPropertyChangeNotification { int x1; unsigned int x2; unsigned int x3; int x4; struct __CFString {} *x5; }*)arg1;
- (void)_handleThruConnectionsChangedNotification:(struct MIDIObjectPropertyChangeNotification { int x1; unsigned int x2; unsigned int x3; int x4; struct __CFString {} *x5; }*)arg1;
- (id)_nameForMidiObjectType:(int)arg1;
- (void)_removeMidiDestination:(unsigned int)arg1;
- (void)_removeMidiDevice:(unsigned int)arg1;
- (void)_removeMidiEntity:(unsigned int)arg1;
- (void)_removeMidiSource:(unsigned int)arg1;
- (void)_resetAndDetectDevices;
- (id)clientIdentifier;
- (void)dealloc;
- (void)device:(id)arg1 didAddEntity:(id)arg2;
- (void)device:(id)arg1 didRemoveEntity:(id)arg2;
- (void)device:(id)arg1 entity:(id)arg2 didAddDestination:(id)arg3;
- (void)device:(id)arg1 entity:(id)arg2 didAddSource:(id)arg3;
- (void)device:(id)arg1 entity:(id)arg2 didRemoveDestination:(id)arg3;
- (void)device:(id)arg1 entity:(id)arg2 didRemoveSource:(id)arg3;
- (id)devices;
- (id /* block */)eventHandler;
- (id)init;
- (id)initWithIdentifier:(id)arg1 eventHandler:(id /* block */)arg2;
- (unsigned int)midiClientRef;
- (unsigned int)midiInputPortRef;
- (id)parser;
- (void)printAttachedDevices;
- (void)setClientIdentifier:(id)arg1;
- (void)setDevices:(id)arg1;
- (void)setEventHandler:(id /* block */)arg1;
- (void)setMidiClientRef:(unsigned int)arg1;
- (void)setMidiInputPortRef:(unsigned int)arg1;
- (void)setParser:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
