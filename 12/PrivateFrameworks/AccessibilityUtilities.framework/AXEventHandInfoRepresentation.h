<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXEventHandInfoRepresentation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AccessibilityUtilities.framework/AXEventHandInfoRepresentation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities (1.0)
 */

@interface AXEventHandInfoRepresentation : NSObject <AXEventRepresentationDescription, NSCopying, NSSecureCoding> {
    unsigned int  _additionalHandEventFlagsForGeneratedEvents;
    unsigned short  _currentFingerCount;
    unsigned int  _eventType;
    unsigned int  _handEventMask;
    unsigned int  _handIdentity;
    unsigned int  _handIndex;
    struct CGPoint { 
        double x; 
        double y; 
    }  _handPosition;
    unsigned short  _initialFingerCount;
    NSArray * _paths;
    unsigned char  _swipe;
    unsigned char  _systemGesturePossible;
}

@property (nonatomic) unsigned int additionalHandEventFlagsForGeneratedEvents;
@property (nonatomic) unsigned short currentFingerCount;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned int eventType;
@property (nonatomic) unsigned int handEventMask;
@property (nonatomic) unsigned int handIdentity;
@property (nonatomic) unsigned int handIndex;
@property (nonatomic) struct CGPoint { double x1; double x2; } handPosition;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned short initialFingerCount;
@property (nonatomic, readonly) bool isStylus;
@property (nonatomic, readonly) unsigned long long length;
@property (nonatomic, retain) NSArray *paths;
@property (readonly) Class superclass;
@property (nonatomic) unsigned char swipe;
@property (nonatomic) unsigned char systemGesturePossible;

+ (id)representationWithHandInfo:(struct { int x1; unsigned short x2; unsigned short x3; float x4; float x5; float x6; float x7; float x8; float x9; unsigned char x10; unsigned char x11; unsigned char x12; struct { unsigned char x_13_1_1; unsigned char x_13_1_2; unsigned char x_13_1_3; float x_13_1_4; float x_13_1_5; struct CGPoint { double x_6_2_1; double x_6_2_2; } x_13_1_6; unsigned int x_13_1_7; void *x_13_1_8; } x13[0]; }*)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)accessibilityEventRepresentationTabularDescription;
- (unsigned int)additionalHandEventFlagsForGeneratedEvents;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned short)currentFingerCount;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (unsigned int)eventType;
- (unsigned int)handEventMask;
- (unsigned int)handIdentity;
- (unsigned int)handIndex;
- (struct CGPoint { double x1; double x2; })handPosition;
- (id)initWithCoder:(id)arg1;
- (unsigned short)initialFingerCount;
- (bool)isStylus;
- (unsigned long long)length;
- (id)paths;
- (void)setAdditionalHandEventFlagsForGeneratedEvents:(unsigned int)arg1;
- (void)setCurrentFingerCount:(unsigned short)arg1;
- (void)setEventType:(unsigned int)arg1;
- (void)setHandEventMask:(unsigned int)arg1;
- (void)setHandIdentity:(unsigned int)arg1;
- (void)setHandIndex:(unsigned int)arg1;
- (void)setHandPosition:(struct CGPoint { double x1; double x2; })arg1;
- (void)setInitialFingerCount:(unsigned short)arg1;
- (void)setPaths:(id)arg1;
- (void)setSwipe:(unsigned char)arg1;
- (void)setSystemGesturePossible:(unsigned char)arg1;
- (unsigned char)swipe;
- (unsigned char)systemGesturePossible;
- (void)writeToHandInfo:(struct { int x1; unsigned short x2; unsigned short x3; float x4; float x5; float x6; float x7; float x8; float x9; unsigned char x10; unsigned char x11; unsigned char x12; struct { unsigned char x_13_1_1; unsigned char x_13_1_2; unsigned char x_13_1_3; float x_13_1_4; float x_13_1_5; struct CGPoint { double x_6_2_1; double x_6_2_2; } x_13_1_6; unsigned int x_13_1_7; void *x_13_1_8; } x13[0]; }*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
