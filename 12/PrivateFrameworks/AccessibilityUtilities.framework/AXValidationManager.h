<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXValidationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AccessibilityUtilities.framework/AXValidationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities (1.0)
 */

@interface AXValidationManager : NSObject {
    NSMutableArray * _consoleErrorMessages;
    NSMutableArray * _consoleWarningMessages;
    bool  _debugBuild;
    bool  _forceDoNotReport;
    unsigned long long  _numberOfValidationErrors;
    unsigned long long  _numberOfValidationWarnings;
    NSString * _overrideProcessName;
    bool  _shouldCrashOnError;
    bool  _shouldLogToConsole;
    bool  _shouldPerformValidationChecks;
    bool  _shouldReportToServer;
    <AXValidationReportingServices> * _validationReportingServices;
    NSString * _validationTargetName;
}

@property (nonatomic, retain) NSMutableArray *consoleErrorMessages;
@property (nonatomic, retain) NSMutableArray *consoleWarningMessages;
@property (getter=isDebugBuild, nonatomic) bool debugBuild;
@property (nonatomic) bool forceDoNotReport;
@property (nonatomic) unsigned long long numberOfValidationErrors;
@property (nonatomic) unsigned long long numberOfValidationWarnings;
@property (nonatomic, copy) NSString *overrideProcessName;
@property (nonatomic) bool shouldCrashOnError;
@property (nonatomic) bool shouldLogToConsole;
@property (nonatomic) bool shouldPerformValidationChecks;
@property (nonatomic) bool shouldReportToServer;
@property (nonatomic, retain) <AXValidationReportingServices> *validationReportingServices;
@property (nonatomic, copy) NSString *validationTargetName;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)_clearState;
- (bool)_client:(id)arg1 validateClass:(id)arg2 hasClassMethod:(id)arg3 withFullSignature:(const char *)arg4 argList:(char *)arg5;
- (bool)_client:(id)arg1 validateClass:(id)arg2 hasMethod:(id)arg3 methodType:(int)arg4;
- (bool)_client:(id)arg1 validateClass:(id)arg2 hasMethod:(id)arg3 methodType:(int)arg4 returnType:(id)arg5 arguments:(id)arg6;
- (void)_generateWarningsForMethodType:(int)arg1 onClass:(Class)arg2 superclassMethods:(struct objc_method {}**)arg3 numberOfSuperclassMethods:(unsigned int)arg4;
- (void)_generateWarningsForPrefixedMethodNames:(id)arg1 client:(id)arg2 methodType:(int)arg3 methodName:(id)arg4 className:(id)arg5;
- (void)_generateWarningsOnSafeCategoryClass:(Class)arg1;
- (void)_iterateMethodsOfType:(int)arg1 onClass:(Class)arg2 block:(id /* block */)arg3;
- (id)_nameForMethod:(struct objc_method { }*)arg1;
- (void)_printConsoleReport:(bool)arg1 isDelayed:(bool)arg2;
- (void)_resetState;
- (bool)client:(id)arg1 validateClass:(id)arg2;
- (bool)client:(id)arg1 validateClass:(id)arg2 conformsToProtocol:(id)arg3;
- (bool)client:(id)arg1 validateClass:(id)arg2 hasClassMethod:(id)arg3 withFullSignature:(const char *)arg4;
- (bool)client:(id)arg1 validateClass:(id)arg2 hasInstanceMethod:(id)arg3 withFullSignature:(const char *)arg4;
- (bool)client:(id)arg1 validateClass:(id)arg2 hasInstanceMethod:(id)arg3 withFullSignature:(const char *)arg4 argList:(char *)arg5;
- (bool)client:(id)arg1 validateClass:(id)arg2 hasInstanceVariable:(id)arg3 withType:(const char *)arg4;
- (bool)client:(id)arg1 validateClass:(id)arg2 hasProperty:(id)arg3 withType:(const char *)arg4;
- (bool)client:(id)arg1 validateClass:(id)arg2 isKindOfClass:(id)arg3;
- (bool)client:(id)arg1 validateProtocol:(id)arg2 conformsToProtocol:(id)arg3;
- (bool)client:(id)arg1 validateProtocol:(id)arg2 hasMethod:(id)arg3 isInstanceMethod:(bool)arg4 isRequired:(bool)arg5;
- (bool)client:(id)arg1 validateProtocol:(id)arg2 hasOptionalClassMethod:(id)arg3;
- (bool)client:(id)arg1 validateProtocol:(id)arg2 hasOptionalInstanceMethod:(id)arg3;
- (bool)client:(id)arg1 validateProtocol:(id)arg2 hasProperty:(id)arg3;
- (bool)client:(id)arg1 validateProtocol:(id)arg2 hasRequiredClassMethod:(id)arg3;
- (bool)client:(id)arg1 validateProtocol:(id)arg2 hasRequiredInstanceMethod:(id)arg3;
- (id)consoleErrorMessages;
- (id)consoleWarningMessages;
- (bool)forceDoNotReport;
- (id)init;
- (void)installSafeCategories:(id /* block */)arg1 afterDelay:(double)arg2 validationTargetName:(id)arg3 overrideProcessName:(id)arg4;
- (bool)installSafeCategory:(id)arg1;
- (bool)installSafeCategory:(id)arg1 canInteractWithTargetClass:(bool)arg2;
- (bool)isDebugBuild;
- (unsigned long long)numberOfValidationErrors;
- (unsigned long long)numberOfValidationWarnings;
- (id)overrideProcessName;
- (void)performValidations:(id /* block */)arg1 withPreValidationHandler:(id /* block */)arg2 postValidationHandler:(id /* block */)arg3;
- (void)performValidations:(id /* block */)arg1 withPreValidationHandler:(id /* block */)arg2 postValidationHandler:(id /* block */)arg3 safeCategoryInstallationHandler:(id /* block */)arg4;
- (void)sendExceptionForInstallingSafeCategory:(id)arg1 onTarget:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendExceptionForSafeBlock:(id)arg1 overrideProcessName:(id)arg2;
- (void)sendExceptionForSafeIVarKey:(id)arg1 onTarget:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendExceptionForSafeValueKey:(id)arg1 onTarget:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendFailedAssertionWithErrorMessage:(id)arg1 overrideProcessName:(id)arg2;
- (void)sendFailedTestCase:(id)arg1 withTag:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendGenericReport:(id)arg1 withTag:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendValidateExceptionForClass:(id)arg1 conformsToProtocol:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 errorMessage:(id)arg2 overrideProcessName:(id)arg3;
- (void)sendValidateExceptionForClass:(id)arg1 hasClassMethod:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 hasInstanceMethod:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 hasInstanceVariable:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 hasProperty:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForClass:(id)arg1 isKindOfClass:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForProtocol:(id)arg1 conformsToProtocol:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForProtocol:(id)arg1 hasMethod:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidateExceptionForProtocol:(id)arg1 hasProperty:(id)arg2 errorMessage:(id)arg3 overrideProcessName:(id)arg4;
- (void)sendValidationSuccessForProcessName:(id)arg1;
- (void)setConsoleErrorMessages:(id)arg1;
- (void)setConsoleWarningMessages:(id)arg1;
- (void)setDebugBuild:(bool)arg1;
- (void)setForceDoNotReport:(bool)arg1;
- (void)setNumberOfValidationErrors:(unsigned long long)arg1;
- (void)setNumberOfValidationWarnings:(unsigned long long)arg1;
- (void)setOverrideProcessName:(id)arg1;
- (void)setShouldCrashOnError:(bool)arg1;
- (void)setShouldLogToConsole:(bool)arg1;
- (void)setShouldPerformValidationChecks:(bool)arg1;
- (void)setShouldReportToServer:(bool)arg1;
- (void)setValidationReportingServices:(id)arg1;
- (void)setValidationTargetName:(id)arg1;
- (bool)shouldCrashOnError;
- (bool)shouldLogToConsole;
- (bool)shouldPerformValidationChecks;
- (bool)shouldReportToServer;
- (bool)validateClass:(id)arg1;
- (bool)validateClass:(id)arg1 conformsToProtocol:(id)arg2;
- (bool)validateClass:(id)arg1 hasClassMethod:(id)arg2 withFullSignature:(const char *)arg3;
- (bool)validateClass:(id)arg1 hasInstanceMethod:(id)arg2 withFullSignature:(const char *)arg3;
- (bool)validateClass:(id)arg1 hasInstanceVariable:(id)arg2 withType:(const char *)arg3;
- (bool)validateClass:(id)arg1 hasProperty:(id)arg2 withType:(const char *)arg3;
- (bool)validateClass:(id)arg1 isKindOfClass:(id)arg2;
- (bool)validateProtocol:(id)arg1 conformsToProtocol:(id)arg2;
- (bool)validateProtocol:(id)arg1 hasMethod:(id)arg2 isInstanceMethod:(bool)arg3 isRequired:(bool)arg4;
- (bool)validateProtocol:(id)arg1 hasOptionalClassMethod:(id)arg2;
- (bool)validateProtocol:(id)arg1 hasOptionalInstanceMethod:(id)arg2;
- (bool)validateProtocol:(id)arg1 hasProperty:(id)arg2;
- (bool)validateProtocol:(id)arg1 hasRequiredClassMethod:(id)arg2;
- (bool)validateProtocol:(id)arg1 hasRequiredInstanceMethod:(id)arg2;
- (id)validationReportingServices;
- (id)validationTargetName;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
