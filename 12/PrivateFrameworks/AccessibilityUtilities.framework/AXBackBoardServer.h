<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXBackBoardServer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AccessibilityUtilities.framework/AXBackBoardServer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities (1.0)
 */

@interface AXBackBoardServer : AXServer {
    NSMutableArray * _eventListeners;
    bool  _overrideGestureRecognition;
    NSMutableArray * _zoomAttributeListeners;
}

@property (nonatomic) bool inCheckerBoardMode;
@property (nonatomic) bool inPreboardMode;
@property (nonatomic) bool invertColorsEnabled;
@property (nonatomic) bool sessionIsLoginSession;

+ (id)server;

- (void).cxx_destruct;
- (void)_didConnectToServer;
- (id)_handleEventListener:(id)arg1;
- (id)_handleZoomAttributesListener:(id)arg1;
- (id)_serviceName;
- (bool)_shouldDispatchLocally;
- (id)_springboardParametersForGuidedAccessAvailability;
- (void)_willClearServer;
- (int)accessibilityAssistiveTouchPID;
- (int)accessibilityUIServicePID;
- (bool)adaptationEnabled;
- (void)adjustSystemZoom:(int)arg1;
- (id)backboardServiceInstance;
- (bool)blueLightStatusEnabled;
- (bool)brightnessFiltersEnabled;
- (unsigned int)contextIdForPosition:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned int)contextIdHostingContextId:(unsigned int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromContextId:(unsigned int)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromContextId:(unsigned int)arg2 toContextId:(unsigned int)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toContextId:(unsigned int)arg2;
- (unsigned long long)currentGuidedAccessModeAndSessionApp:(id*)arg1;
- (void)dealloc;
- (void)disableBrightnessFilters;
- (unsigned long long)guidedAccessAvailability;
- (id)guidedAccessEffectiveAppBundleIdentifier;
- (void)guidedAccessEffectiveAppBundleIdentifier:(id /* block */)arg1;
- (id)guidedAccessIgnoredRegions;
- (void)homeClickSwallowedForGuidedAccess;
- (bool)inCheckerBoardMode;
- (bool)inPreboardMode;
- (id)init;
- (bool)invertColorsEnabled;
- (bool)isGuidedAccessActive;
- (bool)isGuidedAccessInWorkspace;
- (bool)isGuidedAccessSelfLockedToApp:(id)arg1;
- (bool)isGuidedAccessUnmanagedSelfLocked;
- (void)jetsamThirdPartyApps;
- (bool)loadGAXBundleForUnmanagedASAM;
- (id)performGuidedAccessAutomationCommand:(id)arg1 error:(id*)arg2;
- (void)postEvent:(id)arg1 afterNamedTap:(id)arg2 includeTaps:(id)arg3;
- (void)postEvent:(id)arg1 systemEvent:(bool)arg2;
- (void)registerAccessibilityUIServicePID:(int)arg1;
- (void)registerAssistiveTouchPID:(int)arg1;
- (void)registerGestureConflictWithZoom:(id)arg1;
- (void)registerSiriViewServicePID:(int)arg1;
- (void)registerZoomAttributesChangeHandler:(id /* block */)arg1;
- (void)requestGuidedAccessSessionEndWithCompletion:(id /* block */)arg1;
- (void)requestGuidedAccessSessionStartWithConfigurationDictionary:(id)arg1 completion:(id /* block */)arg2;
- (void)resetAccessibilityFeatures;
- (void)restoreCachedBrightnessFilters;
- (bool)sessionIsLoginSession;
- (void)setAccessibilityPreferenceAsMobile:(id)arg1 value:(id)arg2 notification:(id)arg3;
- (void)setCapsLockLightOn:(bool)arg1;
- (void)setHearingAidControlIsVisible:(bool)arg1;
- (void)setInCheckerBoardMode:(bool)arg1;
- (void)setInPreboardMode:(bool)arg1;
- (void)setInvertColorsEnabled:(bool)arg1;
- (void)setLockScreenDimTimerEnabled:(bool)arg1;
- (void)setSessionIsLoginSession:(bool)arg1;
- (void)setSwitchControlHasScreenSwitch:(bool)arg1;
- (void)setSwitchControlRendersDeviceUnusable:(bool)arg1;
- (void)setVoiceOverItemChooserVisible:(bool)arg1;
- (void)setZoomInitialFocusRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromContext:(unsigned int)arg2;
- (bool)supportsAccessibilityDisplayFilters;
- (bool)supportsAdaptation;
- (bool)supportsBlueLightReduction;
- (void)toggleGuidedAccess;
- (bool)tripleClickHomeButtonPress;
- (void)userEventOccurred;
- (void)zoomAttributesChanged:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })zoomInitialFocusRectWithQueryingContext:(unsigned int)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
