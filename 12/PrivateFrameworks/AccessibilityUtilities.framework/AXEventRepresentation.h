<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXEventRepresentation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AccessibilityUtilities.framework/AXEventRepresentation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities (1.0)
 */

@interface AXEventRepresentation : NSObject <AXEventRepresentationDescription, NSCopying, NSSecureCoding> {
    NSData * _HIDAttributeData;
    unsigned long long  _HIDTime;
    AXEventAccelerometerInfoRepresentation * _accelerometerInfo;
    AXEventData * _accessibilityData;
    unsigned long long  _additionalFlags;
    NSString * _clientId;
    unsigned int  _contextId;
    struct __IOHIDEvent { } * _creatorHIDEvent;
    NSData * _data;
    unsigned int  _didUpdateMask;
    int  _flags;
    AXEventGameControllerInfoRepresentation * _gameControllerInfo;
    long long  _generationCount;
    AXEventHandInfoRepresentation * _handInfo;
    AXEventIOSMACPointerInfoRepresentation * _iosmacPointerInfo;
    bool  _isBuiltIn;
    bool  _isDisplayIntegrated;
    bool  _isGeneratedEvent;
    AXEventKeyInfoRepresentation * _keyInfo;
    struct CGPoint { 
        double x; 
        double y; 
    }  _location;
    unsigned int  _originalType;
    int  _pid;
    AXEventPointerInfoRepresentation * _pointerControllerInfo;
    bool  _redirectEvent;
    long long  _scrollAmount;
    unsigned long long  _senderID;
    bool  _setTouchFlagOnSubevents;
    int  _subtype;
    bool  _systemDrag;
    unsigned int  _taskPort;
    unsigned long long  _time;
    unsigned int  _type;
    bool  _useOriginalHIDTime;
    unsigned int  _willUpdateMask;
    void * _window;
    struct CGPoint { 
        double x; 
        double y; 
    }  _windowLocation;
}

@property (nonatomic, retain) NSData *HIDAttributeData;
@property (nonatomic) unsigned long long HIDTime;
@property (nonatomic, retain) AXEventAccelerometerInfoRepresentation *accelerometerInfo;
@property (nonatomic, retain) AXEventData *accessibilityData;
@property (nonatomic) unsigned long long additionalFlags;
@property (nonatomic, retain) NSString *clientId;
@property (nonatomic) unsigned int contextId;
@property (nonatomic, retain) struct __IOHIDEvent { }*creatorHIDEvent;
@property (nonatomic, retain) NSData *data;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned int didUpdateMask;
@property (nonatomic, readonly) unsigned long long fingerCount;
@property (nonatomic) int flags;
@property (nonatomic, retain) AXEventGameControllerInfoRepresentation *gameControllerInfo;
@property (nonatomic) long long generationCount;
@property (nonatomic, retain) AXEventHandInfoRepresentation *handInfo;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) AXEventIOSMACPointerInfoRepresentation *iosmacPointerInfo;
@property (nonatomic) bool isBuiltIn;
@property (nonatomic, readonly) bool isCancel;
@property (nonatomic, readonly) bool isChordChange;
@property (nonatomic) bool isDisplayIntegrated;
@property (nonatomic) bool isGeneratedEvent;
@property (nonatomic, readonly) bool isInRange;
@property (nonatomic, readonly) bool isInRangeLift;
@property (nonatomic, readonly) bool isLift;
@property (nonatomic, readonly) bool isMove;
@property (nonatomic, readonly) bool isTouchDown;
@property (nonatomic, readonly) bool isUpdate;
@property (nonatomic, retain) AXEventKeyInfoRepresentation *keyInfo;
@property (nonatomic) struct CGPoint { double x1; double x2; } location;
@property (nonatomic) unsigned int originalType;
@property (nonatomic) int pid;
@property (nonatomic, retain) AXEventPointerInfoRepresentation *pointerControllerInfo;
@property (getter=isRedirectEvent, nonatomic) bool redirectEvent;
@property (nonatomic) long long scrollAmount;
@property (nonatomic) unsigned long long senderID;
@property (nonatomic) bool setTouchFlagOnSubevents;
@property (nonatomic) int subtype;
@property (readonly) Class superclass;
@property (getter=isSystemDrag, nonatomic) bool systemDrag;
@property (nonatomic) unsigned int taskPort;
@property (nonatomic) unsigned long long time;
@property (nonatomic) unsigned int type;
@property (nonatomic) bool useOriginalHIDTime;
@property (nonatomic, readonly) bool willBeUpdated;
@property (nonatomic) unsigned int willUpdateMask;
@property (nonatomic) void*window;
@property (nonatomic) struct CGPoint { double x1; double x2; } windowLocation;

+ (void)_appendKeyInfoToMediaKey:(id)arg1 usage:(long long)arg2 downEvent:(bool)arg3;
+ (id)_digitizerRepresentation:(struct __IOHIDEvent { }*)arg1 hidStreamIdentifier:(id)arg2;
+ (id)_gameControllerEvent:(struct __IOHIDEvent { }*)arg1;
+ (id)_keyboardButtonEvent:(struct __IOHIDEvent { }*)arg1;
+ (id)_pointerControllerEvent:(struct __IOHIDEvent { }*)arg1;
+ (id)_wheelEvent:(struct __IOHIDEvent { }*)arg1;
+ (id)accelerometerRepresentation:(id)arg1;
+ (id)buttonRepresentationWithType:(unsigned int)arg1;
+ (id)cancelEventForPathIndexMask:(unsigned int)arg1;
+ (id)iosmacPointerRepresentationWithTypeWithPointerInfo:(id)arg1;
+ (id)keyRepresentationWithType:(unsigned int)arg1;
+ (id)representationWithData:(id)arg1;
+ (id)representationWithEventRecord:(struct { int x1; int x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; unsigned int x5; unsigned long long x6; void *x7; int x8; int x9; unsigned int x10; unsigned long long x11; unsigned char x12[0]; }*)arg1;
+ (id)representationWithHIDEvent:(struct __IOHIDEvent { }*)arg1 hidStreamIdentifier:(id)arg2;
+ (id)representationWithHIDEvent:(struct __IOHIDEvent { }*)arg1 hidStreamIdentifier:(id)arg2 clientID:(id)arg3 taskPort:(unsigned int)arg4;
+ (id)representationWithLocation:(struct CGPoint { double x1; double x2; })arg1 windowLocation:(struct CGPoint { double x1; double x2; })arg2 handInfo:(id)arg3;
+ (id)representationWithType:(unsigned int)arg1 subtype:(int)arg2 time:(unsigned long long)arg3 location:(struct CGPoint { double x1; double x2; })arg4 windowLocation:(struct CGPoint { double x1; double x2; })arg5 handInfo:(id)arg6;
+ (bool)supportsSecureCoding;
+ (id)touchRepresentationWithHandType:(unsigned int)arg1 location:(struct CGPoint { double x1; double x2; })arg2;

- (void).cxx_destruct;
- (id)HIDAttributeData;
- (unsigned long long)HIDTime;
- (bool)_HIDEventIsAccessibilityEvent:(struct __IOHIDEvent { }*)arg1;
- (id)_accessibilityDataFromRealEvent:(struct __IOHIDEvent { }*)arg1;
- (struct __IOHIDEvent { }*)_accessibilityEventFromRealEvent:(struct __IOHIDEvent { }*)arg1;
- (void)_applyAccessibilityDataToRealEvent:(struct __IOHIDEvent { }*)arg1;
- (unsigned int)_contextIDFromHIDEvent:(struct __IOHIDEvent { }*)arg1;
- (unsigned long long)_machTimeForHIDEventRef;
- (struct __IOHIDEvent { }*)_newAccelerometerHIDEventRef;
- (struct __IOHIDEvent { }*)_newButtonHIDEventRefWithType:(unsigned int)arg1;
- (struct __IOHIDEvent { }*)_newHandHIDEventRef;
- (struct __IOHIDEvent { }*)_newIOSMACPointerRef;
- (struct __IOHIDEvent { }*)_newKeyboardHIDEventRef;
- (id)_senderNameForID;
- (id)accelerometerInfo;
- (id)accessibilityData;
- (id)accessibilityEventRepresentationTabularDescription;
- (unsigned long long)additionalFlags;
- (void)applyAccessibilityDataToCreatorHIDEvent;
- (id)clientId;
- (unsigned int)contextId;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct __IOHIDEvent { }*)creatorHIDEvent;
- (id)data;
- (id)dataRepresentation;
- (void)dealloc;
- (id)denormalizedEventRepresentation:(bool)arg1 descale:(bool)arg2;
- (id)description;
- (unsigned int)didUpdateMask;
- (void)encodeWithCoder:(id)arg1;
- (id)fakeTouchScaleEventRepresentation:(bool)arg1;
- (unsigned long long)fingerCount;
- (unsigned int)firstPathContextId;
- (int)flags;
- (id)gameControllerInfo;
- (long long)generationCount;
- (id)handInfo;
- (id)initWithCoder:(id)arg1;
- (id)iosmacPointerInfo;
- (bool)isBuiltIn;
- (bool)isCancel;
- (bool)isChordChange;
- (bool)isDisplayIntegrated;
- (bool)isDownEvent;
- (bool)isGeneratedEvent;
- (bool)isInRange;
- (bool)isInRangeLift;
- (bool)isLift;
- (bool)isMove;
- (bool)isRedirectEvent;
- (bool)isSystemDrag;
- (bool)isTouchDown;
- (bool)isUpdate;
- (id)keyInfo;
- (struct CGPoint { double x1; double x2; })location;
- (void)modifyPoints:(id /* block */)arg1;
- (void)neuterUpdates;
- (struct { int x1; int x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; unsigned int x5; unsigned long long x6; void *x7; int x8; int x9; unsigned int x10; unsigned long long x11; unsigned char x12[0]; }*)newEventRecord;
- (struct __GSEvent { }*)newGSEventRef;
- (struct __IOHIDEvent { }*)newHIDEventRef;
- (id)normalizedEventRepresentation:(bool)arg1 scale:(bool)arg2;
- (unsigned int)originalType;
- (unsigned int)pathIndexMask;
- (int)pid;
- (id)pointerControllerInfo;
- (void)resetInitialTouchCountValueForHidStreamIdentifier:(id)arg1;
- (long long)scrollAmount;
- (unsigned long long)senderID;
- (void)setAccelerometerInfo:(id)arg1;
- (void)setAccessibilityData:(id)arg1;
- (void)setAdditionalFlags:(unsigned long long)arg1;
- (void)setClientId:(id)arg1;
- (void)setContextId:(unsigned int)arg1;
- (void)setCreatorHIDEvent:(struct __IOHIDEvent { }*)arg1;
- (void)setData:(id)arg1;
- (void)setDidUpdateMask:(unsigned int)arg1;
- (void)setFlags:(int)arg1;
- (void)setGameControllerInfo:(id)arg1;
- (void)setGenerationCount:(long long)arg1;
- (void)setHIDAttributeData:(id)arg1;
- (void)setHIDTime:(unsigned long long)arg1;
- (void)setHandInfo:(id)arg1;
- (void)setIosmacPointerInfo:(id)arg1;
- (void)setIsBuiltIn:(bool)arg1;
- (void)setIsDisplayIntegrated:(bool)arg1;
- (void)setIsGeneratedEvent:(bool)arg1;
- (void)setKeyInfo:(id)arg1;
- (void)setLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOriginalType:(unsigned int)arg1;
- (void)setPid:(int)arg1;
- (void)setPointerControllerInfo:(id)arg1;
- (void)setRedirectEvent:(bool)arg1;
- (void)setScrollAmount:(long long)arg1;
- (void)setSenderID:(unsigned long long)arg1;
- (void)setSetTouchFlagOnSubevents:(bool)arg1;
- (void)setSubtype:(int)arg1;
- (void)setSystemDrag:(bool)arg1;
- (void)setTaskPort:(unsigned int)arg1;
- (void)setTime:(unsigned long long)arg1;
- (bool)setTouchFlagOnSubevents;
- (void)setType:(unsigned int)arg1;
- (void)setUseOriginalHIDTime:(bool)arg1;
- (void)setWillUpdateMask:(unsigned int)arg1;
- (void)setWindow:(void*)arg1;
- (void)setWindowLocation:(struct CGPoint { double x1; double x2; })arg1;
- (int)subtype;
- (unsigned int)taskPort;
- (unsigned long long)time;
- (unsigned int)type;
- (bool)useOriginalHIDTime;
- (bool)willBeUpdated;
- (unsigned int)willUpdateMask;
- (void*)window;
- (struct CGPoint { double x1; double x2; })windowLocation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
