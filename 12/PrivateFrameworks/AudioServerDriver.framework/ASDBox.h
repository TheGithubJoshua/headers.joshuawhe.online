<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ASDBox.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AudioServerDriver.framework/ASDBox.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AudioServerDriver.framework/AudioServerDriver (440.1)
 */

@interface ASDBox : ASDObject {
    bool  _acquirable;
    NSObject<OS_dispatch_queue> * _acquireQueue;
    bool  _acquired;
    int  _acquisitionFailure;
    NSMutableArray * _audioDevices;
    NSString * _boxName;
    NSString * _boxUID;
    bool  _canChangeBoxName;
    bool  _canSetIdentify;
    NSMutableArray * _clockDevices;
    NSObject<OS_dispatch_queue> * _deviceQueue;
    NSString * _firmwareVersion;
    bool  _hasAudio;
    bool  _hasMIDI;
    bool  _hasVideo;
    bool  _identify;
    NSString * _manufacturerName;
    NSString * _modelName;
    NSString * _modelUID;
    bool  _requiresAuthentication;
    NSString * _serialNumber;
    bool  _supportsIdentify;
}

@property (getter=isAcquirable, nonatomic) bool acquirable;
@property (nonatomic, readonly, retain) NSObject<OS_dispatch_queue> *acquireQueue;
@property (getter=isAcquireable, nonatomic) bool acquireable;
@property (nonatomic) bool acquired;
@property (nonatomic) int acquisitionFailure;
@property (nonatomic, readonly, retain) NSArray *audioDevices;
@property (nonatomic, copy) NSString *boxName;
@property (nonatomic, readonly, copy) NSString *boxUID;
@property (nonatomic) bool canChangeBoxName;
@property (nonatomic) bool canSetIdentify;
@property (nonatomic, readonly, retain) NSArray *clockDevices;
@property (nonatomic, readonly, retain) NSArray *devices;
@property (nonatomic, copy) NSString *firmwareVersion;
@property (nonatomic) bool hasAudio;
@property (nonatomic) bool hasMIDI;
@property (nonatomic) bool hasVideo;
@property (nonatomic) bool identify;
@property (nonatomic, copy) NSString *manufacturerName;
@property (nonatomic, copy) NSString *modelName;
@property (nonatomic, copy) NSString *modelUID;
@property (nonatomic) bool requiresAuthentication;
@property (nonatomic, copy) NSString *serialNumber;
@property (nonatomic) bool supportsIdentify;
@property (nonatomic, readonly) unsigned int transportType;

+ (id)keyPathsForValuesAffectingAcquireable;

- (void).cxx_destruct;
- (bool)acquireBox:(bool)arg1 fromHAL:(bool)arg2;
- (id)acquireQueue;
- (bool)acquired;
- (int)acquisitionFailure;
- (void)addAudioDevice:(id)arg1;
- (void)addClockDevice:(id)arg1;
- (void)addDevice:(id)arg1;
- (void)addDevicesToPlugin;
- (id)audioDevices;
- (id)boxName;
- (id)boxUID;
- (bool)canChangeBoxName;
- (bool)canSetIdentify;
- (bool)changeBoxName:(id)arg1;
- (id)clockDevices;
- (unsigned int)dataSizeForProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1 withQualifierSize:(unsigned int)arg2 andQualifierData:(const void*)arg3;
- (id)devices;
- (id)diagnosticDescriptionWithIndent:(id)arg1 walkTree:(bool)arg2;
- (id)driverClassName;
- (id)firmwareVersion;
- (bool)getProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1 withQualifierSize:(unsigned int)arg2 qualifierData:(const void*)arg3 dataSize:(unsigned int*)arg4 andData:(void*)arg5 forClient:(int)arg6;
- (bool)hasAudio;
- (bool)hasMIDI;
- (bool)hasProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1;
- (bool)hasVideo;
- (bool)identify;
- (void)identifyBox:(bool)arg1;
- (id)initWithBoxUID:(id)arg1 withPlugin:(id)arg2;
- (id)initWithPlugin:(id)arg1;
- (bool)isAcquirable;
- (bool)isAcquireable;
- (bool)isPropertySettable:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1;
- (id)manufacturerName;
- (id)modelName;
- (id)modelUID;
- (unsigned int)objectClass;
- (void)removeAllAudioDevices;
- (void)removeAllClockDevices;
- (void)removeAllDevices;
- (void)removeAudioDevice:(id)arg1;
- (void)removeClockDevice:(id)arg1;
- (void)removeDevice:(id)arg1;
- (void)removeDevicesFromPlugin;
- (bool)requiresAuthentication;
- (id)serialNumber;
- (void)setAcquirable:(bool)arg1;
- (void)setAcquireable:(bool)arg1;
- (void)setAcquired:(bool)arg1;
- (void)setAcquisitionFailure:(int)arg1;
- (void)setBoxName:(id)arg1;
- (void)setCanChangeBoxName:(bool)arg1;
- (void)setCanSetIdentify:(bool)arg1;
- (void)setFirmwareVersion:(id)arg1;
- (void)setHasAudio:(bool)arg1;
- (void)setHasMIDI:(bool)arg1;
- (void)setHasVideo:(bool)arg1;
- (void)setIdentify:(bool)arg1;
- (void)setManufacturerName:(id)arg1;
- (void)setModelName:(id)arg1;
- (void)setModelUID:(id)arg1;
- (bool)setProperty:(const struct AudioObjectPropertyAddress { unsigned int x1; unsigned int x2; unsigned int x3; }*)arg1 withQualifierSize:(unsigned int)arg2 qualifierData:(const void*)arg3 dataSize:(unsigned int)arg4 andData:(const void*)arg5 forClient:(int)arg6;
- (void)setRequiresAuthentication:(bool)arg1;
- (void)setSerialNumber:(id)arg1;
- (void)setSupportsIdentify:(bool)arg1;
- (bool)supportsIdentify;
- (void)systemHasPoweredOn;
- (void)systemWillSleep;
- (unsigned int)transportType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
