<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDFitnessMachineManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDFitnessMachineManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDFitnessMachineManager : NSObject <HDFitnessMachinePairingManagerDelegate, HDFitnessMachineStateTimersDelegate> {
    HDFitnessMachineAnalyticsCollector * _analyticsCollector;
    NSMutableArray * _characteristicDataBuffer;
    HDFitnessMachineDataCollector * _collector;
    NSMutableArray * _connections;
    HDFitnessMachineDataProducer * _fitnessMachineDataProducer;
    HDFitnessMachineSession * _fitnessMachineSession;
    HKObserverSet * _fitnessMachineSessionObservers;
    HDFitnessMachineStateTimers * _fitnessMachineStateTimers;
    NSDate * _machinePreferredUntilDate;
    HDFitnessMachinePairingManager * _pairingManager;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _queue;
    bool  _resetInProgress;
    HDHealthServiceManager * _serviceManager;
    bool  _shouldReconnect;
}

@property (nonatomic, retain) HDFitnessMachineAnalyticsCollector *analyticsCollector;
@property (nonatomic, readonly) <HDFitnessMachineConnectionInitiatorProtocol> *connectionInitiatorServer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) HDFitnessMachineDataProducer *fitnessMachineDataProducer;
@property (nonatomic, retain) HDFitnessMachineStateTimers *fitnessMachineStateTimers;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSDate *machinePreferredUntilDate;
@property (nonatomic, readonly) <HDMetricsCollector> *metricsCollector;
@property (nonatomic) HDHealthServiceManager *serviceManager;
@property (readonly) Class superclass;

+ (id)fitnessMachineServerId;

- (void).cxx_destruct;
- (void)_queue_addConnection:(id)arg1;
- (void)_queue_connectFitnessMachineIsReconnect:(bool)arg1;
- (bool)_queue_connectionIsRegistered:(id)arg1;
- (id)_queue_connectionWithUUID:(id)arg1;
- (void)_queue_deliverConnectionStateChangedFromState:(unsigned long long)arg1 toState:(unsigned long long)arg2 error:(id)arg3 notifyingPairingManager:(bool)arg4;
- (void)_queue_deliverErrorToAllClients:(id)arg1;
- (void)_queue_deliverFailedWithError:(id)arg1 toConnectionUUID:(id)arg2;
- (void)_queue_deliverMachineInformationUpdatedNotifyingPairingManager:(bool)arg1;
- (void)_queue_deliverMachineStateChangedFromState:(unsigned long long)arg1 date:(id)arg2;
- (void)_queue_deliverNFCDetected:(id)arg1;
- (void)_queue_disconnectFitnessMachineFromBluetooth;
- (void)_queue_endFitnessMachineConnectionForFitnessMachineSessionUUID:(id)arg1 withConnectionUUID:(id)arg2 forcingReset:(bool)arg3;
- (void)_queue_flushCharacteristicDataBuffer;
- (void)_queue_handleBeginPairing:(id)arg1;
- (void)_queue_handleBluetoothDisconnection;
- (void)_queue_handleBluetoothStatusUpdate:(long long)arg1 error:(id)arg2;
- (void)_queue_handleConnectionStatus:(long long)arg1 finished:(bool)arg2 error:(id)arg3;
- (void)_queue_handleConnectionSuccessIfPossible;
- (void)_queue_handleDataTransferRequirementsUpdated;
- (bool)_queue_handleInitialMachineDataIfNecessary:(id)arg1;
- (bool)_queue_handleInitialMachineStatusIfNecessary:(id)arg1;
- (void)_queue_handleInitialStateIfNecessary;
- (void)_queue_handleMFASuccess;
- (void)_queue_handleOrBufferReceivedCharacteristic:(id)arg1 sessionIdentifier:(unsigned long long)arg2 device:(id)arg3 error:(id)arg4;
- (void)_queue_handleReceivedCharacteristic:(id)arg1 device:(id)arg2 error:(id)arg3;
- (void)_queue_handleReceivedDataCharacteristic:(id)arg1;
- (void)_queue_handleReceivedEnhancedFTMSCharacteristic:(id)arg1;
- (void)_queue_handleReceivedMachineStatus:(id)arg1;
- (void)_queue_performBlockOnConnections:(id /* block */)arg1;
- (void)_queue_reconnectFitnessMachineWithError:(id)arg1;
- (void)_queue_recoverSessionWithConfiguration:(id)arg1;
- (void)_queue_registerClient:(id)arg1 withConnectionUUID:(id)arg2;
- (void)_queue_removeConnectionWithUUID:(id)arg1;
- (void)_queue_resetConnectionForcing:(bool)arg1;
- (void)_queue_setConnectionState:(unsigned long long)arg1 error:(id)arg2;
- (void)_queue_setDeviceInformation:(id)arg1;
- (void)_queue_setMachineState:(unsigned long long)arg1 date:(id)arg2;
- (void)_queue_simulateDisconnect;
- (void)_queue_tearDownAfterStopEvent;
- (bool)_queue_waitingOnInitialStatusAndData;
- (void)_setQueue:(id)arg1;
- (void)addFitnessMachineSessionObserver:(id)arg1 queue:(id)arg2;
- (id)analyticsCollector;
- (void)clientInvalidatedWithConnectionUUID:(id)arg1;
- (id)connectionInitiatorServer;
- (unsigned long long)connectionOptionsForSession:(id)arg1 isReconnect:(bool)arg2;
- (id)currentSessionRecoveryConfiguration;
- (void)dealloc;
- (void)endFitnessMachineConnectionForFitnessMachineSessionUUID:(id)arg1 withConnectionUUID:(id)arg2;
- (void)endFitnessMachineConnectionWithUUID:(id)arg1;
- (void)endFitnessMachineSessionWithUUID:(id)arg1;
- (void)finishSessionWithConfiguration:(id)arg1;
- (id)fitnessMachineDataProducer;
- (id)fitnessMachineStateTimers;
- (void)hktest_setMachinePreferredUntilDate:(id)arg1;
- (id)initWithProfile:(id)arg1;
- (id)machinePreferredUntilDate;
- (void)markClientReadyWithConnectionUUID:(id)arg1;
- (id)metricsCollector;
- (void)pairingManager:(id)arg1 didChangeNFCEnabledState:(bool)arg2;
- (void)pairingManager:(id)arg1 discoveredHealthService:(id)arg2 machineType:(unsigned long long)arg3;
- (void)pairingManager:(id)arg1 failedPairingWithError:(id)arg2;
- (void)pairingManager:(id)arg1 updatedConnectionStateFromState:(unsigned long long)arg2 toState:(unsigned long long)arg3;
- (void)pairingManagerDidBeginPairing:(id)arg1;
- (void)pairingManagerReadyToConnect:(id)arg1;
- (void)pairingManagerReceivedActivityTypeAndPermission:(id)arg1;
- (id)pairingManagerRequestsOOBData:(id)arg1 error:(id*)arg2;
- (void)pairingManagerUpdatedMachineInformation:(id)arg1;
- (void)pairingManagerWillBeginPairing:(id)arg1 fitnessMachineToken:(id)arg2;
- (void)recoverSessionWithConfiguration:(id)arg1;
- (void)registerClient:(id)arg1 withConnectionUUID:(id)arg2;
- (void)removeFitnessMachineSessionObserver:(id)arg1;
- (id)serviceManager;
- (void)setAnalyticsCollector:(id)arg1;
- (void)setFitnessMachineStateTimers:(id)arg1;
- (void)setServiceManager:(id)arg1;
- (void)simulateDisconnect;
- (void)stateTimersDisconnectTimeout:(id)arg1;
- (void)stateTimersMfaTimeout:(id)arg1;
- (void)stateTimersPauseTimeout:(id)arg1;
- (void)stateTimersRetryConnectionTimeout:(id)arg1;
- (void)stateTimersWaitForMachineStartTimeout:(id)arg1;
- (id)unitTest_currentFitnessMachineSession;
- (void)unitTest_fakeMachineDiscoveryForType:(unsigned long long)arg1;
- (void)unitTest_fakeSession:(id)arg1;
- (void)unitTest_receiveFakeCharacteristicUpdate:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
