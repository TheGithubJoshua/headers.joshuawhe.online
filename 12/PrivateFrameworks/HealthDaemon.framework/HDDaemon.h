<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDDaemon.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDDaemon.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDDaemon : NSObject <HDDiagnosticObject, HDHealthDaemon, HDTaskServerClassProvider, HDXPCListenerDelegate> {
    <HDNanoAlertSuppressionService> * _alertSuppressionService;
    HDAnalyticsSubmissionCoordinator * _analyticsSubmissionCoordinator;
    HDBackgroundTaskScheduler * _backgroundTaskScheduler;
    _HKBehavior * _behavior;
    HDCloudSyncCoordinator * _cloudSyncCoordinator;
    HDCoachingDiagnosticManager * _coachingDiagnosticManager;
    HDCompanionWorkoutCreditManager * _companionWorkoutCreditManager;
    HDContentProtectionManager * _contentProtectionManager;
    NSDictionary * _daemonExtensionsByIdentifier;
    NSMutableArray * _daemonLaunchObservers;
    bool  _daemonReady;
    <HDDaemonTester> * _daemonTester;
    HDDemoDataGenerator * _demoDataFactory;
    struct MGNotificationTokenStruct { } * _deviceNameChangesToken;
    HDDevicePowerMonitor * _devicePowerMonitor;
    int  _didStart;
    NSMutableSet * _endpoints;
    HDFeatureAvailabilityAssetManager * _featureAvailabilityAssetManager;
    HDFitnessAppBadgeManager * _fitnessAppBadgeManager;
    NSString * _healthDirectoryPath;
    int  _languageChangeNotifyToken;
    NSObject<OS_dispatch_queue> * _mainQueue;
    HDMaintenanceWorkCoordinator * _maintenanceWorkCoordinator;
    NSString * _medicalIDDirectoryPath;
    HDPluginManager * _pluginManager;
    HDPrimaryProfile * _primaryProfile;
    HDProcessStateManager * _processStateManager;
    HDProfileManager * _profileManager;
    HDQueryManager * _queryManager;
    HDXPCListener * _serviceListener;
    HDTaskServerRegistry * _taskServerRegistry;
}

@property (nonatomic, retain) <HDNanoAlertSuppressionService> *alertSuppressionService;
@property (nonatomic, retain) HDAnalyticsSubmissionCoordinator *analyticsSubmissionCoordinator;
@property (readonly) HDBackgroundTaskScheduler *backgroundTaskScheduler;
@property (readonly) _HKBehavior *behavior;
@property (nonatomic, readonly) HDCloudSyncCoordinator *cloudSyncCoordinator;
@property (nonatomic, readonly) HDCoachingDiagnosticManager *coachingDiagnosticManager;
@property (nonatomic, readonly) HDCompanionWorkoutCreditManager *companionWorkoutCreditManager;
@property (nonatomic, readonly) HDContentProtectionManager *contentProtectionManager;
@property (nonatomic) <HDDaemonTester> *daemonTester;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) HDDevicePowerMonitor *devicePowerMonitor;
@property (nonatomic, readonly) HDFeatureAvailabilityAssetManager *featureAvailabilityAssetManager;
@property (nonatomic, readonly) HDFitnessAppBadgeManager *fitnessAppBadgeManager;
@property (readonly) unsigned long long hash;
@property (readonly, copy) NSString *healthDirectoryPath;
@property (readonly, copy) NSURL *healthDirectoryURL;
@property (nonatomic, readonly) HDMaintenanceWorkCoordinator *maintenanceWorkCoordinator;
@property (readonly, copy) NSString *medicalIDDirectoryPath;
@property (readonly) HDPluginManager *pluginManager;
@property (nonatomic, readonly) HDPrimaryProfile *primaryProfile;
@property (nonatomic, readonly) HDProcessStateManager *processStateManager;
@property (nonatomic, readonly) HDProfileManager *profileManager;
@property (nonatomic, readonly) HDQueryManager *queryManager;
@property (nonatomic, readonly) HDXPCListener *serviceListener;
@property (readonly) Class superclass;
@property (nonatomic, readonly) HDTaskServerRegistry *taskServerRegistry;
@property (nonatomic, readonly) HDWorkoutPluginDaemonExtension *workoutPluginExtension;

- (void).cxx_destruct;
- (id)IDSServiceWithIdentifier:(id)arg1;
- (id)_bundleIdentifiersToTerminateAfterObliteration;
- (void)_handleLaunchServicesEvent:(id)arg1 name:(id)arg2;
- (void)_handleSigterm;
- (void)_localeOrLanguageChanged:(id)arg1;
- (bool)_motionTrackingAvailable;
- (id)_newAnalyticsSubmissionCoordinator;
- (id)_newBackgroundTaskScheduler;
- (id)_newBehavior;
- (id)_newCloudSyncCoordinator;
- (id)_newCompanionWorkoutCreditManager;
- (id)_newContentProtectionManager;
- (id)_newMainQueue;
- (id)_newPluginManager;
- (id)_newPrimaryProfile;
- (id)_newProcessStateManager;
- (id)_newProfileManager;
- (void)_notifyDaemonLaunchObservers;
- (void)_periodicUpdates;
- (void)_registerForDeviceNameChanges;
- (void)_registerLaunchEventDynamicallyForNotification:(const char *)arg1;
- (void)_resetPrivacySettings;
- (void)_setUpDistnotedEventHandler;
- (void)_setUpLaunchEventHandlers;
- (void)_setUpNotifydEventHandler;
- (void)_setUpPedometerLaunchEventHandler;
- (void)_setUpSignalHandlers;
- (void)_setupMemoryWarningHandler;
- (id)_setupSignal:(int)arg1 handler:(id /* block */)arg2;
- (bool)_shouldInitializeDaemon;
- (void)_terminationCleanup;
- (void)_unregisterLaunchEventDynamicallyForNotification:(const char *)arg1;
- (void)_updateCurrentDeviceName;
- (id)alertSuppressionService;
- (id)analyticsSubmissionCoordinator;
- (id)backgroundTaskScheduler;
- (id)behavior;
- (id)cloudSyncCoordinator;
- (id)coachingDiagnosticManager;
- (id)companionWorkoutCreditManager;
- (id)contentProtectionManager;
- (id)createXPCListenerWithMachServiceName:(id)arg1;
- (id)daemonExtensionWithIdentifier:(id)arg1;
- (id)daemonExtensionsConformingToProtocol:(id)arg1;
- (id)daemonTester;
- (void)dealloc;
- (id)devicePowerMonitor;
- (id)diagnosticDescription;
- (void)exitClean:(bool)arg1 reason:(id)arg2;
- (id)exportObjectForListener:(id)arg1 client:(id)arg2 error:(id*)arg3;
- (id)featureAvailabilityAssetManager;
- (id)fitnessAppBadgeManager;
- (id)healthDirectoryPath;
- (id)healthDirectorySizeInBytes;
- (id)healthDirectoryURL;
- (id)healthDomainAccessorWithPairedDevice:(id)arg1;
- (id)healthLiteUserDefaultsDomain;
- (id)init;
- (id)initWithContainerDirectoryPath:(id)arg1;
- (id)initWithHealthDirectoryPath:(id)arg1 medicalIDDirectoryPath:(id)arg2;
- (void)invalidateAllServersForProfile:(id)arg1;
- (void)invalidateAndWait;
- (id)mainQueue;
- (id)maintenanceWorkCoordinator;
- (id)medicalIDDirectoryPath;
- (id)nanoPairedDeviceRegistry;
- (void)obliterateAndTerminateWithOptions:(unsigned long long)arg1 reason:(id)arg2 completion:(id /* block */)arg3;
- (id)pairedSyncCoordinatorWithServiceName:(id)arg1;
- (void)performBlockWithPowerAssertionIdentifier:(id)arg1 transactionName:(id)arg2 powerAssertionInterval:(double)arg3 block:(id /* block */)arg4;
- (id)pluginManager;
- (id)primaryProfile;
- (id)processStateManager;
- (id)profileManager;
- (id)queryManager;
- (void)registerForDaemonReady:(id)arg1;
- (void)registerForLaunchNotification:(const char *)arg1;
- (id)serviceListener;
- (void)setAlertSuppressionService:(id)arg1;
- (void)setAnalyticsSubmissionCoordinator:(id)arg1;
- (void)setDaemonTester:(id)arg1;
- (void)start;
- (id)taskServerClasses;
- (id)taskServerRegistry;
- (void)terminateClean:(bool)arg1 reason:(id)arg2;
- (void)unitTest_didCreateProfile:(id)arg1;
- (void)unitTest_queryServerDidInit:(id)arg1;
- (void)unitTest_taskServerDidInit:(id)arg1;
- (void)unregisterForLaunchNotification:(const char *)arg1;
- (id)workoutPluginExtension;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
