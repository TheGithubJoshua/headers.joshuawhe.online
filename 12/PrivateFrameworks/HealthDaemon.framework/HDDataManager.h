<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDDataManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDDataManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDDataManager : NSObject <HDDiagnosticObject> {
    NSNumber * _lastAnchor;
    bool  _needsSynchronousNotification;
    NSObject<OS_dispatch_queue> * _notificationQueue;
    NSMutableDictionary * _observersByDataType;
    unsigned long long  _openTransactions;
    NSMutableDictionary * _pendingObjectsBySampleType;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _queue;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _synchronousObserverLock;
    NSMutableDictionary * _synchronousObserversBySampleType;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) HDProfile *profile;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_callObservers:(id)arg1 forType:(id)arg2 source:(id)arg3 withAnchor:(id)arg4;
- (void)_callObservers:(id)arg1 withObjects:(id)arg2 type:(id)arg3 anchor:(id)arg4;
- (void)_callObserversIfPossible;
- (bool)_deleteObjectsWithTypes:(id)arg1 sourceEntities:(id)arg2 recursiveDeleteAuthorizationBlock:(id /* block */)arg3 error:(id*)arg4;
- (bool)_insertDataObjects:(id)arg1 intoDatabase:(id)arg2 insertionContext:(id)arg3 updateSourceOrder:(bool)arg4 error:(id*)arg5;
- (void)_notificationQueue_notifyObserversSamplesWithTypesWereRemoved:(id)arg1 anchor:(id)arg2;
- (void)_notifyObserversSamplesWithTypesWereRemoved:(id)arg1 anchor:(id)arg2;
- (void)_notifyObserversWithAddedObjectsBySampleType:(id)arg1 lastAnchor:(id)arg2;
- (void)_notifySynchronousObserversForDeletedObjectTypes:(id)arg1 anchor:(id)arg2;
- (void)_notifySynchronousObserversIfPossible;
- (id)_observersForAllTypes;
- (id)_observersForDataType:(id)arg1;
- (id)_queue_observersAllTypesCreateIfNil:(bool)arg1;
- (id)_queue_observersForDataType:(id)arg1 createIfNil:(bool)arg2;
- (id)_queue_observersForKey:(id)arg1 createIfNil:(bool)arg2;
- (void)_shouldNotifyForDeletedSamplesOfTypes:(id)arg1 anchor:(id)arg2;
- (bool)_synchronousObserverLock_hasSynchronousObserverForSampleType:(id)arg1;
- (id)_synchronousObserverLock_synchronousObserverSetForSampleType:(id)arg1;
- (void)addObserver:(id)arg1 forDataType:(id)arg2;
- (void)addObserverForAllTypes:(id)arg1;
- (void)addSynchronousObserver:(id)arg1 forSampleType:(id)arg2;
- (void)closeObserverTransaction;
- (bool)containsDataObject:(id)arg1;
- (bool)deleteDataObjects:(id)arg1 restrictedSourceEntities:(id)arg2 failIfNotFound:(bool)arg3 recursiveDeleteAuthorizationBlock:(id /* block */)arg4 error:(id*)arg5;
- (bool)deleteDataObjectsOfClass:(Class)arg1 predicate:(id)arg2 limit:(unsigned long long)arg3 deletedSampleCount:(unsigned long long*)arg4 notifyObservers:(bool)arg5 generateDeletedObjects:(bool)arg6 recursiveDeleteAuthorizationBlock:(id /* block */)arg7 error:(id*)arg8;
- (bool)deleteObjectsWithUUIDs:(id)arg1 configuration:(id)arg2 error:(id*)arg3;
- (bool)deleteSamplesWithSourceEntities:(id)arg1 error:(id*)arg2;
- (bool)deleteSamplesWithTypes:(id)arg1 sourceBundleIdentifier:(id)arg2 recursiveDeleteAuthorizationBlock:(id /* block */)arg3 error:(id*)arg4;
- (bool)deleteSamplesWithTypes:(id)arg1 sourceEntities:(id)arg2 recursiveDeleteAuthorizationBlock:(id /* block */)arg3 error:(id*)arg4;
- (bool)deleteSamplesWithUUIDs:(id)arg1 generateDeletedObjects:(bool)arg2 database:(id)arg3 error:(id*)arg4;
- (bool)deleteSamplesWithUUIDs:(id)arg1 recursiveDeleteAuthorizationBlock:(id /* block */)arg2 error:(id*)arg3;
- (id)diagnosticDescription;
- (void)hasSampleWithBundleIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (id)initWithProfile:(id)arg1;
- (bool)insertDataObjects:(id)arg1 sourceEntity:(id)arg2 deviceEntity:(id)arg3 sourceVersion:(id)arg4 creationDate:(double)arg5 error:(id*)arg6;
- (bool)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 error:(id*)arg4;
- (bool)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 skipInsertionFilter:(bool)arg4 error:(id*)arg5;
- (bool)insertDataObjects:(id)arg1 withProvenance:(id)arg2 creationDate:(double)arg3 skipInsertionFilter:(bool)arg4 updateSourceOrder:(bool)arg5 error:(id*)arg6;
- (void)openObserverTransaction;
- (id)profile;
- (void)removeObserver:(id)arg1 forDataType:(id)arg2;
- (void)removeObserverForAllTypes:(id)arg1;
- (void)removeSynchronousObserver:(id)arg1 forSampleType:(id)arg2;
- (void)setBackgroundObserverFrequency:(id)arg1 forDataType:(id)arg2 frequency:(long long)arg3 completion:(id /* block */)arg4;
- (void)setProfile:(id)arg1;
- (void)shouldNotifyForDataObjects:(id)arg1 provenance:(id)arg2 database:(id)arg3 anchor:(id)arg4;
- (void)shouldNotifyForDeletedSamplesOfTypes:(id)arg1 database:(id)arg2 anchor:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
