<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDStatisticsCollectionCalculator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDStatisticsCollectionCalculator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDStatisticsCollectionCalculator : NSObject <HDStatisticsSourceOrderProvider, NSSecureCoding> {
    long long  _computationMethod;
    struct unique_ptr<_HDStatisticsCollectionCalculatorImplementation, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > { 
        struct __compressed_pair<_HDStatisticsCollectionCalculatorImplementation *, std::__1::default_delete<_HDStatisticsCollectionCalculatorImplementation> > { 
            struct _HDStatisticsCollectionCalculatorImplementation {} *__value_; 
        } __ptr_; 
    }  _implementation;
    NSArray * _maskedIntervals;
    <HDStatisticsCollectionCalculatorSourceOrderProvider> * _sourceOrderProvider;
    id /* block */  _statisticsHandler;
}

@property (nonatomic) <HDStatisticsCollectionCalculatorDataSource> *dataSource;
@property (nonatomic, copy) NSDateInterval *dateInterval;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) _HKDateIntervalCollection *intervalCollection;
@property (nonatomic, readonly, copy) NSArray *maskedIntervals;
@property (nonatomic) double mergeGranularity;
@property (nonatomic, readonly) unsigned long long mergeStrategy;
@property (nonatomic, readonly) unsigned long long options;
@property (nonatomic, readonly, copy) HKQuantityType *quantityType;
@property (nonatomic) <HDStatisticsCollectionCalculatorSourceOrderProvider> *sourceOrderProvider;
@property (nonatomic, copy) id /* block */ statisticsHandler;
@property (readonly) Class superclass;

+ (id)calculatorForArchivedRepresentation:(id)arg1 error:(id*)arg2;
+ (id)calculatorForQuantityType:(id)arg1 intervalCollection:(id)arg2 options:(unsigned long long)arg3 mergeStrategy:(unsigned long long)arg4;
+ (id)calculatorForQuantityType:(id)arg1 intervalCollection:(id)arg2 options:(unsigned long long)arg3 mergeStrategy:(unsigned long long)arg4 computationMethod:(long long)arg5;
+ (bool)supportsSecureCoding;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)addSampleValue:(double)arg1 startTime:(double)arg2 endTime:(double)arg3 sourceID:(long long)arg4 error:(id*)arg5;
- (id)archivedRepresentationWithError:(id*)arg1;
- (id)bundleIdentifierForSourceID:(long long)arg1;
- (void)configureMergeAnchor:(id)arg1;
- (id)currentStatistics;
- (id)dataSource;
- (id)dateInterval;
- (void)encodeWithCoder:(id)arg1;
- (id)initForQuantityType:(id)arg1 intervalCollection:(id)arg2 options:(unsigned long long)arg3 mergeStrategy:(unsigned long long)arg4 computationMethod:(long long)arg5;
- (id)initWithCoder:(id)arg1;
- (id)intervalCollection;
- (bool)invalidateInterval:(id)arg1 error:(id*)arg2;
- (id)maskedIntervals;
- (double)mergeGranularity;
- (unsigned long long)mergeStrategy;
- (unsigned long long)options;
- (void)orderSourceIDs:(struct vector<long long, std::__1::allocator<long long> > { long long *x1; long long *x2; struct __compressed_pair<long long *, std::__1::allocator<long long> > { long long *x_3_1_1; } x3; }*)arg1;
- (bool)performAddSampleTransaction:(id /* block */)arg1 error:(id*)arg2;
- (id)quantityType;
- (bool)queryForInitialStatisticsWithError:(id*)arg1;
- (void)reset;
- (void)setDataSource:(id)arg1;
- (void)setDateInterval:(id)arg1;
- (bool)setMaskedIntervals:(id)arg1 error:(id*)arg2;
- (void)setMergeGranularity:(double)arg1;
- (void)setSourceOrderProvider:(id)arg1;
- (void)setStatisticsHandler:(id /* block */)arg1;
- (id)sourceForSourceID:(long long)arg1;
- (id)sourceOrderProvider;
- (id /* block */)statisticsHandler;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
