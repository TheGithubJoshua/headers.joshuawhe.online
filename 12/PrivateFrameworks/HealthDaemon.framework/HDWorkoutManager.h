<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDWorkoutManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDWorkoutManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDWorkoutManager : NSObject <HDDatabaseProtectedDataObserver, HDDevicePowerObserver, HDDiagnosticObject, HDForegroundClientProcessObserver, HDHealthDaemonReadyObserver, HDWorkoutSessionObserver> {
    HDAlertSuppressor * _alertSuppressor;
    HDWatchAppStateMonitor * _appStateMonitor;
    HDWorkoutSessionServer * _currentWorkout;
    HDAssertion * _currentWorkoutAssertion;
    bool  _hasPerformedPostLaunchSessionRecovery;
    bool  _isFirstLaunchAndNotYetSmoothed;
    HDLocationManager * _locationManager;
    HDWorkoutLocationSmoother * _locationSmoother;
    bool  _needToCheckForLocationSeriesOnUnlock;
    HDWorkoutSessionServer * _nextWorkout;
    NSHashTable * _observerTable;
    NSMutableArray * _postLaunchRecoveryBlocks;
    NSObject<OS_dispatch_queue> * _postLaunchRecoveryCallbackQueue;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableDictionary * _sessionCreationHandlers;
    NSMutableDictionary * _sessionServers;
}

@property (nonatomic, readonly) HDAlertSuppressor *alertSuppressor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isInHeartRateRecovery;
@property (nonatomic, readonly) HDLocationManager *locationManager;
@property (nonatomic, retain) HDWorkoutLocationSmoother *locationSmoother;
@property (nonatomic, readonly) HDProfile *profile;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_activeSessionIdentifiers;
- (void)_associationsSyncedForWorkout:(id)arg1;
- (void)_finishAllDetachedWorkoutBuilders;
- (void)_finishAllWorkoutsExcludingSessions:(id)arg1;
- (void)_notifyForPostLaunchSessionRecovery;
- (void)_postWorkoutUpdatedNotification;
- (void)_queue_beginTransitionToWorkoutSession:(id)arg1;
- (unsigned long long)_queue_currentWorkoutActivityType;
- (long long)_queue_currentWorkoutLocationType;
- (id)_queue_locationSmoother;
- (void)_queue_logWorkoutStateToPowerLog;
- (void)_queue_sessionFinished:(id)arg1;
- (id)_queue_sessionServerForRecoveryForClient:(id)arg1;
- (void)_queue_setCurrentWorkout:(id)arg1;
- (void)_queue_smoothAllUnsmoothedLocationSeries;
- (void)_queue_startWatchAppWithWorkoutConfiguration:(id)arg1 client:(id)arg2 completion:(id /* block */)arg3;
- (void)_queue_updateFakingDataInSimulator;
- (void)_receivedStartWorkoutAppRequest:(id)arg1 completion:(id /* block */)arg2;
- (id)_recoverActiveWorkoutSessionServersIfNeeded;
- (void)_recoverCurrentWorkoutSessionAfterLaunch;
- (void)_scheduleFinishAllDetachedWorkoutBuilders;
- (void)_scheduleFinishForDetachedWorkoutBuilders;
- (void)_sendStartWorkoutAppResponse:(id /* block */)arg1 error:(id)arg2;
- (void)_setupLocationObserversIfNeeded;
- (void)_startWatchAppWithWorkoutConfiguration:(id)arg1 client:(id)arg2 completion:(id /* block */)arg3;
- (id)_workoutSessionNotCurrentError:(id)arg1;
- (void)addWorkoutEventObserver:(id)arg1;
- (id)alertSuppressor;
- (unsigned long long)currentWorkoutActivityType;
- (id)currentWorkoutClient;
- (long long)currentWorkoutLocationType;
- (void)daemonReady:(id)arg1;
- (void)database:(id)arg1 protectedDataDidBecomeAvailable:(bool)arg2;
- (void)dealloc;
- (void)devicePowerMonitor:(id)arg1 primaryPowerSourceIsCharging:(bool)arg2;
- (id)diagnosticDescription;
- (void)endHeartRateRecovery;
- (bool)finishAllWorkoutsForClient:(id)arg1 error:(id*)arg2;
- (void)foregroundClientProcessesDidChange:(id)arg1 previouslyForegroundBundleIdentifiers:(id)arg2;
- (void)generatePauseOrResumeRequestWithCompletion:(id /* block */)arg1;
- (void)getCurrentWorkoutSnapshotWithCompletion:(id /* block */)arg1;
- (bool)hasAnyActiveWorkouts;
- (void)hk_fakeLapEventWithDate:(id)arg1 strokeStyle:(long long)arg2;
- (void)hk_fakeStopEventWithDate:(id)arg1;
- (id)initWithProfile:(id)arg1;
- (bool)isInHeartRateRecovery;
- (bool)isPowerSavingEnabledForCurrentActivity;
- (bool)isPowerSavingSupportedForCurrentActivity;
- (id)locationManager;
- (id)locationSmoother;
- (void)pauseActiveWorkoutsWithCompletion:(id /* block */)arg1;
- (void)performWhenPostLaunchSessionRecoveryHasCompleted:(id /* block */)arg1;
- (id)profile;
- (id)queue;
- (void)receivedStartWorkoutAppRequest:(id)arg1 completion:(id /* block */)arg2;
- (void)recoverWorkoutSessionForClient:(id)arg1 server:(id)arg2 completion:(id /* block */)arg3;
- (id)recoveredWorkoutSessionServerWithIdentifier:(id)arg1 error:(id*)arg2;
- (void)removeWorkoutEventObserver:(id)arg1;
- (void)sessionServerFromSessionIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (id)sessionServerWithConfiguration:(id)arg1 sessionUUID:(id)arg2 taskServer:(id)arg3 error:(id*)arg4;
- (void)setLocationSmoother:(id)arg1;
- (void)startWatchAppWithWorkoutConfiguration:(id)arg1 client:(id)arg2 completion:(id /* block */)arg3;
- (id)unitTest_currentWorkoutSession;
- (void)unitTest_finishAllDetachedWorkoutBuilders;
- (void)unitTest_smoothRoute:(id)arg1 withSmoother:(id)arg2 completion:(id /* block */)arg3;
- (void)workoutSession:(id)arg1 didChangeToState:(long long)arg2 fromState:(long long)arg3 date:(id)arg4;
- (void)workoutSession:(id)arg1 didFailWithError:(id)arg2;
- (void)workoutSession:(id)arg1 didGenerateEvent:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
