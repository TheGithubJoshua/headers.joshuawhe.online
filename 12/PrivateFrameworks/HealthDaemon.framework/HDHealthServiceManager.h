<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDHealthServiceManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDHealthServiceManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDHealthServiceManager : NSObject <CBCentralManagerPrivateDelegate, CBPairingAgentDelegate> {
    CBUUID * _allServicesUUID;
    NSMutableDictionary * _bluetoothUpdateHandlers;
    CBCentralManager * _central;
    NSMutableDictionary * _connectedPeripheralsByPeripheralUUID;
    NSMutableDictionary * _connectionInfosByPeripheralUUID;
    HDIdentifierTable * _connectionInfosTable;
    NSLock * _connectionLock;
    HDDataCollectionManager * _dataCollectionManager;
    NSMutableDictionary * _discoveryInfosByServiceUUID;
    HDIdentifierTable * _discoveryInfosTable;
    NSLock * _discoveryLock;
    int  _privacyNotificationToken;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _queue;
    NSSet * _scanServiceUUIDs;
}

@property (nonatomic, retain) CBUUID *allServicesUUID;
@property (nonatomic, retain) NSMutableDictionary *bluetoothUpdateHandlers;
@property (nonatomic, retain) CBCentralManager *central;
@property (nonatomic, retain) NSMutableDictionary *connectedPeripheralsByPeripheralUUID;
@property (nonatomic, retain) NSMutableDictionary *connectionInfosByPeripheralUUID;
@property (nonatomic, retain) HDIdentifierTable *connectionInfosTable;
@property (nonatomic, retain) NSLock *connectionLock;
@property (nonatomic, retain) HDDataCollectionManager *dataCollectionManager;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableDictionary *discoveryInfosByServiceUUID;
@property (nonatomic, retain) HDIdentifierTable *discoveryInfosTable;
@property (nonatomic, retain) NSLock *discoveryLock;
@property (readonly) unsigned long long hash;
@property (nonatomic) HDProfile *profile;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSSet *scanServiceUUIDs;
@property (readonly) Class superclass;

+ (long long)_isBTLESupportedWithCentral:(id)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (unsigned long long)_addConnectedPeripheral:(id)arg1 service:(id)arg2 connectionInfo:(id)arg3;
- (id)_allServiceUUIDs;
- (unsigned long long)_connectHealthService:(id)arg1 connectionInfo:(id)arg2 error:(id*)arg3;
- (id)_copyConnectionInfosForPeripheralUUID:(id)arg1;
- (id)_copyDiscoveryInfosForServiceUUID:(id)arg1;
- (void)_createConnectionTimeoutForConnectionInfo:(id)arg1;
- (id)_createDiscoveryTimeout:(unsigned long long)arg1 forIdentifier:(unsigned long long)arg2;
- (void)_disconnectPeripheralWithDeviceIdentifier:(id)arg1 error:(id)arg2;
- (id)_healthServiceForPeriperalID:(id)arg1 serviceType:(long long)arg2;
- (void)_notifyDiscoveryForInfos:(id)arg1 peripheral:(id)arg2 healthService:(id)arg3 alwaysNotify:(bool)arg4;
- (void)_queue_handleMFASuccessNotification;
- (void)_queue_notifyBluetoothStatusUpdates:(long long)arg1 error:(id)arg2;
- (void)_queue_reportExistingDiscoveriesForService:(id)arg1;
- (void)_queue_stopScan;
- (void)_queue_updateScan;
- (void)_removeConnectedPeripheral:(unsigned long long)arg1 withError:(id)arg2;
- (id)_reportPeripheral:(id)arg1 serviceUUID:(id)arg2 serviceAdvertisementData:(id)arg3 peripheralAdvertisementData:(id)arg4;
- (id)_scanOptionsForDiscoveryInfos:(id)arg1;
- (id)_serviceFromUUID:(id)arg1 peripheral:(id)arg2 serviceAdvertisementData:(id)arg3 peripheralAdvertisementData:(id)arg4;
- (id)allServicesUUID;
- (id)allServicesWithError:(id*)arg1;
- (id)bluetoothUpdateHandlers;
- (id)central;
- (void)centralManager:(id)arg1 didConnectPeripheral:(id)arg2;
- (void)centralManager:(id)arg1 didDisconnectPeripheral:(id)arg2 error:(id)arg3;
- (void)centralManager:(id)arg1 didDiscoverPeripheral:(id)arg2 advertisementData:(id)arg3 RSSI:(id)arg4;
- (void)centralManager:(id)arg1 didFailToConnectPeripheral:(id)arg2 error:(id)arg3;
- (void)centralManager:(id)arg1 willRestoreState:(id)arg2;
- (void)centralManagerDidUpdateState:(id)arg1;
- (void)characteristicReceived:(id)arg1 device:(id)arg2;
- (unsigned long long)connectHealthService:(id)arg1 connectionOptions:(unsigned long long)arg2 sessionHandler:(id /* block */)arg3 dataHandler:(id /* block */)arg4 mfaSuccessHandler:(id /* block */)arg5 autoPairData:(id)arg6 error:(id*)arg7;
- (unsigned long long)connectHealthService:(id)arg1 sessionHandler:(id /* block */)arg2 dataHandler:(id /* block */)arg3 characteristicsHandler:(id /* block */)arg4 error:(id*)arg5;
- (unsigned long long)connectHealthService:(id)arg1 sessionHandler:(id /* block */)arg2 dataHandler:(id /* block */)arg3 error:(id*)arg4;
- (id)connectedPeripheralsByPeripheralUUID;
- (id)connectionInfosByPeripheralUUID;
- (id)connectionInfosTable;
- (id)connectionLock;
- (id)dataCollectionManager;
- (void)dataReceived:(id)arg1 deviceEntity:(id)arg2;
- (void)disconnectHealthService:(unsigned long long)arg1;
- (unsigned long long)discoverHealthServicesWithType:(long long)arg1 timeout:(unsigned long long)arg2 alwaysNotify:(bool)arg3 handler:(id /* block */)arg4 error:(id*)arg5;
- (void)discoveredCharacteristics:(id)arg1 forDevice:(id)arg2 service:(id)arg3;
- (void)discoveredServices:(id)arg1 forPeripheral:(id)arg2;
- (id)discoveryInfosByServiceUUID;
- (id)discoveryInfosTable;
- (id)discoveryLock;
- (void)extendPrivateModeLease:(id)arg1 forDuration:(unsigned short)arg2;
- (void)getProperty:(id)arg1 forSession:(unsigned long long)arg2 withHandler:(id /* block */)arg3;
- (void)getSupportedPropertyNamesWithHandler:(id /* block */)arg1;
- (bool)healthUpdatesEnabledFromDevice:(id)arg1 error:(id*)arg2;
- (id)initWithProfile:(id)arg1;
- (id)initWithProfile:(id)arg1 centralManager:(id)arg2 queue:(id)arg3;
- (void)pairingAgent:(id)arg1 peerDidCompletePairing:(id)arg2;
- (void)pairingAgent:(id)arg1 peerDidFailToCompletePairing:(id)arg2 error:(id)arg3;
- (void)pairingAgent:(id)arg1 peerDidRequestPairing:(id)arg2 type:(long long)arg3 passkey:(id)arg4;
- (void)pairingAgent:(id)arg1 peerDidUnpair:(id)arg2;
- (void)performOperation:(id)arg1 onSession:(unsigned long long)arg2 withParameters:(id)arg3 completion:(id /* block */)arg4;
- (id)profile;
- (id)queue;
- (void)removeAllDisconnectedPeripherals;
- (void)removeConnectingPeripheralsWithError:(id)arg1;
- (void)resetOOBState;
- (id)retrieveOOBData:(id*)arg1;
- (id)reviewSavedHealthServiceSessionsWithError:(id*)arg1;
- (id)scanServiceUUIDs;
- (void)sendBluetoothStatusUpdatesForServer:(id)arg1 updateHandler:(id /* block */)arg2 completion:(id /* block */)arg3;
- (void)servicesInvalidatedForDevice:(id)arg1 withError:(id)arg2;
- (void)setAllServicesUUID:(id)arg1;
- (void)setBluetoothUpdateHandlers:(id)arg1;
- (void)setCentral:(id)arg1;
- (void)setConnectedPeripheralsByPeripheralUUID:(id)arg1;
- (void)setConnectionInfosByPeripheralUUID:(id)arg1;
- (void)setConnectionInfosTable:(id)arg1;
- (void)setConnectionLock:(id)arg1;
- (void)setDataCollectionManager:(id)arg1;
- (void)setDiscoveryInfosByServiceUUID:(id)arg1;
- (void)setDiscoveryInfosTable:(id)arg1;
- (void)setDiscoveryLock:(id)arg1;
- (bool)setHealthUpdatesEnabled:(bool)arg1 fromDevice:(id)arg2 error:(id*)arg3;
- (void)setProfile:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setScanServiceUUIDs:(id)arg1;
- (id)shortDescription;
- (void)stopDiscoveryWithIdentifier:(unsigned long long)arg1;
- (void)unpairHealthServiceIfNecessary:(id)arg1;
- (void)updateConnectionInfosForPeripheralUUID:(id)arg1 withMutation:(id /* block */)arg2;
- (void)writeCharacteristic:(id)arg1 onSession:(unsigned long long)arg2 expectResponse:(bool)arg3 completion:(id /* block */)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
