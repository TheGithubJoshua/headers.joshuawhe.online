<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDSQLiteDatabase.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDSQLiteDatabase.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDSQLiteDatabase : NSObject {
    NSMutableDictionary * _attachedDatabaseURLsByName;
    NSMutableArray * _beforeCommitBlocks;
    long long  _cacheScope;
    bool  _checkpointRequired;
    struct sqlite3 { } * _db;
    <HDSQLiteDatabaseDelegate> * _delegate;
    NSURL * _fileURL;
    bool  _isHandlingTransactionEnd;
    bool  _isInTransaction;
    NSMutableArray * _onCommitBlocks;
    NSMutableArray * _onRollbackBlocks;
    bool  _requiresRollback;
    bool  _secureDeleteEnabled;
    HDSQLiteStatementCache * _statementCache;
    long long  _transactionType;
    bool  _writer;
}

@property (nonatomic) long long cacheScope;
@property (nonatomic) bool checkpointRequired;
@property (nonatomic) <HDSQLiteDatabaseDelegate> *delegate;
@property (nonatomic, readonly) NSURL *fileURL;
@property (getter=isOpen, nonatomic, readonly) bool open;
@property (nonatomic) bool secureDeleteEnabled;
@property (nonatomic, readonly) HDSQLiteStatementCache *statementCache;
@property (nonatomic, readonly) long long statementCacheScope;
@property (getter=isWriter, nonatomic) bool writer;

+ (bool)_stepStatement:(struct sqlite3_stmt { }*)arg1 hasRow:(bool*)arg2 resultCode:(int*)arg3 error:(id*)arg4;
+ (id)highFrequencyDatabaseURLWithProfileDirectoryPath:(id)arg1;
+ (id)mainDatabaseURLWithProfileDirectoryPath:(id)arg1;
+ (id)protectedDatabaseURLWithProfileDirectoryPath:(id)arg1;
+ (id)virtualFilesystemModule;

- (void).cxx_destruct;
- (int)_copyContentsFromDatabase:(struct sqlite3 { }*)arg1 toDatabase:(struct sqlite3 { }*)arg2;
- (bool)_executeSQL:(id)arg1 cache:(bool)arg2 error:(id*)arg3 bindingHandler:(id /* block */)arg4 enumerationHandler:(id /* block */)arg5;
- (bool)_executeUncachedSQL:(id)arg1 error:(id*)arg2;
- (bool)_executeUncachedSQL:(id)arg1 error:(id*)arg2 retryIfBusy:(bool)arg3;
- (bool)_integerValueForPragma:(id)arg1 databaseName:(id)arg2 value:(long long*)arg3 error:(id*)arg4;
- (int)_openForWriting:(bool)arg1 error:(id*)arg2;
- (bool)_prepareStatementForSQL:(id)arg1 cache:(bool)arg2 error:(id*)arg3 usingBlock:(id /* block */)arg4;
- (id)_schemaForDatabaseWithName:(id)arg1 error:(id*)arg2;
- (id)_schemaForIndexWithName:(id)arg1 database:(id)arg2 error:(id*)arg3;
- (id)_schemaForTableWithName:(id)arg1 database:(id)arg2 error:(id*)arg3;
- (bool)_setPragma:(id)arg1 integerValue:(long long)arg2 withDatabaseName:(id)arg3 error:(id*)arg4;
- (id)_statementCache;
- (id)_tableNamesForDatabaseWithName:(id)arg1 error:(id*)arg2;
- (bool)_verifyDatabaseOpenAndReturnError:(id*)arg1;
- (void)accessDatabaseUsingBlock:(id /* block */)arg1;
- (bool)accessHFDForReadingWithError:(id*)arg1 block:(id /* block */)arg2;
- (bool)accessHFDForWritingWithError:(id*)arg1 block:(id /* block */)arg2;
- (bool)attachDatabaseWithName:(id)arg1 fileURL:(id)arg2 error:(id*)arg3;
- (bool)attachProtectedDatabaseWithURL:(id)arg1 error:(id*)arg2;
- (void)beforeCommit:(id /* block */)arg1;
- (long long)cacheScope;
- (bool)checkpointRequired;
- (void)close;
- (bool)columnIsNullable:(id)arg1 inTable:(id)arg2 error:(id*)arg3;
- (bool)correlationCountForDataEntitySubclassTable:(id)arg1 count:(long long*)arg2 error:(id*)arg3;
- (void)dealloc;
- (id)delegate;
- (bool)deleteDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id*)arg3;
- (bool)deleteRowsFromDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id*)arg3;
- (bool)detachDatabaseWithName:(id)arg1 error:(id*)arg2;
- (bool)detachProtectedDatabaseWithError:(id*)arg1;
- (id)dumpSchemaWithError:(id*)arg1;
- (bool)enableIncrementalAutovacuumForDatabaseWithName:(id)arg1 error:(id*)arg2;
- (bool)executeSQL:(id)arg1 error:(id*)arg2 bindingHandler:(id /* block */)arg3 enumerationHandler:(id /* block */)arg4;
- (bool)executeSQLStatements:(id)arg1 error:(id*)arg2;
- (bool)executeUncachedSQL:(id)arg1 error:(id*)arg2;
- (bool)executeUncachedSQL:(id)arg1 error:(id*)arg2 bindingHandler:(id /* block */)arg3 enumerationHandler:(id /* block */)arg4;
- (id)fileURL;
- (bool)foreignKeyExistsFromTable:(id)arg1 column:(id)arg2 toTable:(id)arg3 column:(id)arg4 error:(id*)arg5;
- (int)getChangesCount;
- (id)getLastErrorWithResultCode:(int)arg1;
- (id)highFrequencyDatabaseURL;
- (bool)incrementalVacuumDatabaseIfNeeded:(id)arg1 error:(id*)arg2;
- (id)initMemoryDatabaseFromURL:(id)arg1 delegate:(id)arg2;
- (id)initMemoryDatabaseWithDelegate:(id)arg1;
- (id)initWithDatabaseURL:(id)arg1 copyingDatabase:(id)arg2 delegate:(id)arg3;
- (id)initWithDatabaseURL:(id)arg1 delegate:(id)arg2;
- (bool)isDatabaseWithNameAttached:(id)arg1;
- (bool)isOpen;
- (bool)isProtectedDatabaseAttached;
- (bool)isWriter;
- (id)lastInsertRowID;
- (void)onCommit:(id /* block */)arg1 orRollback:(id /* block */)arg2;
- (int)openForReadingWithError:(id*)arg1;
- (int)openWithError:(id*)arg1;
- (bool)performIntegrityCheckWithError:(id*)arg1 integrityErrorHandler:(id /* block */)arg2;
- (bool)performTransactionWithType:(long long)arg1 error:(id*)arg2 usingBlock:(id /* block */)arg3;
- (id)queryPlanForSQL:(id)arg1 error:(id*)arg2;
- (void)requireRollback;
- (bool)secureDeleteEnabled;
- (void)setCacheScope:(long long)arg1;
- (void)setCheckpointRequired:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setSecureDeleteEnabled:(bool)arg1;
- (bool)setUserVersion:(long long)arg1 withDatabaseName:(id)arg2 error:(id*)arg3;
- (void)setWriter:(bool)arg1;
- (id)statementCache;
- (long long)statementCacheScope;
- (id)statementsForDeleteRowsFromDataEntitySubclassTable:(id)arg1 intermediateTables:(id)arg2 error:(id*)arg3;
- (bool)table:(id)arg1 hasColumnWithName:(id)arg2 error:(id*)arg3;
- (id)typeOfColumn:(id)arg1 inTable:(id)arg2 error:(id*)arg3;
- (long long)userVersionWithDatabaseName:(id)arg1 error:(id*)arg2;
- (long long)validateForeignKeysForTable:(id)arg1 databaseName:(id)arg2 error:(id*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
