<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDWorkoutCondenser.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDWorkoutCondenser.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDWorkoutCondenser : NSObject <HDHealthDaemonReadyObserver, HDPeriodicActivityDelegate> {
    _HDWorkoutCondenserAnalyticsAccumulator * _analyticsAccumulator;
    long long  _maximumSeriesSize;
    long long  _minimumSeriesSize;
    HDPeriodicActivity * _periodicActivity;
    HDAssertion * _preparedDatabaseAccessibilityAssertion;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _queue;
}

@property (nonatomic, readonly) _HDWorkoutCondenserAnalyticsAccumulator *analyticsAccumulator;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) HDProfile *profile;
@property (readonly) Class superclass;

+ (bool)_condenseAndUpdateWorkout:(id)arg1 configuration:(id)arg2 error:(id*)arg3;
+ (bool)_condenseSamplesWithQuantityType:(id)arg1 workout:(id)arg2 entity:(id)arg3 predicate:(id)arg4 configuration:(id)arg5 transaction:(id)arg6 error:(id*)arg7;
+ (bool)_condenseWorkout:(id)arg1 entity:(id)arg2 configuration:(id)arg3 error:(id*)arg4;
+ (bool)_condenseWorkouts:(id)arg1 configuration:(id)arg2 error:(id*)arg3;
+ (bool)_createSeriesForIdentifier:(id)arg1 workout:(id)arg2 quantityType:(id)arg3 startTime:(double)arg4 values:(id)arg5 sampleUUIDsToDelete:(id)arg6 provenance:(id)arg7 configuration:(id)arg8 transaction:(id)arg9 error:(id*)arg10;
+ (id)_dataOriginProvenanceForQuantitySampleEntity:(id)arg1 configuration:(id)arg2 transaction:(id)arg3 error:(id*)arg4;
+ (bool)_deleteSamplesWithUUIDS:(id)arg1 configuration:(id)arg2 error:(id*)arg3;
+ (bool)_finalizeSeriesCreationForWorkout:(id)arg1 seriesIdentifier:(id)arg2 quantityType:(id)arg3 dataProvenance:(id)arg4 datumBuffer:(id)arg5 includedSeriesUUIDs:(id)arg6 includedSampleUUIDs:(id)arg7 seriesStartTime:(double)arg8 values:(id)arg9 configuration:(id)arg10 transaction:(id)arg11 error:(id*)arg12;
+ (bool)_finishSeries:(id)arg1 workout:(id)arg2 sampleUUIDsToDelete:(id)arg3 configuration:(id)arg4 transaction:(id)arg5 error:(id*)arg6;
+ (bool)_hasMoreThanMinimumNumberOfSingleValueSamplesWithEntity:(id)arg1 enumerationPredicate:(id)arg2 configuration:(id)arg3 transaction:(id)arg4 error:(id*)arg5;
+ (bool)_hasSamplesThatOverlapInTimeWithEntity:(id)arg1 enumerationPredicate:(id)arg2 configuration:(id)arg3 transaction:(id)arg4 error:(id*)arg5;
+ (bool)_insertValuesAndFinishSeriesIfNecessaryForWorkout:(id)arg1 seriesIdentifierInOut:(id*)arg2 quantityType:(id)arg3 dataProvenance:(id)arg4 includedSampleUUIDs:(id)arg5 seriesStartTime:(double)arg6 values:(id)arg7 configuration:(id)arg8 transaction:(id)arg9 error:(id*)arg10;
+ (id)_insertValuesForSeries:(id)arg1 quantityType:(id)arg2 startTime:(double)arg3 values:(id)arg4 provenance:(id)arg5 configuration:(id)arg6 transaction:(id)arg7 countOut:(long long*)arg8 error:(id*)arg9;
+ (void)_logCondenserProcessedWorkout:(id)arg1;
+ (bool)_processSamplesWithQuantityType:(id)arg1 workout:(id)arg2 predicate:(id)arg3 configuration:(id)arg4 transaction:(id)arg5 error:(id*)arg6;
+ (bool)_requiresProcessingWithEntity:(id)arg1 enumerationPredicate:(id)arg2 configuration:(id)arg3 transaction:(id)arg4 error:(id*)arg5;
+ (id)_seriesSyncIdentifierForWorkout:(id)arg1 startTime:(double)arg2 endTime:(double)arg3 count:(long long)arg4;
+ (bool)_updateCondenserVersionForWorkout:(id)arg1 configuration:(id)arg2 error:(id*)arg3;
+ (id)_workoutEntitiesRequiringCondensationWithPredicate:(id)arg1 limit:(long long)arg2 orderingProperties:(id)arg3 orderingDirections:(id)arg4 transaction:(id)arg5 error:(id*)arg6;
+ (id)_workoutEntitiesRequiringCondensationWithProfile:(id)arg1 limit:(long long)arg2 allowRecondensation:(bool)arg3 analyticsAccumulator:(id)arg4 error:(id*)arg5;
+ (id)condensableQuantityTypes;
+ (id)workoutEntitiesRequiringCondensationWithProfile:(id)arg1 limit:(long long)arg2 allowRecondensation:(bool)arg3 error:(id*)arg4;

- (void).cxx_destruct;
- (bool)_queue_condenseWorkoutsWithAccessibilityAssertion:(id)arg1 batchLimit:(long long)arg2 analyticsAccumulator:(id)arg3 error:(id*)arg4;
- (bool)_queue_condenseWorkoutsWithBatchLimit:(long long)arg1 analyticsAccumulator:(id)arg2 error:(id*)arg3;
- (void)_queue_didPerformCondensationForReason:(long long)arg1 success:(bool)arg2 error:(id)arg3;
- (void)_queue_popTTRPromptIfRequiredWithReason:(long long)arg1 success:(bool)arg2 error:(id)arg3;
- (void)_queue_submitAnalyticEventForReason:(long long)arg1 batchSize:(long long)arg2 success:(bool)arg3 duration:(double)arg4 analyticsAccumulator:(id)arg5 error:(id)arg6;
- (id)analyticsAccumulator;
- (id)condensableWorkoutsWithError:(id*)arg1;
- (bool)condenseWorkout:(id)arg1 error:(id*)arg2;
- (void)condenseWorkoutsForReason:(long long)arg1 workoutBatchLimit:(long long)arg2 completion:(id /* block */)arg3;
- (id)condensedWorkoutsWithError:(id*)arg1;
- (void)daemonReady:(id)arg1;
- (void)dealloc;
- (id)initWithProfile:(id)arg1;
- (void)performPeriodicActivity:(id)arg1 completion:(id /* block */)arg2;
- (void)periodicActivity:(id)arg1 configureXPCActivityCriteria:(id)arg2;
- (id)profile;
- (void)setMaximumSeriesSize:(long long)arg1;
- (void)setMinimumSeriesSize:(long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
