<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDAuthorizationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDAuthorizationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDAuthorizationManager : NSObject <HDDiagnosticObject> {
    NSMutableDictionary * _activeObjectPromptSessionsBySessionIdentifier;
    NSObject<OS_dispatch_queue> * _completionQueue;
    NSMutableDictionary * _openAppCompletionHandlersByBundleID;
    NSMutableDictionary * _pendingObjectAuthorizationRequestsByBundleIdentifier;
    NSMutableArray * _pendingRequestGroups;
    HDProfile * _profile;
    _HDAuthorizationRequestGroup * _promptingRequestGroup;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableDictionary * _remoteAuthorizationRecordsByBundleID;
    NSMutableDictionary * _requestGroupsByBundleIdentifier;
    double  _requestSessionTimeout;
    bool  _suppressAuthorizationPrompt;
}

@property (nonatomic, retain) NSMutableDictionary *activeObjectPromptSessionsBySessionIdentifier;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *completionQueue;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMutableDictionary *pendingObjectAuthorizationRequestsByBundleIdentifier;
@property (nonatomic, retain) NSMutableArray *pendingRequestGroups;
@property (nonatomic) HDProfile *profile;
@property (nonatomic, retain) _HDAuthorizationRequestGroup *promptingRequestGroup;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, retain) NSMutableDictionary *requestGroupsByBundleIdentifier;
@property (nonatomic) double requestSessionTimeout;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressAuthorizationPrompt;

- (void).cxx_destruct;
- (long long)_authorizationRequestStatusForClientBundleIdentifier:(id)arg1 writeTypes:(id)arg2 readTypes:(id)arg3 updateAuthorizationStatuses:(bool)arg4 error:(id*)arg5;
- (void)_performNanoSyncImmediatelyWithReason:(id)arg1;
- (id)_queue_activePromptSessionForBundleIdentifier:(id)arg1;
- (void)_queue_beginAuthorizationDelegateTransactionWithSessionIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)_queue_cancelAuthorizationRequestsWithIdentifiers:(id)arg1;
- (void)_queue_endAuthorizationDelegateTransactionWithSessionIdentifier:(id)arg1 error:(id)arg2;
- (void)_queue_enqueueAuthorizationRequestWithIdentifier:(id)arg1 bundleIdentifier:(id)arg2 writeTypes:(id)arg3 readTypes:(id)arg4 authorizationNeededHandler:(id /* block */)arg5 completion:(id /* block */)arg6;
- (void)_queue_handleNextAuthorizationRequestGroup;
- (void)_queue_requestGroupDidFinishPrompting:(id)arg1 error:(id)arg2;
- (void)_queue_resetAllAuthorizationRecordsWithCompletion:(id /* block */)arg1;
- (bool)_queue_resetAuthorizationRecordsForBundleIdentifier:(id)arg1 error:(id*)arg2;
- (void)_queue_setAuthorizationStatuses:(id)arg1 authorizationModes:(id)arg2 forBundleIdentifier:(id)arg3 options:(unsigned long long)arg4 completion:(id /* block */)arg5;
- (id)_validateRequiredAuthorizationWithRequestGroup:(id)arg1;
- (id)activeObjectPromptSessionsBySessionIdentifier;
- (void)applicationsUninstalledNotification:(id)arg1;
- (long long)authorizationRequestStatusForClientBundleIdentifier:(id)arg1 writeTypes:(id)arg2 readTypes:(id)arg3 error:(id*)arg4;
- (void)beginAuthorizationDelegateTransactionWithSessionIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (void)cancelAuthorizationRequestsWithIdentifiers:(id)arg1;
- (id)completionQueue;
- (void)dealloc;
- (id)diagnosticDescription;
- (void)endAuthorizationDelegateTransactionWithSessionIdentifier:(id)arg1 error:(id)arg2;
- (id)enqueueAuthorizationRequestForBundleIdentifier:(id)arg1 writeTypes:(id)arg2 readTypes:(id)arg3 authorizationNeededHandler:(id /* block */)arg4 completion:(id /* block */)arg5;
- (id)enqueueObjectAuthorizationRequestForBundleIdentifier:(id)arg1 samples:(id)arg2 promptIfNeeded:(bool)arg3 authorizationNeededHandler:(id /* block */)arg4 completion:(id /* block */)arg5;
- (void)handleAuthorizationRequestsForBundleIdentifier:(id)arg1 promptHandler:(id /* block */)arg2 completion:(id /* block */)arg3;
- (void)handleObjectAuthorizationRequestsForBundleIdentifier:(id)arg1 promptHandler:(id /* block */)arg2 completion:(id /* block */)arg3;
- (bool)hasRequiredAuthorizationStatusesForBundleIdentifier:(id)arg1 requiredReadTypes:(id)arg2 error:(id*)arg3;
- (id)initWithProfile:(id)arg1;
- (void)openAppForAuthorization:(id)arg1 sessionIdentifier:(id)arg2 completion:(id /* block */)arg3;
- (id)pendingObjectAuthorizationRequestsByBundleIdentifier;
- (id)pendingRequestGroups;
- (id)profile;
- (id)promptingRequestGroup;
- (id)queue;
- (id)requestGroupsByBundleIdentifier;
- (void)requestRemoteAuthorizationForRequestRecord:(id)arg1 requestSentHandler:(id /* block */)arg2 completion:(id /* block */)arg3;
- (double)requestSessionTimeout;
- (void)resetAllAuthorizationRecordsWithCompletion:(id /* block */)arg1;
- (void)setActiveObjectPromptSessionsBySessionIdentifier:(id)arg1;
- (void)setAuthorizationStatuses:(id)arg1 authorizationModes:(id)arg2 forBundleIdentifier:(id)arg3 options:(unsigned long long)arg4 completion:(id /* block */)arg5;
- (void)setCompletionQueue:(id)arg1;
- (void)setPendingObjectAuthorizationRequestsByBundleIdentifier:(id)arg1;
- (void)setPendingRequestGroups:(id)arg1;
- (void)setProfile:(id)arg1;
- (void)setPromptingRequestGroup:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)setRequestGroupsByBundleIdentifier:(id)arg1;
- (void)setRequestSessionTimeout:(double)arg1;
- (void)setSuppressAuthorizationPrompt:(bool)arg1;
- (bool)suppressAuthorizationPrompt;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
