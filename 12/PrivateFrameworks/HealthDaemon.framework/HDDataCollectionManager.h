<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HDDataCollectionManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HealthDaemon.framework/HDDataCollectionManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon (1)
 */

@interface HDDataCollectionManager : NSObject <HDAssertionObserver, HDDiagnosticObject, HDHealthDaemonReadyObserver> {
    NSObject<OS_dispatch_queue> * _assertionQueue;
    HDBTLEHeartRateDataCollector * _blteHeartRateDataCollector;
    NSMutableArray * _builtinCollectors;
    NSMutableDictionary * _dataAggregatorsByType;
    NSMutableDictionary * _dataCollectorsByType;
    HDDemoManager * _demoManager;
    NSDate * _lastLaunchUpdate;
    NSMutableDictionary * _observersByType;
    HDDatabaseCoalescedWritePool * _pendingSavePool;
    HDProfile * _profile;
    NSObject<OS_dispatch_queue> * _queue;
    id /* block */  _unitTest_aggregatorConfigurationChangedHandler;
    bool  unitTest_hasSetPendingSaveCoalescingInterval;
    double  unitTest_pendingSaveCoalescingInterval;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *assertionQueue;
@property (nonatomic, retain) HDBTLEHeartRateDataCollector *blteHeartRateDataCollector;
@property (nonatomic, retain) NSMutableDictionary *dataCollectorsByType;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) HDDemoManager *demoManager;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasAccessToFitnessData;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMutableDictionary *observersByType;
@property (nonatomic, readonly) HDProfile *profile;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_dataAggregatorConfigurationForCollectorState:(struct { double x1; bool x2; bool x3; bool x4; })arg1;
- (id)_dataAggregatorsDiagnosticDescription;
- (id)_dataCollectorsDiagnosticDescription;
- (bool)_dataReceived:(id)arg1 provenance:(id)arg2 isDemoData:(bool)arg3 error:(id*)arg4;
- (void)_demoObjectsReceived:(id)arg1 completion:(id /* block */)arg2;
- (id)_newAggregatorForObjectType:(id)arg1;
- (id)_observersDescription;
- (void)_queue_addDataCollector:(id)arg1;
- (void)_queue_adjustDataCollectionForType:(id)arg1 block:(id /* block */)arg2;
- (id)_queue_aggregatorForType:(id)arg1;
- (void)_queue_alertCollectorsOfTypesWithObservers;
- (struct { double x1; bool x2; bool x3; bool x4; })_queue_collectionStateForType:(id)arg1;
- (void)_queue_createBuiltinCollectors;
- (double)_queue_defaultCollectionIntervalForType:(id)arg1;
- (id)_queue_demoManagerCreatingIfNecessary;
- (id)_queue_observerMapForType:(id)arg1;
- (void)_queue_setupUnprotectedDataDependantState;
- (void)_requestAggregationThroughDate:(id)arg1 type:(id)arg2 mode:(long long)arg3 completion:(id /* block */)arg4;
- (void)_requestAggregationThroughDate:(id)arg1 types:(id)arg2 mode:(long long)arg3 completion:(id /* block */)arg4;
- (void)_updateDataCollectorsWithPrivacySettings;
- (void)addDataCollectionObserver:(id)arg1 type:(id)arg2 collectionInterval:(double)arg3 state:(id)arg4;
- (void)addDataCollector:(id)arg1;
- (id)aggregatorForType:(id)arg1;
- (void)assertionManager:(id)arg1 assertionInvalidated:(id)arg2;
- (id)assertionQueue;
- (id)blteHeartRateDataCollector;
- (id)btleHeartRateDataCollector;
- (void)daemonReady:(id)arg1;
- (void)dataCollectionObserver:(id)arg1 didChangeState:(id)arg2;
- (id)dataCollectorsByType;
- (void)dealloc;
- (double)defaultCollectionIntervalForType:(id)arg1;
- (id)demoManager;
- (id)diagnosticDescription;
- (void)generateFakeDataForActivityType:(long long)arg1 minutes:(double)arg2 completion:(id /* block */)arg3;
- (bool)hasAccessToFitnessData;
- (id)init;
- (id)initWithProfile:(id)arg1;
- (id)observersByType;
- (void)performSaveWithMaximumLatency:(double)arg1 block:(id /* block */)arg2 completion:(id /* block */)arg3;
- (void)periodicUpdate;
- (id)pluginDataCollectors;
- (id)profile;
- (id)queue;
- (void)removeDataCollectionObserver:(id)arg1;
- (void)removeDataCollectionObserver:(id)arg1 type:(id)arg2;
- (void)requestAggregationForAllTypesThroughDate:(id)arg1 mode:(long long)arg2 completion:(id /* block */)arg3;
- (void)requestAggregationThroughDate:(id)arg1 types:(id)arg2 mode:(long long)arg3 completion:(id /* block */)arg4;
- (bool)sensorDataArrayReceived:(id)arg1 deviceEntity:(id)arg2 error:(id*)arg3;
- (void)sensorDataReceived:(id)arg1 deviceEntity:(id)arg2;
- (void)setAssertionQueue:(id)arg1;
- (void)setBlteHeartRateDataCollector:(id)arg1;
- (void)setDataCollectorsByType:(id)arg1;
- (void)setDemoManager:(id)arg1;
- (void)setObserversByType:(id)arg1;
- (void)setQueue:(id)arg1;
- (void)startDataCollectionForType:(id)arg1 observer:(id)arg2 collectionInterval:(double)arg3;
- (void)startFakingDataWithActivityType:(long long)arg1 speed:(id)arg2;
- (void)startFakingWithHKWorkoutActivityType:(unsigned long long)arg1;
- (void)stopDataCollectionForType:(id)arg1 observer:(id)arg2;
- (void)stopFakingData;
- (id)takeCollectionAssertionWithOwnerIdentifier:(id)arg1 sampleTypes:(id)arg2 observer:(id)arg3 observerState:(id)arg4 collectionInterval:(double)arg5;
- (id)takeCollectionAssertionWithOwnerIdentifier:(id)arg1 sampleTypes:(id)arg2 observerState:(id)arg3 collectionInterval:(double)arg4;
- (id)unitTest_dataAggregatorConfigurationForType:(id)arg1;
- (void)unitTest_setAggregator:(id)arg1 forType:(id)arg2;
- (void)unitTest_setAggregatorConfigurationChangeHandler:(id /* block */)arg1;
- (void)unitTest_setPendingSaveCoalescingInterval:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
