<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKComposeChatController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ChatKit.framework/CKComposeChatController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit (1.0)
 */

@interface CKComposeChatController : CKChatController <CKBusinessInfoViewDelegate, CKComposeRecipientSelectionControllerDelegate> {
    NSDictionary * _bizIntent;
    CKBusinessInfoView * _businessInfoView;
    UIBarButtonItem * _composeCancelItem;
    CKComposeRecipientSelectionController * _composeRecipientSelectionController;
    id /* block */  _deferredSendAnimationBlock;
    bool  _ignoreKeyboardNotifications;
    CKComposeNavbarManager * _navbarManager;
    bool  _newComposeCancelled;
    CKComposition * _prepopulatedComposition;
    NSArray * _prepopulatedRecipients;
}

@property (nonatomic, retain) NSDictionary *bizIntent;
@property (nonatomic, retain) CKBusinessInfoView *businessInfoView;
@property (nonatomic, retain) UIBarButtonItem *composeCancelItem;
@property (nonatomic, retain) CKComposeRecipientSelectionController *composeRecipientSelectionController;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, copy) id /* block */ deferredSendAnimationBlock;
@property (nonatomic) <CKComposeChatControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool ignoreKeyboardNotifications;
@property (nonatomic, retain) CKComposeNavbarManager *navbarManager;
@property (nonatomic) bool newComposeCancelled;
@property (nonatomic, retain) CKComposition *prepopulatedComposition;
@property (nonatomic, retain) NSArray *prepopulatedRecipients;
@property (nonatomic, readonly) NSArray *proposedRecipients;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *unatomizedRecipientText;

- (void).cxx_destruct;
- (id)_anisetteData;
- (bool)_chatShowsUnexpectedlyLoggedOutNotification;
- (double)_entryViewTopInsetPadding;
- (bool)_isWhitelistedBusinessRecipient;
- (void)_passKitUIDismissed:(id)arg1;
- (void)_processBizIntentIfNeeded;
- (void)_saveDraftState;
- (void)_setConversationDeferredSetup;
- (bool)_shouldSetToFieldAsFirstResponder;
- (bool)_shouldValidatePayloadBeforeSendingPayload:(id)arg1;
- (void)_triggerRecipientFinalization;
- (void)_updateNavigationButtons;
- (void)_updateTitleAnimated:(bool)arg1;
- (void)addBizIntentToConversation:(id)arg1;
- (bool)becomeFirstResponder;
- (id)bizIntent;
- (id)businessInfoView;
- (void)businessInfoView:(id)arg1 infoButtonTapped:(id)arg2;
- (void)cancelButtonTapped:(id)arg1;
- (void)chatInputWillUpdateInputViewShowingBrowser;
- (id)composeCancelItem;
- (id)composeRecipientSelectionController;
- (void)conversationLeft;
- (void)dealloc;
- (id /* block */)deferredSendAnimationBlock;
- (void)handleAddressBookChange:(id)arg1;
- (bool)hasFailedRecipients;
- (bool)hasUnreachableEmergencyRecipient;
- (bool)ignoreKeyboardNotifications;
- (id)initWithRecipientAddresses:(id)arg1 composition:(id)arg2 bizIntent:(id)arg3;
- (id)inputAccessoryView;
- (bool)isComposingRecipient;
- (bool)isSafeToMarkAsRead;
- (void)keyboardWillShowOrHide:(id)arg1;
- (void)layoutBusinessInfoViewIfNecessary;
- (void)messageEntryViewDidChange:(id)arg1;
- (void)messageEntryViewSendButtonHit:(id)arg1;
- (void)messageEntryViewSendButtonHitWhileDisabled:(id)arg1;
- (id)navbarManager;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })navigationBarInsetsForRecipientSelectionController:(id)arg1;
- (bool)newComposeCancelled;
- (id)outgoingComposeViewForSendAnimation;
- (void)parentControllerDidResume:(bool)arg1 animating:(bool)arg2;
- (void)prepareForSuspend;
- (id)prepopulatedComposition;
- (id)prepopulatedRecipients;
- (id)proposedRecipients;
- (void)recipientSelectionController:(id)arg1 didFinishAvailaiblityLookupForRecipient:(id)arg2;
- (void)recipientSelectionController:(id)arg1 didSelectConversation:(id)arg2;
- (void)recipientSelectionController:(id)arg1 textDidChange:(id)arg2;
- (void)recipientSelectionControllerDidBecomeFirstResponder:(id)arg1;
- (void)recipientSelectionControllerDidChangeSize:(id)arg1;
- (void)recipientSelectionControllerDidPushABViewController:(id)arg1;
- (void)recipientSelectionControllerRequestDismissKeyboard:(id)arg1;
- (void)recipientSelectionControllerReturnPressed:(id)arg1;
- (void)recipientSelectionControllerSearchListDidShowOrHide:(id)arg1;
- (void)reloadEntryViewIfNeeded;
- (void)sendAnimationManagerWillStartAnimation:(id)arg1 context:(id)arg2;
- (void)sendComposition:(id)arg1;
- (void)setBizIntent:(id)arg1;
- (void)setBusinessInfoView:(id)arg1;
- (void)setBusinessInfoViewInfoIfNecessary;
- (void)setComposeCancelItem:(id)arg1;
- (void)setComposeRecipientSelectionController:(id)arg1;
- (void)setDeferredSendAnimationBlock:(id /* block */)arg1;
- (void)setIgnoreKeyboardNotifications:(bool)arg1;
- (void)setNavbarManager:(id)arg1;
- (void)setNewComposeCancelled:(bool)arg1;
- (void)setPrepopulatedComposition:(id)arg1;
- (void)setPrepopulatedRecipients:(id)arg1;
- (bool)shouldUseNavigationBarCanvasView;
- (id)textViewOnscreenWithEntryView;
- (double)topInsetPadding;
- (void)transcriptCollectionViewController:(id)arg1 balloonView:(id)arg2 tappedForChatItem:(id)arg3;
- (bool)transcriptCollectionViewControllerPlaybackForOutgoingEffectsIsAllowed:(id)arg1;
- (id)unatomizedRecipientText;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
