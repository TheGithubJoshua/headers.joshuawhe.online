<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKMessageEntryTextView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ChatKit.framework/CKMessageEntryTextView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit (1.0)
 */

@interface CKMessageEntryTextView : EMKTextView {
    double  _adjustedLineFragmentPadding;
    NSString * _autocorrectionContext;
    bool  _hideCaret;
    double  _placeHolderWidth;
    UIColor * _placeholderColor;
    double  _placeholderExpandedWidth;
    UILabel * _placeholderLabel;
    NSString * _responseContext;
    UIKeyboardInputMode * _savedKeyboardInputMode;
    bool  _sendCurrentLocationFromKeyboardEnabled;
    bool  _showingDictationPlaceholder;
    bool  _updatesFontOnTextChange;
}

@property (nonatomic) double adjustedLineFragmentPadding;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic, copy) NSAttributedString *compositionText;
@property (nonatomic) bool hideCaret;
@property (nonatomic) double placeHolderWidth;
@property (nonatomic, copy) UIColor *placeholderColor;
@property (nonatomic) double placeholderExpandedWidth;
@property (nonatomic, retain) UILabel *placeholderLabel;
@property (nonatomic, copy) NSString *placeholderText;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic, retain) UIKeyboardInputMode *savedKeyboardInputMode;
@property (nonatomic) bool sendCurrentLocationFromKeyboardEnabled;
@property (getter=isShowingDictationPlaceholder, nonatomic) bool showingDictationPlaceholder;
@property (getter=isSingleLine, nonatomic, readonly) bool singleLine;
@property (nonatomic) bool updatesFontOnTextChange;

- (void).cxx_destruct;
- (SEL)_sendCurrentLocationAction;
- (double)adjustedLineFragmentPadding;
- (id)autocorrectionContext;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (id)compositionText;
- (void)dealloc;
- (bool)hideCaret;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 textContainer:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (bool)isShowingDictationPlaceholder;
- (bool)isSingleLine;
- (void)layoutSubviews;
- (double)placeHolderWidth;
- (id)placeholderColor;
- (double)placeholderExpandedWidth;
- (id)placeholderLabel;
- (id)placeholderText;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (bool)resignFirstResponder;
- (id)responseContext;
- (void)restoreKeyboardInputMode;
- (void)saveKeyboardInputMode;
- (id)savedKeyboardInputMode;
- (bool)sendCurrentLocationFromKeyboardEnabled;
- (void)setAdjustedLineFragmentPadding:(double)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setAutocorrectionContext:(id)arg1;
- (void)setCompositionText:(id)arg1;
- (void)setFont:(id)arg1;
- (void)setHideCaret:(bool)arg1;
- (void)setPlaceHolderWidth:(double)arg1;
- (void)setPlaceholderColor:(id)arg1;
- (void)setPlaceholderExpandedWidth:(double)arg1;
- (void)setPlaceholderLabel:(id)arg1;
- (void)setPlaceholderText:(id)arg1;
- (void)setResponseContext:(id)arg1;
- (void)setSavedKeyboardInputMode:(id)arg1;
- (void)setSendCurrentLocationFromKeyboardEnabled:(bool)arg1;
- (void)setShowingDictationPlaceholder:(bool)arg1;
- (void)setUpdatesFontOnTextChange:(bool)arg1;
- (void)textViewDidChange:(id)arg1;
- (void)updateFontIfNeeded;
- (void)updateTextView;
- (bool)updatesFontOnTextChange;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
