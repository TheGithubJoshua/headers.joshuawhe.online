<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKTranscriptCollectionViewLayout.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ChatKit.framework/CKTranscriptCollectionViewLayout.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit (1.0)
 */

@interface CKTranscriptCollectionViewLayout : UICollectionViewLayout {
    double  _anchorYPosition;
    NSArray * _associatedLayoutAttributes;
    bool  _coalesceInvalidations;
    struct CGSize { 
        double width; 
        double height; 
    }  _contentSize;
    NSArray * _decorationLayoutAttributes;
    CADisplayLink * _displayLink;
    bool  _easingUp;
    NSMutableDictionary * _finalParentVerticalOffsets;
    bool  _hasLoadMore;
    bool  _holdingBoundsInvalidation;
    NSIndexSet * _indicesOfChatItemsToBeInsertedWithoutFading;
    NSIndexSet * _indicesOfChatItemsToBeRemovedWithoutFading;
    NSMutableDictionary * _initialParentLayoutAttributes;
    NSMutableIndexSet * _insertedAssociatedLayoutAttributes;
    bool  _invalidatedViaBoundsChange;
    bool  _isResting;
    NSArray * _layoutAttributes;
    NSArray * _oldAssociatedLayoutAttributes;
    double  _prevTimestamp;
    bool  _sizeCategoryIsAccessibilitySizeCategory;
    struct CGPoint { 
        double x; 
        double y; 
    }  _targetContentOffset;
    bool  _useFastQuanta;
    bool  _useInitialLayoutAttributesForRotation;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _visibleBounds;
}

@property (nonatomic) double anchorYPosition;
@property (nonatomic, copy) NSArray *associatedLayoutAttributes;
@property (nonatomic) bool coalesceInvalidations;
@property (nonatomic) struct CGSize { double x1; double x2; } contentSize;
@property (nonatomic, copy) NSArray *decorationLayoutAttributes;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic) bool easingUp;
@property (nonatomic, retain) NSMutableDictionary *finalParentVerticalOffsets;
@property (nonatomic) bool hasLoadMore;
@property (getter=isHoldingBoundsInvalidation, nonatomic) bool holdingBoundsInvalidation;
@property (nonatomic, retain) NSIndexSet *indicesOfChatItemsToBeInsertedWithoutFading;
@property (nonatomic, retain) NSIndexSet *indicesOfChatItemsToBeRemovedWithoutFading;
@property (nonatomic, retain) NSMutableDictionary *initialParentLayoutAttributes;
@property (nonatomic, retain) NSMutableIndexSet *insertedAssociatedLayoutAttributes;
@property (nonatomic) bool invalidatedViaBoundsChange;
@property (nonatomic) bool isResting;
@property (nonatomic, copy) NSArray *layoutAttributes;
@property (nonatomic, copy) NSArray *oldAssociatedLayoutAttributes;
@property (nonatomic) double prevTimestamp;
@property (nonatomic) bool sizeCategoryIsAccessibilitySizeCategory;
@property (nonatomic) struct CGPoint { double x1; double x2; } targetContentOffset;
@property (nonatomic) bool useFastQuanta;
@property (getter=isUsingInitialLayoutAttributesForRotation, nonatomic) bool useInitialLayoutAttributesForRotation;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleBounds;

+ (Class)layoutAttributesClass;
+ (long long)translateLayoutIndexToEffectIndex:(long long)arg1;

- (void).cxx_destruct;
- (void)_dealloc;
- (void)_invalidateLayoutForDisplayLink;
- (double)anchorYPosition;
- (id)associatedLayoutAttributes;
- (double)bezierPointForPercentage:(double)arg1 anchor1:(double)arg2 anchor2:(double)arg3 control1:(double)arg4 control2:(double)arg5;
- (void)clearParentInitialIndexesAndFinalOffsets;
- (bool)coalesceInvalidations;
- (struct CGSize { double x1; double x2; })collectionViewContentSize;
- (struct CGSize { double x1; double x2; })contentSize;
- (void)dealloc;
- (id)decorationLayoutAttributes;
- (id)displayLink;
- (void)displayLinkFired:(id)arg1;
- (bool)easingUp;
- (long long)effectIndexForDecorationViewAtIndex:(long long)arg1;
- (id)finalLayoutAttributesForDisappearingItemAtIndexPath:(id)arg1;
- (id)finalParentVerticalOffsets;
- (bool)hasLoadMore;
- (id)indicesOfChatItemsToBeInsertedWithoutFading;
- (id)indicesOfChatItemsToBeRemovedWithoutFading;
- (id)init;
- (id)initialLayoutAttributesForAppearingItemAtIndexPath:(id)arg1;
- (id)initialParentLayoutAttributes;
- (id)insertedAssociatedLayoutAttributes;
- (void)invalidateDisplayLink;
- (bool)invalidatedViaBoundsChange;
- (bool)isHoldingBoundsInvalidation;
- (bool)isResting;
- (bool)isUsingInitialLayoutAttributesForRotation;
- (id)layoutAttributes;
- (id)layoutAttributesForDecorationViewOfKind:(id)arg1 atIndexPath:(id)arg2;
- (id)layoutAttributesForElementsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)layoutAttributesForItemAtIndexPath:(id)arg1;
- (id)oldAssociatedLayoutAttributes;
- (void)prepareLayout;
- (void)prepareLayoutForRotisserieScrolling;
- (double)prevTimestamp;
- (void)reduceMotionSettingChanged:(id)arg1;
- (void)reloadData;
- (void)setAnchorYPosition:(double)arg1;
- (void)setAssociatedLayoutAttributes:(id)arg1;
- (void)setCoalesceInvalidations:(bool)arg1;
- (void)setContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setDecorationLayoutAttributes:(id)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setEasingUp:(bool)arg1;
- (void)setFinalParentVerticalOffsets:(id)arg1;
- (void)setHasLoadMore:(bool)arg1;
- (void)setHoldingBoundsInvalidation:(bool)arg1;
- (void)setIndicesOfChatItemsToBeInsertedWithoutFading:(id)arg1;
- (void)setIndicesOfChatItemsToBeRemovedWithoutFading:(id)arg1;
- (void)setInitialIndex:(unsigned long long)arg1 forParentOfAssociatedItemInsertedAtIndex:(unsigned long long)arg2;
- (void)setInitialParentLayoutAttributes:(id)arg1;
- (void)setInsertedAssociatedLayoutAttributes:(id)arg1;
- (void)setInvalidatedViaBoundsChange:(bool)arg1;
- (void)setIsResting:(bool)arg1;
- (void)setLayoutAttributes:(id)arg1;
- (void)setOldAssociatedLayoutAttributes:(id)arg1;
- (void)setPrevTimestamp:(double)arg1;
- (void)setSizeCategoryIsAccessibilitySizeCategory:(bool)arg1;
- (void)setTargetContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setUseFastQuanta:(bool)arg1;
- (void)setUseInitialLayoutAttributesForRotation:(bool)arg1;
- (void)setVerticalOffset:(double)arg1 forParentOfAssociatedItemDeletedAtIndex:(unsigned long long)arg2;
- (void)setVisibleBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)shouldInvalidateLayoutForBoundsChange:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)sizeCategoryDidChange:(id)arg1;
- (bool)sizeCategoryIsAccessibilitySizeCategory;
- (struct CGPoint { double x1; double x2; })targetContentOffset;
- (void)updateAssociatedLayoutAttributesIfNecessary;
- (void)updateAttributesForAnchorYChangeWithAttributes:(id)arg1;
- (void)updateAttributesForTargetContentOffsetChangeWithAttributes:(id)arg1;
- (void)updateContentSize;
- (void)updateFrames;
- (bool)useFastQuanta;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBounds;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
