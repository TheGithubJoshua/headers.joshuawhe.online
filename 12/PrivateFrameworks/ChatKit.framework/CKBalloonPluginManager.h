<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKBalloonPluginManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ChatKit.framework/CKBalloonPluginManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit (1.0)
 */

@interface CKBalloonPluginManager : NSObject <CKAppInstallationWatcherObserver> {
    NSMutableArray * _MRUPluginInteractionList;
    NSMutableDictionary * _activeBrowsers;
    NSArray * _allPlugins;
    bool  _appStoreAutoEnableToggled;
    NSArray * _appStripCandidatePlugins;
    NSArray * _cachedPotentiallyVisiblePlugins;
    <CKExtensionConsumer> * _currentExtensionConsumer;
    NSArray * _favoriteAppStripPlugins;
    NSMutableDictionary * _historicalPluginIndexPathMap;
    NSCache * _iconCache;
    bool  _isAppInstallationEnabled;
    bool  _isAppInstallationObserver;
    bool  _isAppRemovalEnabled;
    bool  _isCameraAllowed;
    bool  _keepingEmptySections;
    NSString * _lastLaunchedIdentifier;
    IMBalloonPlugin * _lastViewedPlugin;
    long long  _numberOfSectionsToKeep;
    NSSet * _oldVisibleSwitcherPluginIdentifiers;
    NSDictionary * _pluginIndexPathMap;
    NSDictionary * _pluginLaunchTimeMap;
    NSDictionary * _pluginSeenMap;
    NSDictionary * _pluginVersionMap;
    NSArray * _recentAppStripPlugins;
    CKPreviewDispatchCache * _snapshotCache;
    NSArray * _visibleAppStripPlugins;
    NSMutableArray * _visibleInstallations;
    NSArray * _visiblePlugins;
    NSArray * _visibleRecentAppStripPlugins;
    NSArray * _visibleSwitcherPlugins;
}

@property (nonatomic, retain) NSMutableArray *MRUPluginInteractionList;
@property (nonatomic, retain) NSMutableDictionary *activeBrowsers;
@property (nonatomic, readonly) NSArray *allEnabledPlugins;
@property (nonatomic, retain) NSArray *allPlugins;
@property (getter=isAppStoreAutoEnableToggled, nonatomic) bool appStoreAutoEnableToggled;
@property (nonatomic, retain) NSArray *cachedPotentiallyVisiblePlugins;
@property (nonatomic) <CKExtensionConsumer> *currentExtensionConsumer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSArray *disabledPlugins;
@property (nonatomic, retain) NSArray *favoriteAppStripPlugins;
@property (nonatomic, readonly) bool hasLoadedExtensions;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSMutableDictionary *historicalPluginIndexPathMap;
@property (nonatomic, retain) NSMutableDictionary *historicalPluginIndexPathMap;
@property (nonatomic, retain) NSCache *iconCache;
@property (nonatomic) bool isAppInstallationEnabled;
@property (nonatomic) bool isAppInstallationObserver;
@property (nonatomic, readonly) bool isAppRemovalEnabled;
@property (nonatomic) bool isAppRemovalEnabled;
@property (nonatomic, readonly) bool isAppStoreEnabled;
@property (nonatomic) bool isCameraAllowed;
@property (getter=isKeepingEmptySections, nonatomic) bool keepingEmptySections;
@property (nonatomic, retain) NSString *lastLaunchedIdentifier;
@property (nonatomic) IMBalloonPlugin *lastViewedPlugin;
@property (nonatomic) long long numberOfSectionsToKeep;
@property (nonatomic, retain) NSSet *oldVisibleSwitcherPluginIdentifiers;
@property (nonatomic, retain) NSDictionary *pluginIndexPathMap;
@property (nonatomic, retain) NSDictionary *pluginLaunchTimeMap;
@property (nonatomic, retain) NSDictionary *pluginSeenMap;
@property (nonatomic, retain) NSDictionary *pluginVersionMap;
@property (nonatomic, readonly) NSArray *potentiallyVisibleNonFavoritePlugins;
@property (nonatomic, readonly) NSArray *potentiallyVisiblePlugins;
@property (nonatomic, readonly) NSArray *recentAppStripPlugins;
@property (nonatomic, retain) CKPreviewDispatchCache *snapshotCache;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *visibleDrawerPlugins;
@property (nonatomic, readonly) NSArray *visibleFavoriteAppStripPlugins;
@property (nonatomic, retain) NSMutableArray *visibleInstallations;
@property (nonatomic, retain) NSArray *visiblePlugins;
@property (nonatomic, readonly) NSArray *visibleRecentAppStripPlugins;
@property (nonatomic, retain) NSArray *visibleSwitcherPlugins;

+ (id)defaultFavoritePlugins;
+ (id)morePlugin;
+ (id)recentPlugin;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)MRUPluginInteractionList;
- (void)_addAppWithBalloonIdentifier:(id)arg1;
- (bool)_addPluginToRecentsFrontIfNeeded:(id)arg1 frontOfRecents:(id)arg2 pluginMap:(id)arg3 fallbackMap:(id)arg4;
- (id)_decodeIndexPathMap:(id)arg1;
- (void)_disableAppWithBalloonIdentifier:(id)arg1;
- (id)_encodeIndexPathMap:(id)arg1;
- (void)_invalidatePluginForKey:(id)arg1;
- (id)_pluginIndexPathForFavoritePluginWithIdentifier:(id)arg1 pluginMap:(id)arg2 fallbackMap:(id)arg3;
- (void)_refreshVisibleDrawerPluginsDueToAppInstallationChange;
- (void)_setSeen:(bool)arg1 forPlugin:(id)arg2;
- (bool)_shouldForceRegenerateIndexPathMap;
- (bool)_shouldUninstallContainingBundle:(id)arg1;
- (void)_updateHistoricalPluginIndexPathMap;
- (id)activeBrowsers;
- (id)allEnabledPlugins;
- (id)allPlugins;
- (id)allPluginsPassingTest:(id /* block */)arg1;
- (id)allPotentiallyVisiblePlugins;
- (void)appInstallationWatcher:(id)arg1 addedAppInstallation:(id)arg2;
- (void)appInstallationWatcher:(id)arg1 changedAppInstallation:(id)arg2;
- (unsigned long long)badgeValueForPlugin:(id)arg1;
- (id)balloonPluginIdentifierForAppExtensionBundleIdentifier:(id)arg1;
- (id)browserSnapshotForKey:(id)arg1;
- (id)cachedPotentiallyVisiblePlugins;
- (id)candidateAppStripPlugins;
- (void)cleanSeenMap;
- (void)commitInteractionTimeOrderingChanges;
- (id)createFakeAppsForPPTTesting:(unsigned long long)arg1;
- (id)currentExtensionConsumer;
- (void)dealloc;
- (id)descriptionOfVisibleDrawerPlugins;
- (id)digitalTouchViewControllerWithDataSource:(id)arg1;
- (id)disabledPlugins;
- (id)existingPhotoBrowserViewController;
- (id)existingViewControllerForPluginIdentifier:(id)arg1;
- (id)favoriteAppStripPlugins;
- (id)filteredArrayOfInstallationsThatShouldBeVisible:(id)arg1;
- (void)forceKillNonCameraRemoteExtensionsImmediately;
- (void)forceKillRemoteExtensionsWithDelay:(bool)arg1;
- (void)forceKillRemoteExtensionsWithDelay:(bool)arg1 skipCameraApp:(bool)arg2;
- (void)forceTearDownRemoteViewsSkippingCameraApp:(bool)arg1;
- (void)handleManagedConfigSettingsChangeNotification:(id)arg1;
- (id)handwritingViewControllerWithPluginPayloads:(id)arg1;
- (bool)hasLoadedExtensions;
- (struct __CFString { }*)healthKitAchievementAvailabilityChangedNotification;
- (void)healthStickerStatusChanged;
- (id)historicalPluginIndexPathMap;
- (id)iconCache;
- (id)init;
- (void)invalidateAllActivePlugins;
- (void)invalidateAllActivePluginsSkippingCameraApp:(bool)arg1;
- (void)invalidateAllActiveSwitcherPlugins;
- (void)invalidateIconCache;
- (void)invalidatePhotosPlugin;
- (bool)isAppInstallationEnabled;
- (bool)isAppInstallationObserver;
- (bool)isAppRemovalEnabled;
- (bool)isAppStoreAutoEnableToggled;
- (bool)isAppStoreEnabled;
- (bool)isCameraAllowed;
- (bool)isEnabledAndVisible:(id)arg1;
- (bool)isInternalPlugin:(id)arg1;
- (bool)isKeepingEmptySections;
- (bool)isPluginEnabled:(id)arg1;
- (bool)isPluginSeen:(id)arg1;
- (bool)isPluginSeenWithInstalledVersion:(id)arg1;
- (bool)isPluginVisible:(id)arg1;
- (bool)isViewController:(id)arg1 fromPluginWithIdentifier:(id)arg2;
- (id)lastLaunchedIdentifier;
- (id)lastLaunchedPlugin;
- (id)lastViewedPlugin;
- (long long)lastViewedPluginIndex;
- (unsigned long long)launchStatusForPlugin:(id)arg1;
- (id)launchTimeForPlugin:(id)arg1;
- (id)newViewControllerForPluginIdentifier:(id)arg1 dataSource:(id)arg2;
- (long long)numberOfSectionsToKeep;
- (id)oldVisibleSwitcherPluginIdentifiers;
- (id)orderedPlugins:(bool)arg1;
- (id)photosBrowserViewControllerWithPluginPayloads:(id)arg1;
- (id)pluginForIdentifier:(id)arg1;
- (id)pluginIndexPathMap;
- (id)pluginLaunchTimeMap;
- (id)pluginSeenMap;
- (id)pluginVersionMap;
- (id)potentiallyVisibleNonFavoritePlugins;
- (id)potentiallyVisiblePlugins;
- (void)prepareForSuspend;
- (id)recentAppStripPlugins;
- (void)refreshPlugins;
- (void)regeneratePluginIndexPaths;
- (void)reloadInstalledApps:(id)arg1;
- (void)removeAppWithIdentifier:(id)arg1;
- (void)removeVisibleInstallationWithID:(id)arg1;
- (void)saveWithNotification:(bool)arg1;
- (void)setActiveBrowsers:(id)arg1;
- (void)setAllPlugins:(id)arg1;
- (void)setAppStoreAutoEnableToggled:(bool)arg1;
- (void)setCachedPotentiallyVisiblePlugins:(id)arg1;
- (void)setCurrentExtensionConsumer:(id)arg1;
- (void)setEnabled:(bool)arg1 forPlugin:(id)arg2;
- (void)setFavoriteAppStripPlugins:(id)arg1;
- (void)setHistoricalPluginIndexPathMap:(id)arg1;
- (void)setIconCache:(id)arg1;
- (void)setIsAppInstallationEnabled:(bool)arg1;
- (void)setIsAppInstallationObserver:(bool)arg1;
- (void)setIsAppRemovalEnabled:(bool)arg1;
- (void)setIsCameraAllowed:(bool)arg1;
- (void)setKeepingEmptySections:(bool)arg1;
- (void)setLastLaunchedIdentifier:(id)arg1;
- (void)setLastViewedPlugin:(id)arg1;
- (void)setMRUPluginInteractionList:(id)arg1;
- (void)setNumberOfSectionsToKeep:(long long)arg1;
- (void)setOldVisibleSwitcherPluginIdentifiers:(id)arg1;
- (void)setPluginIndexPathMap:(id)arg1;
- (void)setPluginLaunchTimeMap:(id)arg1;
- (void)setPluginSeenMap:(id)arg1;
- (void)setPluginVersionMap:(id)arg1;
- (void)setSeen:(bool)arg1 forPlugin:(id)arg2;
- (void)setSnapshotCache:(id)arg1;
- (void)setVisibleInstallations:(id)arg1;
- (void)setVisiblePlugins:(id)arg1;
- (void)setVisibleSwitcherPlugins:(id)arg1;
- (id)snapshotCache;
- (unsigned long long)unseenPluginCount;
- (void)updateAppInstallations;
- (void)updateIndexPath:(id)arg1 forPlugin:(id)arg2 isDrawerPluginPath:(bool)arg3;
- (void)updateInteractionTimeForPlugin:(id)arg1;
- (void)updateLaunchStatus:(unsigned long long)arg1 forPlugin:(id)arg2 withNotification:(bool)arg3;
- (void)updateLaunchTimeForPlugin:(id)arg1;
- (void)updateSnapshotForBrowserViewController:(id)arg1 currentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)viewControllerForPluginIdentifier:(id)arg1;
- (id)viewControllerForPluginIdentifier:(id)arg1 dataSource:(id)arg2;
- (id)visibleDrawerPlugins;
- (id)visibleFavoriteAppStripPlugins;
- (id)visibleInstallations;
- (id)visiblePlugins;
- (id)visibleRecentAppStripPlugins;
- (id)visibleSwitcherPlugins;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
