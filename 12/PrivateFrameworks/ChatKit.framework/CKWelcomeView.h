<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKWelcomeView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ChatKit.framework/CKWelcomeView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit (1.0)
 */

@interface CKWelcomeView : UIView {
    UIVisualEffectView * _buttonView;
    NSLayoutConstraint * _buttonViewBottomAnchorLayoutConstraint;
    NSLayoutConstraint * _buttonViewLeadingAnchorLayoutConstraint;
    NSLayoutConstraint * _buttonViewTrailingAnchorLayoutConstraint;
    UIButton * _cancelButton;
    NSLayoutConstraint * _cancelButtonFirstBaselineAnchorLayoutConstraint;
    NSLayoutConstraint * _cancelButtonHeightAnchorLayoutConstraint;
    NSLayoutConstraint * _cancelButtonLastBaselineAnchorLayoutConstraint;
    NSLayoutConstraint * _cancelButtonLeadingAnchorLayoutConstraint;
    NSLayoutConstraint * _cancelButtonTrailingAnchorLayoutConstraint;
    UIButton * _confirmButton;
    NSLayoutConstraint * _confirmButtonBottomAnchorLayoutConstraint;
    NSLayoutConstraint * _confirmButtonHeightAnchorLayoutConstraint;
    NSLayoutConstraint * _confirmButtonLeadingAnchorLayoutConstraint;
    NSLayoutConstraint * _confirmButtonTopAnchorLayoutConstraint;
    NSLayoutConstraint * _confirmButtonTrailingAnchorLayoutConstraint;
    bool  _constraintsLoaded;
    UIView * _contentView;
    NSLayoutConstraint * _contentViewBottomAnchorLayoutConstraint;
    double  _contentViewBottomAnchorLayoutConstraintConstant;
    NSLayoutConstraint * _contentViewLeadingAnchorLayoutConstraint;
    NSLayoutConstraint * _contentViewTopAnchorLayoutConstraint;
    NSLayoutConstraint * _contentViewTrailingAnchorLayoutConstraint;
    UIView * _imageContentView;
    UIImageView * _imageView;
    NSLayoutConstraint * _imageViewHeightAnchorLayoutConstraint;
    NSLayoutConstraint * _imageViewWidthAnchorLayoutConstraint;
    bool  _isForMiC;
    UIScrollView * _scrollView;
    UILabel * _titleLabel;
    NSLayoutConstraint * _titleLabelFirstBaselineAnchorLayoutConstraint;
    <CKWelcomeViewDelegate> * _welcomeViewDelegate;
}

@property (nonatomic, readonly) UIVisualEffectView *buttonView;
@property (nonatomic) NSLayoutConstraint *buttonViewBottomAnchorLayoutConstraint;
@property (nonatomic, readonly) double buttonViewBottomAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *buttonViewLeadingAnchorLayoutConstraint;
@property (nonatomic, readonly) double buttonViewLeadingAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *buttonViewTrailingAnchorLayoutConstraint;
@property (nonatomic, readonly) double buttonViewTrailingAnchorLayoutConstraintConstant;
@property (nonatomic, readonly) UIButton *cancelButton;
@property (nonatomic) NSLayoutConstraint *cancelButtonFirstBaselineAnchorLayoutConstraint;
@property (nonatomic, readonly) double cancelButtonFirstBaselineAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *cancelButtonHeightAnchorLayoutConstraint;
@property (nonatomic, readonly) double cancelButtonHeightAnchorLayoutConstraintConstant;
@property (getter=isCancelButtonHidden, nonatomic) bool cancelButtonHidden;
@property (nonatomic) NSLayoutConstraint *cancelButtonLastBaselineAnchorLayoutConstraint;
@property (nonatomic, readonly) double cancelButtonLastBaselineAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *cancelButtonLeadingAnchorLayoutConstraint;
@property (nonatomic, readonly) double cancelButtonLeadingAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *cancelButtonTrailingAnchorLayoutConstraint;
@property (nonatomic, readonly) double cancelButtonTrailingAnchorLayoutConstraintConstant;
@property (nonatomic, readonly) UIButton *confirmButton;
@property (nonatomic) NSLayoutConstraint *confirmButtonBottomAnchorLayoutConstraint;
@property (nonatomic, readonly) double confirmButtonBottomAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *confirmButtonHeightAnchorLayoutConstraint;
@property (nonatomic, readonly) double confirmButtonHeightAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *confirmButtonLeadingAnchorLayoutConstraint;
@property (nonatomic, readonly) double confirmButtonLeadingAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *confirmButtonTopAnchorLayoutConstraint;
@property (nonatomic, readonly) double confirmButtonTopAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *confirmButtonTrailingAnchorLayoutConstraint;
@property (nonatomic, readonly) double confirmButtonTrailingAnchorLayoutConstraintConstant;
@property (getter=isConstraintsLoaded, nonatomic) bool constraintsLoaded;
@property (nonatomic, readonly) UIView *contentView;
@property (nonatomic) NSLayoutConstraint *contentViewBottomAnchorLayoutConstraint;
@property (nonatomic, readonly) double contentViewBottomAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *contentViewLeadingAnchorLayoutConstraint;
@property (nonatomic, readonly) double contentViewLeadingAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *contentViewTopAnchorLayoutConstraint;
@property (nonatomic, readonly) double contentViewTopAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *contentViewTrailingAnchorLayoutConstraint;
@property (nonatomic, readonly) double contentViewTrailingAnchorLayoutConstraintConstant;
@property (nonatomic, readonly) UIView *imageContentView;
@property (nonatomic, readonly) UIImageView *imageView;
@property (nonatomic, retain) NSLayoutConstraint *imageViewHeightAnchorLayoutConstraint;
@property (nonatomic, readonly) double imageViewHeightAnchorLayoutConstraintConstant;
@property (nonatomic) NSLayoutConstraint *imageViewWidthAnchorLayoutConstraint;
@property (nonatomic, readonly) double imageViewWidthAnchorLayoutConstraintConstant;
@property (nonatomic) bool isForMiC;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, readonly) UILabel *titleLabel;
@property (nonatomic) NSLayoutConstraint *titleLabelFirstBaselineAnchorLayoutConstraint;
@property (nonatomic, readonly) double titleLabelFirstBaselineAnchorLayoutConstraintConstant;
@property (nonatomic) <CKWelcomeViewDelegate> *welcomeViewDelegate;

+ (bool)requiresConstraintBasedLayout;
+ (double)welcomeLayoutConstraintFeatureInnerForMiC;
+ (double)welcomeLayoutConstraintFeatureLeadingTrailingForMiC;
+ (double)welcomeLayoutConstraintLeadingTrailingForMiC;

- (void).cxx_destruct;
- (id)buttonView;
- (id)buttonViewBottomAnchorLayoutConstraint;
- (double)buttonViewBottomAnchorLayoutConstraintConstant;
- (id)buttonViewLeadingAnchorLayoutConstraint;
- (double)buttonViewLeadingAnchorLayoutConstraintConstant;
- (id)buttonViewTrailingAnchorLayoutConstraint;
- (double)buttonViewTrailingAnchorLayoutConstraintConstant;
- (id)cancelButton;
- (id)cancelButtonFirstBaselineAnchorLayoutConstraint;
- (double)cancelButtonFirstBaselineAnchorLayoutConstraintConstant;
- (id)cancelButtonHeightAnchorLayoutConstraint;
- (double)cancelButtonHeightAnchorLayoutConstraintConstant;
- (id)cancelButtonLastBaselineAnchorLayoutConstraint;
- (double)cancelButtonLastBaselineAnchorLayoutConstraintConstant;
- (id)cancelButtonLeadingAnchorLayoutConstraint;
- (double)cancelButtonLeadingAnchorLayoutConstraintConstant;
- (id)cancelButtonTrailingAnchorLayoutConstraint;
- (double)cancelButtonTrailingAnchorLayoutConstraintConstant;
- (void)commonInit;
- (id)confirmButton;
- (id)confirmButtonBottomAnchorLayoutConstraint;
- (double)confirmButtonBottomAnchorLayoutConstraintConstant;
- (id)confirmButtonHeightAnchorLayoutConstraint;
- (double)confirmButtonHeightAnchorLayoutConstraintConstant;
- (id)confirmButtonLeadingAnchorLayoutConstraint;
- (double)confirmButtonLeadingAnchorLayoutConstraintConstant;
- (id)confirmButtonTopAnchorLayoutConstraint;
- (double)confirmButtonTopAnchorLayoutConstraintConstant;
- (id)confirmButtonTrailingAnchorLayoutConstraint;
- (double)confirmButtonTrailingAnchorLayoutConstraintConstant;
- (id)contentView;
- (id)contentViewBottomAnchorLayoutConstraint;
- (double)contentViewBottomAnchorLayoutConstraintConstant;
- (id)contentViewLeadingAnchorLayoutConstraint;
- (double)contentViewLeadingAnchorLayoutConstraintConstant;
- (id)contentViewTopAnchorLayoutConstraint;
- (double)contentViewTopAnchorLayoutConstraintConstant;
- (id)contentViewTrailingAnchorLayoutConstraint;
- (double)contentViewTrailingAnchorLayoutConstraintConstant;
- (void)handleCancelButtonAction:(id)arg1;
- (void)handleConfirmButtonAction:(id)arg1;
- (id)imageContentView;
- (id)imageView;
- (id)imageViewHeightAnchorLayoutConstraint;
- (double)imageViewHeightAnchorLayoutConstraintConstant;
- (id)imageViewWidthAnchorLayoutConstraint;
- (double)imageViewWidthAnchorLayoutConstraintConstant;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isCancelButtonHidden;
- (bool)isConstraintsLoaded;
- (bool)isForMiC;
- (void)layoutSubviews;
- (void)loadConstraints;
- (id)scrollView;
- (void)setButtonViewBottomAnchorLayoutConstraint:(id)arg1;
- (void)setButtonViewLeadingAnchorLayoutConstraint:(id)arg1;
- (void)setButtonViewTrailingAnchorLayoutConstraint:(id)arg1;
- (void)setCancelButtonFirstBaselineAnchorLayoutConstraint:(id)arg1;
- (void)setCancelButtonHeightAnchorLayoutConstraint:(id)arg1;
- (void)setCancelButtonHidden:(bool)arg1;
- (void)setCancelButtonLastBaselineAnchorLayoutConstraint:(id)arg1;
- (void)setCancelButtonLeadingAnchorLayoutConstraint:(id)arg1;
- (void)setCancelButtonTrailingAnchorLayoutConstraint:(id)arg1;
- (void)setConfirmButtonBottomAnchorLayoutConstraint:(id)arg1;
- (void)setConfirmButtonHeightAnchorLayoutConstraint:(id)arg1;
- (void)setConfirmButtonLeadingAnchorLayoutConstraint:(id)arg1;
- (void)setConfirmButtonTopAnchorLayoutConstraint:(id)arg1;
- (void)setConfirmButtonTrailingAnchorLayoutConstraint:(id)arg1;
- (void)setConstraintsLoaded:(bool)arg1;
- (void)setContentViewBottomAnchorLayoutConstraint:(id)arg1;
- (void)setContentViewLeadingAnchorLayoutConstraint:(id)arg1;
- (void)setContentViewTopAnchorLayoutConstraint:(id)arg1;
- (void)setContentViewTrailingAnchorLayoutConstraint:(id)arg1;
- (void)setImageViewHeightAnchorLayoutConstraint:(id)arg1;
- (void)setImageViewWidthAnchorLayoutConstraint:(id)arg1;
- (void)setIsForMiC:(bool)arg1;
- (void)setTitleLabelFirstBaselineAnchorLayoutConstraint:(id)arg1;
- (void)setWelcomeViewDelegate:(id)arg1;
- (id)titleLabel;
- (id)titleLabelFirstBaselineAnchorLayoutConstraint;
- (double)titleLabelFirstBaselineAnchorLayoutConstraintConstant;
- (void)updateConstraintConstants;
- (void)updateConstraints;
- (void)updateFonts;
- (void)updateLayoutForMiC;
- (id)welcomeViewDelegate;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
