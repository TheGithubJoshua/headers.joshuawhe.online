<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKRecipientSelectionController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ChatKit.framework/CKRecipientSelectionController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit (1.0)
 */

@interface CKRecipientSelectionController : CKViewController <CKRecipientSearchListControllerDelegate, CNContactPickerDelegate, MFComposeRecipientTextViewDelegate, MFGroupDetailViewControllerDelegate> {
    NSArray * _addressBookProperties;
    CNContactPickerViewController * _contactPickerViewController;
    CNContactStore * _contactStore;
    CKPendingConversation * _conversation;
    <CKRecipientSelectionControllerDelegate> * _delegate;
    bool  _didShowOneTimeErrorAlert;
    bool  _editable;
    bool  _forceMMS;
    id /* block */  _gameCenterPickerBlock;
    bool  _homogenizePreferredServiceForiMessage;
    double  _keyboardHeightWithAccessoryView;
    bool  _peoplePickerHidden;
    bool  _preventAtomization;
    MFComposeRecipient * _recentContactForPresentedCNCard;
    NSMutableDictionary * _recipientAvailabilities;
    NSMutableDictionary * _recipientAvailibityTimers;
    CKRecipientSearchListController * _searchListController;
    bool  _shouldSuppressSearchResultsTable;
    CKComposeRecipientView * _toField;
    UIView * _toFieldContainerView;
    UILabel * _toFieldPlaceholderLabel;
    UIScrollView * _toFieldScrollingView;
}

@property (nonatomic, retain) NSArray *addressBookProperties;
@property (nonatomic, readonly) double collapsedHeight;
@property (nonatomic, retain) CNContactPickerViewController *contactPickerViewController;
@property (nonatomic, readonly) CNContactStore *contactStore;
@property (nonatomic, retain) CKPendingConversation *conversation;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CKRecipientSelectionControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didShowOneTimeErrorAlert;
@property (getter=isEditable, nonatomic) bool editable;
@property (nonatomic) bool forceMMS;
@property (nonatomic, copy) id /* block */ gameCenterPickerBlock;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool homogenizePreferredServiceForiMessage;
@property (getter=isPeoplePickerHidden, nonatomic) bool peoplePickerHidden;
@property (nonatomic) bool preventAtomization;
@property (nonatomic, retain) MFComposeRecipient *recentContactForPresentedCNCard;
@property (nonatomic, retain) NSMutableDictionary *recipientAvailabilities;
@property (nonatomic, retain) NSMutableDictionary *recipientAvailibityTimers;
@property (nonatomic, retain) CKRecipientSearchListController *searchListController;
@property (getter=isSearchResultsHidden, nonatomic) bool searchResultsHidden;
@property (nonatomic, readonly) bool shouldSuppressSearchResultsTable;
@property (readonly) Class superclass;
@property (nonatomic, retain) CKComposeRecipientView *toField;
@property (nonatomic, readonly) UIView *toFieldContainerView;
@property (nonatomic, readonly) bool toFieldIsFirstResponder;
@property (nonatomic, retain) UILabel *toFieldPlaceholderLabel;
@property (nonatomic, retain) UIScrollView *toFieldScrollingView;

- (void).cxx_destruct;
- (void)_adjustToFieldPositionIfNecessary;
- (id)_alternateAddressesForRecipient:(id)arg1;
- (id)_alternateiMessagableAddressesForRecipient:(id)arg1;
- (unsigned long long)_atomPresentationOptionsForRecipient:(id)arg1;
- (BOOL)_availibilityForRecipient:(id)arg1 onService:(id)arg2;
- (id)_canonicalRecipientAddresses;
- (void)_dismissPeoplePicker;
- (void)_handleAddressBookChangedNotification:(id)arg1;
- (void)_handleAddressBookPartialChangedNotification:(id)arg1;
- (void)_handleConversationPreferredServiceDidChangeNotification:(id)arg1;
- (void)_handleRecipientAvailabilityTimeout:(id)arg1;
- (void)_handleRecipientViewChanged:(id)arg1;
- (void)_hideSearchField;
- (bool)_isToFieldPushedUp;
- (void)_keyboardWillShowOrHide:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_navigationBarInsets;
- (id)_recipientCausingTooManyRecipientsError;
- (void)_refreshActionSheet;
- (void)_removeAvailabilityTimeoutTimerForRecipient:(id)arg1;
- (void)_removeRecent;
- (void)_resetSearchResultsInsets;
- (void)_showActionSheetForRecipient:(id)arg1 animated:(bool)arg2;
- (void)_showDetailsForGroup:(id)arg1;
- (void)_showDetailsForRecipient:(id)arg1 canDelete:(bool)arg2;
- (void)_showOneTimeErrorAlertForAddedRecipient:(id)arg1 service:(id)arg2 withError:(BOOL)arg3;
- (void)_showSearchField;
- (void)_startAvailabilityTimeoutTimerForRecipient:(id)arg1;
- (id)_toFieldCollapsedTextColor;
- (void)_updateAddressBookProperties;
- (void)_updateRecipientViewLayouts;
- (void)_updateSearchResultsTable;
- (void)_updateShowingSearch;
- (void)_updateToField;
- (void)_updateToFieldRecipientsData;
- (void)addRecipient:(id)arg1;
- (void)addRecipients:(id)arg1;
- (id)addressBookProperties;
- (void)alertView:(id)arg1 clickedButtonAtIndex:(long long)arg2;
- (void)autocompleteResultsController:(id)arg1 didRequestInfoAboutRecipient:(id)arg2;
- (void)autocompleteResultsController:(id)arg1 didSelectRecipient:(id)arg2 atIndex:(unsigned long long)arg3;
- (double)collapsedHeight;
- (id)composeRecipientView:(id)arg1 composeRecipientForAddress:(id)arg2;
- (id)composeRecipientView:(id)arg1 composeRecipientForRecord:(void*)arg2 property:(int)arg3 identifier:(int)arg4;
- (void)composeRecipientView:(id)arg1 didAddRecipient:(id)arg2;
- (void)composeRecipientView:(id)arg1 didChangeSize:(struct CGSize { double x1; double x2; })arg2;
- (void)composeRecipientView:(id)arg1 didFinishEnteringAddress:(id)arg2;
- (void)composeRecipientView:(id)arg1 didRemoveRecipient:(id)arg2;
- (void)composeRecipientView:(id)arg1 didSelectRecipients:(id)arg2;
- (void)composeRecipientView:(id)arg1 showPersonCardForAtom:(id)arg2;
- (void)composeRecipientView:(id)arg1 textDidChange:(id)arg2;
- (void)composeRecipientViewRequestAddRecipient:(id)arg1;
- (void)composeRecipientViewReturnPressed:(id)arg1;
- (void)contactPicker:(id)arg1 didSelectContact:(id)arg2;
- (void)contactPicker:(id)arg1 didSelectContactProperty:(id)arg2;
- (void)contactPickerDidCancel:(id)arg1;
- (id)contactPickerViewController;
- (id)contactStore;
- (id)conversation;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToParentViewController:(id)arg1;
- (bool)didShowOneTimeErrorAlert;
- (bool)finishedComposingRecipients;
- (bool)forceMMS;
- (id /* block */)gameCenterPickerBlock;
- (void)groupDetailViewController:(id)arg1 didAskToRemoveGroup:(id)arg2;
- (void)groupDetailViewController:(id)arg1 didTapComposeRecipient:(id)arg2;
- (void)groupDetailViewControllerDidCancel:(id)arg1;
- (bool)hasFailediMessageRecipients;
- (bool)hasPendingiMessageRecipients;
- (bool)hasTimedOutRecipients;
- (bool)hasUnreachableEmergencyRecipient;
- (bool)homogenizePreferredServiceForiMessage;
- (id)init;
- (id)initWithConversation:(id)arg1;
- (void)invalidateOutstandingIDStatusRequests;
- (bool)isEditable;
- (bool)isGameCenterRecipient:(id)arg1;
- (bool)isPeoplePickerHidden;
- (bool)isSearchResultsHidden;
- (void)loadView;
- (void)parentControllerDidResume:(bool)arg1 animating:(bool)arg2;
- (unsigned long long)presentationOptionsForRecipient:(id)arg1;
- (bool)preventAtomization;
- (id)recentContactForPresentedCNCard;
- (id)recipientAvailabilities;
- (void)recipientAvailibilitiesDidUpdate;
- (id)recipientAvailibityTimers;
- (void)recipientSelectionControllerDidChange;
- (void)recipientViewDidBecomeFirstResponder:(id)arg1;
- (void)recipientViewDidResignFirstResponder:(id)arg1;
- (bool)recipientViewShouldIgnoreFirstResponderChanges:(id)arg1;
- (id)recipients;
- (void)refreshComposeSendingServiceForAddresses:(id)arg1 withCompletionBlock:(id /* block */)arg2;
- (void)removeRecipient:(id)arg1;
- (void)reset;
- (void)scrollSearchListControllerToTop:(bool)arg1;
- (struct CGPoint { double x1; double x2; })scrollSearchListControllerToTopContentOffset;
- (id)searchListController;
- (void)searchListController:(id)arg1 destinationsUpdated:(id)arg2;
- (long long)searchListController:(id)arg1 idStatusForIDSID:(id)arg2;
- (void)searchListControllerDidFinishSearch:(id)arg1;
- (void)searchListControllerDidScroll:(id)arg1;
- (void)setAddressBookProperties:(id)arg1;
- (void)setContactPickerViewController:(id)arg1;
- (void)setConversation:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidShowOneTimeErrorAlert:(bool)arg1;
- (void)setEditable:(bool)arg1;
- (void)setForceMMS:(bool)arg1;
- (void)setGameCenterPickedHandles:(id)arg1 playerNames:(id)arg2;
- (void)setGameCenterPickerBlock:(id /* block */)arg1;
- (void)setPeoplePickerHidden:(bool)arg1;
- (void)setPreventAtomization:(bool)arg1;
- (void)setRecentContactForPresentedCNCard:(id)arg1;
- (void)setRecipientAvailabilities:(id)arg1;
- (void)setRecipientAvailibityTimers:(id)arg1;
- (void)setSearchListController:(id)arg1;
- (void)setSearchResultsHidden:(bool)arg1;
- (void)setToField:(id)arg1;
- (void)setToFieldPlaceholderLabel:(id)arg1;
- (void)setToFieldScrollingView:(id)arg1;
- (bool)shouldSuppressSearchResultsTable;
- (void)stopCheckingRecipientAvailabilityAndRemoveAllTimers;
- (id)toField;
- (id)toFieldContainerView;
- (bool)toFieldIsFirstResponder;
- (id)toFieldPlaceholderLabel;
- (id)toFieldScrollingView;
- (void)traitCollectionDidChange:(id)arg1;
- (void)viewDidAppearDeferredSetup;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
