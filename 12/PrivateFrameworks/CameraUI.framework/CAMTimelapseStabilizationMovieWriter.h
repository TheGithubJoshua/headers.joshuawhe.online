<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMTimelapseStabilizationMovieWriter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraUI.framework/CAMTimelapseStabilizationMovieWriter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI (1)
 */

@interface CAMTimelapseStabilizationMovieWriter : NSObject <AVOfflineVideoStabilizerDataProvider, CAMTimelapseMovieWriterProtocol> {
    NSMutableSet * __badFrameSet;
    long long  __badMetadataErrorThreshold;
    NSMutableSet * __badMetadataSet;
    id /* block */  __completion;
    NSObject<OS_dispatch_queue> * __decodeQueue;
    long long  __firstFrameIndex;
    long long  __frameCountWrittenToMovie;
    NSArray * __frameFilePaths;
    struct __CFArray { } * __frameList;
    unsigned long long  __frameLoadMode;
    NSDate * __movieCreationDate;
    CLLocation * __movieCreationLocation;
    long long  __movieFramesPerSecond;
    NSString * __movieOutputPath;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  __movieTransform;
    NSObject<OS_dispatch_queue> * __movieWritingQueue;
    long long  __nextMetadataFrameIndex;
    long long  __nextSourceFrameIndex;
    AVAssetWriterInputPixelBufferAdaptor * __pixelBufferAdaptor;
    NSObject<OS_dispatch_queue> * __pixelTransferQueue;
    struct OpaqueVTPixelTransferSession { } * __pixelTransferSession;
    void * __powerAssertion;
    bool  __preferHEVC;
    NSObject<OS_dispatch_queue> * __readingQueue;
    NSObject<OS_dispatch_semaphore> * __semFileReader;
    NSObject<OS_dispatch_semaphore> * __semFrameGetter;
    AVOfflineVideoStabilizer * __stabilizer;
    struct __CVBuffer { } * __stashedSourceFrame;
    NSObject<OS_dispatch_queue> * __syncQueue;
    AVAssetWriterInput * __videoInput;
    NSArray * __visMetadataFilePaths;
    AVAssetWriter * __writer;
    bool  _suspended;
}

@property (nonatomic, readonly) NSMutableSet *_badFrameSet;
@property (nonatomic, readonly) long long _badMetadataErrorThreshold;
@property (nonatomic, readonly) NSMutableSet *_badMetadataSet;
@property (nonatomic, readonly, copy) id /* block */ _completion;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_decodeQueue;
@property (nonatomic, readonly) long long _firstFrameIndex;
@property (nonatomic, readonly) long long _frameCountWrittenToMovie;
@property (nonatomic, readonly) NSArray *_frameFilePaths;
@property (nonatomic, readonly) struct __CFArray { }*_frameList;
@property (nonatomic, readonly) unsigned long long _frameLoadMode;
@property (nonatomic, readonly) NSDate *_movieCreationDate;
@property (nonatomic, readonly) CLLocation *_movieCreationLocation;
@property (nonatomic, readonly) long long _movieFramesPerSecond;
@property (nonatomic, readonly) NSString *_movieOutputPath;
@property (nonatomic, readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } _movieTransform;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_movieWritingQueue;
@property (nonatomic, readonly) long long _nextMetadataFrameIndex;
@property (nonatomic, readonly) long long _nextSourceFrameIndex;
@property (nonatomic, readonly) AVAssetWriterInputPixelBufferAdaptor *_pixelBufferAdaptor;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_pixelTransferQueue;
@property (nonatomic, readonly) struct OpaqueVTPixelTransferSession { }*_pixelTransferSession;
@property (nonatomic, readonly) void*_powerAssertion;
@property (nonatomic, readonly) bool _preferHEVC;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_readingQueue;
@property (nonatomic, readonly) NSObject<OS_dispatch_semaphore> *_semFileReader;
@property (nonatomic, readonly) NSObject<OS_dispatch_semaphore> *_semFrameGetter;
@property (nonatomic, readonly) AVOfflineVideoStabilizer *_stabilizer;
@property (nonatomic, readonly) struct __CVBuffer { }*_stashedSourceFrame;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_syncQueue;
@property (nonatomic, readonly) AVAssetWriterInput *_videoInput;
@property (nonatomic, readonly) NSArray *_visMetadataFilePaths;
@property (nonatomic, readonly) AVAssetWriter *_writer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (getter=isSuspended, nonatomic) bool suspended;

+ (struct CGSize { double x1; double x2; })_desiredOutputSizeForSourcePixelBuffer:(struct __CVBuffer { }*)arg1;

- (void).cxx_destruct;
- (bool)_appendPixelBufferToMovie:(struct __CVBuffer { }*)arg1;
- (id)_badFrameSet;
- (long long)_badMetadataErrorThreshold;
- (id)_badMetadataSet;
- (void)_cleanup;
- (id /* block */)_completion;
- (int)_copyNextSampleBufferFromStabilizer:(struct opaqueCMSampleBuffer {}**)arg1;
- (int)_copySourcePixelBufferForNextFrame:(struct __CVBuffer {}**)arg1 skipBadFrames:(bool)arg2;
- (struct __CVBuffer { }*)_cropPixelBufferIfNeeded:(struct __CVBuffer { }*)arg1;
- (struct __CVBuffer { }*)_decodeFirstFrameAgain;
- (id)_decodeQueue;
- (void)_finishMovieWithCompletionHandler:(id /* block */)arg1;
- (void)_finishMovieWithFailure;
- (void)_finishMovieWithRestartUnstabilized;
- (long long)_firstFrameIndex;
- (long long)_frameCountWrittenToMovie;
- (id)_frameFilePaths;
- (struct __CFArray { }*)_frameList;
- (unsigned long long)_frameLoadMode;
- (id)_movieCreationDate;
- (id)_movieCreationLocation;
- (long long)_movieFramesPerSecond;
- (id)_movieOutputPath;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_movieTransform;
- (id)_movieWritingQueue;
- (long long)_nextMetadataFrameIndex;
- (long long)_nextSourceFrameIndex;
- (id)_pixelBufferAdaptor;
- (id)_pixelTransferQueue;
- (struct OpaqueVTPixelTransferSession { }*)_pixelTransferSession;
- (void*)_powerAssertion;
- (bool)_preferHEVC;
- (id)_readingQueue;
- (void)_requestNextFrameReadDecode;
- (void)_reset;
- (void)_restartUnstabilized;
- (id)_semFileReader;
- (id)_semFrameGetter;
- (void)_setMetadataOnVideoTrackAssetWriterInput:(id)arg1;
- (id)_stabilizer;
- (void)_startAsyncDecoding;
- (int)_startWritingWithOutputPath:(id)arg1 width:(long long)arg2 height:(long long)arg3 videoFormatDescription:(struct opaqueCMFormatDescription { }*)arg4 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg5 framesPerSecond:(long long)arg6 frameCount:(long long)arg7 preferHEVC:(bool)arg8 visMetadataCount:(long long)arg9 videoMetadata:(id)arg10;
- (struct __CVBuffer { }*)_stashedSourceFrame;
- (id)_syncQueue;
- (id)_videoInput;
- (id)_visMetadataFilePaths;
- (void)_writeMovieAsynchronously;
- (id)_writer;
- (struct __CVBuffer { }*)copySourcePixelBufferForFrameNumber:(long long)arg1 outputSampleTime:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg2 stabilizer:(id)arg3;
- (id)copySourceStabilizationMetadataForFrameNumber:(long long)arg1 outputSampleTime:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg2 stabilizer:(id)arg3;
- (void)dealloc;
- (id)init;
- (bool)isSuspended;
- (void)setSuspended:(bool)arg1;
- (void)writeMovieFromImageFiles:(id)arg1 visMetadataFiles:(id)arg2 startDate:(id)arg3 location:(id)arg4 outputPath:(id)arg5 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg6 framesPerSecond:(long long)arg7 preferHEVC:(bool)arg8 completionHandler:(id /* block */)arg9;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
