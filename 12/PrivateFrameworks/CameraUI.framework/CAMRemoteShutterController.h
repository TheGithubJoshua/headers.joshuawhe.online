<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMRemoteShutterController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraUI.framework/CAMRemoteShutterController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI (1)
 */

@interface CAMRemoteShutterController : NSObject <CCCameraConnectionDelegate> {
    CAMMotionController * __motionController;
    NSArray * _availableCaptureModes;
    long long  _captureDevice;
    long long  _captureMode;
    bool  _capturingTimelapse;
    bool  _capturingVideo;
    CCCameraConnection * _connection;
    <CAMRemoteShutterDelegate> * _delegate;
    long long  _flashMode;
    long long  _hdrMode;
    long long  _irisMode;
    long long  _shallowDepthOfFieldStatus;
    bool  _showingPreview;
    double  _zoomAmount;
}

@property (nonatomic, readonly) CAMMotionController *_motionController;
@property (nonatomic, retain) NSArray *availableCaptureModes;
@property (nonatomic) long long captureDevice;
@property (nonatomic) long long captureMode;
@property (getter=isCapturingTimelapse, nonatomic) bool capturingTimelapse;
@property (getter=isCapturingVideo, nonatomic) bool capturingVideo;
@property (getter=isConnected, nonatomic, readonly) bool connected;
@property (nonatomic, retain) CCCameraConnection *connection;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CAMRemoteShutterDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long flashMode;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long hdrMode;
@property (nonatomic) long long irisMode;
@property (nonatomic) long long shallowDepthOfFieldStatus;
@property (getter=isShowingPreview, nonatomic) bool showingPreview;
@property (readonly) Class superclass;
@property (nonatomic) double zoomAmount;

- (void).cxx_destruct;
- (void)_captureOrientationDidChange:(id)arg1;
- (long long)_convertMode:(long long)arg1;
- (long long)_currentMode;
- (void)_enterBackground:(id)arg1;
- (void)_enterForeground:(id)arg1;
- (id)_motionController;
- (void)_sendMode;
- (void)applyCaptureConfiguration:(id)arg1;
- (id)availableCaptureModes;
- (void)burstCaptureDidStop;
- (void)burstCaptureNumberOfPhotosDidChange:(unsigned long long)arg1;
- (void)burstCaptureWillStart;
- (bool)cameraConnection:(id)arg1 setCaptureMode:(long long)arg2;
- (void)cameraConnection:(id)arg1 setFlashMode:(long long)arg2;
- (void)cameraConnection:(id)arg1 setFocusPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)cameraConnection:(id)arg1 setHDRMode:(long long)arg2;
- (void)cameraConnection:(id)arg1 setIrisMode:(long long)arg2;
- (void)cameraConnection:(id)arg1 setZoomAmount:(double)arg2;
- (void)cameraConnection:(id)arg1 takePhotoWithCountdown:(unsigned long long)arg2;
- (bool)cameraConnectionBeginBurstCapture:(id)arg1;
- (bool)cameraConnectionBurstSupport:(id)arg1;
- (void)cameraConnectionCancelCountdown:(id)arg1;
- (long long)cameraConnectionCaptureMode:(id)arg1;
- (bool)cameraConnectionEndBurstCapture:(id)arg1;
- (long long)cameraConnectionFlashMode:(id)arg1;
- (long long)cameraConnectionFlashSupport:(id)arg1;
- (long long)cameraConnectionHDRMode:(id)arg1;
- (long long)cameraConnectionHDRSupport:(id)arg1;
- (long long)cameraConnectionIrisMode:(id)arg1;
- (long long)cameraConnectionIrisSupport:(id)arg1;
- (bool)cameraConnectionIsMirrored:(id)arg1;
- (bool)cameraConnectionIsShowingLivePreview:(id)arg1;
- (long long)cameraConnectionOrientation:(id)arg1;
- (bool)cameraConnectionStartCapture:(id)arg1;
- (bool)cameraConnectionStopCapture:(id)arg1;
- (id)cameraConnectionSupportedCaptureModes:(id)arg1;
- (void)cameraConnectionToggleCameraDevice:(id)arg1;
- (bool)cameraConnectionToggleCameraDeviceSupport:(id)arg1;
- (double)cameraConnectionZoomAmount:(id)arg1;
- (bool)cameraConnectionZoomSupport:(id)arg1;
- (long long)captureDevice;
- (long long)captureMode;
- (void)closeConnection;
- (id)connection;
- (void)countdownCanceled;
- (void)createConnectionIfNecessary;
- (void)dealloc;
- (id)delegate;
- (void)didStartCaptureTimer;
- (void)didStopCapture;
- (long long)flashMode;
- (long long)hdrMode;
- (id)initWithCaptureConfiguration:(id)arg1 motionController:(id)arg2;
- (long long)irisMode;
- (bool)isCapturingTimelapse;
- (bool)isCapturingVideo;
- (bool)isConnected;
- (bool)isShowingPreview;
- (void)openConnection;
- (void)sendThumbnailData:(id)arg1 isVideo:(bool)arg2;
- (void)sendThumbnailImage:(id)arg1 isVideo:(bool)arg2;
- (void)setAvailableCaptureModes:(id)arg1;
- (void)setCaptureDevice:(long long)arg1;
- (void)setCaptureMode:(long long)arg1;
- (void)setCapturingTimelapse:(bool)arg1;
- (void)setCapturingVideo:(bool)arg1;
- (void)setConnection:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFlashMode:(long long)arg1;
- (void)setHdrMode:(long long)arg1;
- (void)setIrisMode:(long long)arg1;
- (void)setShallowDepthOfFieldStatus:(long long)arg1;
- (void)setShowingPreview:(bool)arg1;
- (void)setZoomAmount:(double)arg1;
- (long long)shallowDepthOfFieldStatus;
- (void)willStartCapturing;
- (double)zoomAmount;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
