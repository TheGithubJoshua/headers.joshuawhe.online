<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMExpandableMenuButton.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraUI.framework/CAMExpandableMenuButton.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI (1)
 */

@interface CAMExpandableMenuButton : UIControl <CAMAccessibilityHUDItemProvider> {
    UIView * __headerView;
    NSMutableIndexSet * __highlightedIndexesWhileCollapsed;
    NSMutableArray * __menuItems;
    UIImageView * __padBackgroundView;
    NSIndexSet * __shownIndexesWhileCollapsed;
    UIView * __trackingView;
    bool  __trackingViewHighlighted;
    <CAMExpandableMenuButtonDelegate> * _expandableMenuDelegate;
    bool  _expanded;
    long long  _layoutStyle;
    long long  _orientation;
    long long  _selectedIndex;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _tappableEdgeInsets;
    CAMTouchingGestureRecognizer * _touchingGestureRecognizer;
}

@property (nonatomic, readonly) UIView *_headerView;
@property (nonatomic, readonly, copy) NSMutableIndexSet *_highlightedIndexesWhileCollapsed;
@property (nonatomic, readonly) NSMutableArray *_menuItems;
@property (nonatomic, readonly) UIImageView *_padBackgroundView;
@property (nonatomic, readonly, copy) NSIndexSet *_shownIndexesWhileCollapsed;
@property (setter=_setTrackingView:, nonatomic, retain) UIView *_trackingView;
@property (getter=_isTrackingViewHighlighted, setter=_setTrackingViewHighlighted:, nonatomic) bool _trackingViewHighlighted;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) <CAMExpandableMenuButtonDelegate> *expandableMenuDelegate;
@property (getter=isExpanded, nonatomic, readonly) bool expanded;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long layoutStyle;
@property (nonatomic) long long orientation;
@property (nonatomic) long long selectedIndex;
@property (readonly) Class superclass;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } tappableEdgeInsets;
@property (nonatomic, readonly) CAMTouchingGestureRecognizer *touchingGestureRecognizer;

+ (double)expansionDuration;

- (void).cxx_destruct;
- (void)_applyHeaderViewForCurrentExpansionState;
- (void)_applyMenuItemAlphaForCurrentExpansionState;
- (void)_applyMenuItemColorsForCurrentState;
- (void)_applyMenuItemTextAlignmentAndShadowForCurrentOrientation;
- (void)_convertAllSubviewsToProposedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_createPadBackgroundView;
- (void)_handleTouchGesture:(id)arg1;
- (id)_headerView;
- (id)_highlightedIndexesWhileCollapsed;
- (bool)_isTrackingViewHighlighted;
- (struct CGSize { double x1; double x2; })_layoutForPadCollapsedPortraitButton:(bool)arg1;
- (struct CGSize { double x1; double x2; })_layoutForPadExpandedPortraitButton:(bool)arg1;
- (struct CGSize { double x1; double x2; })_layoutForPadStyle:(bool)arg1 expanded:(bool)arg2;
- (struct CGSize { double x1; double x2; })_layoutForPhoneCollapsedLandscapeButton:(bool)arg1;
- (struct CGSize { double x1; double x2; })_layoutForPhoneCollapsedPortraitButton:(bool)arg1;
- (struct CGSize { double x1; double x2; })_layoutForPhoneExpandedLandscapeButton:(bool)arg1;
- (struct CGSize { double x1; double x2; })_layoutForPhoneExpandedPortraitButton:(bool)arg1;
- (struct CGSize { double x1; double x2; })_layoutForPhoneStyle:(bool)arg1 expanded:(bool)arg2;
- (struct CGSize { double x1; double x2; })_layoutMenuButton:(bool)arg1 expanded:(bool)arg2;
- (id)_menuItems;
- (id)_padBackgroundView;
- (id)_selectedLabel;
- (void)_setTrackingView:(id)arg1;
- (void)_setTrackingViewHighlighted:(bool)arg1;
- (id)_shownIndexesWhileCollapsed;
- (id)_trackingView;
- (void)_updateFromExpansionChangeAnimated:(bool)arg1;
- (void)_updateFromOrientationChangeAnimated:(bool)arg1;
- (void)_updateFromSelectedIndexChange;
- (id)_viewToTrackForTouchAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_wantsHeaderViewToBeVisible;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })alignmentRectForFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 expanded:(bool)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (void)collapseMenuAnimated:(bool)arg1;
- (double)collapsedSelectedLabelHorizontalMargin;
- (void)completeExpansionToProposedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)expandMenuAnimated:(bool)arg1;
- (id)expandableMenuDelegate;
- (void)finishCollapsingAnimated:(bool)arg1;
- (void)finishExpansionAnimated:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForAlignmentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 expanded:(bool)arg2;
- (id)headerView;
- (id)hudItemForAccessibilityHUDManager:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithLayoutStyle:(long long)arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (struct CGSize { double x1; double x2; })intrinsicContentSizeForExpansion:(bool)arg1;
- (bool)isExpanded;
- (long long)layoutStyle;
- (void)layoutSubviews;
- (long long)numberOfMenuItems;
- (long long)orientation;
- (double)padHeaderViewContentInsetLeft;
- (void)prepareHeaderViewForExpanding:(bool)arg1;
- (void)reloadData;
- (void)selectedByAccessibilityHUDManager:(id)arg1;
- (long long)selectedIndex;
- (void)setExpandableMenuDelegate:(id)arg1;
- (void)setHighlighted:(bool)arg1 forIndex:(long long)arg2;
- (void)setLayoutStyle:(long long)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setOrientation:(long long)arg1 animated:(bool)arg2;
- (void)setSelectedIndex:(long long)arg1;
- (void)setTappableEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (bool)shouldAllowExpansion;
- (bool)shouldIgnoreMenuInteraction;
- (id)shownIndexesWhileCollapsed;
- (void)startCollapsingWithProposedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)startExpansionWithProposedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })tappableEdgeInsets;
- (id)titleForMenuItemAtIndex:(long long)arg1;
- (id)touchingGestureRecognizer;
- (void)updateToContentSize:(id)arg1;
- (bool)wantsSelectedItemToBeVisible;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
