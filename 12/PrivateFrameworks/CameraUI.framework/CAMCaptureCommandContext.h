<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMCaptureCommandContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraUI.framework/CAMCaptureCommandContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI (1)
 */

@interface CAMCaptureCommandContext : NSObject {
    CAMCaptureEngine * __captureEngine;
    AVCaptureDevice * _currentAudioDevice;
    AVCaptureDeviceInput * _currentAudioDeviceInput;
    AVCaptureSession * _currentCaptureSession;
    AVCaptureDeviceFormat * _currentDepthDataFormat;
    AVCaptureVideoDataOutput * _currentEffectsPreviewOutput;
    AVCaptureMetadataOutput * _currentMetadataOutput;
    AVCaptureMovieFileOutput * _currentMovieFileOutput;
    CAMPanoramaOutput * _currentPanoramaOutput;
    AVCapturePhotoOutput * _currentStillImageOutput;
    AVCaptureDevice * _currentVideoDevice;
    AVCaptureDeviceFormat * _currentVideoDeviceFormat;
    AVCaptureDeviceInput * _currentVideoDeviceInput;
    NSString * _currentVideoDevicePreset;
    AVCaptureVideoPreviewLayer * _currentVideoPreviewLayer;
    AVCaptureVideoThumbnailOutput * _currentVideoThumbnailOutput;
}

@property (nonatomic, readonly) CAMCaptureEngine *_captureEngine;
@property (nonatomic, retain) AVCaptureDevice *currentAudioDevice;
@property (nonatomic, retain) AVCaptureDeviceInput *currentAudioDeviceInput;
@property (nonatomic, retain) AVCaptureSession *currentCaptureSession;
@property (nonatomic, retain) AVCaptureDeviceFormat *currentDepthDataFormat;
@property (nonatomic, retain) AVCaptureVideoDataOutput *currentEffectsPreviewOutput;
@property (nonatomic, retain) AVCaptureMetadataOutput *currentMetadataOutput;
@property (nonatomic, retain) AVCaptureMovieFileOutput *currentMovieFileOutput;
@property (nonatomic, readonly) CAMPanoramaConfiguration *currentPanoramaConfiguration;
@property (nonatomic, retain) CAMPanoramaOutput *currentPanoramaOutput;
@property (nonatomic, readonly) <AVCaptureFileOutputRecordingDelegate> *currentRecordingDelegate;
@property (nonatomic, readonly) <AVCapturePhotoCaptureDelegate> *currentStillImageDelegate;
@property (nonatomic, retain) AVCapturePhotoOutput *currentStillImageOutput;
@property (nonatomic, retain) AVCaptureDevice *currentVideoDevice;
@property (nonatomic, retain) AVCaptureDeviceFormat *currentVideoDeviceFormat;
@property (nonatomic, retain) AVCaptureDeviceInput *currentVideoDeviceInput;
@property (nonatomic, retain) NSString *currentVideoDevicePreset;
@property (nonatomic, retain) AVCaptureVideoPreviewLayer *currentVideoPreviewLayer;
@property (nonatomic, retain) AVCaptureVideoThumbnailOutput *currentVideoThumbnailOutput;

- (void).cxx_destruct;
- (id)_captureEngine;
- (id)_captureEngineDeviceForMode:(long long)arg1 desiredDevice:(long long)arg2 videoConfiguration:(long long)arg3 resolvedDevice:(long long*)arg4;
- (id)audioDeviceInput;
- (void)clear;
- (id)currentAudioDevice;
- (id)currentAudioDeviceInput;
- (id)currentCaptureSession;
- (id)currentDepthDataFormat;
- (id)currentEffectsPreviewOutput;
- (id)currentMetadataOutput;
- (id)currentMovieFileOutput;
- (id)currentPanoramaConfiguration;
- (id)currentPanoramaOutput;
- (id)currentRecordingDelegate;
- (id)currentStillImageDelegate;
- (id)currentStillImageOutput;
- (id)currentVideoDevice;
- (id)currentVideoDeviceFormat;
- (id)currentVideoDeviceInput;
- (id)currentVideoDevicePreset;
- (id)currentVideoPreviewLayer;
- (id)currentVideoThumbnailOutput;
- (id)initWithCaptureEngine:(id)arg1;
- (id)metadataOutputForMode:(long long)arg1;
- (id)outputsForMode:(long long)arg1 shouldUseThumbnailOutputForFilters:(bool)arg2;
- (id)primaryOutputForMode:(long long)arg1;
- (void)registerStillImageCaptureRequest:(id)arg1 withSettings:(id)arg2;
- (void)registerVideoCaptureRequest:(id)arg1;
- (void)setCurrentAudioDevice:(id)arg1;
- (void)setCurrentAudioDeviceInput:(id)arg1;
- (void)setCurrentCaptureSession:(id)arg1;
- (void)setCurrentDepthDataFormat:(id)arg1;
- (void)setCurrentEffectsPreviewOutput:(id)arg1;
- (void)setCurrentMetadataOutput:(id)arg1;
- (void)setCurrentMovieFileOutput:(id)arg1;
- (void)setCurrentPanoramaOutput:(id)arg1;
- (void)setCurrentStillImageOutput:(id)arg1;
- (void)setCurrentVideoDevice:(id)arg1;
- (void)setCurrentVideoDeviceFormat:(id)arg1;
- (void)setCurrentVideoDeviceInput:(id)arg1;
- (void)setCurrentVideoDevicePreset:(id)arg1;
- (void)setCurrentVideoPreviewLayer:(id)arg1;
- (void)setCurrentVideoThumbnailOutput:(id)arg1;
- (void)startPanoramaCaptureWithRequest:(id)arg1;
- (void)stopPanoramaCapture;
- (id)videoDeviceForMode:(long long)arg1 desiredDevice:(long long)arg2 videoConfiguration:(long long)arg3 resolvedDevice:(long long*)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
