<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMTimelapseController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraUI.framework/CAMTimelapseController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI (1)
 */

@interface CAMTimelapseController : NSObject <CAMNebulaDaemonTimelapseClientProtocol, CAMStillImageCaptureRequestDelegate> {
    bool  __backendRecoveryNeeded;
    CUCaptureController * __captureController;
    NSObject<OS_dispatch_source> * __captureTimer;
    bool  __focusAndExposureAdjusted;
    bool  __ignoringTimerCallbacksForTearDown;
    bool  __ignoringTimerCallbacksWaitingForCaptureResponse;
    NSCountedSet * __inFlightTimelapseUUIDs;
    CAMLocationController * __locationController;
    CAMMotionController * __motionController;
    CAMNebulaDaemonProxyManager * __nebulaDaemonProxyManager;
    NSMutableSet * __pendingCompletedStates;
    CAMPersistenceController * __persistenceController;
    bool  __previewStarted;
    bool  __shouldUpdateFocusAndExposureWhenContrastDetectionCompletes;
    CAMTimelapseState * __state;
    <CAMTimelapseControllerDelegate> * _delegate;
    CAMFocusResult * _lastFocusResult;
}

@property (setter=_setBackendRecoveryNeeded:, nonatomic) bool _backendRecoveryNeeded;
@property (nonatomic, readonly) CUCaptureController *_captureController;
@property (nonatomic, readonly) NSObject<OS_dispatch_source> *_captureTimer;
@property (getter=_isFocusAndExposureAdjusted, setter=_setFocusAndExposureAdjusted:, nonatomic) bool _focusAndExposureAdjusted;
@property (nonatomic, readonly) bool _ignoringTimerCallbacksForTearDown;
@property (nonatomic, readonly) bool _ignoringTimerCallbacksWaitingForCaptureResponse;
@property (nonatomic, readonly) NSCountedSet *_inFlightTimelapseUUIDs;
@property (nonatomic, readonly) CAMLocationController *_locationController;
@property (nonatomic, readonly) CAMMotionController *_motionController;
@property (nonatomic, readonly) CAMNebulaDaemonProxyManager *_nebulaDaemonProxyManager;
@property (nonatomic, readonly) NSMutableSet *_pendingCompletedStates;
@property (nonatomic, readonly) CAMPersistenceController *_persistenceController;
@property (setter=_setPreviewStarted:, nonatomic) bool _previewStarted;
@property (setter=_setShouldUpdateFocusAndExposureWhenContrastDetectionCompletes:, nonatomic) bool _shouldUpdateFocusAndExposureWhenContrastDetectionCompletes;
@property (nonatomic, readonly) CAMTimelapseState *_state;
@property (nonatomic, readonly) NSDate *captureStartTime;
@property (getter=isCapturing, nonatomic, readonly) bool capturing;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CAMTimelapseControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) CAMFocusResult *lastFocusResult;
@property (readonly) Class superclass;

+ (struct __IOSurface { }*)_newVideoPreviewSurfaceForTimelapseState:(id)arg1;
+ (id)createPlaceholderResultForTimelapseState:(id)arg1;

- (void).cxx_destruct;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (bool)_backendRecoveryNeeded;
- (bool)_canCapturePhoto;
- (id)_captureController;
- (id)_captureTimer;
- (void)_captureTimerFired;
- (id)_createThumbnailImageFromPlaceholderResult:(id)arg1;
- (void)_deviceStarted:(id)arg1;
- (bool)_enqueueCaptureRequest;
- (bool)_ignoringTimerCallbacksForTearDown;
- (bool)_ignoringTimerCallbacksWaitingForCaptureResponse;
- (id)_inFlightTimelapseUUIDs;
- (bool)_isFocusAndExposureAdjusted;
- (id)_locationController;
- (id)_motionController;
- (id)_nebulaDaemonProxyManager;
- (void)_notifyAGGDForDidStopCapturingWithState:(id)arg1;
- (void)_notifyInsufficientDiskSpaceForContinuingCapture;
- (void)_notifyInsufficientDiskSpaceForStartingCaptureWithNeededBytes:(long long)arg1 availableBytes:(long long)arg2;
- (id)_pendingCompletedStates;
- (id)_persistenceController;
- (void)_prepareForTimelapseCaptureSetModeAndDevice:(bool)arg1;
- (bool)_previewStarted;
- (void)_previewStarted:(id)arg1;
- (void)_reserveDiskSpaceForTimelapseUUID:(id)arg1 preferHEVC:(bool)arg2 withCompletionBlock:(id /* block */)arg3;
- (void)_resetIgnoringTimerCallbacksWaitingForCaptureResponse;
- (void)_restoreCaptureStateFromDisk;
- (void)_saveStateToDisk:(id)arg1;
- (void)_sessionRuntimeErrored:(id)arg1;
- (void)_sessionStarted:(id)arg1;
- (void)_setBackendRecoveryNeeded:(bool)arg1;
- (void)_setFocusAndExposureAdjusted:(bool)arg1;
- (void)_setNewCaptureStateForCaptureDevice:(long long)arg1 captureSession:(unsigned short)arg2;
- (void)_setPreviewStarted:(bool)arg1;
- (void)_setShouldUpdateFocusAndExposureWhenContrastDetectionCompletes:(bool)arg1;
- (bool)_shouldUpdateFocusAndExposureWhenContrastDetectionCompletes;
- (void)_startCaptureTimer;
- (void)_startCapturingWithCaptureDevice:(long long)arg1 captureSession:(unsigned short)arg2;
- (id)_state;
- (id)_stillImageCaptureRequestWithCurrentSettings;
- (void)_stopCapturingWithReasons:(long long)arg1;
- (void)_teardownCaptureTimer;
- (void)_triggerBackendCrashRecoveryIfNeeded;
- (void)_updateFocusAndExposureForStartCapturing;
- (void)_updateFocusLensPosition:(float)arg1 forTimelapseUUID:(id)arg2 forceUpdate:(bool)arg3;
- (void)_updateLocationIfNecessary;
- (id)captureStartTime;
- (void)dealloc;
- (id)delegate;
- (void)forceStopTimelapseCaptureWithReasons:(long long)arg1;
- (id)init;
- (id)initWithCaptureController:(id)arg1 locationController:(id)arg2 motionController:(id)arg3 persistenceController:(id)arg4 nebulaDaemonProxyManager:(id)arg5;
- (bool)isCapturing;
- (id)lastFocusResult;
- (void)restoreConfiguration;
- (void)setDelegate:(id)arg1;
- (void)setLastFocusResult:(id)arg1;
- (bool)startCapturingWithCaptureDevice:(long long)arg1 captureSession:(unsigned short)arg2;
- (void)stillImageRequestDidCompleteStillImageCapture:(id)arg1 withResponse:(id)arg2 error:(id)arg3;
- (void)stillImageRequestDidCompleteStillImageLocalPersistence:(id)arg1 withResponse:(id)arg2 error:(id)arg3;
- (bool)stopCapturingWithReasons:(long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
