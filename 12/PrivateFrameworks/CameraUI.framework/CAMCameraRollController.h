<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMCameraRollController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CameraUI.framework/CAMCameraRollController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI (1)
 */

@interface CAMCameraRollController : NSObject <PHPhotoLibraryChangeObserver, PLCameraPreviewWellImageChangeObserver, PUBrowsingViewModelChangeObserver, PUOneUpPresentationHelperAssetDisplayDelegate, PUOneUpPresentationHelperDelegate, PXPhotosDataSourceChangeObserver, UIInteractionProgressObserver, UIViewControllerPreviewingDelegate, UIViewControllerPreviewingDelegate_Private> {
    NSMutableDictionary * __HDRUUIDToIgnoredEV0UUIDs;
    bool  __allowUpdating;
    bool  __deferringStagedMediaLoading;
    bool  __didSetupMechanismsForStoppingCaptureSession;
    bool  __didStopCaptureSession;
    NSMutableSet * __ignoredEV0UUIDs;
    NSObject<OS_dispatch_source> * __memoryWarningSource;
    bool  __oneUpFullyPresented;
    PUOneUpPresentationHelper * __oneUpPresentationHelper;
    bool  __oneUpVisible;
    PUPhotoKitDataSourceManager * __photoKitDataSourceManager;
    PXPhotosDataSource * __photosDataSource;
    NSObject<OS_dispatch_queue> * __photosFrameworksPreheatQueue;
    NSMutableSet * __sessionAssetUUIDs;
    bool  __shouldSkipPhotosFrameworkPreheat;
    PXPhotosDataSource * __stagedDataSource;
    bool  __transientAssetsAreValid;
    CAMTransientDataSource * __transientDataSource;
    CAMTransientImageManager * __transientImageManager;
    bool  __updateIsScheduled;
    <CAMCameraRollControllerImageWellDelegate> * _imageWellDelegate;
    bool  _prefersPresentingStatusbarHidden;
    <CAMCameraRollControllerPresentationDelegate> * _presentationDelegate;
    struct { 
        bool respondsToSourceAssetRect; 
        bool respondsToShouldHideSourceAsset; 
        bool respondsToPreviewGestureDidBecomeAvailable; 
        bool respondsToPreviewSourceRect; 
        bool respondsToImageForReveal; 
        bool respondsToRevealWillBegin; 
        bool respondsToRevealDidEnd; 
        bool respondsToWillPresentCameraRoll; 
        bool respondsToPrefersPresentingStatusbarHiddenDidChange; 
        bool respondsToPreferredPresentationOrientation; 
    }  _presentationDelegateFlags;
    UIGestureRecognizer * _previewGestureRecognizer;
    <CAMCameraRollControllerSessionDelegate> * _sessionDelegate;
    unsigned short  _sessionIdentifier;
}

@property (nonatomic, readonly) NSMutableDictionary *_HDRUUIDToIgnoredEV0UUIDs;
@property (setter=_setAllowUpdating:, nonatomic) bool _allowUpdating;
@property (getter=_isDeferringStagedMediaLoading, setter=_setDeferringStagedMediaLoading:, nonatomic) bool _deferringStagedMediaLoading;
@property (setter=_setDidSetupMechanismsForStoppingCaptureSession:, nonatomic) bool _didSetupMechanismsForStoppingCaptureSession;
@property (setter=_setDidStopCaptureSession:, nonatomic) bool _didStopCaptureSession;
@property (nonatomic, readonly) NSMutableSet *_ignoredEV0UUIDs;
@property (nonatomic, readonly) NSObject<OS_dispatch_source> *_memoryWarningSource;
@property (getter=_isOneUpFullyPresented, setter=_setOneUpFullyPresented:, nonatomic) bool _oneUpFullyPresented;
@property (nonatomic, readonly) PUOneUpPresentationHelper *_oneUpPresentationHelper;
@property (getter=_isOneUpVisible, setter=_setOneUpVisible:, nonatomic) bool _oneUpVisible;
@property (nonatomic, readonly) PUPhotoKitDataSourceManager *_photoKitDataSourceManager;
@property (setter=_setPhotosDataSource:, nonatomic, retain) PXPhotosDataSource *_photosDataSource;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_photosFrameworksPreheatQueue;
@property (nonatomic, readonly) NSMutableSet *_sessionAssetUUIDs;
@property (setter=_setShouldSkipPhotosFrameworkPreheat:, nonatomic) bool _shouldSkipPhotosFrameworkPreheat;
@property (setter=_setStagedDataSource:, nonatomic, retain) PXPhotosDataSource *_stagedDataSource;
@property (setter=_setTransientAssetsAreValid:, nonatomic) bool _transientAssetsAreValid;
@property (nonatomic, readonly) CAMTransientDataSource *_transientDataSource;
@property (nonatomic, readonly) CAMTransientImageManager *_transientImageManager;
@property (setter=_setUpdateIsScheduled:, nonatomic) bool _updateIsScheduled;
@property (nonatomic, readonly) bool canPresentCameraRollViewController;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) <CAMCameraRollControllerImageWellDelegate> *imageWellDelegate;
@property (setter=_setPrefersPresentingStatusbarHidden:, nonatomic) bool prefersPresentingStatusbarHidden;
@property (nonatomic) <CAMCameraRollControllerPresentationDelegate> *presentationDelegate;
@property (setter=_setPreviewGestureRecognizer:, nonatomic, retain) UIGestureRecognizer *previewGestureRecognizer;
@property (nonatomic) <CAMCameraRollControllerSessionDelegate> *sessionDelegate;
@property (setter=_setSessionIdentifier:, nonatomic) unsigned short sessionIdentifier;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_HDRUUIDToIgnoredEV0UUIDs;
- (bool)_allowUpdating;
- (void)_cancelDelayedStopCaptureSession;
- (bool)_didSetupMechanismsForStoppingCaptureSession;
- (bool)_didStopCaptureSession;
- (void)_ensureCameraRollViewController;
- (id)_ignoredEV0UUIDs;
- (void)_invalidateTransientAssets;
- (bool)_isDeferringStagedMediaLoading;
- (bool)_isOneUpFullyPresented;
- (bool)_isOneUpVisible;
- (bool)_isPasscodeLocked;
- (id)_memoryWarningSource;
- (id)_oneUpPresentationHelper;
- (id)_photoKitDataSourceManager;
- (id)_photosDataSource;
- (id)_photosFrameworksPreheatQueue;
- (void)_registerBrowsingViewModelChangeObserver;
- (void)_scheduleStopCaptureSessionAfterDelay:(double)arg1;
- (void)_scheduleUpdateIfOneUpIsActive;
- (id)_sessionAssetUUIDs;
- (void)_setAllowUpdating:(bool)arg1;
- (void)_setDeferringStagedMediaLoading:(bool)arg1;
- (void)_setDidSetupMechanismsForStoppingCaptureSession:(bool)arg1;
- (void)_setDidStopCaptureSession:(bool)arg1;
- (void)_setOneUpFullyPresented:(bool)arg1;
- (void)_setOneUpVisible:(bool)arg1;
- (void)_setPhotosDataSource:(id)arg1;
- (void)_setPrefersPresentingStatusbarHidden:(bool)arg1;
- (void)_setPreviewGestureRecognizer:(id)arg1;
- (void)_setSessionIdentifier:(unsigned short)arg1;
- (void)_setShouldSkipPhotosFrameworkPreheat:(bool)arg1;
- (void)_setStagedDataSource:(id)arg1;
- (void)_setTransientAssetsAreValid:(bool)arg1;
- (void)_setUpdateIsScheduled:(bool)arg1;
- (void)_setupMechanismsForStoppingCaptureSessionIfNecessary;
- (void)_setupMemoryWarningNotificationsIfNecessary;
- (bool)_shouldSkipPhotosFrameworkPreheat;
- (bool)_shouldStopCaptureSessionForIrisPlayerOfAssetViewModel:(id)arg1;
- (bool)_shouldStopCaptureSessionForVideoPlayerOfAssetViewModel:(id)arg1;
- (id)_stagedDataSource;
- (void)_startNewSession;
- (void)_stopCaptureSessionIfNecessary;
- (void)_stopCaptureSessionIfNecessaryForViewModel:(id)arg1 didChange:(id)arg2;
- (void)_stopCaptureSessionIfNecessaryForViewModelCurrentState;
- (void)_stopCaptureSessionIfNecessaryFromTimeout;
- (void)_tearDownMemoryWarningNotifications;
- (void)_teardownMechanismsForStoppingCaptureSession;
- (bool)_transientAssetsAreValid;
- (id)_transientDataSource;
- (id)_transientImageManager;
- (void)_unregisterBrowsingViewModelChangeObserver;
- (void)_update;
- (bool)_updateIsScheduled;
- (void)_updateTransientDataSourceIfNeeded;
- (void)animateRevealWithInteractionProgress:(id)arg1 forPreviewingAtLocation:(struct CGPoint { double x1; double x2; })arg2 inSourceView:(id)arg3 containerView:(id)arg4;
- (void)applicationDidEnterBackground:(id)arg1;
- (void)applicationResumed:(id)arg1;
- (void)applicationWillEnterForeground:(id)arg1;
- (void)beginAllowingStagedMediaLoading;
- (void)cameraPreviewWellImageDidChange:(id)arg1;
- (bool)canPresentCameraRollViewController;
- (void)clearIgnoredImageWellUUIDs;
- (void)dealloc;
- (void)didDismissPreviewViewController:(id)arg1 committing:(bool)arg2;
- (void)didPersistAssetWithUUID:(id)arg1 captureSession:(unsigned short)arg2;
- (bool)dismissCameraRollViewControllerForced:(bool)arg1 animated:(bool)arg2;
- (void)handlePresentingPanGestureRecognizer:(id)arg1;
- (void)ignoreImageWellChangeNotificationForEV0UUID:(id)arg1 withHDRUUID:(id)arg2;
- (id)imageWellDelegate;
- (id)init;
- (void)interactionProgress:(id)arg1 didEnd:(bool)arg2;
- (bool)isCameraRollViewControllerPresented;
- (bool)isCaptureSessionCurrent:(unsigned short)arg1;
- (void)oneUpPresentationHelper:(id)arg1 previewScrubberDidBecomeAvailable:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })oneUpPresentationHelper:(id)arg1 rectForAssetReference:(id)arg2 cropInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; }*)arg3 contentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (void)oneUpPresentationHelper:(id)arg1 shouldHideAssetReferences:(id)arg2;
- (void)oneUpPresentationHelper:(id)arg1 willPresentOneUpViewController:(id)arg2;
- (bool)oneUpPresentationHelperEnableFreezeLayoutOnOrientationChange:(id)arg1;
- (long long)oneUpPresentationHelperPreferredBarStyle:(id)arg1;
- (long long)oneUpPresentationHelperPreferredPresentationOrientation:(id)arg1;
- (bool)oneUpPresentationHelperShouldLeaveContentOnSecondScreen:(id)arg1;
- (id)oneUpPresentationHelperViewController:(id)arg1;
- (long long)oneUpPresentationOrigin:(id)arg1;
- (id)persistedThumbnailImage;
- (void)photoLibraryDidChange:(id)arg1;
- (void)photosDataSource:(id)arg1 didChange:(id)arg2;
- (void)ppt_awaitPreload:(id /* block */)arg1;
- (bool)prefersPresentingStatusbarHidden;
- (void)preload;
- (void)presentCameraRollViewControllerAnimated:(bool)arg1 interactive:(bool)arg2 deferringStagedMediaLoading:(bool)arg3;
- (id)presentationDelegate;
- (void)presentingViewControllerViewDidAppear:(bool)arg1;
- (void)presentingViewControllerViewDidDisappear:(bool)arg1;
- (void)presentingViewControllerViewWillAppear:(bool)arg1;
- (void)presentingViewControllerViewWillDisappear:(bool)arg1;
- (id)previewGestureRecognizer;
- (id)previewPresentationTransitioningDelegateForPosition:(struct CGPoint { double x1; double x2; })arg1 inSourceView:(id)arg2;
- (void)previewingContext:(id)arg1 commitViewController:(id)arg2;
- (id)previewingContext:(id)arg1 viewControllerForLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)processPendingBursts;
- (void)processTransientAssetUpdate:(id)arg1 preventingInsertion:(bool)arg2;
- (void)processTransientPairedVideoUpdate:(id)arg1 filterType:(long long)arg2;
- (void)resetNavigation;
- (id)sessionDelegate;
- (unsigned short)sessionIdentifier;
- (void)setImageWellDelegate:(id)arg1;
- (void)setPresentationDelegate:(id)arg1;
- (void)setSessionDelegate:(id)arg1;
- (bool)shouldStartPreviewingSimultaneouslyWithGestureRecognizer:(id)arg1;
- (void)viewModel:(id)arg1 didChange:(id)arg2;
- (void)willPersistAssetWithUUID:(id)arg1 captureSession:(unsigned short)arg2;
- (void)willPresentPreviewViewController:(id)arg1 forLocation:(struct CGPoint { double x1; double x2; })arg2 inSourceView:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
