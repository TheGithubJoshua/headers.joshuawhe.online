<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SPCoreSpotlightIndexer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SpotlightDaemon.framework/SPCoreSpotlightIndexer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SpotlightDaemon.framework/SpotlightDaemon (1)
 */

@interface SPCoreSpotlightIndexer : NSObject <MDIndexer> {
    NSDictionary * _concreteIndexers;
    NSSet * _dataMigrationBundleIDs;
    <NSObject> * _dataMigrationFinishObserver;
    unsigned long long  _dataMigrationStage;
    <NSObject> * _dataMigrationStartObserver;
    NSDictionary * _fileProviderAppToExtensionBundleMap;
    NSDictionary * _fileProviderExtensionToAppBundleMap;
    NSObject<OS_dispatch_queue> * _firstUnlockQueue;
    NSObject<OS_dispatch_queue> * _indexQueue;
    <SPCoreSpotlightIndexerDelegate> * _indexerDelegate;
    SPCoreSpotlightInteractionHandler * _interactionHandler;
    double  _lastUpdateTime;
    NSObject<OS_dispatch_source> * _prefsChangeSource;
    NSSet * _prefsDisabledBundleIDs;
    NSObject<OS_dispatch_source> * _reindexAllItemsSource;
    SPCoreSpotlightTask * _reindexAllItemsTask;
    NSObject<OS_dispatch_source> * _reindexAllItemsWithIdentifiersSource;
    NSObject<OS_dispatch_queue> * _reindexAllQueue;
    NSArray * _reindexIndexers;
    long long  _transactionCount;
    int  cancelFlags;
    <CSIndexExtensionDelegate> * extensionDelegate;
}

@property (retain) NSDictionary *concreteIndexers;
@property (nonatomic, retain) NSSet *dataMigrationBundleIDs;
@property (nonatomic, retain) <NSObject> *dataMigrationFinishObserver;
@property (nonatomic) unsigned long long dataMigrationStage;
@property (nonatomic, retain) <NSObject> *dataMigrationStartObserver;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property <CSIndexExtensionDelegate> *extensionDelegate;
@property (nonatomic, readonly) NSDictionary *fileProviderAppToExtensionBundleMap;
@property (nonatomic, readonly) NSDictionary *fileProviderExtensionToAppBundleMap;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *firstUnlockQueue;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *indexQueue;
@property <SPCoreSpotlightIndexerDelegate> *indexerDelegate;
@property (nonatomic, retain) SPCoreSpotlightInteractionHandler *interactionHandler;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *prefsChangeSource;
@property (nonatomic, retain) NSSet *prefsDisabledBundleIDs;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *reindexAllItemsSource;
@property (retain) SPCoreSpotlightTask *reindexAllItemsTask;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *reindexAllItemsWithIdentifiersSource;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *reindexAllQueue;
@property (readonly) Class superclass;
@property (nonatomic, readonly) long long transactionCount;

+ (id)_filterReindexAllExtensions:(id)arg1;
+ (id)allProtectionClasses;
+ (void)cooldown;
+ (void)deactivate;
+ (void)initialize;
+ (void)preheat;
+ (void)setIndexerDelegate:(id)arg1;
+ (void)setMemoryPressureStatus:(unsigned long long)arg1;
+ (void)setPrivate:(bool)arg1;
+ (id)sharedInstance;
+ (id)sharedInstanceWithDelegate:(id)arg1;
+ (void)shrink:(unsigned long long)arg1;
+ (void)shutdown;
+ (void)sync;
+ (void)unlock;
+ (bool)writeDiagnostic:(id)arg1 bundleID:(id)arg2 identifier:(id)arg3;

- (void).cxx_destruct;
- (void)_closeIndexWithIndexers:(id)arg1;
- (void)_enumerateIndexersWithBlock:(id /* block */)arg1;
- (void)_enumerateIndexersWithProtectionClasses:(id)arg1 block:(id /* block */)arg2;
- (void)_fetchAccumulatedStorageSizeForBundleId:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_issueCommand:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_migrateIndexExtensionsWithEnumerator:(id)arg1 forced:(bool)arg2 migratedBundleIds:(id)arg3 completionHandler:(id /* block */)arg4;
- (int)_openIndex:(bool)arg1;
- (void)_registerForPrefsChanges;
- (void)_reindexAllIdentifiersWithExtension:(id)arg1 completionBlock:(id /* block */)arg2;
- (void)_reindexAllItemsForBundleIDs:(id)arg1 reason:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_reindexAllItemsOnPrefsChanges;
- (void)_reindexAllItemsWithExtensionsAndCompletionBlock:(id /* block */)arg1;
- (void)_reindexAllItemsWithExtensionsAndIdentifiersAndCompletionBlock:(id /* block */)arg1;
- (id)_startQueryWithQueryString:(id)arg1 queryContext:(id)arg2 eventHandler:(id /* block */)arg3 resultsHandler:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (id)_taskForQueryWithQueryString:(id)arg1 queryContext:(id)arg2 eventHandler:(id /* block */)arg3 resultsHandler:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (void)addCompletedBundleIDs:(id)arg1 forIndexerTask:(id)arg2;
- (void)addInteraction:(id)arg1 bundleID:(id)arg2 protectionClass:(id)arg3;
- (void)cancelQuery:(id)arg1;
- (void)changeStateOfSearchableItemsWithUIDs:(id)arg1 toState:(long long)arg2 protectionClass:(id)arg3 forBundleID:(id)arg4 forUTIType:(id)arg5 options:(long long)arg6;
- (void)checkIfExtensionsNeedToBeLoaded;
- (void)cleanupStringsWithProtectionClasses:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)clientDidCheckin:(id)arg1 protectionClass:(id)arg2 service:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)closeIndex;
- (void)commitUpdates;
- (void)commitUpdatesWithCompletionHandler:(id /* block */)arg1;
- (id)concreteIndexers;
- (void)coolDown;
- (id)dataMigrationBundleIDs;
- (id)dataMigrationFinishObserver;
- (unsigned long long)dataMigrationStage;
- (id)dataMigrationStartObserver;
- (void)dealloc;
- (void)deleteActionsBeforeTime:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteActionsWithIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteAllInteractionsWithBundleID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteAllSearchableItemsWithBundleID:(id)arg1 protectionClass:(id)arg2 shouldGC:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)deleteAllSearchableItemsWithProtectionClass:(id)arg1 forBundleID:(id)arg2 options:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)deleteAllUserActivities:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteSearchableItemsSinceDate:(id)arg1 protectionClass:(id)arg2 forBundleID:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)deleteSearchableItemsWithDomainIdentifiers:(id)arg1 protectionClass:(id)arg2 forBundleID:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (id)extensionDelegate;
- (void)extensionsChanged:(id)arg1;
- (void)fetchAttributes:(id)arg1 protectionClass:(id)arg2 bundleID:(id)arg3 identifiers:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)fetchAttributesForProtectionClass:(id)arg1 attributes:(id)arg2 bundleID:(id)arg3 identifiers:(id)arg4 completion:(id /* block */)arg5;
- (void)fetchLastClientStateWithProtectionClass:(id)arg1 forBundleID:(id)arg2 clientStateName:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (id)fileProviderAppToExtensionBundleMap;
- (id)fileProviderExtensionToAppBundleMap;
- (void)fileProviderInfoSetup;
- (id)firstUnlockQueue;
- (void)flush;
- (void)getDBLogsWithCompletionHandler:(id /* block */)arg1;
- (void)handleRankingCommand:(id)arg1 completion:(id /* block */)arg2;
- (void)indexFromBundle:(id)arg1 protectionClass:(id)arg2 options:(long long)arg3 items:(id)arg4 itemsText:(id)arg5 itemsHTML:(id)arg6 clientState:(id)arg7 clientStateName:(id)arg8 deletes:(id)arg9 completionHandler:(id /* block */)arg10;
- (id)indexQueue;
- (void)indexSearchableItems:(id)arg1 deleteSearchableItemsWithIdentifiers:(id)arg2 clientState:(id)arg3 clientStateName:(id)arg4 protectionClass:(id)arg5 forBundleID:(id)arg6 options:(long long)arg7 completionHandler:(id /* block */)arg8;
- (void)indexSearchableItems:(id)arg1 deleteSearchableItemsWithIdentifiers:(id)arg2 clientState:(id)arg3 protectionClass:(id)arg4 forBundleID:(id)arg5 options:(long long)arg6 completionHandler:(id /* block */)arg7;
- (id)indexerDelegate;
- (id)initWithDelegate:(id)arg1;
- (id)interactionHandler;
- (void)issueCleanup:(id)arg1 flags:(int)arg2;
- (void)issueConsistencyCheck:(id)arg1;
- (void)issueRepair:(id)arg1;
- (void)issueSplit:(id)arg1;
- (double)lastUpdateTime;
- (void)locked;
- (void)locking;
- (void)mergeWithProtectionClasses:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)mergeWithProtectionClasses:(id)arg1 power:(bool)arg2;
- (void)mergeWithProtectionClasses:(id)arg1 power:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)migrateForced:(bool)arg1;
- (int)openIndex:(bool)arg1;
- (void)performIndexerTask:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)performIndexerTask:(id)arg1 withIndexExtensionsAndCompletionHandler:(id /* block */)arg2;
- (void)powerStateChanged;
- (id)prefsChangeSource;
- (id)prefsDisabledBundleIDs;
- (void)preheat;
- (void)provideDataForBundle:(id)arg1 identifier:(id)arg2 type:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)provideFileURLForBundle:(id)arg1 identifier:(id)arg2 type:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)queryForWord:(id)arg1 matchingAttributes:(id)arg2 prefixMatch:(bool)arg3;
- (void)recordEngagementForBundleID:(id)arg1 uniqueIdentifier:(id)arg2 protectionClass:(id)arg3 userQuery:(id)arg4 date:(id)arg5;
- (id)reindexAllItemsSource;
- (id)reindexAllItemsTask;
- (id)reindexAllItemsWithIdentifiersSource;
- (void)reindexAllItemsWithIndexers:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)reindexAllQueue;
- (void)resume;
- (void)revokeExpiredItems:(id)arg1;
- (void)runMigration;
- (void)setConcreteIndexers:(id)arg1;
- (void)setDataMigrationBundleIDs:(id)arg1;
- (void)setDataMigrationFinishObserver:(id)arg1;
- (void)setDataMigrationStage:(unsigned long long)arg1;
- (void)setDataMigrationStartObserver:(id)arg1;
- (void)setExtensionDelegate:(id)arg1;
- (void)setFirstUnlockQueue:(id)arg1;
- (void)setIndexQueue:(id)arg1;
- (void)setIndexerDelegate:(id)arg1;
- (void)setInteractionHandler:(id)arg1;
- (void)setPrefsChangeSource:(id)arg1;
- (void)setPrefsDisabledBundleIDs:(id)arg1;
- (void)setReindexAllItemsSource:(id)arg1;
- (void)setReindexAllItemsTask:(id)arg1;
- (void)setReindexAllItemsWithIdentifiersSource:(id)arg1;
- (void)setReindexAllQueue:(id)arg1;
- (void)shrink:(unsigned long long)arg1;
- (void)shutdown;
- (void)start;
- (id)startQuery:(id)arg1 withContext:(id)arg2 eventHandler:(id /* block */)arg3 handler:(id /* block */)arg4;
- (id)startQuery:(id)arg1 withContext:(id)arg2 handler:(id /* block */)arg3;
- (void)startQueryTask:(id)arg1;
- (id)startQueryWithQueryString:(id)arg1 queryContext:(id)arg2 eventHandler:(id /* block */)arg3 resultsHandler:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (id)taskForQueryWithQueryString:(id)arg1 queryContext:(id)arg2 eventHandler:(id /* block */)arg3 resultsHandler:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (id)taskForTopHitQueryWithQueryString:(id)arg1 queryContext:(id)arg2 eventHandler:(id /* block */)arg3 resultsHandler:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (long long)transactionCount;
- (void)unlock;
- (void)userPerformedAction:(id)arg1 withItem:(id)arg2 protectionClass:(id)arg3 forBundleID:(id)arg4;
- (void)willModifySearchableItemsWithIdentifiers:(id)arg1 protectionClass:(id)arg2 forBundleID:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (bool)writeData:(id)arg1 toFile:(id)arg2;
- (void)writeFileProviderBundleMap:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
