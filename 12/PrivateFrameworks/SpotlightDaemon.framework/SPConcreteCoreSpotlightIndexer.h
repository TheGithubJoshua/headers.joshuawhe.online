<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SPConcreteCoreSpotlightIndexer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SpotlightDaemon.framework/SPConcreteCoreSpotlightIndexer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SpotlightDaemon.framework/SpotlightDaemon (1)
 */

@interface SPConcreteCoreSpotlightIndexer : NSObject {
    int * _cancelPtr;
    NSMapTable * _checkedInClients;
    unsigned long long  _createCount;
    NSString * _dataclass;
    NSObject<OS_dispatch_queue> * _firstUnlockQueue;
    double  _idleStartTime;
    struct __SI { } * _index;
    NSObject<OS_dispatch_source> * _indexIdleTimer;
    NSObject<OS_dispatch_queue> * _indexQueue;
    NSMutableSet * _knownClients;
    double  _lastPreheat;
    double  _lastTTLPass;
    _Atomic unsigned int  _maintenanceOperations;
    NSMutableArray * _outstandingMaintenance;
    SPCoreSpotlightIndexer * _owner;
    NSMutableSet * _reindexAllDelegateBundleIDs;
    struct __SIResultQueue { } * _resultQueue;
    bool  _scheduledStringsCleanup;
    bool  _softSuspended;
    bool  _suspended;
}

@property (nonatomic, readonly) NSMapTable *checkedInClients;
@property (nonatomic, retain) NSString *dataclass;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *firstUnlockQueue;
@property (nonatomic, readonly) double idleStartTime;
@property (nonatomic) struct __SI { }*index;
@property (nonatomic, readonly) NSObject<OS_dispatch_source> *indexIdleTimer;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *indexQueue;
@property (nonatomic, readonly) NSMutableSet *knownClients;
@property (nonatomic, retain) NSMutableArray *outstandingMaintenance;
@property (nonatomic) SPCoreSpotlightIndexer *owner;
@property (nonatomic) struct __SIResultQueue { }*resultQueue;

+ (id)_stateInfoAttributeNameWithClientStateName:(id)arg1;
+ (void)initialize;

- (void).cxx_destruct;
- (void)_addNewClientWithBundleID:(id)arg1;
- (void)_backgroundDeleteItems:(id)arg1 bundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_cancelIdleTimer;
- (void)_deleteSearchableItemsMatchingQuery:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_expireCorruptIndexFilesWithPath:(id)arg1 keepLatest:(bool)arg2;
- (void)_fetchAccumulatedStorageSizeForBundleId:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_indexMaintenanceActivityName;
- (id)_indexPath;
- (void)_performXPCActivity:(id)arg1 name:(id)arg2;
- (void)_saveCorruptIndexWithPath:(id)arg1;
- (void)_scheduleStringsCleanupForBundleID:(id)arg1;
- (void)_setClientState:(id)arg1 clientStateName:(id)arg2 forBundleID:(id)arg3 completionHandler:(id /* block */)arg4;
- (bool)_startInternalQueryWithIndex:(struct __SI { }*)arg1 query:(id)arg2 fetchAttributes:(id)arg3 resultsHandler:(id /* block */)arg4;
- (id)_startQueryWithQueryTask:(id)arg1 eventHandler:(id /* block */)arg2 resultsHandler:(id /* block */)arg3;
- (void)addClients:(id)arg1;
- (void)addCompletedBundleIDs:(id)arg1 forIndexerTask:(id)arg2;
- (void)attributesForBundleId:(id)arg1 identifier:(id)arg2 completion:(id /* block */)arg3;
- (void)changeStateOfSearchableItemsWithUIDs:(id)arg1 toState:(long long)arg2 forBundleID:(id)arg3;
- (void)checkInWithBundleID:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)checkedInClients;
- (void)cleanupStringsWithActivity:(id)arg1 group:(id)arg2 shouldDefer:(bool*)arg3 flags:(int)arg4;
- (void)cleanupStringsWithCompletionHandler:(id /* block */)arg1;
- (void)clientDidCheckin:(id)arg1 service:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)closeIndex;
- (void)commitUpdates:(id)arg1;
- (void)coolDown:(id)arg1;
- (id)dataclass;
- (void)dealloc;
- (void)deleteActionsBeforeTime:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteActionsWithIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteAllInteractionsWithBundleID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteAllSearchableItemsForBundleID:(id)arg1 shouldGC:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)deleteAllUserActivities:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteItemsForEnumerator:(id)arg1 traceID:(long long)arg2 bundleID:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)deleteItemsForQuery:(id)arg1 bundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)deleteSearchableItemsSinceDate:(id)arg1 forBundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)deleteSearchableItemsWithDomainIdentifiers:(id)arg1 forBundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)dirty;
- (void)dumpAllRankingDiagnosticInformationForQuery:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)ensureOpenIndexFiles;
- (void)fetchAllCompletedBundleIDsForIndexerTask:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchAttributes:(id)arg1 bundleID:(id)arg2 identifiers:(id)arg3 completion:(id /* block */)arg4;
- (void)fetchAttributes:(id)arg1 bundleID:(id)arg2 identifiers:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)fetchLastClientStateForBundleID:(id)arg1 clientStateName:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)finishReindexAll;
- (id)firstUnlockQueue;
- (id)getPropertyForKey:(id)arg1;
- (double)idleStartTime;
- (struct __SI { }*)index;
- (void)indexFinishedDrainingJournal;
- (void)indexFinishedDrainingJournal:(id)arg1;
- (void)indexFromBundle:(id)arg1 options:(long long)arg2 items:(id)arg3 itemsText:(id)arg4 clientState:(id)arg5 clientStateName:(id)arg6 deletes:(id)arg7 completionHandler:(id /* block */)arg8;
- (id)indexIdleTimer;
- (id)indexQueue;
- (void)indexSearchableItems:(id)arg1 deleteSearchableItemsWithIdentifiers:(id)arg2 clientState:(id)arg3 clientStateName:(id)arg4 forBundleID:(id)arg5 options:(long long)arg6 completionHandler:(id /* block */)arg7;
- (void)indexSearchableItems:(id)arg1 deleteSearchableItemsWithIdentifiers:(id)arg2 clientState:(id)arg3 forBundleID:(id)arg4 options:(long long)arg5 completionHandler:(id /* block */)arg6;
- (id)initWithQueue:(id)arg1 protectionClass:(id)arg2 cancelPtr:(int*)arg3;
- (void)issueConsistencyCheck;
- (void)issueRepair;
- (void)issueSplit;
- (id)knownClients;
- (void)mergeWithCompletionHandler:(id /* block */)arg1;
- (void)mergeWithGroup:(id)arg1;
- (int)openIndex:(bool)arg1;
- (int)openIndex:(bool)arg1 shouldReindexAll:(bool)arg2;
- (id)outstandingMaintenance;
- (id)owner;
- (void)performIndexerTask:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)performIndexerTask:(id)arg1 withIndexDelegatesAndCompletionHandler:(id /* block */)arg2;
- (void)performQueryForCountOfItemsInCategory:(id)arg1 completion:(id /* block */)arg2;
- (void)powerStateChanged;
- (void)preheat;
- (void)readyIndex:(bool)arg1;
- (bool)reindexAllStarted;
- (void)removeExpiredItemsForBundleId:(id)arg1 group:(id)arg2;
- (struct __SIResultQueue { }*)resultQueue;
- (void)resumeIndex;
- (void)revokeExpiredItems:(id)arg1;
- (void)scheduleMaintenance:(id /* block */)arg1 description:(id)arg2 forDarkWake:(bool)arg3;
- (void)setDataclass:(id)arg1;
- (void)setFirstUnlockQueue:(id)arg1;
- (void)setIndex:(struct __SI { }*)arg1;
- (void)setIndexQueue:(id)arg1;
- (void)setOutstandingMaintenance:(id)arg1;
- (void)setOwner:(id)arg1;
- (void)setProperty:(id)arg1 forKey:(id)arg2 sync:(bool)arg3;
- (void)setResultQueue:(struct __SIResultQueue { }*)arg1;
- (void)shrink:(unsigned long long)arg1;
- (void)startQueryWithQueryTask:(id)arg1 startHandler:(id /* block */)arg2 eventHandler:(id /* block */)arg3 resultsHandler:(id /* block */)arg4;
- (void)startReindexAll;
- (void)suspendIndexForDeviceLock;
- (void)updateRankingDates;
- (void)willModifySearchableItemsWithIdentifiers:(id)arg1 forBundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)writeDiagnostic:(id)arg1 bundleID:(id)arg2 identifier:(id)arg3;
- (void)zombifyAllContactItems:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
