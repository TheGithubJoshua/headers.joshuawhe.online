<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SBUIPasscodeBiometricAuthenticationView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SpringBoardUIServices.framework/SBUIPasscodeBiometricAuthenticationView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices (1)
 */

@interface SBUIPasscodeBiometricAuthenticationView : SBUIInteractionForwardingView {
    bool  _ancillaryButtonsVisible;
    SBUIButton * _cancelButton;
    <SBUIPasscodeBiometricAuthenticationViewDelegate> * _delegate;
    SBUIButton * _emergencyCallButton;
    UILabel * _faceIDLabel;
    UILayoutGuide * _faceIDLabelAndReasonHelperGuide;
    UILayoutGuide * _faceIDLabelAndReasonLayoutGuide;
    NSLayoutConstraint * _faceIDLabelFaceIDReasonBaselineConstraint;
    NSString * _faceIDReason;
    UILabel * _faceIDReasonLabel;
    NSString * _faceIDReasonLine2;
    SBUIPasscodePillButton * _faceIDUsePasscodeButton;
    bool  _faceIDUsePasscodeButtonVisible;
    <SBUIPasscodeBiometricAuthenticationViewLayoutDelegate> * _layoutDelegate;
    PKGlyphView * _touchIDGlyphView;
    NSString * _touchIDReason;
    UILabel * _touchIDReasonLabel;
    SBUIButton * _touchIDUsePasscodeButton;
    unsigned long long  _type;
    NSString * _unlockDestination;
}

@property (nonatomic) bool ancillaryButtonsVisible;
@property (nonatomic, retain) SBUIButton *cancelButton;
@property (nonatomic) <SBUIPasscodeBiometricAuthenticationViewDelegate> *delegate;
@property (nonatomic, retain) SBUIButton *emergencyCallButton;
@property (nonatomic, retain) UILabel *faceIDLabel;
@property (nonatomic, retain) UILayoutGuide *faceIDLabelAndReasonHelperGuide;
@property (nonatomic, retain) UILayoutGuide *faceIDLabelAndReasonLayoutGuide;
@property (nonatomic, retain) NSLayoutConstraint *faceIDLabelFaceIDReasonBaselineConstraint;
@property (setter=_setFaceIDReason:, nonatomic, copy) NSString *faceIDReason;
@property (nonatomic, retain) UILabel *faceIDReasonLabel;
@property (setter=_setFaceIDReason2:, nonatomic, copy) NSString *faceIDReasonLine2;
@property (nonatomic, retain) SBUIPasscodePillButton *faceIDUsePasscodeButton;
@property (nonatomic) bool faceIDUsePasscodeButtonVisible;
@property (nonatomic) <SBUIPasscodeBiometricAuthenticationViewLayoutDelegate> *layoutDelegate;
@property (nonatomic) bool showsCancelButton;
@property (nonatomic) bool showsEmergencyCallButton;
@property (nonatomic, retain) PKGlyphView *touchIDGlyphView;
@property (setter=_setTouchIDReason:, nonatomic, copy) NSString *touchIDReason;
@property (nonatomic, retain) UILabel *touchIDReasonLabel;
@property (nonatomic, retain) SBUIButton *touchIDUsePasscodeButton;
@property (nonatomic) unsigned long long type;
@property (nonatomic, copy) NSString *unlockDestination;

- (void).cxx_destruct;
- (void)_cancelButtonHit;
- (void)_createConstraints;
- (void)_createSubviews;
- (void)_emergencyCallButtonHit;
- (void)_layoutAuthReasonLabel:(id)arg1;
- (double)_leadingForFaceIDReason;
- (void)_noteContentSizeCategoryDidChange;
- (void)_setFaceIDReason2:(id)arg1;
- (void)_setFaceIDReason:(id)arg1;
- (void)_setFaceIDReasonLine2:(id)arg1;
- (void)_setTouchIDReason:(id)arg1;
- (void)_usePasscodeButtonHit;
- (bool)ancillaryButtonsVisible;
- (id)cancelButton;
- (id)delegate;
- (id)emergencyCallButton;
- (id)faceIDLabel;
- (id)faceIDLabelAndReasonHelperGuide;
- (id)faceIDLabelAndReasonLayoutGuide;
- (id)faceIDLabelFaceIDReasonBaselineConstraint;
- (id)faceIDReason;
- (id)faceIDReasonLabel;
- (id)faceIDReasonLine2;
- (id)faceIDUsePasscodeButton;
- (bool)faceIDUsePasscodeButtonVisible;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 layoutDelegate:(id)arg2;
- (id)layoutDelegate;
- (void)layoutSubviews;
- (void)setAncillaryButtonsVisible:(bool)arg1;
- (void)setAncillaryButtonsVisible:(bool)arg1 animated:(bool)arg2;
- (void)setCancelButton:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEmergencyCallButton:(id)arg1;
- (void)setFaceIDLabel:(id)arg1;
- (void)setFaceIDLabelAndReasonHelperGuide:(id)arg1;
- (void)setFaceIDLabelAndReasonLayoutGuide:(id)arg1;
- (void)setFaceIDLabelFaceIDReasonBaselineConstraint:(id)arg1;
- (void)setFaceIDReasonLabel:(id)arg1;
- (void)setFaceIDUsePasscodeButton:(id)arg1;
- (void)setFaceIDUsePasscodeButtonVisible:(bool)arg1;
- (void)setGlyphViewState:(long long)arg1;
- (void)setGlyphViewState:(long long)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)setLayoutDelegate:(id)arg1;
- (void)setShowsCancelButton:(bool)arg1;
- (void)setShowsEmergencyCallButton:(bool)arg1;
- (void)setTouchIDGlyphView:(id)arg1;
- (void)setTouchIDReasonLabel:(id)arg1;
- (void)setTouchIDUsePasscodeButton:(id)arg1;
- (void)setType:(unsigned long long)arg1;
- (void)setUnlockDestination:(id)arg1;
- (bool)showsCancelButton;
- (bool)showsEmergencyCallButton;
- (id)touchIDGlyphView;
- (id)touchIDReason;
- (id)touchIDReasonLabel;
- (id)touchIDUsePasscodeButton;
- (unsigned long long)type;
- (id)unlockDestination;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
