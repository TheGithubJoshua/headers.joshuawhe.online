<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SBSUIWallpaperPreviewViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SpringBoardUIServices.framework/SBSUIWallpaperPreviewViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices (1)
 */

@interface SBSUIWallpaperPreviewViewController : UIViewController <SBFLegibilitySettingsProvider, SBFLegibilitySettingsProviderDelegate, SBFWallpaperViewSettingsProvider> {
    bool  _allowScrolling;
    bool  _colorSamplingEnabled;
    NSTimer * _dateTimer;
    <SBFLegibilitySettingsProviderDelegate> * _delegate;
    SBFHomeScreenWallpaperParallaxSettings * _homeScreenParallaxSettings;
    SBFLockScreenWallpaperParallaxSettings * _lockScreenParallaxSettings;
    bool  _motionEnabled;
    NSString * _name;
    NSDictionary * _proceduralWallpaper;
    NSDictionary * _proceduralWallpaperOptions;
    double  _stillTimeInVideo;
    long long  _variant;
    AVURLAsset * _video;
    SBFWallpaperConfiguration * _wallpaperConfiguration;
    SBFWallpaperConfigurationManager * _wallpaperConfigurationManager;
    UIImage * _wallpaperImage;
    SBFWallpaperSettings * _wallpaperSettings;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SBFLegibilitySettingsProviderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) SBFHomeScreenWallpaperParallaxSettings *homeScreenParallaxSettings;
@property (nonatomic, readonly) _UILegibilitySettings *legibilitySettings;
@property (nonatomic, retain) SBFLockScreenWallpaperParallaxSettings *lockScreenParallaxSettings;
@property (nonatomic) bool motionEnabled;
@property (readonly) Class superclass;
@property (nonatomic, copy) SBFWallpaperConfiguration *wallpaperConfiguration;
@property (readonly) UIImage *wallpaperImage;
@property (nonatomic, retain) SBFWallpaperSettings *wallpaperSettings;

- (void).cxx_destruct;
- (id)_colorWallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2 configuration:(id)arg3;
- (id)_dateView;
- (double)_parallaxFactor;
- (id)_previewView;
- (id)_proceduralWallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2;
- (void)_startDateTimer;
- (void)_stopDateTimer;
- (void)_updateDateView;
- (long long)_wallpaperType;
- (id)_wallpaperTypeDescription;
- (id)_wallpaperView;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 image:(id)arg2 video:(id)arg3 videoURL:(id)arg4 stillTimeInVideo:(double)arg5 supportsCropping:(bool)arg6 variant:(long long)arg7;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2 options:(id)arg3;
- (bool)colorSamplingEnabled;
- (void)dealloc;
- (id)delegate;
- (id)homeScreenParallaxSettings;
- (id)initWithImage:(id)arg1;
- (id)initWithImage:(id)arg1 name:(id)arg2;
- (id)initWithImage:(id)arg1 name:(id)arg2 video:(id)arg3 time:(double)arg4;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithProceduralWallpaper:(id)arg1 options:(id)arg2;
- (id)initWithScrollableImage:(id)arg1;
- (id)initWithScrollableImage:(id)arg1 video:(id)arg2 time:(double)arg3;
- (id)initWithWallpaperVariant:(long long)arg1;
- (id)legibilitySettings;
- (void)loadView;
- (id)lockScreenParallaxSettings;
- (bool)motionEnabled;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)providerLegibilitySettingsChanged:(id)arg1;
- (void)setColorSamplingEnabled:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHomeScreenParallaxSettings:(id)arg1;
- (void)setImageWallpaperForLocations:(long long)arg1;
- (void)setLockScreenParallaxSettings:(id)arg1;
- (void)setMotionEnabled:(bool)arg1;
- (void)setMotionEnabled:(bool)arg1 updateParallaxOnWallpaperView:(bool)arg2;
- (void)setProceduralWallpaperForLocations:(long long)arg1;
- (void)setWallpaperConfiguration:(id)arg1;
- (void)setWallpaperForLocations:(long long)arg1;
- (void)setWallpaperSettings:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (id)wallpaperConfiguration;
- (id)wallpaperConfigurationManager;
- (id)wallpaperImage;
- (id)wallpaperParallaxSettingsForVariant:(long long)arg1;
- (id)wallpaperSettings;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
