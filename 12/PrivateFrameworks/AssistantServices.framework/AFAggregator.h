<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AFAggregator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssistantServices.framework/AFAggregator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices (1)
 */

@interface AFAggregator : NSObject {
    bool  _hasActiveRequest;
    bool  _retryPrefersWWAN;
    bool  _sessionIsRetrying;
    double  _startTime;
    unsigned long long  _type;
}

@property (nonatomic) unsigned long long connectionType;
@property (nonatomic) bool hasActiveRequest;

+ (id)_fullAggDKeyWithPrefix:(id)arg1 error:(id)arg2;
+ (bool)_hadUserEventSinceIntervalAgo:(double)arg1;
+ (void)_logFeature:(id)arg1 setTo:(bool)arg2 by:(id)arg3;
+ (id)_stringForGatekeeperType:(unsigned long long)arg1;
+ (bool)_timestamp:(id)arg1 isAfter:(id)arg2;
+ (void)logAssistantEnabledSetTo:(bool)arg1 by:(id)arg2;
+ (void)logCDMAssetEvictedForAssetType:(id)arg1 language:(id)arg2;
+ (void)logCreateAssistant;
+ (void)logDESEvaluationForLanguage:(id)arg1 error:(id)arg2;
+ (void)logDESRecordingForLanguage:(id)arg1 error:(id)arg2;
+ (void)logDictationCancelled;
+ (void)logDictationEnabledSetTo:(bool)arg1 by:(id)arg2;
+ (void)logDictationFailedWithError:(id)arg1;
+ (void)logDictationFollowedByContinueOccurredForLanguage:(id)arg1;
+ (void)logDictationFollowedByKeyboardDeleteOccurredForLanguage:(id)arg1;
+ (void)logDictationFollowedByKeyboardInputOccurredForLanguage:(id)arg1;
+ (void)logDictationStarted;
+ (void)logDictationSucceeded;
+ (void)logEnabledState:(unsigned long long)arg1;
+ (void)logHomeButtonPressToActivationDuration:(double)arg1;
+ (void)logKeyboardInputFollowedByContinueOccurredForLanguage:(id)arg1;
+ (void)logLoadAssistant;
+ (void)logLocalFinalSpeechRecognitionWithDuration:(double)arg1;
+ (void)logLocalRecognitionAssetEvictedForLanguage:(id)arg1;
+ (void)logLocalRecognitionLoadedForLanguage:(id)arg1 duration:(double)arg2;
+ (void)logLocalRecognitionLostForLanguage:(id)arg1;
+ (void)logLocalRecognitionWonForLanguage:(id)arg1;
+ (void)logLocalSpeechStartedWithDuration:(double)arg1;
+ (void)logPeriodicUsageIfNeeded;
+ (void)logPingTimeout;
+ (void)logRequestCancelAfterSeconds:(double)arg1;
+ (void)logRequestCompletedWithDuration:(double)arg1;
+ (void)logRequestLaunchedApp;
+ (void)logSiriInvokedVia:(long long)arg1;
+ (void)logSiriMediaVolumeAction:(long long)arg1;
+ (void)logSiriOtherRequestStarted;
+ (void)logSiriPausedMedia;
+ (void)logSiriQuickStopAction:(unsigned long long)arg1;
+ (void)logSiriRequestCancelled;
+ (void)logSiriRequestFailedWithError:(id)arg1;
+ (void)logSiriRequestSucceeded;
+ (void)logSiriSpeechRequestStarted;
+ (void)logStarkGatekeeperAppearedForType:(unsigned long long)arg1;
+ (void)logStarkGatekeeperDismissedManuallyForType:(unsigned long long)arg1;
+ (void)logTimeToBeepWithDuration:(double)arg1;
+ (void)logUILockCanceledVTActivation;
+ (void)missedAlertContextForRequest;
+ (void)missedAppContextForRequest;
+ (void)noteConnectedToCarPlayHeadunit;
+ (void)noteSuccessOfRequest:(id)arg1 inCar:(bool)arg2;

- (void)beginSessionRetryPreferringWWAN:(bool)arg1;
- (void)connectionDidDrop;
- (void)connectionDidFail;
- (unsigned long long)connectionType;
- (bool)hasActiveRequest;
- (void)recordFailure:(int)arg1 forConnectionType:(unsigned long long)arg2;
- (void)recordSessionRetrySuccess;
- (void)recordSuccessForConnectionType:(unsigned long long)arg1 isWarm:(bool)arg2 forTimeInterval:(double)arg3;
- (void)setConnectionType:(unsigned long long)arg1;
- (void)setHasActiveRequest:(bool)arg1;
- (void)speechResponseFailure;
- (void)speechResponseReceived;
- (void)startWaitingForSpeechResponse;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
