<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VMUSampler.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Symbolication.framework/VMUSampler.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Symbolication.framework/Symbolication (64492.3)
 */

@interface VMUSampler : NSObject {
    id  _delegate;
    NSMutableDictionary * _dispatchQueueSerialNumToNameMap;
    unsigned int  _dispatchThreadHardLimit;
    unsigned int  _dispatchThreadHardLimitCount;
    unsigned int  _dispatchThreadSoftLimit;
    unsigned int  _dispatchThreadSoftLimitCount;
    double  _interval;
    NSMapTable * _lastThreadBacktraceMap;
    unsigned int  _mainThread;
    unsigned int  _maxPreviousThreadCount;
    bool  _needTaskPortDealloc;
    unsigned int  _numberOfCopiedBacktraces;
    unsigned int  _numberOfSamples;
    unsigned long long  _options;
    int  _pid;
    unsigned int  _previousThreadCount;
    unsigned int * _previousThreadList;
    VMUProcessDescription * _processDescription;
    NSString * _processName;
    bool  _recordThreadStates;
    unsigned int  _sampleLimit;
    NSMutableArray * _samples;
    bool  _sampling;
    struct sampling_context_t { } * _samplingContext;
    bool  _stacksFixed;
    NSConditionLock * _stateLock;
    unsigned int  _suspensionToken;
    struct _CSTypeRef { 
        unsigned long long _opaque_1; 
        unsigned long long _opaque_2; 
    }  _symbolicator;
    unsigned int  _task;
    double  _tbInterval;
    double  _tbRate;
    NSMutableDictionary * _threadPortToNameMap;
    double  _timeLimit;
    double  _timeSpentSampling;
}

+ (void)initialize;
+ (id)sampleAllThreadsOfPID:(int)arg1;
+ (id)sampleAllThreadsOfTask:(unsigned int)arg1;
+ (id)sampleAllThreadsOfTask:(unsigned int)arg1 symbolicate:(bool)arg2;

- (void).cxx_destruct;
- (void)_checkDispatchThreadLimits;
- (void)_fixupStacks:(id)arg1;
- (void)_makeHighPriority;
- (void)_makeTimeshare;
- (void)_runSamplingThread;
- (void)dealloc;
- (id)delegate;
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)arg1;
- (id)dispatchQueueNameForSerialNumber:(unsigned long long)arg1 returnedConcurrentFlag:(bool*)arg2 returnedThreadId:(unsigned long long*)arg3;
- (void)flushData;
- (void)forceStop;
- (id)initWithPID:(int)arg1;
- (id)initWithPID:(int)arg1 options:(unsigned long long)arg2;
- (id)initWithPID:(int)arg1 orTask:(unsigned int)arg2 options:(unsigned long long)arg3;
- (id)initWithPID:(int)arg1 task:(unsigned int)arg2 processName:(id)arg3 is64Bit:(bool)arg4 options:(unsigned long long)arg5;
- (id)initWithTask:(unsigned int)arg1;
- (id)initWithTask:(unsigned int)arg1 options:(unsigned long long)arg2;
- (void)initializeSamplingContextWithOptions:(int)arg1;
- (unsigned int)mainThread;
- (id)outputString;
- (int)pid;
- (void)preloadSymbols;
- (unsigned long long)recordSampleTo:(id)arg1 beginTime:(double)arg2 endTime:(double)arg3 thread:(unsigned int)arg4 recordFramePointers:(bool)arg5 clearMemoryCache:(bool)arg6;
- (id)sampleAllThreadsOnce;
- (id)sampleAllThreadsOnceWithFramePointers:(bool)arg1;
- (unsigned int)sampleCount;
- (void)sampleForDuration:(unsigned int)arg1 interval:(unsigned int)arg2;
- (unsigned int)sampleLimit;
- (id)sampleThread:(unsigned int)arg1;
- (id)samples;
- (double)samplingInterval;
- (void)setDelegate:(id)arg1;
- (void)setRecordThreadStates:(bool)arg1;
- (void)setSampleLimit:(unsigned int)arg1;
- (void)setSamplingInterval:(double)arg1;
- (void)setTimeLimit:(double)arg1;
- (bool)start;
- (bool)stop;
- (void)stopSampling;
- (id)stopSamplingAndReturnCallNode;
- (struct _CSTypeRef { unsigned long long x1; unsigned long long x2; })symbolicator;
- (id)threadDescriptionStringForBacktrace:(id)arg1 returnedAddress:(unsigned long long*)arg2;
- (id)threadNameForThread:(unsigned int)arg1;
- (id)threadNameForThread:(unsigned int)arg1 returnedThreadId:(unsigned long long*)arg2 returnedDispatchQueueSerialNum:(unsigned long long*)arg3;
- (double)timeLimit;
- (bool)waitUntilDone;
- (void)writeOutput:(id)arg1 append:(bool)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
