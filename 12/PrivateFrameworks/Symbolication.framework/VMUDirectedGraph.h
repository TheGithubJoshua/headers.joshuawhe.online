<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VMUDirectedGraph.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Symbolication.framework/VMUDirectedGraph.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Symbolication.framework/Symbolication (64492.3)
 */

@interface VMUDirectedGraph : NSObject <NSCopying> {
    NSDictionary * _additionalProperties;
    void * _deadNodes;
    unsigned int  _edgeCapacity;
    unsigned int  _edgeCount;
    struct _VMUDirectedGraphEdge { unsigned int x1; unsigned int x2; unsigned int x3; } * _edges;
    unsigned int  _externalEdges;
    long long  _graphCompatibilityVersion;
    bool  _graphIs64bit;
    long long  _graphVersion;
    unsigned int  _indexedEdges;
    unsigned int  _indexedNodeSpace;
    int  _insideSearch;
    bool  _inverted;
    unsigned int  _nextEdgeName;
    unsigned int  _nextNodeName;
    unsigned int * _nodeAdjIndex;
    unsigned int  _nodeCount;
}

@property (nonatomic, copy) NSDictionary *additionalProperties;
@property (nonatomic, readonly) unsigned int edgeCount;
@property (nonatomic, readonly) unsigned int edgeNamespaceSize;
@property (nonatomic, readonly) bool graphIs64bit;
@property (nonatomic) bool inverted;
@property (nonatomic, readonly) unsigned int nodeCount;
@property (nonatomic, readonly) unsigned int nodeNamespaceSize;
@property (nonatomic, readonly) unsigned int pointerSize;

+ (id)_archivedBytes:(const void*)arg1 length:(unsigned long long)arg2 options:(unsigned long long)arg3;
+ (id)_archivedObject:(id)arg1 options:(unsigned long long)arg2;
+ (void*)_copyUnarchived:(id)arg1 length:(unsigned long long*)arg2 options:(unsigned long long)arg3;
+ (id)_unarchivedObject:(id)arg1 ofClass:(Class)arg2 options:(unsigned long long)arg3;
+ (id)directedGraphWithData:(id)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (bool)_adjustAdjacencyMap;
- (void)_bfsCore:(unsigned int)arg1 colors:(char *)arg2 visitBlock:(id /* block */)arg3 examineBlock:(id /* block */)arg4;
- (void*)_deadNodeMap;
- (void)_dfsCore:(unsigned int)arg1 colors:(char *)arg2 visitBlock:(id /* block */)arg3 examineBlock:(id /* block */)arg4;
- (void)_dumpAdjacencyList;
- (void)_faultDeadNodeMap;
- (void)_internalAccessRawEdgesWithBlock:(id /* block */)arg1;
- (void)_internalAddEdgeFromNode:(unsigned int)arg1 toNode:(unsigned int)arg2 withName:(unsigned int)arg3;
- (unsigned int)_internalEnumerateEdgesOfNode:(unsigned int)arg1 withBlock:(id /* block */)arg2;
- (void)_removeEdges:(id /* block */)arg1;
- (void)_renameWithNodeMap:(unsigned int*)arg1 nodeNamespace:(unsigned int)arg2 edgeMap:(unsigned int*)arg3 edgeNamespace:(unsigned int)arg4;
- (void)_renormalize;
- (void)_reorderEdgesNaturally;
- (void)_searchMainLoop:(unsigned int)arg1 action:(id /* block */)arg2;
- (unsigned int)addEdgeFromNode:(unsigned int)arg1 toNode:(unsigned int)arg2;
- (unsigned int)addGroupNodeForNodes:(const unsigned int*)arg1 count:(unsigned int)arg2;
- (unsigned int)addNode;
- (id)additionalProperties;
- (void)archiveDictionaryRepresentation:(id)arg1 options:(unsigned long long)arg2;
- (void)breadthFirstSearch:(unsigned int)arg1 nodeVisitBlock:(id /* block */)arg2 edgeVisitBlock:(id /* block */)arg3;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)decapsulateIPSheaderInData:(id)arg1 error:(id*)arg2;
- (void)depthFirstSearch:(unsigned int)arg1 nodeVisitBlock:(id /* block */)arg2 edgeVisitBlock:(id /* block */)arg3;
- (unsigned int)edgeCount;
- (unsigned int)edgeNamespaceSize;
- (unsigned int)enumerateEdgesOfNode:(unsigned int)arg1 withBlock:(id /* block */)arg2;
- (unsigned int)enumerateEdgesWithBlock:(id /* block */)arg1;
- (unsigned int)enumerateMembersOfGroupNode:(unsigned int)arg1 withBlock:(id /* block */)arg2;
- (unsigned int)enumerateNodesWithBlock:(id /* block */)arg1;
- (bool)graphIs64bit;
- (id)initWithArchived:(id)arg1 version:(long long)arg2 options:(unsigned long long)arg3;
- (id)initWithNodes:(unsigned int)arg1;
- (id)initWithPlistRepresentation:(id)arg1;
- (id)initWithPlistRepresentation:(id)arg1 error:(id*)arg2;
- (void)invertEdges;
- (bool)inverted;
- (id)invertedGraph;
- (bool)isNodePresent:(unsigned int)arg1;
- (unsigned int)nodeCount;
- (unsigned int)nodeNamespaceSize;
- (unsigned int)parentGroupForNode:(unsigned int)arg1;
- (id)plistRepresentationWithOptions:(unsigned long long)arg1;
- (unsigned int)pointerSize;
- (void)removeMarkedEdges:(void*)arg1;
- (void)removeMarkedNodes:(void*)arg1;
- (id)renormalizedGraph;
- (void)setAdditionalProperties:(id)arg1;
- (void)setGraphCompatibilityVersion:(long long)arg1;
- (void)setGraphVersion:(long long)arg1;
- (void)setInverted:(bool)arg1;
- (id)subgraphWithMarkedNodes:(void*)arg1;
- (void)ungroupNode:(unsigned int)arg1;
- (void)withEdgeMarkingMap:(id /* block */)arg1;
- (void)withNodeMarkingMap:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
