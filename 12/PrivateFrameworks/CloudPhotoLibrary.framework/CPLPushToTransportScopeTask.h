<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPLPushToTransportScopeTask.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudPhotoLibrary.framework/CPLPushToTransportScopeTask.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary (3462.1.170)
 */

@interface CPLPushToTransportScopeTask : CPLEngineScopedTask {
    NSMutableDictionary * _additionalTransportScopes;
    CPLChangeBatch * _batchToCommit;
    <CPLEngineTransportCheckRecordsExistenceTask> * _checkExistenceTask;
    unsigned long long  _countOfPushedChanges;
    CPLBatchExtractionStrategy * _currentStrategy;
    NSString * _currentTaskKey;
    bool  _deferredCancel;
    unsigned long long  _estimatedCount;
    unsigned long long  _estimatedSize;
    CPLExtractedBatch * _extractedBatch;
    bool  _generatingSomeDerivatives;
    bool  _hasCachedShouldCheckResourcesAhead;
    bool  _hasDroppedSomeResources;
    bool  _hasPushedSomeChanges;
    bool  _highPriority;
    bool  _isUsingOverQuotaStrategy;
    unsigned long long  _lastReportedProgress;
    double  _latestApproximativeUploadRate;
    NSObject<OS_dispatch_queue> * _lock;
    bool  _mightPushSomeResources;
    NSError * _preparationError;
    CPLEnginePushRepository * _pushRepository;
    unsigned long long  _recordCount;
    NSMutableDictionary * _recordsCopyingDerivativesFromSource;
    NSMutableSet * _recordsNeedingToBeFullyFetched;
    NSMutableDictionary * _recordsToCheckForExistence;
    NSMutableDictionary * _recordsWithForwardCompatibilityCheck;
    NSDictionary * _recordsWithGeneratedResources;
    NSMutableDictionary * _recordsWithResourcesToLookAhead;
    NSMutableDictionary * _recordsWithSparseResources;
    NSMutableDictionary * _recordsWithUntrustedCloudCache;
    bool  _resetStrategy;
    CPLEngineScheduler * _scheduler;
    CPLEngineScopeStorage * _scopes;
    bool  _shouldCheckResourcesAhead;
    bool  _shouldResetExceedingQuotaOnSuccess;
    bool  _shouldSetupEstimatedSize;
    double  _startOfDerivativesGeneration;
    double  _startOfIteration;
    long long  _taskItem;
    NSDate * _taskStartDate;
    CPLEngineTransport * _transport;
    <CPLEngineTransportGroup> * _transportGroup;
    CPLChangeBatch * _uploadBatch;
    NSArray * _uploadResourceTasks;
    <CPLEngineTransportUploadBatchTask> * _uploadTask;
}

@property (nonatomic) bool highPriority;

- (void).cxx_destruct;
- (void)_checkForRecordExistence;
- (void)_clearUploadBatch;
- (void)_deleteGeneratedResourcesAfterError:(id)arg1;
- (void)_detectUpdatesNeedingExistenceCheck:(id)arg1;
- (void)_didFinishTaskWithKey:(id)arg1 error:(bool)arg2;
- (void)_didStartTaskWithKey:(id)arg1 recordCount:(unsigned long long)arg2;
- (bool)_discardUploadedExtractedBatchWithError:(id*)arg1;
- (void)_doOneIteration;
- (void)_generateDerivativesForNextRecord:(id)arg1;
- (void)_generateNeededDerivatives;
- (bool)_markUploadedTasksDidFinishWithError:(id)arg1 error:(id*)arg2;
- (void)_popNextBatchAndContinue;
- (bool)_prepareResourcesToUploadInBatch:(id)arg1 error:(id*)arg2;
- (void)_prepareUploadBatchWithTransaction:(id)arg1 andStore:(id)arg2;
- (void)_pushTaskDidFinishWithError:(id)arg1;
- (bool)_reenqueueExtractedBatchWithRejectedRecords:(id)arg1 error:(id*)arg2;
- (void)_requireExistenceCheckForRecords:(id)arg1;
- (bool)_shouldCheckResourcesAheadForChange:(id)arg1;
- (void)_updateChangeProperties:(id)arg1 withBaseChange:(id)arg2 withCopyProperty:(id /* block */)arg3;
- (void)_updateQuotaStrategyAfterSuccessInTransaction:(id)arg1;
- (void)_uploadBatch;
- (void)cancel;
- (void)cancel:(bool)arg1;
- (bool)highPriority;
- (id)initWithEngineLibrary:(id)arg1 clientCacheIdentifier:(id)arg2 scope:(id)arg3 transportScope:(id)arg4;
- (void)launch;
- (void)setHighPriority:(bool)arg1;
- (id)taskIdentifier;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
