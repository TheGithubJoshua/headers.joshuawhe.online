<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPLEngineScopeStorage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudPhotoLibrary.framework/CPLEngineScopeStorage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary (3462.1.170)
 */

@interface CPLEngineScopeStorage : CPLEngineStorage <CPLAbstractObject> {
    bool  _clearSomeScopeMightHaveToBePulledByClient;
    bool  _scheduleAScopeUpdate;
    bool  _scheduleATransportUpdate;
    bool  _schedulePullFromClient;
    bool  _schedulePullFromTransport;
    bool  _schedulePushHighPriorityToTransport;
    bool  _schedulePushToTransport;
    _CPLEngineScopeCache * _scopeCache;
    NSMutableSet * _scopeIdentifiersExcludedFromMingling;
    NSMutableSet * _scopeIdentifiersManuallyExcludedFromMingling;
    bool  _shouldChangeSyncManagerPriorityBoost;
    bool  _shouldResetGlobalsForMainScope;
    bool  _someScopeMightHaveToBePulledByClient;
    bool  _syncManagerPriorityBoost;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool hasStagedSyncAnchors;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_cacheScope:(id)arg1;
- (void)_checkSyncManagerPriorityBoost;
- (void)_clearScopeCache;
- (id)_createScopeFromScopeChange:(id)arg1 error:(id*)arg2;
- (void)_forceSyncManagerPriorityBoost;
- (bool)_handledDisabledFeaturesForScopeIfNecessary:(id)arg1 type:(long long)arg2 error:(id*)arg3;
- (unsigned long long)_indexOfCurrentClassForInitialQueriesForScope:(id)arg1;
- (bool)_resetCompleteSyncStateForScope:(id)arg1 error:(id*)arg2;
- (void)_resetGlobalsForMainScope;
- (bool)_resetLocalSyncStateForScope:(id)arg1 error:(id*)arg2;
- (id)_scopeChangeForScope:(id)arg1;
- (id)_scopeWithCloudIndex:(long long)arg1;
- (id)_scopeWithIdentifier:(id)arg1;
- (id)_scopeWithLocalIndex:(long long)arg1;
- (id)_scopeWithStableIndex:(long long)arg1;
- (id)allScopeIdentifiersIncludeInactive:(bool)arg1;
- (Class)classOfRecordsForInitialQueryForScope:(id)arg1;
- (bool)clearTransportGroupsForScope:(id)arg1 error:(id*)arg2;
- (bool)clientAcknowledegedScopeChanges:(id)arg1 error:(id*)arg2;
- (bool)commitSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (id)createScopeWithIdentifier:(id)arg1 scopeType:(long long)arg2 flags:(long long)arg3 transportScope:(id)arg4 error:(id*)arg5;
- (id)deleteDateForScope:(id)arg1;
- (bool)deleteScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)didDropSomeRecordsForScope:(id)arg1;
- (bool)disableInitialQueriesForScope:(id)arg1 error:(id*)arg2;
- (id)disabledDateForScope:(id)arg1;
- (bool)discardStagedSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (bool)discardStagedSyncAnchorWithScopeFilter:(id)arg1 error:(id*)arg2;
- (bool)doesScopeNeedToBePulledByClient:(id)arg1;
- (bool)doesScopeNeedToPullChangesFromTransport:(id)arg1;
- (bool)doesScopeNeedToPushChangesToTransport:(id)arg1;
- (bool)doesScopeNeedToUpdateTransport:(id)arg1;
- (id)downloadTransportGroupForScope:(id)arg1;
- (id)enumeratorForScopesIncludeInactive:(bool)arg1;
- (id)enumeratorForScopesNeedingToPullChangesFromTransport;
- (id)enumeratorForScopesNeedingToPushChangesToTransport;
- (id)enumeratorForScopesNeedingToPushHighPriorityChangesToTransport;
- (id)enumeratorForScopesNeedingToUpdateTransport;
- (id)enumeratorForScopesNeedingUpdateFromTransport;
- (unsigned long long)estimatedAssetCountForScope:(id)arg1;
- (unsigned long long)estimatedSizeForScope:(id)arg1;
- (void)excludeScopeIdentifierFromMingling:(id)arg1;
- (id)filterForExcludedScopeIdentifiers:(id)arg1;
- (id)filterForIncludedScopeIdentifiers:(id)arg1;
- (id)filterOnScopesAllowingMingling;
- (id)flagsForScope:(id)arg1;
- (void)forceExcludeScopeIdentifierFromMingling:(id)arg1;
- (void)forceIncludeScopeIdentifierInMingling:(id)arg1;
- (bool)hasFinishedAFullSyncForScope:(id)arg1;
- (bool)hasFinishedInitialSyncForScope:(id)arg1;
- (bool)hasScopeFetchedInitialSyncAnchor:(id)arg1;
- (bool)hasScopesNeedingToPullChangesFromTransport;
- (bool)hasScopesNeedingToPushChangesToTransport;
- (bool)hasScopesNeedingToPushHighPriorityChangesToTransport;
- (bool)hasScopesNeedingToUpdateTransport;
- (bool)hasStagedSyncAnchorForScope:(id)arg1;
- (bool)hasStagedSyncAnchors;
- (void)includeScopeIdentifierInMingling:(id)arg1;
- (long long)indexForCloudScopeIdentifier:(id)arg1;
- (long long)indexForLocalScopeIdentifier:(id)arg1;
- (id)initWithEngineStore:(id)arg1 name:(id)arg2;
- (struct NSData { Class x1; }*)initialSyncAnchorForScope:(id)arg1;
- (id)libraryInfoForScope:(id)arg1;
- (bool)markInitialQueryIsDoneForRecordsOfClass:(Class)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)openWithError:(id*)arg1;
- (id)primaryScope;
- (long long)pullFromTransportTaskForScope:(id)arg1;
- (long long)pushToTransportTaskForScope:(id)arg1;
- (id)remainingClassesForInitialQueryForScope:(id)arg1;
- (bool)resetCloudRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)resetCompleteSyncStateForScope:(id)arg1 error:(id*)arg2;
- (bool)resetCompleteSyncStateIncludingIDMappingForScope:(id)arg1 error:(id*)arg2;
- (bool)resetInitialSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (bool)resetLocalRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)resetLocalSyncStateForScope:(id)arg1 error:(id*)arg2;
- (bool)resetStableRecordsForScopeWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)resetSyncAnchorForScope:(id)arg1 error:(id*)arg2;
- (bool)resetSyncStateForScope:(id)arg1 error:(id*)arg2;
- (id)scopeChangesNeedingToBePulledByClientWithMaximumCount:(unsigned long long)arg1;
- (id)scopeIdentifierForCloudScopeIndex:(long long)arg1;
- (id)scopeIdentifierForLocalScopeIndex:(long long)arg1;
- (struct NSData { Class x1; }*)scopeListSyncAnchor;
- (unsigned long long)scopeType;
- (id)scopeWithIdentifier:(id)arg1;
- (id)scopedIdentifierForCloudScopedIdentifier:(id)arg1;
- (id)scopedIdentifierForLocalScopedIdentifier:(id)arg1;
- (bool)setAllScopesHasChangesToPullFromTransportWithError:(id*)arg1;
- (bool)setCloudScopeIndexOnChange:(id)arg1;
- (bool)setDeleteDate:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setDidDropSomeRecordsForScope:(id)arg1 error:(id*)arg2;
- (bool)setDisabledDate:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setHasFetchedInitialSyncAnchor:(bool)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setInitialSyncAnchor:(struct NSData { Class x1; }*)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setLibraryInfo:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setLocalScopeIndexOnChange:(id)arg1;
- (bool)setPullFromTransportExpirationInterval:(double)arg1 scope:(id)arg2 error:(id*)arg3;
- (bool)setScope:(id)arg1 hasCompletedPullFromTransportTask:(long long)arg2 error:(id*)arg3;
- (bool)setScope:(id)arg1 hasCompletedPushToTransportTask:(long long)arg2 error:(id*)arg3;
- (bool)setScope:(id)arg1 hasCompletedTransportUpdate:(long long)arg2 error:(id*)arg3;
- (bool)setScopeHasChangesToPullFromTransport:(id)arg1 error:(id*)arg2;
- (bool)setScopeHasChangesToPushToTransport:(id)arg1 error:(id*)arg2;
- (bool)setScopeNeedsToBePulledByClient:(id)arg1 error:(id*)arg2;
- (bool)setScopeNeedsToUpdateTransport:(id)arg1 error:(id*)arg2;
- (bool)setScopeNeedsUpdateFromTransport:(id)arg1 error:(id*)arg2;
- (bool)setScopeType:(long long)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setSyncAnchor:(struct NSData { Class x1; }*)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setTransportScope:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)setValue:(bool)arg1 forFlag:(long long)arg2 forScope:(id)arg3 error:(id*)arg4;
- (bool)setupAnchorResetTransportGroupForScope:(id)arg1 error:(id*)arg2;
- (bool)setupInitialSyncTransportGroupsForScope:(id)arg1 error:(id*)arg2;
- (bool)setupResetSyncTransportGroupForScope:(id)arg1 error:(id*)arg2;
- (long long)stableScopeIndexForScopeIdentifier:(id)arg1;
- (id)status;
- (id)statusDictionaryForScope:(id)arg1;
- (bool)storeEstimatedSize:(unsigned long long)arg1 estimatedAssetCount:(unsigned long long)arg2 forScope:(id)arg3 error:(id*)arg4;
- (bool)storeScopeListSyncAnchor:(struct NSData { Class x1; }*)arg1 error:(id*)arg2;
- (bool)storeSupportedFeatureVersionInLastSync:(unsigned long long)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)storeTransientSyncAnchor:(struct NSData { Class x1; }*)arg1 forScope:(id)arg2 error:(id*)arg3;
- (unsigned long long)supportedFeatureVersionInLastSyncForScope:(id)arg1;
- (bool)supportedFeatureVersionIsMostRecentForScope:(id)arg1;
- (struct NSData { Class x1; }*)syncAnchorForScope:(id)arg1;
- (struct NSData { Class x1; }*)transientSyncAnchorForScope:(id)arg1;
- (id)transportScopeForScope:(id)arg1;
- (long long)transportUpdateTaskForScope:(id)arg1;
- (bool)updateFlags:(id)arg1 forScope:(id)arg2 error:(id*)arg3;
- (bool)updateInitialSyncTransportGroupEstimatedSize:(unsigned long long)arg1 assetCount:(unsigned long long)arg2 forScope:(id)arg3 error:(id*)arg4;
- (bool)updateScopeWithChange:(id)arg1 error:(id*)arg2;
- (bool)upgradeScopesWithNewLibraryOption:(unsigned long long)arg1 error:(id*)arg2;
- (id)uploadTransportGroupForScope:(id)arg1;
- (id)validCloudScopeIndexes;
- (id)validLocalScopeIndexes;
- (bool)valueForFlag:(long long)arg1 forScope:(id)arg2;
- (void)writeTransactionDidFail;
- (void)writeTransactionDidSucceed;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
