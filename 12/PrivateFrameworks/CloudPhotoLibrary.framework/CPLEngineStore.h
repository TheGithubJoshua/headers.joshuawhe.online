<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPLEngineStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudPhotoLibrary.framework/CPLEngineStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary (3462.1.170)
 */

@interface CPLEngineStore : NSObject <CPLAbstractObject, CPLEngineComponent> {
    bool  _batchedTransactionDequeueIsScheduled;
    NSMutableArray * _batchedTransactions;
    NSObject<OS_dispatch_queue> * _batchedTransactionsQueue;
    CPLEngineScopeCleanupTasks * _cleanupTasks;
    CPLEngineClientCache * _clientCache;
    CPLEngineCloudCache * _cloudCache;
    CPLEngineDerivativesCache * _derivativesCache;
    NSArray * _disabledFeatures;
    bool  _discardUnacknowledgedBatchOnTransactionFail;
    bool  _dontDelayChangeSessionUpdate;
    CPLEngineResourceDownloadQueue * _downloadQueue;
    CPLEngineLibrary * _engineLibrary;
    bool  _hasUpdatedDisabledFeatures;
    CPLEngineIDMapping * _idMapping;
    bool  _isUpdatingDisabledFeatures;
    NSSet * _lastInvalidRecordScopedIdentifiers;
    NSDate * _lastInvalidRecordsDate;
    CPLEngineOutgoingResources * _outgoingResources;
    CPLResetTracker * _pendingTracker;
    double  _pendingUpdateInterval;
    NSObject<OS_dispatch_queue> * _pendingUpdateQueue;
    NSObject<OS_dispatch_source> * _pendingUpdateTimer;
    CPLPlatformObject * _platformObject;
    CPLEngineChangePipe * _pullQueue;
    CPLEnginePushRepository * _pushRepository;
    CPLEngineQuarantinedRecords * _quarantinedRecords;
    CPLEngineRemappedDeletes * _remappedDeletes;
    NSMutableArray * _resetEvents;
    NSURL * _resetEventsURL;
    CPLEngineResourceStorage * _resourceStorage;
    bool  _scheduleDisabledFeatureUpdateOnWriteSuccess;
    bool  _schedulePendingUpdateApplyOnWriteSuccess;
    bool  _schedulePullFromClient;
    bool  _scheduleSetupOnWriteSuccess;
    CPLEngineScopeStorage * _scopes;
    bool  _shouldEnableScopeListSyncOnWriteSuccess;
    bool  _shouldSyncScopeList;
    NSObject<OS_dispatch_queue> * _shouldSyncScopeListQueue;
    bool  _shouldTriggerCompleteResetSyncAfterDisabledFeaturesUpdate;
    bool  _shouldTriggerResetSyncAfterDisabledFeaturesUpdate;
    unsigned long long  _state;
    CPLEngineStatusCenter * _statusCenter;
    NSHashTable * _storages;
    CPLEngineTransientRepository * _transientPullRepository;
    CPLChangeBatch * _unacknowledgedBatch;
    bool  _unschedulePendingUpdateApplyOnWriteSuccess;
}

@property (nonatomic, readonly) CPLEngineScopeCleanupTasks *cleanupTasks;
@property (nonatomic, readonly) CPLEngineClientCache *clientCache;
@property (nonatomic, readonly) CPLEngineCloudCache *cloudCache;
@property (nonatomic, readonly) id corruptionInfo;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) CPLEngineDerivativesCache *derivativesCache;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSArray *disabledFeatures;
@property (nonatomic, readonly) CPLEngineResourceDownloadQueue *downloadQueue;
@property (nonatomic, readonly) CPLEngineLibrary *engineLibrary;
@property (nonatomic, readonly) bool hasPendingResetSync;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) CPLEngineIDMapping *idMapping;
@property (readonly) NSDate *libraryCreationDate;
@property (nonatomic, readonly) CPLEngineOutgoingResources *outgoingResources;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (nonatomic, readonly) CPLEngineChangePipe *pullQueue;
@property (nonatomic, readonly) CPLEnginePushRepository *pushRepository;
@property (nonatomic, readonly) bool pushRepositoryIsFull;
@property (nonatomic, readonly) CPLEngineQuarantinedRecords *quarantinedRecords;
@property (nonatomic, readonly) CPLEngineRemappedDeletes *remappedDeletes;
@property (nonatomic, readonly) CPLEngineResourceStorage *resourceStorage;
@property (nonatomic, readonly) CPLEngineScopeStorage *scopes;
@property (nonatomic, readonly) bool shouldGenerateDerivatives;
@property (readonly) bool shouldSyncScopeList;
@property (nonatomic, readonly) bool shouldUpdateDisabledFeatures;
@property (nonatomic) unsigned long long state;
@property (nonatomic, readonly) CPLEngineStatusCenter *statusCenter;
@property (nonatomic, readonly) NSArray *storages;
@property (readonly) Class superclass;
@property (nonatomic, readonly) CPLEngineTransientRepository *transientPullRepository;

+ (id)platformImplementationProtocol;
+ (id)stateDescriptionForState:(unsigned long long)arg1;
+ (id)storageNames;

- (void).cxx_destruct;
- (bool)_applyPendingUpdate:(id)arg1 error:(id*)arg2;
- (bool)_canRead;
- (bool)_canWrite;
- (void)_commitWriteTransaction:(id)arg1 commitError:(id)arg2;
- (id)_currentTransaction;
- (void)_loadResetEvents;
- (void)_performTransaction:(id)arg1 withBlock:(id /* block */)arg2;
- (void)_reallyPerformBatchedTransactionsLocked;
- (void)_reallySchedulePendingUpdateApply;
- (void)_reallyUnschedulePendingUpdateApply;
- (void)_removeTransactionOnCurrentThread:(id)arg1;
- (bool)_resetCompleteSyncStateIncludingIDMappingWithCause:(id)arg1 scope:(id)arg2 error:(id*)arg3;
- (bool)_resetCompleteSyncStateWithCause:(id)arg1 scope:(id)arg2 error:(id*)arg3;
- (id)_resetEventsDescriptions;
- (bool)_resetGlobalStateWithError:(id*)arg1;
- (bool)_resetLocalSyncStateWithCause:(id)arg1 scope:(id)arg2 date:(id)arg3 error:(id*)arg4;
- (bool)_resetSyncAnchorWithCause:(id)arg1 scope:(id)arg2 error:(id*)arg3;
- (void)_scheduleBatchedTransactionsLocked;
- (void)_schedulePendingUpdateApply;
- (void)_setTransactionOnCurrentThread:(id)arg1;
- (bool)_shouldSyncScopeListWithOptions:(unsigned long long)arg1;
- (void)_storeResetEvent:(id)arg1 scopeIdentifier:(id)arg2 date:(id)arg3 cause:(id)arg4;
- (void)_storeResetEvent:(id)arg1 scopeIdentifier:(id)arg2 date:(id)arg3 pending:(bool)arg4 cause:(id)arg5;
- (id)_storedDisabledFeatures;
- (void)_unschedulePendingUpdateApply;
- (void)_updateShouldSyncScopeList:(bool)arg1;
- (bool)applyPreviousChangeSessionUpdateWithExpectedLibraryVersion:(id)arg1 error:(id*)arg2;
- (void)assertCanRead;
- (void)assertCanWrite;
- (bool)beginChangeSession:(id)arg1 withLibraryVersion:(id)arg2 resetTracker:(id)arg3 error:(id*)arg4;
- (bool)checkExpectedLibraryVersion:(id)arg1 error:(id*)arg2;
- (id)cleanupTasks;
- (id)clientCache;
- (id)clientCacheIdentifier;
- (void)closeAndDeactivate:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)cloudCache;
- (id)componentName;
- (id)corruptionInfo;
- (id)createNewLibraryVersion;
- (void)dealloc;
- (id)derivativesCache;
- (id)description;
- (id)disabledFeatures;
- (id)downloadQueue;
- (void)dropUnacknowledgedBatch;
- (id)engineLibrary;
- (bool)forceApplyPendingChangeSessionUpdateWithError:(id*)arg1;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)arg1;
- (void)getStatusWithCompletionHandler:(id /* block */)arg1;
- (bool)hasPendingResetSync;
- (id)idMapping;
- (id)initWithEngineLibrary:(id)arg1;
- (bool)isClientInSyncWithClientCache;
- (bool)isFeatureDisabled:(id)arg1;
- (void)keepUnacknowledgedBatch:(id)arg1;
- (id)lastQuarantineCountReportDate;
- (id)libraryCreationDate;
- (unsigned long long)libraryOptions;
- (id)libraryVersion;
- (void)noteInvalidRecordScopedIdentifiersInPushSession:(id)arg1;
- (void)noteOtherResetEvent:(id)arg1 cause:(id)arg2;
- (void)noteResetSyncFinished;
- (void)openWithCompletionHandler:(id /* block */)arg1;
- (id)outgoingResources;
- (void)performBarrier;
- (void)performBatchedWriteTransactionBarrier;
- (void)performBatchedWriteTransactionWithBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (id)performReadTransactionWithBlock:(id /* block */)arg1;
- (id)performWriteTransactionWithBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (id)platformObject;
- (id)pullQueue;
- (id)pushRepository;
- (bool)pushRepositoryIsFull;
- (id)quarantinedRecords;
- (void)registerStorage:(id)arg1;
- (id)remappedDeletes;
- (bool)resetCompleteSyncStateIncludingIDMappingWithCause:(id)arg1 error:(id*)arg2;
- (bool)resetCompleteSyncStateWithCause:(id)arg1 error:(id*)arg2;
- (bool)resetLocalSyncStateWithCause:(id)arg1 date:(id)arg2 error:(id*)arg3;
- (bool)resetLocalSyncStateWithCause:(id)arg1 error:(id*)arg2;
- (bool)resetSyncAnchorWithCause:(id)arg1 error:(id*)arg2;
- (id)resourceStorage;
- (id)scopes;
- (bool)setShouldUpdateDisabledFeaturesWithError:(id*)arg1;
- (void)setState:(unsigned long long)arg1;
- (bool)shouldGenerateDerivatives;
- (bool)shouldSyncScopeList;
- (bool)shouldUpdateDisabledFeatures;
- (unsigned long long)state;
- (id)statusCenter;
- (id)storages;
- (bool)storeChangeSessionUpdate:(id)arg1 error:(id*)arg2;
- (bool)storeClientIsInSyncWithClientCacheWithError:(id*)arg1;
- (bool)storeLastQuarantineCountReportDate:(id)arg1 error:(id*)arg2;
- (bool)storeLibraryVersion:(id)arg1 withError:(id*)arg2;
- (bool)storeUserIdentifier:(id)arg1 error:(id*)arg2;
- (id)transientPullRepository;
- (id)unacknowledgedChangeWithLocalScopedIdentifier:(id)arg1;
- (bool)updateDisabledFeatures:(id)arg1 didReset:(bool*)arg2 error:(id*)arg3;
- (bool)updateLibraryOptions:(unsigned long long)arg1 error:(id*)arg2;
- (id)userIdentifier;
- (void)writeTransactionDidFail;
- (void)writeTransactionDidSucceed;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
