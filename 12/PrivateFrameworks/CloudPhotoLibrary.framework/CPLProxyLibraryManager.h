<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPLProxyLibraryManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudPhotoLibrary.framework/CPLProxyLibraryManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary (3462.1.170)
 */

@interface CPLProxyLibraryManager : CPLPlatformObject <CPLClientLibraryManagerProtocol, CPLLibraryManagerImplementation, NSXPCConnectionDelegate> {
    NSXPCConnection * _connection;
    bool  _diagnosticsEnabled;
    unsigned long long  _disablingMinglingCount;
    NSCountedSet * _disablingReasons;
    NSMutableDictionary * _downloadTasks;
    NSMutableDictionary * _forceSyncTasks;
    unsigned long long  _foregroundCalls;
    NSMutableDictionary * _inMemoryDownloadTasks;
    int  _notifyToken;
    int  _openingStatus;
    NSMutableDictionary * _outstandingInvocations;
    unsigned long long  _outstandingInvocationsCount;
    NSMutableArray * _pendingBlocksAfterOpening;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _significantWorkCalls;
    NSMutableDictionary * _syncOutstandingInvocations;
    unsigned long long  _syncOutstandingInvocationsCount;
    NSMutableDictionary * _uploadTasks;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *queue;
@property (readonly) Class superclass;

+ (id)clientProtocolInterface;
+ (id)daemonProtocolInterface;

- (void).cxx_destruct;
- (void)_dispatchBlockWhenOpen:(id /* block */)arg1;
- (void)_dispatchFailedDownloadTaskForResource:(id)arg1 highPriority:(bool)arg2 proposedTaskIdentifier:(id)arg3 withError:(id)arg4 withCompletionHandler:(id /* block */)arg5;
- (void)_dispatchFailedForceSyncTaskForScopeIdentifiers:(id)arg1 withError:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (void)_dispatchFailedInMemoryDownloadTaskForResource:(id)arg1 withError:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (void)_invokeOutstandingInvocationsWithTaskIdentifier:(id)arg1;
- (void)_invokeSyncOutstandingInvocationsWithTaskIdentifier:(id)arg1;
- (void)_reallyOpenWithCompletionHandler:(id /* block */)arg1;
- (bool)_setStatusFromDictionary:(id)arg1;
- (id)_uploadTaskDidStartForResource:(id)arg1 withTaskIdentifier:(id)arg2;
- (void)acceptMomentShare:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)acknowledgeChangedStatuses:(id)arg1;
- (void)addInfoToLog:(id)arg1;
- (void)addStatusChangesForRecordsWithScopedIdentifiers:(id)arg1 persist:(bool)arg2;
- (void)backgroundDownloadDidFailForResource:(id)arg1;
- (void)backgroundDownloadDidFinishForResource:(id)arg1;
- (void)barrier;
- (void)beginDownloadForResource:(id)arg1 clientBundleID:(id)arg2 highPriority:(bool)arg3 proposedTaskIdentifier:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)beginInMemoryDownloadOfResource:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)blockEngineElement:(id)arg1;
- (void)boostPriorityForScopeWithIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)cancelSyncTask:(id)arg1;
- (void)cancelTask:(id)arg1;
- (void)checkHasBackgroundDownloadOperationsWithCompletionHandler:(id /* block */)arg1;
- (void)closeWithCompletionHandler:(id /* block */)arg1;
- (void)cloudCacheGetDescriptionForRecordWithScopedIdentifier:(id)arg1 related:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)compactFileCacheWithCompletionHandler:(id /* block */)arg1;
- (void)connection:(id)arg1 handleInvocation:(id)arg2 isReply:(bool)arg3;
- (void)deactivateWithCompletionHandler:(id /* block */)arg1;
- (void)dealloc;
- (void)deleteResources:(id)arg1 checkServerIfNecessary:(bool)arg2 completionHandler:(id /* block */)arg3;
- (bool)diagnosticsEnabled;
- (void)disableMainScopeWithCompletionHandler:(id /* block */)arg1;
- (void)disableMingling;
- (void)disableSynchronizationWithReason:(id)arg1;
- (void)dispatchBlockWhenLibraryIsOpen:(id /* block */)arg1;
- (void)downloadDidFinishForResourceTransferTask:(id)arg1 finalResource:(id)arg2 withError:(id)arg3;
- (void)downloadDidProgress:(float)arg1 forResourceTransferTask:(id)arg2;
- (void)downloadDidStartForResourceTransferTask:(id)arg1;
- (void)enableMainScopeWithCompletionHandler:(id /* block */)arg1;
- (void)enableMingling;
- (void)enableSynchronizationWithReason:(id)arg1;
- (void)fetchMomentShareFromShareURL:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)forceSyncDidFinishForTask:(id)arg1 withErrors:(id)arg2;
- (void)forceSynchronizingScopeWithIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getChangedStatusesWithCompletionHandler:(id /* block */)arg1;
- (void)getCloudCacheForRecordWithScopedIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getListOfComponentsWithCompletionHandler:(id /* block */)arg1;
- (void)getMappedScopedIdentifiersForScopedIdentifiers:(id)arg1 inAreLocalIdentifiers:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)getResourcesForItemWithScopedIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getStatusArrayForComponents:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getStatusForComponents:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getStatusForRecordsWithScopedIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getStatusesForScopesWithIdentifiers:(id)arg1 includeStorages:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)getSystemBudgetsWithCompletionHandler:(id /* block */)arg1;
- (void)inMemoryDownloadDidFinishForResourceTransferTask:(id)arg1 data:(id)arg2 withError:(id)arg3;
- (id)initWithAbstractObject:(id)arg1;
- (void)libraryManagerDidUpdateSizeOfResourcesToUploadToSize:(unsigned long long)arg1 sizeOfOriginalResourcesToUpload:(unsigned long long)arg2 numberOfImages:(unsigned long long)arg3 numberOfVideos:(unsigned long long)arg4 numberOfOtherItems:(unsigned long long)arg5;
- (void)libraryManagerDidUpdateStatusWithProperties:(id)arg1;
- (void)libraryManagerHasChangesToPull;
- (void)libraryManagerHasStatusChanges;
- (void)noteClientIsBeginningSignificantWork;
- (void)noteClientIsEndingSignificantWork;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForeground;
- (void)noteClientReceivedNotificationOfServerChanges;
- (void)openWithCompletionHandler:(id /* block */)arg1;
- (id)proxyWithErrorHandler:(id /* block */)arg1;
- (void)publishMomentShare:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)publishResource:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)queryUserIdentitiesWithParticipants:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)queue;
- (void)rampingRequestForResourceType:(unsigned long long)arg1 numRequested:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (void)reportMiscInformation:(id)arg1;
- (void)reportSetting:(id)arg1 hasBeenSetToValue:(id)arg2;
- (void)resetCacheWithOption:(unsigned long long)arg1 reason:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)resetStatus;
- (void)setDiagnosticsEnabled:(bool)arg1;
- (void)setShouldOverride:(bool)arg1 forSystemBudgets:(unsigned long long)arg2;
- (void)startSyncSession;
- (void)unblockEngineElement:(id)arg1;
- (void)unblockEngineElementOnce:(id)arg1;
- (void)uploadDidStartForResource:(id)arg1 withResourceTransferTask:(id)arg2;
- (void)uploadOfResource:(id)arg1 didFinishForResourceTransferTask:(id)arg2 withError:(id)arg3;
- (void)uploadOfResource:(id)arg1 didProgress:(float)arg2 forResourceTransferTask:(id)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
