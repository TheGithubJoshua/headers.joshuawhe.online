<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CPLEngineScheduler.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudPhotoLibrary.framework/CPLEngineScheduler.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary (3462.1.170)
 */

@interface CPLEngineScheduler : NSObject <CPLAbstractObject, CPLEngineComponent> {
    NSMutableSet * _blockWaiters;
    NSMutableDictionary * _blockedElements;
    NSCountedSet * _blockingElements;
    NSObject<OS_dispatch_queue> * _blockingLock;
    unsigned long long  _currentRequestGeneration;
    unsigned long long  _currentSyncState;
    bool  _delayedFirstSyncBecauseOfRapidLaunch;
    bool  _didWriteFirstSyncMarker;
    unsigned long long  _disablingMinglingCount;
    NSCountedSet * _disablingReasons;
    CPLEngineLibrary * _engineLibrary;
    unsigned long long  _foregroundCalls;
    double  _intervalForRetry;
    unsigned long long  _lastRequestGeneration;
    NSDate * _lastSyncSessionDateCausedByForeground;
    bool  _needsToUpdateScopeList;
    NSDate * _nextScheduledDate;
    bool  _opened;
    CPLPlatformObject * _platformObject;
    bool  _protectAgainstFastRelaunch;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _requiredFirstState;
    id /* block */  _requiredStateObserverBlock;
    id /* block */  _shouldBackOffOnErrorBlock;
    bool  _shouldNoteServerHasChanges;
    unsigned long long  _significantWorkCalls;
    NSDate * _unavailabilityLimitDate;
    NSCountedSet * _unblockOnceElements;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) CPLEngineLibrary *engineLibrary;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) CPLPlatformObject *platformObject;
@property (nonatomic, readonly) unsigned long long requiredState;
@property (nonatomic, copy) id /* block */ requiredStateObserverBlock;
@property (nonatomic, copy) id /* block */ shouldBackOffOnErrorBlock;
@property (readonly) Class superclass;

+ (id)platformImplementationProtocol;
+ (id)validElements;

- (void).cxx_destruct;
- (void)_backOff;
- (void)_disableFastRelaunchProtection;
- (void)_disableRetryAfterLocked;
- (void)_disableSynchronizationWithReasonLocked:(id)arg1;
- (void)_enableSynchronizationWithReasonLocked:(id)arg1;
- (void)_handleResetAnchorWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_handleResetClientCacheWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_handleResetCloudCacheWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_handleResetGlobalAnchorWithError:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_minimalDateForFirstSync;
- (void)_noteServerIsUnavailableWithErrorLocked:(id)arg1;
- (void)_noteSyncSessionNeededFromState:(unsigned long long)arg1;
- (id)_pathToFirstSynchronizationMarker;
- (void)_reallyNoteServerHasChangesLocked;
- (void)_reallyStartSyncSession;
- (void)_reallyUnscheduleSession;
- (void)_resetFirstSynchronizationMarker;
- (void)_scheduleNextSyncSession;
- (void)_setRequiredFirstState:(unsigned long long)arg1;
- (void)_startRequiredSyncSession;
- (void)_startSyncSessionWithMinimalPhase:(unsigned long long)arg1;
- (bool)_syncSessionIsPossible;
- (void)_unscheduleNextSyncSession;
- (void)_writeFirstSynchronizationMarker;
- (void)blockEngineElement:(id)arg1;
- (void)closeAndDeactivate:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)componentName;
- (void)disableMingling;
- (void)disableSynchronizationWithReason:(id)arg1;
- (void)enableMingling;
- (void)enableSynchronizationWithReason:(id)arg1;
- (id)engineLibrary;
- (void)getStatusDictionaryWithCompletionHandler:(id /* block */)arg1;
- (void)getStatusWithCompletionHandler:(id /* block */)arg1;
- (id)initWithEngineLibrary:(id)arg1;
- (bool)isClientInForeground;
- (bool)isMinglingEnabled;
- (bool)isSynchronizationDisabledWithReasonError:(id*)arg1;
- (void)kickOffSyncSession;
- (void)noteClientIsBeginningSignificantWork;
- (void)noteClientIsEndingSignificantWork;
- (void)noteClientIsInBackground;
- (void)noteClientIsInForeground;
- (void)noteClientIsInSyncWithClientCache;
- (void)noteClientIsNotInSyncWithClientCache;
- (void)noteClientNeedsToPull;
- (void)noteNetworkStateDidChange;
- (void)noteResourceDownloadQueueIsFull;
- (void)noteScopeListNeedsUpdate;
- (void)noteScopeNeedsToPullFromTransport;
- (void)noteScopeNeedsToPushHighPriorityToTransport;
- (void)noteScopeNeedsToPushToTransport;
- (void)noteScopeNeedsUpdate;
- (void)noteServerHasChanges;
- (void)noteServerIsUnavailableWithError:(id)arg1;
- (void)noteStoreNeedsCleanup;
- (void)noteStoreNeedsSetup;
- (void)noteStoreNeedsToUpdateDisabledFeatures;
- (void)noteSyncSessionFailedDuringPhase:(unsigned long long)arg1 withError:(id)arg2;
- (void)noteSyncSessionStateWillBeAttempted:(unsigned long long)arg1;
- (void)noteSyncSessionSucceeded;
- (void)noteTransportNeedsUpdate;
- (void)openWithCompletionHandler:(id /* block */)arg1;
- (id)platformObject;
- (unsigned long long)requiredState;
- (id /* block */)requiredStateObserverBlock;
- (void)resetBackoffInterval;
- (void)setRequiredStateObserverBlock:(id /* block */)arg1;
- (void)setShouldBackOffOnErrorBlock:(id /* block */)arg1;
- (id /* block */)shouldBackOffOnErrorBlock;
- (void)startRequiredSyncSessionNow;
- (void)unblockEngineElement:(id)arg1;
- (void)unblockEngineElementOnce:(id)arg1;
- (void)waitForEngineElementToBeBlocked:(id)arg1;
- (void)willRunEngineElement:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
