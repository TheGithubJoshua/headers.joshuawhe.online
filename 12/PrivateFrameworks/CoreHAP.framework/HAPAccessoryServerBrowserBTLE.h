<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HAPAccessoryServerBrowserBTLE.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreHAP.framework/HAPAccessoryServerBrowserBTLE.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP (484.7.17.1)
 */

@interface HAPAccessoryServerBrowserBTLE : HAPAccessoryServerBrowser <CBCentralManagerDelegate, HAPAccessoryServerBrowserWiProxBTLEDelegate, HMFLogging> {
    CBCentralManager * _centralManager;
    CBConnectionsObserver * _connectionsObserver;
    <HAPAccessoryServerBrowserBTLEDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    NSMapTable * _discoveredPeripheralsWithAccessories;
    HAPAccessoryServerBrowserWiProxBTLE * _hapWiProxBLEBrowser;
    NSMapTable * _identifersWithReachabilityScanTuples;
    NSMutableSet * _pairedAccessoryIdentifiers;
    bool  _performingGeneralScan;
    NSMutableArray * _peripheralsPendingConnection;
    NSMutableOrderedSet * _peripheralsWithConnectionRequests;
    NSMutableArray * _powerOnCentralManagerCompletions;
    unsigned long long  _qosLimits;
    id /* block */  _reachabilityCompletion;
    NSMapTable * _recentlySeenPairedPeripherals;
    long long  _scanState;
    NSMutableArray * _targetedScanAccessoryIdentifiers;
    NSObject<OS_dispatch_source> * _targetedScanTimer;
}

@property (nonatomic, retain) CBCentralManager *centralManager;
@property (nonatomic, retain) CBConnectionsObserver *connectionsObserver;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <HAPAccessoryServerBrowserBTLEDelegate> *delegate;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMapTable *discoveredPeripheralsWithAccessories;
@property (nonatomic, retain) HAPAccessoryServerBrowserWiProxBTLE *hapWiProxBLEBrowser;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSMapTable *identifersWithReachabilityScanTuples;
@property (retain) NSMutableSet *pairedAccessoryIdentifiers;
@property (getter=isPerformingGeneralScan, nonatomic) bool performingGeneralScan;
@property (nonatomic, retain) NSMutableArray *peripheralsPendingConnection;
@property (nonatomic, retain) NSMutableOrderedSet *peripheralsWithConnectionRequests;
@property (nonatomic, retain) NSMutableArray *powerOnCentralManagerCompletions;
@property (nonatomic) unsigned long long qosLimits;
@property (nonatomic, copy) id /* block */ reachabilityCompletion;
@property (nonatomic, retain) NSMapTable *recentlySeenPairedPeripherals;
@property (nonatomic) long long scanState;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMutableArray *targetedScanAccessoryIdentifiers;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *targetedScanTimer;

+ (id)logCategory;

- (void).cxx_destruct;
- (void)_addToPendingConnections:(id)arg1;
- (id)_cachedCharacteristicForInstanceID:(id)arg1 identifier:(id)arg2;
- (void)_callPowerOnCompletionsWithError:(id)arg1;
- (void)_connectHAPPeripheralWhenAllowed:(id)arg1;
- (void)_connectPendingConnections;
- (void)_createHAPAccessoryAndNotifyDelegateWithPeripheral:(id)arg1 name:(id)arg2 pairingUsername:(id)arg3 statusFlags:(id)arg4 stateNumber:(id)arg5 stateChanged:(bool)arg6 connectReason:(unsigned char)arg7 configNumber:(id)arg8 category:(id)arg9 connectionIdleTime:(unsigned char)arg10 format:(unsigned long long)arg11 setupHash:(id)arg12 encryptedPayload:(id)arg13;
- (bool)_delegateRespondsToSelector:(SEL)arg1;
- (void)_didDiscoverPeripheral:(id)arg1 accessoryName:(id)arg2 pairingIdentifier:(id)arg3 format:(unsigned long long)arg4 statusFlags:(id)arg5 stateNumber:(id)arg6 category:(id)arg7 configNumber:(id)arg8 setupHash:(id)arg9 encryptedPayload:(id)arg10;
- (void)_disconectFromHAPPeripheral:(id)arg1;
- (void)_discoverAccessoryServerWithIdentifier:(id)arg1;
- (void)_forgetPairedAccesoryWithIdentifier:(id)arg1;
- (id)_getDiscoveredPeripheralMatchingIdentifier:(id)arg1;
- (void)_handleTargetedScanTimeout;
- (bool)_hasPairedAccessoriesOfType:(unsigned long long)arg1;
- (bool)_hasRecentlySeenAccessoriesWithIdentifiers:(id)arg1;
- (void)_matchAccessoryServerWithSetupID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_notifyDelegatesOfRemovedAccessoryServer:(id)arg1 error:(id)arg2;
- (unsigned long long)_parseAdvertisementData:(id)arg1 forPeripheral:(id)arg2 name:(id*)arg3 pairingUsername:(id*)arg4 statusFlags:(id*)arg5 stateNumber:(id*)arg6 category:(id*)arg7 configNumber:(id*)arg8 setupHash:(id*)arg9;
- (void)_performTargetedScanForAccessoryWithIdentifier:(id)arg1;
- (void)_performTimedConnectionRequestForIdentifier:(id)arg1;
- (void)_performTimedScanForIdentifiers:(id)arg1 workQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)_powerOnCentralManagerWithCompletion:(id /* block */)arg1;
- (void)_probeReachabilityForAccessoryServersWithIdentifiers:(id)arg1 onQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)_removeFromPendingConnections:(id)arg1;
- (void)_removeIdentifiersForReachabilityScan;
- (void)_reportReachabilityForAccessoryWithIdentifier:(id)arg1;
- (bool)_shouldCreateHAPAccessoryServerWithIdentifier:(id)arg1 statusFlags:(id)arg2 stateNumber:(id)arg3 category:(id)arg4 configNumber:(id)arg5 forPeripheral:(id)arg6 advertisementFormat:(unsigned long long)arg7 setupHash:(id)arg8 stateChanged:(bool*)arg9 connectReason:(unsigned char*)arg10;
- (void)_startDiscoveringAccessoryServers;
- (void)_startScanningForPairingPeers;
- (void)_startScanningForReachability:(id)arg1;
- (void)_stopActiveScan;
- (void)_updateTargetedScanTimer;
- (void)accessoryServerBrowserBTLE:(id)arg1 didDiscoverHAPPeripheral:(id)arg2 accessoryName:(id)arg3 pairingIdentifier:(id)arg4 advertisementFormat:(unsigned long long)arg5 statusFlags:(id)arg6 stateNumber:(id)arg7 category:(id)arg8 configurationNumber:(id)arg9 setupHash:(id)arg10 encryptedPayload:(id)arg11;
- (id)cachedAccessoryForIdentifier:(id)arg1;
- (id)centralManager;
- (void)centralManager:(id)arg1 didConnectPeripheral:(id)arg2;
- (void)centralManager:(id)arg1 didDisconnectPeripheral:(id)arg2 error:(id)arg3;
- (void)centralManager:(id)arg1 didDiscoverPeripheral:(id)arg2 advertisementData:(id)arg3 RSSI:(id)arg4;
- (void)centralManager:(id)arg1 didFailToConnectPeripheral:(id)arg2 error:(id)arg3;
- (void)centralManagerDidUpdateState:(id)arg1;
- (void)configureAccessoryWithIdentifier:(id)arg1 trackState:(bool)arg2 connectionPriority:(unsigned long long)arg3;
- (void)configureBTLEQoSLimits:(unsigned long long)arg1;
- (void)connectToBTLEAccessoryServer:(id)arg1;
- (void)connectedHAPPeripheral:(id)arg1;
- (id)connectionsObserver;
- (id)delegate;
- (id)delegateQueue;
- (void)disconnectFromBTLEAccessoryServer:(id)arg1;
- (void)disconnectedHAPPeripheral:(id)arg1 error:(id)arg2;
- (void)discoverAccessoryServerWithIdentifier:(id)arg1;
- (id)discoveredPeripheralsWithAccessories;
- (void)failedToConnectHAPPeripheral:(id)arg1 error:(id)arg2;
- (void)forgetPairedAccesoryWithIdentifier:(id)arg1;
- (id)hapCharacteristicsForEncryptedPayload:(id)arg1 identifier:(id)arg2 shouldConnect:(bool*)arg3;
- (id)hapWiProxBLEBrowser;
- (id)identifersWithReachabilityScanTuples;
- (id)initWithQueue:(id)arg1;
- (bool)isPerformingGeneralScan;
- (long long)linkType;
- (void)markNotifyingCharacteristicUpdatedForIdentifier:(id)arg1;
- (void)matchAccessoryServerWithSetupID:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)pairedAccessoryIdentifiers;
- (void)pauseScans;
- (id)peripheralsPendingConnection;
- (id)peripheralsWithConnectionRequests;
- (id)powerOnCentralManagerCompletions;
- (void)probeReachabilityForAccessoryServersWithIdentifiers:(id)arg1 onQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (unsigned long long)qosLimits;
- (id /* block */)reachabilityCompletion;
- (id)recentlySeenPairedPeripherals;
- (void)registerPairedAccessoryWithIdentifier:(id)arg1;
- (void)removeCachedAccessoryWithIdentifier:(id)arg1;
- (void)resetLastSeenForAccessoryServersWithIdentifers:(id)arg1;
- (void)retrieveCurrentStateForIdentifer:(id)arg1 onQueue:(id)arg2 withCompletion:(id /* block */)arg3;
- (void)saveCacheToDisk:(id)arg1;
- (long long)scanState;
- (void)setCentralManager:(id)arg1;
- (void)setConnectionLatency:(long long)arg1 forPeripheral:(id)arg2;
- (void)setConnectionsObserver:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setDelegateQueue:(id)arg1;
- (void)setDiscoveredPeripheralsWithAccessories:(id)arg1;
- (void)setHapWiProxBLEBrowser:(id)arg1;
- (void)setIdentifersWithReachabilityScanTuples:(id)arg1;
- (void)setPairedAccessoryIdentifiers:(id)arg1;
- (void)setPerformingGeneralScan:(bool)arg1;
- (void)setPeripheralsPendingConnection:(id)arg1;
- (void)setPeripheralsWithConnectionRequests:(id)arg1;
- (void)setPowerOnCentralManagerCompletions:(id)arg1;
- (void)setQosLimits:(unsigned long long)arg1;
- (void)setReachabilityCompletion:(id /* block */)arg1;
- (void)setReachabilityCompletionHandler:(id /* block */)arg1;
- (void)setRecentlySeenPairedPeripherals:(id)arg1;
- (void)setScanState:(long long)arg1;
- (void)setTargetedScanAccessoryIdentifiers:(id)arg1;
- (void)setTargetedScanTimer:(id)arg1;
- (void)startDiscoveringAccessoryServers;
- (void)stopDiscoveringAccessoryServers;
- (void)stopTrackingBTLEAccessoriesWithIdentifiers:(id)arg1;
- (id)targetedScanAccessoryIdentifiers;
- (id)targetedScanTimer;
- (void)updateBroadcastKeyForIdentifer:(id)arg1 key:(id)arg2 keyUpdatedStateNumber:(id)arg3 keyUpdatedTime:(double)arg4;
- (void)updateCachedStateForIdentifier:(id)arg1 stateNumber:(id)arg2;
- (void)updateStateForIdentifier:(id)arg1 stateNumber:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
