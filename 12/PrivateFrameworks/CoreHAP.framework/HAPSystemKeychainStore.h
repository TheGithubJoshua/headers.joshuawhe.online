<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HAPSystemKeychainStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreHAP.framework/HAPSystemKeychainStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP (484.7.17.1)
 */

@interface HAPSystemKeychainStore : HMFObject <HAPKeyStore, HMFDumpState> {
    NSString * _activeControllerIdentifier;
    NSObject<OS_dispatch_queue> * _queue;
}

@property (nonatomic, retain) NSString *activeControllerIdentifier;
@property (nonatomic, readonly) NSString *activeControllerPairingIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (readonly) Class superclass;

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)systemStore;

- (void).cxx_destruct;
- (int)_addKeychainItem:(id)arg1 logDuplicateItemError:(bool)arg2;
- (id)_auditAccessoryKeys:(id)arg1;
- (int)_createControllerPublicKey:(id*)arg1 secretKey:(id*)arg2 keyPair:(id*)arg3 username:(id*)arg4;
- (int)_createMetadataSecretKey:(id*)arg1;
- (int)_deleteAllPeripheralIdentifiers;
- (int)_deletePeripheralIdentifierForAccessoryIdentifier:(id)arg1;
- (int)_getAllAvailableControllerPublicKeys:(id*)arg1 secretKeys:(id*)arg2 userNames:(id*)arg3;
- (id)_getControllerKeychainItemError:(int*)arg1;
- (id)_getControllerKeychainItemForKeyType:(id)arg1 error:(int*)arg2;
- (int)_getControllerPublicKey:(id*)arg1 secretKey:(id*)arg2 keyPair:(id*)arg3 username:(id*)arg4;
- (id)_getKeychainItemsForAccessGroup:(id)arg1 type:(id)arg2 account:(id)arg3 shouldReturnData:(bool)arg4 error:(int*)arg5;
- (id)_getLocalPairingIdentityAllowingCreation:(bool)arg1 error:(id*)arg2;
- (int)_getMetadataSecretKey:(id*)arg1;
- (int)_getPeripheralIdentifier:(id*)arg1 forAccessoryIdentifier:(id)arg2 protocolVersion:(unsigned long long*)arg3 resumeSessionID:(unsigned long long*)arg4;
- (int)_getPublicKey:(id*)arg1 registeredWithHomeKit:(bool*)arg2 forAccessoryName:(id)arg3;
- (int)_removeAccessoryKeyForName:(id)arg1;
- (int)_removeControllerKeyPairForIdentifier:(id)arg1 leaveTombstone:(bool)arg2;
- (int)_removeControllerKeyPairForKeyType:(id)arg1 identifier:(id)arg2 leaveTombstone:(bool)arg3;
- (int)_removeKeychainItem:(id)arg1 leaveTombstone:(bool)arg2;
- (int)_saveKeyPair:(id)arg1 username:(id)arg2 syncable:(bool)arg3 keyType:(id)arg4;
- (int)_savePeripheralIdentifier:(id)arg1 forAccessoryIdentifier:(id)arg2 protocolVersion:(unsigned long long)arg3 resumeSessionID:(unsigned long long)arg4;
- (int)_savePublicKey:(id)arg1 forAccessoryName:(id)arg2;
- (int)_updateCurrentiCloudIdentifier:(id)arg1 controllerPairingIdentifier:(id)arg2;
- (void)_updateKeychainItemToInvisible:(id)arg1;
- (id)activeControllerIdentifier;
- (id)activeControllerPairingIdentifier;
- (id)auditAccessoryKeys:(id)arg1;
- (bool)deleteAllPeripheralIdentifiers:(id*)arg1;
- (bool)deletePeripheralIdentifierForAccessoryIdentifier:(id)arg1 error:(id*)arg2;
- (bool)deserializeKeyPair:(id)arg1 publicKey:(id*)arg2 secretKey:(id*)arg3 error:(id*)arg4;
- (id)dumpState;
- (void)ensureControllerKeyExistsForAllViews;
- (bool)getAllAvailableControllerPublicKeys:(id*)arg1 secretKeys:(id*)arg2 userNames:(id*)arg3 error:(id*)arg4;
- (bool)getControllerPublicKey:(id*)arg1 secretKey:(id*)arg2 keyPair:(id*)arg3 username:(id*)arg4 allowCreation:(bool)arg5 error:(id*)arg6;
- (bool)getControllerPublicKey:(id*)arg1 secretKey:(id*)arg2 username:(id*)arg3 allowCreation:(bool)arg4 error:(id*)arg5;
- (bool)getCurrentiCloudIdentifier:(id*)arg1 controllerPairingIdentifier:(id*)arg2 error:(id*)arg3;
- (id)getLocalPairingIdentity:(id*)arg1;
- (bool)getMetadataSecretKey:(id*)arg1 error:(id*)arg2;
- (id)getOrCreateLocalPairingIdentity:(id*)arg1;
- (id)getPeripherialIdentifiersAndAccessoryNames;
- (id)queue;
- (id)readPeripheralIdentifierForAccessoryIdentifier:(id)arg1 protocolVersion:(unsigned long long*)arg2 resumeSessionID:(unsigned long long*)arg3 error:(id*)arg4;
- (id)readPublicKeyForAccessoryName:(id)arg1 registeredWithHomeKit:(bool*)arg2 error:(id*)arg3;
- (bool)registerAccessoryWithHomeKit:(id)arg1 error:(id*)arg2;
- (bool)removeAccessoryKeyForName:(id)arg1 error:(id*)arg2;
- (bool)removeAllAccessoryKeys:(id*)arg1;
- (bool)removeControllerKeyPairForIdentifier:(id)arg1 leaveTombstone:(bool)arg2 error:(id*)arg3;
- (bool)removeControllerKeyPairLeaveTombstone:(bool)arg1 error:(id*)arg2;
- (bool)removeControllerKeyPairWithError:(id*)arg1;
- (bool)saveKeyPair:(id)arg1 username:(id)arg2 syncable:(bool)arg3 error:(id*)arg4;
- (bool)saveLocalPairingIdentity:(id)arg1 syncable:(bool)arg2 error:(id*)arg3;
- (bool)savePeripheralIdentifier:(id)arg1 forAccessoryIdentifier:(id)arg2 protocolVersion:(unsigned long long)arg3 resumeSessionID:(unsigned long long)arg4 error:(id*)arg5;
- (bool)savePublicKey:(id)arg1 forAccessoryName:(id)arg2 error:(id*)arg3;
- (void)setActiveControllerIdentifier:(id)arg1;
- (void)setQueue:(id)arg1;
- (bool)updateActiveControllerPairingIdentifier:(id)arg1;
- (bool)updateCurrentiCloudIdentifier:(id)arg1 controllerPairingIdentifier:(id)arg2 error:(id*)arg3;
- (bool)updatePeripheralIdentifier:(id)arg1 forAccessoryIdentifier:(id)arg2 protocolVersion:(unsigned long long)arg3 previousVersion:(unsigned long long*)arg4 resumeSessionID:(unsigned long long)arg5 error:(id*)arg6;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
