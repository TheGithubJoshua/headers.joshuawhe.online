<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HAPWACClient.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreHAP.framework/HAPWACClient.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreHAP.framework/CoreHAP (484.7.17.1)
 */

@interface HAPWACClient : HMFObject {
    NSString * _bssid;
    NSNumber * _channel;
    NSObject<OS_dispatch_queue> * _clientQueue;
    id /* block */  _completion;
    bool  _didRestoreNetwork;
    EasyConfigDevice * _ezConfigDevice;
    NSString * _identifier;
    HAPAccessoryServerIP * _ipServer;
    NSString * _name;
    unsigned int  _pairSetupFlags;
    int (* _promptForSetupCode_f;
    <HAPWACScanControlDelegate> * _scanDelegate;
    bool  _skipPairSetup;
    NSString * _ssid;
    bool  _supports2pt4GHz;
    bool  _supports5GHz;
    bool  _supportsPairSetupWAC;
    bool  _supportsTokenAuth;
    id /* block */  _wacCompatibilityCheckCompletionHandler;
    struct __CFDictionary { } * _wifiInfo;
}

@property (nonatomic, readonly, copy) NSString *bssid;
@property (nonatomic, readonly, copy) NSNumber *channel;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *clientQueue;
@property (nonatomic, copy) id /* block */ completion;
@property (nonatomic) bool didRestoreNetwork;
@property (nonatomic, retain) EasyConfigDevice *ezConfigDevice;
@property (nonatomic, readonly, copy) NSString *identifier;
@property (nonatomic, readonly) HAPAccessoryServerIP *ipServer;
@property (nonatomic, readonly, copy) NSString *name;
@property (nonatomic) unsigned int pairSetupFlags;
@property (nonatomic) int (*promptForSetupCode_f;
@property (nonatomic, readonly) <HAPWACScanControlDelegate> *scanDelegate;
@property (nonatomic) bool skipPairSetup;
@property (nonatomic, readonly, copy) NSString *ssid;
@property (nonatomic, readonly) bool supports2pt4GHz;
@property (nonatomic, readonly) bool supports5GHz;
@property (nonatomic, readonly) bool supportsPairSetupWAC;
@property (nonatomic, readonly) bool supportsTokenAuth;
@property (nonatomic, copy) id /* block */ wacCompatibilityCheckCompletionHandler;
@property (nonatomic) struct __CFDictionary { }*wifiInfo;

- (void).cxx_destruct;
- (bool)_checkCompatibleNetwork:(id)arg1;
- (void)_configProgress:(id)arg1;
- (int)_configPrompt:(unsigned int)arg1 inDelaySeconds:(int)arg2;
- (void)_configStopped:(id)arg1;
- (void)_joinComplete;
- (void)_waitForLinkUp:(int)arg1 inContext:(void*)arg2;
- (id)bssid;
- (id)channel;
- (void)checkCompatibleNetwork:(id)arg1 completion:(id /* block */)arg2;
- (id)clientQueue;
- (id /* block */)completion;
- (void)dealloc;
- (bool)didRestoreNetwork;
- (id)ezConfigDevice;
- (id)identifier;
- (id)initWithWACDevice:(id)arg1 server:(id)arg2 andScanDelegate:(id)arg3;
- (id)ipServer;
- (void)joinDeviceSoftAP:(id /* block */)arg1;
- (id)name;
- (void)pairInvalidate;
- (void)pairSetupContinueWithSetupCode:(id)arg1;
- (unsigned int)pairSetupFlags;
- (void)pairSetupStart:(int (*)arg1 completionHandler:(id /* block */)arg2;
- (void)pairSetupStop;
- (int (*)promptForSetupCode_f;
- (void)restoreInfrastructureNetwork:(id /* block */)arg1;
- (id)scanDelegate;
- (void)setCompletion:(id /* block */)arg1;
- (void)setDidRestoreNetwork:(bool)arg1;
- (void)setEzConfigDevice:(id)arg1;
- (void)setPairSetupFlags:(unsigned int)arg1;
- (void)setPromptForSetupCode_f:(int (*)arg1;
- (void)setSkipPairSetup:(bool)arg1;
- (void)setWacCompatibilityCheckCompletionHandler:(id /* block */)arg1;
- (void)setWifiInfo:(struct __CFDictionary { }*)arg1;
- (bool)skipPairSetup;
- (id)ssid;
- (bool)supports2pt4GHz;
- (bool)supports5GHz;
- (bool)supportsPairSetupWAC;
- (bool)supportsTokenAuth;
- (id /* block */)wacCompatibilityCheckCompletionHandler;
- (struct __CFDictionary { }*)wifiInfo;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
