<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMTranscoder_Image.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMTranscoderAgent.framework/IMTranscoder_Image.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMTranscoderAgent.framework/IMTranscoderAgent (1000)
 */

@interface IMTranscoder_Image : IMTranscoder {
    double  _overrideJPEGCompressionQuality;
    bool  _stripImageMetadata;
}

@property (nonatomic) double overrideJPEGCompressionQuality;
@property (nonatomic) bool stripImageMetadata;

+ (bool)_canConvertPNGToJPEG:(struct CGImage { }*)arg1;
+ (id)excludedUTIs;
+ (id)supportedUTIs;

- (id)_checkAndSaveImageData:(id)arg1 sourceURL:(id)arg2 inFormat:(struct __CFString { }*)arg3 withMaxByteSize:(unsigned long long)arg4 actualSize:(unsigned long long*)arg5 usedLengthIndex:(int*)arg6 currentIndex:(int)arg7;
- (unsigned long long)_getImageWidth:(struct CGImageSource { }*)arg1;
- (id)_getScaleFactorArray:(id)arg1 transferURL:(id)arg2 outputURLs:(id)arg3;
- (bool)_isHEIFImageFormat:(struct CGImageSource { }*)arg1;
- (bool)_isWideGamutImage:(struct CGImageSource { }*)arg1;
- (id)_newGeneratedImage:(struct CGImageSource { }*)arg1 target:(long long)arg2 hardwareEncoder:(id)arg3 inFormat:(struct __CFString { }*)arg4 fromFormat:(struct __CFString { }*)arg5 withMaxLength:(unsigned long long)arg6 withMaxCount:(unsigned long long)arg7 withCompressionQuality:(double)arg8 enforceMaxes:(bool)arg9 subsampling:(int)arg10;
- (void)_setWideGamutProperties:(id)arg1 scaledImage:(struct CGImage { }*)arg2 imageDestination:(struct CGImageDestination { }*)arg3 index:(unsigned long long)arg4;
- (id)_writeHEIFImage:(struct CGImageSource { }*)arg1 sourceURL:(id)arg2 inFormat:(struct __CFString { }*)arg3 withMaxByteSize:(unsigned long long)arg4 maxDimension:(unsigned long long)arg5 actualSize:(unsigned long long*)arg6 startingLengthIndex:(int)arg7 usedLengthIndex:(int*)arg8 telemetry:(id)arg9;
- (id)_writeImage:(struct CGImageSource { }*)arg1 sourceURL:(id)arg2 target:(long long)arg3 hardwareEncoder:(id)arg4 inFormat:(struct __CFString { }*)arg5 fromFormat:(struct __CFString { }*)arg6 withMaxByteSize:(unsigned long long)arg7 maxDimension:(unsigned long long)arg8 actualSize:(unsigned long long*)arg9 startingLengthIndex:(int)arg10 usedLengthIndex:(int*)arg11 estimator:(id)arg12 telemetry:(id)arg13;
- (id)_writeImageData:(id)arg1 inFormat:(struct __CFString { }*)arg2 sourceURL:(id)arg3;
- (id)_writeRepresentationsForImage:(struct CGImageSource { }*)arg1 target:(long long)arg2 sourceURL:(id)arg3 sizes:(id)arg4 maxDimension:(unsigned long long)arg5 srcUTI:(struct __CFString { }*)arg6 inFormat:(struct __CFString { }*)arg7 estimator:(id)arg8 telemetry:(id)arg9;
- (id)_writeWideGamutImage:(struct CGImageSource { }*)arg1 sourceURL:(id)arg2 inFormat:(struct __CFString { }*)arg3 withMaxByteSize:(unsigned long long)arg4 maxDimension:(unsigned long long)arg5 actualSize:(unsigned long long*)arg6 startingLengthIndex:(int)arg7 usedLengthIndex:(int*)arg8 telemetry:(id)arg9;
- (double)overrideJPEGCompressionQuality;
- (void)setOverrideJPEGCompressionQuality:(double)arg1;
- (void)setStripImageMetadata:(bool)arg1;
- (long long)shouldTranscodeTransfer:(id)arg1 transcoderUserInfo:(id)arg2 target:(long long)arg3 utiType:(id)arg4 allowUnfilteredUTIs:(id)arg5 fileSizeLimit:(unsigned long long)arg6;
- (bool)stripImageMetadata;
- (void)transcodeFileTransfer:(id)arg1 utiType:(id)arg2 allowUnfilteredUTIs:(id)arg3 target:(long long)arg4 sizes:(id)arg5 maxDimension:(unsigned long long)arg6 transcoderUserInfo:(id)arg7 representations:(long long)arg8 completionBlock:(id /* block */)arg9;
- (void)validateFileTransfer:(id)arg1 utiType:(id)arg2 completionBlock:(id /* block */)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
