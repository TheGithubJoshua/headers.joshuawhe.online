<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SBKPlaybackPositionSyncRequestHandler.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/StoreBookkeeper.framework/SBKPlaybackPositionSyncRequestHandler.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/StoreBookkeeper.framework/StoreBookkeeper (1)
 */

@interface SBKPlaybackPositionSyncRequestHandler : SBKSyncRequestHandler <SBKSyncTransactionProcessing, SBKTransactionControllerDelegate> {
    bool  _canceled;
    SBKSyncTransaction * _currentKVSTransaction;
    <SBKUniversalPlaybackPositionDataSource> * _dataSource;
    <SBKUniversalPlaybackPositionTransactionContext> * _dataSourceTransactionContext;
    NSError * _fatalSyncError;
    SBKTransactionController * _kvsController;
    NSMutableDictionary * _metadataItemsFromDataSource;
    NSDictionary * _metadataItemsToCommitToDataSource;
    NSDictionary * _metadataItemsToCommitToKVSStorage;
    NSString * _overrideSyncAnchor;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableDictionary * _responseMetadataItemsMergedToCommitBackToKVSStorage;
    NSMutableDictionary * _responseMetadataItemsToCommitToDataSource;
    bool  _syncInProgress;
    NSObject<OS_dispatch_queue> * _syncOperationQueue;
}

@property bool canceled;
@property (retain) SBKSyncTransaction *currentKVSTransaction;
@property (retain) <SBKUniversalPlaybackPositionDataSource> *dataSource;
@property (retain) <SBKUniversalPlaybackPositionTransactionContext> *dataSourceTransactionContext;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (retain) NSError *fatalSyncError;
@property (readonly) unsigned long long hash;
@property (retain) SBKTransactionController *kvsController;
@property (retain) NSMutableDictionary *metadataItemsFromDataSource;
@property (retain) NSDictionary *metadataItemsToCommitToDataSource;
@property (retain) NSDictionary *metadataItemsToCommitToKVSStorage;
@property (retain) NSString *overrideSyncAnchor;
@property (retain) NSMutableDictionary *responseMetadataItemsMergedToCommitBackToKVSStorage;
@property (retain) NSMutableDictionary *responseMetadataItemsToCommitToDataSource;
@property (readonly) Class superclass;
@property bool syncInProgress;

- (void).cxx_destruct;
- (void)_dataSourceCancelTransaction;
- (int)_mergeConflictedItemFromSyncResponse:(id)arg1;
- (void)_mergeMetadataItemsFromSyncResponse;
- (bool)_shouldStop;
- (void)_signalKVSTransactionCompletion:(id)arg1;
- (void)_signalKVSTransactionCompletion:(id)arg1 withError:(id)arg2;
- (bool)_synchronize:(id*)arg1;
- (id)_synchronouslyRunKVSTransaction:(id)arg1;
- (void)cancel;
- (void)cancelWithError:(id)arg1;
- (bool)canceled;
- (void)clearTransactionResponseData;
- (id)currentKVSTransaction;
- (id)dataSource;
- (id)dataSourceTransactionContext;
- (id)fatalSyncError;
- (id)initWithDataSource:(id)arg1 bagContext:(id)arg2;
- (id)kvsController;
- (id)metadataItemsFromDataSource;
- (id)metadataItemsToCommitToDataSource;
- (id)metadataItemsToCommitToKVSStorage;
- (id)newKVSSyncTransactionWithUpdatedMetadataItemIdentifiers:(id)arg1 processConflicts:(bool)arg2;
- (id)overrideSyncAnchor;
- (id)responseMetadataItemsMergedToCommitBackToKVSStorage;
- (id)responseMetadataItemsToCommitToDataSource;
- (void)setCanceled:(bool)arg1;
- (void)setCurrentKVSTransaction:(id)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDataSourceTransactionContext:(id)arg1;
- (void)setFatalSyncError:(id)arg1;
- (void)setKvsController:(id)arg1;
- (void)setMetadataItemsFromDataSource:(id)arg1;
- (void)setMetadataItemsToCommitToDataSource:(id)arg1;
- (void)setMetadataItemsToCommitToKVSStorage:(id)arg1;
- (void)setOverrideSyncAnchor:(id)arg1;
- (void)setResponseMetadataItemsMergedToCommitBackToKVSStorage:(id)arg1;
- (void)setResponseMetadataItemsToCommitToDataSource:(id)arg1;
- (void)setSyncInProgress:(bool)arg1;
- (bool)syncInProgress;
- (void)synchronizeWithCompletionHandler:(id /* block */)arg1;
- (void)timeout;
- (id)transaction:(id)arg1 conflictDetectionOrdinalForKey:(id)arg2;
- (void)transaction:(id)arg1 didProcessResponseData:(id)arg2;
- (id)transaction:(id)arg1 keyValuePairForUpdatedKey:(id)arg2;
- (void)transaction:(id)arg1 processDeletedKey:(id)arg2 isDirty:(bool*)arg3;
- (void)transaction:(id)arg1 processUpdatedKey:(id)arg2 data:(id)arg3 conflict:(bool)arg4 isDirty:(bool*)arg5;
- (id)transaction:(id)arg1 syncAnchorForTransactionSyncAnchor:(id)arg2;
- (void)transaction:(id)arg1 willProcessResponseData:(id)arg2;
- (void)transactionController:(id)arg1 transactionDidCancel:(id)arg2 error:(id)arg3;
- (bool)transactionController:(id)arg1 transactionDidFail:(id)arg2 error:(id)arg3;
- (void)transactionController:(id)arg1 transactionDidFinish:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
