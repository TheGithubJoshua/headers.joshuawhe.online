<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>DNDSServer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DoNotDisturbServer.framework/DNDSServer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DoNotDisturbServer.framework/DoNotDisturbServer (1)
 */

@interface DNDSServer : NSObject <DNDSAssertionSyncManagerDataSource, DNDSAssertionSyncManagerDelegate, DNDSEventBehaviorResolverDataSource, DNDSLegacyAssertionSyncManagerDataSource, DNDSLifetimeMonitorDataSource, DNDSLifetimeMonitorDelegate, DNDSModeAssertionProviderObserver, DNDSModeAssertionStateProviderDataSource, DNDSPairedDeviceStateMonitorDelegate, DNDSRemoteServiceProviderDelegate, DNDSScheduleManagerDataSource, DNDSSettingsManagerDelegate, DNDSSettingsSyncManagerDataSource, DNDSSettingsSyncManagerDelegate, DNDSStateProviderUpdateListener> {
    <DNDSAssertionSyncManager> * _assertionSyncManager;
    NSArray * _assertionTransformers;
    DNDSCalendarEventLifetimeMonitor * _calendarEventLifetimeMonitor;
    DNDSEventBehaviorResolver * _eventBehaviorResolver;
    NSArray * _lifetimeMonitors;
    DNDSLocalAssertionManager * _localAssertionManager;
    unsigned long long  _lockState;
    unsigned long long  _lostModeState;
    DNDSPairedDeviceStateMonitor * _pairedDeviceStateMonitor;
    NSObject<OS_dispatch_queue> * _queue;
    DNDSScheduleManager * _scheduleManager;
    DNDSRemoteServiceProvider * _serviceProvider;
    DNDSSettingsManager * _settingsManager;
    <DNDSSettingsSyncManager> * _settingsSyncManager;
    DNDSModeAssertionStateProvider * _stateProvider;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property unsigned long long lockState;
@property unsigned long long lostModeState;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_activeDateIntervalForModeAssertion:(id)arg1;
- (id)_activeModeAssertionsConsideringProviders:(id)arg1;
- (id)_effectiveLifetimeForModeAssertion:(id)arg1;
- (void)_handleSignificantTimeChange;
- (void)_queue_handlePairedDeviceAndSyncSettingsChange;
- (void)_queue_resume;
- (void)_queue_updateLifetimeMonitorsAndStateForReason:(unsigned long long)arg1;
- (bool)_setLostModeState:(unsigned long long)arg1 error:(id*)arg2;
- (void)activeAssertionsDidChangeForLifetimeMonitor:(id)arg1;
- (id)activeLocalModeAssertionsForSyncManager:(id)arg1;
- (id)allModeAssertionsForLifetimeMonitor:(id)arg1;
- (unsigned long long)currentInterruptionBehaviorSettingForStateProvider:(id)arg1;
- (unsigned long long)currentLostModeStateForStateProvider:(id)arg1;
- (id)currentStateForEventBehaviorResolver:(id)arg1;
- (unsigned long long)currentUILockStateForStateProvider:(id)arg1;
- (id)currentlyActiveModeAssertionsForStateProvider:(id)arg1;
- (id)eventBehaviorResolver:(id)arg1 bypassSettingsForClientIdentifier:(id)arg2;
- (id)init;
- (id)lastModeAssertionsCompleteInvalidationDateForScheduleManager:(id)arg1;
- (id)lastModeAssertionsCompleteInvalidationDateForSyncManager:(id)arg1;
- (id)lastModeAssertionsUpdateDateForSyncManager:(id)arg1;
- (id)legacyAssertionSyncManager:(id)arg1 activeDateIntervalForModeAssertion:(id)arg2;
- (id)lifetimeMonitor:(id)arg1 effectiveLifetimeForModeAssertion:(id)arg2;
- (void)lifetimeMonitor:(id)arg1 lifetimeDidExpireForAssertionUUIDs:(id)arg2;
- (unsigned long long)lockState;
- (unsigned long long)lostModeState;
- (void)modeAssertionProvider:(id)arg1 didPerformInvalidations:(id)arg2;
- (void)modeAssertionProvider:(id)arg1 didTakeAssertions:(id)arg2 forSource:(unsigned long long)arg3;
- (void)pairedDeviceStateMonitor:(id)arg1 didChangePairedDevice:(id)arg2;
- (id)phoneCallBypassSettingsForSyncManager:(id)arg1;
- (id)remoteServiceProvider:(id)arg1 assertionWithClientIdentifer:(id)arg2 error:(id*)arg3;
- (id)remoteServiceProvider:(id)arg1 behaviorSettingsWithError:(id*)arg2;
- (id)remoteServiceProvider:(id)arg1 currentStateWithError:(id*)arg2;
- (id)remoteServiceProvider:(id)arg1 invalidateAllModeAssertionsTakenBeforeDate:(id)arg2 forReason:(unsigned long long)arg3 error:(id*)arg4;
- (id)remoteServiceProvider:(id)arg1 invalidateModeAssertionWithUUID:(id)arg2 reason:(unsigned long long)arg3 error:(id*)arg4;
- (id)remoteServiceProvider:(id)arg1 phoneCallBypassSettingsWithError:(id*)arg2;
- (id)remoteServiceProvider:(id)arg1 resolveBehaviorForEventDetails:(id)arg2 clientIdentifier:(id)arg3 date:(id)arg4 error:(id*)arg5;
- (id)remoteServiceProvider:(id)arg1 scheduleSettingsWithError:(id*)arg2;
- (bool)remoteServiceProvider:(id)arg1 setBehaviorSettings:(id)arg2 withError:(id*)arg3;
- (bool)remoteServiceProvider:(id)arg1 setPhoneCallBypassSettings:(id)arg2 withError:(id*)arg3;
- (bool)remoteServiceProvider:(id)arg1 setScheduleSettings:(id)arg2 withError:(id*)arg3;
- (id)remoteServiceProvider:(id)arg1 takeModeAssertionWithDetails:(id)arg2 clientIdentifier:(id)arg3 source:(unsigned long long)arg4 error:(id*)arg5;
- (void)resume;
- (id)scheduleSettingsForScheduleManager:(id)arg1;
- (id)scheduleSettingsForSyncManager:(id)arg1;
- (void)setLockState:(unsigned long long)arg1;
- (void)setLostModeState:(unsigned long long)arg1;
- (bool)setUILockState:(unsigned long long)arg1 error:(id*)arg2;
- (void)settingsManager:(id)arg1 didReceiveUpdatedBehaviorSettings:(id)arg2;
- (void)settingsManager:(id)arg1 didReceiveUpdatedPhoneCallBypassSettings:(id)arg2;
- (void)settingsManager:(id)arg1 didReceiveUpdatedScheduleSettings:(id)arg2;
- (void)settingsManager:(id)arg1 didReceiveUpdatedSyncSettings:(id)arg2;
- (id)stateProvider:(id)arg1 activeDateIntervalForModeAssertion:(id)arg2;
- (void)stateProvider:(id)arg1 didUpdateDoNotDisturbState:(id)arg2;
- (id)stateProvider:(id)arg1 effectiveLifetimeForModeAssertion:(id)arg2;
- (id)stateProvider:(id)arg1 effectiveModeIdentifierForModeAssertion:(id)arg2;
- (void)syncManager:(id)arg1 didReceiveUpdatedPhoneCallBypassSettings:(id)arg2;
- (void)syncManager:(id)arg1 didReceiveUpdatedScheduleSettings:(id)arg2;
- (void)syncManager:(id)arg1 invalidateAllModeAssertionsTakenBeforeDate:(id)arg2 forReason:(unsigned long long)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
