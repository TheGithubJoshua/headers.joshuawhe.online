<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMCloudKitEventNotificationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMCore.framework/IMCloudKitEventNotificationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMCore.framework/IMCore (1000)
 */

@interface IMCloudKitEventNotificationManager : NSObject {
    <IMCloudKitEventHandlerAccountInfoProvider> * _accountInfoProvider;
    IMWeakReferenceCollection * _eventHandlers;
    NSTimer * _fetchStatsTimer;
    IMEventNotificationManager * _notificationManager;
    IMCloudKitSyncState * _previousState;
    double  _progressPollingInterval;
    IMCloudKitSyncProgress * _progressToSend;
}

@property <IMCloudKitEventHandlerAccountInfoProvider> *accountInfoProvider;
@property bool didPromptForCloudKitSync;
@property (readonly) IMWeakReferenceCollection *eventHandlers;
@property NSTimer *fetchStatsTimer;
@property (retain) IMEventNotificationManager *notificationManager;
@property (retain) IMCloudKitSyncState *previousState;
@property double progressPollingInterval;
@property (retain) IMCloudKitSyncProgress *progressToSend;
@property (readonly) IMCloudKitSyncState *syncState;

+ (void)__setSingleton__im:(id)arg1;
+ (id)__singleton__im;
+ (id)logHandle;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (void)_cancelStatsFetchingTimer;
- (void)_fetchSyncStateStatistics:(id /* block */)arg1;
- (bool)_hasProgressEventListeners;
- (void)_rescheduleFetchSyncProgress;
- (void)_sendHiddenProgressToEventListeners;
- (void)_sendProgressToEventListeners:(id)arg1;
- (void)_sendProgressToEventListenersDeferred;
- (void)_sendSyncStateChangedEventToEventListeners:(id)arg1;
- (void)_sendSyncStatisticsToEventHandlers:(id)arg1 error:(id)arg2;
- (void)_syncStateDidChange:(id)arg1;
- (void)_timerExpiredForSyncStatsFetching:(id)arg1;
- (void)_updateProgressWithState:(id)arg1;
- (bool)accountHasiMessageEnabled;
- (id)accountInfoProvider;
- (void)addEventHandler:(id)arg1;
- (id)cloudKitHooks;
- (bool)didPromptForCloudKitSync;
- (void)disableAllSyncEnabledCloudKitDevices;
- (id)eventHandlers;
- (void)fetchRampStateWithCompletion:(id /* block */)arg1;
- (id)fetchStatsTimer;
- (void)fetchSyncDebuggingInfo:(id)arg1;
- (void)fetchSyncState;
- (void)fetchSyncStateAfterClearingErrors;
- (void)fetchSyncStateAfterClearingErrorsWithRepairSuccess:(bool)arg1 completion:(id /* block */)arg2;
- (void)fetchSyncStateAfterFetchingAccountStatus;
- (void)fetchSyncStateStatistics;
- (void)fetchSyncStateStatisticsWithCompletion:(id /* block */)arg1;
- (void)fetchSyncStateWithCompletion:(id /* block */)arg1;
- (id)init;
- (id)logHandle;
- (id)notificationManager;
- (void)performAdditionalStorageRequiredCheck;
- (id)previousState;
- (double)progressBroadcastDelay;
- (double)progressPollingInterval;
- (id)progressToSend;
- (void)removeEventHandler:(id)arg1;
- (void)setAccountInfoProvider:(id)arg1;
- (void)setCloudKitSyncEnabled:(bool)arg1;
- (void)setCloudKitSyncEnabled:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)setDidPromptForCloudKitSync:(bool)arg1;
- (void)setFetchStatsTimer:(id)arg1;
- (void)setNotificationManager:(id)arg1;
- (void)setPreviousState:(id)arg1;
- (void)setProgressPollingInterval:(double)arg1;
- (void)setProgressToSend:(id)arg1;
- (void)startInitialSync;
- (void)startPeriodicSync;
- (id)syncState;
- (id)syncStateWithDictionary:(id)arg1;
- (void)visitEventHandlers:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
