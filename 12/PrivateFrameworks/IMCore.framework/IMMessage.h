<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMMessage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMCore.framework/IMMessage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMCore.framework/IMCore (1000)
 */

@interface IMMessage : NSObject <NSCopying> {
    NSString * _associatedBalloonBundleID;
    NSString * _associatedMessageGUID;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _associatedMessageRange;
    long long  _associatedMessageType;
    NSString * _balloonBundleID;
    NSDictionary * _bizIntent;
    NSData * _customTypingIndicatorIcon;
    NSError * _error;
    NSString * _expressiveSendStyleID;
    NSArray * _fileTransferGUIDs;
    unsigned long long  _flags;
    NSString * _guid;
    bool  _isInvitationMessage;
    bool  _isSOS;
    NSString * _locale;
    long long  _messageID;
    NSAttributedString * _messageSubject;
    NSDictionary * _messageSummaryInfo;
    NSString * _notificationIDSTokenURI;
    NSData * _payloadData;
    NSString * _plainBody;
    IMHandle * _sender;
    unsigned long long  _sortID;
    IMHandle * _subject;
    NSAttributedString * _text;
    NSDate * _time;
    NSDate * _timeDelivered;
    NSDate * _timeExpressiveSendPlayed;
    NSDate * _timePlayed;
    NSDate * _timeRead;
}

@property (nonatomic, readonly) IMMessageItem *_imMessageItem;
@property (nonatomic, retain) NSString *associatedBalloonBundleID;
@property (nonatomic, readonly, copy) NSString *associatedMessageGUID;
@property (setter=_associatedMessageGUID:, nonatomic, copy) NSString *associatedMessageGUID;
@property (setter=_associatedMessageRange:, nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } associatedMessageRange;
@property (nonatomic, readonly) long long associatedMessageType;
@property (setter=_associatedMessageType:, nonatomic) long long associatedMessageType;
@property (nonatomic, retain) NSString *balloonBundleID;
@property (setter=_updateBizIntent:, nonatomic, retain) NSDictionary *bizIntent;
@property (nonatomic, retain) NSData *customTypingIndicatorIcon;
@property (setter=_updateError:, nonatomic, retain) NSError *error;
@property (nonatomic, retain) NSString *expressiveSendStyleID;
@property (setter=_updateFileTransferGUIDs:, nonatomic, copy) NSArray *fileTransferGUIDs;
@property (setter=_updateFlags:, nonatomic) unsigned long long flags;
@property (setter=_updateGUID:, nonatomic, retain) NSString *guid;
@property (nonatomic, readonly) bool hasDataDetectorResults;
@property (nonatomic, readonly) bool hasInlineAttachments;
@property (nonatomic, readonly) NSArray *inlineAttachmentAttributesArray;
@property (nonatomic, readonly) bool isAddressedToMe;
@property (nonatomic, readonly) bool isAlert;
@property (nonatomic, readonly) bool isAssociatedMessage;
@property (nonatomic, readonly) bool isAudioMessage;
@property (nonatomic, readonly) bool isAutoReply;
@property (nonatomic, readonly) bool isDelayed;
@property (nonatomic, readonly) bool isDelivered;
@property (nonatomic, readonly) bool isEmote;
@property (nonatomic, readonly) bool isEmpty;
@property (nonatomic, readonly) bool isFinished;
@property (nonatomic, readonly) bool isFromMe;
@property (nonatomic) bool isInvitationMessage;
@property (nonatomic, readonly) bool isLocatingMessage;
@property (nonatomic, readonly) bool isPlayed;
@property (nonatomic, readonly) bool isRead;
@property (nonatomic) bool isSOS;
@property (nonatomic, readonly) bool isSent;
@property (nonatomic, readonly) bool isSystemMessage;
@property (nonatomic, readonly) bool isTypingMessage;
@property (setter=_updateLocale:, nonatomic, retain) NSString *locale;
@property (setter=_updateMessageID:, nonatomic) long long messageID;
@property (nonatomic, readonly) NSAttributedString *messageSubject;
@property (nonatomic, readonly, copy) NSDictionary *messageSummaryInfo;
@property (setter=_messageSummaryInfo:, nonatomic, copy) NSDictionary *messageSummaryInfo;
@property (nonatomic, retain) NSString *notificationIDSTokenURI;
@property (nonatomic, retain) NSData *payloadData;
@property (nonatomic, readonly) NSString *plainBody;
@property (setter=_updateSender:, nonatomic, retain) IMHandle *sender;
@property (nonatomic, readonly) NSString *senderName;
@property (nonatomic) unsigned long long sortID;
@property (nonatomic, readonly) IMHandle *subject;
@property (nonatomic, readonly) NSString *summaryString;
@property (setter=_updateText:, nonatomic, retain) NSAttributedString *text;
@property (setter=_updateTime:, nonatomic, retain) NSDate *time;
@property (setter=_updateTimeDelivered:, nonatomic, retain) NSDate *timeDelivered;
@property (nonatomic, retain) NSDate *timeExpressiveSendPlayed;
@property (setter=_updateTimePlayed:, nonatomic, retain) NSDate *timePlayed;
@property (setter=_updateTimeRead:, nonatomic, retain) NSDate *timeRead;
@property (nonatomic, readonly) bool wasDataDetected;
@property (nonatomic, readonly) bool wasDowngraded;

// Image: /System/Library/PrivateFrameworks/IMCore.framework/IMCore

+ (id)_vCardDataWithCLLocation:(id)arg1;
+ (id)breadcrumbMessageWithText:(id)arg1 associatedMessageGUID:(id)arg2 balloonBundleID:(id)arg3 fileTransferGUIDs:(id)arg4 payloadData:(id)arg5;
+ (id)defaultInvitationMessageFromSender:(id)arg1 flags:(unsigned long long)arg2;
+ (id)determineRichLinksInMessage:(id)arg1;
+ (id)determineRichLinksInMessage:(id)arg1 additionalSupportedSchemes:(id)arg2;
+ (id)editedMessageWithOriginalMessage:(id)arg1 originalPrefixedGUID:(id)arg2 newBody:(id)arg3;
+ (id)fromMeIMHandle:(id)arg1 withText:(id)arg2 fileTransferGUIDs:(id)arg3 flags:(unsigned long long)arg4;
+ (bool)hasKnownSchemesForRichLinkURL:(id)arg1;
+ (bool)hasKnownSchemesForRichLinkURL:(id)arg1 additionalSupportedSchemes:(id)arg2;
+ (id)instantMessageWithAssociatedMessageContent:(id)arg1 flags:(unsigned long long)arg2 associatedMessageGUID:(id)arg3 associatedMessageType:(long long)arg4 associatedMessageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 messageSummaryInfo:(id)arg6;
+ (id)instantMessageWithText:(id)arg1 flags:(unsigned long long)arg2;
+ (id)instantMessageWithText:(id)arg1 messageSubject:(id)arg2 fileTransferGUIDs:(id)arg3 flags:(unsigned long long)arg4;
+ (id)instantMessageWithText:(id)arg1 messageSubject:(id)arg2 fileTransferGUIDs:(id)arg3 flags:(unsigned long long)arg4 balloonBundleID:(id)arg5 payloadData:(id)arg6 expressiveSendStyleID:(id)arg7;
+ (id)instantMessageWithText:(id)arg1 messageSubject:(id)arg2 flags:(unsigned long long)arg3;
+ (id)instantMessageWithText:(id)arg1 messageSubject:(id)arg2 flags:(unsigned long long)arg3 expressiveSendStyleID:(id)arg4;
+ (id)locatingMessageWithGuid:(id)arg1 error:(id)arg2;
+ (id)messageFromIMMessageItem:(id)arg1 sender:(id)arg2 subject:(id)arg3;
+ (id)messageFromIMMessageItemDictionary:(id)arg1 body:(id)arg2 sender:(id)arg3 subject:(id)arg4;
+ (id)messageWithLocation:(id)arg1 flags:(unsigned long long)arg2 error:(id)arg3 guid:(id)arg4;
+ (Class)richLinksDataSourceClass;
+ (bool)supportedRichLinkURL:(id)arg1 additionalSupportedSchemes:(id)arg2;

- (void).cxx_destruct;
- (void)_associatedMessageGUID:(id)arg1;
- (void)_associatedMessageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_associatedMessageType:(long long)arg1;
- (id)_copyWithFlags:(unsigned long long)arg1;
- (id)_imMessageItem;
- (id)_initWithSender:(id)arg1 time:(id)arg2 timeRead:(id)arg3 timeDelivered:(id)arg4 timePlayed:(id)arg5 plainText:(id)arg6 text:(id)arg7 messageSubject:(id)arg8 fileTransferGUIDs:(id)arg9 flags:(unsigned long long)arg10 error:(id)arg11 guid:(id)arg12 messageID:(long long)arg13 subject:(id)arg14 balloonBundleID:(id)arg15 payloadData:(id)arg16 expressiveSendStyleID:(id)arg17 timeExpressiveSendPlayed:(id)arg18 associatedMessageGUID:(id)arg19 associatedMessageType:(long long)arg20 associatedMessageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg21 messageSummaryInfo:(id)arg22;
- (void)_messageSummaryInfo:(id)arg1;
- (void)_ovverrideGUIDForTest:(id)arg1;
- (void)_updateBizIntent:(id)arg1;
- (void)_updateError:(id)arg1;
- (void)_updateFileTransferGUIDs:(id)arg1;
- (void)_updateFlags:(unsigned long long)arg1;
- (void)_updateGUID:(id)arg1;
- (void)_updateLocale:(id)arg1;
- (void)_updateMessageID:(long long)arg1;
- (void)_updateSender:(id)arg1;
- (void)_updateText:(id)arg1;
- (void)_updateTime:(id)arg1;
- (void)_updateTimeDelivered:(id)arg1;
- (void)_updateTimePlayed:(id)arg1;
- (void)_updateTimeRead:(id)arg1;
- (id)associatedBalloonBundleID;
- (id)associatedMessageGUID;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })associatedMessageRange;
- (long long)associatedMessageType;
- (id)balloonBundleID;
- (id)bizIntent;
- (long long)compare:(id)arg1;
- (long long)compare:(id)arg1 comparisonType:(long long)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)customTypingIndicatorIcon;
- (id)description;
- (id)descriptionForPurpose:(long long)arg1;
- (id)descriptionForPurpose:(long long)arg1 inChat:(id)arg2;
- (id)error;
- (id)expressiveSendStyleID;
- (id)fileTransferGUIDs;
- (unsigned long long)flags;
- (id)guid;
- (bool)hasDataDetectorResults;
- (bool)hasInlineAttachments;
- (id)initWithSender:(id)arg1 fileTransfer:(id)arg2;
- (id)initWithSender:(id)arg1 time:(id)arg2 text:(id)arg3 fileTransferGUIDs:(id)arg4 flags:(unsigned long long)arg5 error:(id)arg6 guid:(id)arg7 subject:(id)arg8;
- (id)initWithSender:(id)arg1 time:(id)arg2 text:(id)arg3 messageSubject:(id)arg4 fileTransferGUIDs:(id)arg5 flags:(unsigned long long)arg6 error:(id)arg7 guid:(id)arg8 subject:(id)arg9;
- (id)initWithSender:(id)arg1 time:(id)arg2 text:(id)arg3 messageSubject:(id)arg4 fileTransferGUIDs:(id)arg5 flags:(unsigned long long)arg6 error:(id)arg7 guid:(id)arg8 subject:(id)arg9 associatedMessageGUID:(id)arg10 associatedMessageType:(long long)arg11 associatedMessageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg12 associatedMessageInfo:(id)arg13;
- (id)initWithSender:(id)arg1 time:(id)arg2 text:(id)arg3 messageSubject:(id)arg4 fileTransferGUIDs:(id)arg5 flags:(unsigned long long)arg6 error:(id)arg7 guid:(id)arg8 subject:(id)arg9 associatedMessageGUID:(id)arg10 associatedMessageType:(long long)arg11 associatedMessageRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg12 messageSummaryInfo:(id)arg13;
- (id)initWithSender:(id)arg1 time:(id)arg2 text:(id)arg3 messageSubject:(id)arg4 fileTransferGUIDs:(id)arg5 flags:(unsigned long long)arg6 error:(id)arg7 guid:(id)arg8 subject:(id)arg9 balloonBundleID:(id)arg10 payloadData:(id)arg11 expressiveSendStyleID:(id)arg12;
- (id)inlineAttachmentAttributesArray;
- (bool)isAddressedToMe;
- (bool)isAlert;
- (bool)isAssociatedMessage;
- (bool)isAudioMessage;
- (bool)isAutoReply;
- (bool)isDelayed;
- (bool)isDelivered;
- (bool)isEmote;
- (bool)isEmpty;
- (bool)isEqual:(id)arg1;
- (bool)isFinished;
- (bool)isFromMe;
- (bool)isInvitationMessage;
- (bool)isLocatingMessage;
- (bool)isPlayed;
- (bool)isRead;
- (bool)isSOS;
- (bool)isSent;
- (bool)isSystemMessage;
- (bool)isTypingMessage;
- (id)locale;
- (long long)messageID;
- (id)messageSubject;
- (id)messageSummaryInfo;
- (id)messagesBySeparatingRichLinks;
- (id)notificationIDSTokenURI;
- (id)payloadData;
- (id)plainBody;
- (id)sender;
- (id)senderName;
- (void)setAssociatedBalloonBundleID:(id)arg1;
- (void)setBalloonBundleID:(id)arg1;
- (void)setCustomTypingIndicatorIcon:(id)arg1;
- (void)setExpressiveSendStyleID:(id)arg1;
- (void)setIsAddressedToMe:(bool)arg1;
- (void)setIsInvitationMessage:(bool)arg1;
- (void)setIsSOS:(bool)arg1;
- (void)setNotificationIDSTokenURI:(id)arg1;
- (void)setPayloadData:(id)arg1;
- (void)setSortID:(unsigned long long)arg1;
- (void)setTimeExpressiveSendPlayed:(id)arg1;
- (unsigned long long)sortID;
- (id)subject;
- (id)summaryString;
- (id)text;
- (id)time;
- (id)timeDelivered;
- (id)timeExpressiveSendPlayed;
- (id)timePlayed;
- (id)timeRead;
- (bool)wasDataDetected;
- (bool)wasDowngraded;

// Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit

- (id)__ck_attachmentPreviewTextForAttachmentAtIndex:(long long)arg1;
- (id)__ck_downgradedMessage;
- (bool)__ck_isAcknowledgmentMessage;
- (bool)__ck_isEqualToMessageUsingGUID:(id)arg1;
- (bool)__ck_isSMS;
- (bool)__ck_isiMessage;
- (id)__ck_mediaObjects;
- (id)__ck_previewTextWithChat:(id)arg1;
- (id)__ck_previewTextWithChat:(id)arg1 ignorePluginContent:(bool)arg2;
- (id)__ck_service;
- (id)__ck_undowngradedMessage;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
