<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TUCallServicesInterface.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TelephonyUtilities.framework/TUCallServicesInterface.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities (1.0)
 */

@interface TUCallServicesInterface : NSObject <TUAudioDeviceControllerActions, TUCallServicesClientCapabilitiesActions, TUCallServicesProxyCallActions, TUCallServicesXPCClient, TURouteControllerActions> {
    TUCallCenter * _callCenter;
    TUCallNotificationManager * _callNotificationManager;
    TUCallServicesClientCapabilities * _callServicesClientCapabilities;
    int  _connectionRequestNotificationToken;
    NSArray * _currentCalls;
    <TUCallServicesXPCServer> * _daemonDelegate;
    bool  _hasDaemonDelegateLaunched;
    bool  _hasRequestedInitialState;
    NSObject<OS_dispatch_semaphore> * _initialStateSemaphore;
    NSArray * _localProxyCalls;
    NSObject<OS_dispatch_queue> * _queue;
    <TURouteControllerClient> * _routeControllerClient;
    NSMapTable * _uniqueProxyIdentifierToProxyCall;
    NSXPCConnection * _xpcConnection;
}

@property (nonatomic) TUCallCenter *callCenter;
@property (nonatomic, readonly) <TUCallContainerPrivate> *callContainer;
@property (nonatomic, retain) TUCallNotificationManager *callNotificationManager;
@property (nonatomic, retain) TUCallServicesClientCapabilities *callServicesClientCapabilities;
@property (nonatomic) int connectionRequestNotificationToken;
@property (nonatomic, copy) NSArray *currentCalls;
@property (nonatomic) <TUCallServicesXPCServer> *daemonDelegate;
@property (nonatomic, readonly) bool daemonDelegateIsLocal;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasDaemonDelegateLaunched;
@property (nonatomic) bool hasRequestedInitialState;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSObject<OS_dispatch_semaphore> *initialStateSemaphore;
@property (nonatomic, copy) NSArray *localProxyCalls;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *queue;
@property (nonatomic, readonly) void*queueContext;
@property (nonatomic, retain) <TURouteControllerClient> *routeControllerClient;
@property (nonatomic, readonly) NSDictionary *routesByUniqueIdentifier;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMapTable *uniqueProxyIdentifierToProxyCall;
@property (nonatomic, retain) NSXPCConnection *xpcConnection;

- (void).cxx_destruct;
- (oneway void)_handleCurrentCallsChanged:(id)arg1 callsDisconnected:(id)arg2;
- (id)_proxyCallWithCall:(id)arg1;
- (id)_proxyCallWithUniqueProxyIdentifier:(id)arg1;
- (void)_registerCall:(id)arg1;
- (void)_setUpXPCConnection;
- (void)_tearDownXPCConnection;
- (void)_updateCurrentCalls:(id)arg1;
- (void)_updateCurrentCalls:(id)arg1 withNotificationsUsingUpdatedCalls:(id)arg2;
- (void)_updateCurrentCallsWithoutNotifications:(id)arg1;
- (oneway void)answerCallWithRequest:(id)arg1;
- (id)callCenter;
- (id)callContainer;
- (id)callNotificationManager;
- (id)callServicesClientCapabilities;
- (int)connectionRequestNotificationToken;
- (id)currentCalls;
- (id)daemonDelegate;
- (bool)daemonDelegateIsLocal;
- (id)daemonDelegateWithErrorHandler:(id /* block */)arg1;
- (void)dealloc;
- (id)debugDescription;
- (id)dialWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (oneway void)disconnectAllCalls;
- (oneway void)disconnectCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)disconnectCurrentCallAndActivateHeld;
- (oneway void)enteredBackgroundForAllCalls;
- (oneway void)enteredForegroundForCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)groupCallWithUniqueProxyIdentifier:(id)arg1 withOtherCallWithUniqueProxyIdentifier:(id)arg2;
- (oneway void)handleCurrentCallsChanged:(id)arg1 callDisconnected:(id)arg2;
- (oneway void)handleFrequencyChangedTo:(id)arg1 inDirection:(int)arg2 forCallsWithUniqueProxyIdentifiers:(id)arg3;
- (oneway void)handleMeterLevelChangedTo:(float)arg1 inDirection:(int)arg2 forCallsWithUniqueProxyIdentifiers:(id)arg3;
- (oneway void)handleNotificationName:(id)arg1 forCallWithUniqueProxyIdentifier:(id)arg2 userInfo:(id)arg3;
- (oneway void)handleRoutesByUniqueIdentifierUpdated:(id)arg1;
- (void)handleServerDisconnect;
- (void)handleServerReconnect;
- (bool)hasDaemonDelegateLaunched;
- (bool)hasRequestedInitialState;
- (oneway void)holdCallWithUniqueProxyIdentifier:(id)arg1;
- (id)init;
- (id)initWithQueue:(id)arg1 callCenter:(id)arg2;
- (id)initialStateSemaphore;
- (id)joinConversationWithRequest:(id)arg1;
- (id)localProxyCalls;
- (void)performBlockOnQueue:(id /* block */)arg1;
- (void)performBlockOnQueue:(id /* block */)arg1 andWait:(bool)arg2;
- (oneway void)pickRouteWithUniqueIdentifier:(id)arg1;
- (oneway void)playDTMFToneForCallWithUniqueProxyIdentifier:(id)arg1 key:(unsigned char)arg2;
- (oneway void)pullCallFromClientUsingHandoffActivityUserInfo:(id)arg1 completion:(id /* block */)arg2;
- (oneway void)pullHostedCallsFromPairedHostDevice;
- (oneway void)pullRelayingCallsFromClient;
- (oneway void)pushHostedCallsToDestination:(id)arg1;
- (oneway void)pushRelayingCallsToHostWithSourceIdentifier:(id)arg1;
- (id)queue;
- (void*)queueContext;
- (void)registerCall:(id)arg1;
- (void)requestCurrentStateWithCompletionHandler:(id /* block */)arg1;
- (oneway void)resetCallProvisionalStates;
- (id)routeControllerClient;
- (id)routesByUniqueIdentifier;
- (oneway void)routesByUniqueIdentifier:(id /* block */)arg1;
- (oneway void)sendHardPauseDigitsForCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)sendMMIOrUSSDCodeWithRequest:(id)arg1;
- (void)setCallCenter:(id)arg1;
- (void)setCallNotificationManager:(id)arg1;
- (void)setCallServicesClientCapabilities:(id)arg1;
- (oneway void)setClientCapabilities:(id)arg1;
- (void)setConnectionRequestNotificationToken:(int)arg1;
- (oneway void)setCurrentAudioInputDeviceToDeviceWithUID:(id)arg1;
- (oneway void)setCurrentAudioOutputDeviceToDeviceWithUID:(id)arg1;
- (void)setCurrentCalls:(id)arg1;
- (void)setDaemonDelegate:(id)arg1;
- (oneway void)setDownlinkMuted:(bool)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;
- (void)setHasDaemonDelegateLaunched:(bool)arg1;
- (void)setHasRequestedInitialState:(bool)arg1;
- (void)setInitialStateSemaphore:(id)arg1;
- (void)setLocalProxyCalls:(id)arg1;
- (void)setQueue:(id)arg1;
- (oneway void)setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
- (oneway void)setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:(id)arg1 presentationState:(int)arg2;
- (void)setRouteControllerClient:(id)arg1;
- (oneway void)setTTYType:(int)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;
- (void)setUniqueProxyIdentifierToProxyCall:(id)arg1;
- (oneway void)setUplinkMuted:(bool)arg1 forCallWithUniqueProxyIdentifier:(id)arg2;
- (void)setXpcConnection:(id)arg1;
- (oneway void)swapCalls;
- (id)synchronousDaemonDelegateWithErrorHandler:(id /* block */)arg1;
- (void)tearDownXPCConnection;
- (oneway void)ungroupCallWithUniqueProxyIdentifier:(id)arg1;
- (oneway void)unholdCallWithUniqueProxyIdentifier:(id)arg1;
- (id)uniqueProxyIdentifierToProxyCall;
- (oneway void)updateCallWithProxy:(id)arg1;
- (void)waitForInitialStateIfNecessary;
- (oneway void)willEnterBackgroundForAllCalls;
- (id)xpcConnection;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
