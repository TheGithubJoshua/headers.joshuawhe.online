<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TUSenderIdentityCapabilities.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TelephonyUtilities.framework/TUSenderIdentityCapabilities.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TelephonyUtilities.framework/TelephonyUtilities (1.0)
 */

@interface TUSenderIdentityCapabilities : NSObject {
    TUCallCapabilitiesXPCClient * _client;
    NSUUID * _senderIdentityUUID;
    TUSenderIdentityCapabilitiesState * _state;
    NSString * _thumperCallingLocalDeviceID;
}

@property (nonatomic, readonly) bool canAttemptEmergencyCallsWithoutCellularConnection;
@property (nonatomic, readonly) bool canAttemptTelephonyCallsWithoutCellularConnection;
@property (nonatomic, readonly) TUCallCapabilitiesXPCClient *client;
@property (getter=isCSCallingCurrentlyAvailable, nonatomic, readonly) bool csCallingCurrentlyAvailable;
@property (getter=isEmergencyWiFiCallingCurrentlyAvailable, nonatomic, readonly) bool emergencyWiFiCallingCurrentlyAvailable;
@property (nonatomic, readonly, copy) NSUUID *senderIdentityUUID;
@property (nonatomic, readonly, copy) TUSenderIdentityCapabilitiesState *state;
@property (nonatomic, readonly) bool supportsEmergencyWiFiCalling;
@property (nonatomic, readonly) bool supportsSimultaneousVoiceAndData;
@property (nonatomic, readonly) bool supportsThumperCalling;
@property (nonatomic, readonly) bool supportsThumperCallingOverCellularData;
@property (nonatomic, readonly) bool supportsVoLTECalling;
@property (nonatomic, readonly) bool supportsWiFiCalling;
@property (nonatomic, readonly) bool supportsWiFiCallingRoaming;
@property (getter=isThumperCallingAllowedForCurrentDevice, nonatomic, readonly) bool thumperCallingAllowedForCurrentDevice;
@property (getter=isThumperCallingAllowedOnDefaultPairedSecondaryDevice, nonatomic, readonly) bool thumperCallingAllowedOnDefaultPairedSecondaryDevice;
@property (nonatomic, readonly) TUCTCapabilityInfo *thumperCallingCapabilityInfo;
@property (getter=isThumperCallingCurrentlyAvailable, nonatomic, readonly) bool thumperCallingCurrentlyAvailable;
@property (getter=isThumperCallingEnabled, nonatomic, readonly) bool thumperCallingEnabled;
@property (nonatomic, copy) NSString *thumperCallingLocalDeviceID;
@property (nonatomic, readonly, copy) NSData *thumperCallingProvisioningPostData;
@property (nonatomic, readonly) int thumperCallingProvisioningStatus;
@property (nonatomic, readonly, copy) NSURL *thumperCallingProvisioningURL;
@property (getter=isThumperCallingProvisioningURLInvalid, nonatomic, readonly) bool thumperCallingProvisioningURLInvalid;
@property (nonatomic, readonly) TUCTCapabilityInfo *voLTECallingCapabilityInfo;
@property (getter=isVoLTECallingCurrentlyAvailable, nonatomic, readonly) bool voLTECallingCurrentlyAvailable;
@property (getter=isVoLTECallingEnabled, nonatomic, readonly) bool voLTECallingEnabled;
@property (nonatomic, readonly) TUCTCapabilityInfo *wiFiCallingCapabilityInfo;
@property (getter=isWiFiCallingCurrentlyAvailable, nonatomic, readonly) bool wiFiCallingCurrentlyAvailable;
@property (getter=isWiFiCallingEnabled, nonatomic, readonly) bool wiFiCallingEnabled;
@property (nonatomic, readonly, copy) NSData *wiFiCallingProvisioningPostData;
@property (nonatomic, readonly) int wiFiCallingProvisioningStatus;
@property (nonatomic, readonly, copy) NSURL *wiFiCallingProvisioningURL;
@property (getter=isWiFiCallingProvisioningURLInvalid, nonatomic, readonly) bool wiFiCallingProvisioningURLInvalid;
@property (getter=isWiFiCallingRoamingEnabled, nonatomic, readonly) bool wiFiCallingRoamingEnabled;

- (void).cxx_destruct;
- (void)_sendNotificationsAndCallbacksComparingToOldSenderIdentityCapabilities:(id)arg1;
- (bool)canAttemptEmergencyCallsWithoutCellularConnection;
- (bool)canAttemptTelephonyCallsWithoutCellularConnection;
- (void)cancelPinRequestFromPrimaryDeviceForThumperCalling;
- (id)client;
- (id)debugDescription;
- (id)initWithSenderIdentityUUID:(id)arg1 state:(id)arg2 client:(id)arg3;
- (void)invalidateAndRefreshThumperCallingProvisioningURL;
- (void)invalidateAndRefreshWiFiCallingProvisioningURL;
- (bool)isCSCallingCurrentlyAvailable;
- (bool)isEmergencyWiFiCallingCurrentlyAvailable;
- (bool)isThumperCallingAllowedForCurrentDevice;
- (bool)isThumperCallingAllowedOnDefaultPairedSecondaryDevice;
- (bool)isThumperCallingAllowedOnSecondaryDeviceWithID:(id)arg1;
- (bool)isThumperCallingCurrentlyAvailable;
- (bool)isThumperCallingEnabled;
- (bool)isThumperCallingProvisioningURLInvalid;
- (bool)isVoLTECallingCurrentlyAvailable;
- (bool)isVoLTECallingEnabled;
- (bool)isWiFiCallingCurrentlyAvailable;
- (bool)isWiFiCallingEnabled;
- (bool)isWiFiCallingProvisioningURLInvalid;
- (bool)isWiFiCallingRoamingEnabled;
- (void)requestPinFromPrimaryDeviceForThumperCalling;
- (id)senderIdentityUUID;
- (void)setThumperCallingAllowed:(bool)arg1 onSecondaryDeviceWithID:(id)arg2;
- (void)setThumperCallingAllowedOnDefaultPairedSecondaryDevice:(bool)arg1;
- (void)setThumperCallingEnabled:(bool)arg1;
- (void)setThumperCallingLocalDeviceID:(id)arg1;
- (void)setVoLTECallingEnabled:(bool)arg1;
- (void)setWiFiCallingEnabled:(bool)arg1;
- (void)setWiFiCallingRoamingEnabled:(bool)arg1;
- (id)state;
- (bool)supportsEmergencyWiFiCalling;
- (bool)supportsSimultaneousVoiceAndData;
- (bool)supportsThumperCalling;
- (bool)supportsThumperCallingOverCellularData;
- (bool)supportsVoLTECalling;
- (bool)supportsWiFiCalling;
- (bool)supportsWiFiCallingRoaming;
- (id)thumperCallingCapabilityInfo;
- (id)thumperCallingLocalDeviceID;
- (id)thumperCallingProvisioningPostData;
- (int)thumperCallingProvisioningStatus;
- (id)thumperCallingProvisioningURL;
- (id)voLTECallingCapabilityInfo;
- (id)wiFiCallingCapabilityInfo;
- (id)wiFiCallingProvisioningPostData;
- (int)wiFiCallingProvisioningStatus;
- (id)wiFiCallingProvisioningURL;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
