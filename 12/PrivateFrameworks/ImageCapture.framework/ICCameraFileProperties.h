<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ICCameraFileProperties.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ImageCapture.framework/ICCameraFileProperties.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ImageCapture.framework/ImageCapture (1534.2)
 */

@interface ICCameraFileProperties : NSObject {
    bool  _burstFavorite;
    bool  _burstPicked;
    NSString * _burstUUID;
    NSString * _createdFilename;
    double  _duration;
    NSDate * _exifCreationDate;
    NSDate * _exifModificationDate;
    bool  _fetchingMetadata;
    bool  _fetchingThumbnail;
    NSDate * _fileCreationDate;
    NSDate * _fileModificationDate;
    long long  _fileSize;
    bool  _firstPicked;
    NSString * _groupUUID;
    bool  _hasMetadata;
    bool  _hasThumbnail;
    long long  _height;
    bool  _highFramerate;
    NSString * _mediaBase;
    NSDictionary * _mediaData;
    unsigned long long  _mediaMetadata;
    NSMutableDictionary * _metadata;
    unsigned long long  _oUUID;
    unsigned long long  _orientation;
    bool  _orientationOverridden;
    NSString * _originalFilename;
    struct CGImage { } * _originalThumbnail;
    NSString * _originatingAssetID;
    ICCameraFile * _pairedRawImage;
    bool  _raw;
    NSString * _relatedUUID;
    bool  _retrievedMetadata;
    bool  _retrievedThumbnail;
    NSMutableArray * _sidecarFiles;
    NSMutableDictionary * _subImages;
    struct CGImage { } * _thumbnail;
    bool  _timeLapse;
    unsigned long long  _uTime;
    long long  _width;
}

@property bool burstFavorite;
@property bool burstPicked;
@property (retain) NSString *burstUUID;
@property (retain) NSString *createdFilename;
@property (retain) NSDate *creationDate;
@property double duration;
@property (retain) NSDate *exifCreationDate;
@property (retain) NSDate *exifModificationDate;
@property bool fetchingMetadata;
@property bool fetchingThumbnail;
@property (retain) NSDate *fileCreationDate;
@property (retain) NSDate *fileModificationDate;
@property long long fileSize;
@property bool firstPicked;
@property (retain) NSString *groupUUID;
@property bool hasMetadata;
@property bool hasThumbnail;
@property long long height;
@property bool highFramerate;
@property (copy) NSString *mediaBase;
@property (retain) NSDictionary *mediaData;
@property unsigned long long mediaMetadata;
@property (retain) NSMutableDictionary *metadata;
@property (retain) NSDate *modificationDate;
@property unsigned long long oUUID;
@property unsigned long long orientation;
@property bool orientationOverridden;
@property (retain) NSString *originalFilename;
@property struct CGImage { }*originalThumbnail;
@property (retain) NSString *originatingAssetID;
@property (retain) ICCameraFile *pairedRawImage;
@property (getter=isRaw) bool raw;
@property (retain) NSString *relatedUUID;
@property bool retrievedMetadata;
@property bool retrievedThumbnail;
@property (retain) NSMutableArray *sidecarFiles;
@property (retain) NSMutableDictionary *subImages;
@property struct CGImage { }*thumbnail;
@property bool timeLapse;
@property unsigned long long uTime;
@property long long width;

- (bool)burstFavorite;
- (bool)burstPicked;
- (id)burstUUID;
- (id)createdFilename;
- (void)dealloc;
- (double)duration;
- (id)exifCreationDate;
- (id)exifModificationDate;
- (bool)fetchingMetadata;
- (bool)fetchingThumbnail;
- (id)fileCreationDate;
- (id)fileModificationDate;
- (long long)fileSize;
- (bool)firstPicked;
- (id)groupUUID;
- (bool)hasMetadata;
- (bool)hasThumbnail;
- (long long)height;
- (bool)highFramerate;
- (id)init;
- (bool)isRaw;
- (id)mediaBase;
- (id)mediaData;
- (unsigned long long)mediaMetadata;
- (id)metadata;
- (unsigned long long)oUUID;
- (unsigned long long)orientation;
- (bool)orientationOverridden;
- (id)originalFilename;
- (struct CGImage { }*)originalThumbnail;
- (id)originatingAssetID;
- (id)pairedRawImage;
- (id)relatedUUID;
- (bool)retrievedMetadata;
- (bool)retrievedThumbnail;
- (void)setBurstFavorite:(bool)arg1;
- (void)setBurstPicked:(bool)arg1;
- (void)setBurstUUID:(id)arg1;
- (void)setCreatedFilename:(id)arg1;
- (void)setDuration:(double)arg1;
- (void)setExifCreationDate:(id)arg1;
- (void)setExifModificationDate:(id)arg1;
- (void)setFetchingMetadata:(bool)arg1;
- (void)setFetchingThumbnail:(bool)arg1;
- (void)setFileCreationDate:(id)arg1;
- (void)setFileModificationDate:(id)arg1;
- (void)setFileSize:(long long)arg1;
- (void)setFirstPicked:(bool)arg1;
- (void)setGroupUUID:(id)arg1;
- (void)setHasMetadata:(bool)arg1;
- (void)setHasThumbnail:(bool)arg1;
- (void)setHeight:(long long)arg1;
- (void)setHighFramerate:(bool)arg1;
- (void)setMediaBase:(id)arg1;
- (void)setMediaData:(id)arg1;
- (void)setMediaMetadata:(unsigned long long)arg1;
- (void)setMetadata:(id)arg1;
- (void)setOUUID:(unsigned long long)arg1;
- (void)setOrientation:(unsigned long long)arg1;
- (void)setOrientationOverridden:(bool)arg1;
- (void)setOriginalFilename:(id)arg1;
- (void)setOriginalThumbnail:(struct CGImage { }*)arg1;
- (void)setOriginatingAssetID:(id)arg1;
- (void)setPairedRawImage:(id)arg1;
- (void)setRaw:(bool)arg1;
- (void)setRelatedUUID:(id)arg1;
- (void)setRetrievedMetadata:(bool)arg1;
- (void)setRetrievedThumbnail:(bool)arg1;
- (void)setSidecarFiles:(id)arg1;
- (void)setSubImages:(id)arg1;
- (void)setThumbnail:(struct CGImage { }*)arg1;
- (void)setTimeLapse:(bool)arg1;
- (void)setUTime:(unsigned long long)arg1;
- (void)setWidth:(long long)arg1;
- (id)sidecarFiles;
- (id)subImages;
- (struct CGImage { }*)thumbnail;
- (bool)timeLapse;
- (unsigned long long)uTime;
- (long long)width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
