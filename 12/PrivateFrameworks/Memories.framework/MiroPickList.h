<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroPickList.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroPickList.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroPickList : NSObject <NSCopying> {
    NSArray * _adjustedPickOrder;
    bool  _calculatingPickOrder;
    NSArray * _dateOrder;
    NSSet * _disallowedAssetIDs;
    NSDictionary * _freezeRanges;
    NSArray * _frozenAdjustedPickOrder;
    NSArray * _frozenSourceAssets;
    NSArray * _frozenSourceOrder;
    bool  _penalizeNonLocalAssets;
    NSSet * _photosCuratedAssetIDs;
    NSArray * _pickOrder;
    bool  _prioritizeCuratedSetAssets;
    NSSet * _requiredAssetIDs;
    NSArray * _scoreOrder;
    bool  _skipDistanceCalculation;
    NSArray * _sourceAssets;
    NSArray * _sourceOrder;
    NSDictionary * _specialInfo;
    NSArray * _splitOrder;
}

@property (nonatomic, retain) NSArray *adjustedPickOrder;
@property (nonatomic) bool calculatingPickOrder;
@property (nonatomic, readonly) int countAtOrAboveBadT;
@property (nonatomic, retain) NSArray *dateOrder;
@property (nonatomic, retain) NSSet *disallowedAssetIDs;
@property (nonatomic, retain) NSDictionary *freezeRanges;
@property (nonatomic, readonly) int freezeState;
@property (nonatomic, retain) NSArray *frozenAdjustedPickOrder;
@property (nonatomic, retain) NSArray *frozenSourceAssets;
@property (nonatomic, retain) NSArray *frozenSourceOrder;
@property (nonatomic, readonly) int idealCount;
@property (nonatomic, readonly) bool isCompelling;
@property (nonatomic) bool penalizeNonLocalAssets;
@property (nonatomic, retain) NSSet *photosCuratedAssetIDs;
@property (nonatomic, retain) NSArray *pickOrder;
@property (nonatomic) bool prioritizeCuratedSetAssets;
@property (nonatomic, retain) NSSet *requiredAssetIDs;
@property (nonatomic, retain) NSArray *scoreOrder;
@property (nonatomic) bool skipDistanceCalculation;
@property (nonatomic, retain) NSArray *sourceAssets;
@property (nonatomic, retain) NSArray *sourceOrder;
@property (nonatomic, copy) NSDictionary *specialInfo;
@property (nonatomic, retain) NSArray *splitOrder;

- (void).cxx_destruct;
- (void)_assignTrimRangesChronologicallyToPickInfos:(id)arg1;
- (id)_computeAdjustedPickOrder;
- (double)_fractionOfPickInfo:(id)arg1 coveredByRanges:(id)arg2;
- (id)_pickInfosForAssetID:(id)arg1;
- (void)_reset;
- (id)adjustedPickOrder;
- (id)assetsUpToSceneCount:(long long)arg1;
- (bool)calculateFreezeFromFrozenSourceAssets;
- (void)calculateFullPickList;
- (void)calculatePickListFromVPFrameworkResults;
- (bool)calculatingPickOrder;
- (id)classifications;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (int)countAtOrAboveBadT;
- (int)countAtTValue:(double)arg1;
- (id)dateOrder;
- (id)description;
- (id)disallowedAssetIDs;
- (id)expandVideoAssetsAndConvertToScenes:(id)arg1;
- (id)freezeRanges;
- (int)freezeState;
- (id)frozenAdjustedPickOrder;
- (id)frozenSourceAssets;
- (id)frozenSourceOrder;
- (id)highestScoringItemFromIndex:(long long)arg1 lookingRight:(bool)arg2;
- (id)highestScoringItemToTheLeftFromIndex:(long long)arg1;
- (id)highestScoringItemToTheRightFromIndex:(long long)arg1;
- (int)idealCount;
- (id)initWithAssets:(id)arg1;
- (bool)isCompelling;
- (id)mediaAnalyzer;
- (bool)penalizeNonLocalAssets;
- (id)people;
- (id)photosCuratedAssetIDs;
- (id)pickOrder;
- (id)pickOrderFromSourceOrder;
- (bool)prioritizeCuratedSetAssets;
- (id)rangesForAssets:(id)arg1;
- (id)requiredAssetIDs;
- (id)scenesUpToCount:(long long)arg1 localOnly:(bool)arg2;
- (id)scoreOrder;
- (void)setAdjustedPickOrder:(id)arg1;
- (void)setCalculatingPickOrder:(bool)arg1;
- (void)setDateOrder:(id)arg1;
- (void)setDisallowedAssetIDs:(id)arg1;
- (void)setFreezeRanges:(id)arg1;
- (void)setFrozenAdjustedPickOrder:(id)arg1;
- (void)setFrozenSourceAssets:(id)arg1;
- (void)setFrozenSourceOrder:(id)arg1;
- (void)setPenalizeNonLocalAssets:(bool)arg1;
- (void)setPhotosCuratedAssetIDs:(id)arg1;
- (void)setPickOrder:(id)arg1;
- (void)setPrioritizeCuratedSetAssets:(bool)arg1;
- (void)setRequiredAssetIDs:(id)arg1;
- (void)setScoreOrder:(id)arg1;
- (void)setSkipDistanceCalculation:(bool)arg1;
- (void)setSourceAssets:(id)arg1;
- (void)setSourceOrder:(id)arg1;
- (void)setSpecialInfo:(id)arg1;
- (void)setSplitOrder:(id)arg1;
- (bool)skipDistanceCalculation;
- (id)sourceAssets;
- (id)sourceOrder;
- (id)sourceOrderFromSourceAssets;
- (id)sourceOrderFromSourceAssetsViaNewAPI;
- (id)sourceOrderFromSourceAssetsViaNewAPIStoppingAtCompelling:(bool*)arg1;
- (id)sourceOrderFromSourceAssetsViaOldAPI;
- (id)specialInfo;
- (id)splitDistancesForAssetID:(id)arg1;
- (id)splitOrder;
- (void)updateAssetsWithSpecialInfo;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
