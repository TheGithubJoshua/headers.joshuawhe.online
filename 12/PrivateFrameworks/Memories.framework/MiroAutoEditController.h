<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroAutoEditController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroAutoEditController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroAutoEditController : NSObject <MiroAutoEditDelegate> {
    MiroMemory * _activeMemory;
    MiroRandomNumberGenerator * _kenBurnsRandomNumberGenerator;
    MiroAutoEditLogger * _logger;
    MovieController * _movieController;
    MiroAutoEditProjectPolish * _polisher;
    Project * _project;
    bool  _shouldBuildMovieController;
    bool  _shouldSkipPolish;
    MiroAutoEdit_TrimController * _trimController;
    NSMapTable * _trimRangeForClipMap;
}

@property (nonatomic, retain) MiroMemory *activeMemory;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) MiroRandomNumberGenerator *kenBurnsRandomNumberGenerator;
@property (nonatomic, retain) MiroAutoEditLogger *logger;
@property (nonatomic, retain) MovieController *movieController;
@property (nonatomic, retain) MiroAutoEditProjectPolish *polisher;
@property (nonatomic, retain) Project *project;
@property (nonatomic) bool shouldBuildMovieController;
@property (nonatomic) bool shouldSkipPolish;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool titleIsSupported;
@property (nonatomic, retain) MiroAutoEdit_TrimController *trimController;
@property (nonatomic, retain) NSMapTable *trimRangeForClipMap;

+ (id)localImageRequestOptions;
+ (struct CGSize { double x1; double x2; })titleCardAssetSize;

- (void).cxx_destruct;
- (id)_addPhotoAsset:(id)arg1 assetRep:(id)arg2 project:(id)arg3;
- (id)_addProjectPlaceholderWithScenes:(id)arg1 name:(id)arg2 progressHandler:(id /* block */)arg3;
- (bool)_applyBackgroundMusicWithClip:(id)arg1;
- (void)_applySpeedRangesToClip:(id)arg1 asset:(id)arg2 previousClip:(id)arg3;
- (id)_fetchMediaItemForMediaID:(unsigned long long)arg1;
- (id)_fetchStoreItemForMediaID:(unsigned long long)arg1;
- (void)_finishPolisher;
- (void)_incrementCountForKey:(id)arg1 inDictionary:(id)arg2;
- (id)_makePolisher;
- (void)_removeSpeedRampFromBeginningOfClip:(id)arg1;
- (void)_removeSpeedRampFromEndOfClip:(id)arg1;
- (void)_updateSelectedRangeOfClip:(id)arg1 withScene:(id)arg2;
- (id)activeMemory;
- (void)applyAutomaticThemeTitleToFirstClip;
- (bool)applyBackgroundMusicWithMediaItem:(id)arg1;
- (bool)applyBackgroundMusicWithSong:(id)arg1;
- (void)applyMusic:(id)arg1;
- (void)autoEditProjectFromMemory:(id)arg1 progressHandler:(id /* block */)arg2 completionHandler:(id /* block */)arg3;
- (void)autoEditToDuration:(int)arg1;
- (id)clipForAsset:(id)arg1 project:(id)arg2;
- (id)kenBurnsRandomNumberGenerator;
- (id)logger;
- (id)movieController;
- (id)polisher;
- (id)project;
- (void)setActiveMemory:(id)arg1;
- (void)setKenBurnsRandomNumberGenerator:(id)arg1;
- (void)setLogger:(id)arg1;
- (void)setMovieController:(id)arg1;
- (void)setPolisher:(id)arg1;
- (void)setProject:(id)arg1;
- (void)setShouldBuildMovieController:(bool)arg1;
- (void)setShouldSkipPolish:(bool)arg1;
- (void)setTrimController:(id)arg1;
- (void)setTrimRange:(id)arg1 forClip:(id)arg2;
- (void)setTrimRangeForClipMap:(id)arg1;
- (bool)shouldBuildMovieController;
- (bool)shouldSkipPolish;
- (bool)titleIsSupported;
- (id)trimController;
- (id)trimRangeForClip:(id)arg1;
- (id)trimRangeForClipMap;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
