<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroAnalysisAudioHelpers.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroAnalysisAudioHelpers.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroAnalysisAudioHelpers : NSObject {
    struct OpaqueAudioComponentInstance { } * _audioUnitEPVAD;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentRangeStartTime;
    struct AUOutputBL { struct CAStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; char *x2; struct AudioBufferList {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; } * _floatAudioBufferList;
    bool  _initializedAudioUnit;
    struct AUOutputBL { struct CAStreamBasicDescription { double x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; unsigned int x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; unsigned int x_1_1_8; unsigned int x_1_1_9; } x1; char *x2; struct AudioBufferList {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; } * _intAudioBufferList;
    struct LkFsMeasure { unsigned int x1; unsigned int x2; long long x3; bool x4; unsigned int x5; unsigned int x6; double x7; double x8; double x9; double x10; long long x11; long long x12; unsigned int x13; unsigned int x14; unsigned int x15; float x16[30][6]; float *x17; float *x18; float *x19; struct DspLibBiquad {} *x20; struct DspLibBiquad {} *x21; } * _loudnessAnalyzer;
    struct vector<float, std::__1::allocator<float> > { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::__1::allocator<float> > { 
            float *__value_; 
        } __end_cap_; 
    }  _loudnessSampleBuffer;
    struct vector<double, std::__1::allocator<double> > { 
        double *__begin_; 
        double *__end_; 
        struct __compressed_pair<double *, std::__1::allocator<double> > { 
            double *__value_; 
        } __end_cap_; 
    }  _momentaryEnergyValues;
    unsigned int  _numberOfSamplesPerBuffer;
    float  _peakValue;
    struct CAStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; } * _processFormat;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _recordingEndTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _recordingStartTime;
    struct AUTimestampGenerator { struct AudioTimeStamp { double x_1_1_1; unsigned long long x_1_1_2; double x_1_1_3; unsigned long long x_1_1_4; struct SMPTETime { short x_5_2_1; short x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; short x_5_2_6; short x_5_2_7; short x_5_2_8; short x_5_2_9; } x_1_1_5; unsigned int x_1_1_6; unsigned int x_1_1_7; } x1; double x2; double x3; struct AudioTimeStamp { double x_4_1_1; unsigned long long x_4_1_2; double x_4_1_3; unsigned long long x_4_1_4; struct SMPTETime { short x_5_2_1; short x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; short x_5_2_6; short x_5_2_7; short x_5_2_8; short x_5_2_9; } x_4_1_5; unsigned int x_4_1_6; unsigned int x_4_1_7; } x4; struct AudioTimeStamp { double x_5_1_1; unsigned long long x_5_1_2; double x_5_1_3; unsigned long long x_5_1_4; struct SMPTETime { short x_5_2_1; short x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; short x_5_2_6; short x_5_2_7; short x_5_2_8; short x_5_2_9; } x_5_1_5; unsigned int x_5_1_6; unsigned int x_5_1_7; } x5; } * _timeGenerator;
    NSArray * _timeRanges;
    long long  projectNaturalFrameRate;
}

@property (nonatomic) long long projectNaturalFrameRate;
@property (nonatomic) NSArray *timeRanges;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_outputLoudnessRangeWithDetectionTime:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (id)_outputVoiceRangeWithDetectionTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (bool)_processAudioSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 options:(unsigned long long)arg2 voiceRange:(id*)arg3;
- (bool)_processFloatBufferWithNumberOfFrames:(long long)arg1 options:(unsigned long long)arg2 voiceRange:(id*)arg3;
- (void)_processSamplesForPeaksAndLoudness:(float*)arg1 numberOfFrames:(unsigned int)arg2 sampleRate:(float)arg3;
- (int)_setPropertiesWithNumberOfSamplesPerBuffer:(unsigned int)arg1;
- (bool)_setupAndStartReadingTrack:(id)arg1 usingTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2 outputSettings:(id)arg3 assetReader:(id*)arg4 trackOutput:(id*)arg5 error:(id*)arg6;
- (bool)_startLoudnessDetection;
- (bool)_startProcessingWithStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 audioStreamDescription:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })arg2 numberOfSamplesPerBuffer:(unsigned int)arg3;
- (bool)_startVoiceDetection;
- (void)_stopDetectingLoudnessWithTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 loudnessRanges:(id*)arg2;
- (void)_stopDetectingVoiceWithEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 lastVoiceRanges:(id*)arg2;
- (void)_stopProcessing;
- (void)dealloc;
- (id)init;
- (void)processAVAsset:(id)arg1 options:(unsigned long long)arg2 progressHandler:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (long long)projectNaturalFrameRate;
- (void)setProjectNaturalFrameRate:(long long)arg1;
- (void)setTimeRanges:(id)arg1;
- (id)timeRanges;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
