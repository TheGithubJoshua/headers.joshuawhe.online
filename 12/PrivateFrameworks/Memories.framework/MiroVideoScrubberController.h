<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroVideoScrubberController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroVideoScrubberController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroVideoScrubberController : NSObject {
    MiroScrubberSeekRequest * __activeSeekRequest;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  __avPlayerCurrentTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  __avPlayerDuration;
    MiroScrubberSeekRequest * __pendingSeekRequest;
    double  __playheadTime;
    AVPlayer * _avPlayer;
    bool  _avPlayerCurrentTimeNeedsUpdate;
    bool  _avPlayerDurationNeedsUpdate;
    <MiroVideoScrubberControllerDelegate> * _delegate;
    double  _estimatedDuration;
    bool  _needsUpdate;
    id  _playerObserver;
    struct { 
        bool respondsToDidUpdate; 
        bool respondsToLengthForDuration; 
        bool respondsToDesiredSeekTime; 
    }  _videoScrubberDelegateFlags;
}

@property (setter=_setActiveSeekRequest:, nonatomic, retain) MiroScrubberSeekRequest *_activeSeekRequest;
@property (setter=_setAvPlayerCurrentTime:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } _avPlayerCurrentTime;
@property (setter=_setAvPlayerDuration:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } _avPlayerDuration;
@property (setter=_setPendingSeekRequest:, nonatomic, retain) MiroScrubberSeekRequest *_pendingSeekRequest;
@property (setter=_setPlayheadTime:, nonatomic) double _playheadTime;
@property (nonatomic, readonly) AVPlayer *avPlayer;
@property (nonatomic) <MiroVideoScrubberControllerDelegate> *delegate;
@property (nonatomic, readonly) double estimatedDuration;
@property (nonatomic, readonly) double length;
@property (nonatomic) double playheadProgress;

- (void).cxx_destruct;
- (id)_activeSeekRequest;
- (void)_addObservers;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_avPlayerCurrentTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_avPlayerDuration;
- (double)_duration;
- (void)_handleTimeoutCallbackForSeekRequest:(id)arg1;
- (void)_invalidate;
- (void)_invalidateAvPlayerCurrentTime;
- (void)_invalidateAvPlayerDuration;
- (double)_lengthForDuration:(double)arg1;
- (void)_loadedDurationDidChange;
- (id)_pendingSeekRequest;
- (void)_playerDidChange:(id)arg1;
- (void)_playerItemDurationDidChange;
- (void)_playerItemStatusDidChange;
- (void)_playerStatusDidChange;
- (double)_playheadTime;
- (double)_progressForTime:(double)arg1;
- (void)_removeObservers;
- (void)_seekRequest:(id)arg1 didFinish:(bool)arg2;
- (void)_seekToTime:(double)arg1;
- (void)_setActiveSeekRequest:(id)arg1;
- (void)_setAvPlayerCurrentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setAvPlayerDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setPendingSeekRequest:(id)arg1;
- (void)_setPlayheadProgress:(double)arg1 andSeekVideoPlayer:(bool)arg2;
- (void)_setPlayheadTime:(double)arg1;
- (double)_timeForProgress:(double)arg1;
- (void)_updateAvPlayerCurrentTimeIfNeeded;
- (void)_updateAvPlayerDurationIfNeeded;
- (void)_updateIfNeeded;
- (void)_updateSeeking;
- (id)avPlayer;
- (void)dealloc;
- (id)delegate;
- (double)estimatedDuration;
- (id)init;
- (id)initWithAvPlayer:(id)arg1 estimatedDuration:(double)arg2;
- (double)length;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (double)playheadProgress;
- (void)setDelegate:(id)arg1;
- (void)setPlayheadProgress:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
