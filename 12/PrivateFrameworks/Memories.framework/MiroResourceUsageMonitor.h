<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroResourceUsageMonitor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroResourceUsageMonitor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroResourceUsageMonitor : NSObject {
    long long  __initialPeakResidentMemoryBytes;
    long long  __initialPeakResidentMemoryKBytes;
    long long  __initialResidentMemoryBytes;
    long long  __initialResidentMemoryKBytes;
    bool  __isRunning;
    NSObject<OS_dispatch_queue> * __isolationQueue;
    long long  __maxResidentMemoryBytes;
    long long  __maxResidentMemoryKBytes;
    long long  __memoryUsage;
    long long  __peakMemoryUsage;
    NSObject<OS_dispatch_source> * __pollingTimer;
    double  __processorUsage;
    struct rusage { 
        struct timeval { 
            long long tv_sec; 
            int tv_usec; 
        } ru_utime; 
        struct timeval { 
            long long tv_sec; 
            int tv_usec; 
        } ru_stime; 
        long long ru_maxrss; 
        long long ru_ixrss; 
        long long ru_idrss; 
        long long ru_isrss; 
        long long ru_minflt; 
        long long ru_majflt; 
        long long ru_nswap; 
        long long ru_inblock; 
        long long ru_oublock; 
        long long ru_msgsnd; 
        long long ru_msgrcv; 
        long long ru_nsignals; 
        long long ru_nvcsw; 
        long long ru_nivcsw; 
    }  __rusageStart;
    double  __timeStart;
}

@property (nonatomic) long long _initialPeakResidentMemoryKBytes;
@property (nonatomic) long long _initialResidentMemoryKBytes;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *_isolationQueue;
@property (nonatomic) long long _maxResidentMemoryKBytes;
@property (nonatomic, retain) NSObject<OS_dispatch_source> *_pollingTimer;
@property (nonatomic) struct rusage { struct timeval { long long x_1_1_1; int x_1_1_2; } x1; struct timeval { long long x_2_1_1; int x_2_1_2; } x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; long long x9; long long x10; long long x11; long long x12; long long x13; long long x14; long long x15; long long x16; } _rusageStart;
@property (nonatomic) double _timeStart;
@property (nonatomic, readonly) long long memoryUsage;
@property (nonatomic, readonly) double processorUsage;

+ (long long)_getResidentMemoryKBytes:(long long*)arg1;
+ (id)sharedResourceUsageMonitor;

- (void).cxx_destruct;
- (long long)_initialPeakResidentMemoryKBytes;
- (long long)_initialResidentMemoryKBytes;
- (void)_inqueue_start;
- (void)_inqueue_stop;
- (id)_isolationQueue;
- (long long)_maxResidentMemoryKBytes;
- (id)_pollingTimer;
- (struct rusage { struct timeval { long long x_1_1_1; int x_1_1_2; } x1; struct timeval { long long x_2_1_1; int x_2_1_2; } x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; long long x9; long long x10; long long x11; long long x12; long long x13; long long x14; long long x15; long long x16; })_rusageStart;
- (double)_timeStart;
- (void)dealloc;
- (id)description;
- (id)init;
- (bool)isRunning;
- (long long)memoryUsage;
- (double)processorUsage;
- (void)set_initialPeakResidentMemoryKBytes:(long long)arg1;
- (void)set_initialResidentMemoryKBytes:(long long)arg1;
- (void)set_isolationQueue:(id)arg1;
- (void)set_maxResidentMemoryKBytes:(long long)arg1;
- (void)set_pollingTimer:(id)arg1;
- (void)set_rusageStart:(struct rusage { struct timeval { long long x_1_1_1; int x_1_1_2; } x1; struct timeval { long long x_2_1_1; int x_2_1_2; } x2; long long x3; long long x4; long long x5; long long x6; long long x7; long long x8; long long x9; long long x10; long long x11; long long x12; long long x13; long long x14; long long x15; long long x16; })arg1;
- (void)set_timeStart:(double)arg1;
- (bool)start;
- (bool)stop;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
