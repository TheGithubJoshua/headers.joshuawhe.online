<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroMemoryPosterGenerator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroMemoryPosterGenerator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroMemoryPosterGenerator : NSObject {
    MiroPosterEffectPool * _posterEffectPool;
    NSOperationQueue * _posterSchedulingManager;
    NSMutableArray * _requests;
    NSLock * _requestsLock;
    MiroPosterGenerationStats * _runningAverage;
    NSMutableArray * _stats;
    NSLock * _statsLock;
}

+ (struct CGSize { double x1; double x2; })defaultPosterSize;
+ (id)localImageRequestOptions;
+ (id)networkImageRequestOptions;
+ (id)stringForState:(int)arg1;

- (void).cxx_destruct;
- (void)_addCompletedStats:(id)arg1;
- (bool)_addNewRequestToQueue:(id)arg1;
- (void)_clearCaches;
- (id)_croppedSourceImage:(id)arg1 forKeyAsset:(id)arg2;
- (id)_encodePosterImageToJPEG:(id)arg1 timeToEncode:(double*)arg2;
- (void)_handlePosterGenerationWithImage:(id)arg1 posterRequest:(id)arg2 miroSchedulingRequest:(id)arg3 miroSchedulingCompletionHandler:(id /* block */)arg4 posterGenerationCompletionHandler:(id /* block */)arg5 posterGenerationInfo:(id)arg6 posterStats:(id)arg7 startPosterRequestTime:(unsigned long long)arg8 startGetQualityImageTime:(unsigned long long)arg9;
- (id)_newprepInputImageForPoster:(id)arg1 keyAsset:(id)arg2;
- (id)_prepInputImageForPoster:(id)arg1 keyAsset:(id)arg2;
- (void)_removeRequestFromQueue:(id)arg1;
- (id)_resizedAndNormalizedImage:(id)arg1;
- (id)_scaleAndCropSourceImageForPosterTitle:(id)arg1;
- (void)_scheduleLocalImageRequestAndRender:(id)arg1 schedulingPriority:(long long)arg2 posterGenerationCompletionHandler:(id /* block */)arg3;
- (void)_scheduleNetworkImageDownloadAndRender:(id)arg1 schedulingPriority:(long long)arg2 posterGenerationCompletionHandler:(id /* block */)arg3 localSchedulingRequest:(id)arg4 posterStats:(id)arg5 startPosterRequestTime:(double)arg6;
- (void)_scheduleOverrideKeyAssetImageRender:(id)arg1 schedulingPriority:(long long)arg2 posterGenerationCompletionHandler:(id /* block */)arg3;
- (id)_titleEffectForPosterRequest:(id)arg1 stats:(id)arg2;
- (id)_titleEffectForTitleDefinition:(id)arg1;
- (void)cancelMemoryPosterRequest:(id)arg1 forAllRequests:(bool)arg2;
- (void)cancelPendingRequests;
- (void)cleanCaches;
- (void)dealloc;
- (void)didEnterBackgroundNotification:(id)arg1;
- (id)encodePosterImageToJPEG:(id)arg1;
- (void)generatePosterForMemory:(id)arg1 options:(id)arg2 priority:(long long)arg3 withCompletionHandler:(id /* block */)arg4;
- (id)init;
- (void)memoryWarningNotification:(id)arg1;
- (void)posterImageForTitle:(id)arg1 subtitle:(id)arg2 effectID:(id)arg3 parametersDictionary:(id)arg4 moodID:(id)arg5 inputImage:(id)arg6 outputSize:(struct CGSize { double x1; double x2; })arg7 withCompletionHandler:(id /* block */)arg8;
- (void)preloadPooledEffects:(id)arg1;
- (id)prepPosterInputForKeyAsset:(id)arg1;
- (void)printStatsAndClear:(bool)arg1;
- (unsigned long long)requestsCount;
- (void)resumeBackgroundTasksNotification:(id)arg1;
- (void)resumePosterGeneration;
- (void)suspendBackgroundTasksNotification:(id)arg1;
- (void)suspendPosterGeneration;
- (void)willEnterForegroundNotification:(id)arg1;
- (void)willTerminateNotification:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
