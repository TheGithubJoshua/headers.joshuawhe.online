<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EditListCompositionState.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/EditListCompositionState.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface EditListCompositionState : NSObject <NSCopying> {
    CompositionTrackGroup * m_alternateTrackGroup;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  m_audioCompTimeRange;
    int  m_audioEndOffset;
    int  m_audioStartOffset;
    KonaClip * m_clip;
    struct CGSize { 
        double width; 
        double height; 
    }  m_clipNaturalSize;
    bool  m_clipRequiresCA;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  m_clipTransform;
    int  m_clipType;
    float  m_clipVolume;
    CompositionTrackGroup * m_currentTrackGroup;
    KonaClip * m_nextClip;
    struct CGSize { 
        double width; 
        double height; 
    }  m_nextClipNaturalSize;
    bool  m_nextClipRequiresCA;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  m_nextClipTransform;
    int  m_nextClipType;
    float  m_nextClipVolume;
    KonaClip * m_previousClip;
    struct CGSize { 
        double width; 
        double height; 
    }  m_previousClipNaturalSize;
    bool  m_previousClipRequiresCA;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  m_previousClipTransform;
    int  m_previousClipType;
    float  m_previousClipVolume;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  m_videoCompTimeRange;
}

@property (nonatomic, retain) CompositionTrackGroup *alternateTrackGroup;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } audioCompTimeRange;
@property (nonatomic) int audioEndOffset;
@property (nonatomic) int audioStartOffset;
@property (nonatomic) KonaClip *clip;
@property (nonatomic) struct CGSize { double x1; double x2; } clipNaturalSize;
@property (nonatomic) bool clipRequiresCA;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } clipTransform;
@property (nonatomic, readonly) int clipType;
@property (nonatomic) float clipVolume;
@property (nonatomic, retain) CompositionTrackGroup *currentTrackGroup;
@property (nonatomic) KonaClip *nextClip;
@property (nonatomic) struct CGSize { double x1; double x2; } nextClipNaturalSize;
@property (nonatomic) bool nextClipRequiresCA;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } nextClipTransform;
@property (nonatomic, readonly) int nextClipType;
@property (nonatomic) float nextClipVolume;
@property (nonatomic) KonaClip *previousClip;
@property (nonatomic) struct CGSize { double x1; double x2; } previousClipNaturalSize;
@property (nonatomic) bool previousClipRequiresCA;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } previousClipTransform;
@property (nonatomic, readonly) int previousClipType;
@property (nonatomic) float previousClipVolume;
@property (nonatomic) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } videoCompTimeRange;

- (id)alternateTrackGroup;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })audioCompTimeRange;
- (int)audioEndOffset;
- (int)audioStartOffset;
- (id)clip;
- (struct CGSize { double x1; double x2; })clipNaturalSize;
- (bool)clipRequiresCA;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })clipTransform;
- (int)clipType;
- (float)clipVolume;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentTrackGroup;
- (void)dealloc;
- (id)nextClip;
- (struct CGSize { double x1; double x2; })nextClipNaturalSize;
- (bool)nextClipRequiresCA;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })nextClipTransform;
- (int)nextClipType;
- (float)nextClipVolume;
- (id)previousClip;
- (struct CGSize { double x1; double x2; })previousClipNaturalSize;
- (bool)previousClipRequiresCA;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })previousClipTransform;
- (int)previousClipType;
- (float)previousClipVolume;
- (void)setAlternateTrackGroup:(id)arg1;
- (void)setAudioCompTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)setAudioEndOffset:(int)arg1;
- (void)setAudioStartOffset:(int)arg1;
- (void)setClip:(id)arg1;
- (void)setClipNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setClipRequiresCA:(bool)arg1;
- (void)setClipTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setClipVolume:(float)arg1;
- (void)setCurrentTrackGroup:(id)arg1;
- (void)setNextClip:(id)arg1;
- (void)setNextClipNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setNextClipRequiresCA:(bool)arg1;
- (void)setNextClipTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setNextClipVolume:(float)arg1;
- (void)setPreviousClip:(id)arg1;
- (void)setPreviousClipNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPreviousClipRequiresCA:(bool)arg1;
- (void)setPreviousClipTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setPreviousClipVolume:(float)arg1;
- (void)setVideoCompTimeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (void)swapForTransition;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })videoCompTimeRange;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
