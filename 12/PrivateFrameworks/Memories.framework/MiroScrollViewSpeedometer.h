<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroScrollViewSpeedometer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroScrollViewSpeedometer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroScrollViewSpeedometer : NSObject {
    struct CGPoint { 
        double x; 
        double y; 
    }  __lastContentOffset;
    struct CGSize { 
        double width; 
        double height; 
    }  __lastContentSize;
    UIScrollView * __lastScrollView;
    double  __lastTime;
    long long  __nextRegime;
    long long  __nextRegimeCount;
    NSTimer * __timeoutTimer;
    <MiroScrollViewSpeedometerDelegate> * _delegate;
    bool  _delegateSupportsRegimeChange;
    double  _fastLowerThreshold;
    double  _fastUpperThreshold;
    double  _mediumLowerThreshold;
    double  _mediumUpperThreshold;
    long long  _regime;
    struct CGPoint { 
        double x; 
        double y; 
    }  _scrollSpeed;
}

@property (setter=_setLastContentOffset:, nonatomic) struct CGPoint { double x1; double x2; } _lastContentOffset;
@property (setter=_setLastContentSize:, nonatomic) struct CGSize { double x1; double x2; } _lastContentSize;
@property (setter=_setLastScrollView:, nonatomic) UIScrollView *_lastScrollView;
@property (setter=_setLastTime:, nonatomic) double _lastTime;
@property (setter=_setNextRegime:, nonatomic) long long _nextRegime;
@property (setter=_setNextRegimeCount:, nonatomic) long long _nextRegimeCount;
@property (setter=_setTimeoutTimer:, nonatomic, retain) NSTimer *_timeoutTimer;
@property (nonatomic) <MiroScrollViewSpeedometerDelegate> *delegate;
@property (nonatomic) double fastLowerThreshold;
@property (nonatomic) double fastUpperThreshold;
@property (nonatomic) double mediumLowerThreshold;
@property (nonatomic) double mediumUpperThreshold;
@property (setter=_setRegime:, nonatomic) long long regime;
@property (setter=_setScrollSpeed:, nonatomic) struct CGPoint { double x1; double x2; } scrollSpeed;

- (void).cxx_destruct;
- (void)_handleTimeoutTimer:(id)arg1;
- (struct CGPoint { double x1; double x2; })_lastContentOffset;
- (struct CGSize { double x1; double x2; })_lastContentSize;
- (id)_lastScrollView;
- (double)_lastTime;
- (long long)_newRegimeForScrollSpeed:(struct CGPoint { double x1; double x2; })arg1;
- (long long)_nextRegime;
- (long long)_nextRegimeCount;
- (void)_rescheduleTimeout;
- (void)_setLastContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setLastContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_setLastScrollView:(id)arg1;
- (void)_setLastTime:(double)arg1;
- (void)_setNextRegime:(long long)arg1;
- (void)_setNextRegimeCount:(long long)arg1;
- (void)_setRegime:(long long)arg1;
- (void)_setScrollSpeed:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setTimeoutTimer:(id)arg1;
- (id)_timeoutTimer;
- (id)delegate;
- (double)fastLowerThreshold;
- (double)fastUpperThreshold;
- (double)mediumLowerThreshold;
- (double)mediumUpperThreshold;
- (long long)regime;
- (struct CGPoint { double x1; double x2; })scrollSpeed;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillScrollToTop:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFastLowerThreshold:(double)arg1;
- (void)setFastUpperThreshold:(double)arg1;
- (void)setMediumLowerThreshold:(double)arg1;
- (void)setMediumUpperThreshold:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
