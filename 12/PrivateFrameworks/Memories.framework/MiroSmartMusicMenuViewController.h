<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MiroSmartMusicMenuViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Memories.framework/MiroSmartMusicMenuViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Memories.framework/Memories (4267.0.31)
 */

@interface MiroSmartMusicMenuViewController : UITableViewController {
    FMSong * _currentSong;
    NSObject<OS_dispatch_queue> * _downloadQueue;
    NSDictionary * _entryIDsByMood;
    MiroMemory * _memory;
    bool  _observingAppWillResign;
    id  _playbackObserver;
    AVPlayer * _player;
    long long  _selectedRow;
    long long  _selectedSection;
    FMSong * _selectedSong;
    NSArray * _sortedMoodIDs;
    id  _timeObserver;
    <MiroMemoryEditorToolbarOwner> * _toolbarOwner;
}

@property (nonatomic, retain) FMSong *currentSong;
@property (nonatomic, retain) NSDictionary *entryIDsByMood;
@property (nonatomic, retain) MiroMemory *memory;
@property (nonatomic, readonly) NSString *moodID;
@property (nonatomic) bool observingAppWillResign;
@property (nonatomic, retain) id playbackObserver;
@property (nonatomic, retain) AVPlayer *player;
@property (nonatomic) long long selectedRow;
@property (nonatomic) long long selectedSection;
@property (nonatomic, retain) FMSong *selectedSong;
@property (nonatomic, retain) NSArray *sortedMoodIDs;
@property (nonatomic, retain) id timeObserver;
@property (nonatomic) <MiroMemoryEditorToolbarOwner> *toolbarOwner;

- (void).cxx_destruct;
- (void)_addObserverForAppWillResign;
- (void)_addObserverForAvalaibleSongChange;
- (void)_addObserverForPlaybackEnded;
- (void)_addObserverForTextSizeDidChange;
- (void)_applicationWillResign;
- (id)_displayNameForMoodID:(id)arg1;
- (id)_indexPathForEntryID:(id)arg1;
- (void)_invalidateAutoEdit;
- (id)_moodIDForSection:(long long)arg1;
- (void)_pausePreview;
- (void)_postProgressUpdate:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_previewSong:(id)arg1;
- (void)_removeObserverForAppWillResign;
- (void)_removeObserverForPlaybackEnded;
- (id)_sectionIDToSortedSongUUIDsMapping;
- (id)_selectedTableViewCell;
- (bool)_setSelectedSection:(long long)arg1 andRow:(long long)arg2;
- (id)_sortedMoodIDs;
- (bool)canBecomeFirstResponder;
- (id)currentSong;
- (void)didReceiveMemoryWarning;
- (id)entryIDsByMood;
- (id)memory;
- (id)moodID;
- (void)motionEnded:(long long)arg1 withEvent:(id)arg2;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (bool)observingAppWillResign;
- (id)playbackObserver;
- (id)player;
- (void)scrollToSelectedIndexPath;
- (long long)selectedRow;
- (long long)selectedSection;
- (id)selectedSong;
- (void)setCurrentSong:(id)arg1;
- (void)setEntryIDsByMood:(id)arg1;
- (void)setMemory:(id)arg1;
- (void)setObservingAppWillResign:(bool)arg1;
- (void)setPlaybackObserver:(id)arg1;
- (void)setPlayer:(id)arg1;
- (void)setSelectedRow:(long long)arg1;
- (void)setSelectedSection:(long long)arg1;
- (void)setSelectedSong:(id)arg1;
- (void)setSortedMoodIDs:(id)arg1;
- (void)setTimeObserver:(id)arg1;
- (void)setToolbarOwner:(id)arg1;
- (void)setup;
- (id)sortedMoodIDs;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (id)tableView:(id)arg1 viewForHeaderInSection:(long long)arg2;
- (id)timeObserver;
- (id)toolbarOwner;
- (void)userTextSizeDidChange;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
