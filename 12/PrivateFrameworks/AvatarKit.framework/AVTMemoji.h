<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVTMemoji.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AvatarKit.framework/AVTMemoji.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit
 */

@interface AVTMemoji : AVTAvatar {
    bool  _aoValid;
    struct UIColor { Class x1; } * _backgroundColor;
    double  _browsThickness;
    AVTColorPreset * _colorPresets;
    struct CGImage { } * _combinedAOImage;
    struct CGImage { } * _combinedHairImage;
    struct CGImage { } * _combinedSkinImage;
    SCNNode * _componentContainer;
    unsigned int  _componentDirtyMask;
    AVTComponentInstance * _componentInstances;
    AVTComponent * _components;
    NSString * _currentHatVariant;
    SCNMaterial * _eyeMaterial;
    double  _eyeRoundness;
    SCNNode * _eyelashes;
    SCNNode * _eyesAndMouth;
    NSDictionary * _eyesAndMouthSpecializationSettings;
    NSString * _faceMorphVariants;
    double  _hairOrientation;
    bool  _hairPhysicsDisabled;
    double  _hairSideLength;
    double  _hairTopLength;
    bool  _ignoreRigsDidChange;
    struct UIColor { Class x1; } * _lipsColor;
    struct CGImage { } * _lipsMaskImage;
    double  _lowerLipThickness;
    struct CGImage { } * _mouthInsideImage;
    bool  _needsUpdate;
    double  _noseDirection;
    double  _noseSharpness;
    bool  _overrideFlags;
    AVTPreset * _presets;
    AVTPreset * _resolvedPresets;
    AVTRig * _rigs;
    AVTColorPreset * _secondaryColorPresets;
    AVTMemojiSkeleton * _skeleton;
    NSDictionary * _specializationSettings;
    double  _upperLipThickness;
}

+ (unsigned char)classIdentifier;
+ (id)memoji;
+ (id)memojiWithContentsOfURL:(id)arg1 error:(id*)arg2;
+ (id)memojiWithData:(id)arg1 error:(id*)arg2;
+ (id)neutralMemoji;
+ (id)neutralMemojiDataRepresentation;
+ (float)rnd;
+ (struct UIColor { Class x1; }*)rndColor;
+ (unsigned long long)rndIndex:(unsigned long long)arg1;
+ (float)rndRange:(float)arg1 :(float)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_applyColorPreset:(long long)arg1;
- (void)_applySecondaryColorPreset:(long long)arg1;
- (bool)_decode:(id)arg1 error:(id*)arg2;
- (void)_encode:(id)arg1;
- (bool)_headMayContainsMorphTargetNamed:(id)arg1;
- (void)_invalidateAOImage;
- (void)_invalidateHairImage;
- (void)_invalidateSkin;
- (id)_morphVariantsWithComponentType:(long long)arg1 containingName:(id)arg2;
- (void)_removeComponent:(id)arg1;
- (void)_update;
- (void)_updateAO;
- (struct SCNVector3 { float x1; float x2; float x3; })absolutePositionForRigElevation:(double)arg1 spacing:(double)arg2 symmetry:(bool)arg3;
- (void)addComponent:(id)arg1;
- (void)addComponentAssetNode:(id)arg1 toNode:(id)arg2;
- (void)applyRigConstraints;
- (void)applyVariantDependencies;
- (void)arOffset;
- (float)arScale;
- (void)avatarRigsDidChange:(id)arg1;
- (struct UIColor { Class x1; }*)backgroundColor;
- (id)bonesForRig:(id)arg1;
- (double)browsThickness;
- (id)colorPresetForCategory:(long long)arg1;
- (void)commonInit;
- (void)componentDidChange:(id)arg1;
- (void)componentMaterialDidUpdate:(id)arg1;
- (id)componentWithType:(long long)arg1;
- (id)components;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct CGImage { }*)createCombinedHairImage;
- (struct CGImage { }*)createSkinAO;
- (struct CGImage { }*)createSkinImage;
- (void)dealloc;
- (double)eyeRoundness;
- (struct UIColor { Class x1; }*)eyebrowsColor;
- (struct UIColor { Class x1; }*)facialhairColor;
- (void)getRigValues:(id)arg1 symmetry:(bool)arg2 withBone:(id)arg3 spacingOut:(double*)arg4 elevationOut:(double*)arg5 scaleOut:(double*)arg6 rotationOut:(double*)arg7;
- (struct UIColor { Class x1; }*)hairColor;
- (double)hairOrientation;
- (double)hairSideLength;
- (double)hairTopLength;
- (id)init;
- (id)initWithData:(id)arg1 error:(id*)arg2;
- (void)invalidate;
- (struct UIColor { Class x1; }*)lipsColor;
- (double)lowerLipThickness;
- (void)morphTo:(id)arg1;
- (void)morphVariantForComponentType:(long long)arg1 facialFeature:(long long)arg2 didChangeWithVariantName:(id)arg3;
- (id)morphVariantForFacialFeature:(long long)arg1;
- (id)morphVariantsForFacialFeature:(long long)arg1;
- (double)noseDirection;
- (double)noseSharpness;
- (id)presetForCategory:(long long)arg1;
- (void)randomize;
- (void)rebuildSpecializationSettings;
- (void)releaseCaches;
- (void)removeAllComponents;
- (void)removeComponent:(id)arg1;
- (void)removeComponentAssetNodeFromParentNode:(id)arg1;
- (void)removeComponentWithType:(long long)arg1;
- (void)resetToDefault;
- (id)rigWithType:(long long)arg1;
- (id)rigs;
- (id)secondaryColorPresetForCategory:(long long)arg1;
- (void)setBackgroundColor:(struct UIColor { Class x1; }*)arg1;
- (void)setBrowsThickness:(double)arg1;
- (void)setColorPreset:(id)arg1 forCategory:(long long)arg2;
- (void)setEyeRoundness:(double)arg1;
- (void)setHairOrientation:(double)arg1;
- (void)setHairSideLength:(double)arg1;
- (void)setHairTopLength:(double)arg1;
- (void)setInstance:(id)arg1 forComponentType:(long long)arg2;
- (void)setLipsColor:(struct UIColor { Class x1; }*)arg1;
- (void)setLowerLipThickness:(double)arg1;
- (void)setMorphVariant:(id)arg1 forFacialFeature:(long long)arg2;
- (void)setNoseDirection:(double)arg1;
- (void)setNoseSharpness:(double)arg1;
- (void)setPreset:(id)arg1 forCategory:(long long)arg2;
- (void)setSecondaryColorPreset:(id)arg1 forCategory:(long long)arg2;
- (void)setUpperLipThickness:(double)arg1;
- (struct UIColor { Class x1; }*)skinColor;
- (double)skinTextureSize;
- (id)specializationSettings;
- (void)udpateHighlights;
- (void)update;
- (void)updateBoneForRig:(id)arg1;
- (void)updateBonesFromRigs;
- (void)updateEyeLashes;
- (void)updateHeadMorphVariant;
- (void)updateHeadMorphVariantWithType:(long long)arg1 variant:(id)arg2;
- (void)updateHighlightsForCategory:(long long)arg1;
- (void)updateRig:(id)arg1 fromBone:(id)arg2 symmetry:(bool)arg3 applyRange:(bool)arg4;
- (void)updateSkinMaterial:(id)arg1;
- (double)upperLipThickness;
- (bool)usesSkinningForEyeOrientation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
