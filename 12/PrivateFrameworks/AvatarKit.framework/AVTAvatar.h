<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVTAvatar.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AvatarKit.framework/AVTAvatar.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AvatarKit.framework/AvatarKit
 */

@interface AVTAvatar : NSObject <NSCopying, SCNSceneRendererDelegate> {
    bool  _arMode;
    void _arOffset;
    float  _arScale;
    AVTMemoji * _avatar;
    SCNNode * _avatarNode;
    CAAnimation * _bakedAnimation;
    SCNAnimationPlayer * _bakedAnimationPlayer_lazy;
    NSMutableArray * _clipsPlaying;
    NSMutableArray * _correctiveMorpherDescriptors;
    AVTEyeSkinningDescriptor * _eyeSkinningDescriptor;
    SCNNode * _headNode;
    SCNNode * _leftEye;
    struct SCNVector3 { 
        float x; 
        float y; 
        float z; 
    }  _lookAt;
    struct { id x1; id x2; long long x3; } * _morphInfoFromARKitBlendShapeIndex;
    NSMutableArray * _morpherDrivenMaterialDescriptors;
    SCNNode * _neckNode;
    SCNNode * _neckPivotNode;
    bool  _optimizedForSnapshot;
    NSMutableArray * _physicalizedMorpherDescriptors;
    AVTPhysicsController * _physicsController;
    double  _physicsScaleFactor;
    AVTPupilReflectionCorrectionDescriptor * _pupilReflectionCorrectionDescriptor;
    SCNNode * _rightEye;
    SCNNode * _skeleton;
    int  _transitionCount;
}

@property (nonatomic) bool arMode;
@property (readonly) SCNNode *avatarNode;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) SCNNode *headNode;
@property (readonly) SCNNode *neckNode;
@property (readonly) Class superclass;

+ (id)animationClipForExpression:(long long)arg1;
+ (id)animationClips;
+ (struct SCNVector4 { float x1; float x2; float x3; float x4; })applyGazeCorrectionWithInputAngletranslation;
+ (id)avatar;
+ (id)avatarWithData:(id)arg1 error:(id*)arg2;
+ (id)avatarWithDataRepresentation:(id)arg1 error:(id*)arg2;
+ (bool)canLoadDataRepresentation:(id)arg1;
+ (bool)canLoadDataRepresentationWithVersion:(unsigned short)arg1 minimumCompatibleVersion:(unsigned short)arg2 error:(id*)arg3;
+ (unsigned char)classIdentifier;
+ (void)initialize;
+ (void)preloadAvatar:(id)arg1;

- (void).cxx_destruct;
- (bool)_decode:(id)arg1 error:(id*)arg2;
- (void)_encode:(id)arg1;
- (bool)_headMayContainsMorphTargetNamed:(id)arg1;
- (void)_resetFaceToRandomPosition;
- (void)_updateShaderModifier:(id)arg1 forARMode:(bool)arg2 withOnTopMask:(bool)arg3;
- (void)addCorrectiveBlendShapesInHierarchy:(id)arg1;
- (void)addCustomBehavioursInHierarchy:(id)arg1;
- (void)addMorpherDrivenMaterialsInHierarchy:(id)arg1;
- (void)addMorphingSkinningControllersInHierarchy:(id)arg1;
- (void)addPhysicalizedMorpherDescriptorsInHierarchy:(id)arg1 ignoreUpperNodes:(bool)arg2;
- (void)animatePhysicsScaleFactor:(double)arg1 duration:(double)arg2;
- (void)applyBlendShapesWithTrackingInfo:(id)arg1;
- (void)applyCorrectiveBlendShapes;
- (void)applyHeadPoseWithTrackingInfo:(id)arg1;
- (void)applyHeadPoseWithTrackingInfo:(id)arg1 gazeCorrection:(bool)arg2;
- (void)applyHeadPoseWithTrackingInfo:(id)arg1 gazeCorrection:(bool)arg2 pointOfView:(id)arg3;
- (bool)arMode;
- (void)arOffset;
- (float)arScale;
- (void)avatarCommonInit;
- (id)avatarNode;
- (id)bakedAnimationCopy;
- (id)bakedAnimationPlayer;
- (id)cameraNode;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct SCNVector3 { float x1; float x2; float x3; })currentLookAt;
- (id)dataRepresentation;
- (void)dealloc;
- (id)descriptorsByRemovingDescriptors:(id)arg1 inHierarchy:(id)arg2 passingTest:(id /* block */)arg3;
- (void)didAddToScene:(id)arg1;
- (id)effectiveMorphedNodeForTargetName:(id)arg1;
- (void)evaluatePhysicalizedMorphers;
- (id)headNode;
- (id)init;
- (bool)isTransitioning;
- (id)lightingNode;
- (void)lookAt:(struct SCNVector3 { float x1; float x2; float x3; })arg1;
- (void)lookAt:(struct SCNVector3 { float x1; float x2; float x3; })arg1 withDuration:(double)arg2;
- (struct { id x1; id x2; long long x3; })morphInfoForARKitBlendShapeIndex:(unsigned long long)arg1;
- (bool)morphTargetNameIsDrivenByARKit:(id)arg1;
- (id)neckNode;
- (bool)optimizeForSnapshot;
- (void)pauseBakedAnimation;
- (id)playAnimationClip:(id)arg1;
- (id)playAnimationClip:(id)arg1 usingSceneTime:(bool)arg2;
- (id)playAnimationClip:(id)arg1 usingSceneTime:(bool)arg2 withCompletion:(id /* block */)arg3;
- (id)playAnimationClip:(id)arg1 withCompletion:(id /* block */)arg2;
- (id)playAnimationClipForSnapshotting:(id)arg1;
- (id)pose;
- (void)removeCorrectiveBlendShapesInHierarchy:(id)arg1;
- (void)removeCustomBehavioursInHierarchy:(id)arg1;
- (void)removeMorpherDrivenMaterialsInHierarchy:(id)arg1;
- (void)removeMorphingSkinningControllersInHierarchy:(id)arg1;
- (void)removePhysicalizedMorpherDescriptorsInHierarchy:(id)arg1;
- (void)renderer:(id)arg1 didApplyAnimationsAtTime:(double)arg2;
- (void)resetARModeBehaviours;
- (void)resetCorrectiveBlendShapes;
- (void)resetCustomBehaviours;
- (void)resetMorpherDrivenMaterials;
- (void)resetMorphingSkinningControllers;
- (void)resetPhysicalizedMorpherDescriptors;
- (void)resumeBakedAnimation;
- (void)rotateHead:(double)arg1;
- (void)setArMode:(bool)arg1;
- (void)setAvatarNode:(id)arg1;
- (void)setBakedAnimationReferenceTime:(double)arg1;
- (void)setHeadNode:(id)arg1;
- (void)setOptimizeForSnapshot:(bool)arg1;
- (void)setPhysicsScaleFactor:(double)arg1;
- (void)setPose:(id)arg1;
- (void)setupEyeOrientationAndReflections;
- (void)setupFaceTracking;
- (void)setupMorphInfo;
- (struct UIImage { Class x1; }*)snapshotWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 options:(id)arg3;
- (void)stopAndRemoveAnimationClips;
- (void)stopTransitionAnimation;
- (void)transitionFromPose:(id)arg1 toPose:(id)arg2 duration:(double)arg3 delay:(double)arg4 completionHandler:(id /* block */)arg5;
- (void)update;
- (void)updateBindings;
- (void)updateBindingsOfNode:(id)arg1;
- (void)updateEyeOrientationAndReflections;
- (void)updateMorpherDrivenMaterials;
- (bool)usesSkinningForEyeOrientation;
- (void)willRemoveFromScene:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
