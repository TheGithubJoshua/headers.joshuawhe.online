<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXMVisionEngine.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AXMediaUtilities.framework/AXMVisionEngine.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AXMediaUtilities.framework/AXMediaUtilities (1)
 */

@interface AXMVisionEngine : NSObject <AXMDescribing, AXMFeatureTrackingManagerDelegate, AXMTaskDispatcherDelegate, AXMVisionEngineNodeConnectionDelegate, NSCopying, NSSecureCoding> {
    AXMService * _axMediaUtilsService;
    AXMVisionEngineCache * _cache;
    bool  _diagnosticsEnabled;
    bool  _featureTrackingEnabled;
    NSString * _identifier;
    long long  _maximumQueueSize;
    bool  _prioritySchedulingEnabled;
    NSObject<OS_dispatch_queue> * _queue;
    _AXMVisionEngineAnalysisTask * _queue_currentTask;
    NSMutableArray * _queue_evaluationNodes;
    AXMFeatureTrackingManager * _queue_featureTrackingManager;
    NSMapTable * _queue_featureTrackingObservers;
    NSMutableArray * _queue_resultHandlers;
    bool  _queue_shouldNotifyServiceOfEngineConfigChange;
    NSMutableArray * _queue_sourceNodes;
    AXMTaskDispatcher * _taskDispatcher;
    unsigned long long  _thresholdPriority;
}

@property (nonatomic, retain) AXMService *axMediaUtilsService;
@property (nonatomic, retain) AXMVisionEngineCache *cache;
@property (nonatomic, readonly) long long cacheSize;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=areDiagnosticsEnabled, nonatomic) bool diagnosticsEnabled;
@property (nonatomic, readonly) NSArray *evaluationNodes;
@property (getter=isFeatureTrackingEnabled, nonatomic) bool featureTrackingEnabled;
@property (readonly) unsigned long long hash;
@property (copy) NSString *identifier;
@property (nonatomic, readonly) bool isCachingEnabled;
@property long long maximumQueueSize;
@property bool prioritySchedulingEnabled;
@property (nonatomic, readonly) NSArray *sourceNodes;
@property (readonly) Class superclass;
@property (nonatomic, retain) AXMTaskDispatcher *taskDispatcher;
@property unsigned long long thresholdPriority;
@property (nonatomic, readonly) NSArray *trackedFaces;
@property (nonatomic, readonly) NSArray *trackedModelClassifiers;
@property (nonatomic, readonly) NSArray *trackedRectangles;
@property (nonatomic, readonly) NSArray *trackedText;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_commonInit;
- (void)_invokeResultHandlers:(id)arg1 withError:(id)arg2;
- (void)_invokeResultHandlers:(id)arg1 withResult:(id)arg2;
- (bool)_queue_activeEvaluationNodesExclusivelyUseVisionFramework:(id)arg1;
- (id)_queue_activeEvaluationNodesForOptions:(id)arg1 applyPriorityScheduling:(bool)arg2;
- (void)_queue_addFeatureTrackingObbserver:(id)arg1 targetQueue:(id)arg2;
- (void)_queue_addResultHandler:(id /* block */)arg1;
- (void)_queue_evaluateWithSource:(id)arg1 context:(id)arg2;
- (id)_queue_evaluationNodeWithIdentifier:(id)arg1;
- (void)_queue_handleEvaluatedContext:(id)arg1 result:(id)arg2 error:(id)arg3;
- (void)_queue_logEvaluatedResult:(id)arg1;
- (id)_queue_makeUniqueIdentifierForNode:(Class)arg1;
- (bool)_queue_nodeIdentifierExists:(id)arg1;
- (void)_queue_remotelyEvaluateWithSource:(id)arg1 context:(id)arg2;
- (void)_queue_removeAllFeatureTrackingObservers;
- (void)_queue_removeAllResultHandlers;
- (void)_queue_removeFeatureTrackingObbserver:(id)arg1;
- (void)_queue_removeResultHandler:(id /* block */)arg1;
- (bool)_queue_shouldContinueWithoutResultHandlers:(id)arg1;
- (bool)_queue_shouldEvaluateNode:(id)arg1 withOptions:(id)arg2;
- (id)_queue_sourceNodeWithIdentifier:(id)arg1;
- (void)addEvaluationNode:(id)arg1;
- (void)addFeatureTrackingObbserver:(id)arg1 targetQueue:(id)arg2;
- (void)addResultHandler:(id /* block */)arg1;
- (void)addSourceNode:(id)arg1;
- (void)addSourceNodes:(id)arg1 evaluationNodes:(id)arg2;
- (bool)areDiagnosticsEnabled;
- (id)axMediaUtilsService;
- (void)axmAppendRecursiveDescription:(id)arg1 withIndentation:(long long)arg2;
- (id)axmDescription;
- (id)cache;
- (long long)cacheSize;
- (bool)canAddEvaluationNode:(id)arg1;
- (bool)canAddEvaluationNodeClass:(Class)arg1;
- (bool)canAddSourceNode:(id)arg1;
- (bool)canAddSourceNodeClass:(Class)arg1;
- (void)captureSessionNodeDidBeginProcessingFrames:(id)arg1;
- (void)captureSessionNodeDidDropFrame:(id)arg1;
- (void)captureSessionNodeDidEndProcessingFrames:(id)arg1;
- (void)captureSessionNodeWillProcessFrame:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)disableResultCaching;
- (void)dispatcher:(id)arg1 handleTask:(id)arg2;
- (void)enableResultCachingWithCacheSize:(long long)arg1;
- (void)encodeWithCoder:(id)arg1;
- (bool)engineWillAcceptTiggerWithSource:(id)arg1;
- (id)evaluationNodeWithIdentifier:(id)arg1;
- (id)evaluationNodes;
- (unsigned long long)hash;
- (id)identifier;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (void)insertEvaluationNode:(id)arg1 atIndex:(long long)arg2;
- (void)insertSourceNode:(id)arg1 atIndex:(long long)arg2;
- (bool)isCachingEnabled;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToEngine:(id)arg1;
- (bool)isFeatureTrackingEnabled;
- (id)makeUniqueIdentifierForNode:(Class)arg1;
- (long long)maximumQueueSize;
- (bool)nodeIdentifierExists:(id)arg1;
- (void)prewarmEngine;
- (bool)prioritySchedulingEnabled;
- (void)purgeResources:(id /* block */)arg1;
- (void)removeAllEvaluationNodes;
- (void)removeAllFeatureTrackingObservers;
- (void)removeAllResultHandlers;
- (void)removeAllSourceNodes;
- (void)removeEvaluationNode:(id)arg1;
- (void)removeFeatureTrackingObbserver:(id)arg1;
- (void)removeResultHandler:(id /* block */)arg1;
- (void)removeSourceNode:(id)arg1;
- (id)resultHandlers;
- (void)setAxMediaUtilsService:(id)arg1;
- (void)setCache:(id)arg1;
- (void)setDiagnosticsEnabled:(bool)arg1;
- (void)setFeatureTrackingEnabled:(bool)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setMaximumQueueSize:(long long)arg1;
- (void)setPrioritySchedulingEnabled:(bool)arg1;
- (void)setTaskDispatcher:(id)arg1;
- (void)setThresholdPriority:(unsigned long long)arg1;
- (id)sourceNodeWithIdentifier:(id)arg1;
- (id)sourceNodes;
- (id)taskDispatcher;
- (unsigned long long)thresholdPriority;
- (id)trackedFaces;
- (id)trackedModelClassifiers;
- (id)trackedRectangles;
- (id)trackedText;
- (void)trackingManager:(id)arg1 didBeginTrackingFeature:(id)arg2 appliedOrientation:(id)arg3;
- (void)trackingManager:(id)arg1 didFinishTrackingFeature:(id)arg2 appliedOrientation:(id)arg3;
- (void)trackingManager:(id)arg1 trackingFeatureLocationDidChange:(id)arg2 appliedOrientation:(id)arg3;
- (void)triggerWithSource:(id)arg1 context:(id)arg2;
- (void)updateEngineConfiguration:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
