<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVCRateController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/AVCRateController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface AVCRateController : NSObject {
    unsigned int  _actualBitrate;
    AVCBasebandCongestionDetector * _basebandCongestionDetector;
    unsigned int  _burstPacketLoss;
    struct AVCRateControlConfig { 
        unsigned int mode; 
        unsigned int localRadioAccessTechnology; 
        unsigned int remoteRadioAccessTechnology; 
        unsigned int maxBitrate; 
        unsigned int minBitrate; 
    }  _configuration;
    NSString * _dumpID;
    unsigned int  _estimatedBandwidthCap;
    unsigned int  _expectedBitrate;
    AVCRateControlFeedbackController * _feedbackController;
    int  _forcedMaxBitrate;
    int  _forcedTargetBitrate;
    bool  _isBasebandEnabled;
    bool  _isDumpFileEnabled;
    bool  _isForSimulation;
    bool  _isNetworkCongested;
    bool  _isPeriodicLoggingEnabled;
    bool  _isTargetBitrateOvershootReported;
    bool  _isUnexpectedLowTargetBitrateReported;
    bool  _isUplink;
    double  _lastDefaultsReadTime;
    unsigned int  _lastReportFlushedAudioPacketCount;
    unsigned int  _lastReportFlushedVideoPacketCount;
    double  _lastTimeTargetBitrateOvershootRecorded;
    double  _lastTimeUnexpectedLowTargetBitrateRecorded;
    void * _logBasebandDump;
    void * _logDump;
    void * _logFeedbackDump;
    VCRateControlMediaController * _mediaController;
    unsigned int  _owrd;
    unsigned int  _packetLossPercentage;
    bool  _paused;
    unsigned int  _rateChangeCounter;
    <VCRateControlAlgorithm> * _rateControlAlgorithm;
    id  _rateControllerDelegate;
    id  _reportingAgentWeak;
    int  _reportingModuleID;
    unsigned int  _roundTripTimeMilliseconds;
    AVCStatisticsCollector * _statisticsCollector;
    unsigned int  _targetBitrate;
    unsigned int  _targetBitrateCap;
    unsigned int  _totalBytesReceived;
    unsigned int  _totalBytesSent;
    unsigned int  _totalPacketsReceived;
    unsigned int  _totalPacketsSent;
}

@property (nonatomic, retain) AVCBasebandCongestionDetector *basebandCongestionDetector;
@property (nonatomic, readonly) struct AVCRateControlConfig { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; } configuration;
@property (nonatomic) unsigned int estimatedBandwidthCap;
@property (nonatomic) unsigned int expectedBitrate;
@property (nonatomic, retain) AVCRateControlFeedbackController *feedbackController;
@property (nonatomic, retain) VCRateControlMediaController *mediaController;
@property (getter=isPaused, nonatomic) bool paused;
@property (readonly) id reportingAgent;
@property (nonatomic, retain) AVCStatisticsCollector *statisticsCollector;
@property (nonatomic, readonly) unsigned int targetBitrate;
@property (nonatomic) unsigned int targetBitrateCap;

- (id)basebandCongestionDetector;
- (void)checkAndReportAbnormalSymptoms;
- (struct AVCRateControlConfig { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })configuration;
- (void)configure:(struct AVCRateControlConfig { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })arg1;
- (void)configureAlgorithmWithRestart:(bool)arg1;
- (void)configureInternal:(struct AVCRateControlConfig { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; })arg1;
- (void)configureWithOperatingMode:(int)arg1 isLocalCellular:(bool)arg2 localCellTech:(int)arg3 isRemoteCellular:(bool)arg4 remoteCellTech:(int)arg5 bitrateCapKbps:(unsigned int)arg6;
- (void)createBasebandLogDumpFile;
- (void)createLogDumpFiles:(id)arg1;
- (void)createVCRateControlAlgorithmWithConfiguration:(struct VCRateControlAlgorithmConfig { unsigned int *x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; double x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; double x20; double x21; double x22; double x23; double x24; int x25; int x26; double x27; double x28; double x29; double x30; double x31; double x32; double x33; double x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; bool x39; bool x40; bool x41; int x42; double x43; double x44; double x45; double x46; double x47; double x48; double x49; double x50; double x51; double x52; double x53; bool x54; double x55; int x56; int x57; })arg1;
- (void)dealloc;
- (void)deregisterPeriodicTask;
- (void)doRateControlWithBasebandStatistics:(struct { int x1; double x2; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; double x_1_2_6; double x_1_2_7; double x_1_2_8; double x_1_2_9; BOOL x_1_2_10[64]; } x_3_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; unsigned int x_2_2_3; unsigned int x_2_2_4; unsigned int x_2_2_5; unsigned int x_2_2_6; unsigned int x_2_2_7; } x_3_1_2; struct { double x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; unsigned int x_3_2_4; unsigned int x_3_2_5; unsigned int x_3_2_6; unsigned long long x_3_2_7; } x_3_1_3; struct { unsigned int x_4_2_1; bool x_4_2_2; bool x_4_2_3; bool x_4_2_4; unsigned int x_4_2_5; unsigned int x_4_2_6; double x_4_2_7; unsigned int x_4_2_8; } x_3_1_4; struct { unsigned char x_5_2_1; unsigned int x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; unsigned int x_5_2_6; unsigned int x_5_2_7; unsigned int x_5_2_8; unsigned int x_5_2_9; unsigned int x_5_2_10; double x_5_2_11; double x_5_2_12; double x_5_2_13; unsigned int x_5_2_14; unsigned int x_5_2_15; unsigned int x_5_2_16; } x_3_1_5; } x3; })arg1;
- (void)doRateControlWithStatistics:(struct { int x1; double x2; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; double x_1_2_6; double x_1_2_7; double x_1_2_8; double x_1_2_9; BOOL x_1_2_10[64]; } x_3_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; unsigned int x_2_2_3; unsigned int x_2_2_4; unsigned int x_2_2_5; unsigned int x_2_2_6; unsigned int x_2_2_7; } x_3_1_2; struct { double x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; unsigned int x_3_2_4; unsigned int x_3_2_5; unsigned int x_3_2_6; unsigned long long x_3_2_7; } x_3_1_3; struct { unsigned int x_4_2_1; bool x_4_2_2; bool x_4_2_3; bool x_4_2_4; unsigned int x_4_2_5; unsigned int x_4_2_6; double x_4_2_7; unsigned int x_4_2_8; } x_3_1_4; struct { unsigned char x_5_2_1; unsigned int x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; unsigned int x_5_2_6; unsigned int x_5_2_7; unsigned int x_5_2_8; unsigned int x_5_2_9; unsigned int x_5_2_10; double x_5_2_11; double x_5_2_12; double x_5_2_13; unsigned int x_5_2_14; unsigned int x_5_2_15; unsigned int x_5_2_16; } x_3_1_5; } x3; })arg1;
- (unsigned int)estimatedBandwidthCap;
- (unsigned int)expectedBitrate;
- (id)feedbackController;
- (void)getRealTimeStats:(struct __CFDictionary { }*)arg1;
- (void)getRealTimeStatsForServerBasedRxOnly:(struct __CFDictionary { }*)arg1;
- (void)getRealTimeStatsForServerBasedTxOnly:(struct __CFDictionary { }*)arg1;
- (id)indicatorFromRadioTech:(unsigned int)arg1;
- (id)initWithDelegate:(id)arg1 dumpID:(id)arg2 forSimulation:(bool)arg3 isUplink:(bool)arg4 reportingAgent:(id)arg5;
- (id)initWithDelegate:(id)arg1 dumpID:(id)arg2 isUplink:(bool)arg3 reportingAgent:(id)arg4;
- (int)initialBitrateTierFromLearntBitrateWithLocalTechnology:(unsigned int)arg1 remoteTech:(unsigned int)arg2 defaultTier:(int)arg3;
- (bool)isPaused;
- (bool)isRadioTechnologyOnCellular:(unsigned int)arg1;
- (bool)isRadioTechnologyOnWiFiOrLTE:(unsigned int)arg1;
- (void)loadDefaultSettings;
- (int)maxTierBelowBitrate:(unsigned int)arg1 maxTierIndex:(int)arg2 minTierIndex:(int)arg3;
- (id)mediaController;
- (int)minTierAboveBitrate:(unsigned int)arg1 maxTierIndex:(int)arg2 minTierIndex:(int)arg3;
- (void)periodicTask:(void*)arg1;
- (void)printBasebandNotificationStatistics:(struct { int x1; double x2; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; double x_1_2_6; double x_1_2_7; double x_1_2_8; double x_1_2_9; BOOL x_1_2_10[64]; } x_3_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; unsigned int x_2_2_3; unsigned int x_2_2_4; unsigned int x_2_2_5; unsigned int x_2_2_6; unsigned int x_2_2_7; } x_3_1_2; struct { double x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; unsigned int x_3_2_4; unsigned int x_3_2_5; unsigned int x_3_2_6; unsigned long long x_3_2_7; } x_3_1_3; struct { unsigned int x_4_2_1; bool x_4_2_2; bool x_4_2_3; bool x_4_2_4; unsigned int x_4_2_5; unsigned int x_4_2_6; double x_4_2_7; unsigned int x_4_2_8; } x_3_1_4; struct { unsigned char x_5_2_1; unsigned int x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; unsigned int x_5_2_6; unsigned int x_5_2_7; unsigned int x_5_2_8; unsigned int x_5_2_9; unsigned int x_5_2_10; double x_5_2_11; double x_5_2_12; double x_5_2_13; unsigned int x_5_2_14; unsigned int x_5_2_15; unsigned int x_5_2_16; } x_3_1_5; } x3; })arg1;
- (void)printFeedbackMessage:(struct { int x1; double x2; union { struct { unsigned int x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; double x_1_2_6; double x_1_2_7; double x_1_2_8; double x_1_2_9; BOOL x_1_2_10[64]; } x_3_1_1; struct { unsigned int x_2_2_1; unsigned int x_2_2_2; unsigned int x_2_2_3; unsigned int x_2_2_4; unsigned int x_2_2_5; unsigned int x_2_2_6; unsigned int x_2_2_7; } x_3_1_2; struct { double x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; unsigned int x_3_2_4; unsigned int x_3_2_5; unsigned int x_3_2_6; unsigned long long x_3_2_7; } x_3_1_3; struct { unsigned int x_4_2_1; bool x_4_2_2; bool x_4_2_3; bool x_4_2_4; unsigned int x_4_2_5; unsigned int x_4_2_6; double x_4_2_7; unsigned int x_4_2_8; } x_3_1_4; struct { unsigned char x_5_2_1; unsigned int x_5_2_2; unsigned int x_5_2_3; unsigned int x_5_2_4; unsigned int x_5_2_5; unsigned int x_5_2_6; unsigned int x_5_2_7; unsigned int x_5_2_8; unsigned int x_5_2_9; unsigned int x_5_2_10; double x_5_2_11; double x_5_2_12; double x_5_2_13; unsigned int x_5_2_14; unsigned int x_5_2_15; unsigned int x_5_2_16; } x_3_1_5; } x3; })arg1;
- (unsigned int)radioAccessTechnologyFromAVConferenceCellTech:(int)arg1 isCellular:(bool)arg2;
- (unsigned int)rateControlModeFromAVConferenceOperatingMode:(int)arg1;
- (void)registerPeriodicTask;
- (void)releaseLogDumpFiles;
- (void)reportNetworkStatistics;
- (void)reportTargetBitrateChange:(unsigned int)arg1 rateChangeCounter:(unsigned int)arg2;
- (id)reportingAgent;
- (void)setBasebandCongestionDetector:(id)arg1;
- (void)setDefaultAlgorithmConfiguration:(struct VCRateControlAlgorithmConfig { unsigned int *x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; int x11; double x12; double x13; double x14; double x15; double x16; double x17; double x18; double x19; double x20; double x21; double x22; double x23; double x24; int x25; int x26; double x27; double x28; double x29; double x30; double x31; double x32; double x33; double x34; unsigned int x35; unsigned int x36; unsigned int x37; unsigned int x38; bool x39; bool x40; bool x41; int x42; double x43; double x44; double x45; double x46; double x47; double x48; double x49; double x50; double x51; double x52; double x53; bool x54; double x55; int x56; int x57; }*)arg1;
- (void)setEstimatedBandwidthCap:(unsigned int)arg1;
- (void)setExpectedBitrate:(unsigned int)arg1;
- (void)setFeedbackController:(id)arg1;
- (void)setMediaController:(id)arg1;
- (void)setPaused:(bool)arg1;
- (void)setStatisticsCollector:(id)arg1;
- (void)setTargetBitrateCap:(unsigned int)arg1;
- (id)statisticsCollector;
- (unsigned int)targetBitrate;
- (unsigned int)targetBitrateCap;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
