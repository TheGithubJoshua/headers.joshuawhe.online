<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCAudioTransmitterConfig.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCAudioTransmitterConfig.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCAudioTransmitterConfig : NSObject {
    struct tagHANDLE { int x1; } * _afrcHandle;
    bool  _allowAudioSwitching;
    NSMutableArray * _audioPayloads;
    int  _bundlingScheme;
    VCAudioPayload * _chosenAudioPayload;
    VCAudioPayload * _chosenDTXPayload;
    int  _chosenRedPayloadType;
    void * _controlInfoGenerator;
    bool  _currentDTXEnable;
    bool  _ignoreSilence;
    bool  _includeRedSequenceOffset;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  _inputFormat;
    bool  _isUseCaseWatchContinuity;
    unsigned int  _maxIDSStreamIdCount;
    struct tagHANDLE { int x1; } * _mediaQueue;
    bool  _needsPacketThread;
    int  _operatingMode;
    unsigned char  _packetsPerBundle;
    bool  _redEnabled;
    unsigned int  _redMaxDelay20ms;
    unsigned int  _redNumPayloads;
    struct opaqueRTCReporting { } * _reportingAgent;
    int  _reportingParentID;
    struct tagHANDLE { int x1; } * _rtpHandle;
    struct tagHANDLE { int x1; } * _rtpVideo;
    bool  _sendActiveVoiceOnly;
    AVCStatisticsCollector * _statisticsCollector;
    NSArray * _streamIDs;
    NSArray * _supportedNumRedundantPayload;
    bool  _supportsAdaptation;
    unsigned int  _tierNetworkBitrate;
    bool  _transmitROC;
    VCTransportSession * _transportSession;
    bool  _useRateControl;
}

@property (nonatomic) struct tagHANDLE { int x1; }*afrcHandle;
@property (nonatomic) bool allowAudioSwitching;
@property (nonatomic, retain) NSMutableArray *audioPayloads;
@property (nonatomic) int bundlingScheme;
@property (nonatomic, retain) VCAudioPayload *chosenAudioPayload;
@property (nonatomic, retain) VCAudioPayload *chosenDTXPayload;
@property (nonatomic) int chosenRedPayloadType;
@property (nonatomic) void*controlInfoGenerator;
@property (getter=isCurrentDTXEnabled, nonatomic) bool currentDTXEnable;
@property (nonatomic) bool ignoreSilence;
@property (nonatomic) bool includeRedSequenceOffset;
@property (nonatomic) struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; } inputFormat;
@property (nonatomic) bool isUseCaseWatchContinuity;
@property (nonatomic) unsigned int maxIDSStreamIdCount;
@property (nonatomic) struct tagHANDLE { int x1; }*mediaQueue;
@property (nonatomic) bool needsPacketThread;
@property (nonatomic) int operatingMode;
@property (nonatomic) unsigned char packetsPerBundle;
@property (getter=isRedEnabled, nonatomic) bool redEnabled;
@property (nonatomic) unsigned int redMaxDelay20ms;
@property (nonatomic) unsigned int redNumPayloads;
@property (nonatomic) struct opaqueRTCReporting { }*reportingAgent;
@property (nonatomic) int reportingParentID;
@property (nonatomic) struct tagHANDLE { int x1; }*rtpHandle;
@property (nonatomic) struct tagHANDLE { int x1; }*rtpVideo;
@property (nonatomic) bool sendActiveVoiceOnly;
@property (nonatomic, retain) AVCStatisticsCollector *statisticsCollector;
@property (nonatomic, retain) NSArray *streamIDs;
@property (nonatomic, retain) NSArray *supportedNumRedundantPayload;
@property (nonatomic) bool supportsAdaptation;
@property (nonatomic) unsigned int tierNetworkBitrate;
@property (nonatomic) bool transmitROC;
@property (nonatomic, retain) VCTransportSession *transportSession;
@property (nonatomic) bool useRateControl;

- (struct tagHANDLE { int x1; }*)afrcHandle;
- (bool)allowAudioSwitching;
- (id)audioPayloads;
- (int)bundlingScheme;
- (id)chosenAudioPayload;
- (id)chosenDTXPayload;
- (int)chosenRedPayloadType;
- (void*)controlInfoGenerator;
- (void)dealloc;
- (id)description;
- (bool)ignoreSilence;
- (bool)includeRedSequenceOffset;
- (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })inputFormat;
- (bool)isCurrentDTXEnabled;
- (bool)isRedEnabled;
- (bool)isUseCaseWatchContinuity;
- (unsigned int)maxIDSStreamIdCount;
- (struct tagHANDLE { int x1; }*)mediaQueue;
- (bool)needsPacketThread;
- (int)operatingMode;
- (unsigned char)packetsPerBundle;
- (unsigned int)redMaxDelay20ms;
- (unsigned int)redNumPayloads;
- (struct opaqueRTCReporting { }*)reportingAgent;
- (int)reportingParentID;
- (struct tagHANDLE { int x1; }*)rtpHandle;
- (struct tagHANDLE { int x1; }*)rtpVideo;
- (bool)sendActiveVoiceOnly;
- (void)setAfrcHandle:(struct tagHANDLE { int x1; }*)arg1;
- (void)setAllowAudioSwitching:(bool)arg1;
- (void)setAudioPayloads:(id)arg1;
- (void)setBundlingScheme:(int)arg1;
- (void)setChosenAudioPayload:(id)arg1;
- (void)setChosenDTXPayload:(id)arg1;
- (void)setChosenRedPayloadType:(int)arg1;
- (void)setControlInfoGenerator:(void*)arg1;
- (void)setCurrentDTXEnable:(bool)arg1;
- (void)setIgnoreSilence:(bool)arg1;
- (void)setIncludeRedSequenceOffset:(bool)arg1;
- (void)setInputFormat:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })arg1;
- (void)setIsUseCaseWatchContinuity:(bool)arg1;
- (void)setMaxIDSStreamIdCount:(unsigned int)arg1;
- (void)setMediaQueue:(struct tagHANDLE { int x1; }*)arg1;
- (void)setNeedsPacketThread:(bool)arg1;
- (void)setOperatingMode:(int)arg1;
- (void)setPacketsPerBundle:(unsigned char)arg1;
- (void)setRedEnabled:(bool)arg1;
- (void)setRedMaxDelay20ms:(unsigned int)arg1;
- (void)setRedNumPayloads:(unsigned int)arg1;
- (void)setReportingAgent:(struct opaqueRTCReporting { }*)arg1;
- (void)setReportingParentID:(int)arg1;
- (void)setRtpHandle:(struct tagHANDLE { int x1; }*)arg1;
- (void)setRtpVideo:(struct tagHANDLE { int x1; }*)arg1;
- (void)setSendActiveVoiceOnly:(bool)arg1;
- (void)setStatisticsCollector:(id)arg1;
- (void)setStreamIDs:(id)arg1;
- (void)setSupportedNumRedundantPayload:(id)arg1;
- (void)setSupportsAdaptation:(bool)arg1;
- (void)setTierNetworkBitrate:(unsigned int)arg1;
- (void)setTransmitROC:(bool)arg1;
- (void)setTransportSession:(id)arg1;
- (void)setUseRateControl:(bool)arg1;
- (id)statisticsCollector;
- (id)streamIDs;
- (id)supportedNumRedundantPayload;
- (bool)supportsAdaptation;
- (unsigned int)tierNetworkBitrate;
- (bool)transmitROC;
- (id)transportSession;
- (bool)useRateControl;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
