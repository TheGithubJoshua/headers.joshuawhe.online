<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCAudioStream.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCAudioStream.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCAudioStream : VCMediaStream <VCAudioIODelegate, VCAudioIOSink, VCAudioIOSource, VCMediaStreamSyncSource> {
    VCAudioIO * _audioIO;
    void * _audioMediaControlInfoGenerator;
    struct tagVCAudioReceiver { struct tagVCAudioReceiverConfig { unsigned int x_1_1_1; struct tagVCAudioReceiverStream { struct tagHANDLE {} *x_2_2_1; unsigned short x_2_2_2; } x_1_1_2[3]; void *x_1_1_3; void *x_1_1_4; unsigned int x_1_1_5; int x_1_1_6; int x_1_1_7; bool x_1_1_8; struct opaqueRTCReporting {} *x_1_1_9; int x_1_1_10; bool x_1_1_11; struct __CFString {} *x_1_1_12; struct __CFString {} *x_1_1_13; unsigned short x_1_1_14; bool x_1_1_15; } x1; void *x2; void *x3; struct opaqueVCJitterBuffer {} *x4; bool x5; struct AudioStreamBasicDescription {} *x6; int x7; double x8; struct { long long x_9_1_1; int x_9_1_2; unsigned int x_9_1_3; long long x_9_1_4; } x9; struct tagVCRealTimeThread {} *x10; struct tagVCAudioReceiverReportingTask { struct opaqueRTCReporting {} *x_11_1_1; int x_11_1_2; struct tagHANDLE {} *x_11_1_3; } x11; bool x12; struct _opaque_pthread_mutex_t { long long x_13_1_1; BOOL x_13_1_2[56]; } x13; struct _opaque_pthread_mutex_t { long long x_14_1_1; BOOL x_14_1_2[56]; } x14; struct tagVCAudioDecoderList { struct tagDecoderSettings {} *x_15_1_1; unsigned int x_15_1_2; } x15; } * _audioReceiver;
    VCAudioTransmitter * _audioTransmitter;
    int  _clientPid;
    bool  _currentDTXEnable;
    bool  _isMuted;
    bool  _isRemoteMediaStalled;
    bool  _isRemoteMuted;
    unsigned int  _lastRTPTimestamp;
    double  _lastReceivedAudioTimestamp;
    int  _packetsSinceStallCount;
    unsigned int  _pullAudioSamplesCount;
    int  _reportingModuleID;
    unsigned int  _reportingSSRCCount;
    unsigned int * _reportingSSRCList;
    bool  _rtcpEnabledBeforeInterrupt;
    bool  _rtpEnabledBeforeInterrupt;
    bool  _sendActiveVoiceOnly;
    NSNumber * _targetStreamID;
    AVTelephonyInterface * _telephonyInterface;
    float  _volume;
    NSMutableArray * audioPayloads;
    unsigned int  awdTime;
    unsigned int  conferenceID;
    VCAudioPayload * currentAudioPayload;
    VCAudioPayload * currentDTXPayload;
    double  dAudioHostTime;
    int  deviceRole;
    DTMFEventHandler * dtmfEventHandler;
    bool  isValid;
    unsigned int  lastInputAudioTimeStamp;
    unsigned int  lastSentAudioSampleTime;
    bool  lastVoiceActive;
    int  numBufferBytesAvailable;
    NSObject<OS_dispatch_source> * pausedAudioHeartBeat;
    int  preferredAudioCodec;
    long long  sampleRate;
    long long  samplesPerFrame;
    struct _METER_INFO { 
        bool frequencyMeteringEnabled; 
        FFTMeter *fftMeter; 
    }  soundMeter;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    }  stateLock;
    id  syncSourceDelegate;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  vpioFormat;
    WRMClient * wrmClient;
}

@property (retain) VCAudioIO *audioIO;
@property (retain) VCAudioTransmitter *audioTransmitter;
@property (readonly) unsigned int conferenceID;
@property (getter=isCurrentDTXEnabled, nonatomic) bool currentDTXEnable;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) int deviceRole;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isValid;
@property (getter=isMuted, nonatomic) bool muted;
@property (getter=isRemoteMuted, nonatomic) bool remoteMuted;
@property (nonatomic) bool sendActiveVoiceOnly;
@property (readonly) Class superclass;
@property (nonatomic) NSObject<VCMediaStreamSyncSourceDelegate> *syncSourceDelegate;
@property (nonatomic, retain) NSNumber *targetStreamID;
@property (nonatomic) float volume;

+ (unsigned char)audioIODirectionWithMediaStreamDirection:(long long)arg1;
+ (id)capabilities;
+ (id)supportedAudioPayloads;

- (void)_computeInternalFormatForAudioConfig:(id)arg1;
- (id)addAudioPayload:(int)arg1;
- (id)audioIO;
- (id)audioTransmitter;
- (int)bundlingSchemeForOperatingMode:(int)arg1 payloadType:(int)arg2;
- (bool)canProcessAudio;
- (int)captureMeshMode:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)cleanupAudio;
- (void)cleanupBeforeReconfigure:(id)arg1;
- (unsigned int)codecTypeFromAudioPayload:(int)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1 interval:(float)arg2;
- (void)collectTxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1;
- (unsigned int)computePacketTimestampWithInputTimestamp:(unsigned int)arg1 numSamples:(int)arg2 hostTime:(double)arg3;
- (unsigned int)conferenceID;
- (id)configForPayloadType:(int)arg1;
- (bool)createAudioReceiver;
- (bool)createAudioTransmitter:(long long)arg1 streamIDs:(id)arg2;
- (void)createReportSSRCListWithStreamConfigs:(id)arg1;
- (id)createTransport;
- (void)dealloc;
- (int)deviceRole;
- (void)didResumeAudioIO:(id)arg1;
- (void)didSuspendAudioIO:(id)arg1;
- (bool)generateReceptionReportList:(struct _RTCP_RECEPTION_REPORT { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned char x9; }*)arg1 reportCount:(char *)arg2;
- (struct __CFDictionary { }*)getClientSpecificUserInfo:(id)arg1;
- (void)getCodecConfigForPayload:(int)arg1 block:(id /* block */)arg2;
- (int)getPacketsPerBundleForStreamConfig:(id)arg1;
- (struct __CFString { }*)getReportingClientName;
- (int)getReportingClientType;
- (id)getReportingServiceID;
- (id)getSupportedPayloads;
- (long long)getSyncSourceSampleRate;
- (void)handleActiveConnectionChange:(id)arg1;
- (void)handleCodecRateModeChange:(int)arg1 payload:(int)arg2;
- (id)initWithClientPid:(int)arg1;
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2;
- (id)initWithClientPid:(int)arg1 ssrc:(unsigned int)arg2 transportSessionID:(unsigned int)arg3;
- (unsigned int)internalSampleRateForCodecType:(long long)arg1;
- (bool)isCurrentDTXEnabled;
- (bool)isFrequencyMeteringEnabled:(int)arg1;
- (bool)isMuted;
- (bool)isRemoteMuted;
- (bool)isValid;
- (double)lastReceivedRTCPPacketTime;
- (double)lastReceivedRTPPacketTime;
- (void)onCallIDChanged;
- (bool)onConfigureStreamWithConfiguration:(id)arg1 error:(id*)arg2;
- (void)onPauseWithCompletionHandler:(id /* block */)arg1;
- (void)onRTCPTimeout;
- (void)onRTPTimeout;
- (void)onResumeWithCompletionHandler:(id /* block */)arg1;
- (void)onSendRTCPPacket;
- (void)onStartWithCompletionHandler:(id /* block */)arg1;
- (void)onStopWithCompletionHandler:(id /* block */)arg1;
- (int)operatingModeForAudioStreamMode:(long long)arg1;
- (unsigned int)preferredAudioBitrateForPayload:(int)arg1;
- (void)prepareAudio;
- (void)processPulledSamples:(struct opaqueVCAudioBufferList { }*)arg1 rtpTimestamp:(unsigned int)arg2;
- (void)pullAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)pullDecodedMeshMode:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (void)redundancyController:(id)arg1 redundancyPercentageDidChange:(unsigned int)arg2;
- (void)registerActiveAudioStreamChangeNotifications;
- (void)registerCodecRateModeChangeNotifications;
- (void)reportingAudioStreamEvent:(unsigned short)arg1;
- (double)rtcpHeartbeatLeeway;
- (bool)sendActiveVoiceOnly;
- (void)sendDTMFEvent:(id)arg1;
- (void)setAudioIO:(id)arg1;
- (void)setAudioTransmitter:(id)arg1;
- (void)setCanProcessAudio:(bool)arg1;
- (void)setCurrentDTXEnable:(bool)arg1;
- (void)setDTXPayload:(id)arg1;
- (void)setDeviceRole:(int)arg1;
- (void)setFrequencyMeteringEnabled:(bool)arg1 meterType:(int)arg2;
- (void)setInputTimestamp:(unsigned int)arg1 packetTimestamp:(int)arg2 hostTime:(double)arg3;
- (void)setIsValid:(bool)arg1;
- (void)setMuted:(bool)arg1;
- (bool)setReceiverPayloads;
- (void)setRemoteMuted:(bool)arg1;
- (void)setSendActiveVoiceOnly:(bool)arg1;
- (void)setState:(int)arg1;
- (void)setStreamDirection:(long long)arg1;
- (void)setStreamIDs:(id)arg1 repairStreamIDs:(id)arg2;
- (void)setSyncSourceDelegate:(id)arg1;
- (void)setTargetStreamID:(id)arg1;
- (void)setVolume:(float)arg1;
- (bool)setupAudioStreamWithClientPid:(int)arg1;
- (bool)setupPayloads;
- (void)startAudioWithCompletionHandler:(id /* block */)arg1;
- (void)stateEnter;
- (void)stateExit;
- (void)stopAudioWithCompletionHandler:(id /* block */)arg1;
- (void)stopSendDTMFEvent;
- (id)streamIDsFromTransport;
- (id)supportedPayloads;
- (id)syncSourceDelegate;
- (id)targetStreamID;
- (void)unregisterCodecRateModeChangeNotifications;
- (void)updateRemoteMediaStallState:(double)arg1;
- (void)updateSoundMeter:(int)arg1 sampleBuffer:(struct opaqueVCAudioBufferList { }*)arg2;
- (bool)validateAudioStreamConfigurations:(id)arg1;
- (void)vcMediaStreamTransport:(id)arg1 updateSourceNTPTime:(double)arg2 rtpTimeStamp:(unsigned int)arg3;
- (float)volume;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
