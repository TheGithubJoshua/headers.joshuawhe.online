<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCAudioPowerSpectrum.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCAudioPowerSpectrum.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCAudioPowerSpectrum : NSObject <VCAudioIOSink> {
    struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; } * _channelSettings;
    <VCAudioPowerSpectrumDelegate> * _delegate;
    float  _fftNormFactor;
    unsigned int  _fftSampleCount;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  _format;
    struct _VCRange { 
        float min; 
        float max; 
    }  _frequencyRange;
    float * _hanningWindow;
    float * _lerpIdxs;
    unsigned int * _octave2IndexTable6;
    unsigned int  _octave2IndexTable6Count;
    unsigned int  _outputBinCount;
    _Atomic bool  _powerSpectrumConfigured;
    struct opaqueVCAudioBufferList { } * _sampleBuffer;
    unsigned int  _sampleRate;
    long long  _streamToken;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <VCAudioPowerSpectrumDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct _VCRange { float x1; float x2; } frequencyRange;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long streamToken;
@property (readonly) Class superclass;

- (void)cleanUp;
- (void)cleanupBinInterpolation;
- (void)cleanupBinsForChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (void)cleanupChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (void)cleanupFFTForChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (void)cleanupHanningWindow;
- (void)cleanupOctave2IndexTable;
- (void)cleanupOctave2IndexTableForChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (void)computeSpectrumForChannelIndex:(unsigned int)arg1;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (id)frequencyBinsForChannelIndex:(unsigned int)arg1;
- (struct _VCRange { float x1; float x2; })frequencyRange;
- (unsigned int)getNumChannels;
- (id)initWithBinCount:(unsigned int)arg1 streamToken:(long long)arg2 delegate:(id)arg3;
- (void)pushAudioSamples:(struct opaqueVCAudioBufferList { }*)arg1;
- (bool)setupAudioPowerSpectrumWithBinCount:(unsigned int)arg1 format:(const struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; }*)arg2;
- (bool)setupBinInterpolationWithBinCount:(unsigned int)arg1;
- (bool)setupBinsForChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (bool)setupChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (bool)setupFFTForChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (bool)setupHanningWindow;
- (bool)setupOctave2IndexTableForChannel:(struct _VCAudioPowerSpectrumChannel { unsigned int x1; float *x2; float *x3; float *x4; float *x5; struct vDSP_DFT_SetupStruct {} *x6; struct DSPSplitComplex { float *x_7_1_1; float *x_7_1_2; } x7; float *x8; float x9; float *x10; float *x11; id x12; }*)arg1;
- (bool)setupOctave2IndexTableWithBinCount:(unsigned int)arg1;
- (long long)streamToken;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
