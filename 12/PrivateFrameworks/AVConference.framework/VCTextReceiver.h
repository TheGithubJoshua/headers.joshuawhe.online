<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCTextReceiver.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCTextReceiver.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCTextReceiver : NSObject <VCTextFrameReceiver> {
    <VCTextReceiverDelegate> * _delegate;
    VCTextJitterBuffer * _jitterBuffer;
    double  _lastReceivedRTCPPacketTime;
    double  _lastReceivedRTPPacketTime;
    struct tagVCRealTimeThread { unsigned int x1; unsigned int x2; struct _opaque_pthread_mutex_t { long long x_3_1_1; BOOL x_3_1_2[56]; } x3; struct _opaque_pthread_mutex_t { long long x_4_1_1; BOOL x_4_1_2[56]; } x4; struct _opaque_pthread_cond_t { long long x_5_1_1; BOOL x_5_1_2[40]; } x5; int (*x6)(); void *x7; struct OpaqueFigThread {} *x8; int x9; BOOL x10[60]; unsigned int x11; unsigned int x12; } * _receiverThread;
    struct tagHANDLE { int x1; } * _rtpHandle;
    unsigned int  _sampleRate;
    NSArray * _supportedPayloads;
}

@property (nonatomic) <VCTextReceiverDelegate> *delegate;
@property (nonatomic) double lastReceivedRTCPPacketTime;
@property (nonatomic) double lastReceivedRTPPacketTime;
@property (nonatomic, retain) NSArray *supportedPayloads;

- (struct tagAudioFrame { int x1; int x2; bool x3; unsigned short x4; unsigned int x5; unsigned char x6[800]; int x7; int x8; unsigned char x9[16]; unsigned char x10; int x11; int x12; double x13; int x14; int (*x15)(); void *x16; struct tagDecoderSettings {} *x17; bool x18; unsigned int x19; unsigned char x20; unsigned short x21; struct tagAudioFrame {} *x22; struct tagAudioFrame {} *x23; }*)allocFrameWithPacket:(struct tagAudioPacket { int x1; int x2; int x3; bool x4; unsigned short x5; unsigned int x6; int x7; double x8; int x9; unsigned char x10[1472]; int x11; unsigned char x12[256]; unsigned char x13; struct tagAudioFrame {} *x14[4]; int x15; double x16; int x17; struct tagDecoderSettings {} *x18; bool x19; unsigned int x20; unsigned char x21; unsigned short x22; }*)arg1 data:(char *)arg2 dataLength:(int)arg3 timestamp:(unsigned int)arg4;
- (void)dealloc;
- (id)delegate;
- (void)didDetectMissingFrame;
- (void)didReceiveFrame:(struct tagAudioFrame { int x1; int x2; bool x3; unsigned short x4; unsigned int x5; unsigned char x6[800]; int x7; int x8; unsigned char x9[16]; unsigned char x10; int x11; int x12; double x13; int x14; int (*x15)(); void *x16; struct tagDecoderSettings {} *x17; bool x18; unsigned int x19; unsigned char x20; unsigned short x21; struct tagAudioFrame {} *x22; struct tagAudioFrame {} *x23; }*)arg1;
- (bool)enqueuePacket:(struct tagAudioPacket { int x1; int x2; int x3; bool x4; unsigned short x5; unsigned int x6; int x7; double x8; int x9; unsigned char x10[1472]; int x11; unsigned char x12[256]; unsigned char x13; struct tagAudioFrame {} *x14[4]; int x15; double x16; int x17; struct tagDecoderSettings {} *x18; bool x19; unsigned int x20; unsigned char x21; unsigned short x22; }*)arg1;
- (id)initWithConfiguration:(struct _VCTextReceiverConfiguration { struct tagHANDLE {} *x1; unsigned int x2; }*)arg1;
- (bool)isSupportedPayload:(int)arg1;
- (double)lastReceivedRTCPPacketTime;
- (double)lastReceivedRTPPacketTime;
- (bool)parsePacket:(struct tagAudioPacket { int x1; int x2; int x3; bool x4; unsigned short x5; unsigned int x6; int x7; double x8; int x9; unsigned char x10[1472]; int x11; unsigned char x12[256]; unsigned char x13; struct tagAudioFrame {} *x14[4]; int x15; double x16; int x17; struct tagDecoderSettings {} *x18; bool x19; unsigned int x20; unsigned char x21; unsigned short x22; }*)arg1;
- (void)processRTCPPacket;
- (void)processRTPPacket;
- (void)receiverThreadCallback:(struct tagVCRealTimeThreadParameters { int x1; }*)arg1;
- (int)retrieveRTPPacket:(struct tagAudioPacket { int x1; int x2; int x3; bool x4; unsigned short x5; unsigned int x6; int x7; double x8; int x9; unsigned char x10[1472]; int x11; unsigned char x12[256]; unsigned char x13; struct tagAudioFrame {} *x14[4]; int x15; double x16; int x17; struct tagDecoderSettings {} *x18; bool x19; unsigned int x20; unsigned char x21; unsigned short x22; }*)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLastReceivedRTCPPacketTime:(double)arg1;
- (void)setLastReceivedRTPPacketTime:(double)arg1;
- (void)setSupportedPayloads:(id)arg1;
- (void)splitPacket:(struct tagAudioPacket { int x1; int x2; int x3; bool x4; unsigned short x5; unsigned int x6; int x7; double x8; int x9; unsigned char x10[1472]; int x11; unsigned char x12[256]; unsigned char x13; struct tagAudioFrame {} *x14[4]; int x15; double x16; int x17; struct tagDecoderSettings {} *x18; bool x19; unsigned int x20; unsigned char x21; unsigned short x22; }*)arg1 packetArray:(struct tagAudioPacketArray { struct tagAudioPacket {} *x1[100]; unsigned int x2; unsigned int x3; }*)arg2;
- (bool)start;
- (bool)stop;
- (id)supportedPayloads;
- (void)validateAndEnqueuePackets:(struct tagAudioPacketArray { struct tagAudioPacket {} *x1[100]; unsigned int x2; unsigned int x3; }*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
