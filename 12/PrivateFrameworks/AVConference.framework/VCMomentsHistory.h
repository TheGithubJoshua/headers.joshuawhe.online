<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCMomentsHistory.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCMomentsHistory.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCMomentsHistory : NSObject <VCMomentsHistoryBufferDelegate> {
    struct __CVPixelBufferPool { } * _bufferPool;
    int  _captureHeight;
    int  _captureWidth;
    NSMutableDictionary * _completionHandlers;
    struct __CVPixelBufferPool { } * _copyPool;
    struct OpaqueVTPixelTransferSession { } * _copyTransferSession;
    VCMomentsHistoryBuffer * _frameBuffer;
    bool  _isFirstFrame;
    VCMomentsHistoryBuffer * _localAudioBuffer;
    NSString * _masterTransactionID;
    NSObject<OS_dispatch_queue> * _momentsQueue;
    NSMutableArray * _pendingRequests;
    VCMomentsHistoryBuffer * _remoteAudioBuffer;
    VideoAttributes * _remoteScreenAttributes;
    bool  _resize;
    struct OpaqueVTPixelTransferSession { } * _transferSession;
    NSObject<VCMovieWriterProtocol> * _writer;
    NSMutableDictionary * _writers;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) VideoAttributes *remoteScreenAttributes;
@property (readonly) Class superclass;

- (void)addLocalAudioSample:(struct opaqueVCAudioBufferList { }*)arg1 timestamp:(unsigned int)arg2;
- (void)addLocalVideoSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 cameraStatusBits:(unsigned char)arg2 timestamp:(unsigned int)arg3;
- (void)addRemoteAudioSample:(struct opaqueVCAudioBufferList { }*)arg1 timestamp:(unsigned int)arg2;
- (void)appendSampleWithWriter:(id)arg1 buffer:(id)arg2 sample:(struct opaqueCMSampleBuffer { }*)arg3;
- (struct CGSize { double x1; double x2; })calculateVisibleAreaWithVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cameraStatusBit:(unsigned char)arg2;
- (void)cancelRequestWithTransactionID:(id)arg1;
- (void)cleanupActiveRequests;
- (void)cleanupTransferSession;
- (struct __CVBuffer { }*)copyBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)dealloc;
- (void)endVideoRecording:(id)arg1 timestamp:(unsigned int)arg2 completionHandler:(id /* block */)arg3;
- (void)flushHistoryBuffers;
- (id)getFilePathWithTransactionID:(id)arg1 type:(unsigned char)arg2;
- (void)getLivePhotoWithTransactionID:(id)arg1 timestamp:(unsigned int)arg2 completionHandler:(id /* block */)arg3;
- (void)getPhotoWithTransactionID:(id)arg1 Timestamp:(unsigned int)arg2 completionHandler:(id /* block */)arg3;
- (void)handlePendingRequestSuccessWithSourceURL:(id)arg1;
- (void)handlePendingRequestWithError:(id)arg1;
- (void)handlePendingRequestsWithSourceURL:(id)arg1 error:(id)arg2;
- (void)handleSinglePendingRequestWithTransactionID:(id)arg1 sourceURL:(id)arg2;
- (void)historyBuffer:(id)arg1 didDequeueSample:(struct opaqueCMSampleBuffer { }*)arg2 timestamp:(unsigned int)arg3;
- (id)init;
- (void)registerDirectoryWithFilePath:(id)arg1;
- (id)remoteScreenAttributes;
- (int)rewriteMovieMetadataWithURL:(id)arg1 transactionID:(id)arg2;
- (void)setCompeletionHandler:(id /* block */)arg1 forTransactionID:(id)arg2;
- (void)setFrameRate:(float)arg1;
- (void)setRemoteScreenAttributes:(id)arg1;
- (void)setupResizingSessionsWithVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 cameraStatusBit:(unsigned char)arg2;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })setupStillImageWithTimestamp:(unsigned int)arg1 transactionID:(id)arg2 visibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 cameraStatusBit:(char *)arg4;
- (void)setupWriterWithTransactionID:(id)arg1 filePath:(id)arg2 stillImageTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 visibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 cameraStatusBit:(unsigned char)arg5;
- (void)startVideoRecording:(id)arg1 timestamp:(unsigned int)arg2 completionHandler:(id /* block */)arg3;
- (void)updateAudioBuffer:(id)arg1 WithSample:(struct opaqueCMSampleBuffer { }*)arg2 timestamp:(unsigned int)arg3;
- (void)updateCaptureSizesWithFirstFrame:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)updateRemoteScreenAttributes:(id)arg1;
- (void)updateVideoBuffer:(struct __CVBuffer { }*)arg1 withPresentationTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 cameraStatusBits:(unsigned char)arg3 timestamp:(unsigned int)arg4;
- (bool)writeToFileWithTimestamp:(unsigned int)arg1 transactionID:(id)arg2 URL:(id*)arg3;
- (bool)writeToLivePhotoToFileWithFrame:(struct __CVBuffer { }*)arg1 transactionID:(id)arg2 URL:(id*)arg3 cameraStatusBits:(unsigned char)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
