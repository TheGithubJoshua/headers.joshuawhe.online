<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCRateControlBandwidthEstimator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCRateControlBandwidthEstimator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCRateControlBandwidthEstimator : NSObject {
    int  _bandwidthDivergeCount;
    unsigned int  _bandwidthEstimationState;
    unsigned int  _earlyBytesInProbingSequence;
    unsigned int  _earlyPacketsInProbingSequence;
    double  _earlyProbingPacketArrivalTime;
    double  _estimatedBandwidth;
    double  _estimatedBandwidthUncapped;
    double  _firstDivergeTime;
    bool  _isFirstBWEstimationReleased;
    bool  _isInitialized;
    double  _lastPacketInProbingSequenceArrivalTime;
    unsigned int  _lastProbingSequenceReferenceTimestamp;
    double  _maxDetectableBandwidth;
    unsigned int  _maxOverRangePacketsCount;
    double  _minEstimationWindowDuration;
    unsigned int  _minPacketsCount;
    unsigned int  _mode;
    unsigned int  _overRangePacketsCount;
    unsigned int  _radioAccessTechnology;
    double  _referencePacketArrivalTime;
    unsigned int  _referencePacketDataSize;
    double  _suddenChangeBandwidthBuffer;
    int  _suddenChangeBandwidthBufferIndex;
    SuddenChangeParameters * _suddenChangeParameters;
    double  _totalBandwidth;
    unsigned int  _totalBytesInProbingSequence;
    unsigned int  _totalPacketsInProbingSequence;
}

@property (nonatomic) double estimatedBandwidth;
@property (nonatomic) double estimatedBandwidthUncapped;
@property (nonatomic) unsigned int mode;
@property (nonatomic) unsigned int radioAccessTechnology;

- (void)calculateBandwidthEstimationAtTime:(double)arg1 mediaTimestamp:(unsigned int)arg2 mediaDataSize:(unsigned int)arg3 probingSequence:(bool)arg4 probingSequenceID:(unsigned int)arg5;
- (void)calculateBandwidthEstimationForBandwidthSample:(double)arg1 arrivalTime:(double)arg2;
- (void)compensateSuddenChangeBandwidths;
- (void)dealloc;
- (void)detectSuddenChangeWithBandwidth:(double)arg1 suddenChangeAbove:(bool*)arg2 suddenChangeBelow:(bool*)arg3;
- (double)estimatedBandwidth;
- (double)estimatedBandwidthUncapped;
- (id)init;
- (void)initializeBandwidthEstimationAtTime:(double)arg1 mediaTimestamp:(unsigned int)arg2 probingSequence:(bool)arg3 probingSequenceID:(unsigned int)arg4;
- (bool)isPacketProcessedLateWithArrivalTime:(double)arg1;
- (bool)isSuddenChangeDurationMetAtArrivalTime:(double)arg1;
- (unsigned int)mode;
- (unsigned int)radioAccessTechnology;
- (void)recordSuddenChangeBandwidth:(double)arg1;
- (double)resetBandwidthWithParameters:(double)arg1 probingSequenceDuration:(double)arg2 probingSequenceSize:(unsigned int)arg3 packetsInProbingSequence:(unsigned int)arg4;
- (void)setEstimatedBandwidth:(double)arg1;
- (void)setEstimatedBandwidthUncapped:(double)arg1;
- (void)setMode:(unsigned int)arg1;
- (void)setRadioAccessTechnology:(unsigned int)arg1;
- (void)updateBandwidthDivergeCountAtArrivalTime:(double)arg1 suddenChangeAbove:(bool)arg2 suddenChangeBelow:(bool)arg3;
- (double)updateBandwidthEstimation:(double)arg1 arrivalTime:(double)arg2;
- (void)updateInitialBandwidthEstimationForCellularAtTime:(double)arg1 bandwidth:(double)arg2;
- (void)updateQualificationParameters;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
