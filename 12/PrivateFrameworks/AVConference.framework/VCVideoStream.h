<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCVideoStream.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCVideoStream.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCVideoStream : VCMediaStream <VCMediaStreamSyncDestination, VCVideoCaptureClient, VCVideoCaptureConverterDelegate, VCVideoReceiverDelegate> {
    struct opaqueCMBufferQueue { } * _bufferQueue;
    NSObject<OS_dispatch_semaphore> * _bufferQueueSemaphore;
    struct __CVBuffer { } * _cachedRemoteVideoFrame;
    VCVideoCaptureConverter * _captureConverter;
    NSArray * _compoundStreamIDs;
    bool  _didReceiveFirstFrame;
    double  _fecRatio;
    bool  _isCompoundStreamIDsIncreased;
    bool  _isServerBasedBandwidthProbingEnabled;
    NSObject<OS_dispatch_queue> * _lastDecodedFrameQueue;
    unsigned char  _lastMediaPriority;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _localLayerLock;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _remoteLayerLock;
    VCImageQueue * _remoteQueue;
    int  _reportingModuleID;
    NSNumber * _sendingStreamID;
    bool  _shouldEnableFaceZoom;
    long long  _streamToken;
    NSNumber * _targetStreamID;
    long long  _type;
    unsigned int  _uplinkOperatingBitrate;
    VCVideoReceiverBase * _videoReceiver;
    VCVideoRule * _videoRule;
    VCVideoTransmitterBase * _videoTransmitter;
}

@property (nonatomic, readonly) NSArray *compoundStreamIDs;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didReceiveFirstFrame;
@property (nonatomic) double fecRatio;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isCompoundStreamIDsIncreased;
@property (nonatomic) bool isServerBasedBandwidthProbingEnabled;
@property double lastSentAudioHostTime;
@property unsigned int lastSentAudioSampleTime;
@property (nonatomic, readonly) NSNumber *sendingStreamID;
@property (nonatomic) bool shouldEnableFaceZoom;
@property (readonly) long long streamToken;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSNumber *targetStreamID;

+ (id)capabilities;
+ (id)supportedVideoPayloads;

- (void)avConferencePreviewError:(id)arg1;
- (void)cacheRemoteVideoFrame:(struct __CVBuffer { }*)arg1;
- (void)cleanupBeforeReconfigure:(id)arg1;
- (id)clientCaptureRule;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1;
- (void)collectRxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1 interval:(float)arg2;
- (void)collectTxChannelMetrics:(struct { unsigned int x1; unsigned int x2; double x3; }*)arg1;
- (void)collectVideoConfigMetrics:(struct __CFDictionary { }*)arg1;
- (void)collectVideoStreamStartMetrics:(struct __CFDictionary { }*)arg1;
- (id)compoundStreamIDs;
- (void)converter:(id)arg1 didConvertFrame:(struct opaqueCMSampleBuffer { }*)arg2 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 droppedFrames:(int)arg4 cameraStatusBits:(unsigned char)arg5;
- (void)dealloc;
- (void)destroyVideoModules;
- (void)destroyVideoReceiver;
- (void)destroyVideoTransmitter;
- (bool)didReceiveFirstFrame;
- (double)fecRatio;
- (void)generateKeyFrame;
- (struct __CFDictionary { }*)getClientSpecificUserInfo;
- (struct __CFString { }*)getReportingClientName;
- (int)getReportingClientType;
- (void)handleActiveConnectionChange:(id)arg1;
- (id)init;
- (void)initVideoTransmitter;
- (id)initWithTransportSessionID:(unsigned int)arg1 ssrc:(unsigned int)arg2 streamToken:(long long)arg3;
- (bool)isCompoundStreamIDsIncreased;
- (bool)isServerBasedBandwidthProbingEnabled;
- (double)lastReceivedRTCPPacketTime;
- (double)lastReceivedRTPPacketTime;
- (double)lastSentAudioHostTime;
- (unsigned int)lastSentAudioSampleTime;
- (void)onCallIDChanged;
- (bool)onCaptureFrame:(struct opaqueCMSampleBuffer { }*)arg1 frameTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 droppedFrames:(int)arg3 cameraStatusBits:(unsigned char)arg4;
- (bool)onConfigureStreamWithConfiguration:(id)arg1 error:(id*)arg2;
- (void)onPauseWithCompletionHandler:(id /* block */)arg1;
- (void)onRTCPTimeout;
- (void)onRTPTimeout;
- (void)onResumeWithCompletionHandler:(id /* block */)arg1;
- (void)onSendRTCPPacket;
- (void)onStartWithCompletionHandler:(id /* block */)arg1;
- (void)onStopWithCompletionHandler:(id /* block */)arg1;
- (void)overrideConfigWithDefaults;
- (void)registerForVideoCapture;
- (void)reportingVideoStreamEvent:(unsigned short)arg1;
- (void)reportingVideoStreamEvent:(unsigned short)arg1 newVideoAttributes:(id)arg2;
- (void)reportingVideoStreamEvent:(unsigned short)arg1 newVideoAttributes:(id)arg2 currentStreamID:(id)arg3;
- (void)requestLastDecodedFrame;
- (double)rtcpHeartbeatLeeway;
- (void)sendLastRemoteVideoFrame:(struct __CVBuffer { }*)arg1;
- (id)sendingStreamID;
- (void)setDidReceiveFirstFrame:(bool)arg1;
- (void)setFecRatio:(double)arg1;
- (void)setIsServerBasedBandwidthProbingEnabled:(bool)arg1;
- (void)setLastSentAudioHostTime:(double)arg1;
- (void)setLastSentAudioSampleTime:(unsigned int)arg1;
- (bool)setRTPPayloads:(int*)arg1 numPayloads:(int)arg2 withError:(id*)arg3;
- (void)setShouldEnableFaceZoom:(bool)arg1;
- (void)setStreamIDs:(id)arg1 repairStreamIDs:(id)arg2;
- (void)setTargetStreamID:(id)arg1;
- (void)setupCompoundStreamIDsWithStreamIDs:(id)arg1;
- (void)setupVideoReceiver:(id)arg1;
- (void)setupVideoStream;
- (bool)shouldEnableFaceZoom;
- (void)sourceFrameRateDidChange:(unsigned int)arg1;
- (bool)startSynchronization:(id)arg1;
- (void)stopSynchronization;
- (long long)streamToken;
- (id)supportedPayloads;
- (id)targetStreamID;
- (void)thermalLevelDidChange:(int)arg1;
- (void)updateSourcePlayoutTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg1;
- (void)updateVideoConfig:(id)arg1;
- (void)updateVideoReceiver:(id)arg1;
- (bool)useUEPForVideoConfig:(int)arg1;
- (bool)validateVideoStreamConfigurations:(id)arg1;
- (bool)vcVideoReceiver:(id)arg1 didReceiveRemoteFrame:(struct __CVBuffer { }*)arg2 atTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 newVideoAttributes:(id)arg4 isFirstFrame:(bool)arg5;
- (void)vcVideoReceiver:(id)arg1 didSwitchFromStreamID:(unsigned short)arg2 toStreamID:(unsigned short)arg3;
- (void)vcVideoReceiver:(id)arg1 downlinkQualityDidChange:(id)arg2;
- (unsigned int)vcVideoReceiver:(id)arg1 receivedTMMBR:(unsigned int)arg2;
- (void)vcVideoReceiver:(id)arg1 requestKeyFrameGenerationWithStreamID:(unsigned short)arg2;
- (void)vcVideoReceiverRequestKeyFrame:(id)arg1 rtcpPSFBType:(unsigned int)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
