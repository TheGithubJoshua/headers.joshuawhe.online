<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCAudioRelayIO.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCAudioRelayIO.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCAudioRelayIO : NSObject <NSCopying> {
    bool  _isRunning;
    struct opaqueVCAudioBufferList { } * _micBuffer;
    int (* _micCallback;
    void * _micCallbackContext;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  _micFormat;
    float  _micPowerRMS;
    unsigned int  _micTimestamp;
    struct PacketThread_s { } * _packetThread;
    struct opaqueVCAudioBufferList { } * _speakerBuffer;
    int (* _speakerCallback;
    void * _speakerCallbackContext;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    }  _speakerFormat;
    float  _speakerPowerRMS;
    unsigned int  _speakerTimestamp;
    id /* block */  _startCompletionHandler;
    bool  _usePacketThread;
}

@property (nonatomic, readonly) bool isRunning;
@property (nonatomic, readonly) struct opaqueVCAudioBufferList { }*micBuffer;
@property int (*micCallback;
@property void*micCallbackContext;
@property struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; } micFormat;
@property float micPowerRMS;
@property unsigned int micTimestamp;
@property (readonly) struct PacketThread_s { }*packetThread;
@property (nonatomic, readonly) struct opaqueVCAudioBufferList { }*speakerBuffer;
@property int (*speakerCallback;
@property void*speakerCallbackContext;
@property struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; } speakerFormat;
@property float speakerPowerRMS;
@property unsigned int speakerTimestamp;
@property (copy) id /* block */ startCompletionHandler;
@property bool usePacketThread;

- (void)closeRecordings;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)createAudioBuffersWithIOBufferDuration:(double)arg1;
- (bool)createPacketThreadWithIOBufferDuration:(double)arg1 name:(id)arg2 error:(id*)arg3;
- (void)createRecordingsWithName:(id)arg1;
- (void)dealloc;
- (void)destroyPacketThread;
- (bool)isEqualToRelayIO:(id)arg1;
- (bool)isInitialized;
- (bool)isRunning;
- (struct opaqueVCAudioBufferList { }*)micBuffer;
- (int (*)micCallback;
- (void*)micCallbackContext;
- (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })micFormat;
- (float)micPowerRMS;
- (unsigned int)micTimestamp;
- (struct PacketThread_s { }*)packetThread;
- (void)printStreamFormats;
- (void)setMicCallback:(int (*)arg1;
- (void)setMicCallbackContext:(void*)arg1;
- (void)setMicFormat:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })arg1;
- (void)setMicPowerRMS:(float)arg1;
- (void)setMicTimestamp:(unsigned int)arg1;
- (void)setSpeakerCallback:(int (*)arg1;
- (void)setSpeakerCallbackContext:(void*)arg1;
- (void)setSpeakerFormat:(struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })arg1;
- (void)setSpeakerPowerRMS:(float)arg1;
- (void)setSpeakerTimestamp:(unsigned int)arg1;
- (void)setStartCompletionHandler:(id /* block */)arg1;
- (void)setUsePacketThread:(bool)arg1;
- (struct opaqueVCAudioBufferList { }*)speakerBuffer;
- (int (*)speakerCallback;
- (void*)speakerCallbackContext;
- (struct AudioStreamBasicDescription { double x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; })speakerFormat;
- (float)speakerPowerRMS;
- (unsigned int)speakerTimestamp;
- (id /* block */)startCompletionHandler;
- (bool)usePacketThread;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
