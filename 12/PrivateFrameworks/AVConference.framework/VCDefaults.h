<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCDefaults.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AVConference.framework/VCDefaults.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AVConference.framework/AVConference (1475.1.8)
 */

@interface VCDefaults : NSObject {
    int  _forceBitrate;
    int  _forceCaptureHeight;
    int  _forceCaptureWidth;
    int  _forceEncodeFramerate;
    int  _forceEncodeHeight;
    int  _forceEncodeWidth;
    int  _forceFramerate;
    int  _forceKeyFrameInterval;
    int  _forceRecvVideoPayload;
    int  _forceVideoPayload;
}

@property (readonly) unsigned int aacBlockSize;
@property (readonly) unsigned char audioPriorityDecayFast;
@property (readonly) unsigned char audioPriorityDecaySlow;
@property (readonly) unsigned char audioPriorityRampUpSpeed;
@property (readonly) bool audioRecordingEnabled;
@property (readonly) float audioVoiceDetectionSensitivity;
@property (readonly) int bundleAudio;
@property (readonly) bool canDecodeHD;
@property (readonly) bool cannedReplayEnabled;
@property (readonly) float depthFrameRateMultiplier;
@property (readonly) bool disableRed;
@property (readonly) bool disableVAD;
@property (readonly) bool dumpMediaBlob;
@property (readonly) int enable2vuyCapture;
@property (readonly) bool enableBitstreamCapture;
@property (readonly) bool enablePacketLogging;
@property (readonly) bool enableRecvBitstreamDump;
@property (readonly) bool enableTxBitstreamDump;
@property (readonly) int enableTxSourceYuvDump;
@property (readonly) bool enableVPBLogging;
@property (readonly) NSNumber *enableiRATSuggestion;
@property (readonly) int encodingScore;
@property (readonly) int extraPayloads;
@property (readonly) bool forceARCapture;
@property (readonly) int forceAudioBitrate;
@property (readonly) int forceAudioChannelCount;
@property (readonly) int forceAudioHardwareSampleRate;
@property (readonly) int forceAudioPacketsPerBundle;
@property (readonly) int forceAudioPayload;
@property (readonly) float forceAudioPowerThreshold;
@property (readonly) int forceAudioPowerTimeInterval;
@property (readonly) bool forceAudioPriorityEnabled;
@property (readonly) unsigned char forceAudioPriorityValue;
@property (readonly) int forceBitrate;
@property (readonly) int forceCaptureHeight;
@property (readonly) int forceCaptureWidth;
@property (readonly) bool forceDisableAudioPowerSpectrumRegister;
@property (readonly) bool forceDisableFaceZoom;
@property (readonly) bool forceDisableMediaEncryption;
@property (readonly) bool forceDisableMediaPriority;
@property (readonly) bool forceDisableMediaQueue;
@property (readonly) bool forceDisableMediaStalled;
@property (readonly) bool forceDisableMessageEncryption;
@property (readonly) bool forceDisableReporting;
@property (readonly) bool forceDisableThermal;
@property (readonly) bool forceDisableVideoDegraded;
@property (readonly) bool forceDynamicEffectsFramerate;
@property (readonly) bool forceEVSWideBand;
@property (readonly) bool forceEnablePearlCamera;
@property (readonly) int forceEncodeFramerate;
@property (readonly) int forceEncodeHeight;
@property (readonly) int forceEncodeWidth;
@property (readonly) bool forceFECRepairStream;
@property (readonly) int forceFramerate;
@property (readonly) bool forceHWI;
@property (readonly) bool forceIPv6;
@property (readonly) int forceKeyFrameInterval;
@property (readonly) bool forceMirroredCapture;
@property (readonly) bool forceMultiwayHWI;
@property (readonly) bool forceMuteAtStart;
@property (readonly) int forceRecvVideoPayload;
@property (readonly) int forceRedMaxDelay;
@property (readonly) int forceRedNumPayloads;
@property (readonly) bool forceScreenHWI;
@property (readonly) bool forceUseFloat;
@property (readonly) int forceVideoPayload;
@property (readonly) int forceVideoStreamFramerate;
@property (readonly) int forceVideoStreamKeyFrameInterval;
@property (readonly) int forceVideoStreamResolution;
@property (readonly) int forceVideoStreamRxMaxBitrate;
@property (readonly) int forceVideoStreamRxMinBitrate;
@property (readonly) int forceVideoStreamTxMaxBitrate;
@property (readonly) int forceVideoStreamTxMinBitrate;
@property (readonly) unsigned int forceVisibilityIndex;
@property (readonly) int localWRMLinkType;
@property (readonly) int max2GRate;
@property (readonly) unsigned int maxActiveVideoDecoders;
@property (readonly) unsigned int maxActiveVideoEncoders;
@property (readonly) bool mediaQueueDumpEnabled;
@property (readonly) unsigned int minParticipantCountSendVoiceActiveOnly;
@property (readonly) bool momentsUserPreferenceEnabled;
@property (readonly) unsigned int multiwayAudioNetworkBitrateCapCellular;
@property (readonly) unsigned int multiwayAudioNetworkBitrateCapWifi;
@property (readonly) unsigned int multiwayVideoNetworkBitrateCapCellular;
@property (readonly) unsigned int multiwayVideoNetworkBitrateCapWifi;
@property (readonly) float pauseHeartbeatInterval;
@property (readonly) unsigned int prominenceActiveAccumulationThreshold;
@property (readonly) unsigned int prominenceActiveProbabilityThreshold;
@property (readonly) unsigned int prominenceInactiveAccumulationThreshold;
@property (readonly) unsigned int prominenceInactiveProbabilityThreshold;
@property (readonly) bool rateControlDumpEnabled;
@property (readonly) int rateControlForceRxCap;
@property (readonly) int rateControlForceRxRate;
@property (readonly) int rateControlForceTxCap;
@property (readonly) int rateControlForceTxRate;
@property (readonly) bool rateControlLogEnabled;
@property (readonly) int redundancyControlForceVideoRedundancyPercentage;
@property (readonly) bool shouldDisplayVideoInfoLayer;
@property (readonly) unsigned int silenceLevelMovingAveragePeriod;
@property (readonly) bool useSBR;
@property (readonly) int videoStreamRateControlAlgorithm;
@property (readonly) bool videoStreamRateControlDumpEnabled;

+ (bool)booleanValueForKey:(struct __CFString { }*)arg1;
+ (bool)booleanValueForKey:(struct __CFString { }*)arg1 defaultValue:(bool)arg2;
+ (double)getDoubleValueForKey:(struct __CFString { }*)arg1 defaultValue:(double)arg2;
+ (long long)integerValueForKey:(struct __CFString { }*)arg1;
+ (long long)integerValueForKey:(struct __CFString { }*)arg1 defaultValue:(long long)arg2;
+ (id)sharedInstance;

- (unsigned int)aacBlockSize;
- (id)allocWithZone:(struct _NSZone { }*)arg1;
- (unsigned char)audioPriorityDecayFast;
- (unsigned char)audioPriorityDecaySlow;
- (unsigned char)audioPriorityRampUpSpeed;
- (bool)audioRecordingEnabled;
- (float)audioVoiceDetectionSensitivity;
- (id)autorelease;
- (int)bundleAudio;
- (bool)canDecodeHD;
- (bool)cannedReplayEnabled;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (float)depthFrameRateMultiplier;
- (bool)disableRed;
- (bool)disableVAD;
- (bool)dumpMediaBlob;
- (int)enable2vuyCapture;
- (bool)enableAudioDumpParticipantLocal:(bool)arg1;
- (bool)enableAudioDumpParticipantRemote:(bool)arg1;
- (bool)enableBitstreamCapture;
- (bool)enablePacketLogging;
- (bool)enableRecvBitstreamDump;
- (bool)enableTxBitstreamDump;
- (int)enableTxSourceYuvDump;
- (bool)enableVPBLogging;
- (id)enableiRATSuggestion;
- (int)encodingScore;
- (int)extraPayloads;
- (bool)forceARCapture;
- (int)forceAudioBitrate;
- (int)forceAudioChannelCount;
- (int)forceAudioHardwareSampleRate;
- (int)forceAudioPacketsPerBundle;
- (int)forceAudioPayload;
- (float)forceAudioPowerThreshold;
- (int)forceAudioPowerTimeInterval;
- (bool)forceAudioPriorityEnabled;
- (unsigned char)forceAudioPriorityValue;
- (int)forceBitrate;
- (int)forceCaptureHeight;
- (int)forceCaptureWidth;
- (bool)forceDisableAudioPowerSpectrumRegister;
- (bool)forceDisableFaceZoom;
- (bool)forceDisableMediaEncryption;
- (bool)forceDisableMediaPriority;
- (bool)forceDisableMediaQueue;
- (bool)forceDisableMediaStalled;
- (bool)forceDisableMessageEncryption;
- (bool)forceDisableReporting;
- (bool)forceDisableThermal;
- (bool)forceDisableVideoDegraded;
- (bool)forceDynamicEffectsFramerate;
- (bool)forceEVSWideBand;
- (bool)forceEnablePearlCamera;
- (int)forceEncodeFramerate;
- (int)forceEncodeHeight;
- (int)forceEncodeWidth;
- (bool)forceFECRepairStream;
- (int)forceFramerate;
- (bool)forceHWI;
- (bool)forceIPv6;
- (int)forceKeyFrameInterval;
- (bool)forceMirroredCapture;
- (bool)forceMultiwayHWI;
- (bool)forceMuteAtStart;
- (int)forceRecvVideoPayload;
- (int)forceRedMaxDelay;
- (int)forceRedNumPayloads;
- (bool)forceScreenHWI;
- (unsigned int)forceThermalLevelFramerate:(unsigned int)arg1;
- (bool)forceUseFloat;
- (int)forceVideoPayload;
- (int)forceVideoStreamFramerate;
- (int)forceVideoStreamKeyFrameInterval;
- (int)forceVideoStreamResolution;
- (int)forceVideoStreamRxMaxBitrate;
- (int)forceVideoStreamRxMinBitrate;
- (int)forceVideoStreamTxMaxBitrate;
- (int)forceVideoStreamTxMinBitrate;
- (unsigned int)forceVisibilityIndex;
- (id)init;
- (int)localWRMLinkType;
- (int)max2GRate;
- (unsigned int)maxActiveVideoDecoders;
- (unsigned int)maxActiveVideoEncoders;
- (bool)mediaQueueDumpEnabled;
- (unsigned int)minParticipantCountSendVoiceActiveOnly;
- (bool)momentsUserPreferenceEnabled;
- (unsigned int)multiwayAudioNetworkBitrateCapCellular;
- (unsigned int)multiwayAudioNetworkBitrateCapWifi;
- (unsigned int)multiwayVideoNetworkBitrateCapCellular;
- (unsigned int)multiwayVideoNetworkBitrateCapWifi;
- (float)pauseHeartbeatInterval;
- (unsigned int)prominenceActiveAccumulationThreshold;
- (unsigned int)prominenceActiveProbabilityThreshold;
- (unsigned int)prominenceInactiveAccumulationThreshold;
- (unsigned int)prominenceInactiveProbabilityThreshold;
- (bool)rateControlDumpEnabled;
- (int)rateControlForceRxCap;
- (int)rateControlForceRxRate;
- (int)rateControlForceTxCap;
- (int)rateControlForceTxRate;
- (bool)rateControlLogEnabled;
- (int)redundancyControlForceVideoRedundancyPercentage;
- (oneway void)release;
- (id)retain;
- (unsigned long long)retainCount;
- (void)seperateString:(id)arg1;
- (bool)shouldDisplayVideoInfoLayer;
- (bool)shouldOverrideEffectsFramerate:(unsigned int*)arg1;
- (unsigned int)silenceLevelMovingAveragePeriod;
- (bool)useSBR;
- (int)videoStreamRateControlAlgorithm;
- (bool)videoStreamRateControlDumpEnabled;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
