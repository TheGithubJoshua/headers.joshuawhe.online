<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NCPreviewInteractionPresenter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UserNotificationsUIKit.framework/NCPreviewInteractionPresenter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit (1)
 */

@interface NCPreviewInteractionPresenter : NSObject <UIGestureRecognizerDelegate, UIPreviewInteractionDelegatePrivate> {
    unsigned long long  _backgroundMaterialOptions;
    MTMaterialView * _backgroundMaterialView;
    UIView * _containerView;
    NCPreviewInteractionPresenterContentView * _contentView;
    <NCPreviewInteractionPresenterDelegate> * _delegate;
    bool  _didSendBeginInteraction;
    NSString * _groupName;
    long long  _materialRecipe;
    unsigned long long  _overlayMaterialOptions;
    bool  _presented;
    NCPreviewInteractionPresentedControl * _presentedControl;
    UIPreviewInteraction * _previewInteraction;
    UIView * _sourceView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sourceViewVisibleRect;
    NCTouchEaterGestureRecognizer * _touchEater;
    bool  _transitioning;
}

@property (nonatomic, readonly) unsigned long long backgroundMaterialOptions;
@property (getter=_backgroundMaterialView, nonatomic, readonly) MTMaterialView *backgroundMaterialView;
@property (getter=_containerView, nonatomic, readonly) UIView *containerView;
@property (getter=_contentView, nonatomic, readonly) NCPreviewInteractionPresenterContentView *contentView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NCPreviewInteractionPresenterDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=_didSendBeginInteraction, setter=_setDidSendBeginInteraction:, nonatomic) bool didSendBeginInteraction;
@property (nonatomic, copy) NSString *groupName;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long materialRecipe;
@property (nonatomic, readonly) unsigned long long overlayMaterialOptions;
@property (getter=isPresented, setter=_setPresented:, nonatomic) bool presented;
@property (getter=_presentedControl, nonatomic, readonly) NCPreviewInteractionPresentedControl *presentedControl;
@property (getter=_previewInteraction, nonatomic, readonly) UIPreviewInteraction *previewInteraction;
@property (nonatomic, readonly) UIView *sourceView;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } sourceViewVisibleRect;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *title;
@property (getter=_touchEater, nonatomic, readonly) NCTouchEaterGestureRecognizer *touchEater;
@property (getter=_isTransitioning, setter=_setTransitioning:, nonatomic) bool transitioning;

- (void).cxx_destruct;
- (void)_animateTransitionWithProgress:(double)arg1 ended:(bool)arg2 cancelled:(bool)arg3 completion:(id /* block */)arg4;
- (id)_backgroundMaterialView;
- (void)_configureBackgroundMaterialViewIfNecessary;
- (void)_configureContainerViewIfNecessary;
- (void)_configureContentViewIfNecessary;
- (void)_configurePresentedControlIfNecessaryWithTitle:(id)arg1;
- (id)_containerView;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (id)_contentView;
- (bool)_didSendBeginInteraction;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_finalPresentedViewFrame;
- (double)_frictionForTransitionProgress:(double)arg1 ended:(bool)arg2 cancelled:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_initialPresentedViewFrame;
- (bool)_isTransitioning;
- (void)_performCancel;
- (id)_presentedControl;
- (id)_previewInteraction;
- (id)_previewInteractionHighlighterForPreviewTransition:(id)arg1;
- (bool)_previewInteractionShouldAutomaticallyTransitionToPreviewAfterDelay:(id)arg1;
- (void)_setDidSendBeginInteraction:(bool)arg1;
- (void)_setPresented:(bool)arg1;
- (void)_setTransitioning:(bool)arg1;
- (void)_setUpBackgroundMaterialView;
- (void)_setUpContainerView;
- (void)_setUpContentView;
- (void)_setUpPresentedControl;
- (void)_tearDown;
- (double)_tensionForTransitionProgress:(double)arg1 ended:(bool)arg2 cancelled:(bool)arg3;
- (id)_touchEater;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_transitionalPresentedViewFrameWithProgress:(double)arg1;
- (void)addTarget:(id)arg1 action:(SEL)arg2;
- (unsigned long long)backgroundMaterialOptions;
- (void)dealloc;
- (id)delegate;
- (bool)dismissModalFullScreenIfNeeded;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)groupName;
- (void)handleEatenTouch:(id)arg1;
- (id)initWithTitle:(id)arg1 sourceView:(id)arg2 materialRecipe:(long long)arg3 backgroundMaterialOptions:(unsigned long long)arg4 overlayMaterialOptions:(unsigned long long)arg5;
- (bool)isPresented;
- (long long)materialRecipe;
- (unsigned long long)overlayMaterialOptions;
- (void)previewInteraction:(id)arg1 didUpdatePreviewTransition:(double)arg2 ended:(bool)arg3;
- (void)previewInteractionDidCancel:(id)arg1;
- (bool)previewInteractionShouldBegin:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGroupName:(id)arg1;
- (void)setSourceViewVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)sourceView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sourceViewVisibleRect;
- (id)title;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
