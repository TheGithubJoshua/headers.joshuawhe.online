<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NCToggleControl.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UserNotificationsUIKit.framework/NCToggleControl.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit (1)
 */

@interface NCToggleControl : PLGlyphControl <NCPreviewInteractionPresenterDelegate, PLContentSizeCategoryAdjusting> {
    bool  _adjustsFontForContentSizeCategory;
    unsigned int  _anchorEdge;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedEffectiveMaxExpandedSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedEffectiveMaxUnexpandedSize;
    <NCToggleControlDelegate> * _delegate;
    bool  _expanded;
    bool  _expandedPriorToControlEvent;
    bool  _glyphAlwaysVisible;
    NCToggleControlPair * _managingPair;
    NSString * _preferredContentSizeCategory;
    NCPreviewInteractionPresenter * _previewInteractionPlatterPresenter;
    UILabel * _titleLabel;
    unsigned long long  _toggleControlType;
}

@property (nonatomic) bool adjustsFontForContentSizeCategory;
@property (nonatomic) unsigned int anchorEdge;
@property (getter=_cachedEffectiveMaxExpandedSize, nonatomic, readonly) struct CGSize { double x1; double x2; } cachedEffectiveMaxExpandedSize;
@property (getter=_cachedEffectiveMaxUnexpandedSize, nonatomic, readonly) struct CGSize { double x1; double x2; } cachedEffectiveMaxUnexpandedSize;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <NCToggleControlDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isExpanded, nonatomic) bool expanded;
@property (getter=_wasExpandedPriorToControlEvent, nonatomic) bool expandedPriorToControlEvent;
@property (getter=isGlyphAlwaysVisible, nonatomic) bool glyphAlwaysVisible;
@property (readonly) unsigned long long hash;
@property (getter=_managingPair, setter=_setManagingPair:, nonatomic) NCToggleControlPair *managingPair;
@property (nonatomic, copy) NSString *preferredContentSizeCategory;
@property (getter=_previewInteractionPlatterPresenter, nonatomic, retain) NCPreviewInteractionPresenter *previewInteractionPlatterPresenter;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *title;
@property (getter=_titleLabel, nonatomic, readonly) UILabel *titleLabel;
@property (getter=_toggleControlType, nonatomic, readonly) unsigned long long toggleControlType;

+ (id)_labelFont:(bool)arg1;
+ (id)dismissControlWithMaterialRecipe:(long long)arg1 backgroundMaterialOptions:(unsigned long long)arg2 overlayMaterialOptions:(unsigned long long)arg3;
+ (double)effectiveHeight:(bool)arg1;
+ (void)performWithDefaultExpansionAnimation:(id /* block */)arg1 completion:(id /* block */)arg2;
+ (id)showLessControlWithMaterialRecipe:(long long)arg1 backgroundMaterialOptions:(unsigned long long)arg2 overlayMaterialOptions:(unsigned long long)arg3;

- (void).cxx_destruct;
- (struct CGSize { double x1; double x2; })_cachedEffectiveMaxExpandedSize;
- (struct CGSize { double x1; double x2; })_cachedEffectiveMaxUnexpandedSize;
- (void)_configureTitleLabelIfNecessaryWithTitle:(id)arg1;
- (double)_cornerRadius;
- (void)_darkerSystemColorsStatusDidChange:(id)arg1;
- (struct CGSize { double x1; double x2; })_effectiveExpandedSize;
- (struct CGSize { double x1; double x2; })_effectiveGlyphSize;
- (double)_effectiveHeight;
- (double)_effectiveInternalPadding;
- (double)_effectiveLeadingTrailingPadding;
- (struct CGSize { double x1; double x2; })_effectiveUnexpandedSize;
- (double)_effectiveValueForMinValue:(double)arg1 withFont:(id)arg2;
- (void)_handleTouchUpInsideWithEvent:(id)arg1;
- (id)_labelFont;
- (id)_managingPair;
- (id)_previewInteractionPlatterPresenter;
- (void)_reduceTransparencyStatusDidChange:(id)arg1;
- (void)_sendActionsForEvents:(unsigned long long)arg1 withEvent:(id)arg2;
- (void)_setManagingPair:(id)arg1;
- (struct CGSize { double x1; double x2; })_sizeThatFits:(struct CGSize { double x1; double x2; })arg1 whenExpanded:(bool)arg2;
- (id)_titleLabel;
- (unsigned long long)_toggleControlType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_unexpandedFrame;
- (void)_updateTitleLabelTextAttributes;
- (void)_updateTitleLabelVibrantStyling;
- (bool)_wasExpandedPriorToControlEvent;
- (void)addTarget:(id)arg1 forPreviewInteractionPresentedContentWithAction:(SEL)arg2;
- (bool)adjustForContentSizeCategoryChange;
- (bool)adjustsFontForContentSizeCategory;
- (unsigned int)anchorEdge;
- (id)containerViewForPreviewInteractionPresenter:(id)arg1;
- (id)delegate;
- (bool)dismissModalFullScreenIfNeeded;
- (bool)isExpanded;
- (bool)isGlyphAlwaysVisible;
- (void)layoutSubviews;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)preferredContentSizeCategory;
- (void)previewInteractionPresenterDidBeginInteraction:(id)arg1;
- (void)previewInteractionPresenterDidCommitToPresentation:(id)arg1;
- (void)previewInteractionPresenterDidDismiss:(id)arg1;
- (void)previewInteractionPresenterDidPresent:(id)arg1;
- (bool)previewInteractionPresenterShouldBegin:(id)arg1;
- (void)setAdjustsFontForContentSizeCategory:(bool)arg1;
- (void)setAnchorEdge:(unsigned int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExpanded:(bool)arg1;
- (void)setExpandedPriorToControlEvent:(bool)arg1;
- (void)setGlyphAlwaysVisible:(bool)arg1;
- (void)setPreferredContentSizeCategory:(id)arg1;
- (void)setPreviewInteractionPlatterPresenter:(id)arg1;
- (void)setTitle:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)title;
- (void)traitCollectionDidChange:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
