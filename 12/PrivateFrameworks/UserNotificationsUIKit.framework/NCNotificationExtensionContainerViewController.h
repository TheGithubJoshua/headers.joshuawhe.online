<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NCNotificationExtensionContainerViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UserNotificationsUIKit.framework/NCNotificationExtensionContainerViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UserNotificationsUIKit.framework/UserNotificationsUIKit (1)
 */

@interface NCNotificationExtensionContainerViewController : UIViewController <NCNotificationCustomContent, _UNNotificationExtensionHostDelegate> {
    bool  _allowManualDismiss;
    UIView * _blockingView;
    double  _contentSizeRatio;
    bool  _defaultContentHidden;
    <NCNotificationCustomContentDelegate> * _delegate;
    NSString * _extensionIdentifier;
    _UNNotificationExtensionHostViewController * _extensionViewController;
    NCMediaPlayPauseButton * _mediaPlayPauseButton;
    NCNotificationRequest * _notificationRequest;
    bool  _overridesDefaultTitle;
    NSMutableArray * _queuedRequests;
    NSMutableArray * _updatedActions;
    bool  _userInteractionEnabled;
}

@property (nonatomic) bool allowManualDismiss;
@property (nonatomic, retain) UIView *blockingView;
@property (nonatomic, readonly) NSString *contentExtensionIdentifier;
@property (nonatomic) double contentSizeRatio;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool defaultContentHidden;
@property (nonatomic) <NCNotificationCustomContentDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSString *extensionIdentifier;
@property (nonatomic, retain) _UNNotificationExtensionHostViewController *extensionViewController;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NCMediaPlayPauseButton *mediaPlayPauseButton;
@property (nonatomic, retain) NCNotificationRequest *notificationRequest;
@property (nonatomic) bool overridesDefaultTitle;
@property (nonatomic) NCNotificationAction *presentationSourceAction;
@property (nonatomic, retain) NSMutableArray *queuedRequests;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *title;
@property (nonatomic, retain) NSMutableArray *updatedActions;
@property (nonatomic) bool userInteractionEnabled;

- (void).cxx_destruct;
- (void)_addExtensionViewFromViewController:(id)arg1;
- (double)_contentHeightForWidth:(double)arg1;
- (void)_flushQueuedRequests;
- (void)_loadExtensionViewControllerWithCompletion:(id /* block */)arg1;
- (void)_mediaPlayPauseButtonTapped:(id)arg1;
- (id)_requestActionForActionIdentifier:(id)arg1;
- (id)_responseForAction:(id)arg1 notification:(id)arg2 response:(id)arg3;
- (void)_setupExtensionViewController:(id)arg1;
- (void)_setupMediaButton;
- (void)_setupRemoteServiceInterface:(id)arg1;
- (void)_teardownExtension;
- (bool)allowManualDismiss;
- (bool)becomeFirstResponder;
- (id)blockingView;
- (bool)canBecomeFirstResponder;
- (bool)canResignFirstResponder;
- (id)cancelTouches;
- (id)contentExtensionIdentifier;
- (double)contentSizeRatio;
- (unsigned long long)customContentLocation;
- (void)dealloc;
- (bool)defaultContentHidden;
- (id)delegate;
- (bool)didReceiveNotificationRequest:(id)arg1;
- (id)extensionIdentifier;
- (id)extensionViewController;
- (id)initWithExtension:(id)arg1 forNotificationRequest:(id)arg2;
- (void)loadAudioAccessoryView;
- (id)mediaPlayPauseButton;
- (void)notificationHost:(id)arg1 extensionDidCompleteResponse:(id)arg2 withOption:(unsigned long long)arg3;
- (void)notificationHostExtension:(id)arg1 audioAccessoryViewLayerContextId:(unsigned int)arg2;
- (void)notificationHostExtension:(id)arg1 setDismissEnabled:(bool)arg2;
- (void)notificationHostExtension:(id)arg1 setTitle:(id)arg2;
- (void)notificationHostExtension:(id)arg1 setUserNotificationActions:(id)arg2;
- (void)notificationHostExtensionDidUpdateControls:(id)arg1;
- (void)notificationHostExtensionMediaPlayingDidPause:(id)arg1;
- (void)notificationHostExtensionMediaPlayingDidStart:(id)arg1;
- (void)notificationHostExtensionRequestsDefaultAction:(id)arg1;
- (void)notificationHostExtensionRequestsDismiss:(id)arg1;
- (id)notificationRequest;
- (bool)overridesDefaultTitle;
- (bool)performAction:(id)arg1 forNotification:(id)arg2;
- (bool)performAction:(id)arg1 forNotification:(id)arg2 withUserInfo:(id)arg3;
- (void)playAudioMessage;
- (void)preferredContentSizeDidChangeForChildContentContainer:(id)arg1;
- (void)preserveInputViews;
- (id)queuedRequests;
- (id)remoteService;
- (bool)resignFirstResponder;
- (bool)restoreInputViews;
- (void)setAllowManualDismiss:(bool)arg1;
- (void)setBlockingView:(id)arg1;
- (void)setContentSizeRatio:(double)arg1;
- (void)setDefaultContentHidden:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setExtensionIdentifier:(id)arg1;
- (void)setExtensionViewController:(id)arg1;
- (void)setMediaPlayPauseButton:(id)arg1;
- (void)setNotificationRequest:(id)arg1;
- (void)setOverridesDefaultTitle:(bool)arg1;
- (void)setQueuedRequests:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setUpdatedActions:(id)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeForChildContentContainer:(id)arg1 withParentContainerSize:(struct CGSize { double x1; double x2; })arg2;
- (id)updatedActions;
- (bool)userInteractionEnabled;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
