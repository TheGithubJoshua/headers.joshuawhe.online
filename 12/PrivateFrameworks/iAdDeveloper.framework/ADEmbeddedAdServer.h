<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ADEmbeddedAdServer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iAdDeveloper.framework/ADEmbeddedAdServer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iAdDeveloper.framework/iAdDeveloper (1)
 */

@interface ADEmbeddedAdServer : NSObject <HTSHTTPServerDelegate> {
    NSArray * _adManifests;
    NSString * _adPath;
    bool  _alwaysRegenerateWebArchives;
    NSMutableDictionary * _authTokens;
    NSDictionary * _defaultAdData;
    bool  _defaultsToNoQualifiedAds;
    <ADEmbeddedAdServerDelegate> * _delegate;
    NSString * _publicURLRoot;
    HTSHTTPServer * _server;
    struct __FSEventStream { } * _stream;
}

@property (nonatomic, retain) NSArray *adManifests;
@property (nonatomic, copy) NSString *adPath;
@property (nonatomic) bool alwaysRegenerateWebArchives;
@property (nonatomic) double bandwidthStddev;
@property (nonatomic) int cacheMaxAge;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSDictionary *defaultAdData;
@property (nonatomic) bool defaultsToNoQualifiedAds;
@property (nonatomic) <ADEmbeddedAdServerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool digestAuthenticationEnabled;
@property (readonly) unsigned long long hash;
@property (nonatomic) double kbps;
@property (nonatomic) double latency;
@property (nonatomic) double latencyStddev;
@property (nonatomic) bool pipeliningEnabled;
@property (nonatomic, readonly) unsigned short port;
@property (nonatomic, copy) NSString *publicURLRoot;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned long long totalBytesWritten;
@property (nonatomic, readonly) NSString *urlString;

+ (id)accessibilityDescriptionForAccessibilityKey:(id)arg1;
+ (bool)adBundleAtURL:(id)arg1 matchesRequest:(id)arg2;
+ (int)creativeTypeForPlistType:(id)arg1;
+ (bool)creativeTypeMatches:(id)arg1 type:(int)arg2 creativeType:(id)arg3;
+ (id)creativesForAdBundleAtURL:(id)arg1 matchingRequest:(id)arg2;
+ (id)iAdDeviceModelForDeviceModel:(id)arg1;
+ (id)manifestForAdAtURL:(id)arg1;
+ (id)supportedDevicesForAdProperties:(id)arg1;

- (id)_actionDictionaryFromProperties:(id)arg1 path:(id)arg2 error:(id*)arg3;
- (id)_adDataForPath:(id)arg1 creative:(id)arg2 requester:(id)arg3 error:(id*)arg4;
- (id)_defaultResponseForBatchRequest:(id)arg1;
- (id)_handleAdSlotRequest:(id)arg1 message:(id)arg2;
- (id)_handleAdSpaceStatusEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleBatchRequest:(id)arg1 message:(id)arg2;
- (id)_handleConfigurationRequest:(id)arg1 message:(id)arg2;
- (id)_handleGenericAnalyticsRequest:(id)arg1 message:(id)arg2 type:(int)arg3;
- (id)_handleGenericPostRequest:(id)arg1;
- (id)_handleHeartbeatTokenRequest:(id)arg1 message:(id)arg2;
- (id)_handleListeningPresenceEventsRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogAdContentErrorRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogAdEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogAggregateMetricsRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogImpressionRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogStationClientEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogSysEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleLogTileImpressionEventRequest:(id)arg1 message:(id)arg2;
- (id)_handleManifestRequest:(id)arg1 message:(id)arg2;
- (id)_handleMescalSignSAPSetupCertificateRequest:(id)arg1 message:(id)arg2;
- (id)_handleMescalSignSAPSetupRequest:(id)arg1 message:(id)arg2;
- (id)_handleOptOutRequest:(id)arg1 message:(id)arg2;
- (id)_handlePostRequest:(id)arg1;
- (id)_handleRewardRequest:(id)arg1 message:(id)arg2;
- (id)_handleRewardsCodeResultRequest:(id)arg1 message:(id)arg2;
- (id)_handleSegmentUpdateRequest:(id)arg1 message:(id)arg2;
- (id)_handleServerErrorRequest:(id)arg1 message:(id)arg2;
- (id)_integerColorFromStringColor:(id)arg1;
- (id)_mimeTypeForExtension:(id)arg1;
- (bool)_tryAddingAdTagContentStringForCreative:(id)arg1 toAdReponse:(id)arg2 withAdPath:(id)arg3;
- (id)_webArchiveFilenameForDirectory:(id)arg1 withBaseURL:(id)arg2;
- (id)_webResourceForPath:(id)arg1 url:(id)arg2;
- (id)_webResourcesInDirectory:(id)arg1 baseURL:(id)arg2;
- (id)adDataForAdBundleAtPath:(id)arg1 creative:(id)arg2 requesterId:(id)arg3 allowWebArchive:(bool)arg4;
- (id)adManifests;
- (id)adPath;
- (bool)alwaysRegenerateWebArchives;
- (double)bandwidthStddev;
- (int)cacheMaxAge;
- (void)dealloc;
- (id)defaultAdData;
- (bool)defaultsToNoQualifiedAds;
- (id)delegate;
- (bool)digestAuthenticationEnabled;
- (void)httpServer:(id)arg1 closedConnection:(id)arg2;
- (void)httpServer:(id)arg1 closedConnection:(id)arg2 withError:(id)arg3;
- (void)httpServer:(id)arg1 connection:(id)arg2 blockedSandboxViolation:(id)arg3;
- (void)httpServer:(id)arg1 connection:(id)arg2 droppedResponseToRequestBeforeClosing:(id)arg3;
- (void)httpServer:(id)arg1 connection:(id)arg2 enqueuedResponseToRequest:(id)arg3 statusCode:(int)arg4 length:(unsigned long long)arg5;
- (void)httpServer:(id)arg1 connection:(id)arg2 wroteBytes:(unsigned long long)arg3 andCompletedResponseToRequest:(id)arg4;
- (void)httpServer:(id)arg1 connection:(id)arg2 wroteBytes:(unsigned long long)arg3 forResponseToRequest:(id)arg4 remaining:(unsigned long long)arg5;
- (void)httpServer:(id)arg1 dataForRequest:(id)arg2 resolvedPath:(id)arg3 handler:(id /* block */)arg4;
- (void)httpServer:(id)arg1 logMessage:(id)arg2;
- (id)httpServer:(id)arg1 proposedResponse:(id)arg2;
- (void)httpServer:(id)arg1 receivedConnection:(id)arg2;
- (id)httpServer:(id)arg1 rewritePath:(id)arg2;
- (bool)httpServer:(id)arg1 shouldAllowRequest:(id)arg2 withAuthorization:(id)arg3;
- (id)httpServer:(id)arg1 unhandledRequest:(id)arg2;
- (void)httpServerListenSocketFailed:(id)arg1;
- (id)init;
- (id)initWithPort:(unsigned short)arg1 adPath:(id)arg2;
- (double)kbps;
- (double)latency;
- (double)latencyStddev;
- (bool)pipeliningEnabled;
- (unsigned short)port;
- (id)publicURLRoot;
- (void)resetNetworkSetup;
- (void)setAdManifests:(id)arg1;
- (void)setAdPath:(id)arg1;
- (void)setAlwaysRegenerateWebArchives:(bool)arg1;
- (void)setBandwidthStddev:(double)arg1;
- (void)setCacheMaxAge:(int)arg1;
- (void)setDefaultAdData:(id)arg1;
- (void)setDefaultsToNoQualifiedAds:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDigestAuthenticationEnabled:(bool)arg1;
- (void)setKbps:(double)arg1;
- (void)setLatency:(double)arg1;
- (void)setLatencyStddev:(double)arg1;
- (void)setPipeliningEnabled:(bool)arg1;
- (void)setPublicURLRoot:(id)arg1;
- (unsigned long long)totalBytesWritten;
- (id)urlString;
- (id)webArchiveForDirectory:(id)arg1 withBaseURL:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
