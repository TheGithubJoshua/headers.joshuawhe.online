<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SFDeviceAssetManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Sharing.framework/SFDeviceAssetManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Sharing.framework/Sharing (1288.66)
 */

@interface SFDeviceAssetManager : NSObject {
    bool  _activateCalled;
    NSURL * _cacheDirectory;
    NSDictionary * _cachedMpnMappingTable;
    NSDictionary * _cachedProductMappingsTable;
    NSMutableDictionary * _cachedQueryPaths;
    MAAsset * _deviceAssetManagement;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    bool  _invalidateCalled;
    bool  _invalidateDone;
    NSDictionary * _mpnMappingTable;
    NSString * _networkStatus;
    NSDictionary * _productTypesMappingTable;
    CUReachabilityMonitor * _reachabilityMonitor;
    bool  _useProcessLocalCache;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic, readonly) NSString *networkStatus;
@property (nonatomic) bool useProcessLocalCache;

- (void).cxx_destruct;
- (void)activate;
- (void)addQueryResultToLocalCache:(id)arg1 url:(id)arg2 isFallback:(bool)arg3;
- (id)cacheDirectory;
- (bool)canUseMobileAssetSPI;
- (void)clearQueryResultFromLocalCache:(id)arg1;
- (id)dispatchQueue;
- (void)getAssetBundleForDeviceQuery:(id)arg1 withRequestConfiguration:(id)arg2;
- (id)hardcodedMappedProducts;
- (id)init;
- (void)invalidate;
- (id)localCacheWithFileName:(id)arg1;
- (id)locallyCachedMPNsForProductType:(id)arg1;
- (id)locallyCachedProductMappings;
- (id)locallyCachedQueryResults;
- (void)logNetworkStatus;
- (void)mappedProductTypeForProductType:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)mpnMappingFileNameForProductType:(id)arg1;
- (id)networkStatus;
- (void)onqueue_activate;
- (id)onqueue_assetMappedMPNForMPN:(id)arg1 forProductType:(id)arg2;
- (id)onqueue_assetMappedProductTypeForProductType:(id)arg1;
- (void)onqueue_downloadAsset:(id)arg1 ucat:(struct LogCategory { int x1; int x2; char *x3; unsigned int x4; char *x5; char *x6; int x7; struct LogCategory {} *x8; struct LogOutput {} *x9; struct LogOutput {} *x10; unsigned long long x11; unsigned long long x12; unsigned int x13; unsigned int x14; char *x15; struct LogCategoryPrivate {} *x16; }*)arg2 queryLogString:(id)arg3 withCompletionHandler:(id /* block */)arg4;
- (void)onqueue_executeNextMAQueryForTask:(id)arg1;
- (void)onqueue_findAssetBundleForAssetQuery:(id)arg1 ucat:(struct LogCategory { int x1; int x2; char *x3; unsigned int x4; char *x5; char *x6; int x7; struct LogCategory {} *x8; struct LogOutput {} *x9; struct LogOutput {} *x10; unsigned long long x11; unsigned long long x12; unsigned int x13; unsigned int x14; char *x15; struct LogCategoryPrivate {} *x16; }*)arg2 queryType:(id)arg3 fallback:(bool)arg4 retryAttempt:(bool)arg5 withCompletionHandler:(id /* block */)arg6;
- (void)onqueue_getAssetBundleForDeviceQuery:(id)arg1 withRequestConfiguration:(id)arg2;
- (void)onqueue_getCachedAssetBundleForTask:(id)arg1;
- (void)onqueue_invalidate;
- (void)onqueue_manuallyFindFallbackAssetBundleMatchingQuery:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (id)onqueue_mappedProductTypeForProductType:(id)arg1;
- (void)onqueue_purgeAssetsMatchingQuery:(id)arg1;
- (id)onqueue_sharingManagementAsset;
- (void)onqueue_updateMetaDataWithCompletionHandler:(id /* block */)arg1;
- (void)onqueue_updateSharingManagementAssetIfNecessary;
- (void)onqueue_validateMPNInQuery:(id)arg1;
- (void)onqueue_validateProductTypeInQuery:(id)arg1;
- (bool)pathInLocalCache:(id)arg1;
- (void)purgeAssetsMatchingQuery:(id)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setUseProcessLocalCache:(bool)arg1;
- (void)storeEntries:(id)arg1 inLocalCacheWithFileName:(id)arg2;
- (void)storeMPNsInLocalCache:(id)arg1 forProductType:(id)arg2;
- (void)storeProductMappingsInLocalCache:(id)arg1;
- (bool)useProcessLocalCache;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
