<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SFDeviceOperationHomeKitSetup.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Sharing.framework/SFDeviceOperationHomeKitSetup.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Sharing.framework/Sharing (1288.66)
 */

@interface SFDeviceOperationHomeKitSetup : NSObject <HMAccessoryBrowserDelegate, HMHomeManagerDelegate, HMHomeManagerDelegatePrivate> {
    bool  _active;
    NSDictionary * _appDataSelf;
    id /* block */  _completionHandler;
    bool  _configuredStereoPair;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    bool  _hasHomePod;
    bool  _homeAppInstallUserDidChoose;
    HMAccessory * _homeKitAccessory;
    bool  _homeKitAddedAccessory;
    bool  _homeKitAddedAppData;
    HMAccessoryBrowser * _homeKitBrowser;
    HMDeviceSetupOperation * _homeKitDeviceSetupOperation;
    HMHomeManager * _homeKitHomeManager;
    bool  _homeKitHomeManagerReady;
    HMHome * _homeKitSelectedHome;
    HMRoom * _homeKitSelectedRoom;
    NSString * _homeKitSelectedRoomName;
    ACAccount * _iTunesAccount;
    NSString * _iTunesAccountID;
    bool  _keyExchangeOnly;
    double  _metricNonUserSeconds;
    double  _metricUserSeconds;
    bool  _pauseAfterUserInput;
    id /* block */  _pauseHandler;
    bool  _paused;
    bool  _personalRequestsDone;
    bool  _personalRequestsEnabled;
    id /* block */  _promptForHomeHandler;
    id /* block */  _promptForRoomHandler;
    id /* block */  _promptToInstallHomeAppHandler;
    bool  _reselectHome;
    unsigned long long  _startTicks;
    int  _state;
    HMAccessory * _stereoCounterpart;
    int  _stereoRole;
    NSObject<OS_dispatch_source> * _timeoutTimer;
    TROperationQueue * _trOperationQueue;
    TRSession * _trSession;
}

@property (nonatomic, copy) NSDictionary *appDataSelf;
@property (nonatomic, copy) id /* block */ completionHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic, readonly) bool hasHomePod;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) HMHome *homeKitSelectedHome;
@property (nonatomic, readonly, copy) NSString *homeKitSelectedRoomName;
@property (nonatomic, retain) ACAccount *iTunesAccount;
@property (nonatomic, copy) NSString *iTunesAccountID;
@property (nonatomic) bool keyExchangeOnly;
@property (nonatomic, readonly) double metricNonUserSeconds;
@property (nonatomic, readonly) double metricUserSeconds;
@property (nonatomic) bool pauseAfterUserInput;
@property (nonatomic, copy) id /* block */ pauseHandler;
@property (nonatomic) bool personalRequestsEnabled;
@property (nonatomic, copy) id /* block */ promptForHomeHandler;
@property (nonatomic, copy) id /* block */ promptForRoomHandler;
@property (nonatomic, copy) id /* block */ promptToInstallHomeAppHandler;
@property (nonatomic, retain) HMAccessory *stereoCounterpart;
@property (nonatomic) int stereoRole;
@property (readonly) Class superclass;
@property (nonatomic, retain) TRSession *trSession;

- (void).cxx_destruct;
- (void)_cleanup;
- (void)_completeWithError:(id)arg1;
- (bool)_isOwnerOfHome:(id)arg1;
- (id)_mediaSystemForAccessory:(id)arg1;
- (id)_normalizedString:(id)arg1;
- (void)_removeSimilarRoomNames:(id)arg1 home:(id)arg2;
- (void)_restoreHomeApp;
- (void)_run;
- (void)_runHomeKitAddAccessory;
- (void)_runHomeKitAddAppData;
- (void)_runHomeKitAddHome;
- (void)_runHomeKitAssignRoom;
- (id)_runHomeKitAutoSelectHome:(bool)arg1;
- (bool)_runHomeKitConfigureStereoPairAndReturnError:(id*)arg1;
- (void)_runHomeKitDeviceSetup;
- (void)_runHomeKitSelectRoom;
- (void)_runHomeKitSetupRoom;
- (void)_runInit;
- (void)_runPersonalRequestsStart;
- (void)_startTimeout:(double)arg1;
- (void)_updateAccount;
- (void)_updateHomeHasHomePod;
- (void)accessoryBrowser:(id)arg1 didFindNewAccessory:(id)arg2;
- (void)accessoryBrowser:(id)arg1 didRemoveNewAccessory:(id)arg2;
- (void)activate;
- (id)appDataSelf;
- (id /* block */)completionHandler;
- (id)dispatchQueue;
- (id)findStereoCounterparts;
- (bool)hasHomePod;
- (void)homeAppInstallChoice:(bool)arg1;
- (id)homeKitSelectedHome;
- (id)homeKitSelectedRoomName;
- (void)homeManager:(id)arg1 didUpdateStatus:(unsigned long long)arg2;
- (void)homeManagerDidUpdateDataSyncState:(id)arg1;
- (void)homeManagerDidUpdateHomes:(id)arg1;
- (id)iTunesAccount;
- (id)iTunesAccountID;
- (id)init;
- (void)invalidate;
- (bool)keyExchangeOnly;
- (double)metricNonUserSeconds;
- (double)metricUserSeconds;
- (bool)pauseAfterUserInput;
- (id /* block */)pauseHandler;
- (bool)personalRequestsEnabled;
- (id /* block */)promptForHomeHandler;
- (id /* block */)promptForRoomHandler;
- (id /* block */)promptToInstallHomeAppHandler;
- (void)reselectHome;
- (void)resume;
- (void)selectHome:(id)arg1;
- (void)selectRoom:(id)arg1;
- (void)setAppDataSelf:(id)arg1;
- (void)setCompletionHandler:(id /* block */)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setITunesAccount:(id)arg1;
- (void)setITunesAccountID:(id)arg1;
- (void)setKeyExchangeOnly:(bool)arg1;
- (void)setPauseAfterUserInput:(bool)arg1;
- (void)setPauseHandler:(id /* block */)arg1;
- (void)setPersonalRequestsEnabled:(bool)arg1;
- (void)setPromptForHomeHandler:(id /* block */)arg1;
- (void)setPromptForRoomHandler:(id /* block */)arg1;
- (void)setPromptToInstallHomeAppHandler:(id /* block */)arg1;
- (void)setStereoCounterpart:(id)arg1;
- (void)setStereoRole:(int)arg1;
- (void)setTrSession:(id)arg1;
- (id)stereoCounterpart;
- (int)stereoRole;
- (id)trSession;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
