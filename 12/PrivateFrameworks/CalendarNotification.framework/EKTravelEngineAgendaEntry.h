<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKTravelEngineAgendaEntry.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CalendarNotification.framework/EKTravelEngineAgendaEntry.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CalendarNotification.framework/CalendarNotification (1)
 */

@interface EKTravelEngineAgendaEntry : NSObject {
    NSString * _agendaEntryIdentifier;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    bool  _dismissed;
    id /* block */  _entrySignificantlyChangedBlock;
    CLLocation * _geoLocation;
    bool  _geocodedEventEncountered;
    CalGeocoder * _geocoder;
    GEORouteHypothesizer * _hypothesizer;
    bool  _hypothesizerSentAtLeastOneHypothesis;
    EKTravelEngineHypothesis * _latestHypothesis;
    NSData * _mapKitHandle;
    double  _maximumTravelDurationEncountered;
    EKTravelEngineOriginalEvent * _originalEventInternal;
    EKTravelEngineThrottle * _throttle;
    long long  _travelTimeThresholdExceededState;
    id /* block */  _updateBlock;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (nonatomic, retain) NSString *agendaEntryIdentifier;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic) bool dismissed;
@property (nonatomic, copy) id /* block */ entrySignificantlyChangedBlock;
@property (nonatomic, retain) CLLocation *geoLocation;
@property (nonatomic) bool geocodedEventEncountered;
@property (nonatomic, retain) CalGeocoder *geocoder;
@property (nonatomic, retain) GEORouteHypothesizer *hypothesizer;
@property (nonatomic) bool hypothesizerSentAtLeastOneHypothesis;
@property (nonatomic, retain) EKTravelEngineHypothesis *latestHypothesis;
@property (nonatomic, retain) NSData *mapKitHandle;
@property (nonatomic) double maximumTravelDurationEncountered;
@property (nonatomic, readonly) EKTravelEngineOriginalEvent *originalEvent;
@property (nonatomic, retain) EKTravelEngineOriginalEvent *originalEventInternal;
@property (nonatomic, retain) EKTravelEngineThrottle *throttle;
@property (nonatomic) long long travelTimeThresholdExceededState;
@property (nonatomic, copy) id /* block */ updateBlock;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *workQueue;

+ (void)_accountForGeocodingFailureWithError:(id)arg1;
+ (void)_accountForHypothesizerNeverHavingSentHypothesis;
+ (void)_accountForHypothesizerSendingHypothesis;
+ (void)_accountForLocationEnhancementSuccess;
+ (void)_accountForNoLocationEnhancementNeeded;
+ (double)fuzzyMaximumInitialUpdateIntervalBeforeStartDate;

- (void).cxx_destruct;
- (void)_accountForGeocodedEventEncounter;
- (void)_accountForMaximumTravelDuration;
- (void)_accountForTravelDurationThresholdExceededState;
- (void)_clearEverything;
- (void)_createEmissionHypothesisRefreshTimerWithDate:(id)arg1;
- (void)_createHypothesisRequestRefreshTimerWithDate:(id)arg1;
- (void)_createHypothesizerForDestination:(id)arg1;
- (id)_createSyntheticHypothesis;
- (void)_emissionHypothesisRefreshTimerFired;
- (void)_enhanceLocation;
- (id)_generateDestination;
- (void)_hypothesisRefreshTimerFired;
- (void)_performAnalyticsPostProcessing;
- (void)_requestHypothesisRefreshTimerFired:(id)arg1;
- (void)_sendFeedbackToHypothesizerForPostingNotification:(unsigned long long)arg1;
- (void)_setUpRouteMonitoring;
- (void)_trackTTLCandidateEvent:(id)arg1;
- (void)_uninstallEmissionHypothesisRefreshTimer;
- (void)_uninstallRequestHypothesisRefreshTimer;
- (void)_updateTravelTimeExceededThresholdStateUsingExceededValue:(bool)arg1;
- (void)_updateWithHypothesis:(id)arg1;
- (id)agendaEntryIdentifier;
- (id)callbackQueue;
- (void)cancelEmissionHypothesisRefresh;
- (void)cancelHypothesisRefreshRequest;
- (void)createBTAJobWithName:(id)arg1 atDate:(id)arg2;
- (void)dealloc;
- (bool)dismissed;
- (id)emissionHypothesisRefreshBTAJobName;
- (id /* block */)entrySignificantlyChangedBlock;
- (id)geoLocation;
- (bool)geocodedEventEncountered;
- (id)geocoder;
- (void)handleBTAJob:(id)arg1 named:(const char *)arg2;
- (id)hypothesizer;
- (bool)hypothesizerSentAtLeastOneHypothesis;
- (id)init;
- (id)latestHypothesis;
- (id)mapKitHandle;
- (double)maximumTravelDurationEncountered;
- (id)originalEvent;
- (id)originalEventInternal;
- (void)removeBTAJobWithName:(id)arg1;
- (void)requestHypothesisRefreshAtDate:(id)arg1;
- (id)requestHypothesisRefreshBTAJobName;
- (void)reset;
- (void)sendFeedbackForPostingLeaveByNotification;
- (void)sendFeedbackForPostingLeaveNowNotification;
- (void)setAgendaEntryIdentifier:(id)arg1;
- (void)setCallbackQueue:(id)arg1;
- (void)setDismissed:(bool)arg1;
- (void)setEntrySignificantlyChangedBlock:(id /* block */)arg1;
- (void)setGeoLocation:(id)arg1;
- (void)setGeocodedEventEncountered:(bool)arg1;
- (void)setGeocoder:(id)arg1;
- (void)setHypothesizer:(id)arg1;
- (void)setHypothesizerSentAtLeastOneHypothesis:(bool)arg1;
- (void)setLatestHypothesis:(id)arg1;
- (void)setMapKitHandle:(id)arg1;
- (void)setMaximumTravelDurationEncountered:(double)arg1;
- (void)setOriginalEventInternal:(id)arg1;
- (void)setThrottle:(id)arg1;
- (void)setTravelTimeThresholdExceededState:(long long)arg1;
- (void)setUpdateBlock:(id /* block */)arg1;
- (void)setWorkQueue:(id)arg1;
- (id)throttle;
- (long long)travelTimeThresholdExceededState;
- (id /* block */)updateBlock;
- (void)updateWithOriginalEvent:(id)arg1;
- (id)workQueue;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
