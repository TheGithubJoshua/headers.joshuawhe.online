<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CALNRemoteEventProvider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CalendarNotification.framework/CALNRemoteEventProvider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CalendarNotification.framework/CalendarNotification (1)
 */

@interface CALNRemoteEventProvider : CALNRemoteDataProvider {
    NSMutableDictionary * _alertRecordIDsToAlertInfos;
    NSMutableDictionary * _alertRecordIDsToRefreshTimes;
    id /* block */  _cancelHypothesisRefreshRequest;
    id /* block */  _ceaseTravelMonitoringEvent;
    id /* block */  _countOfSuggestedNotificationsToIgnoreBlock;
    id /* block */  _reloadNotificationsBlock;
    id /* block */  _requestHypothesisRefresh;
    id /* block */  _sendTravelAdviceFeedback;
    NSArray * _suggestionAddedMessages;
}

@property (nonatomic, readonly) id /* block */ adviceReceivedBlock;
@property (nonatomic, readonly) id /* block */ authorizationChangedBlock;
@property (nonatomic, copy) id /* block */ cancelHypothesisRefreshRequest;
@property (nonatomic, copy) id /* block */ ceaseTravelMonitoringEvent;
@property (nonatomic, copy) id /* block */ countOfSuggestedNotificationsToIgnoreBlock;
@property (nonatomic, readonly) id /* block */ eventSignficantlyChangedBlock;
@property (nonatomic, copy) id /* block */ reloadNotificationsBlock;
@property (nonatomic, copy) id /* block */ requestHypothesisRefresh;
@property (nonatomic, copy) id /* block */ sendTravelAdviceFeedback;

+ (bool)_alertHasTravelInformation:(id)arg1;
+ (bool)_date:(id)arg1 isWithinEightMinutesOfDate:(id)arg2;
+ (id)_directionsModeForAlertInfo:(id)arg1;
+ (id)_launchOptionsDirectionsModeForLocationRoutingMode:(long long)arg1;
+ (id)_launchOptionsDirectionsModeForTransportType:(int)arg1;
+ (bool)_mayCeaseRouteMonitoringForAlertInfo:(id)arg1;
+ (bool)_shouldRequestReportAProblemAction;
+ (long long)_spanForNewStatusWithEvent:(id)arg1;
+ (bool)_timeToLeaveStateAlreadyDisplayedBasedOnHypothesis:(id)arg1 alertInfo:(id)arg2 date:(id)arg3;
+ (id)logHandle;
+ (double)requestHypothesisRefreshInterval;
+ (id)timeToLeaveStringForAlertInfo:(id)arg1;
+ (id)userActivityUserInfoForEvent:(id)arg1;

- (void).cxx_destruct;
- (void)_acknowledgeSuggestedEventForRecordID:(id)arg1 accept:(bool)arg2;
- (void)_clearHypothesisAndUpdateBulletinForAlertInfo:(id)arg1;
- (void)_clearTravelAdvisoryHypotheses;
- (id)_conferenceCallActionWithAlertInfo:(id)arg1;
- (void)_deleteCalendarItemForRecordID:(id)arg1 span:(long long)arg2;
- (id)_expirationDateForEventInvitation:(id)arg1;
- (id)_expirationDateForResourceChange:(id)arg1;
- (id)_getContactIdentifierForIdentity:(id)arg1;
- (id)_getContactIdentifierForIdentity:(id)arg1 withStore:(id)arg2;
- (id)_getContactIdentifiersForAttendees:(id)arg1 includeBlock:(id /* block */)arg2;
- (id)_getContactPredicateForIdentity:(id)arg1;
- (id)_getDisplayNameForJunkIdentity:(id)arg1;
- (id)_iconForDate:(id)arg1 calendar:(id)arg2;
- (id)_iconImageDataForDate:(id)arg1 calendar:(id)arg2 format:(int)arg3;
- (void)_logDisplayedSuggestionNotification:(id)arg1;
- (void)_logSuggestionNotificationResponse:(id)arg1;
- (void)_receivedHypothesis:(id)arg1 forEventWithExternalURL:(id)arg2;
- (void)_recordDisplayOfInitialTimeToLeaveAlert;
- (void)_recordDisplayOfInitialTimeToLeaveAlertWithDate:(id)arg1 event:(id)arg2 hypothesis:(id)arg3 wasFoundInApps:(bool)arg4;
- (void)_recordUpcomingEventAlertSuppression;
- (void)_refreshTimerFired:(id)arg1;
- (void)_removeRefreshTimerForEventWithExternalURL:(id)arg1;
- (id)_reportAProblemActionForAlertInfo:(id)arg1;
- (void)_reportJunkCalendarItemForRecordID:(id)arg1;
- (id)_resourceChangeURIFromBulletin:(id)arg1;
- (void)_setEventRepresentationForAlertBulletin:(id)arg1 timeToLeaveString:(id)arg2 eventIfExists:(id)arg3;
- (void)_setEventRepresentationForNotification:(id)arg1 bulletin:(id)arg2;
- (void)_setParticipantStatus:(long long)arg1 recordID:(id)arg2;
- (void)_setPropertiesOnBulletinRequest:(id)arg1 fromResourceChange:(id)arg2 contactIdentifier:(id*)arg3;
- (void)_setUpRefreshTimerAt:(id)arg1 forEventWithExternalURL:(id)arg2;
- (void)_significantTimeChanged;
- (id)_snoozeActionWithAlertInfo:(id)arg1;
- (id)_snoozeOrReportAProblemActionForAlertInfo:(id)arg1;
- (void)_trackDirectionsEngagedForTTLAlertForAlertInfo:(id)arg1;
- (unsigned long long)_ttlEventTrackerAlertTypeForDate:(id)arg1 hypothesis:(id)arg2;
- (unsigned long long)_ttlEventTrackerETATypeForHypothesis:(id)arg1;
- (unsigned long long)_ttlEventTrackerTransportTypeForGEOTransportType:(int)arg1;
- (unsigned long long)_ttlEventTrackerTravelStateForHypothesisTravelState:(long long)arg1;
- (void)_updateNotificationTypeForAlertInfo:(id)arg1 withDate:(id)arg2;
- (void)_updateRefreshTimerForEventWithExternalURL:(id)arg1;
- (void)acknowledgeLocationAlertWithURL:(id)arg1 entityID:(id)arg2;
- (id /* block */)adviceReceivedBlock;
- (bool)allowsLocationAlerts;
- (id /* block */)authorizationChangedBlock;
- (id)btaJobNameForEvent:(id)arg1;
- (void)bulletinAcknowledgedWithResponse:(id)arg1 acknowledgeAlarm:(bool)arg2 extraActions:(id /* block */)arg3;
- (id)bulletinRequestForAlertInfo:(id)arg1;
- (id)bulletinRequestWithCalendarNotification:(id)arg1;
- (id)bulletinRequestWithSuggestionNotifications:(id)arg1;
- (id)bulletinsWithRequestParameters:(id)arg1 lastCleared:(id)arg2;
- (id /* block */)cancelHypothesisRefreshRequest;
- (id /* block */)ceaseTravelMonitoringEvent;
- (id)clearedInfoForBulletins:(id)arg1 lastClearedInfo:(id)arg2;
- (id /* block */)countOfSuggestedNotificationsToIgnoreBlock;
- (void)dataProviderDidLoad;
- (id)dateTimeStringForEventDate:(id)arg1 alwaysIncludeDate:(bool)arg2 allDayEvent:(bool)arg3;
- (id)defaultSectionInfo;
- (id)defaultSubsectionInfos;
- (id)defaultURLForAlertInfo:(id)arg1;
- (id)directionsActionForAlertInfo:(id)arg1;
- (id)displayNameForSubsectionID:(id)arg1;
- (id)entityScheme;
- (id /* block */)eventSignficantlyChangedBlock;
- (void)fetchDataFromContext;
- (id)geoDestinationForAlertInfo:(id)arg1;
- (void)handleBTAJob:(id)arg1 named:(const char *)arg2;
- (void)handleBulletinActionResponse:(id)arg1;
- (void)handleDarwinNotification:(id)arg1;
- (id)initWithNotificationFetchBlock:(id /* block */)arg1;
- (id)locationStringForAlertInfo:(id)arg1;
- (id)messageStringForAlertInfo:(id)arg1;
- (bool)migrateSectionInfo:(id)arg1 oldSectionInfo:(id)arg2;
- (void)notificationCountChanged:(id)arg1;
- (void)notifyHypothesizerNotificationForAlertInfo:(id)arg1 dismissed:(unsigned long long)arg2;
- (void)performCalendarItemForRecordID:(id)arg1 action:(id /* block */)arg2;
- (void)protectedAcknowledgeAlarm:(bool)arg1 forBulletinWithEntityID:(id)arg2 externalID:(id)arg3 extraActions:(id /* block */)arg4;
- (id)protectedItemForBulletinRecordID:(id)arg1;
- (void)protectedRemoveBulletinForID:(id)arg1;
- (void)protectedSaveBulletin:(id)arg1 forAlertInfo:(id)arg2 usingID:(id)arg3;
- (id /* block */)reloadNotificationsBlock;
- (id /* block */)requestHypothesisRefresh;
- (void)respond:(bool)arg1 toCalendarInvite:(id)arg2 isJunk:(bool)arg3;
- (id)sectionDisplayName;
- (id)sectionIcon;
- (id)sectionIdentifier;
- (id)sectionParameters;
- (id /* block */)sendTravelAdviceFeedback;
- (void)setCancelHypothesisRefreshRequest:(id /* block */)arg1;
- (void)setCeaseTravelMonitoringEvent:(id /* block */)arg1;
- (void)setCountOfSuggestedNotificationsToIgnoreBlock:(id /* block */)arg1;
- (void)setReloadNotificationsBlock:(id /* block */)arg1;
- (void)setRequestHypothesisRefresh:(id /* block */)arg1;
- (void)setSendTravelAdviceFeedback:(id /* block */)arg1;
- (bool)shouldModfyBulletinForAlert:(id)arg1;
- (bool)shouldWithdrawBeforePostingBulletinForAlert:(id)arg1;
- (bool)shouldWithdrawBulletin:(id)arg1 forItem:(id)arg2;
- (id)sortDescriptors;
- (id)supplementaryActionsForAlertInfo:(id)arg1 bulletin:(id)arg2 compactLayout:(bool)arg3;
- (id)titleStringForAlertInfo:(id)arg1;
- (void)unalertedNotificationsReceived:(id)arg1 withNotificationReferences:(id)arg2;
- (id)universalSectionIdentifier;
- (id)viewActionForAlertInfo:(id)arg1;
- (void)willPostBulletinForAlertInfo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
