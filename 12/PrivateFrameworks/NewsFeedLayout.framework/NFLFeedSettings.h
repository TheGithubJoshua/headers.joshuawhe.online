<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NFLFeedSettings.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NewsFeedLayout.framework/NFLFeedSettings.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NewsFeedLayout.framework/NewsFeedLayout (2166)
 */

@interface NFLFeedSettings : NSObject <NSCopying> {
    double  _adjustedFeedWidth;
    bool  _allowsExcerptsInAllCells;
    double  _articleContentInset;
    double  _articleSelectionCornerRadius;
    double  _articleSelectionInset;
    bool  _authenticationSetup;
    NFLCellGeneratorManager * _cellGeneratorManager;
    long long  _columnCount;
    double  _columnWidth;
    <NFLFeedLayoutSearchConfiguration> * _defaultFeedLayoutSearchConfiguration;
    FCHeadlineTemplate * _defaultHeadlineTemplate;
    double  _feedGutter;
    <FCFeedTheming> * _feedTheme;
    double  _feedTopMargin;
    double  _feedWidth;
    NFLFontCache * _fontCache;
    double  _horizontalMarginWidth;
    unsigned long long  _layoutOptions;
    NSString * _preferredContentSizeCategory;
    double  _rowHeight;
    double  _scaleValue;
    bool  _showingPrefetchedPurchase;
    UITraitCollection * _traitCollection;
    double  _verticalMarginInRows;
    struct CGSize { 
        double width; 
        double height; 
    }  _viewportSize;
}

@property (nonatomic, readonly) double adjustedFeedWidth;
@property (nonatomic) bool allowsExcerptsInAllCells;
@property (nonatomic, readonly) double articleContentInset;
@property (nonatomic, readonly) double articleSelectionCornerRadius;
@property (nonatomic, readonly) double articleSelectionInset;
@property (nonatomic, readonly) bool authenticationSetup;
@property (nonatomic, readonly) NFLCellGeneratorManager *cellGeneratorManager;
@property (nonatomic, readonly) long long columnCount;
@property (nonatomic, readonly) double columnWidth;
@property (nonatomic, copy) <NFLFeedLayoutSearchConfiguration> *defaultFeedLayoutSearchConfiguration;
@property (nonatomic, retain) FCHeadlineTemplate *defaultHeadlineTemplate;
@property (nonatomic, readonly, copy) UIColor *feedBackgroundColor;
@property (nonatomic, readonly) double feedGutter;
@property (nonatomic, retain) <FCFeedTheming> *feedTheme;
@property (nonatomic, readonly) double feedTopMargin;
@property (nonatomic, readonly) double feedWidth;
@property (nonatomic, readonly) NFLFontCache *fontCache;
@property (nonatomic, readonly) double horizontalMarginWidth;
@property (nonatomic, readonly) unsigned long long layoutOptions;
@property (nonatomic, copy) NSString *preferredContentSizeCategory;
@property (nonatomic, readonly) double rowHeight;
@property (nonatomic, readonly) double scaleValue;
@property (nonatomic, readonly) bool showingPrefetchedPurchase;
@property (nonatomic, retain) UITraitCollection *traitCollection;
@property (nonatomic, readonly) double verticalMarginInRows;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } viewportSize;

+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })adjustedLayoutMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 viewportWidth:(double)arg2;

- (void).cxx_destruct;
- (double)adjustedFeedWidth;
- (bool)allowsExcerptsInAllCells;
- (double)articleContentInset;
- (double)articleSelectionCornerRadius;
- (double)articleSelectionInset;
- (bool)authenticationSetup;
- (id)cellGeneratorManager;
- (double)cellHeightForRowSpan:(long long)arg1;
- (double)cellWidthForColumnSpan:(long long)arg1;
- (long long)columnCount;
- (double)columnWidth;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)defaultFeedLayoutSearchConfiguration;
- (id)defaultHeadlineTemplate;
- (id)description;
- (id)feedBackgroundColor;
- (double)feedGutter;
- (id)feedTheme;
- (double)feedTopMargin;
- (double)feedWidth;
- (id)fontCache;
- (double)horizontalMarginWidth;
- (id)init;
- (id)initWithViewportSize:(struct CGSize { double x1; double x2; })arg1 defaultFeedLayoutSearchConfiguration:(id)arg2 columnCount:(long long)arg3 feedGutter:(double)arg4 feedTopMargin:(double)arg5 verticalMarginInRows:(double)arg6 preferredContentSizeCategory:(id)arg7 maximumContentInset:(double)arg8 selectionCornerRadius:(double)arg9 selectionInset:(double)arg10 showAccessoryText:(bool)arg11 layoutOptions:(unsigned long long)arg12;
- (id)initWithViewportSize:(struct CGSize { double x1; double x2; })arg1 viewportInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 preferredContentSizeCategory:(id)arg3 showAccessoryText:(bool)arg4;
- (id)initWithViewportSize:(struct CGSize { double x1; double x2; })arg1 viewportInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 preferredContentSizeCategory:(id)arg3 showAccessoryText:(bool)arg4 layoutType:(long long)arg5 layoutOptions:(unsigned long long)arg6;
- (unsigned long long)layoutOptions;
- (id)preferredContentSizeCategory;
- (bool)preservesLayoutMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (bool)preservesTraitCollection:(id)arg1;
- (double)rowHeight;
- (double)scaleValue;
- (void)setAllowsExcerptsInAllCells:(bool)arg1;
- (void)setDefaultFeedLayoutSearchConfiguration:(id)arg1;
- (void)setDefaultHeadlineTemplate:(id)arg1;
- (void)setFeedTheme:(id)arg1;
- (void)setPreferredContentSizeCategory:(id)arg1;
- (void)setTraitCollection:(id)arg1;
- (bool)showingPrefetchedPurchase;
- (id)traitCollection;
- (double)verticalMarginInRows;
- (struct CGSize { double x1; double x2; })viewportSize;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
