<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IKAppDocument.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ITMLKit.framework/IKAppDocument.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit (1)
 */

@interface IKAppDocument : NSObject <IKJSDOMDocumentAppBridgeInternal, IKStyleMediaQueryEvaluator> {
    IKAppContext * _appContext;
    NSDictionary * _cachedSnapshotImpressionsMap;
    <IKAppDocumentDelegate> * _delegate;
    NSError * _error;
    IKHeadElement * _headElement;
    NSString * _identifier;
    bool  _implicitlyUpdated;
    double  _impressionThreshold;
    double  _impressionViewablePercentage;
    NSMutableDictionary * _impressions;
    bool  _isTrackingImplicitUpdates;
    bool  _isViewElementRegistryDirty;
    IKDOMDocument * _jsDocument;
    NSMutableDictionary * _mediaQueryCache;
    IKViewElement * _navigationBarElement;
    IKJSObject * _owner;
    bool  _parsingDOM;
    IKViewElementStyleFactory * _styleFactory;
    bool  _subtreeUpdated;
    IKViewElement * _templateElement;
    IKViewElement * _toolbarElement;
    bool  _updated;
    NSMapTable * _viewElementRegistry;
}

@property (readonly) IKAppContext *appContext;
@property (nonatomic, retain) NSDictionary *cachedSnapshotImpressionsMap;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <IKAppDocumentDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSError *error;
@property (readonly) unsigned long long hash;
@property (retain) IKHeadElement *headElement;
@property (retain) NSString *identifier;
@property (getter=isImplicitlyUpdated, nonatomic, readonly) bool implicitlyUpdated;
@property (nonatomic) double impressionThreshold;
@property (nonatomic) double impressionViewablePercentage;
@property (nonatomic, retain) NSMutableDictionary *impressions;
@property (nonatomic, readonly) IKDOMDocument *jsDocument;
@property (retain) IKViewElement *navigationBarElement;
@property (nonatomic, readonly) IKJSNavigationDocument *navigationDocument;
@property (nonatomic, readonly) IKJSObject *owner;
@property (nonatomic, readonly) <IKNetworkRequestLoader> *requestLoader;
@property (nonatomic, retain) IKViewElementStyleFactory *styleFactory;
@property (getter=isSubtreeUpdated) bool subtreeUpdated;
@property (readonly) Class superclass;
@property (retain) IKViewElement *templateElement;
@property (retain) IKViewElement *toolbarElement;
@property (getter=isUpdated, nonatomic) bool updated;

// Image: /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit

- (void).cxx_destruct;
- (bool)_isUpdateAllowed;
- (void)_setViewElementStylesDirtyForced:(bool)arg1;
- (void)_updateWithXML:(id)arg1;
- (id)_viewElementForNodeID:(unsigned long long)arg1;
- (id)appContext;
- (id)cachedSnapshotImpressionsMap;
- (void)dealloc;
- (id)debugDescription;
- (id)delegate;
- (id)error;
- (bool)evaluateStyleMediaQueryList:(id)arg1;
- (id)headElement;
- (id)identifier;
- (double)impressionThreshold;
- (double)impressionViewablePercentage;
- (id)impressions;
- (id)impressionsMatching:(id)arg1 reset:(bool)arg2;
- (id)initWithAppContext:(id)arg1 document:(id)arg2 owner:(id)arg3;
- (id)initWithAppContext:(id)arg1 document:(id)arg2 owner:(id)arg3 extraInfo:(id)arg4;
- (bool)isImplicitlyUpdated;
- (bool)isSubtreeUpdated;
- (bool)isUpdated;
- (id)jsDocument;
- (bool)markImplicitlyUpdated;
- (id)navigationBarElement;
- (id)navigationDocument;
- (void)onActive;
- (void)onAppear;
- (void)onDisappear;
- (void)onImpressionsChange:(id)arg1;
- (void)onInactive;
- (void)onLoad;
- (void)onNeedsUpdateWithCompletion:(id /* block */)arg1;
- (void)onPerformanceMetricsChange:(id)arg1;
- (void)onUnload;
- (void)onUpdate;
- (void)onViewAttributesChangeWithArguments:(id)arg1 completion:(id /* block */)arg2;
- (id)owner;
- (void)performImplicitUpdates:(id /* block */)arg1;
- (void)recordImpressionsForViewElements:(id)arg1;
- (id)recordedImpressions;
- (id)recordedImpressions:(bool)arg1;
- (id)requestLoader;
- (id)retrieveJSElementForViewElement:(id)arg1 jsContext:(id)arg2;
- (void)runTestWithName:(id)arg1 options:(id)arg2;
- (void)scrollToTop;
- (void)setCachedSnapshotImpressionsMap:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setError:(id)arg1;
- (void)setHeadElement:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setImpressionThreshold:(double)arg1;
- (void)setImpressionViewablePercentage:(double)arg1;
- (void)setImpressions:(id)arg1;
- (void)setNavigationBarElement:(id)arg1;
- (void)setNeedsUpdateForDocument:(id)arg1;
- (void)setStyleFactory:(id)arg1;
- (void)setSubtreeUpdated:(bool)arg1;
- (void)setTemplateElement:(id)arg1;
- (void)setToolbarElement:(id)arg1;
- (void)setUpdated:(bool)arg1;
- (void)setViewElementStylesDirty;
- (id)snapshotImpressions;
- (void)snapshotImpressionsForViewElements:(id)arg1;
- (id)styleFactory;
- (id)templateElement;
- (id)toolbarElement;
- (void)updateForDocument:(id)arg1;
- (id)viewElementForNodeID:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/TVMLKit.framework/TVMLKit

- (struct CGSize { double x1; double x2; })tv_adjustedWindowSize;
- (id)tv_featuresManager;
- (bool)tv_handleEvent:(id)arg1 targetResponder:(id)arg2 viewElement:(id)arg3 extraInfo:(id*)arg4;
- (id)tv_interactionPreviewControllerForViewController:(id)arg1 presentingView:(id)arg2 presentingElement:(id)arg3;
- (bool)tv_isPresentedModal;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
