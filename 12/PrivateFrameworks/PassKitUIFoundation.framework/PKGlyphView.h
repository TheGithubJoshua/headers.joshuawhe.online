<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKGlyphView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PassKitUIFoundation.framework/PKGlyphView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PassKitUIFoundation.framework/PassKitUIFoundation ()
 */

@interface PKGlyphView : UIView <LAUIPearlGlyphViewDelegate, PKFingerprintGlyphViewDelegate> {
    LAUICheckmarkLayer * _checkLayer;
    long long  _colorMode;
    struct CGImage { } * _customImage;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _customImageAlignmentEdgeInsets;
    CALayer * _customImageLayer;
    <PKGlyphViewDelegate> * _delegate;
    PKFingerprintGlyphView * _fingerprintView;
    bool  _isPad;
    NSObject<OS_dispatch_group> * _lastAnimationGroup;
    double  _lastAnimationWillFinish;
    struct { 
        unsigned int showingPhone : 1; 
        unsigned int phoneRotated : 1; 
        unsigned int showingUserIntentPhone : 1; 
        unsigned int showingUserIntentArrow : 1; 
    }  _layoutFlags;
    LAUIPearlGlyphView * _pearlView;
    double  _phoneAspectRatio;
    PKPhoneGlyphLayer * _phoneLayer;
    NSString * _phoneWiggleAnimationKey;
    bool  _phoneWiggling;
    UIColor * _primaryColor;
    long long  _priorState;
    struct UIColor { Class x1; } * _secondaryColor;
    long long  _state;
    long long  _style;
    NSMutableArray * _transitionCompletionHandlers;
    unsigned long long  _transitionIndex;
    bool  _transitioning;
    bool  _transitioningAnimated;
    PKMicaLayer * _userIntentArrowLayer;
    PKMicaLayer * _userIntentDeviceLayer;
    unsigned int  _userIntentEdge;
    CALayer * _userIntentLayer;
}

@property (nonatomic, readonly) long long colorMode;
@property (nonatomic, readonly) struct CGImage { }*customImage;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } customImageAlignmentEdgeInsets;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PKGlyphViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool fadeOnRecognized;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, copy) UIColor *primaryColor;
@property (nonatomic, readonly) long long state;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned int userIntentEdge;

+ (bool)automaticallyNotifiesObserversOfState;
+ (id)sharedStaticResources;

- (void).cxx_destruct;
- (void)_applyColorMode:(bool)arg1;
- (void)_endPhoneWiggle;
- (void)_executeAfterMinimumAnimationDurationForStateTransition:(id /* block */)arg1;
- (void)_executeAfterMinimumAnimationDurationForStateTransitionWithDelayRatio:(double)arg1 handler:(id /* block */)arg2;
- (void)_executeTransitionCompletionHandlers:(bool)arg1;
- (void)_finishTransitionForIndex:(unsigned long long)arg1;
- (void)_layoutContentLayer:(id)arg1;
- (void)_performTransitionWithTransitionIndex:(unsigned long long)arg1 animated:(bool)arg2;
- (struct CGPoint { double x1; double x2; })_phonePositionDeltaWhileShownFromRotationPercentage:(double)arg1 toPercentage:(double)arg2;
- (struct CGPoint { double x1; double x2; })_phonePositionWhileShownWithRotationPercentage:(double)arg1;
- (struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })_phoneTransformDeltaWhileShownFromRotationPercentage:(double)arg1 toPercentage:(double)arg2;
- (struct UIColor { Class x1; }*)_primaryColorForStyle:(long long)arg1 mode:(long long)arg2;
- (struct UIColor { Class x1; }*)_secondaryColorForStyle:(long long)arg1 mode:(long long)arg2;
- (void)_setPrimaryColor:(struct UIColor { Class x1; }*)arg1 animated:(bool)arg2;
- (void)_setRecognizedIfNecessaryWithTransitionIndex:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (void)_setSecondaryColor:(struct UIColor { Class x1; }*)arg1 animated:(bool)arg2;
- (void)_startPhoneWiggle;
- (void)_updateCheckViewStateAnimated:(bool)arg1 withCompletion:(id /* block */)arg2;
- (void)_updateCustomImageLayerOpacityAnimated:(bool)arg1;
- (void)_updateLastAnimationTimeWithAnimationOfDuration:(double)arg1;
- (void)_updatePhoneLayoutWithTransitionIndex:(unsigned long long)arg1 animated:(bool)arg2;
- (void)_updatePhoneWiggleIfNecessary;
- (void)_updateUserIntentLayerRotation;
- (void)_updateUserIntentLayoutAnimated:(bool)arg1;
- (long long)colorMode;
- (id)createCustomImageLayer;
- (struct CGImage { }*)customImage;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })customImageAlignmentEdgeInsets;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToWindow;
- (bool)fadeOnRecognized;
- (void)fingerprintGlyphView:(id)arg1 didLayoutContentLayer:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithStyle:(long long)arg1;
- (void)layoutSubviews;
- (void)pearlGlyphView:(id)arg1 didLayoutContentLayer:(id)arg2;
- (id)primaryColor;
- (void)setColorMode:(long long)arg1 animated:(bool)arg2;
- (void)setCustomImage:(struct CGImage { }*)arg1 withAlignmentEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (void)setDelegate:(id)arg1;
- (void)setFadeOnRecognized:(bool)arg1;
- (void)setState:(long long)arg1;
- (void)setState:(long long)arg1 animated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (long long)state;
- (void)tintColorDidChange;
- (void)updateRasterizationScale:(double)arg1;
- (void)updateRotation;
- (unsigned int)userIntentEdge;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
