<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NRDeviceCollectionHistory.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NanoRegistry.framework/NRDeviceCollectionHistory.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry (1)
 */

@interface NRDeviceCollectionHistory : NSObject <NRMutableStateParentDelegate, NSCopying, NSFastEnumeration, NSSecureCoding> {
    _Atomic bool  _atomicDirty;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _cacheLock;
    NRMutableDeviceCollection * _deviceCollection;
    NSMutableArray * _history;
    NSMutableDictionary * _historyStateCache;
    NSMutableArray * _historyStateCacheIndex;
    NSMutableArray * _historyStateCacheMRU;
    long long  _maxHistoryDepth;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _observerLock;
    NSMutableOrderedSet * _observers;
    unsigned long long  _startIndex;
    NRSwitchRecordCollection * _switchRecords;
}

@property (nonatomic, readonly) unsigned long long count;
@property (nonatomic, readonly) NRMutableDeviceCollection *deviceCollection;
@property (nonatomic, readonly) bool dirty;
@property (nonatomic, retain) NSMutableArray *history;
@property (nonatomic, retain) NSMutableDictionary *historyStateCache;
@property (nonatomic, retain) NSMutableArray *historyStateCacheIndex;
@property (nonatomic, retain) NSMutableArray *historyStateCacheMRU;
@property (nonatomic, readonly) unsigned long long nextIndex;
@property (nonatomic, readonly) NRPBDeviceCollectionHistory *protobuf;
@property (nonatomic) unsigned long long startIndex;
@property (nonatomic, readonly) unsigned int switchIndex;
@property (nonatomic, retain) NRSwitchRecordCollection *switchRecords;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_createIndex;
- (unsigned long long)_findIndexInHistoryStateCache:(id)arg1 type:(unsigned long long)arg2;
- (id)_mostRecentStateBefore:(id)arg1;
- (void)_truncateHistory;
- (void)_updateHistoryCachesWithIndex:(id)arg1;
- (id)addObserverQueue:(id)arg1 withBlock:(id /* block */)arg2;
- (id)applyDiff:(id)arg1;
- (void)child:(id)arg1 didApplyDiff:(id)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)count;
- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x1; id *x2; unsigned long long *x3; unsigned long long x4[5]; }*)arg1 objects:(id*)arg2 count:(unsigned long long)arg3;
- (id)description;
- (id)deviceCollection;
- (id)deviceIDAtSwitchIndex:(unsigned int)arg1 date:(id*)arg2;
- (bool)dirty;
- (void)encodeWithCoder:(id)arg1;
- (id)history;
- (id)historyEntryAtIndex:(unsigned long long)arg1;
- (id)historyStateCache;
- (id)historyStateCacheIndex;
- (id)historyStateCacheMRU;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithProtobuf:(id)arg1;
- (void)invalidate;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToHistory:(id)arg1;
- (unsigned long long)nextIndex;
- (void)notifyHistoryObserversWithEntry:(id)arg1;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)protobuf;
- (void)pruneStateCacheItems:(unsigned long long)arg1;
- (void)purgeWorkingSet;
- (void)removeObserver:(id)arg1;
- (void)setHistory:(id)arg1;
- (void)setHistoryStateCache:(id)arg1;
- (void)setHistoryStateCacheIndex:(id)arg1;
- (void)setHistoryStateCacheMRU:(id)arg1;
- (void)setStartIndex:(unsigned long long)arg1;
- (void)setSwitchRecords:(id)arg1;
- (unsigned long long)startIndex;
- (id)stateAtIndex:(unsigned long long)arg1;
- (id)switchDeviceIDFromDiff:(id)arg1;
- (unsigned int)switchIndex;
- (id)switchRecords;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
