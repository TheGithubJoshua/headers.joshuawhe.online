<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSCH3DShaderVariableLinkage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSCH3DShaderVariableLinkage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSCH3DShaderVariableLinkage : NSObject {
    struct TSCH3DShaderVariableScopes { 
        struct array<TSCH3DShaderVariableScopeType, 2> { 
            struct TSCH3DShaderVariableScopeType { 
                unsigned long long mValue; 
            } __elems_[2]; 
        } mScopes; 
    }  mDeclaredScope;
    NSMutableSet * mDependees;
    bool  mIsUsed;
    struct TSCH3DShaderType { 
        unsigned long long mValue; 
    }  mLinked;
    struct TSCH3DShaderVariableScopes { 
        struct array<TSCH3DShaderVariableScopeType, 2> { 
            struct TSCH3DShaderVariableScopeType { 
                unsigned long long mValue; 
            } __elems_[2]; 
        } mScopes; 
    }  mScope;
    TSCH3DShaderVariable * mVariable;
}

@property (nonatomic, readonly) bool canHaveFragment;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{TSCH3DShaderVariableScopes={array<TSCH3DShaderVariableScopeType' */ struct  declaredScope; /* unknown property attribute:  2>=[2{TSCH3DShaderVariableScopeType=Q}]}} */
@property (nonatomic, readonly) NSMutableSet *dependees;
@property (nonatomic, readonly) bool hasAttribute;
@property (nonatomic, readonly) bool hasFragment;
@property (nonatomic, readonly) unsigned long long hasGlobal;
@property (nonatomic, readonly) bool hasVertex;
@property (nonatomic, readonly) bool isAttribute;
@property (nonatomic, readonly) bool isFragment;
@property (nonatomic, readonly) bool isFragmentLinkable;
@property (nonatomic, readonly) bool isLinked;
@property (nonatomic, readonly) bool isSpecial;
@property (nonatomic, readonly) bool isUniform;
@property (nonatomic) bool isUsed;
@property (nonatomic, readonly) bool isVertex;
@property (nonatomic, readonly) bool isVertexLinkable;
@property (nonatomic, readonly) bool isVertexVarying;
@property (nonatomic, readonly) struct TSCH3DShaderType { unsigned long long x1; } linked;
@property (nonatomic, readonly) bool notLinked;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{TSCH3DShaderVariableScopes={array<TSCH3DShaderVariableScopeType' */ struct  scope; /* unknown property attribute:  2>=[2{TSCH3DShaderVariableScopeType=Q}]}} */
@property (nonatomic, readonly) bool scopeHasFragment;
@property (nonatomic, readonly) bool scopedInAll;
@property (nonatomic, readonly) struct TSCH3DShaderType { unsigned long long x1; } shaderType;
@property (nonatomic, readonly) TSCH3DShaderVariable *variable;

+ (id)linkageWithVariable:(id)arg1;

- (id).cxx_construct;
- (void)addBodyScope:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (void)addDeclaredShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (void)addLinkage:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (void)addShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (bool)canHaveFragment;
- (void)dealloc;
- (bool)declaredInShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (struct TSCH3DShaderVariableScopes { struct array<TSCH3DShaderVariableScopeType, 2> { struct TSCH3DShaderVariableScopeType { unsigned long long x_1_2_1; } x_1_1_1[2]; } x1; })declaredScope;
- (id)dependees;
- (id)description;
- (id)globalNameForShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (bool)hasAttribute;
- (bool)hasBody:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (bool)hasFragment;
- (unsigned long long)hasGlobal;
- (bool)hasLinkage:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (bool)hasShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (bool)hasVarying;
- (bool)hasVertex;
- (id)initWithVariable:(id)arg1;
- (bool)isAttribute;
- (bool)isFragment;
- (bool)isFragmentLinkable;
- (bool)isGlobalScope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg1;
- (bool)isLinked;
- (bool)isSpecial;
- (bool)isUniform;
- (bool)isUsed;
- (bool)isVarying:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (bool)isVertex;
- (bool)isVertexLinkable;
- (bool)isVertexVarying;
- (struct TSCH3DShaderType { unsigned long long x1; })linked;
- (id)nameForShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (bool)notLinked;
- (void)removeLinkage:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (void)removeShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (id)resolveGlobalNameForShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2 defaultTo:(id)arg3;
- (struct TSCH3DShaderVariableScopes { struct array<TSCH3DShaderVariableScopeType, 2> { struct TSCH3DShaderVariableScopeType { unsigned long long x_1_2_1; } x_1_1_1[2]; } x1; })scope;
- (bool)scopeHasFragment;
- (bool)scopedInAll;
- (void)setIsUsed:(bool)arg1;
- (void)setLinkage:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (void)setShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (struct TSCH3DShaderType { unsigned long long x1; })shaderType;
- (void)unlink;
- (bool)updateLinkage:(struct TSCH3DShaderType { unsigned long long x1; })arg1;
- (bool)updateShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2;
- (id)variable;
- (id)variableDeclarationInShader:(struct TSCH3DShaderType { unsigned long long x1; })arg1 scope:(struct TSCH3DShaderVariableScopeType { unsigned long long x1; })arg2 isMetal:(bool)arg3;
- (id)variableQualifiersWithStorageQualifier:(id)arg1 isMetal:(bool)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
