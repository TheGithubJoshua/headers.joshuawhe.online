<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSPComponentWriter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSPComponentWriter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSPComponentWriter : NSObject {
    TSPReferenceOrderedSet * _analyzedCommandToModelReferences;
    TSPReferenceOrderedSet * _archivedObjects;
    NSMapTable * _archivedObjectsDictionary;
    TSPArchiverManager * _archiverManager;
    TSPReferenceOrderedSet * _commandToModelReferences;
    TSPComponent * _component;
    TSPMutableComponentObjectUUIDMap * _componentObjectUUIDMap;
    NSHashTable * _dataReferences;
    <TSPComponentWriterDelegate> * _delegate;
    NSObject<OS_dispatch_semaphore> * _delegateSemaphore;
    TSPReferenceOrderedSet * _externalReferences;
    NSMutableSet * _featureInfos;
    struct { 
        unsigned int success : 1; 
        unsigned int isErrorRecoverable : 1; 
        unsigned int calculatedObjectTargetType : 1; 
        unsigned int delegateRespondsToNeedsDocumentRecovery : 1; 
        unsigned int delegateRespondsToLocatorForClaimingComponent : 1; 
        unsigned int delegateRespondsToObjectBelongsToLinkedComponent : 1; 
        unsigned int delegateRespondsToExternalPackageDidWriteObject : 1; 
        unsigned int delegateRespondsToShouldDelayWritingObject : 1; 
    }  _flags;
    TSPReferenceOrderedSet * _indirectCommandToModelExternalReferences;
    NSHashTable * _lazyReferences;
    NSString * _locator;
    long long  _mode;
    TSPReferenceOrderedSet * _newCommandToModelReferences;
    TSPObjectReferenceMap * _objectReferenceMap;
    struct vector<TSP::ObjectStackEntry, std::__1::allocator<TSP::ObjectStackEntry> > { 
        struct ObjectStackEntry {} *__begin_; 
        struct ObjectStackEntry {} *__end_; 
        struct __compressed_pair<TSP::ObjectStackEntry *, std::__1::allocator<TSP::ObjectStackEntry> > { 
            struct ObjectStackEntry {} *__value_; 
        } __end_cap_; 
    }  _objectStack;
    unsigned long long  _objectTargetType;
    unsigned char  _packageIdentifier;
    TSPObject * _rootObject;
    TSPReferenceOrderedSet * _weakReferences;
    <TSPComponentWriteChannel> * _writeChannel;
    NSObject<OS_dispatch_group> * _writeGroup;
    NSObject<OS_dispatch_queue> * _writeQueue;
}

@property (nonatomic, readonly) TSPComponent *component;
@property (nonatomic, readonly) NSSet *featureInfos;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)acquireArchiverAccessLockAndWriteObjects:(id)arg1 parentObject:(id)arg2 isCommandToModelReference:(bool)arg3 isAnalyzingExternalComponent:(bool)arg4 completion:(id /* block */)arg5;
- (void)addCommandToModelReferences:(id)arg1 parentObject:(id)arg2;
- (void)analyzeCommandToModelReference:(id)arg1 isAnalyzingExternalComponent:(bool)arg2 archiver:(id)arg3 completion:(id /* block */)arg4;
- (bool)canSkipArchivingStronglyReferencedObject:(id)arg1 fromComponentRootObject:(id)arg2;
- (id)commandToModelReferencesToWrite;
- (id)component;
- (id)featureInfos;
- (id)init;
- (id)initWithComponent:(id)arg1 locator:(id)arg2 rootObject:(id)arg3 delegate:(id)arg4 mode:(long long)arg5 packageIdentifier:(unsigned char)arg6 objectReferenceMapOrNil:(id)arg7 writeChannel:(id)arg8 archiverManager:(id)arg9;
- (bool)isObjectExternal:(id)arg1 archiverOrNil:(id)arg2 parentObject:(id)arg3 validateAmbiguousObjectOwnership:(bool)arg4 hasArchiverAccessLock:(bool)arg5 claimingComponent:(id*)arg6 isOwnedByDifferentPackage:(bool*)arg7;
- (bool)isObjectExternalBecauseItAlreadyBelongsToAnotherComponent:(id)arg1 parentObject:(id)arg2 claimingComponent:(id*)arg3 claimingPackageIdentifier:(unsigned char*)arg4 claimingComponentWillBeLinked:(bool*)arg5;
- (bool)isObjectExternalBecauseOfExplicitComponentOwnership:(id)arg1 archiverOrNil:(id)arg2 claimingComponentOrNil:(id)arg3 hasArchiverAccessLock:(bool)arg4 explicitComponentRootObject:(id*)arg5 claimingComponent:(id*)arg6 isOwnedByDifferentPackage:(bool*)arg7;
- (bool)shouldAnalyzeCommandToModelReference:(id)arg1 isAnalyzingExternalComponent:(bool)arg2;
- (bool)shouldDelayWritingObject:(id)arg1;
- (bool)shouldWriteObject:(id)arg1;
- (void)validateAmbiguousObjectOwnershipForObject:(id)arg1 explicitComponentRootObject:(id)arg2 parentObject:(id)arg3 claimingComponent:(id)arg4 claimingPackageIdentifier:(unsigned char)arg5 claimingComponentWillBeLinked:(bool)arg6;
- (void)validateExplicitComponentOwnershipForObject:(id)arg1 archiverOrNil:(id)arg2 parentObject:(id)arg3 hasArchiverAccessLock:(bool)arg4;
- (bool)validateObjectContextForObject:(id)arg1;
- (void)writeArchiver:(id)arg1;
- (void)writeObject:(id)arg1 archiver:(id)arg2 parentObject:(id)arg3 completion:(id /* block */)arg4;
- (void)writeWithArchiverAccessLockForObjects:(id)arg1 parentObject:(id)arg2 isCommandToModelReference:(bool)arg3 isAnalyzingExternalComponent:(bool)arg4 completion:(id /* block */)arg5;
- (void)writeWithCompletionQueue:(id)arg1 completion:(id /* block */)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
