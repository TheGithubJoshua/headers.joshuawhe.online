<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSCHChartPieWedgeElement.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSCHChartPieWedgeElement.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSCHChartPieWedgeElement : NSObject <NSCopying> {
    double  mEndAngle;
    double  mLabelExplosion;
    struct TSCHChartPieWedgeElementLayoutSystem { 
        long long coordinateSpace; 
        struct CGPoint { 
            double x; 
            double y; 
        } centerPoint; 
    }  mLayoutSystem;
    double  mMidAngle;
    double  mRadius;
    TSCHChartSeries * mSeries;
    double  mStartAngle;
    double  mWedgeExplosion;
}

@property (nonatomic, readonly) double angleAtWedgeTip;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } centerPoint;
@property (nonatomic) double endAngle;
@property (nonatomic) double labelExplosion;
@property (nonatomic) struct TSCHChartPieWedgeElementLayoutSystem { long long x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; } layoutSystem;
@property (nonatomic) double midAngle;
@property (nonatomic) double radius;
@property (nonatomic) TSCHChartSeries *series;
@property (nonatomic) double startAngle;
@property (nonatomic) double wedgeExplosion;

- (void).cxx_destruct;
- (double)angleAtWedgeTip;
- (bool)angleInRange:(double)arg1 startAngle:(double)arg2 endAngle:(double)arg3;
- (struct CGPoint { double x1; double x2; })arcEndPoint;
- (struct CGPoint { double x1; double x2; })arcStartPoint;
- (struct CGPoint { double x1; double x2; })bendedLineMidpointWithStartPoint:(struct CGPoint { double x1; double x2; })arg1 length:(double)arg2 shouldBeUpwards:(bool)arg3;
- (bool)calloutLineIntersectsWedgeWithStartPoint:(struct CGPoint { double x1; double x2; })arg1 midPoint:(struct CGPoint { double x1; double x2; })arg2;
- (struct CGPoint { double x1; double x2; })centerPoint;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct CGPoint { double x1; double x2; })defaultBendedLineEndpointWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })defaultBendedLineMidpointWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })defaultLabelCenterPoint;
- (struct CGPoint { double x1; double x2; })defaultLabelCenterPointForLabelWithSize:(struct CGSize { double x1; double x2; })arg1 bended:(bool)arg2;
- (struct CGPoint { double x1; double x2; })defaultLabelEndpointForBendedLineLabels;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })defaultLabelRectForLabelWithSize:(struct CGSize { double x1; double x2; })arg1 bended:(bool)arg2;
- (double)endAngle;
- (struct CGPoint { double x1; double x2; })firstHalfOfBendedLineVectorNormalizedShouldBeUpwards:(bool)arg1;
- (id)initWithRadius:(double)arg1 startAngle:(double)arg2 midAngle:(double)arg3 endAngle:(double)arg4 labelExplosion:(double)arg5 wedgeExplosion:(double)arg6 series:(id)arg7;
- (bool)isInUpperHalfOfChartWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isOnLeftSideOfChart;
- (double)labelExplosion;
- (struct TSCHChartPieLabelRects { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; })labelRectsForFirstLabelWithSize:(struct CGSize { double x1; double x2; })arg1 secondLabelSize:(struct CGSize { double x1; double x2; })arg2 stacked:(bool)arg3 stackedLabelCenterAlign:(bool)arg4 placeToTheSideOfPieChart:(bool)arg5;
- (struct TSCHChartPieWedgeElementLayoutSystem { long long x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; })layoutSystem;
- (bool)lineIntersectsLineWithStartPoint:(struct CGPoint { double x1; double x2; })arg1 firstLineEndPoint:(struct CGPoint { double x1; double x2; })arg2 secondLineStartPoint:(struct CGPoint { double x1; double x2; })arg3 secondLineEndPoint:(struct CGPoint { double x1; double x2; })arg4 outIntersectionPoint:(struct CGPoint { double x1; double x2; }*)arg5;
- (bool)lineIntersectsWedgeWithLineStartPoint:(struct CGPoint { double x1; double x2; })arg1 lineEndPoint:(struct CGPoint { double x1; double x2; })arg2;
- (double)midAngle;
- (struct CGPoint { double x1; double x2; })midpointOnClosestEdgeToWedgeTip:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })normalizedWedgeBisectionVector;
- (double)p_xShiftAmountWithEndpoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })pointAlongWedgeBisectionInChartCoordinateSpaceWithFloatDistanceFromWedgeTip:(double)arg1;
- (struct CGPoint { double x1; double x2; })pointAlongWedgeBisectionInChartCoordinateSpaceWithPercentDistanceFromWedgeTip:(double)arg1;
- (struct CGPoint { double x1; double x2; })pointAtWedgeCircumferenceMiddleInChartCoordinateSpace;
- (struct CGPoint { double x1; double x2; })pointAtWedgeTipInChartCoordinateSpace;
- (bool)pointWithinWedgeSpread:(struct CGPoint { double x1; double x2; })arg1;
- (bool)pointWithinWedgeSpread:(struct CGPoint { double x1; double x2; })arg1 percentage:(double)arg2;
- (double)radius;
- (id)series;
- (void)setEndAngle:(double)arg1;
- (void)setLabelExplosion:(double)arg1;
- (void)setLayoutSystem:(struct TSCHChartPieWedgeElementLayoutSystem { long long x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setMidAngle:(double)arg1;
- (void)setRadius:(double)arg1;
- (void)setSeries:(id)arg1;
- (void)setStartAngle:(double)arg1;
- (void)setToChartCoordinateSpaceWithChartBodyCenterPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setToLocalCoordinateSpace;
- (void)setWedgeExplosion:(double)arg1;
- (bool)shouldUsePerpendicularBendedLineWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)startAngle;
- (bool)wedgeBisectionIntersectsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 outIntersectionPointClosestToWedgeTip:(struct CGPoint { double x1; double x2; }*)arg2;
- (double)wedgeExplosion;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
