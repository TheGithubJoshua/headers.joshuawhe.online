<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSCHText.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSCHText.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSCHText : NSObject {
    bool  _textColorShouldBeBlack;
    Class  _tswpTextClass;
}

@property (nonatomic) bool textColorShouldBeBlack;

+ (void)clearCachesForDocumentRoot:(id)arg1;
+ (struct TSCHTextLayoutResults { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; bool x3; })initializeTextLayoutResults;
+ (id)sharedInteriorWrappingText;
+ (id)sharedText;
+ (bool)shouldLayoutTextForWrapWidth:(double)arg1 textLayoutProperties:(id)arg2;

- (void)drawAttributedString:(const struct __CFAttributedString { }*)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 atPosition:(struct CGPoint { double x1; double x2; })arg4 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 viewScale:(double)arg6;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 atPosition:(struct CGPoint { double x1; double x2; })arg4 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg5 viewScale:(double)arg6;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 atPosition:(struct CGPoint { double x1; double x2; })arg4 viewScale:(double)arg5;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 viewScale:(double)arg5;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 viewScale:(double)arg4;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 wrapWidth:(double)arg4 atPosition:(struct CGPoint { double x1; double x2; })arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 viewScale:(double)arg7;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 wrapWidth:(double)arg4 atPosition:(struct CGPoint { double x1; double x2; })arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 viewScale:(double)arg7 layoutProperties:(id)arg8;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 wrapWidth:(double)arg4 atPosition:(struct CGPoint { double x1; double x2; })arg5 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg6 viewScale:(double)arg7 layoutProperties:(id)arg8 outTextLayoutResults:(struct TSCHTextLayoutResults { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; bool x3; }*)arg9;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 wrapWidth:(double)arg4 atPosition:(struct CGPoint { double x1; double x2; })arg5 viewScale:(double)arg6;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 wrapWidth:(double)arg4 atPosition:(struct CGPoint { double x1; double x2; })arg5 viewScale:(double)arg6 layoutProperties:(id)arg7;
- (void)drawText:(id)arg1 paragraphStyle:(id)arg2 intoContext:(struct CGContext { }*)arg3 wrapWidth:(double)arg4 atPosition:(struct CGPoint { double x1; double x2; })arg5 viewScale:(double)arg6 layoutProperties:(id)arg7 outTextLayoutResults:(struct TSCHTextLayoutResults { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; bool x3; }*)arg8;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inText:(id)arg2 paragraphStyle:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inText:(id)arg2 paragraphStyle:(id)arg3 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inText:(id)arg2 paragraphStyle:(id)arg3 wrapWidth:(double)arg4 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg5;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 inText:(id)arg2 paragraphStyle:(id)arg3 wrapWidth:(double)arg4 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg5 layoutProperties:(id)arg6;
- (id)initWithTSWPTextClass:(Class)arg1;
- (struct CGSize { double x1; double x2; })measureAttributedString:(const struct __CFAttributedString { }*)arg1 paragraphStyle:(id)arg2 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2 wrapWidth:(double)arg3;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2 wrapWidth:(double)arg3 layoutProperties:(id)arg4;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2 wrapWidth:(double)arg3 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2 wrapWidth:(double)arg3 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 checkNumberTemplates:(bool)arg5;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2 wrapWidth:(double)arg3 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 checkNumberTemplates:(bool)arg5 layoutProperties:(id)arg6 outTextLayoutResults:(struct TSCHTextLayoutResults { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; bool x3; }*)arg7;
- (struct CGSize { double x1; double x2; })measureText:(id)arg1 paragraphStyle:(id)arg2 wrapWidth:(double)arg3 outErasableFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4 layoutProperties:(id)arg5 outTextLayoutResults:(struct TSCHTextLayoutResults { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; bool x3; }*)arg6;
- (id)p_newWPColumnForText:(id)arg1 wpTextObject:(id)arg2 wrapWidth:(double)arg3 layoutProperties:(id)arg4;
- (struct CGSize { double x1; double x2; })p_sizeForNumberTemplate:(id)arg1 paragraphStyle:(id)arg2 textCache:(id)arg3 layoutProperties:(id)arg4;
- (bool)p_styleSupportsEqualDigits:(id)arg1 textCache:(id)arg2;
- (id)p_textCacheForParagraphStyle:(id)arg1;
- (id)p_wpColumnForText:(id)arg1 paragraphStyle:(id)arg2 textBlack:(bool)arg3 wrapWidth:(double)arg4 textCache:(id)arg5 layoutProperties:(id)arg6;
- (id)p_wpStorageForAttributedString:(const struct __CFAttributedString { }*)arg1 paragraphStyle:(id)arg2;
- (id)p_wpTextForParagraphStyle:(id)arg1 text:(id)arg2 textBlack:(bool)arg3 textCache:(id)arg4;
- (id)p_wpTextForParagraphStyle:(id)arg1 text:(id)arg2 textBlack:(bool)arg3 textCache:(id)arg4 cacheKey:(id)arg5;
- (const struct __CTFont { }*)retainedCTFontForParagraphStyle:(id)arg1;
- (void)setTextColorShouldBeBlack:(bool)arg1;
- (bool)textColorShouldBeBlack;
- (struct TSCHTextLayoutResults { struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_1_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_1_1_2; } x1; double x2; bool x3; })textLayoutResultsForColumn:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
