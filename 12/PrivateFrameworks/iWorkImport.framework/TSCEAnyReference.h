<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSCEAnyReference.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSCEAnyReference.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSCEAnyReference : NSObject {
    NSString * _overrideText;
    NSString * _overrideTextAsTyped;
    struct TSUPreserveFlags { 
        unsigned char _flags; 
    }  _preserveFlags;
    struct TSCEAnyRef { 
        unsigned short _refType; 
        struct TSCESpanningRangeRef { 
            struct TSCERangeRef { 
                struct TSCERangeCoordinate { 
                    struct TSUCellCoord { 
                        unsigned int row; 
                        unsigned short column; 
                        bool _preserveRow; 
                        bool _preserveColumn; 
                    } _topLeft; 
                    struct TSUCellCoord { 
                        unsigned int row; 
                        unsigned short column; 
                        bool _preserveRow; 
                        bool _preserveColumn; 
                    } _bottomRight; 
                } range; 
                struct UUIDData<TSP::UUIDData> { 
                    union { 
                        unsigned char _uuid[16]; 
                        struct { 
                            unsigned char byte0; 
                            unsigned char byte1; 
                            unsigned char byte2; 
                            unsigned char byte3; 
                            unsigned char byte4; 
                            unsigned char byte5; 
                            unsigned char byte6; 
                            unsigned char byte7; 
                            unsigned char byte8; 
                            unsigned char byte9; 
                            unsigned char byte10; 
                            unsigned char byte11; 
                            unsigned char byte12; 
                            unsigned char byte13; 
                            unsigned char byte14; 
                            unsigned char byte15; 
                        } _cfuuid; 
                        struct { 
                            unsigned long long _lower; 
                            unsigned long long _upper; 
                        } ; 
                    } ; 
                } _tableUID; 
            } rangeRef; 
            unsigned char rangeContext; 
        } _spanningRef; 
        bool _couldBeIntersection; 
        TSCEReferenceSetWrapper *_refSet; 
    }  _ref;
    bool  _wasConstructedViaNames;
}

@property (nonatomic, readonly) struct TSCEAnyRef { unsigned short x1; struct TSCESpanningRangeRef { struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x_1_4_1; unsigned short x_1_4_2; bool x_1_4_3; bool x_1_4_4; } x_1_3_1; struct TSUCellCoord { unsigned int x_2_4_1; unsigned short x_2_4_2; bool x_2_4_3; bool x_2_4_4; } x_1_3_2; } x_1_2_1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_4_1[16]; struct { unsigned char x_2_5_1; unsigned char x_2_5_2; unsigned char x_2_5_3; unsigned char x_2_5_4; unsigned char x_2_5_5; unsigned char x_2_5_6; unsigned char x_2_5_7; unsigned char x_2_5_8; unsigned char x_2_5_9; unsigned char x_2_5_10; unsigned char x_2_5_11; unsigned char x_2_5_12; unsigned char x_2_5_13; unsigned char x_2_5_14; unsigned char x_2_5_15; unsigned char x_2_5_16; } x_1_4_2; struct { unsigned long long x_3_5_1; unsigned long long x_3_5_2; } x_1_4_3; } x_2_3_1; } x_1_2_2; } x_2_1_1; unsigned char x_2_1_2; } x2; bool x3; id x4; } anyRef;
@property (copy) NSString *overrideText;
@property (copy) NSString *overrideTextAsTyped;
@property (nonatomic) struct TSUPreserveFlags { unsigned char x1; } preserveFlags;
@property (nonatomic, readonly) struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct TSUCellCoord { unsigned int x_2_2_1; unsigned short x_2_2_2; bool x_2_2_3; bool x_2_2_4; } x_1_1_2; } x1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_2_1_1; } x2; } rangeRef;
@property (nonatomic, readonly) TSCEWrappedRangeRef *rangeReference;
@property (nonatomic, readonly) struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; } tableUID;
@property (nonatomic) bool wasConstructedViaNames;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct TSCEAnyRef { unsigned short x1; struct TSCESpanningRangeRef { struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x_1_4_1; unsigned short x_1_4_2; bool x_1_4_3; bool x_1_4_4; } x_1_3_1; struct TSUCellCoord { unsigned int x_2_4_1; unsigned short x_2_4_2; bool x_2_4_3; bool x_2_4_4; } x_1_3_2; } x_1_2_1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_4_1[16]; struct { unsigned char x_2_5_1; unsigned char x_2_5_2; unsigned char x_2_5_3; unsigned char x_2_5_4; unsigned char x_2_5_5; unsigned char x_2_5_6; unsigned char x_2_5_7; unsigned char x_2_5_8; unsigned char x_2_5_9; unsigned char x_2_5_10; unsigned char x_2_5_11; unsigned char x_2_5_12; unsigned char x_2_5_13; unsigned char x_2_5_14; unsigned char x_2_5_15; unsigned char x_2_5_16; } x_1_4_2; struct { unsigned long long x_3_5_1; unsigned long long x_3_5_2; } x_1_4_3; } x_2_3_1; } x_1_2_2; } x_2_1_1; unsigned char x_2_1_2; } x2; bool x3; id x4; })anyRef;
- (unsigned long long)hash;
- (id)initWithCellRef:(const struct TSCECellRef { struct TSUCellCoord { unsigned int x_1_1_1; unsigned short x_1_1_2; bool x_1_1_3; bool x_1_1_4; } x1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_2_1_1; } x2; }*)arg1;
- (id)initWithRangeRef:(const struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct TSUCellCoord { unsigned int x_2_2_1; unsigned short x_2_2_2; bool x_2_2_3; bool x_2_2_4; } x_1_1_2; } x1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_2_1_1; } x2; }*)arg1;
- (bool)isEqual:(id)arg1;
- (id)overrideText;
- (id)overrideTextAsTyped;
- (id)p_stringByUnescapingQuotedStringWithPossibleDollarPrefix:(id)arg1 partial:(bool)arg2;
- (struct TSUPreserveFlags { unsigned char x1; })preserveFlags;
- (struct TSCERangeRef { struct TSCERangeCoordinate { struct TSUCellCoord { unsigned int x_1_2_1; unsigned short x_1_2_2; bool x_1_2_3; bool x_1_2_4; } x_1_1_1; struct TSUCellCoord { unsigned int x_2_2_1; unsigned short x_2_2_2; bool x_2_2_3; bool x_2_2_4; } x_1_1_2; } x1; struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_2_1[16]; struct { unsigned char x_2_3_1; unsigned char x_2_3_2; unsigned char x_2_3_3; unsigned char x_2_3_4; unsigned char x_2_3_5; unsigned char x_2_3_6; unsigned char x_2_3_7; unsigned char x_2_3_8; unsigned char x_2_3_9; unsigned char x_2_3_10; unsigned char x_2_3_11; unsigned char x_2_3_12; unsigned char x_2_3_13; unsigned char x_2_3_14; unsigned char x_2_3_15; unsigned char x_2_3_16; } x_1_2_2; struct { unsigned long long x_3_3_1; unsigned long long x_3_3_2; } x_1_2_3; } x_2_1_1; } x2; })rangeRef;
- (id)rangeReference;
- (id)referenceTextForAutocompleteWithCalculationEngine:(id)arg1 contextSheetName:(id)arg2 preserveFlags:(struct TSUPreserveFlags { unsigned char x1; })arg3 inputString:(id)arg4 inputStringIsComplete:(bool)arg5;
- (id)referenceTextForAutocompleteWithCalculationEngine:(id)arg1 hostTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg2 preserveFlags:(struct TSUPreserveFlags { unsigned char x1; })arg3 inputString:(id)arg4 inputStringIsComplete:(bool)arg5;
- (id)referenceTextWithCalculationEngine:(id)arg1 contextSheetName:(id)arg2;
- (id)referenceTextWithCalculationEngine:(id)arg1 hostTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg2;
- (void)setOverrideText:(id)arg1;
- (void)setOverrideTextAsTyped:(id)arg1;
- (void)setPreserveFlags:(struct TSUPreserveFlags { unsigned char x1; })arg1;
- (void)setWasConstructedViaNames:(bool)arg1;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })tableUID;
- (bool)wasConstructedViaNames;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
