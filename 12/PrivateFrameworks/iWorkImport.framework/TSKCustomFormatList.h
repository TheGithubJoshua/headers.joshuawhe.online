<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSKCustomFormatList.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSKCustomFormatList.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSKCustomFormatList : TSPObject <NSCopying> {
    NSMutableDictionary * _formatsByKeyDictionary;
    bool  _importing;
    bool  _importingDone;
    TSUNoCopyDictionary * _indexesByKey;
    TSUNoCopyDictionary * _keysByFormatDictionary;
    TSUNoCopyDictionary * _keysByFormatWithNameStemMatching;
    TSUSparseArray * _keysByIndex;
    NSMutableSet * _namesList;
    bool  _upgrading;
    bool  _upgradingDone;
}

@property (nonatomic, retain) NSMutableDictionary *formatsByKeyDictionary;
@property (nonatomic) bool importing;
@property (nonatomic) bool importingDone;
@property (nonatomic, retain) TSUNoCopyDictionary *indexesByKey;
@property (nonatomic, retain) TSUNoCopyDictionary *keysByFormatDictionary;
@property (nonatomic, retain) TSUNoCopyDictionary *keysByFormatWithNameStemMatching;
@property (nonatomic, retain) TSUSparseArray *keysByIndex;
@property (nonatomic, retain) NSMutableSet *namesList;
@property (nonatomic) bool upgrading;
@property (nonatomic) bool upgradingDone;

+ (void)archiveKeys:(id)arg1 message:(struct RepeatedPtrField<TSP::UUID> { struct Arena {} *x1; int x2; int x3; struct Rep {} *x4; }*)arg2;
+ (id)unarchiveKeys:(const struct RepeatedPtrField<TSP::UUID> { struct Arena {} *x1; int x2; int x3; struct Rep {} *x4; }*)arg1;

- (void).cxx_destruct;
- (id)addCustomFormat:(id)arg1 oldKey:(id)arg2 fuzzyNameMatching:(bool)arg3;
- (void)addCustomFormatForUpgrade:(id)arg1 legacyKey:(unsigned int)arg2;
- (id)addImportedCustomFormat:(id)arg1;
- (id)addedKeysRelativeTo:(id)arg1;
- (id)allKeys;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)count;
- (id)customFormatForKey:(id)arg1;
- (id)description;
- (id)formatsByKeyDictionary;
- (bool)hasFormatNamed:(id)arg1;
- (bool)importing;
- (bool)importingDone;
- (id)indexesByKey;
- (id)initWithContext:(id)arg1;
- (unsigned long long)inspectorIndexForKey:(id)arg1;
- (id)keyForCustomFormat:(id)arg1;
- (id)keyForInspectorIndex:(unsigned long long)arg1;
- (id)keysByFormatDictionary;
- (id)keysByFormatWithNameStemMatching;
- (id)keysByIndex;
- (void)loadFromUnarchiver:(id)arg1;
- (id)namesList;
- (void)p_addCustomFormatToNameStemDict:(id)arg1 key:(id)arg2;
- (id)p_keyForFormatUsingNameStem:(id)arg1;
- (void)p_removeCustomFormatFromNameStemDict:(id)arg1 key:(id)arg2;
- (void)p_setCustomFormat:(id)arg1 key:(id)arg2;
- (void)p_setCustomFormat:(id)arg1 key:(id)arg2 legacyKey:(unsigned int)arg3;
- (bool)p_validateNameStemCount;
- (void)remapCustomFormatKeysWithOldToNewKeyMap:(id)arg1;
- (void)removeAll;
- (void)removeCustomFormatForKey:(id)arg1;
- (void)removeCustomFormatsForKeys:(id)arg1;
- (void)saveToArchiver:(id)arg1;
- (void)setFormatsByKeyDictionary:(id)arg1;
- (void)setImporting:(bool)arg1;
- (void)setImportingDone:(bool)arg1;
- (void)setIndexesByKey:(id)arg1;
- (void)setKeysByFormatDictionary:(id)arg1;
- (void)setKeysByFormatWithNameStemMatching:(id)arg1;
- (void)setKeysByIndex:(id)arg1;
- (void)setNamesList:(id)arg1;
- (void)setUpgrading:(bool)arg1;
- (void)setUpgradingDone:(bool)arg1;
- (void)updateCustomFormat:(id)arg1 oldKey:(id)arg2;
- (id)upgradedCustomFormatKeyForLegacyID:(unsigned int)arg1;
- (bool)upgrading;
- (bool)upgradingDone;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
