<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSCHChartPieWedgeLayoutInfo.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSCHChartPieWedgeLayoutInfo.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSCHChartPieWedgeLayoutInfo : NSObject <NSCopying> {
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  mCombinedLabelTransformIntoPieChartCoordinateSpace;
    NSNumber * mEnableCalloutLine;
    NSArray * mPieLabels;
    TSCHChartPieWedgeElement * mWedgeElement;
}

@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } combinedLabelErasableFrame;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } combinedLabelErasableFrameInChartCoordinateSpace;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } combinedLabelRect;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } combinedLabelRectInChartCoordinateSpace;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } combinedLabelRectMidpointInChartCoordinateSpace;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } combinedLabelTransformIntoPieChartCoordinateSpace;
@property (nonatomic, readonly) int enableCalloutLineSetting;
@property (nonatomic, copy) NSArray *pieLabels;
@property (nonatomic, readonly) bool stackLabels;
@property (nonatomic, retain) TSCHChartPieWedgeElement *wedgeElement;

- (void).cxx_destruct;
- (double)combinedLabelDistanceFromWedgeTip;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })combinedLabelErasableFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })combinedLabelErasableFrameInChartCoordinateSpace;
- (bool)combinedLabelIsOnLeftSide;
- (bool)combinedLabelOutsideWedge;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })combinedLabelRect;
- (struct CGPoint { double x1; double x2; })combinedLabelRectBottomLeftCornerInChartCoordinateSpace;
- (struct CGPoint { double x1; double x2; })combinedLabelRectBottomRightCornerInChartCoordinateSpace;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })combinedLabelRectInChartCoordinateSpace;
- (struct CGPoint { double x1; double x2; })combinedLabelRectMidpointInChartCoordinateSpace;
- (struct CGPoint { double x1; double x2; })combinedLabelRectTopLeftCornerInChartCoordinateSpace;
- (struct CGPoint { double x1; double x2; })combinedLabelRectTopRightCornerInChartCoordinateSpace;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })combinedLabelTransformIntoPieChartCoordinateSpace;
- (void)concatenateCombinedLabelTransformWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (int)enableCalloutLineSetting;
- (id)initWithPieWedgeElement:(id)arg1 pieLabels:(id)arg2 combinedLabelTransformIntoPieChartCoordinateSpace:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3;
- (id)pieLabels;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpace;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpaceOnCloseXSideBottomYWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpaceOnCloseXSideMiddleY;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpaceOnCloseXSideMiddleYWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpaceOnCloseXSideTopYWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpaceOnFarXSideBottomYWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpaceOnFarXSideMiddleYWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })pointAtLabelInChartCoordinateSpaceOnFarXSideTopYWithStartPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)pointOutsidePieChart:(struct CGPoint { double x1; double x2; })arg1;
- (void)realignPieLabels:(long long)arg1;
- (void)setCombinedLabelTransformIntoPieChartCoordinateSpace:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setPieLabels:(id)arg1;
- (void)setWedgeElement:(id)arg1;
- (bool)stackLabels;
- (void)updateToUseChartCoordinateSpaceWithChartBodyCenterPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })vectorFromWedgeTipToCombinedLabelRect;
- (id)wedgeElement;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
