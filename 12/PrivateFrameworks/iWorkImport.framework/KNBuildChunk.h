<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>KNBuildChunk.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/KNBuildChunk.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface KNBuildChunk : TSPObject <KNInspectableAnimation, NSCopying, TSKModel> {
    bool  _automatic;
    KNBuildChunkIdentifier * _buildChunkIdentifier;
    NSUUID * _buildId;
    TSPLazyReference * _buildReference;
    unsigned long long  _cachedActiveIndexOnSlide;
    unsigned long long  _cachedIndexInBuild;
    unsigned long long  _cachedIndexOnSlide;
    double  _delay;
    double  _duration;
    bool  _needsAutomaticFromBuildAttributes;
    bool  _needsDelayFromBuildAttributes;
    bool  _needsDurationFromBuildAttributes;
    bool  _needsReferentFromBuildAttributes;
    unsigned long long  _referent;
}

@property (getter=isActive, nonatomic, readonly) bool active;
@property (nonatomic, readonly) unsigned long long activeIndexOnSlide;
@property (getter=isAutomatic, nonatomic) bool automatic;
@property (getter=isAutomaticWithPreviousChunk, nonatomic, readonly) bool automaticWithPreviousChunk;
@property (getter=isAutomaticWithPreviousChunkOnSameDrawable, nonatomic, readonly) bool automaticWithPreviousChunkOnSameDrawable;
@property (nonatomic, readonly) NSArray *availableEventTriggers;
@property (nonatomic, readonly) KNBuild *build;
@property (nonatomic, readonly) bool canEditAnimations;
@property (nonatomic, readonly) KNBuildChunkIdentifier *chunkIdentifier;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double delay;
@property (nonatomic, readonly) unsigned long long deliveryGroupIndex;
@property (readonly, copy) NSString *description;
@property (nonatomic) double duration;
@property (nonatomic, readonly) unsigned long long eventTrigger;
@property (nonatomic, readonly) bool hasComplement;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) KNBuild *i_buildFromReference;
@property (nonatomic, readonly) NSUUID *i_buildId;
@property (nonatomic, readonly) unsigned long long indexInBuild;
@property (nonatomic, readonly) unsigned long long indexOnSlide;
@property (nonatomic, readonly) NSSet *inspectableAttributes;
@property (nonatomic, readonly) bool isFirstInBuild;
@property (nonatomic, readonly) bool isFirstInDeliveryGroup;
@property (nonatomic, readonly) bool isFirstOnSlide;
@property (nonatomic, readonly) KNBuildChunk *nextChunkOnSlide;
@property (nonatomic, readonly) KNBuildChunk *previousChunkOnSlide;
@property (nonatomic) unsigned long long referent;
@property (nonatomic, readonly) KNSlide *slide;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *title;

+ (void)i_repairChunkToBuildReferencesFromUUIDsForChunks:(id)arg1 builds:(id)arg2 context:(id)arg3;
+ (void)i_validateBuildReferencesForChunks:(id)arg1;
+ (bool)needsObjectUUID;

- (void).cxx_destruct;
- (unsigned long long)activeIndexOnSlide;
- (id)availableEventTriggers;
- (id)build;
- (bool)canEditAnimations;
- (id)chunkIdentifier;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)delay;
- (unsigned long long)deliveryGroupIndex;
- (id)description;
- (void)didInitFromSOS;
- (double)duration;
- (unsigned long long)eventTrigger;
- (bool)hasComplement;
- (id)i_buildFromReference;
- (id)i_buildId;
- (void)i_clearChunkIdentifier;
- (void)i_didLoadBuild:(id)arg1;
- (void)i_invalidateCaches;
- (void)i_setBuildId:(id)arg1;
- (void)i_setBuildPointer:(id)arg1 forUnarchive:(bool)arg2;
- (void)i_setChunkIdentifier:(id)arg1;
- (void)i_updateChunkUUIDReferencesToBuild:(id)arg1;
- (unsigned long long)indexInBuild;
- (unsigned long long)indexOnSlide;
- (id)initWithBuild:(id)arg1;
- (id)initWithBuild:(id)arg1 copyingAttributesFromChunk:(id)arg2;
- (id)initWithBuild:(id)arg1 referent:(unsigned long long)arg2 copyingRemainingAttributesFromChunk:(id)arg3;
- (id)inspectableAttributes;
- (bool)isActive;
- (bool)isAutomatic;
- (bool)isAutomaticWithPreviousChunk;
- (bool)isAutomaticWithPreviousChunkOnSameDrawable;
- (bool)isComplementOfBuildChunk:(id)arg1;
- (bool)isFirstInBuild;
- (bool)isFirstInDeliveryGroup;
- (bool)isFirstOnSlide;
- (void)loadFromArchive:(const struct BuildChunkArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Reference {} *x5; struct BuildChunkIdentifierArchive {} *x6; struct UUID {} *x7; double x8; double x9; unsigned int x10; bool x11; bool x12; }*)arg1 unarchiver:(id)arg2;
- (void)loadFromUnarchiver:(id)arg1;
- (id)nextChunkOnSlide;
- (void)p_setDelayFromBuildAttributes:(id)arg1 withReferent:(unsigned long long)arg2 automatic:(bool)arg3;
- (void)p_setDurationFromBuildAttributes:(id)arg1;
- (id)p_stringForReferent:(unsigned long long)arg1;
- (id)p_stringRepresentationWithNotAvailableForIndex:(unsigned long long)arg1;
- (id)previousChunkOnSlide;
- (unsigned long long)referent;
- (void)saveToArchive:(struct BuildChunkArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Reference {} *x5; struct BuildChunkIdentifierArchive {} *x6; struct UUID {} *x7; double x8; double x9; unsigned int x10; bool x11; bool x12; }*)arg1 archiver:(id)arg2;
- (void)saveToArchiver:(id)arg1;
- (void)setAutomatic:(bool)arg1;
- (void)setDelay:(double)arg1;
- (void)setDuration:(double)arg1;
- (void)setReferent:(unsigned long long)arg1;
- (id)slide;
- (id)title;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
