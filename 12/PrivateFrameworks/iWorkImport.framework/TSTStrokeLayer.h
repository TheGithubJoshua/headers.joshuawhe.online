<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSTStrokeLayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSTStrokeLayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSTStrokeLayer : TSPObject <NSCopying, NSMutableCopying, TSTStrokeLayerEnumerating> {
    unsigned int  _columnOrRowIndex;
    struct vector<TSTStrokeLayerRun, std::__1::allocator<TSTStrokeLayerRun> > { 
        struct TSTStrokeLayerRun {} *__begin_; 
        struct TSTStrokeLayerRun {} *__end_; 
        struct __compressed_pair<TSTStrokeLayerRun *, std::__1::allocator<TSTStrokeLayerRun> > { 
            struct TSTStrokeLayerRun {} *__value_; 
        } __end_cap_; 
    }  mStrokeRuns;
}

@property (nonatomic) unsigned int columnOrRowIndex;
@property (nonatomic, readonly) bool isEmpty;
@property (readonly) unsigned long long strokeLayerCount;

+ (id)strokeLayer;

- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned int)columnOrRowIndex;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)enumerateStrokesInRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateStrokesUsingBlock:(id /* block */)arg1;
- (id)findStrokeAndRangeAtIndex:(long long)arg1;
- (id)initWithContext:(id)arg1 columnOrRowIndex:(unsigned int)arg2;
- (bool)isEmpty;
- (void)loadFromUnarchiver:(id)arg1;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (id)nextStrokeAndRange:(id)arg1;
- (void)p_appendStroke:(id)arg1 inRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg2 order:(int)arg3;
- (void)p_flattenStrokeOrder;
- (void)p_insertSpaceAtRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg1;
- (void)p_invalidate;
- (void)p_invalidateRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg1;
- (void)p_mergeStrokeRunsAtPosition:(unsigned long long)arg1;
- (void)p_removeRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg1;
- (void)p_setStroke:(id)arg1 inRange:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg2 order:(int)arg3;
- (void)p_setStrokeRuns:(struct vector<TSTStrokeLayerRun, std::__1::allocator<TSTStrokeLayerRun> > { struct TSTStrokeLayerRun {} *x1; struct TSTStrokeLayerRun {} *x2; struct __compressed_pair<TSTStrokeLayerRun *, std::__1::allocator<TSTStrokeLayerRun> > { struct TSTStrokeLayerRun {} *x_3_1_1; } x3; })arg1;
- (void)replaceStrokeLayerAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)saveToArchiver:(id)arg1;
- (void)setColumnOrRowIndex:(unsigned int)arg1;
- (long long)startingIndex;
- (id)strokeLayerAtIndex:(unsigned long long)arg1;
- (unsigned long long)strokeLayerCount;
- (id)strokeLayerModifiedByInsertingSpaceAt:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg1;
- (id)strokeLayerModifiedByRemovingRangeAt:(struct TSTSimpleRange { long long x1; unsigned long long x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
