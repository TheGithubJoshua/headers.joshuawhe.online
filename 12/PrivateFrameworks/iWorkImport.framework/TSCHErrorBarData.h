<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSCHErrorBarData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSCHErrorBarData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSCHErrorBarData : NSObject <TSCHUnretainedParent> {
    bool  mErrorBarsInvalid;
    double  mMaxValue;
    long long  mMaxValueGroupIndex;
    double  mMaxValueScatterX;
    double  mMinValue;
    long long  mMinValueGroupIndex;
    double  mMinValueScatterX;
    TSCHChartSeries * mSeries;
    double  mStandardDeviation;
    double  mStandardDeviationMean;
    double  mStandardDeviationMeanScatterX;
    double  mStandardDeviationScatterX;
    double  mStandardError;
    double  mStandardErrorScatterX;
    bool  mSupportsXAxisBars;
}

@property (nonatomic, readonly) long long maxValueGroupIndex;
@property (nonatomic, readonly) long long minValueGroupIndex;

+ (bool)hasErrorBarsForSeries:(id)arg1;
+ (int)p_errorBarSettingForSeries:(id)arg1 useXAxis:(bool)arg2 axisID:(id)arg3;

- (void).cxx_destruct;
- (void)clearParent;
- (bool)hasErrorDataForAxisID:(id)arg1 valueIndex:(unsigned long long)arg2 chartVertical:(bool)arg3 barVertical:(bool*)arg4 unitValue:(struct CGPoint { double x1; double x2; }*)arg5 unitPositive:(struct CGPoint { double x1; double x2; }*)arg6 unitNegative:(struct CGPoint { double x1; double x2; }*)arg7;
- (id)initWithSeries:(id)arg1;
- (void)invalidateData;
- (id)lineEndForAxisID:(id)arg1;
- (double)maxValueForAxisID:(id)arg1;
- (long long)maxValueGroupIndex;
- (double)minValueForAxisID:(id)arg1;
- (long long)minValueGroupIndex;
- (float)opacityForAxisID:(id)arg1;
- (void)p_clearData;
- (double*)p_createArrayOfSeriesOffsetsForAxisID:(id)arg1 count:(unsigned long long)arg2;
- (double*)p_createArrayOfSeriesValuesForAxisID:(id)arg1 count:(unsigned long long)arg2;
- (double)p_customErrorForAxisID:(id)arg1 groupIndex:(unsigned long long)arg2 positive:(bool)arg3;
- (bool)p_errorBarIsVerticalForAxisID:(id)arg1 chartVertical:(bool)arg2;
- (int)p_errorBarSettingForAxisID:(id)arg1 value:(double)arg2 barType:(int)arg3;
- (int)p_errorBarTypeForAxisID:(id)arg1;
- (double)p_errorForValue:(double*)arg1 onAxisID:(id)arg2 groupIndex:(unsigned long long)arg3 positive:(bool)arg4;
- (double)p_fixedErrorForAxisID:(id)arg1;
- (struct CGPoint { double x1; double x2; })p_getValuePointForGroup:(unsigned long long)arg1 inputAxisID:(id)arg2 outputAxisID:(id)arg3 barVertical:(bool)arg4;
- (double)p_negativeErrorForValue:(double*)arg1 onAxisID:(id)arg2 groupIndex:(unsigned long long)arg3;
- (double)p_percentageErrorForAxisID:(id)arg1;
- (double)p_positiveErrorForValue:(double*)arg1 onAxisID:(id)arg2 groupIndex:(unsigned long long)arg3;
- (double)p_stdDevErrorForAxisID:(id)arg1;
- (double)p_stdDevFactorForAxisID:(id)arg1;
- (double)p_stdDevMeanForAxisID:(id)arg1;
- (double)p_stdErrorErrorForAxisID:(id)arg1;
- (unsigned long long)p_stripBadValuesInArray:(double*)arg1 numValues:(unsigned long long)arg2;
- (void)p_updateDataForAxisID:(id)arg1;
- (void)p_updateMinMaxForAxisID:(id)arg1 forValues:(double*)arg2 withOffsets:(double*)arg3 numValues:(unsigned long long)arg4;
- (void)p_updateMinMaxForStackedPercentageAxis:(id)arg1 forValues:(double*)arg2 withOffsets:(double*)arg3 numValues:(unsigned long long)arg4;
- (void)p_updateStdDeviationForAxisID:(id)arg1 forValues:(double*)arg2 withOffsets:(double*)arg3 numValues:(unsigned long long)arg4;
- (void)p_updateStdErrorForAxisID:(id)arg1 forValues:(double*)arg2 withOffsets:(double*)arg3 numValues:(unsigned long long)arg4;
- (id)shadowForAxisID:(id)arg1;
- (bool)showErrorBarsForAxisID:(id)arg1;
- (id)strokeForAxisID:(id)arg1;
- (void)updateIfNeeded;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
