<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GQHPagesState.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/GQHPagesState.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface GQHPagesState : GQHState <GQWrapPointGenerator> {
    long long  mAttachmentIdCounter;
    struct __CFArray { } * mAttachmentPositions;
    GQDSStyle * mCurrentBaseParagraphStyle;
    GQDSStyle * mCurrentBaseSpanStyle;
    struct __CFString { } * mCurrentCachedParagraphClass;
    struct __CFString { } * mCurrentCachedSpanClass;
    bool  mCurrentFrameHasSandbagFloats;
    int  mCurrentHintColumnIndex;
    int  mCurrentHintPageIndex;
    GQHStyle * mCurrentLayoutStyle;
    int  mCurrentPageIndex;
    GQHStyle * mCurrentParagraphStyle;
    GQDSStyle * mCurrentSectionStyle;
    GQHStyle * mCurrentSpanStyle;
    GQWrapPointSet * mCurrentWrapPointSet;
    bool  mDidFindContainerHint;
    bool  mDidInsertPageHeader;
    struct __CFDictionary { } * mDrawablePagesOrderToCssZOrderClassMap;
    long long  mFirstAttachmentId;
    struct __CFDictionary { } * mFloatingDrawables;
    struct __CFDictionary { } * mFooters;
    bool  mHasLayoutDrawables;
    int  mHeaderFooterPageNumber;
    struct __CFDictionary { } * mHeaders;
    bool  mIsMappingHeadersFooters;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  mLastFrame;
    GQDWPContainerHint * mLastInsertedContainerHint;
    bool  mMappingFloatingDrawables;
    int  mMode;
    struct CGSize { 
        double width; 
        double height; 
    }  mPageSize;
    struct __CFDictionary { } * mPageWrapPointsMap;
    int  mProgressiveIndex;
    struct __CFArray { } * mSectionStyles;
    bool  mSplitNextAttachment;
    int  mStartPageAt;
    int  mStartPageAtValueChangedAtPageIndex;
    bool  mStartedPage;
    bool  mStartedSection;
    struct __CFArray { } * mTocHrefStack;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void)addAttachmentPosition:(double)arg1;
- (void)addFloatingDrawable:(id)arg1;
- (void)addSectionStyle:(id)arg1 pageIndex:(int)arg2 numPages:(int)arg3;
- (void)addStyle:(struct __CFString { }*)arg1 className:(struct __CFString { }*)arg2 srcStyle:(id)arg3;
- (void)addWrapPoint:(id)arg1;
- (bool)allowInlineWrap;
- (void)beginWrapPointSet;
- (void)clearFloatingDrawables;
- (void)clearWrapPoints;
- (void)closeStateLayoutElementsAndStyles;
- (struct vector<GQUtility::ObjcSharedPtr<GQDWrapPoint>, std::__1::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint> > > { struct ObjcSharedPtr<GQDWrapPoint> {} *x1; struct ObjcSharedPtr<GQDWrapPoint> {} *x2; struct __compressed_pair<GQUtility::ObjcSharedPtr<GQDWrapPoint> *, std::__1::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint> > > { struct ObjcSharedPtr<GQDWrapPoint> {} *x_3_1_1; } x3; }*)createListOfWrapPointsAlongY:(float)arg1 minX:(float)arg2 maxX:(float)arg3 zIndex:(int)arg4;
- (struct __CFString { }*)cssZOrderClassForDrawable:(id)arg1;
- (struct __CFString { }*)cssZOrderClassForDrawablePagesOrder:(int)arg1;
- (long long)currentAttachmentId;
- (double)currentAttachmentPosition;
- (int)currentPageIndex;
- (void)dealloc;
- (id)drawableAtIndex:(int)arg1;
- (void)endSection;
- (void)endWrapPointSet;
- (void)finishedWithSplitAttachment;
- (long long)firstAttachmentId;
- (int)floatingDrawablesCount;
- (id)footerForName:(struct __CFString { }*)arg1;
- (void)handleContainerHint:(id)arg1;
- (bool)hasLayoutDrawables;
- (id)headerForName:(struct __CFString { }*)arg1;
- (void)inContent;
- (id)initWithState:(id)arg1 documentSize:(struct CGSize { double x1; double x2; })arg2;
- (void)insertAttachmentPlaceholder;
- (bool)isMappingHeadersFooters;
- (void)mapFloatingDrawablesForPageAtIndex:(unsigned long long)arg1;
- (int)mode;
- (double)moveToNextAttachmentPosition;
- (bool)needAbsolutelyPositionedTables;
- (long long)nextAttachmentId;
- (void)openStateLayoutElementsAndStyles;
- (void)overrideSectionStyle:(id)arg1;
- (struct __CFArray { }*)pageDrawables:(int)arg1;
- (int)pageNumberForHeaderOrFooter;
- (struct CGSize { double x1; double x2; })pageSize;
- (struct __CFDictionary { }*)pagesOrderToCssZOrderClassMapDictionary;
- (void)popTocHref;
- (void)pushTocHref:(struct __CFString { }*)arg1;
- (struct { long long x1; long long x2; })rangeForSectionStyleAtPageIndex:(int)arg1;
- (void)resolveHeaderName:(const struct __CFString {}**)arg1 footerName:(const struct __CFString {}**)arg2;
- (id)sectionStyleForPageIndex:(int)arg1;
- (id)sectionStyleRunForRunBeforePageIndex:(int)arg1;
- (void)setCurrentLayoutStyle:(id)arg1;
- (void)setCurrentPageIndex:(int)arg1;
- (void)setCurrentParagraphStyle:(id)arg1 baseStyle:(id)arg2 cachedClass:(struct __CFString { }*)arg3;
- (void)setCurrentSpanStyle:(id)arg1 baseStyle:(id)arg2 cachedClass:(struct __CFString { }*)arg3;
- (void)setDidFindContainerHint:(bool)arg1;
- (void)setDidInsertPageHeader:(bool)arg1;
- (void)setFooters:(struct __CFArray { }*)arg1;
- (void)setHasLayoutDrawables:(bool)arg1;
- (void)setHeaders:(struct __CFArray { }*)arg1;
- (void)setIsMappingHeadersFooters:(bool)arg1;
- (void)setMode:(int)arg1;
- (void)setOutlineLevel:(int)arg1;
- (void)setOutlineStyleType:(int)arg1;
- (void)setPageSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)splitNextAttachment;
- (void)startLayout;
- (void)startSection;
- (unsigned int)tocDepth;
- (bool)useOutline;
- (id)wrapPointSetForPage:(int)arg1;
- (const struct set<GQUtility::ObjcSharedPtr<GQDWrapPoint>, GQUtility::NSObjectComparator<GQDWrapPoint>, std::__1::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint> > > { struct __tree<GQUtility::ObjcSharedPtr<GQDWrapPoint>, GQUtility::NSObjectComparator<GQDWrapPoint>, std::__1::allocator<GQUtility::ObjcSharedPtr<GQDWrapPoint> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<GQUtility::ObjcSharedPtr<GQDWrapPoint>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, GQUtility::NSObjectComparator<GQDWrapPoint> > { unsigned long long x_3_2_1; struct NSObjectComparator<GQDWrapPoint> { SEL x_2_3_1; } x_3_2_2; } x_1_1_3; } x1; }*)wrapPoints;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
