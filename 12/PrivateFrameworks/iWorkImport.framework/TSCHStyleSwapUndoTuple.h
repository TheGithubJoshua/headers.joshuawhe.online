<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSCHStyleSwapUndoTuple.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iWorkImport.framework/TSCHStyleSwapUndoTuple.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport (440)
 */

@interface TSCHStyleSwapUndoTuple : NSObject {
    int  mIndex;
    TSSPropertySet * mMutatedProperties;
    TSSStyle * mNewValue;
    TSSStyle * mOldValue;
    NSUUID * mRefLineUUID;
    TSPObject<TSCHStyleSwapSupporting> * mStyleSwapSupporting;
    int  mSwapType;
}

@property (readonly) TSSStyle *afterValue;
@property (readonly) TSSStyle *beforeValue;
@property (readonly) TSSPropertyMap *forwardDelta;
@property (readonly) unsigned long long index;
@property (readonly) TSSPropertySet *mutatedProperties;
@property (readonly) NSUUID *refLineUUID;
@property (readonly) TSSPropertyMap *reverseDelta;
@property (readonly) TSCHStyleSemanticTag *semanticTag;
@property (readonly) TSCHStyleOwnerReference *styleOwnerReference;
@property (nonatomic, readonly, retain) TSPObject<TSCHStyleSwapSupporting> *styleSwapSupporting;
@property (readonly) int swapType;

+ (id)convertedSwapTuplesForSwapTuples:(id)arg1 chartInfo:(id)arg2;
+ (bool)hasSwapTuplesRequiringConversion:(id)arg1;
+ (id)migratedSwapTuplesForSwapTuples:(id)arg1 documentRoot:(id)arg2;

- (void).cxx_destruct;
- (id)afterValue;
- (id)beforeValue;
- (bool)canApplyTupleToStyleSwapSupporting:(id)arg1;
- (id)convertedSwapTupleForChartInfo:(id)arg1;
- (id)description;
- (id)forwardDelta;
- (unsigned long long)hash;
- (unsigned long long)index;
- (id)initFromSOSWithSwapType:(int)arg1 index:(unsigned long long)arg2 oldValue:(id)arg3 newValue:(id)arg4 refLineUUID:(id)arg5;
- (id)initWithArchive:(const struct StyleSwapUndoTupleArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Reference {} *x5; struct Reference {} *x6; struct Reference {} *x7; struct UUID {} *x8; unsigned int x9; int x10; }*)arg1 unarchiver:(id)arg2;
- (id)initWithChartInfo:(id)arg1 swapType:(int)arg2 index:(unsigned long long)arg3 oldValue:(id)arg4 newValue:(id)arg5;
- (id)initWithChartInfo:(id)arg1 swapType:(int)arg2 index:(unsigned long long)arg3 oldValue:(id)arg4 newValue:(id)arg5 refLineUUID:(id)arg6;
- (id)initWithChartStylePreset:(id)arg1 swapType:(int)arg2 index:(unsigned long long)arg3 oldValue:(id)arg4 newValue:(id)arg5;
- (id)inverse;
- (bool)isEqual:(id)arg1;
- (bool)isSwappingSameStyleObject:(id)arg1;
- (bool)isSwappingSameStyleValues:(id)arg1;
- (id)migratedStyleForStyle:(id)arg1 documentRoot:(id)arg2;
- (id)migratedSwapTupleForDocumentRoot:(id)arg1;
- (id)mutatedProperties;
- (id)p_deltaFrom:(id)arg1 to:(id)arg2;
- (id)p_initWithPersistentStyleSwapSupporting:(id)arg1 swapType:(int)arg2 index:(unsigned long long)arg3 oldValue:(id)arg4 newValue:(id)arg5 refLineUUID:(id)arg6;
- (id)p_nonequalPropertiesFromMap:(id)arg1 toMap:(id)arg2;
- (id)refLineUUID;
- (id)reverseDelta;
- (void)saveToArchive:(struct StyleSwapUndoTupleArchive { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct Reference {} *x5; struct Reference {} *x6; struct Reference {} *x7; struct UUID {} *x8; unsigned int x9; int x10; }*)arg1 archiver:(id)arg2;
- (id)semanticTag;
- (id)styleOwnerReference;
- (id)styleSwapSupporting;
- (int)swapType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
