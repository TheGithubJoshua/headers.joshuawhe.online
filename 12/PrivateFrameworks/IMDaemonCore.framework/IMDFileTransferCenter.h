<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMDFileTransferCenter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMDaemonCore.framework/IMDFileTransferCenter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMDaemonCore.framework/IMDaemonCore (1000)
 */

@interface IMDFileTransferCenter : NSObject <IMFileCopierDelegate> {
    NSMutableSet * _activeTransfers;
    NSString * _contextStamp;
    NSMutableDictionary * _guidToCopierMap;
    NSMutableDictionary * _guidToSimpleCopierMap;
    NSMutableDictionary * _guidToTransferMap;
    NSTimer * _transferTimer;
    NSMutableArray * _transferringTransfers;
}

@property (nonatomic, retain) NSString *contextStamp;
@property (nonatomic, readonly) bool hasActiveFileTransfers;

+ (id)sharedInstance;

- (void)_addActiveTransfer:(id)arg1;
- (void)_addGatekeeperProperties:(id)arg1 toDirectory:(id)arg2;
- (void)_addGatekeeperProperties:(id)arg1 toFileAtPath:(id)arg2;
- (void)_addSpotlightPropertiesFromFileTransfer:(id)arg1 toDirectory:(id)arg2;
- (void)_addTransferringTransfer:(id)arg1;
- (id)_allFileTransfers;
- (void)_archiveFileTransfer:(id)arg1;
- (id)_attachmentStoreSharedInstance;
- (void)_clearProgressForTransferGUID:(id)arg1;
- (void)_completeProgressForTransferGUID:(id)arg1;
- (id)_createWrapperForTransfer:(id)arg1;
- (id)_dictionaryRepresentationsForFileTransfers:(id)arg1 toSave:(bool)arg2;
- (id)_getNewFileTransferForStoredAttachmentPayloadDataWithTransferGUID:(id)arg1 messageGUID:(id)arg2;
- (void)_handleFileTransfer:(id)arg1 acceptedWithPath:(id)arg2 autoRename:(bool)arg3 overwrite:(bool)arg4 postNotification:(bool)arg5;
- (void)_handleFileTransfer:(id)arg1 createdWithProperties:(id)arg2 fromPid:(int)arg3;
- (void)_handleFileTransfer:(id)arg1 updatedWithProperties:(id)arg2;
- (void)_handleFileTransferRemoved:(id)arg1;
- (void)_handleFileTransferStopped:(id)arg1;
- (void)_handleSendFileTransfer:(id)arg1;
- (id)_messageStoreSharedInstance;
- (void)_postUpdated:(id)arg1;
- (id)_progressForTransferGUID:(id)arg1 allowCreate:(bool)arg2 path:(id)arg3;
- (void)_removeActiveTransfer:(id)arg1;
- (void)_removeTransferringTransfer:(id)arg1;
- (id)_removeWrapperForTransfer:(id)arg1;
- (bool)_shouldDownloadAssetForTransfer:(id)arg1 forMessageItem:(id)arg2;
- (bool)_shouldUpdateSyncStats:(id)arg1 originalSyncState:(long long)arg2;
- (id)_statsCollector;
- (id)_temporaryPathForGUID:(id)arg1 filename:(id)arg2;
- (void)_transferTimerTick:(id)arg1;
- (void)_updateContextStamp;
- (void)_updateSyncStatsForAttachments:(id)arg1 incrementTotalAttachmentCount:(unsigned long long)arg2;
- (bool)_usingStingRay;
- (void)acceptTransfer:(id)arg1 path:(id)arg2;
- (void)addDefaultGatekeeperPropertiesToDirectory:(id)arg1;
- (void)addTransfer:(id)arg1 forGUID:(id)arg2;
- (void)archiveFileTransfer:(id)arg1;
- (void)assignTransfer:(id)arg1 toAccount:(id)arg2 otherPerson:(id)arg3;
- (void)broadcastTransfersWithGUIDs:(id)arg1 atLocalPaths:(id)arg2;
- (id)contextStamp;
- (void)dealloc;
- (void)endTransfer:(id)arg1;
- (void)endTransfer:(id)arg1 overrideFinalFileName:(id)arg2;
- (void)failTransfer:(id)arg1 error:(id)arg2;
- (void)failTransfer:(id)arg1 reason:(long long)arg2;
- (void)failTransferPreviewGeneration:(id)arg1;
- (void)fileCopierDidFinish:(id)arg1;
- (void)fileCopierDidStart:(id)arg1;
- (id)guidForNewIncomingTransferWithFilename:(id)arg1 isDirectory:(bool)arg2 totalBytes:(unsigned long long)arg3 hfsType:(unsigned int)arg4 hfsCreator:(unsigned int)arg5 hfsFlags:(unsigned short)arg6;
- (id)guidForNewOutgoingTransferWithFilename:(id)arg1 isDirectory:(bool)arg2 totalBytes:(unsigned long long)arg3 hfsType:(unsigned int)arg4 hfsCreator:(unsigned int)arg5 hfsFlags:(unsigned short)arg6;
- (id)guidForNewOutgoingTransferWithLocalURL:(id)arg1;
- (id)guidsForStoredAttachmentPayloadData:(id)arg1 messageGUID:(id)arg2;
- (bool)hasActiveFileTransfers;
- (id)init;
- (bool)initiateHighQualityDownload:(id)arg1;
- (bool)isSafeToDeleteTransferAttachmentPath:(id)arg1;
- (void)makeNewIncomingTransferWithGUID:(id)arg1 filename:(id)arg2 isDirectory:(bool)arg3 totalBytes:(unsigned long long)arg4 hfsType:(unsigned int)arg5 hfsCreator:(unsigned int)arg6 hfsFlags:(unsigned short)arg7;
- (void)makeNewOutgoingTransferWithGUID:(id)arg1 filename:(id)arg2 isDirectory:(bool)arg3 totalBytes:(unsigned long long)arg4 hfsType:(unsigned int)arg5 hfsCreator:(unsigned int)arg6 hfsFlags:(unsigned short)arg7;
- (bool)markAttachment:(id)arg1 sender:(id)arg2 recipients:(id)arg3 isIncoming:(bool)arg4;
- (void)markTransferAsNotSyncSuccessFullyUsingCKRecord:(id)arg1;
- (void)markTransferAsNotSyncSuccessfullyDownloadedFromCloud:(id)arg1;
- (bool)populateLocalURLsForTransfer:(id)arg1 fromCKRecord:(id)arg2;
- (void)registerStandaloneTransfer:(id)arg1;
- (void)removeTransferForGUID:(id)arg1;
- (void)removeUnassignedTransfers;
- (void)resetSyncStateForRecord:(id)arg1 toState:(long long)arg2;
- (void)resetTransfer:(id)arg1 andPostReason:(long long)arg2;
- (void)resetTransferAndPostError:(id)arg1 error:(id)arg2;
- (void)setContextStamp:(id)arg1;
- (void)startFinalizingTransfer:(id)arg1;
- (void)startTransfer:(id)arg1;
- (id)transferForGUID:(id)arg1;
- (void)updateTransfer:(id)arg1;
- (void)updateTransfer:(id)arg1 currentBytes:(unsigned long long)arg2 totalBytes:(unsigned long long)arg3;
- (void)updateTransferAsWaitingForAccept:(id)arg1;
- (id)updateTransfersWithCKRecord:(id)arg1 recordWasFetched:(bool)arg2 downloadAsset:(bool*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
