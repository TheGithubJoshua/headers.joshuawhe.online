<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMDCKSyncState.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMDaemonCore.framework/IMDCKSyncState.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMDaemonCore.framework/IMDaemonCore (1000)
 */

@interface IMDCKSyncState : NSObject <IMKeyValueCollectionDelegate> {
    <IMDCKSyncStateDelegate> * _delegate;
    IMKeyValueCollection * _storage;
}

@property (nonatomic) long long accountStatus;
@property (nonatomic, copy) NSDictionary *analyticSyncDatesDictionary;
@property (nonatomic) bool createdChatZone;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <IMDCKSyncStateDelegate> *delegate;
@property (nonatomic) bool deletedZones;
@property (readonly, copy) NSString *description;
@property (getter=isDisablingDevices, nonatomic) bool disablingDevices;
@property (getter=isEligibleForTruthZone, nonatomic) bool eligibleForTruthZone;
@property (nonatomic, copy) NSDate *exitDate;
@property (getter=isFeatureEnabled, nonatomic) bool featureEnabled;
@property (readonly) unsigned long long hash;
@property (getter=isInExitState, nonatomic) bool inExitState;
@property (nonatomic, readonly) IMKeyValueCollection *keyValueCollection;
@property (nonatomic, copy) NSDate *lastSyncDate;
@property (getter=isRemovedFromBackup, nonatomic) bool removedFromBackup;
@property (getter=isStartingEnabledSettingChange, nonatomic) bool startingEnabledSettingChange;
@property (getter=isStartingInitialSyncSetByCloudKitHooks, nonatomic) bool startingInitialSyncSetByCloudKitHooks;
@property (getter=isStartingPeriodicSyncSetByCloudKitHooks, nonatomic) bool startingPeriodicSyncSetByCloudKitHooks;
@property (readonly) Class superclass;
@property (nonatomic) long long syncControllerRecordType;
@property (nonatomic) unsigned long long syncControllerSyncState;
@property (nonatomic) long long syncControllerSyncType;
@property (nonatomic, readonly) NSArray *syncErrors;
@property (getter=isSyncing, nonatomic) bool syncing;
@property (getter=isSyncingEnabled, nonatomic) bool syncingEnabled;
@property (getter=isSyncingPaused, nonatomic) bool syncingPaused;

+ (id)logHandle;
+ (void)removeBuildObjectsFromDict:(id)arg1;

- (void).cxx_destruct;
- (id)_describeErrors:(id)arg1;
- (void)_finishBatchChange;
- (void)_removeObjectForKey:(id)arg1 forDictionary:(id)arg2;
- (void)_setObject:(id)arg1 forKey:(id)arg2 forDictionary:(id)arg3 shouldSetBuild:(bool)arg4;
- (void)_setStartingSync;
- (bool)_shouldReportNewUserIfCreatedChatZones:(bool)arg1 deletedZones:(bool)arg2;
- (void)_startBatchChange;
- (long long)accountStatus;
- (void)addSyncError:(id)arg1;
- (id)analyticSyncDatesDictionary;
- (void)broadcastSyncState;
- (void)clearLocalCloudKitSyncState;
- (void)clearSyncErrors;
- (bool)createdChatZone;
- (id)delegate;
- (bool)deletedZones;
- (id)describeErrors;
- (id)description;
- (id)exitDate;
- (id)getAnalyticSyncDatesObjectForKey:(id)arg1;
- (id)init;
- (id)initWithKeyValueCollection:(id)arg1;
- (bool)isDisablingDevices;
- (bool)isEligibleForTruthZone;
- (bool)isFeatureEnabled;
- (bool)isInExitState;
- (bool)isRemovedFromBackup;
- (bool)isStartingEnabledSettingChange;
- (bool)isStartingInitialSyncSetByCloudKitHooks;
- (bool)isStartingPeriodicSyncSetByCloudKitHooks;
- (bool)isSyncing;
- (bool)isSyncingEnabled;
- (bool)isSyncingPaused;
- (id)keyValueCollection;
- (void)keyValueCollection:(id)arg1 didUpdateValues:(id)arg2;
- (void)keyValueCollection:(id)arg1 willUpdateValues:(id)arg2;
- (id)lastSyncDate;
- (id)logHandle;
- (void)removeObjectFromAnalyticSyncDatesDictionaryForKey:(id)arg1;
- (id)serializedRepresentation;
- (void)setAccountStatus:(long long)arg1;
- (void)setAnalyticSyncDatesDictionary:(id)arg1;
- (void)setAnalyticSyncDatesDictionaryObject:(id)arg1 forKey:(id)arg2 shouldOverrideIfExists:(bool)arg3;
- (void)setCreatedChatZone:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeletedZones:(bool)arg1;
- (void)setDisablingDevices:(bool)arg1;
- (void)setEligibleForTruthZone:(bool)arg1;
- (void)setErrorToAccountNeedsRepair;
- (void)setErrorToKeyRollingError;
- (void)setExitDate:(id)arg1;
- (void)setFeatureEnabled:(bool)arg1;
- (void)setInExitState:(bool)arg1;
- (void)setLastSyncDate:(id)arg1;
- (void)setRemovedFromBackup:(bool)arg1;
- (void)setStartingEnabledSettingChange:(bool)arg1;
- (void)setStartingInitialSyncSetByCloudKitHooks:(bool)arg1;
- (void)setStartingInitialSyncWithRecordType:(long long)arg1;
- (void)setStartingPeriodicSyncSetByCloudKitHooks:(bool)arg1;
- (void)setStartingPeriodicSyncWithRecordType:(long long)arg1;
- (void)setSyncControllerRecordType:(long long)arg1;
- (void)setSyncControllerSyncState:(unsigned long long)arg1;
- (void)setSyncControllerSyncState:(unsigned long long)arg1 withRecordType:(long long)arg2;
- (void)setSyncControllerSyncType:(long long)arg1;
- (void)setSyncing:(bool)arg1;
- (void)setSyncingEnabled:(bool)arg1;
- (void)setSyncingFinished;
- (void)setSyncingPaused:(bool)arg1;
- (long long)syncControllerRecordType;
- (unsigned long long)syncControllerSyncState;
- (long long)syncControllerSyncType;
- (id)syncErrors;
- (id)syncReportDictionary;
- (id)syncReportDictionaryForAttempt:(unsigned long long)arg1 withSuccess:(bool)arg2;
- (id)syncUserType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
