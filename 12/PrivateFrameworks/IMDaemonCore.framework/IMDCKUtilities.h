<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMDCKUtilities.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMDaemonCore.framework/IMDCKUtilities.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMDaemonCore.framework/IMDaemonCore (1000)
 */

@interface IMDCKUtilities : NSObject <IMDCKSyncStateDelegate> {
    FTDeviceSupport * _deviceSupport;
    bool  _didKeyRollPendingCheck;
    IMDefaults * _imDefaults;
    IMLockdownManager * _lockdownManager;
    IDSServerBag * _serverBag;
    IMDCKSyncState * _syncState;
    bool  _useDeprecatedApi;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDeviceCharging, nonatomic, readonly) bool deviceCharging;
@property (getter=isDeviceOnWifi, nonatomic, readonly) bool deviceOnWifi;
@property (nonatomic, retain) FTDeviceSupport *deviceSupport;
@property (nonatomic) bool didKeyRollPendingCheck;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) IMDefaults *imDefaults;
@property (nonatomic, readonly) bool isInCloudKitDemoMode;
@property (nonatomic, readonly) bool isSyncingPaused;
@property (getter=isKeyRollPending, nonatomic, readonly) bool keyRollPending;
@property (nonatomic, retain) IMLockdownManager *lockdownManager;
@property (nonatomic, retain) IDSServerBag *serverBag;
@property (readonly) Class superclass;
@property (nonatomic, readonly) IMDCKSyncState *syncState;
@property (nonatomic) bool useDeprecatedApi;

+ (id)im_AKSecurityLevelKey;
+ (id)logHandle;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (bool)CKPartialError:(id)arg1 hasErrorCode:(id)arg2;
- (bool)CKPartialError:(id)arg1 onlyHasErrorCodes:(id)arg2;
- (bool)CKPartialErrorOnlyHasQuotaExceededError:(id)arg1;
- (bool)_accountInfoWithCompletionHandler:(id /* block */)arg1;
- (id)_accountManager;
- (bool)_accountNeedsRepairOverride;
- (id)_accountStore;
- (bool)_allowDestructiveMOCFeaturesBasedOnDSID;
- (void)_askToTapToRadarWithString:(id)arg1 internalOnly:(bool)arg2;
- (id)_authenticationController;
- (bool)_checkEligibilityWithAccountInfo:(id)arg1;
- (void)_checkEligibilityWithLoggedInAccountWithCompletion:(id /* block */)arg1;
- (bool)_checkIfEnabledByServerBagOrDefault:(id)arg1;
- (id)_createAccountError:(id)arg1;
- (bool)_deviceActive;
- (id)_errorsFromPartialError:(id)arg1;
- (void)_fetchPrimaryAccountWithCompletion:(id /* block */)arg1;
- (id)_getKeepMessagesValue;
- (bool)_isCKErrorPartialFailure:(id)arg1;
- (bool)_isInExitState;
- (bool)_isLogDumpAllowed;
- (bool)_isSyncingPausedOverride;
- (long long)_mininimumServerBagClientValue;
- (unsigned long long)_mocEnabledStateFromAccountStatus:(long long)arg1;
- (bool)_mocFeatureEnabled;
- (id)_personIdFromAccount:(id)arg1;
- (id)_primaryiCloudAccount;
- (id)_primaryiCloudAccountAltDSID;
- (unsigned long long)_primaryiCloudAccountSecurityLevel;
- (void)_resetKeepMessagesSettingandBroadcastToAllDevices;
- (bool)_serverAllowsCacheDelete;
- (bool)_serverAllowsRemovalFromBackUp;
- (bool)_serverAllowsSync;
- (void)_setEligibleToToggleMiCSwitch:(bool)arg1;
- (void)_setiCloudSettingsSwitchEnabled:(bool)arg1;
- (bool)_shouldDisplayPopUpForResettingKeepMessages;
- (bool)_shouldiCloudSwitchBeEnabled;
- (void)_showCKLogNotificationWithCompletion:(id /* block */)arg1;
- (id)_truthContainer;
- (id)_truthDatabase;
- (bool)acceptableErrorCodeWhileDeleting:(id)arg1;
- (id)accountDSID:(id)arg1;
- (bool)accountIsVerifiedForMOCAndSafeForCacheDelete;
- (id)accountWithDSID:(id)arg1;
- (id)backupController;
- (void)broadcastCloudKitState;
- (void)broadcastCloudKitStateAfterClearingErrors;
- (void)broadcastCloudKitStateAfterFetchingAccountStatus;
- (bool)cacheDeleteEnabled;
- (void)checkCloudkitEnabledStatusAndToggleiCloudSwitchIfNeeded;
- (void)checkiCloudQuota:(id /* block */)arg1;
- (id)ckStatisticCalculations;
- (bool)cloudKitSyncDownloadAssetsOnly;
- (bool)cloudKitSyncingEnabled;
- (id)deviceActiveString;
- (id)deviceConditions;
- (bool)deviceConditionsAllowPeriodicSync;
- (id)deviceSupport;
- (bool)didKeyRollPendingCheck;
- (void)disableAllDevicesWithCompletion:(id /* block */)arg1;
- (void)downgradingFromHSA2AndDisablingMOC;
- (id)dsid;
- (void)eligibleForTruthZoneWithCompletion:(id /* block */)arg1;
- (bool)enableAttachmentMetricCollection;
- (void)enableMOCIfNeeded;
- (bool)errorIndicateDeviceDoesNotHaveKeysToSync:(id)arg1;
- (bool)errorIndicatesChatZoneCreationFailed:(id)arg1;
- (bool)errorIndicatesDeviceConditionsDontAllowSync:(id)arg1;
- (bool)errorIndicatesIdentityWasLost:(id)arg1;
- (bool)errorIndicatesQuotaExceeded:(id)arg1;
- (bool)errorIndicatesUserDeletedZone:(id)arg1;
- (bool)errorIndicatesZoneNotCreated:(id)arg1;
- (void)evalToggleiCloudSettingsSwitch;
- (id)exitManager;
- (id)extractRecordIDsDeletedFromCKPartialError:(id)arg1;
- (id)extractServerRecordFromCKServerErrorRecordChanged:(id)arg1;
- (void)fetchCloudKitAccountStatusAndCheckForAccountNeedsRepairWithCompletion:(id /* block */)arg1;
- (void)fetchCloudKitAccountStatusWithCompletion:(id /* block */)arg1;
- (void)fetchLocalAccountSecurityLevel:(id /* block */)arg1;
- (void)fetchMOCEnabledStateWithCompletionBlock:(id /* block */)arg1;
- (void)fetchSecurityLevelAndUpdateMiCSwitchEligibility;
- (void)fetchSecurityLevelAndUpdateMiCSwitchEligibilityIfNeededOnImagentLaunch;
- (void)fetchSecurityLevelForAccount:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)fetchiCloudAccountPersonID:(id /* block */)arg1;
- (id)findRootCause:(id)arg1;
- (bool)iCloudAccountMatchesiMessageAccount;
- (id)imDefaults;
- (id)init;
- (id)initWithServerBag:(id)arg1 lockDownmanager:(id)arg2 deviceSupport:(id)arg3 imDefaults:(id)arg4;
- (bool)isCKPartialError:(id)arg1;
- (bool)isDeviceCharging;
- (bool)isDeviceOnWifi;
- (void)isFirstSyncWithCompletion:(id /* block */)arg1;
- (bool)isInCloudKitDemoMode;
- (bool)isKeyRollPending;
- (bool)isLocalCachedSaltPresent;
- (bool)isRecoverableCloudKitError:(id)arg1 withRetryInterval:(id*)arg2;
- (bool)isSyncingPaused;
- (void)keyRollPendingStateDidChange;
- (id)lastDeviceBackUpDate;
- (id)lockdownManager;
- (void)logCloudKitSyncToPowerLogForSyncType:(long long)arg1 isCoreDuetSync:(bool)arg2 didCompleteChatSync:(bool)arg3 didSucceedSyncingChats:(bool)arg4 didCompleteMessageSync:(bool)arg5 didSucceedSyncingMessages:(bool)arg6 didCompleteAttachmentSync:(bool)arg7 didSucceedSyncingAttachments:(bool)arg8 syncAttemptCount:(unsigned long long)arg9;
- (void)logCloudKitSyncToPowerLogForSyncType:(long long)arg1 isCoreDuetSync:(bool)arg2 didStartSync:(bool)arg3 didFinishSync:(bool)arg4 didSucceedSyncing:(bool)arg5;
- (id)logCollectorAddress;
- (void)logDumpAndSendMessageTo:(id)arg1 forHours:(int)arg2 reason:(id)arg3;
- (void)logDumpAndSendMessageTo:(id)arg1 forHours:(int)arg2 reason:(id)arg3 isInitialSync:(bool)arg4 requirePreviousPrompt:(bool)arg5 willSendBlock:(id /* block */)arg6;
- (void)logDumpAndSendMessageTo:(id)arg1 forHours:(int)arg2 reason:(id)arg3 requirePreviousPrompt:(bool)arg4 willSendBlock:(id /* block */)arg5;
- (bool)logDumpIsNecessaryAfterSync;
- (id)logHandle;
- (void)logToPowerLogForLogDumpGUID:(id)arg1 logDumpCompleted:(bool)arg2 logDumpSucceeded:(bool)arg3 logDumpSendingCompleted:(bool)arg4 logDumpSendingSucceeded:(bool)arg5 reason:(id)arg6;
- (unsigned long long)messageDatabaseSize;
- (id)metricForPCSReportManateeStatusWithReason:(id)arg1;
- (id)newfilteredArrayRemovingCKRecordDupes:(id)arg1;
- (id)newfilteredArrayRemovingCKRecordIDDupes:(id)arg1;
- (void)noteAllSyncedItemsPriorToSync;
- (long long)overrideNumberOfChatsToFetch;
- (long long)overrideNumberOfChatsToWrite;
- (void)postSyncStateToCloudKit:(id)arg1;
- (void)postSyncStateToCloudKit:(id)arg1 legacyOnly:(bool)arg2;
- (void)postSyncStateToCloudKit:(id)arg1 useManatee:(bool)arg2;
- (void)postSyncStateToCloudKit:(id)arg1 useManatee:(bool)arg2 legacyOnly:(bool)arg3;
- (void)primaryAccountHasiCloudBackupEnabledWithCompletion:(id /* block */)arg1;
- (id)recordNameForMessageWithGUID:(id)arg1 usingSalt:(id)arg2;
- (bool)removeFromBackUpAllowed;
- (void)reportCompletionForSyncType:(long long)arg1 isCoreDuetSync:(bool)arg2 onAttempt:(unsigned long long)arg3 wasSuccessful:(bool)arg4;
- (void)reportErrorForSyncType:(long long)arg1 syncStep:(id)arg2 isRecoverable:(bool)arg3 error:(id)arg4;
- (void)reportMOCDebuggingErrorWithString:(id)arg1 internalOnly:(bool)arg2;
- (void)reportMOCDebuggingErrorWithString:(id)arg1 internalOnly:(bool)arg2 initialSync:(bool)arg3;
- (void)reportMOCDebuggingErrorWithString:(id)arg1 internalOnly:(bool)arg2 initialSync:(bool)arg3 sendToHandle:(id)arg4;
- (void)reportMOCDebuggingErrorWithString:(id)arg1 internalOnly:(bool)arg2 initialSync:(bool)arg3 sendToHandle:(id)arg4 reasonString:(id)arg5;
- (void)reportZoneCreation:(id)arg1;
- (void)resetLastSyncDate;
- (bool)serverAllowsAnalyticDetailsSubmission;
- (bool)serverAllowsAnalyticSubmission;
- (bool)serverAllowsMetricSubmission;
- (id)serverBag;
- (void)setCloudKitSyncingEnabled:(bool)arg1;
- (void)setDeviceSupport:(id)arg1;
- (void)setDidKeyRollPendingCheck:(bool)arg1;
- (void)setImDefaults:(id)arg1;
- (void)setLockdownManager:(id)arg1;
- (void)setServerBag:(id)arg1;
- (void)setUseDeprecatedApi:(bool)arg1;
- (bool)shouldCollectDailyLogDump;
- (bool)shouldCollectDailyLogDumpForRestoreFailures;
- (bool)shouldForceArchivedMessagesSync;
- (bool)shouldKickOffWriteForSyncType:(long long)arg1;
- (bool)shouldLogDumpOnCloudKitError;
- (bool)shouldPresentTTROnCloudKitError;
- (bool)shouldRepairAccountWithDeviceAccountSecurityLevel:(unsigned long long)arg1 serverAccountStatus:(long long)arg2;
- (bool)shouldSyncToSRContainer;
- (bool)shouldUseDevContainer;
- (void)submitPCSReportManateeStatuMetricWithPrefix:(id)arg1 andReason:(id)arg2;
- (id)syncFailureMetricString:(id)arg1 isRecoverable:(bool)arg2 error:(id)arg3;
- (id)syncState;
- (void)syncStateWillUpdate:(id)arg1;
- (bool)useDeprecatedApi;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
