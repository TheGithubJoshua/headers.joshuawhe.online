<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMDCKSyncController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMDaemonCore.framework/IMDCKSyncController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMDaemonCore.framework/IMDaemonCore (1000)
 */

@interface IMDCKSyncController : IMDCKAbstractSyncController <IMDCKAbstractSyncControllerDelegate, IMDXPCEventStreamHandlerDelegate, IMSystemMonitorListener> {
    CKFetchRecordZonesOperation * _cloudKitMetricsFetchOp;
    long long  _initialSyncAttempts;
    NSDate * _lastLogDumpDate;
    NSDate * _lastRestoreFailureLogDumpDate;
    NSTimer * _longRunningSyncTimer;
    IMTimer * _nightlySyncTimer;
    NSTimer * _reloadTimer;
    bool  _shouldReloadConversations;
    NSDate * _syncStartDate;
}

@property (nonatomic, retain) CKFetchRecordZonesOperation *cloudKitMetricsFetchOp;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long initialSyncAttempts;
@property (nonatomic, retain) NSDate *lastLogDumpDate;
@property (nonatomic, retain) NSDate *lastRestoreFailureLogDumpDate;
@property (nonatomic, retain) NSTimer *longRunningSyncTimer;
@property (nonatomic, retain) IMTimer *nightlySyncTimer;
@property (retain) NSTimer *reloadTimer;
@property bool shouldReloadConversations;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSDate *syncStartDate;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (double)_IMAHDAgentFallbackIntervalInSeconds;
- (void)_accountDidChange:(id)arg1;
- (bool)_accountHasMultipleDevices;
- (void)_addDatesDefaultsIfNeededToDictionary:(id)arg1;
- (void)_addDatesDefaultsIfNeededToDictionary:(id)arg1 keys:(id)arg2;
- (void)_autoBugCaptureWithSubType:(id)arg1 debugDescription:(id)arg2;
- (void)_beginExitStateCleanupIfNeededWithActivity:(id)arg1 useNonHSA2ManateeDatabase:(bool)arg2;
- (void)_beginPeriodicSyncWithActivity:(id)arg1 deviceConditionsToCheck:(unsigned long long)arg2 attemptCount:(unsigned long long)arg3;
- (void)_beginPeriodicSyncWithActivity:(id)arg1 deviceConditionsToCheck:(unsigned long long)arg2 attemptCount:(unsigned long long)arg3 useStingRay:(bool)arg4 syncChatsCompletionBlock:(id /* block */)arg5;
- (void)_callSyncWithCompletion:(id /* block */)arg1 activity:(id)arg2;
- (bool)_chatSyncedRecently;
- (bool)_completedPeriodicSyncSinceFirstFullSyncForLastSyncDate:(id)arg1 firstFullSyncCompletedDate:(id)arg2;
- (unsigned long long)_currentHour;
- (id)_dailySyncStateDictionary;
- (id)_dateForNext24LogDumpAtHour:(long long)arg1 timeNow:(id)arg2 dumpNow:(bool*)arg3;
- (void)_dealWithEncryptionKeyLostErrorIfApplicable:(id)arg1;
- (void)_deleteRestoreFailuresDirectory;
- (void)_dispatchNotification:(id)arg1 withBlock:(id /* block */)arg2;
- (bool)_errorIndicatesDeviceNotGoodForSync:(id)arg1;
- (bool)_hasDumpedLogsInPastHour;
- (bool)_hasDumpedRestoreFailureLogsInPastHour;
- (void)_ifCloudKitAbleToSyncIsFullSync:(bool)arg1 activity:(id)arg2 callBlock:(id /* block */)arg3;
- (bool)_isSyncingToStingRay;
- (void)_kickOffNightlyPeriodicSyncIfApplicable;
- (void)_logIMAutomaticHistorySyncDidNotOccurMetricsUnderFirstUnlock:(bool)arg1 isSyncing:(bool)arg2 deviceConditionsAllowSync:(bool)arg3 syncNotCompletedRecently:(bool)arg4;
- (long long)_manualSyncAttemptCount;
- (unsigned long long)_maxTimeToDeferInSeconds;
- (double)_minimumChatComingOnlineSyncInterval;
- (void)_nightlySyncTimerFired;
- (void)_noteDownSyncStartedWithIsPeriodicSync:(bool)arg1;
- (void)_noteMeticsForSyncEndedWithSuccces:(bool)arg1;
- (void)_noteMetricsForSyncStartFrom:(id)arg1 fullSync:(bool)arg2;
- (void)_noteSyncEnded;
- (void)_nukeCKData;
- (void)_performLastCompleteSyncedDBDateMetricForSuccessfulSync;
- (void)_performLastSyncDateMetricForSuccessfulSync;
- (long long)_periodicSyncAttemptCount;
- (id)_periodicSyncStateDictionary;
- (void)_postMetricsToCloudKitOnAutomaticHistoryDeletionAgentLaunch;
- (id)_recordManager;
- (void)_refreshUIWhileSyncing;
- (void)_reloadChatRegistryOnMainThread;
- (id)_retryError;
- (bool)_serverAllowsUIRefreshTimerWhileSyncing;
- (bool)_serverAllowsUIRefreshWhileSyncing;
- (bool)_serverDeniesDailySyncStateAnalytics;
- (bool)_serverDeniesPeriodicSyncAnalytics;
- (bool)_serverDoesNotAllowComingBackOnlineChatSync;
- (bool)_serverDoesNotSingleDeviceLimitation;
- (id)_sharedDatabaseManager;
- (void)_submitCloudKitAnalyticWithOperationGroupName:(id)arg1 analyticDictionary:(id)arg2;
- (void)_syncChatsWithActivity:(id)arg1;
- (void)_syncDeletesOrClearTombstones;
- (bool)_syncNotCompletedRecently;
- (bool)_withinAnHourOfLogDumpHour;
- (void)_writeDownSyncDateUseManatee:(bool)arg1;
- (id)attachmentSyncController;
- (id)backupController;
- (void)beginChatSyncPeriodic:(bool)arg1 activity:(id)arg2;
- (void)beginComingBackOnlineSync;
- (void)beginFullSyncPeriodic:(bool)arg1 deviceConditionsToCheck:(unsigned long long)arg2 activity:(id)arg3;
- (void)beginInitialSync;
- (void)beginInitialSyncAttemptCount:(unsigned long long)arg1;
- (id)chatSyncController;
- (void)clearAnalyticDefaultsAndLocalSyncState;
- (void)clearCKRelatedDefaults;
- (void)clearLocalCloudKitSyncState;
- (id)cloudKitMetricsFetchOp;
- (void)collectLogsIfNeeded;
- (void)dealloc;
- (bool)enforceAccountsMatchForMocAndShowDialogIfNeeded;
- (void)eventStreamHandler:(id)arg1 didReceiveEventWithName:(id)arg2 userInfo:(id)arg3;
- (id)exitManager;
- (void)handleAKUserInfoChangedNotification:(id)arg1;
- (id)init;
- (id)initialAttachmentSyncController;
- (id)initialMessageSyncController;
- (long long)initialSyncAttempts;
- (bool)isSyncing;
- (void)kickOffCloudKitSyncIfNeededOnImagentLaunch;
- (void)kickOffEagerSyncIfApplicable;
- (id)lastLogDumpDate;
- (id)lastRestoreFailureLogDumpDate;
- (bool)logCloudKitAnalytics;
- (id)longRunningSyncTimer;
- (id)messageSyncController;
- (id)nightlySyncTimer;
- (void)performInitialSyncOnFirstConnectionOfImagentIfNeeded;
- (void)performMetricForSuccessfulSync;
- (void)performOneTimeAccountUpgradeCheckIfNeeded;
- (id)rampManager;
- (void)recordMetricIsCloudKitEnabled;
- (void)refreshUIIfApplicableWithBatchCount:(unsigned long long)arg1;
- (void)registerForAccountNotifications;
- (double)reloadTimeInterval;
- (id)reloadTimer;
- (void)sendRestoreFailuresLogDumps;
- (void)sendRestoreFailuresLogDumpsIfNeeded;
- (void)setCloudKitMetricsFetchOp:(id)arg1;
- (void)setInitialSyncAttempts:(long long)arg1;
- (void)setLastLogDumpDate:(id)arg1;
- (void)setLastRestoreFailureLogDumpDate:(id)arg1;
- (void)setLongRunningSyncTimer:(id)arg1;
- (void)setNightlySyncTimer:(id)arg1;
- (void)setReloadTimer:(id)arg1;
- (void)setShouldReloadConversations:(bool)arg1;
- (void)setSyncStartDate:(id)arg1;
- (bool)shouldReloadConversations;
- (id)statsCollector;
- (void)syncAttachmentMetadataFirstSyncWithActivity:(id)arg1 deviceConditionsToCheck:(unsigned long long)arg2 completionBlock:(id /* block */)arg3;
- (void)syncChatsWithMessageContext:(id)arg1;
- (void)syncController:(id)arg1 syncBatchCompleted:(unsigned long long)arg2;
- (long long)syncControllerRecordType;
- (void)syncDeletesToCloudKitWithCompletion:(id /* block */)arg1;
- (id)syncStartDate;
- (id)syncStateDebuggingInfo:(id)arg1;
- (void)systemDidUnlock;
- (void)updateSecurityLevelDowngradedIfNeeded:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
