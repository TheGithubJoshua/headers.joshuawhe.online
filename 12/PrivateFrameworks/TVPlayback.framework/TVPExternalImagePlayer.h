<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVPExternalImagePlayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVPlayback.framework/TVPExternalImagePlayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback (1)
 */

@interface TVPExternalImagePlayer : NSObject {
    UIImage * _currentImage;
    double  _currentImageTime;
    CADisplayLink * _displayLink;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _elapsedTime;
    id /* block */  _elapsedTimeUpdateBlock;
    NSMutableArray * _imageInfosBeingLoaded;
    double  _imageInterval;
    TVPExternalImageLoader * _imageLoader;
    id /* block */  _imageUpdateBlock;
    NSObject<TVPMediaItem> * _mediaItem;
    NSDate * _playbackDate;
    double  _previousTimestamp;
    double  _rate;
    NSDate * _referenceDate;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _referenceTime;
}

@property (nonatomic, retain) UIImage *currentImage;
@property (nonatomic) double currentImageTime;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } elapsedTime;
@property (nonatomic, copy) id /* block */ elapsedTimeUpdateBlock;
@property (nonatomic, retain) NSMutableArray *imageInfosBeingLoaded;
@property (nonatomic) double imageInterval;
@property (nonatomic, retain) TVPExternalImageLoader *imageLoader;
@property (nonatomic, copy) id /* block */ imageUpdateBlock;
@property (nonatomic, retain) NSObject<TVPMediaItem> *mediaItem;
@property (nonatomic, retain) NSDate *playbackDate;
@property (nonatomic) double previousTimestamp;
@property (nonatomic) double rate;
@property (nonatomic, retain) NSDate *referenceDate;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } referenceTime;

- (void).cxx_destruct;
- (void)_cancelAllImageLoads;
- (void)_cancelStaleImageLoadsForTime:(double)arg1;
- (void)_displayLinkTimerFired:(id)arg1;
- (void)_loadImagesIfNecessary;
- (double)_timeAfterRemovingInterstitials:(double)arg1;
- (void)_updateImageIntervalWithRate:(double)arg1;
- (id)currentImage;
- (double)currentImageTime;
- (id)displayLink;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })elapsedTime;
- (id /* block */)elapsedTimeUpdateBlock;
- (id)imageInfosBeingLoaded;
- (double)imageInterval;
- (id)imageLoader;
- (id /* block */)imageUpdateBlock;
- (id)initWithMediaItem:(id)arg1 referenceTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 forDate:(id)arg3;
- (void)invalidate;
- (id)mediaItem;
- (id)playbackDate;
- (double)previousTimestamp;
- (double)rate;
- (id)referenceDate;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })referenceTime;
- (void)setCurrentImage:(id)arg1;
- (void)setCurrentImageTime:(double)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setElapsedTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setElapsedTimeUpdateBlock:(id /* block */)arg1;
- (void)setImageInfosBeingLoaded:(id)arg1;
- (void)setImageInterval:(double)arg1;
- (void)setImageLoader:(id)arg1;
- (void)setImageUpdateBlock:(id /* block */)arg1;
- (void)setMediaItem:(id)arg1;
- (void)setPlaybackDate:(id)arg1;
- (void)setPreviousTimestamp:(double)arg1;
- (void)setRate:(double)arg1;
- (void)setReferenceDate:(id)arg1;
- (void)setReferenceTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
