<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TVPContentKeyRequest.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TVPlayback.framework/TVPContentKeyRequest.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TVPlayback.framework/TVPlayback (1)
 */

@interface TVPContentKeyRequest : NSObject {
    NSDictionary * _additionalRequestParams;
    NSDictionary * _additionalRequestParamsFromResponse;
    bool  _allowManualRenewal;
    AVContentKeyRequest * _avContentKeyRequest;
    NSString * _contentID;
    TVPContentKeySession * _contentKeySession;
    id  _context;
    NSError * _error;
    NSString * _eventReportingID;
    NSDate * _expirationDate;
    bool  _isLowValueKey;
    bool  _isRenewal;
    NSArray * _keyFormatVersions;
    NSURL * _keyIdentifier;
    NSData * _keyRequestData;
    NSData * _keyResponseData;
    NSData * _offlineKeyData;
    NSNumber * _playbackDuration;
    NSDate * _renewalDate;
    NSNumber * _renewalInterval;
    NSDate * _requestEndDate;
    unsigned long long  _requestID;
    NSDate * _requestStartDate;
    NSData * _secureInvalidationNonceData;
    NSDate * _serverRequestStartDate;
    long long  _type;
    bool  _wantsOfflineKeysIfPossible;
}

@property (nonatomic, retain) NSDictionary *additionalRequestParams;
@property (nonatomic, retain) NSDictionary *additionalRequestParamsFromResponse;
@property (nonatomic) bool allowManualRenewal;
@property (nonatomic, readonly) AVContentKeyRequest *avContentKeyRequest;
@property (nonatomic, retain) NSString *contentID;
@property (nonatomic) TVPContentKeySession *contentKeySession;
@property (nonatomic, retain) id context;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, readonly) NSString *eventReportingID;
@property (nonatomic, retain) NSDate *expirationDate;
@property (nonatomic, readonly) bool isCancelled;
@property (nonatomic) bool isLowValueKey;
@property (nonatomic) bool isRenewal;
@property (nonatomic, retain) NSArray *keyFormatVersions;
@property (nonatomic, retain) NSURL *keyIdentifier;
@property (nonatomic, retain) NSData *keyRequestData;
@property (nonatomic, retain) NSData *keyResponseData;
@property (nonatomic, retain) NSData *offlineKeyData;
@property (nonatomic, retain) NSNumber *playbackDuration;
@property (nonatomic, retain) NSDate *renewalDate;
@property (nonatomic, retain) NSNumber *renewalInterval;
@property (nonatomic, retain) NSDate *requestEndDate;
@property (nonatomic, readonly) unsigned long long requestID;
@property (nonatomic, retain) NSDate *requestStartDate;
@property (nonatomic, retain) NSData *secureInvalidationNonceData;
@property (nonatomic, retain) NSDate *serverRequestStartDate;
@property (nonatomic) long long type;
@property (nonatomic) bool wantsOfflineKeysIfPossible;

+ (void)initialize;
+ (id)secureInvalidationRequestForIdentifier:(id)arg1 offlineKeyData:(id)arg2 additionalRequestParams:(id)arg3 contentID:(id)arg4;

- (void).cxx_destruct;
- (id)additionalRequestParams;
- (id)additionalRequestParamsFromResponse;
- (bool)allowManualRenewal;
- (id)avContentKeyRequest;
- (id)contentID;
- (id)contentKeySession;
- (id)context;
- (id)description;
- (id)error;
- (id)eventReportingID;
- (id)expirationDate;
- (void)finish;
- (void)finishByRequestingOfflineKeysIfPossible;
- (id)initWithAVContentKeyRequest:(id)arg1;
- (bool)isCancelled;
- (bool)isLowValueKey;
- (bool)isRenewal;
- (id)keyFormatVersions;
- (id)keyIdentifier;
- (id)keyRequestData;
- (id)keyResponseData;
- (void)makeKeyRequestDataForCertificateData:(id)arg1 assetIDData:(id)arg2 completion:(id /* block */)arg3;
- (id)offlineKeyData;
- (id)offlineKeyDataFromServerKeyData:(id)arg1 error:(id*)arg2;
- (id)playbackDuration;
- (id)renewalDate;
- (id)renewalInterval;
- (id)requestEndDate;
- (unsigned long long)requestID;
- (id)requestStartDate;
- (id)secureInvalidationNonceData;
- (id)serverRequestStartDate;
- (void)setAdditionalRequestParams:(id)arg1;
- (void)setAdditionalRequestParamsFromResponse:(id)arg1;
- (void)setAllowManualRenewal:(bool)arg1;
- (void)setContentID:(id)arg1;
- (void)setContentKeySession:(id)arg1;
- (void)setContext:(id)arg1;
- (void)setError:(id)arg1;
- (void)setExpirationDate:(id)arg1;
- (void)setIsLowValueKey:(bool)arg1;
- (void)setIsRenewal:(bool)arg1;
- (void)setKeyFormatVersions:(id)arg1;
- (void)setKeyIdentifier:(id)arg1;
- (void)setKeyRequestData:(id)arg1;
- (void)setKeyResponseData:(id)arg1;
- (void)setOfflineKeyData:(id)arg1;
- (void)setPlaybackDuration:(id)arg1;
- (void)setRenewalDate:(id)arg1;
- (void)setRenewalInterval:(id)arg1;
- (void)setRequestEndDate:(id)arg1;
- (void)setRequestStartDate:(id)arg1;
- (void)setSecureInvalidationNonceData:(id)arg1;
- (void)setServerRequestStartDate:(id)arg1;
- (void)setType:(long long)arg1;
- (void)setWantsOfflineKeysIfPossible:(bool)arg1;
- (long long)type;
- (bool)wantsOfflineKeysIfPossible;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
