<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WFNetworkListController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WiFiKit.framework/WFNetworkListController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WiFiKit.framework/WiFiKit (1)
 */

@interface WFNetworkListController : NSObject <WFAirportViewControllerDelegate, WFGasQueryControllerDelegate, WFHotspotInterfaceDelegate, WFNetworkListDelegate, WFNetworkSettingsViewControllerDelegate, WFOtherNetworkViewControllerDelegate, WFScanManagerDelegate, WFSettingsControllerDelegate> {
    bool  _associating;
    <WFNetworkListRecord> * _associatingNetwork;
    bool  _associatingToOtherNetwork;
    NSOperationQueue * _backgroundQueue;
    bool  _canScanForPersonalHotspots;
    WFGasQueryController * _gasController;
    WFHealthManager * _healthManager;
    WFHealthIssueOverrides * _healthRecommendationOverrides;
    WFHotspotInterface * _hotspotInterface;
    WFInterface * _interface;
    WFKnownNetworksListController * _knownNetworksListController;
    WFLinkQuality * _latestLinkQuality;
    NSSet * _networks;
    WFOtherNetworkViewController * _otherNetworkVC;
    WFPasswordOperation * _passwordOperation;
    bool  _powered;
    bool  _refreshedKnownNetworks;
    bool  _scanForPersonalHotspots;
    WFScanManager * _scanManager;
    bool  _scannedForAssociation;
    bool  _scanning;
    WFSettingsController * _settingsController;
    WFWiFiStateMonitor * _stateMonitor;
    UIViewController<WFNetworkListing> * _viewController;
    bool  _viewControllerSupportsCurrentNetworkSubtitle;
}

@property (getter=isAssociating) bool associating;
@property (nonatomic, retain) <WFNetworkListRecord> *associatingNetwork;
@property bool associatingToOtherNetwork;
@property (nonatomic, retain) NSOperationQueue *backgroundQueue;
@property (nonatomic) bool canScanForPersonalHotspots;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) WFGasQueryController *gasController;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) WFHealthManager *healthManager;
@property (nonatomic, retain) WFHealthIssueOverrides *healthRecommendationOverrides;
@property (nonatomic, retain) WFHotspotInterface *hotspotInterface;
@property (nonatomic, retain) WFInterface *interface;
@property (nonatomic, retain) WFKnownNetworksListController *knownNetworksListController;
@property (nonatomic, retain) WFLinkQuality *latestLinkQuality;
@property (nonatomic, retain) NSSet *networks;
@property (nonatomic, retain) WFOtherNetworkViewController *otherNetworkVC;
@property (nonatomic, retain) WFPasswordOperation *passwordOperation;
@property (nonatomic) bool powered;
@property (nonatomic) bool refreshedKnownNetworks;
@property (nonatomic) bool scanForPersonalHotspots;
@property (nonatomic, retain) WFScanManager *scanManager;
@property (nonatomic) bool scannedForAssociation;
@property (getter=isScanning, nonatomic, readonly) bool scanning;
@property (nonatomic, retain) WFSettingsController *settingsController;
@property (nonatomic, retain) WFWiFiStateMonitor *stateMonitor;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIViewController<WFNetworkListing> *viewController;
@property (nonatomic) bool viewControllerSupportsCurrentNetworkSubtitle;

- (void).cxx_destruct;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_associateToEnterpriseNetwork:(id)arg1 profile:(id)arg2;
- (void)_associateToHS20Network:(id)arg1;
- (void)_associateToHotspotDevice:(id)arg1;
- (void)_associateToNetwork:(id)arg1 profile:(id)arg2;
- (void)_associateToScanRecord:(id)arg1 profile:(id)arg2;
- (void)_associateToUnconfiguredAccessory:(id)arg1;
- (void)_associateToUserSuppliedNetwork:(id)arg1;
- (void)_associationDidFinish:(bool)arg1 error:(id)arg2;
- (id)_associationFailureAlertControllerForNetwork:(id)arg1 error:(id)arg2;
- (void)_associationWillStart:(id)arg1;
- (bool)_canPromptForCarPlay;
- (bool)_canPromptForInstantHotspot;
- (bool)_canStartAssociationToNetwork:(id)arg1;
- (bool)_canStartAssociationToUserSuppliedNetwork:(id)arg1;
- (void)_clientRestartedNotification:(id)arg1;
- (bool)_disablePersonalHotspot;
- (void)_downloadHomeApp;
- (void)_handleAssociationError:(id)arg1 network:(id)arg2 profile:(id)arg3;
- (void)_handleAssociationResult:(bool)arg1 error:(id)arg2 network:(id)arg3 profile:(id)arg4;
- (id)_hotspotFailureAlertControllerForDevice:(id)arg1;
- (void)_interfaceDidBecomeAvailable:(id)arg1;
- (void)_ipStateDidChange:(id)arg1;
- (bool)_isActiveCarPlaySession;
- (void)_networkDidChangeNotification:(id)arg1;
- (void)_networkHealthIssuesDidChange:(id)arg1;
- (void)_networkLinkQualityDidChangeNotification:(id)arg1;
- (void)_networkRestrictionStateDidChange:(id)arg1;
- (void)_openHomeAppForNetwork:(id)arg1;
- (void)_pauseHotspotScanning;
- (void)_pauseScanning;
- (void)_powerDidChangeNotification:(id)arg1;
- (void)_powerStateChanged;
- (void)_presentAssociationFailureAlertController:(id)arg1;
- (void)_presentHotspotAssociationFailureAlertControllerForDevice:(id)arg1;
- (void)_promptCredentialsForNetwork:(id)arg1 profile:(id)arg2;
- (void)_promptForSecureWACDevice:(id)arg1;
- (void)_promptHomeDownload;
- (void)_promptHomeDownloadInProgress;
- (void)_promptOpenNetworkInHome:(id)arg1;
- (void)_promptToDisableCarPlayForNetworkName:(id)arg1 handler:(id /* block */)arg2;
- (void)_promptTrustCertificateForNetwork:(id)arg1 certificateChain:(id)arg2 profile:(id)arg3;
- (void)_registerForApplicationNotifications;
- (void)_resumeScanning;
- (void)_runUnconfiguredJoinOperationForNetwork:(id)arg1;
- (void)_saveLogsWithComment:(id)arg1 diagnosticsViewController:(id)arg2;
- (void)_scanNetworkForAssociation:(id)arg1 profile:(id)arg2;
- (void)_setupWithInterface:(id)arg1;
- (void)_setupWithoutInterface;
- (bool)_shouldPauseScanning;
- (void)_showOtherNetworkAlertForError:(long long)arg1 network:(id)arg2;
- (void)_showOtherNetworkAlertForMessage:(id)arg1;
- (void)_startHotspotScan;
- (void)_stateMonitorChangedStates:(long long)arg1 oldState:(long long)arg2;
- (void)_stopHotspotScan;
- (bool)_supportsWiFiPasswordSharing;
- (void)_updateCurrentNetworkIPState;
- (void)_updateHealthSubtitle;
- (void)_updatePowerState;
- (void)_updateViewControllerConnectedNetwork;
- (void)_updateViewControllerDisabled;
- (void)_updateViewControllerScanResults;
- (void)_updateViewsForNetworks:(id)arg1;
- (bool)_useLegacySettingsUI;
- (void)airportSettingsViewController:(id)arg1 setAskToJoinEnabled:(bool)arg2;
- (id)airportSettingsViewController:(id)arg1 unconfiguredAccessoriesGroupHeaderTitle:(id)arg2;
- (long long)airportSettingsViewControllerAskToJoinStatus:(id)arg1;
- (bool)airportSettingsViewControllerCurrentNetworkConnectionIsProblematic:(id)arg1;
- (void)airportSettingsViewControllerDidTapDataUsage:(id)arg1;
- (void)airportSettingsViewControllerDidTapDiagnosticsMode:(id)arg1;
- (void)airportSettingsViewControllerDidTapKnownNetworks:(id)arg1;
- (bool)airportSettingsViewControllerShouldShowDiagnosticsMode:(id)arg1;
- (bool)airportSettingsViewControllerShouldShowKnownNetworks:(id)arg1;
- (void)associateToEnterpriseNetwork:(id)arg1 profile:(id)arg2;
- (id)associatingNetwork;
- (bool)associatingToOtherNetwork;
- (id)backgroundQueue;
- (bool)canScanForPersonalHotspots;
- (void)dealloc;
- (id)gasController;
- (void)gasQueryController:(id)arg1 didUpdateProfiles:(id)arg2;
- (id)healthManager;
- (id)healthRecommendationOverrides;
- (id)healthRecommendations;
- (id)hotspotInterface;
- (void)hotspotInterfaceDidUpdateNetworks:(id)arg1;
- (id)init;
- (id)initWithViewController:(id)arg1;
- (id)interface;
- (bool)isAirPortSettings;
- (bool)isAssociating;
- (bool)isScanning;
- (id)knownNetworksListController;
- (id)latestLinkQuality;
- (void)networkListViewController:(id)arg1 didTapRecord:(id)arg2;
- (void)networkListViewController:(id)arg1 setWAPIEnabled:(bool)arg2;
- (void)networkListViewController:(id)arg1 showSettingsForNetwork:(id)arg2;
- (void)networkListViewController:(id)arg1 userDidChangePower:(bool)arg2;
- (bool)networkListViewControllerCurrentPowerState:(id)arg1;
- (void)networkListViewControllerDidAppear:(id)arg1;
- (void)networkListViewControllerDidDisappear:(id)arg1;
- (void)networkListViewControllerDidTapOtherNetwork:(id)arg1;
- (bool)networkListViewControllerNetworkRestrictionActive:(id)arg1;
- (bool)networkListViewControllerWAPIEnabled:(id)arg1;
- (void)networkSettingsViewControllerDidForgetNetwork:(id)arg1;
- (void)networkSettingsViewControllerDidJoinNetwork:(id)arg1;
- (void)networkSettingsViewControllerDidManageNetwork:(id)arg1;
- (void)networkSettingsViewControllerDidRenewLease:(id)arg1 sourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)networkSettingsViewControllerDidTapRecommendationLink:(id)arg1;
- (id)networks;
- (id)otherNetworkVC;
- (bool)otherNetworkViewController:(id)arg1 isValidPassword:(id)arg2;
- (void)otherNetworkViewControllerUserDidTapCancel:(id)arg1;
- (void)otherNetworkViewControllerUserDidTapJoin:(id)arg1;
- (id)passwordOperation;
- (bool)powered;
- (void)presentTrustCertificateForNetwork:(id)arg1 profile:(id)arg2;
- (void)pushDataUsageViewController;
- (bool)refreshedKnownNetworks;
- (void)removeScanCache;
- (bool)scanForPersonalHotspots;
- (id)scanManager;
- (void)scanManager:(id)arg1 didFindHotspotHelperNetworks:(id)arg2;
- (void)scanManager:(id)arg1 stateDidChange:(long long)arg2;
- (void)scanManager:(id)arg1 updatedPartialResults:(id)arg2;
- (void)scanManagerScanningDidFinish:(id)arg1 withResults:(id)arg2;
- (void)scanManagerScanningWillStart:(id)arg1;
- (bool)scanManagerShouldSupportHotspotHelper:(id)arg1;
- (bool)scanManagerShouldSupportUnfilteredScanning:(id)arg1;
- (bool)scannedForAssociation;
- (void)setAssociating:(bool)arg1;
- (void)setAssociatingNetwork:(id)arg1;
- (void)setAssociatingToOtherNetwork:(bool)arg1;
- (void)setBackgroundQueue:(id)arg1;
- (void)setCanScanForPersonalHotspots:(bool)arg1;
- (void)setGasController:(id)arg1;
- (void)setHealthManager:(id)arg1;
- (void)setHealthRecommendationOverrides:(id)arg1;
- (void)setHotspotInterface:(id)arg1;
- (void)setInterface:(id)arg1;
- (void)setKnownNetworksListController:(id)arg1;
- (void)setLatestLinkQuality:(id)arg1;
- (void)setNetworks:(id)arg1;
- (void)setOtherNetworkVC:(id)arg1;
- (void)setPasswordOperation:(id)arg1;
- (void)setPowered:(bool)arg1;
- (void)setRefreshedKnownNetworks:(bool)arg1;
- (void)setScanForPersonalHotspots:(bool)arg1;
- (void)setScanManager:(id)arg1;
- (void)setScannedForAssociation:(bool)arg1;
- (void)setSettingsController:(id)arg1;
- (void)setStateMonitor:(id)arg1;
- (void)setViewController:(id)arg1;
- (void)setViewControllerSupportsCurrentNetworkSubtitle:(bool)arg1;
- (id)settingsController;
- (bool)settingsControllerSupportsAirPortManagement:(id)arg1;
- (void)startScanning;
- (id)stateMonitor;
- (void)stopScanning;
- (id)viewController;
- (bool)viewControllerSupportsCurrentNetworkSubtitle;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
