<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WFInterface.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WiFiKit.framework/WFInterface.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WiFiKit.framework/WiFiKit (1)
 */

@interface WFInterface : NSObject {
    NSRunLoop * _callbackRunLoop;
    NSThread * _callbackThread;
    WFNetworkScanRecord * _currentNetwork;
    bool  _currentNetworkIsDirected;
    NSSet * _currentNetworkIssues;
    NSObject<OS_dispatch_queue> * _currentNetworkQueue;
    struct __WiFiDeviceClient { } * _device;
    NSArray * _deviceScanChannels;
    bool  _deviceSupportsHS20;
    bool  _deviceSupportsWAPI;
    NSOperationQueue * _gasQueue;
    bool  _hasNoGatewayIP;
    NSString * _interfaceName;
    WFIPMonitor * _ipMonitor;
    int  _ipState;
    bool  _ipv4SelfAssigned;
    NSOperationQueue * _joinQueue;
    bool  _monitoringEvents;
    NSNumber * _rssiThreshold;
    NSOperationQueue * _scanQueue;
    NSObject<OS_dispatch_queue> * _scanQueueDispatchQueue;
    bool  _scanning;
}

@property (nonatomic, retain) NSRunLoop *callbackRunLoop;
@property (nonatomic, retain) NSThread *callbackThread;
@property (nonatomic, retain) WFNetworkScanRecord *currentNetwork;
@property (nonatomic) bool currentNetworkIsDirected;
@property (nonatomic, retain) NSSet *currentNetworkIssues;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *currentNetworkQueue;
@property (nonatomic) struct __WiFiDeviceClient { }*device;
@property (nonatomic, retain) NSArray *deviceScanChannels;
@property bool deviceSupportsHS20;
@property bool deviceSupportsWAPI;
@property (nonatomic, retain) NSOperationQueue *gasQueue;
@property (nonatomic) bool hasNoGatewayIP;
@property (nonatomic, copy) NSString *interfaceName;
@property (nonatomic, retain) WFIPMonitor *ipMonitor;
@property (nonatomic) int ipState;
@property (nonatomic) bool ipv4SelfAssigned;
@property (nonatomic, retain) NSOperationQueue *joinQueue;
@property bool monitoringEvents;
@property (nonatomic) NSNumber *rssiThreshold;
@property (nonatomic, retain) NSOperationQueue *scanQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *scanQueueDispatchQueue;
@property bool scanning;

- (void).cxx_destruct;
- (void)_currentNetworkDidChange;
- (id)_debugLQMString:(id)arg1;
- (void)_hostAPStateDidChange:(id)arg1;
- (bool)_isNetworkRestrictionActive;
- (void)_linkChangedWithInfo:(id)arg1;
- (void)_linkQualityChanged:(id)arg1;
- (void)_resetCurrentNetworkStates;
- (void)_startMonitoringWiFiEvents;
- (void)_startScanOperation:(id)arg1;
- (void)_stopMonitoringWiFiEvents;
- (void)_updateCurrentNetworkWithNetwork:(struct __WiFiNetwork { }*)arg1 callback:(id /* block */)arg2;
- (void)_updateDeviceProperties;
- (void)_wifiManagerRestarted:(id)arg1;
- (void)_wifiScanComplete:(id)arg1 error:(int)arg2;
- (void)asyncAssociateToNetwork:(id)arg1 password:(id)arg2 reply:(id /* block */)arg3;
- (void)asyncAssociateToNetwork:(id)arg1 profile:(id)arg2 reply:(id /* block */)arg3;
- (void)asyncCurrentNetwork:(id /* block */)arg1;
- (void)asyncGASQueryForNetworks:(id)arg1 elements:(unsigned long long)arg2 reply:(id /* block */)arg3;
- (void)asyncScanRequest:(id)arg1 reply:(id /* block */)arg2;
- (id)callbackRunLoop;
- (id)callbackThread;
- (void)cancelAllScans;
- (id)currentNetwork;
- (bool)currentNetworkIsDirected;
- (id)currentNetworkIssues;
- (id)currentNetworkQueue;
- (void)dealloc;
- (struct __WiFiDeviceClient { }*)device;
- (id)deviceScanChannels;
- (bool)deviceSupportsHS20;
- (bool)deviceSupportsWAPI;
- (void)disassociateFromCarPlayUserConfiguredNetwork;
- (void)disassociateFromCurrentNetwork;
- (id)filterScanResultsForRestrictedNetworks:(id)arg1;
- (void)finalize;
- (id)gasQueue;
- (bool)hasNoGatewayIP;
- (id)initWithDevice:(struct __WiFiDeviceClient { }*)arg1;
- (id)interfaceName;
- (id)ipMonitor;
- (int)ipState;
- (bool)ipv4SelfAssigned;
- (id)joinQueue;
- (bool)monitoringEvents;
- (void)notifyNoNetworksFound;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)rssiThreshold;
- (id)scanQueue;
- (id)scanQueueDispatchQueue;
- (bool)scanning;
- (void)setCallbackRunLoop:(id)arg1;
- (void)setCallbackThread:(id)arg1;
- (void)setCurrentNetwork:(id)arg1;
- (void)setCurrentNetworkIsDirected:(bool)arg1;
- (void)setCurrentNetworkIssues:(id)arg1;
- (void)setCurrentNetworkQueue:(id)arg1;
- (void)setDevice:(struct __WiFiDeviceClient { }*)arg1;
- (void)setDeviceScanChannels:(id)arg1;
- (void)setDeviceSupportsHS20:(bool)arg1;
- (void)setDeviceSupportsWAPI:(bool)arg1;
- (void)setGasQueue:(id)arg1;
- (void)setHasNoGatewayIP:(bool)arg1;
- (void)setInterfaceName:(id)arg1;
- (void)setIpMonitor:(id)arg1;
- (void)setIpState:(int)arg1;
- (void)setIpv4SelfAssigned:(bool)arg1;
- (void)setJoinQueue:(id)arg1;
- (void)setMonitoringEvents:(bool)arg1;
- (void)setRssiThreshold:(id)arg1;
- (void)setScanQueue:(id)arg1;
- (void)setScanQueueDispatchQueue:(id)arg1;
- (void)setScanning:(bool)arg1;
- (bool)supportsHS20;
- (bool)supportsWAPI;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
