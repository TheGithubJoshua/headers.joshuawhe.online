<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MFNetworkController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Message.framework/MFNetworkController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Message.framework/Message (3445.120.0.1.2)
 */

@interface MFNetworkController : NSObject <CXCallObserverDelegate, MFDiagnosticsGenerator, RadiosPreferencesDelegate> {
    unsigned long long  _activeCalls;
    bool  _alternateAdviceState;
    NSMutableSet * _backgroundWifiClients;
    CXCallObserver * _callObserver;
    bool  _cellularDataAvailable;
    CoreTelephonyClient * _ctc;
    int  _dataIndicator;
    NSObject<OS_dispatch_queue> * _dataStatusQueue;
    bool  _dns;
    unsigned int  _flags;
    bool  _hasCellDataCapability;
    bool  _hasWiFiCapability;
    bool  _isRoamingAllowed;
    bool  _isWiFiEnabled;
    NSLock * _lock;
    NSMutableArray * _observers;
    NSObject<OS_dispatch_queue> * _prefsQueue;
    RadiosPreferences * _radiosPreferences;
    struct __SCNetworkReachability { } * _reachability;
    struct __CFRunLoop { } * _rl;
    struct __SCDynamicStore { } * _store;
    struct __CFRunLoopSource { } * _store_source;
    int  _symptomsToken;
    struct __SCPreferences { } * _wiFiPreferences;
    void * _wifiManager;
}

@property (nonatomic, readonly) AWDMailNetworkDiagnosticsReport *awdNetworkDiagnosticReport;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) MFObservable *networkObservable;
@property (readonly) Class superclass;
@property (nonatomic) void*wifiManager;
@property (nonatomic, readonly) MFObservable *wifiObservable;

+ (id)networkAssertionWithIdentifier:(id)arg1;
+ (id)sharedInstance;

- (void)_carrierBundleDidChange;
- (void)_checkKeys:(id)arg1 forStore:(struct __SCDynamicStore { }*)arg2;
- (void)_handleWiFiNotification:(unsigned int)arg1;
- (void)_initializeDataStatus;
- (void)_inititializeWifiManager;
- (bool)_isNetworkUp_nts;
- (id)_networkAssertionWithIdentifier:(id)arg1;
- (void)_setDataStatus_nts:(id)arg1;
- (void)_setFlags:(unsigned int)arg1 forReachability:(struct __SCNetworkReachability { }*)arg2;
- (void)_setupSymptons;
- (bool)_simulationOverrideForType:(unsigned long long)arg1 actualValue:(bool)arg2;
- (void)_updateActiveCalls;
- (void)_updateWifiClientType;
- (void)addBackgroundWifiClient:(id)arg1;
- (id)addNetworkObserverBlock:(id /* block */)arg1 queue:(id)arg2;
- (void)airplaneModeChanged;
- (id)awdNetworkDiagnosticReport;
- (void)callObserver:(id)arg1 callChanged:(id)arg2;
- (void)connectionActivationError:(id)arg1 connection:(int)arg2 error:(int)arg3;
- (id)copyCarrierBundleValue:(id)arg1;
- (id)copyDiagnosticInformation;
- (int)dataStatus;
- (void)dataStatus:(id)arg1 dataStatusInfo:(id)arg2;
- (void)dealloc;
- (bool)hasAlternateAdvice;
- (bool)inAirplaneMode;
- (id)init;
- (void)invalidate;
- (bool)is3GConnection;
- (bool)is4GConnection;
- (bool)isDataAvailable;
- (bool)isFatPipe;
- (bool)isNetworkUp;
- (bool)isOnWWAN;
- (id)networkObservable;
- (void)preferredDataSimChanged:(id)arg1;
- (void)removeBackgroundWifiClient:(id)arg1;
- (void)removeNetworkObserver:(id)arg1;
- (void)setWifiManager:(void*)arg1;
- (void)simStatusDidChange:(id)arg1 status:(id)arg2;
- (void*)wifiManager;
- (id)wifiObservable;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
