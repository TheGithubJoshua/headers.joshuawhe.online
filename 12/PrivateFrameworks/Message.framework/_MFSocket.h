<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_MFSocket.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Message.framework/_MFSocket.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Message.framework/Message (3445.120.0.1.2)
 */

@interface _MFSocket : NSObject {
    NSString * _accountIdentifier;
    bool  _allowsTrustPrompt;
    NSArray * _clientCertificates;
    NSCondition * _condition;
    struct __CFString { } * _connectionServiceType;
    bool  _disableEphemeralDiffieHellmanCiphers;
    NSInvocation * _eventHandler;
    NSString * _host;
    int  _lowThroughputCounter;
    NSString * _networkAccountIdentifier;
    int  _numTimeoutSecs;
    NSString * _protocol;
    NSString * _service;
    bool  _socketCanRead;
    bool  _socketCanWrite;
    NSString * _sourceApplicationBundleIdentifier;
    MFStream * _stream;
    bool  _usesOpportunisticSockets;
}

@property (nonatomic, copy) NSString *accountIdentifier;
@property (nonatomic) bool allowsTrustPrompt;
@property (nonatomic, retain) NSArray *clientCertificates;
@property (nonatomic) bool disableEphemeralDiffieHellmanCiphers;
@property (nonatomic, readonly) bool isCellularConnection;
@property (nonatomic, readonly) bool isReadable;
@property (nonatomic, readonly) bool isValid;
@property (nonatomic, readonly) bool isWritable;
@property (nonatomic, copy) NSString *networkAccountIdentifier;
@property (nonatomic, readonly) NSString *remoteHostname;
@property (nonatomic, readonly) unsigned int remotePortNumber;
@property (nonatomic, readonly) NSArray *serverCertificates;
@property (nonatomic, copy) NSString *sourceApplicationBundleIdentifier;
@property (nonatomic, readonly) NSData *sourceIPAddress;
@property (retain) MFStream *stream;
@property (nonatomic) int timeout;
@property (nonatomic) bool usesOpportunisticSockets;

- (unsigned int)_bufferedByteCount;
- (bool)_certificateIsTrustedForAccount:(id)arg1;
- (bool)_evaluateTrust:(struct __SecTrust { }*)arg1 errorPtr:(id*)arg2;
- (id)_negotiatedProtocolVersion;
- (void)_setCertificateIsTrusted:(bool)arg1 forAccount:(id)arg2;
- (bool)_startSSLHandshakeWithProtocol:(id)arg1 errorPtr:(id*)arg2;
- (bool)_waitForSocketOpenAndFlag:(bool*)arg1;
- (void)abort;
- (id)accountIdentifier;
- (bool)allowsTrustPrompt;
- (id)clientCertificates;
- (bool)connectToHost:(id)arg1 withPort:(unsigned int)arg2 service:(id)arg3;
- (void)dealloc;
- (bool)disableEphemeralDiffieHellmanCiphers;
- (void)enableThroughputMonitoring:(bool)arg1;
- (id)init;
- (bool)isCellularConnection;
- (bool)isReadable;
- (bool)isValid;
- (bool)isWritable;
- (id)networkAccountIdentifier;
- (long long)readBytes:(char *)arg1 length:(unsigned long long)arg2;
- (id)remoteHostname;
- (unsigned int)remotePortNumber;
- (id)securityProtocol;
- (id)serverCertificates;
- (void)setAccountIdentifier:(id)arg1;
- (void)setAllowsTrustPrompt:(bool)arg1;
- (void)setClientCertificates:(id)arg1;
- (void)setConnectionServiceType:(struct __CFString { }*)arg1;
- (void)setDisableEphemeralDiffieHellmanCiphers:(bool)arg1;
- (void)setEventHandler:(id)arg1;
- (void)setNetworkAccountIdentifier:(id)arg1;
- (bool)setSecurityProtocol:(id)arg1;
- (void)setSourceApplicationBundleIdentifier:(id)arg1;
- (void)setStream:(id)arg1;
- (void)setTimeout:(int)arg1;
- (void)setUsesOpportunisticSockets:(bool)arg1;
- (id)sourceApplicationBundleIdentifier;
- (id)sourceIPAddress;
- (id)stream;
- (int)timeout;
- (bool)usesOpportunisticSockets;
- (long long)writeBytes:(const char *)arg1 length:(unsigned long long)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
