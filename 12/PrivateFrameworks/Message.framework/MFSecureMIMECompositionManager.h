<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MFSecureMIMECompositionManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Message.framework/MFSecureMIMECompositionManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Message.framework/Message (3445.120.0.1.2)
 */

@interface MFSecureMIMECompositionManager : NSObject {
    NSMutableDictionary * _certificatesByRecipient;
    <MFSecureMIMECompositionManagerDelegate> * _delegate;
    struct __SecIdentity { } * _encryptionIdentity;
    MFError * _encryptionIdentityError;
    int  _encryptionPolicy;
    int  _encryptionStatus;
    unsigned long long  _encryptionStatusSemaphore;
    NSMutableDictionary * _errorsByRecipient;
    bool  _invalidated;
    NSLock * _lock;
    NSObject<OS_dispatch_queue> * _queue;
    NSMutableSet * _recipients;
    MailAccount * _sendingAccount;
    NSString * _sendingAddress;
    struct __SecIdentity { } * _signingIdentity;
    MFError * _signingIdentityError;
    int  _signingPolicy;
    int  _signingStatus;
    unsigned long long  _signingStatusSemaphore;
}

@property <MFSecureMIMECompositionManagerDelegate> *delegate;
@property (readonly) int encryptionPolicy;
@property (readonly) int encryptionStatus;
@property (readonly) NSSet *recipients;
@property (readonly) MailAccount *sendingAccount;
@property (copy) NSString *sendingAddress;
@property (readonly) int signingPolicy;
@property (readonly) int signingStatus;

+ (id)copyEncryptionCertificatesForAccount:(id)arg1 recipientAddresses:(id)arg2 errorsByAddress:(id*)arg3;
+ (struct __SecIdentity { }*)copyEncryptionIdentityForAccount:(id)arg1 sendingAddress:(id)arg2 error:(id*)arg3;
+ (struct __SecIdentity { }*)copySigningIdentityForAccount:(id)arg1 sendingAddress:(id)arg2 error:(id*)arg3;
+ (unsigned int)evaluateTrustForSigningCertificate:(struct __SecCertificate { }*)arg1 sendingAddress:(id)arg2;

- (void)_determineEncryptionStatusWithNewRecipients:(id)arg1;
- (void)_determineEncryptionStatusWithSendingAddress:(id)arg1;
- (void)_determineIdentitiesWithSendingAddress:(id)arg1 forSigning:(bool)arg2 encryption:(bool)arg3;
- (void)_determineSigningStatusWithSendingAddress:(id)arg1;
- (void)_determineTrustStatusForSigningIdentity:(struct __SecIdentity { }*)arg1 sendingAddress:(id)arg2;
- (void)_notifyDelegateEncryptionStatusDidChange:(int)arg1 certsByRecipient:(id)arg2 errorsByRecipient:(id)arg3 identity:(struct __SecIdentity { }*)arg4 error:(id)arg5;
- (void)_notifyDelegateSigningStatusDidChange:(int)arg1 identity:(struct __SecIdentity { }*)arg2 error:(id)arg3;
- (void)_nts_copyEncryptionIdentity:(struct __SecIdentity {}**)arg1 error:(id*)arg2 certificatesByRecipient:(id*)arg3 errorsByRecipient:(id*)arg4;
- (void)_nts_copySigningIdentity:(struct __SecIdentity {}**)arg1 error:(id*)arg2;
- (void)_nts_setEncryptionIdentity:(struct __SecIdentity { }*)arg1 error:(id)arg2;
- (void)_nts_setSigningIdentity:(struct __SecIdentity { }*)arg1 error:(id)arg2;
- (bool)_shouldAllowSend_nts;
- (bool)_shouldEncrypt_nts;
- (bool)_shouldSign_nts;
- (bool)_updateEncryptionStatus_nts;
- (bool)_updateSigningStatus_nts;
- (void)addRecipients:(id)arg1;
- (id)compositionSpecification;
- (void)dealloc;
- (id)delegate;
- (int)encryptionPolicy;
- (int)encryptionStatus;
- (id)init;
- (id)initWithSendingAccount:(id)arg1 signingPolicy:(int)arg2 encryptionPolicy:(int)arg3;
- (id)initWithSigningPolicy:(int)arg1 encryptionPolicy:(int)arg2;
- (void)invalidate;
- (id)recipients;
- (void)removeRecipients:(id)arg1;
- (id)sendingAccount;
- (id)sendingAddress;
- (void)setDelegate:(id)arg1;
- (void)setSendingAddress:(id)arg1;
- (bool)shouldAllowSend;
- (int)signingPolicy;
- (int)signingStatus;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
