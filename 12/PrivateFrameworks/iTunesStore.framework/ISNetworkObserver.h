<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ISNetworkObserver.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iTunesStore.framework/ISNetworkObserver.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore (1)
 */

@interface ISNetworkObserver : NSObject <SSDownloadQueueObserver> {
    NSString * _dataStatusIndicator;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    bool  _isCellularRestricted;
    double  _lastNetworkTypeChangeTime;
    unsigned int  _networkReachabilityFlags;
    long long  _networkType;
    long long  _networkUsageCount;
    NSObject<OS_dispatch_queue> * _notificationQueue;
    NSMutableSet * _observedDownloadQueues;
    struct __SCNetworkReachability { } * _reachability;
    struct __CTServerConnection { } * _telephonyServer;
}

@property (readonly) NSString *connectionTypeHeader;
@property (readonly) NSString *dataStatusIndicator;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) double lastNetworkTypeChangeTime;
@property (readonly) NSString *mobileSubscriberCountryCode;
@property (readonly) NSString *mobileSubscriberNetworkCode;
@property (readonly) NSString *modemRegistrationStatus;
@property (readonly) unsigned int networkReachabilityFlags;
@property long long networkType;
@property (readonly) NSString *operatorName;
@property (readonly) NSString *phoneNumber;
@property (readonly) NSString *providerName;
@property (readonly) bool shouldShowCellularAutomaticDownloadsSwitch;
@property (readonly) Class superclass;
@property (getter=isUsingNetwork, readonly) bool usingNetwork;
@property (getter=isWiFiEnabled, readonly) bool wifiEnabled;

+ (bool)isLikelyToReachRemoteServerWithReachabilityFlags:(unsigned int)arg1;
+ (void)set3GEnabled:(bool)arg1;
+ (void)setAirplaneModeEnabled:(bool)arg1;
+ (void)setWiFiEnabled:(bool)arg1;
+ (id)sharedInstance;

- (void)_applicationForegroundNotification:(id)arg1;
- (void)_copyConnectionDataStatus:(id /* block */)arg1;
- (unsigned int)_currentNetworkReachabilityFlags;
- (id)_dataStatusIndicator;
- (void)_handleTelephonyNotificationWithName:(struct __CFString { }*)arg1 userInfo:(struct __CFDictionary { }*)arg2;
- (long long)_networkTypeForReachabilityFlags:(unsigned int)arg1;
- (long long)_networkTypeFromDataIndicator:(id)arg1;
- (bool)_ntsIsUsingNetwork;
- (void)_postReachabilityFlagsChangedNotificationFromValue:(unsigned int)arg1 toValue:(unsigned int)arg2;
- (void)_postTypeChangedNotificationFromValue:(long long)arg1 toValue:(long long)arg2;
- (void)_postUsageChangedToValue:(bool)arg1;
- (void)_reloadCellularRestriction;
- (void)_reloadDataStatusIndicator;
- (void)_reloadNetworkType;
- (void)_reloadNetworkTypeWithReachabilityFlags:(unsigned int)arg1;
- (long long)_setNetworkType:(long long)arg1;
- (void)_telephonyOperatorNameDidChangeNotification:(id)arg1;
- (void)_telephonyRegistrationDidChangeNotification:(id)arg1;
- (void)beginObservingDownloadQueue:(id)arg1;
- (void)beginUsingNetwork;
- (id)connectionTypeHeader;
- (id)copyValueForCarrierBundleKey:(id)arg1;
- (id)dataStatusIndicator;
- (void)dealloc;
- (void)downloadQueue:(id)arg1 changedWithRemovals:(id)arg2;
- (void)downloadQueueNetworkUsageChanged:(id)arg1;
- (void)endObservingDownloadQueue:(id)arg1;
- (void)endUsingNetwork;
- (id)init;
- (bool)isCellularDataEnabledForBundleIdentifier:(id)arg1;
- (bool)isUsingNetwork;
- (bool)isWiFiEnabled;
- (double)lastNetworkTypeChangeTime;
- (id)mobileSubscriberCountryCode;
- (id)mobileSubscriberNetworkCode;
- (id)modemRegistrationStatus;
- (unsigned int)networkReachabilityFlags;
- (long long)networkType;
- (id)operatorName;
- (id)phoneNumber;
- (id)providerName;
- (void)reloadNetworkType;
- (void)setNetworkType:(long long)arg1;
- (bool)shouldShowCellularAutomaticDownloadsSwitch;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
