<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ISDialog.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/iTunesStore.framework/ISDialog.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore (1)
 */

@interface ISDialog : NSObject <SSXPCCoding> {
    bool  _allowDuplicates;
    SSAuthenticationContext * _authenticationContext;
    bool  _authorizationIsForced;
    NSArray * _buttons;
    long long  _defaultButtonIndex;
    bool  _dismissOnHomeButton;
    bool  _dismissOnLock;
    NSString * _displayCountKey;
    bool  _displaysOnLockscreen;
    bool  _expectsResponse;
    bool  _groupsTextFields;
    long long  _kind;
    NSLock * _lock;
    long long  _maxDisplayCount;
    NSString * _message;
    bool  _noDefaultButton;
    bool  _oneButtonPerLine;
    SSPaymentSheet * _paymentSheet;
    bool  _shouldDismissAfterUnlock;
    bool  _shouldDisplayAsTopMost;
    bool  _shouldPendInSetupIfNotAllowed;
    NSArray * _textFields;
    NSString * _title;
    NSString * _touchIDContinueToken;
    long long  _unlockActionButtonIndex;
    NSMutableDictionary * _userInfo;
    struct __CFDictionary { } * _userNotificationValues;
}

@property bool allowDuplicates;
@property (copy) SSAuthenticationContext *authenticationContext;
@property bool authorizationIsForced;
@property (retain) NSArray *buttons;
@property (readonly, copy) NSString *debugDescription;
@property long long defaultButtonIndex;
@property (readonly, copy) NSString *description;
@property bool dismissOnHomeButton;
@property bool dismissOnLock;
@property (copy) NSString *displayCountKey;
@property (getter=isDisplayable, readonly) bool displayable;
@property bool displaysOnLockscreen;
@property bool expectsResponse;
@property bool groupsTextFields;
@property (readonly) unsigned long long hash;
@property long long kind;
@property long long maximumDisplayCount;
@property (retain) NSString *message;
@property bool noDefaultButton;
@property bool oneButtonPerLine;
@property (readonly) SSPaymentSheet *paymentSheet;
@property bool shouldDismissAfterUnlock;
@property bool shouldDisplayAsTopMost;
@property bool shouldPendInSetupIfNotAllowed;
@property (readonly) Class superclass;
@property (retain) NSArray *textFields;
@property (retain) NSString *title;
@property (copy) NSString *touchIDContinueToken;
@property long long unlockActionButtonIndex;

// Image: /System/Library/PrivateFrameworks/iTunesStore.framework/iTunesStore

+ (void)_initializeStaticButtonTitleKeyAndTagMapping;
+ (unsigned long long)buttonTagForCFUserNotificationButtonTitleKey:(struct __CFString { }*)arg1;
+ (struct __CFString { }*)buttonTitleKeyForCFUserNotificationButtonTag:(unsigned long long)arg1;
+ (long long)displayCountForKey:(id)arg1;

- (void).cxx_destruct;
- (long long)_kindForString:(id)arg1;
- (bool)allowDuplicates;
- (id)authenticationContext;
- (bool)authorizationIsForced;
- (id)buttons;
- (id)buyParams;
- (id)copyUserNotification;
- (void*)copyValueForCFUserNotificationKey:(struct __CFString { }*)arg1;
- (id)copyXPCEncoding;
- (void)dealloc;
- (long long)defaultButtonIndex;
- (bool)dismissOnHomeButton;
- (bool)dismissOnLock;
- (id)displayCountKey;
- (bool)displaysOnLockscreen;
- (bool)expectsResponse;
- (bool)groupsTextFields;
- (void)incrementDisplayCount;
- (id)init;
- (id)initWithAuthenticationChallege:(id)arg1;
- (id)initWithDialogDictionary:(id)arg1;
- (id)initWithDialogDictionary:(id)arg1 authenticationContext:(id)arg2;
- (id)initWithError:(id)arg1;
- (id)initWithOfferDeviceError:(id)arg1;
- (id)initWithTitle:(id)arg1 message:(id)arg2;
- (id)initWithXPCEncoding:(id)arg1;
- (bool)isDisplayable;
- (bool)isEqual:(id)arg1;
- (long long)kind;
- (long long)maximumDisplayCount;
- (id)message;
- (bool)noDefaultButton;
- (bool)oneButtonPerLine;
- (id)orderedButtonTitleKeysForCFUserNotification;
- (id)paymentSheet;
- (void)setAllowDuplicates:(bool)arg1;
- (void)setAuthenticationContext:(id)arg1;
- (void)setAuthorizationIsForced:(bool)arg1;
- (void)setButtons:(id)arg1;
- (void)setButtonsWithTitles:(id)arg1;
- (void)setDefaultButtonIndex:(long long)arg1;
- (void)setDismissOnHomeButton:(bool)arg1;
- (void)setDismissOnLock:(bool)arg1;
- (void)setDisplayCountKey:(id)arg1;
- (void)setDisplaysOnLockscreen:(bool)arg1;
- (void)setExpectsResponse:(bool)arg1;
- (void)setGroupsTextFields:(bool)arg1;
- (void)setKind:(long long)arg1;
- (void)setMaximumDisplayCount:(long long)arg1;
- (void)setMessage:(id)arg1;
- (void)setNoDefaultButton:(bool)arg1;
- (void)setOneButtonPerLine:(bool)arg1;
- (void)setShouldDismissAfterUnlock:(bool)arg1;
- (void)setShouldDisplayAsTopMost:(bool)arg1;
- (void)setShouldPendInSetupIfNotAllowed:(bool)arg1;
- (void)setTextFields:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTouchIDContinueToken:(id)arg1;
- (void)setUnlockActionButtonIndex:(long long)arg1;
- (void)setValue:(void*)arg1 forCFUserNotificationKey:(struct __CFString { }*)arg2;
- (void)setValue:(id)arg1 forUserInfoKey:(id)arg2;
- (bool)shouldDismissAfterUnlock;
- (bool)shouldDisplayAsTopMost;
- (bool)shouldPendInSetupIfNotAllowed;
- (id)textFields;
- (id)title;
- (id)touchIDContinueToken;
- (long long)unlockActionButtonIndex;
- (id)valueForUserInfoKey:(id)arg1;

// Image: /System/Library/PrivateFrameworks/iTunesStoreUI.framework/iTunesStoreUI

+ (id)ITunesStoreNotAvailableDialog;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
