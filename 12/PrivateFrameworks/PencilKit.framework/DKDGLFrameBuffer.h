<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>DKDGLFrameBuffer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PencilKit.framework/DKDGLFrameBuffer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit (1)
 */

@interface DKDGLFrameBuffer : NSObject {
    long long  _currentBindingOption;
    int  _currentDrawBufferCount;
    unsigned int  _currentDrawBuffers;
    unsigned int  _currentReadBuffer;
    NSMutableArray * _currentTextureLookupInfoByAttachment;
    NSMutableArray * _desiredTextureLookupInfoByAttachment;
    unsigned int  _framebuffer;
    bool  _isBound;
    bool  _isUsingNonDefaultAttachments;
    NSString * _name;
    NSDictionary * _namesToTextureDict;
    bool  _shouldDeleteTexturesOnTeardown;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    struct __CVOpenGLESTextureCache { } * _textureCache;
    NSArray * _textureConfigs;
    NSArray * _textureConfigsByAttachment;
    NSArray * _textureLookupInfosByAttachment;
}

@property (nonatomic, readonly) bool isBound;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) bool shouldDeleteTexturesOnTeardown;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } size;

+ (int)currentGLFramebuffer;
+ (int)currentGLFramebufferWithBindingOption:(long long)arg1;
+ (void)setCurrentGLFramebuffer:(int)arg1;
+ (void)setCurrentGLFramebuffer:(int)arg1 withBindingOption:(long long)arg2;

- (unsigned int)GLTextureAtIndex:(unsigned long long)arg1;
- (unsigned int)GLTextureAtIndex:(unsigned long long)arg1 attachment:(unsigned int)arg2;
- (unsigned int)GLTextureNamed:(id)arg1;
- (void)bindFramebuffer;
- (void)bindFramebufferWithBindingOption:(long long)arg1;
- (struct __CVBuffer { }*)createTextureCacheTextureWithSize:(struct CGSize { double x1; double x2; })arg1 pixelBufferOut:(struct __CVBuffer {}**)arg2;
- (unsigned int)currentGLTexture;
- (unsigned int)currentGLTextureAtAttachment:(unsigned int)arg1;
- (long long)currentTextureIndexAtAttachment:(unsigned int)arg1;
- (void)dealloc;
- (id)description;
- (int)glFramebuffer;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 textureConfigs:(id)arg2;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 textureConfigs:(id)arg2 textureCache:(struct __CVOpenGLESTextureCache { }*)arg3;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 textureCount:(unsigned long long)arg2;
- (bool)isBound;
- (id)name;
- (bool)p_isCurrentDrawBuffersEqualToDrawbuffers:(unsigned int*)arg1 count:(long long)arg2;
- (void)p_setDrawBuffersAndReadBuffer;
- (void)p_setFramebufferTextureAtAttachmentIndex:(long long)arg1 bindingOption:(long long)arg2;
- (struct __CVBuffer { }*)pixelBufferAtIndex:(unsigned long long)arg1 attachment:(unsigned int)arg2;
- (void)setCurrentTextureIndex:(unsigned long long)arg1;
- (void)setCurrentTextureIndex:(unsigned long long)arg1 atAttachment:(unsigned int)arg2;
- (void)setCurrentTextureNamed:(id)arg1;
- (void)setCurrentTextureNamed:(id)arg1 atAttachment:(unsigned int)arg2;
- (void)setCurrentTextureToNextAtAttachment:(unsigned int)arg1;
- (void)setCurrentTexturesToNext;
- (void)setName:(id)arg1;
- (void)setShouldDeleteTexturesOnTeardown:(bool)arg1;
- (void)setupFramebufferIfNecessary;
- (bool)shouldDeleteTexturesOnTeardown;
- (struct CGSize { double x1; double x2; })size;
- (struct CGSize { double x1; double x2; })sizeOfGLTextureNamed:(id)arg1;
- (void)teardown;
- (void)unbindFramebufferAndBindGLFramebuffer:(int)arg1;
- (void)unbindFramebufferAndBindGLFramebuffer:(int)arg1 withBindingOption:(long long)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
