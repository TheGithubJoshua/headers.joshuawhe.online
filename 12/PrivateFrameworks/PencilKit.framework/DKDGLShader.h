<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>DKDGLShader.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PencilKit.framework/DKDGLShader.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit (1)
 */

@interface DKDGLShader : NSObject {
    NSMutableDictionary * _attributeLocations;
    bool  _isActive;
    NSString * _name;
    unsigned int  _programObject;
    NSMutableDictionary * _uniforms;
    NSMutableSet * _uniformsNeedingUpdate;
}

@property (nonatomic, readonly) bool isActive;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, readonly) unsigned int programObject;

- (void)activate;
- (void)deactivate;
- (void)dealloc;
- (id)description;
- (id)init;
- (id)initWithDefaultHorizontalBlurShader;
- (id)initWithDefaultRandomColorShader;
- (id)initWithDefaultRandomColorTextureShader;
- (id)initWithDefaultTextureAndOpacityShader;
- (id)initWithDefaultTextureAndOpacityShaderWithMotionBlur:(bool)arg1 ignoreTextureOpacity:(bool)arg2;
- (id)initWithDefaultTextureCoordinatesShader;
- (id)initWithDefaultTextureShader;
- (id)initWithDefaultTextureShaderWithMotionBlur:(bool)arg1 ignoreTextureOpacity:(bool)arg2;
- (id)initWithDefaultUniformMotionBlurShader;
- (id)initWithDefaultVelocityCollectionShaderWithSampleCount:(unsigned long long)arg1 isSingleObject:(bool)arg2;
- (id)initWithDefaultVelocityMeshShader;
- (id)initWithDefaultVelocityShader;
- (id)initWithDefaultVelocityVisualizerShader;
- (id)initWithDefaultVerticalBlurShader;
- (id)initWithShaderFileName:(id)arg1 bundle:(id)arg2;
- (id)initWithVertexShader:(id)arg1 fragmentShader:(id)arg2 defines:(id)arg3 version:(id)arg4;
- (id)initWithVertexShaderFileName:(id)arg1 fragmentShaderFileName:(id)arg2 bundle:(id)arg3 defines:(id)arg4;
- (id)initWithVertexShaderFileName:(id)arg1 fragmentShaderFileName:(id)arg2 bundle:(id)arg3 defines:(id)arg4 version:(id)arg5;
- (bool)isActive;
- (bool)loadVertexShader:(id)arg1 fragmentShader:(id)arg2 defines:(id)arg3 version:(id)arg4;
- (int)locationForAttribute:(id)arg1;
- (int)locationForUniform:(id)arg1;
- (id)name;
- (bool)p_compileShader:(unsigned int*)arg1 withType:(unsigned int)arg2 shaderString:(id)arg3 defines:(id)arg4 version:(id)arg5;
- (id)p_contentsOfShader:(id)arg1 extension:(id)arg2 bundle:(id)arg3;
- (id)p_qualifierForUniform:(id)arg1 class:(Class)arg2;
- (void)p_setQualifiersIfNecessary;
- (void)p_updateUniformsAndAttributesFromShader;
- (unsigned int)programObject;
- (void)setCGFloat:(double)arg1 forUniform:(id)arg2;
- (void)setColor:(struct { float x1; float x2; float x3; float x4; })arg1 forUniform:(id)arg2;
- (void)setGLFloat:(float)arg1 forShaderQualifier:(id)arg2;
- (void)setGLFloat:(float)arg1 forUniform:(id)arg2;
- (void)setGLint:(int)arg1 forShaderQualifier:(id)arg2;
- (void)setGLint:(int)arg1 forUniform:(id)arg2;
- (void)setInteger:(long long)arg1 forShaderQualifier:(id)arg2;
- (void)setInteger:(long long)arg1 forUniform:(id)arg2;
- (void)setLifeSpan:(struct { float x1; float x2; })arg1 forUniform:(id)arg2;
- (void)setMat3WithAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 forShaderQualifier:(id)arg2;
- (void)setMat3WithAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 forUniform:(id)arg2;
- (void)setMat4WithTransform3D:(struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })arg1 forShaderQualifier:(id)arg2;
- (void)setMat4WithTransform3D:(struct CATransform3D { double x1; double x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; double x14; double x15; double x16; })arg1 forUniform:(id)arg2;
- (void)setName:(id)arg1;
- (void)setPoint2D:(struct { float x1; float x2; })arg1 forShaderQualifier:(id)arg2;
- (void)setPoint2D:(struct { float x1; float x2; })arg1 forUniform:(id)arg2;
- (void)setPoint3D:(struct { float x1; float x2; float x3; })arg1 forShaderQualifier:(id)arg2;
- (void)setPoint3D:(struct { float x1; float x2; float x3; })arg1 forUniform:(id)arg2;
- (void)setPoint4D:(struct { float x1; float x2; float x3; float x4; })arg1 forShaderQualifier:(id)arg2;
- (void)setPoint4D:(struct { float x1; float x2; float x3; float x4; })arg1 forUniform:(id)arg2;
- (id)shaderQualifierForUniform:(id)arg1 type:(long long)arg2;
- (void)teardown;
- (bool)validateUniforms;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
