<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKStrokeGenerator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PencilKit.framework/PKStrokeGenerator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit (1)
 */

@interface PKStrokeGenerator : NSObject <PKInputProvider> {
    struct PKAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; bool x9; double x10; long long x11; id x12; bool x13; bool x14; } * _azimuthFilter;
    bool  _canSnapToRuler;
    struct PKCompressionFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_9_1_1; struct PKCompressedStrokePoint {} *x_9_1_2; struct __compressed_pair<PKCompressedStrokePoint *, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; } * _compressionFilter;
    long long  _currentInputType;
    PKStroke * _currentStroke;
    struct PKDecompressionFilter { int (**x1)(); struct PKInputProvider<PKCompressedStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_7_1_1; struct PKCompressedStrokePoint {} *x_7_1_2; struct __compressed_pair<PKCompressedStrokePoint *, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; double x10; } * _decompressionFilter;
    struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { 
            struct { /* ? */ } *__value_; 
        } __end_cap_; 
    }  _drawPoints;
    bool  _drawingEndedButNotFinished;
    NSObject<OS_dispatch_semaphore> * _drawingWaitForFinishSemaphore;
    struct PKEndCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; } * _endCapFilter;
    struct PKEndHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; } * _endHookFilter;
    double  _eraserIndicatorAlpha;
    struct PKEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; long long x7; double x8; double x9; double x10; double x11; long long x12; bool x13; long long x14; double x15; double x16; id x17; } * _estimatedAltitudeAndAzimuthFilter;
    long long  _immutableCount;
    bool  _inputHasChanged;
    struct PKInputProviderInitial { int (**x1)(); id x2; } * _inputProvider;
    NSObject<OS_dispatch_queue> * _inputQueue;
    double  _inputScale;
    struct PKInputSmoother { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; double x10; struct vector<PKSmoothingPoint, std::__1::allocator<PKSmoothingPoint> > { struct PKSmoothingPoint {} *x_11_1_1; struct PKSmoothingPoint {} *x_11_1_2; struct __compressed_pair<PKSmoothingPoint *, std::__1::allocator<PKSmoothingPoint> > { struct PKSmoothingPoint {} *x_3_2_1; } x_11_1_3; } x11; id x12; } * _inputSmoother;
    struct PKInputToOutputFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; id x10; } * _inputToOutputFilter;
    bool  _isSnappedToRuler;
    bool  _isSnappedToRulerTopSide;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastPoint;
    double  _latestNonPredictedTimestamp;
    long long  _outputImmutableCount;
    struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { 
        struct _PKStrokePoint {} *__begin_; 
        struct _PKStrokePoint {} *__end_; 
        struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { 
            struct _PKStrokePoint {} *__value_; 
        } __end_cap_; 
    }  _outputPoints;
    NSObject<OS_dispatch_queue> * _outputQueue;
    struct PKPixelSmoothingFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; long long x6; id x7; } * _pixelSmoothingFilter;
    struct PKPointReductionFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; long long x10; long long x11; long long x12; double x13; double x14; struct vector<std::__1::pair<long, double>, std::__1::allocator<std::__1::pair<long, double> > > { struct pair<long, double> {} *x_15_1_1; struct pair<long, double> {} *x_15_1_2; struct __compressed_pair<std::__1::pair<long, double> *, std::__1::allocator<std::__1::pair<long, double> > > { struct pair<long, double> {} *x_3_2_1; } x_15_1_3; } x15; } * _pointReductionFilter;
    struct PKRulerExtremaFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; id x10; } * _rulerExtremaFilter;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _rulerTransform;
    double  _rulerWidth;
    struct PKStartCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; } * _startCapFilter;
    struct PKStartHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; } * _startHookFilter;
    double  _strokeMaxForce;
    double  _touchSensitivity;
    struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { 
            struct { /* ? */ } *__value_; 
        } __end_cap_; 
    }  _updatedDrawPoints;
    bool  _useRuler;
    struct PKVelocityCalculationFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; bool x6; } * _velocityFilter;
}

@property (nonatomic) struct PKAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; /* Warning: unhandled struct encoding: '{vector<PKInputPoint' */ struct x7; }*azimuthFilter; /* unknown property attribute:  std::__1::allocator<PKInputPoint> >=^{?}}}qBdq@BB} */
@property (nonatomic) bool canSnapToRuler;
@property (nonatomic) struct PKCompressionFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; /* Warning: unhandled struct encoding: '{vector<_PKStrokePoint' */ struct x7; }*compressionFilter; /* unknown property attribute:  std::__1::allocator<PKCompressedStrokePoint> >=^{PKCompressedStrokePoint}}}} */
@property (nonatomic) struct PKDecompressionFilter { int (**x1)(); struct PKInputProvider<PKCompressedStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; /* Warning: unhandled struct encoding: '{vector<PKCompressedStrokePoint' */ struct x7; }*decompressionFilter; /* unknown property attribute:  std::__1::allocator<_PKStrokePoint> >=^{_PKStrokePoint}}}d} */
@property (nonatomic) struct PKEndCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; }*endCapFilter;
@property (nonatomic) struct PKEndHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; }*endHookFilter;
@property double eraserIndicatorAlpha;
@property (nonatomic) struct PKEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; long long x7; double x8; double x9; double x10; double x11; long long x12; bool x13; long long x14; double x15; double x16; id x17; }*estimatedAltitudeAndAzimuthFilter;
@property (nonatomic) struct PKInputProviderInitial { int (**x1)(); id x2; }*inputProvider;
@property (nonatomic) double inputScale;
@property (nonatomic) struct PKInputSmoother { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; /* Warning: unhandled struct encoding: '{vector<_PKStrokePoint' */ struct x7; }*inputSmoother; /* unknown property attribute:  std::__1::allocator<PKSmoothingPoint> >=^{PKSmoothingPoint}}}@} */
@property (nonatomic) struct PKInputToOutputFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; /* Warning: unhandled struct encoding: '{vector<PKInputPoint' */ struct x7; }*inputToOutputFilter; /* unknown property attribute:  std::__1::allocator<_PKStrokePoint> >=^{_PKStrokePoint}}}@} */
@property (nonatomic, readonly) long long inputType;
@property bool isSnappedToRuler;
@property (nonatomic) bool isSnappedToRulerTopSide;
@property struct CGPoint { double x1; double x2; } lastPoint;
@property (readonly) bool lastPointIsMasked;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *outputQueue;
@property (nonatomic) struct PKPixelSmoothingFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; long long x6; id x7; }*pixelSmoothingFilter;
@property (nonatomic) struct PKPointReductionFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; /* Warning: unhandled struct encoding: '{vector<PKInputPoint' */ struct x7; }*pointReductionFilter; /* unknown property attribute:  std::__1::allocator<long> >=^q}}B} */
@property (nonatomic) struct PKRulerExtremaFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; /* Warning: unhandled struct encoding: '{vector<_PKStrokePoint' */ struct x7; }*rulerExtremaFilter; /* unknown property attribute:  std::__1::allocator<_PKStrokePoint> >=^{_PKStrokePoint}}}@} */
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } rulerTransform;
@property (nonatomic) double rulerWidth;
@property (nonatomic) struct PKStartCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; }*startCapFilter;
@property (nonatomic) struct PKStartHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; }*startHookFilter;
@property (nonatomic) double strokeMaxForce;
@property (nonatomic) double touchSensitivity;
@property (nonatomic) bool useRuler;
@property (nonatomic) struct PKVelocityCalculationFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; bool x6; }*velocityFilter;

+ (void)initialize;
+ (struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; })inputPointsFromPath:(struct CGPath { }*)arg1 velocityForDistanceFunction:(id /* block */)arg2;
+ (struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; })inputPointsFromPoints:(struct vector<CGPoint, std::__1::allocator<CGPoint> > { struct CGPoint {} *x1; struct CGPoint {} *x2; struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint> > { struct CGPoint {} *x_3_1_1; } x3; })arg1 velocityForDistanceFunction:(id /* block */)arg2;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_drawingAddPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg1;
- (id)_strokeFromInputPoints:(struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg1 ink:(id)arg2 inputScale:(double)arg3;
- (void)addPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg1;
- (void)addPoints:(struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; })arg1;
- (void)allowSnappingToRuler:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 width:(double)arg2;
- (struct PKAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; bool x9; double x10; long long x11; id x12; bool x13; bool x14; }*)azimuthFilter;
- (bool)canSnapToRuler;
- (void)closeStroke;
- (struct PKCompressionFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_9_1_1; struct PKCompressedStrokePoint {} *x_9_1_2; struct __compressed_pair<PKCompressedStrokePoint *, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; }*)compressionFilter;
- (unsigned long long)copyInputUpdatedRangeFromIndex:(unsigned long long)arg1 into:(struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; }*)arg2;
- (void)dealloc;
- (struct PKDecompressionFilter { int (**x1)(); struct PKInputProvider<PKCompressedStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_7_1_1; struct PKCompressedStrokePoint {} *x_7_1_2; struct __compressed_pair<PKCompressedStrokePoint *, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; double x10; }*)decompressionFilter;
- (double)distanceToRulerCenter:(struct CGPoint { double x1; double x2; })arg1;
- (void)drawingBeganWithStroke:(id)arg1 inputType:(long long)arg2 inputScale:(double)arg3 start:(id /* block */)arg4;
- (void)drawingCancelledWithCompletion:(id /* block */)arg1;
- (void)drawingEndedWithCompletion:(id /* block */)arg1;
- (void)drawingUpdateAllPoints;
- (void)drawingUpdateAllPointsDidTimeout:(bool)arg1;
- (void)drawingUpdatePoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg1;
- (struct PKEndCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; }*)endCapFilter;
- (struct PKEndHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; }*)endHookFilter;
- (double)eraserIndicatorAlpha;
- (struct PKEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; long long x7; double x8; double x9; double x10; double x11; long long x12; bool x13; long long x14; double x15; double x16; id x17; }*)estimatedAltitudeAndAzimuthFilter;
- (long long)fetchFilteredPointsFromIndex:(long long)arg1 accessBlock:(id /* block */)arg2;
- (struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_1_1; } x3; }*)getInputUpdatedRangeFromIndex:(inout unsigned long long*)arg1;
- (struct CGPoint { double x1; double x2; })getRulerSnapLineOriginAndTangent:(struct CGPoint { double x1; double x2; }*)arg1 andNormal:(struct CGPoint { double x1; double x2; }*)arg2;
- (struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x1; struct _PKStrokePoint {} *x2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_1_1; } x3; }*)getUpdatedRangeFromIndex:(inout unsigned long long*)arg1;
- (id)init;
- (struct PKInputProviderInitial { int (**x1)(); id x2; }*)inputProvider;
- (double)inputScale;
- (struct PKInputSmoother { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; double x10; struct vector<PKSmoothingPoint, std::__1::allocator<PKSmoothingPoint> > { struct PKSmoothingPoint {} *x_11_1_1; struct PKSmoothingPoint {} *x_11_1_2; struct __compressed_pair<PKSmoothingPoint *, std::__1::allocator<PKSmoothingPoint> > { struct PKSmoothingPoint {} *x_3_2_1; } x_11_1_3; } x11; id x12; }*)inputSmoother;
- (struct PKInputToOutputFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; id x10; }*)inputToOutputFilter;
- (long long)inputType;
- (bool)isSnappedToRuler;
- (bool)isSnappedToRulerTopSide;
- (struct CGPoint { double x1; double x2; })lastPoint;
- (bool)lastPointIsMasked;
- (double)latestNonPredictedTimestamp;
- (void)maskToRuler;
- (struct _PKStrokePoint { double x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })outputCurrentStrokePoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg1;
- (struct PKInputProvider<_PKStrokePoint> { int (**x1)(); }*)outputFilter;
- (struct _PKStrokePoint { double x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })outputPoint:(struct { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; double x2; double x3; double x4; double x5; double x6; bool x7; long long x8; double x9; bool x10; })arg1 baseValues:(struct _PKStrokePoint { double x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; })arg2;
- (id)outputQueue;
- (struct PKPixelSmoothingFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; long long x6; id x7; }*)pixelSmoothingFilter;
- (struct PKPointReductionFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; long long x10; long long x11; long long x12; double x13; double x14; struct vector<std::__1::pair<long, double>, std::__1::allocator<std::__1::pair<long, double> > > { struct pair<long, double> {} *x_15_1_1; struct pair<long, double> {} *x_15_1_2; struct __compressed_pair<std::__1::pair<long, double> *, std::__1::allocator<std::__1::pair<long, double> > > { struct pair<long, double> {} *x_3_2_1; } x_15_1_3; } x15; }*)pointReductionFilter;
- (void)removePredictedTouches;
- (void)reset;
- (struct PKRulerExtremaFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; id x10; }*)rulerExtremaFilter;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })rulerTransform;
- (double)rulerWidth;
- (void)setAzimuthFilter:(struct PKAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; bool x9; double x10; long long x11; id x12; bool x13; bool x14; }*)arg1;
- (void)setCanSnapToRuler:(bool)arg1;
- (void)setCompressionFilter:(struct PKCompressionFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_9_1_1; struct PKCompressedStrokePoint {} *x_9_1_2; struct __compressed_pair<PKCompressedStrokePoint *, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; }*)arg1;
- (void)setDecompressionFilter:(struct PKDecompressionFilter { int (**x1)(); struct PKInputProvider<PKCompressedStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKCompressedStrokePoint, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_7_1_1; struct PKCompressedStrokePoint {} *x_7_1_2; struct __compressed_pair<PKCompressedStrokePoint *, std::__1::allocator<PKCompressedStrokePoint> > { struct PKCompressedStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; double x10; }*)arg1;
- (void)setEndCapFilter:(struct PKEndCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; }*)arg1;
- (void)setEndHookFilter:(struct PKEndHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; }*)arg1;
- (void)setEraserIndicatorAlpha:(double)arg1;
- (void)setEstimatedAltitudeAndAzimuthFilter:(struct PKEstimatedAltitudeAndAzimuthFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; long long x7; double x8; double x9; double x10; double x11; long long x12; bool x13; long long x14; double x15; double x16; id x17; }*)arg1;
- (void)setInputProvider:(struct PKInputProviderInitial { int (**x1)(); id x2; }*)arg1;
- (void)setInputScale:(double)arg1;
- (void)setInputSmoother:(struct PKInputSmoother { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; double x10; struct vector<PKSmoothingPoint, std::__1::allocator<PKSmoothingPoint> > { struct PKSmoothingPoint {} *x_11_1_1; struct PKSmoothingPoint {} *x_11_1_2; struct __compressed_pair<PKSmoothingPoint *, std::__1::allocator<PKSmoothingPoint> > { struct PKSmoothingPoint {} *x_3_2_1; } x_11_1_3; } x11; id x12; }*)arg1;
- (void)setInputToOutputFilter:(struct PKInputToOutputFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; id x10; }*)arg1;
- (void)setIsSnappedToRuler:(bool)arg1;
- (void)setIsSnappedToRulerTopSide:(bool)arg1;
- (void)setLastPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOutputQueue:(id)arg1;
- (void)setPixelSmoothingFilter:(struct PKPixelSmoothingFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; long long x6; id x7; }*)arg1;
- (void)setPointReductionFilter:(struct PKPointReductionFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_7_1_1; struct { /* ? */ } *x_7_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<PKInputPoint, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_9_1_1; struct { /* ? */ } *x_9_1_2; struct __compressed_pair<PKInputPoint *, std::__1::allocator<PKInputPoint> > { struct { /* ? */ } *x_3_2_1; } x_9_1_3; } x9; long long x10; long long x11; long long x12; double x13; double x14; struct vector<std::__1::pair<long, double>, std::__1::allocator<std::__1::pair<long, double> > > { struct pair<long, double> {} *x_15_1_1; struct pair<long, double> {} *x_15_1_2; struct __compressed_pair<std::__1::pair<long, double> *, std::__1::allocator<std::__1::pair<long, double> > > { struct pair<long, double> {} *x_3_2_1; } x_15_1_3; } x15; }*)arg1;
- (void)setRulerExtremaFilter:(struct PKRulerExtremaFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; long long x5; long long x6; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_7_1_1; struct _PKStrokePoint {} *x_7_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_7_1_3; } x7; long long x8; struct vector<_PKStrokePoint, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_9_1_1; struct _PKStrokePoint {} *x_9_1_2; struct __compressed_pair<_PKStrokePoint *, std::__1::allocator<_PKStrokePoint> > { struct _PKStrokePoint {} *x_3_2_1; } x_9_1_3; } x9; id x10; }*)arg1;
- (void)setRulerTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setRulerWidth:(double)arg1;
- (void)setStartCapFilter:(struct PKStartCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; }*)arg1;
- (void)setStartHookFilter:(struct PKStartHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; }*)arg1;
- (void)setStrokeMaxForce:(double)arg1;
- (void)setTouchSensitivity:(double)arg1;
- (void)setUseRuler:(bool)arg1;
- (void)setVelocityFilter:(struct PKVelocityCalculationFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; bool x6; }*)arg1;
- (bool)shouldSnapPointToRuler:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })snapPointToRuler:(struct CGPoint { double x1; double x2; })arg1;
- (void)snapToRuler;
- (struct PKStartCapsFilter { int (**x1)(); struct PKInputProvider<_PKStrokePoint> {} *x2; bool x3; double x4; double x5; double x6; double x7; }*)startCapFilter;
- (struct PKStartHookFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; long long x5; bool x6; }*)startHookFilter;
- (id)strokeFromPath:(struct CGPath { }*)arg1 ink:(id)arg2 inputScale:(double)arg3 velocityForDistanceFunction:(id /* block */)arg4;
- (id)strokeFromPoints:(struct CGPoint { double x1; double x2; }*)arg1 count:(unsigned long long)arg2 ink:(id)arg3 inputScale:(double)arg4;
- (double)strokeMaxForce;
- (double)touchSensitivity;
- (void)updateImmutableCount;
- (void)updateRulerSnapping;
- (bool)useRuler;
- (struct PKVelocityCalculationFilter { int (**x1)(); struct PKInputProvider<PKInputPoint> {} *x2; bool x3; double x4; double x5; bool x6; }*)velocityFilter;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
