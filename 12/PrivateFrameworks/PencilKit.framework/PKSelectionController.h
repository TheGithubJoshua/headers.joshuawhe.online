<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKSelectionController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PencilKit.framework/PKSelectionController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit (1)
 */

@interface PKSelectionController : NSObject <UIDropInteractionDelegate_Private> {
    PKStrokeSelection * _currentStrokeSelection;
    UIDropInteraction * _dropInteraction;
    struct CGPoint { 
        double x; 
        double y; 
    }  _dropPosition;
    bool  _hasCurrentSelection;
    bool  _isCurrentlyAddingSpace;
    NSUUID * _previousDrawingUUIDForSelection;
    <PKSelectionDelegate> * _selectionDelegate;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _selectionTransform;
    PKSelectionView * _selectionView;
    int  _selectionViewCount;
    PKSpaceInsertionController * _spaceInsertionController;
}

@property (nonatomic, retain) PKStrokeSelection *currentStrokeSelection;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasCurrentSelection;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isCurrentlyAddingSpace;
@property (nonatomic) <PKSelectionDelegate> *selectionDelegate;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } selectionTransform;
@property (nonatomic, retain) PKSelectionView *selectionView;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_commitStrokeSelection:(id)arg1 toDrawing:(id)arg2 removeStrokesFromSource:(bool)arg3;
- (id)_commitStrokeSelection:(id)arg1 toDrawing:(id)arg2 removeStrokesFromSource:(bool)arg3 createSelection:(bool)arg4;
- (id)_commitStrokeSelection:(id)arg1 toDrawing:(id)arg2 removeStrokesFromSource:(bool)arg3 createSelection:(bool)arg4 withCompletion:(id /* block */)arg5;
- (void)_createSelectionViewForDropSession:(id)arg1 removeFromSource:(bool)arg2;
- (void)_createSelectionViewForDropSession:(id)arg1 removeFromSource:(bool)arg2 withStrokeSelection:(id)arg3;
- (long long)_dropInteraction:(id)arg1 dataOwnerForSession:(id)arg2;
- (void)_moveCurrentStrokeSelectionForDrop:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 offsetInTouchView:(struct CGPoint { double x1; double x2; })arg3;
- (void)_pasteStrokeSelection:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 inDrawing:(id)arg3;
- (void)_removeSelectionView;
- (void)_removeSelectionViewWithCompletion:(id /* block */)arg1;
- (id)_rotateImageIfNecessary:(id)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_selectionTransformForStrokes:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 dragOffsetInDragView:(struct CGPoint { double x1; double x2; })arg3 constrainSelection:(bool)arg4 inDrawing:(id)arg5;
- (void)addItemsToPasteboard;
- (void)addViewForStrokeSelection:(id)arg1 isDragSource:(bool)arg2 drawing:(id)arg3 withCompletion:(id /* block */)arg4;
- (void)clearSelectionIfNecessary;
- (void)clearSelectionIfNecessaryWithCompletion:(id /* block */)arg1;
- (void)copy:(id)arg1;
- (id)currentStrokeSelection;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)delete:(id)arg1;
- (void)didBeginSpaceInsertionWithLassoStroke:(id)arg1 drawing:(id)arg2;
- (bool)didResizeWhitespace;
- (void)didScroll:(struct CGPoint { double x1; double x2; })arg1;
- (void)didSelect:(id)arg1 lassoStroke:(id)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 drawing:(id)arg4;
- (void)didSelect:(id)arg1 lassoStroke:(id)arg2 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg3 drawing:(id)arg4 completion:(id /* block */)arg5;
- (void)didSelectStrokesNotification:(id)arg1;
- (void)dismissSpacingResizeHandles;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)dropInteraction:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;
- (void)dropInteraction:(id)arg1 sessionDidEnter:(id)arg2;
- (void)dropInteraction:(id)arg1 sessionDidExit:(id)arg2;
- (id)dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)duplicate:(id)arg1;
- (void)eraseSelection;
- (bool)hasCurrentSelection;
- (void)hideStrokes:(id)arg1 inDrawing:(id)arg2;
- (id)initWithSelectionDelegate:(id)arg1;
- (id)intersectedStrokesFromStroke:(id)arg1 drawing:(id)arg2;
- (id)intersectedStrokesFromStroke:(id)arg1 drawing:(id)arg2 visibleOnscreenStrokes:(id)arg3;
- (struct CGPoint { double x1; double x2; })intersectionPointAlongStroke:(id)arg1 fromPoint:(struct CGPoint { double x1; double x2; })arg2 toPoint:(struct CGPoint { double x1; double x2; })arg3;
- (bool)isCurrentlyAddingSpace;
- (void)moveSelectionViewBasedOnStrokeTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 drawing:(id)arg2;
- (void)moveStrokeSelectionToLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)newStrokesForSelection:(id)arg1 toDrawing:(id)arg2;
- (void)paste:(id)arg1;
- (void)registerCommandWithUndoManager:(id)arg1;
- (void)resetStrokesAndClearSelectionForceRefresh:(bool)arg1;
- (id)rotateUIImage:(id)arg1 clockwise:(bool)arg2;
- (id)selectionDelegate;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })selectionTransform;
- (id)selectionView;
- (void)setCurrentStrokeSelection:(id)arg1;
- (void)setHasCurrentSelection:(bool)arg1;
- (void)setIsCurrentlyAddingSpace:(bool)arg1;
- (void)setSelectionDelegate:(id)arg1;
- (void)setSelectionTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setSelectionView:(id)arg1;
- (id)setupSpaceInsertionControllerIfNecessary;
- (id)strokesForSpaceInsertionWithStrokeSelection:(id)arg1 inDrawing:(id)arg2 offset:(double)arg3;
- (struct CGSize { double x1; double x2; })viewSizeForStrokeSelection:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
