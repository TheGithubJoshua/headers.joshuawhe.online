<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PKInkParser.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PencilKit.framework/PKInkParser.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PencilKit.framework/PencilKit (1)
 */

@interface PKInkParser : NSObject

+ (void)addFunctionsIfNecessaryForInk:(id)arg1 property:(unsigned long long)arg2 forDictionary:(id)arg3;
+ (id)controlPointArrayForInkFunction:(id)arg1;
+ (id)dictionaryForInk:(id)arg1 name:(id)arg2;
+ (id)dictionaryForInkFunction:(id)arg1;
+ (struct CGImage { }*)imageRefForTextureName:(id)arg1;
+ (id)inkBehaviorFromDictionary:(id)arg1 identifier:(id)arg2 version:(unsigned long long)arg3 variant:(id)arg4;
+ (id)inkBehaviorVariantWithDictionary:(id)arg1 renderingDescriptor:(id)arg2 variant:(id)arg3;
+ (id)inkBehaviorsWithIdentifer:(id)arg1;
+ (id)inkBehaviorsWithIdentifer:(id)arg1 version:(unsigned long long)arg2;
+ (id)inkRenderingDescriptorWithDictionary:(id)arg1;
+ (void)loadBaseRadius:(id)arg1 forBehavior:(id)arg2;
+ (struct unique_ptr<PKFunction, std::__1::default_delete<PKFunction> > { struct __compressed_pair<PKFunction *, std::__1::default_delete<PKFunction> > { struct PKFunction {} *x_1_1_1; } x1; })loadFunction:(id)arg1;
+ (struct vector<PKOutputFunction, std::__1::allocator<PKOutputFunction> > { struct PKOutputFunction {} *x1; struct PKOutputFunction {} *x2; struct __compressed_pair<PKOutputFunction *, std::__1::allocator<PKOutputFunction> > { struct PKOutputFunction {} *x_3_1_1; } x3; })loadOutput:(id)arg1 forBehavior:(id)arg2;
+ (id)plistDictionaryForInk:(id)arg1;
+ (id)stringForFunctionMask:(id)arg1;
+ (id)stringForInkInput:(unsigned long long)arg1;
+ (void)validatePiecewiseBezierFunction:(struct PKFunctionPiecewiseBezier { int (**x1)(); struct vector<double, std::__1::allocator<double> > { double *x_2_1_1; double *x_2_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_2_1_3; } x2; struct vector<double, std::__1::allocator<double> > { double *x_3_1_1; double *x_3_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_3_1_3; } x3; struct vector<double, std::__1::allocator<double> > { double *x_4_1_1; double *x_4_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_4_1_3; } x4; struct vector<double, std::__1::allocator<double> > { double *x_5_1_1; double *x_5_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_5_1_3; } x5; struct vector<double, std::__1::allocator<double> > { double *x_6_1_1; double *x_6_1_2; struct __compressed_pair<double *, std::__1::allocator<double> > { double *x_3_2_1; } x_6_1_3; } x6; struct vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_7_1_1; struct vector<double, std::__1::allocator<double> > {} *x_7_1_2; struct __compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > > { struct vector<double, std::__1::allocator<double> > {} *x_3_2_1; } x_7_1_3; } x7; }*)arg1;
+ (void)verifyParameters:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
