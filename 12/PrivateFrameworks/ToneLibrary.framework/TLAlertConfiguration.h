<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TLAlertConfiguration.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ToneLibrary.framework/TLAlertConfiguration.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary (1)
 */

@interface TLAlertConfiguration : NSObject <NSCopying, NSSecureCoding> {
    NSString * _audioCategory;
    double  _audioPlaybackInitiationDelay;
    float  _audioVolume;
    double  _audioVolumeRampingDuration;
    NSURL * _externalToneFileURL;
    unsigned long long  _externalToneMediaLibraryItemIdentifier;
    NSDictionary * _externalVibrationPattern;
    NSURL * _externalVibrationPatternFileURL;
    bool  _forPreview;
    bool  _hasCustomAudioVolume;
    bool  _hasCustomRepeatingFlag;
    bool  _isFrozen;
    double  _maximumDuration;
    bool  _shouldForcePlayingAtUserSelectedAudioVolume;
    bool  _shouldIgnoreRingerSwitch;
    bool  _shouldRepeat;
    NSString * _toneIdentifier;
    NSString * _topic;
    long long  _type;
    NSString * _vibrationIdentifier;
}

@property (setter=_setAudioPlaybackInitiationDelay:, nonatomic) double _audioPlaybackInitiationDelay;
@property (setter=_setAudioVolumeRampingDuration:, nonatomic) double _audioVolumeRampingDuration;
@property (nonatomic, readonly) bool _hasCustomAudioVolume;
@property (nonatomic, copy) NSString *audioCategory;
@property (nonatomic) float audioVolume;
@property (nonatomic, copy) NSURL *externalToneFileURL;
@property (nonatomic) unsigned long long externalToneMediaLibraryItemIdentifier;
@property (nonatomic, copy) NSDictionary *externalVibrationPattern;
@property (nonatomic, copy) NSURL *externalVibrationPatternFileURL;
@property (getter=isForPreview, nonatomic) bool forPreview;
@property (nonatomic) double maximumDuration;
@property (nonatomic) bool shouldForcePlayingAtUserSelectedAudioVolume;
@property (nonatomic) bool shouldIgnoreRingerSwitch;
@property (nonatomic) bool shouldRepeat;
@property (nonatomic, copy) NSString *toneIdentifier;
@property (nonatomic, copy) NSString *topic;
@property (nonatomic, readonly) long long type;
@property (nonatomic, copy) NSString *vibrationIdentifier;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (double)_audioPlaybackInitiationDelay;
- (double)_audioVolumeRampingDuration;
- (void)_freeze;
- (bool)_hasCustomAudioVolume;
- (void)_setAudioPlaybackInitiationDelay:(double)arg1;
- (void)_setAudioVolumeRampingDuration:(double)arg1;
- (void)_throwForFrozenInstance;
- (id)audioCategory;
- (float)audioVolume;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)externalToneFileURL;
- (unsigned long long)externalToneMediaLibraryItemIdentifier;
- (id)externalVibrationPattern;
- (id)externalVibrationPatternFileURL;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithType:(long long)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isForPreview;
- (double)maximumDuration;
- (void)setAudioCategory:(id)arg1;
- (void)setAudioVolume:(float)arg1;
- (void)setExternalToneFileURL:(id)arg1;
- (void)setExternalToneMediaLibraryItemIdentifier:(unsigned long long)arg1;
- (void)setExternalVibrationPattern:(id)arg1;
- (void)setExternalVibrationPatternFileURL:(id)arg1;
- (void)setForPreview:(bool)arg1;
- (void)setMaximumDuration:(double)arg1;
- (void)setShouldForcePlayingAtUserSelectedAudioVolume:(bool)arg1;
- (void)setShouldIgnoreRingerSwitch:(bool)arg1;
- (void)setShouldRepeat:(bool)arg1;
- (void)setToneIdentifier:(id)arg1;
- (void)setTopic:(id)arg1;
- (void)setVibrationIdentifier:(id)arg1;
- (bool)shouldForcePlayingAtUserSelectedAudioVolume;
- (bool)shouldIgnoreRingerSwitch;
- (bool)shouldRepeat;
- (id)toneIdentifier;
- (id)topic;
- (long long)type;
- (id)vibrationIdentifier;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
