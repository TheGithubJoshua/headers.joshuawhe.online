<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TLVibrationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ToneLibrary.framework/TLVibrationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary (1)
 */

@interface TLVibrationManager : NSObject {
    TLAccessQueue * _accessQueue;
    bool  _allowsAutoRefresh;
    NSMutableDictionary * _cachedSystemVibrationCompleteSubdirectories;
    NSMutableDictionary * _cachedSystemVibrationIdentifiers;
    NSDictionary * _cachedUserGeneratedVibrationPatterns;
    bool  _needsRefresh;
    unsigned long long  _specialBehaviors;
    NSDictionary * _synchronizedVibrationPatternFromToneIdentifierMapping;
    NPSDomainAccessor * _transientNanoPreferencesDomainAccessor;
}

@property (nonatomic) bool allowsAutoRefresh;
@property (nonatomic, readonly) bool needsRefresh;
@property (nonatomic, readonly) bool shouldVibrateForCurrentRingerSwitchState;
@property (nonatomic, readonly) bool shouldVibrateOnRing;
@property (nonatomic, readonly) bool shouldVibrateOnSilent;

// Image: /System/Library/PrivateFrameworks/ToneLibrary.framework/ToneLibrary

+ (void)_handleVibrateOnRingOrSilentDidChangeNotification;
+ (void)_handleVibrationPreferencesDidChangeNotificationForPreferencesKinds:(unsigned long long)arg1 atInitiativeOfVibrationManager:(id)arg2;
+ (id)sharedVibrationManager;

- (void).cxx_destruct;
- (bool)_areSynchronizedVibrationsAllowedForAlertType:(long long)arg1;
- (bool)_booleanPreferenceForKey:(struct __CFString { }*)arg1 defaultValue:(bool)arg2;
- (id)_completeSystemVibrationsSubdirectoryForSubdirectory:(id)arg1;
- (id)_currentVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2;
- (id)_currentVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2 correspondingToneIdentifier:(id)arg3;
- (id)_currentVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2 correspondingToneIdentifier:(id)arg3 allowsNoneDefaultToAnyActualVibrationSubstitution:(bool)arg4;
- (long long)_currentVibrationWatchAlertPolicyForAlertType:(long long)arg1;
- (long long)_currentVibrationWatchAlertPolicyForAlertType:(long long)arg1 accountIdentifier:(id)arg2;
- (long long)_currentVibrationWatchAlertPolicyForAlertType:(long long)arg1 topic:(id)arg2;
- (long long)_currentVibrationWatchAlertPolicyForAlertType:(long long)arg1 topic:(id)arg2 didFindPersistedWatchAlertPolicy:(bool*)arg3;
- (id)_currentVibrationWatchAlertPolicyPreferenceKeyForAlertType:(long long)arg1 topic:(id)arg2;
- (id)_defaultPreferablyNonSilentVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2 correspondingToneIdentifier:(id)arg3;
- (id)_defaultVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2 correspondingToneIdentifier:(id)arg3;
- (void)_didChangeUserGeneratedVibrationPatterns;
- (void)_didSetVibrationPreferenceSuccessfullyWithKey:(id)arg1 inDomain:(id)arg2 usingPreferencesOfKind:(unsigned long long)arg3;
- (void)_handleUserGeneratedVibrationsDidChangeNotification;
- (id)_initWithSpecialBehaviors:(unsigned long long)arg1;
- (bool)_isUnitTestingModeEnabled;
- (id)_localizedNameForVibrationWithIdentifier:(id)arg1;
- (void)_makeSystemVibrationDataMigrationVersionCurrentIfNecessary;
- (bool)_migrateLegacySettings;
- (id)_nameOfVibrationWithIdentifier:(id)arg1;
- (id)_newServiceConnection;
- (unsigned long long)_numberOfUserGeneratedVibrations;
- (id)_patternForSystemVibrationWithIdentifier:(id)arg1 shouldLogAssetPath:(bool)arg2;
- (void)_performBlockInAccessQueue:(id /* block */)arg1;
- (bool)_removeAllUserGeneratedVibrationPatternsUsingServiceWithError:(id*)arg1;
- (bool)_removeAllUserGeneratedVibrationsWithError:(id*)arg1;
- (id)_retrieveUserGeneratedVibrationPatternsUsingService;
- (id)_sanitizeVibrationIdentifier:(id)arg1 forAlertType:(long long)arg2 topic:(id)arg3 correspondingToneIdentifier:(id)arg4 didFallbackToCurrentVibrationIdentifier:(bool*)arg5;
- (id)_sanitizeVibrationIdentifier:(id)arg1 forAlertType:(long long)arg2 topic:(id)arg3 correspondingToneIdentifier:(id)arg4 useDefaultVibrationAsFallback:(bool)arg5 allowsNoneDefaultToAnyActualVibrationSubstitution:(bool)arg6 didFallback:(bool*)arg7;
- (bool)_saveUserGeneratedVibrationPatterns:(id)arg1 error:(id*)arg2;
- (void)_setCurrentVibrationWatchAlertPolicy:(long long)arg1 forAlertType:(long long)arg2;
- (void)_setCurrentVibrationWatchAlertPolicy:(long long)arg1 forAlertType:(long long)arg2 accountIdentifier:(id)arg3;
- (void)_setCurrentVibrationWatchAlertPolicy:(long long)arg1 forAlertType:(long long)arg2 topic:(id)arg3;
- (bool)_setUserGeneratedVibrationPatternsUsingService:(id)arg1 error:(id*)arg2;
- (unsigned long long)_storedSystemVibrationDataMigrationVersion;
- (id)_synchronizedVibrationIdentifierForToneIdentifier:(id)arg1;
- (id)_systemVibrationIdentifiersForSubdirectory:(id)arg1;
- (id)_systemWideVibrationPatternPreferenceKeyForAlertType:(long long)arg1;
- (id)_userGeneratedVibrationPatterns;
- (bool)_vibrationIsSettableForAlertType:(long long)arg1;
- (id)addUserGeneratedVibrationPattern:(id)arg1 name:(id)arg2 error:(id*)arg3;
- (id)allUserGeneratedVibrationIdentifiers;
- (id)allUserSelectableSystemVibrationIdentifiers;
- (bool)allowsAutoRefresh;
- (id)currentVibrationIdentifierForAlertType:(long long)arg1;
- (id)currentVibrationIdentifierForAlertType:(long long)arg1 accountIdentifier:(id)arg2;
- (id)currentVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2;
- (id)currentVibrationNameForAlertType:(long long)arg1;
- (id)currentVibrationPatternForAlertType:(long long)arg1;
- (void)dealloc;
- (id)defaultVibrationIdentifierForAlertType:(long long)arg1;
- (id)defaultVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2;
- (id)defaultVibrationNameForAlertType:(long long)arg1;
- (id)defaultVibrationPatternForAlertType:(long long)arg1;
- (bool)deleteUserGeneratedVibrationPatternWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)hasSpecificDefaultVibrationIdentifierForAlertType:(long long)arg1 topic:(id)arg2;
- (id)init;
- (id)nameOfVibrationWithIdentifier:(id)arg1;
- (bool)needsRefresh;
- (id)noneVibrationName;
- (id)noneVibrationPattern;
- (id)patternForVibrationWithIdentifier:(id)arg1;
- (id)patternForVibrationWithIdentifier:(id)arg1 repeating:(bool)arg2;
- (bool)refresh;
- (void)setAllowsAutoRefresh:(bool)arg1;
- (void)setCurrentVibrationIdentifier:(id)arg1 forAlertType:(long long)arg2;
- (void)setCurrentVibrationIdentifier:(id)arg1 forAlertType:(long long)arg2 accountIdentifier:(id)arg3;
- (void)setCurrentVibrationIdentifier:(id)arg1 forAlertType:(long long)arg2 topic:(id)arg3;
- (bool)setName:(id)arg1 forUserGeneratedVibrationWithIdentifier:(id)arg2 error:(id*)arg3;
- (bool)shouldVibrateForCurrentRingerSwitchState;
- (bool)shouldVibrateOnRing;
- (bool)shouldVibrateOnSilent;
- (bool)vibrationWithIdentifierIsValid:(id)arg1;

// Image: /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard

- (bool)_bb_isVibrationEnabledForAlertType:(long long)arg1 topic:(id)arg2;
- (bool)bb_isVibrationEnabledForSectionInfo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
