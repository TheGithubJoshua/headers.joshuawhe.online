<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CRKClassSessionBrowser.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ClassroomKit.framework/CRKClassSessionBrowser.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ClassroomKit.framework/ClassroomKit (1)
 */

@interface CRKClassSessionBrowser : NSObject <CATNetworkReachabilityDelegate, CRKClassSessionBeaconBrowserDelegate, CRKSessionDelegate> {
    bool  _allowInvitationSessions;
    bool  _allowUnenrolledSessions;
    <CRKClassSessionBrowserDelegate> * _delegate;
    NSSet * _enrolledControlGroupIdentifiers;
    <CRKInvitationSessionBrowserDelegate> * _invitationSessionDelegate;
    NSSet * _organizationUUIDs;
    CRKClassSessionBeaconBrowser * mBeaconBrowser;
    NSMutableDictionary * mClassSessionsByIdentifier;
    NSMutableDictionary * mConnectWithoutBeaconAssertionCountByInviteSessionEndpoint;
    NSMutableDictionary * mConnectWithoutBeaconAssertionCountBySessionIdentifier;
    NSMutableArray * mInRangeClassSessions;
    NSMutableDictionary * mInvitationSessionsByEndpoint;
    CATNetworkReachability * mNetworkReachability;
    NSMapTable * mWhitelistedEndpointsBySessionClass;
}

@property (nonatomic) bool allowInvitationSessions;
@property (nonatomic) bool allowUnenrolledSessions;
@property (getter=isBrowsing, nonatomic, readonly) bool browsing;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CRKClassSessionBrowserDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSSet *enrolledControlGroupIdentifiers;
@property (readonly) unsigned long long hash;
@property (nonatomic) <CRKInvitationSessionBrowserDelegate> *invitationSessionDelegate;
@property (nonatomic, copy) NSSet *organizationUUIDs;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)acquireConnectWithoutBeaconAssertionForInvitationSessionWithEndpoint:(id)arg1;
- (void)acquireConnectWithoutBeaconAssertionForSessionIdentifier:(id)arg1;
- (void)addInRangeClassSession:(id)arg1;
- (bool)allowInvitationSessions;
- (bool)allowUnenrolledSessions;
- (void)assertPort:(unsigned short)arg1 canBeWhitelistedForHost:(id)arg2 sessionClass:(Class)arg3;
- (void)beaconBrowser:(id)arg1 didFailWithError:(id)arg2;
- (void)beaconBrowser:(id)arg1 didFindBeaconForClassSession:(id)arg2 flags:(unsigned short)arg3;
- (void)beaconBrowser:(id)arg1 didFindBeaconForInvitationSessionWithEndpoint:(id)arg2;
- (id)browserStateDictionary;
- (void)classSessionInvalidated:(id)arg1;
- (void)classSessionRejected:(id)arg1;
- (id)clientIdentityForSession:(id)arg1;
- (void)connectToClassSessionWithIdentifier:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (void)delegateClassSessionDidBecomeConnectable:(id)arg1;
- (void)delegateClassSessionDidBecomeNotConnectable:(id)arg1;
- (void)delegateDidFailWithError:(id)arg1;
- (void)delegateDidFindClassSession:(id)arg1 transport:(id)arg2;
- (void)delegateDidFindInvitationSession:(id)arg1 transport:(id)arg2;
- (void)delegateDidRemoveClassSession:(id)arg1;
- (void)delegateDidRemoveInvitationSession:(id)arg1;
- (void)delegateInRangeClassSessionsDidChange;
- (void)delegateLostConnectionToClassSession:(id)arg1;
- (void)delegateLostConnectionToInvitationSession:(id)arg1;
- (id)delegateNeedsClientIdentityForGroup:(id)arg1;
- (id)delegateNeedsClientIdentityInvitationSession;
- (id)delegateNeedsTrustedAnchorCertificatesForGroup:(id)arg1;
- (void)dewhitelistEndpoint:(id)arg1 forSessionClass:(Class)arg2;
- (id)enrolledControlGroupIdentifiers;
- (bool)hasConnectionToClassWithIdentifier:(id)arg1;
- (id)init;
- (id)invitationSessionDelegate;
- (void)invitationSessionWithEndpointInvalidated:(id)arg1;
- (bool)isBrowsing;
- (bool)isEndpointWhitelisted:(id)arg1 forSessionClass:(Class)arg2;
- (void)lostConnectionToClassSession:(id)arg1;
- (void)lostConnectionToInvitationSessionWithEndpoint:(id)arg1;
- (id)organizationUUIDs;
- (void)reachabilityDidChange:(id)arg1;
- (void)releaseConnectWithoutBeaconAssertionForInvitationSessionWithEndpoint:(id)arg1;
- (void)releaseConnectWithoutBeaconAssertionForSessionIdentifier:(id)arg1;
- (void)removeInRangeClassSession:(id)arg1;
- (void)session:(id)arg1 didConnectWithTransport:(id)arg2;
- (void)session:(id)arg1 willLoseBeaconAfterTimeInterval:(double)arg2;
- (void)sessionDidBecomeConnectable:(id)arg1;
- (void)sessionDidBecomeNotConnectable:(id)arg1;
- (void)sessionDidDisconnect:(id)arg1;
- (void)sessionDidInvalidate:(id)arg1;
- (void)sessionDidLoseBeacon:(id)arg1;
- (id)sessionsForClass:(Class)arg1;
- (void)setAllowInvitationSessions:(bool)arg1;
- (void)setAllowUnenrolledSessions:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnrolledControlGroupIdentifiers:(id)arg1;
- (void)setInvitationSessionDelegate:(id)arg1;
- (void)setOrganizationUUIDs:(id)arg1;
- (void)startBrowsing;
- (id)stateDictionariesByClassSessionIdentifierString;
- (void)stopBrowsing;
- (id)trustedAnchorCertificatesForSession:(id)arg1;
- (void)updateConnectedSessions;
- (void)updateRequiresBeaconFlagForSession:(id)arg1;
- (void)whitelistEndpointAndInvalidateNonWhitelistedSessionsOnSameHost:(id)arg1 forSessionClass:(Class)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
