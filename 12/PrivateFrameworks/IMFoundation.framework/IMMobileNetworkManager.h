<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMMobileNetworkManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMFoundation.framework/IMMobileNetworkManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation (1000)
 */

@interface IMMobileNetworkManager : IMNetworkManager <CoreTelephonyClientDataDelegate, RadiosPreferencesDelegate> {
    void * _cellAssertion;
    NSMutableSet * _cellAutoAssociationTokens;
    CoreTelephonyClient * _coreTelephonyClient;
    struct __CTServerConnection { } * _ctServerConnection;
    bool  _isDataContextActive;
    bool  _isDataContextAttached;
    bool  _isDataContextUsable;
    bool  _isDataIndicatorNone;
    NSRecursiveLock * _lock;
    RadiosPreferences * _radiosPreferences;
    bool  _registered;
    bool  _shouldBringUpDataContext;
    NSMutableSet * _wiFiAutoAssociationTokens;
}

@property (nonatomic) void*_cellAssertion;
@property (nonatomic, retain) CoreTelephonyClient *_coreTelephonyClient;
@property (nonatomic) struct __CTServerConnection { }*_ctServerConnection;
@property (nonatomic, retain) RadiosPreferences *_radiosPreferences;
@property (nonatomic, readonly) bool autoAssociateCellular;
@property (nonatomic, readonly) bool autoAssociateWiFi;
@property (nonatomic, retain) NSMutableSet *cellularAutoAssociationTokens;
@property (nonatomic, readonly) bool dataConnectionExists;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool disableFastDormancy;
@property (nonatomic, readonly) bool has2GDataConnection;
@property (nonatomic, readonly) bool hasLTEDataConnection;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool inValidSIMState;
@property (nonatomic, readonly) bool isAirplaneModeEnabled;
@property (nonatomic, readonly) bool isDataConnectionActive;
@property (nonatomic) bool isDataContextActive;
@property (nonatomic) bool isDataContextAttached;
@property (nonatomic) bool isDataContextUsable;
@property (nonatomic) bool isDataIndicatorNone;
@property (nonatomic, readonly) bool isDataSwitchEnabled;
@property (nonatomic, readonly) bool isHostingWiFiHotSpot;
@property (nonatomic, readonly) bool isSIMLocked;
@property (nonatomic, readonly) bool isSIMRemoved;
@property (nonatomic, readonly) bool isWiFiAssociated;
@property (nonatomic, readonly) bool isWiFiCaptive;
@property (nonatomic, readonly) bool isWiFiEnabled;
@property (nonatomic, readonly) bool isWiFiUsable;
@property (nonatomic, retain) NSRecursiveLock *lock;
@property (nonatomic) bool registered;
@property (nonatomic, readonly) bool requiresSIMInserted;
@property (nonatomic) bool shouldBringUpDataContext;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSMutableSet *wiFiAutoAssociationTokens;
@property (nonatomic, readonly, retain) NSNumber *wiFiScaledRSSI;
@property (nonatomic, readonly, retain) NSNumber *wiFiScaledRate;
@property (nonatomic, readonly, retain) NSNumber *wiFiSignalStrength;
@property (nonatomic, readonly) bool willTryToAutoAssociateWiFiNetwork;
@property (nonatomic, readonly) bool willTryToSearchForWiFiNetwork;

- (void)_adjustCellularAutoAssociation;
- (void*)_cellAssertion;
- (id)_coreTelephonyClient;
- (void)_createCTServerConnection;
- (struct __CTServerConnection { }*)_ctServerConnection;
- (id)_dataCTXPCServiceSubscriptionContext;
- (void)_initializeDataState;
- (bool)_isDataCTXPCServiceSubscriptionContext:(id)arg1;
- (bool)_isDataConnectionAvailable;
- (bool)_legacy_inValidSIMState;
- (void)_lockedAdjustCellularAutoAssociation;
- (void)_locked_recalculateDataContextUsableAndPostNotificationIfNeeded:(bool)arg1;
- (void)_locked_updateDataConnectionStateWithContext:(id)arg1;
- (void)_locked_updateDataStateBasedOnDataConnectionStatus:(id)arg1;
- (void)_locked_updateDataStateBasedOnDataStatus:(id)arg1;
- (void)_locked_updateDataStateWithContext:(id)arg1;
- (void)_makeDataConnectionAvailable:(bool)arg1;
- (id)_radiosPreferences;
- (void)_releaseCTServerConnection;
- (id)_telephonyDataSIMStatus;
- (void)addCellularAutoAssociationClientToken:(id)arg1;
- (void)addFastDormancyDisableToken:(id)arg1;
- (void)addWiFiAutoAssociationClientToken:(id)arg1;
- (void)airplaneModeChanged;
- (bool)autoAssociateCellular;
- (bool)autoAssociateWiFi;
- (id)cellularAutoAssociationTokens;
- (void)connectionActivationError:(id)arg1 connection:(int)arg2 error:(int)arg3;
- (void)connectionStateChanged:(id)arg1 connection:(int)arg2 dataConnectionStatusInfo:(id)arg3;
- (void)cutWiFiManagerLinkDidChange:(id)arg1 context:(id)arg2;
- (bool)dataConnectionExists;
- (void)dataStatus:(id)arg1 dataStatusInfo:(id)arg2;
- (void)dealloc;
- (bool)disableFastDormancy;
- (bool)has2GDataConnection;
- (bool)hasLTEDataConnection;
- (bool)inValidSIMState;
- (id)init;
- (bool)isAirplaneModeEnabled;
- (bool)isDataConnectionActive;
- (bool)isDataContextActive;
- (bool)isDataContextAttached;
- (bool)isDataContextUsable;
- (bool)isDataIndicatorNone;
- (bool)isDataSwitchEnabled;
- (bool)isHostingWiFiHotSpot;
- (bool)isSIMLocked;
- (bool)isSIMRemoved;
- (bool)isWiFiAssociated;
- (bool)isWiFiCaptive;
- (bool)isWiFiEnabled;
- (bool)isWiFiUsable;
- (id)lock;
- (bool)registered;
- (void)removeCellularAutoAssociationClientToken:(id)arg1;
- (void)removeFastDormancyDisableToken:(id)arg1;
- (void)removeWiFiAutoAssociationClientToken:(id)arg1;
- (bool)requiresSIMInserted;
- (void)setCellularAutoAssociationTokens:(id)arg1;
- (void)setDataConnectionActive:(bool)arg1;
- (void)setIsDataContextActive:(bool)arg1;
- (void)setIsDataContextAttached:(bool)arg1;
- (void)setIsDataContextUsable:(bool)arg1;
- (void)setIsDataIndicatorNone:(bool)arg1;
- (void)setLock:(id)arg1;
- (void)setRegistered:(bool)arg1;
- (void)setShouldBringUpDataContext:(bool)arg1;
- (void)setWiFiAutoAssociationTokens:(id)arg1;
- (void)set_cellAssertion:(void*)arg1;
- (void)set_coreTelephonyClient:(id)arg1;
- (void)set_ctServerConnection:(struct __CTServerConnection { }*)arg1;
- (void)set_radiosPreferences:(id)arg1;
- (bool)shouldBringUpDataContext;
- (void)showNetworkOptions;
- (void)showSIMUnlock;
- (id)wiFiAutoAssociationTokens;
- (id)wiFiScaledRSSI;
- (id)wiFiScaledRate;
- (id)wiFiSignalStrength;
- (bool)willTryToAutoAssociateWiFiNetwork;
- (bool)willTryToSearchForWiFiNetwork;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
