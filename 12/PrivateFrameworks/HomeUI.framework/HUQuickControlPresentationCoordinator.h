<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HUQuickControlPresentationCoordinator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeUI.framework/HUQuickControlPresentationCoordinator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeUI.framework/HomeUI (1)
 */

@interface HUQuickControlPresentationCoordinator : NSObject <HUPresentationDelegate, HUQuickControlContainerViewControllerDelegate, UIGestureRecognizerDelegate, UITraitEnvironment> {
    <HUQuickControlPresentationCoordinatorDelegate> * _delegate;
    UITapGestureRecognizer * _doubleTapGestureRecognizer;
    NSMutableSet * _mutuallyExclusiveGestureRecognizers;
    HUQuickControlPresentationContext * _presentationContext;
    <NACancelable> * _pressGestureActiveTimerCancellationToken;
    HUForceInterpolatedPressGestureRecognizer * _pressGestureRecognizer;
    NSMapTable * _pressedItemContexts;
    HUQuickControlContainerViewController * _quickControlViewController;
    UITapGestureRecognizer * _singleTapGestureRecognizer;
    UIView * _targetView;
}

@property (nonatomic, readonly) HUPressedItemContext *activePressedItemContext;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <HUQuickControlPresentationCoordinatorDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSMutableSet *mutuallyExclusiveGestureRecognizers;
@property (nonatomic, retain) HUQuickControlPresentationContext *presentationContext;
@property (nonatomic, readonly) UIViewController *presentingViewController;
@property (nonatomic, retain) <NACancelable> *pressGestureActiveTimerCancellationToken;
@property (nonatomic, retain) HUForceInterpolatedPressGestureRecognizer *pressGestureRecognizer;
@property (nonatomic, readonly) NSMapTable *pressedItemContexts;
@property (getter=isQuickControlPresented, nonatomic, readonly) bool quickControlIsPresented;
@property (nonatomic, retain) HUQuickControlContainerViewController *quickControlViewController;
@property (nonatomic, retain) UITapGestureRecognizer *singleTapGestureRecognizer;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIView *targetView;
@property (nonatomic, readonly) UITraitCollection *traitCollection;

- (void).cxx_destruct;
- (void)_actuateTapticFeedbackIfAvailable;
- (id)_beginControlPresentationAnimated:(bool)arg1;
- (void)_cleanupForQuickControlDismissal;
- (void)_configureInitialStateForPressedItemContext:(id)arg1 userInitiated:(bool)arg2;
- (id)_createPressedContextForItem:(id)arg1 userInitiated:(bool)arg2;
- (id)_dismissQuickControlViewControllerAnimated:(bool)arg1;
- (void)_endUsingTapticFeedbackIfAvailable;
- (id)_gestureInstallationView;
- (void)_handleDoubleTapGesture:(id)arg1;
- (void)_handleMutuallyExclusiveGesture:(id)arg1;
- (void)_handlePressGesture:(id)arg1;
- (void)_handleSingleTapGesture:(id)arg1;
- (void)_initiateProgrammaticBounceForItem:(id)arg1;
- (void)_installGestureRecognizer;
- (void)_logUserMetricsAfterPress;
- (void)_prepareForTapticFeedbackIfAvailable;
- (void)_preparePressedItemContextForItem:(id)arg1 startApplier:(bool)arg2;
- (void)_pressGestureDidBecomeActive;
- (void)_pressGestureDidBeginWithLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_pressGestureDidEnd:(bool)arg1;
- (void)_pressedStateDidEndForItem:(id)arg1 clearPresentationContext:(bool)arg2;
- (void)_updateOverrideAttributesWithScale:(double)arg1 forItem:(id)arg2;
- (void)_updateOverrideAttributesWithTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1 alpha:(double)arg2 forItem:(id)arg3;
- (void)_validatePresentationContext:(id)arg1;
- (id)activePressedItemContext;
- (void)addMutuallyExclusiveGestureRecognizer:(id)arg1;
- (id)delegate;
- (id)detailsViewControllerForQuickControlViewController:(id)arg1 item:(id)arg2;
- (id)dismissQuickControlAnimated:(bool)arg1;
- (id)dismissQuickControlAnimated:(bool)arg1 wasDismissed:(bool*)arg2;
- (id)doubleTapGestureRecognizer;
- (id)finishPresentation:(id)arg1 animated:(bool)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRequireFailureOfGestureRecognizer:(id)arg2;
- (bool)hasDetailsActionForQuickControlViewController:(id)arg1 item:(id)arg2;
- (id)initWithTargetView:(id)arg1 delegate:(id)arg2;
- (bool)isQuickControlPresented;
- (id)mutuallyExclusiveGestureRecognizers;
- (void)playBounceForItem:(id)arg1;
- (id)presentQuickControlWithContext:(id)arg1 animated:(bool)arg2;
- (id)presentationContext;
- (id)presentingViewController;
- (id)pressGestureActiveTimerCancellationToken;
- (id)pressGestureRecognizer;
- (id)pressedItemContexts;
- (id)quickControlViewController;
- (id)quickControlViewController:(id)arg1 applierForSourceViewTransitionWithAnimationSettings:(id)arg2 presenting:(bool)arg3;
- (double)quickControlViewController:(id)arg1 sourceViewInitialScaleForPresentation:(bool)arg2;
- (void)quickControlViewControllerWillDismissDetailsViewController:(id)arg1 shouldDismissQuickControl:(bool)arg2;
- (void)removeMutuallyExclusiveGestureRecognizer:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDoubleTapGestureRecognizer:(id)arg1;
- (void)setPresentationContext:(id)arg1;
- (void)setPressGestureActiveTimerCancellationToken:(id)arg1;
- (void)setPressGestureRecognizer:(id)arg1;
- (void)setQuickControlViewController:(id)arg1;
- (void)setSingleTapGestureRecognizer:(id)arg1;
- (id)singleTapGestureRecognizer;
- (id)targetView;
- (id)traitCollection;
- (void)traitCollectionDidChange:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
