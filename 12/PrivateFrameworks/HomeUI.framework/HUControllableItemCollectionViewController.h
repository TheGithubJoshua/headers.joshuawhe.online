<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HUControllableItemCollectionViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeUI.framework/HUControllableItemCollectionViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeUI.framework/HomeUI (1)
 */

@interface HUControllableItemCollectionViewController : HUItemCollectionViewController <HUQuickControlPresentationCoordinatorDelegate, HUQuickControlPresentationHost, UIGestureRecognizerDelegate> {
    NSMutableDictionary * _actionSetExecutionFuturesKeyedByIdentifier;
    UIViewController<HUQuickControlPresentationHost> * _ancestorQuickControlHostAtPresentationTime;
    unsigned long long  _contentColorStyle;
    UIGestureRecognizer * _contextualTapGestureRecognizer;
    HUQuickControlPresentationCoordinator * _quickControlPresentationCoordinator;
    UILongPressGestureRecognizer * _reorderGestureRecognizer;
    HFItem<NSCopying> * _selectedContextualMenuItem;
    bool  _suppressCollectionViewUpdatesForReorderCommit;
    bool  _viewAppeared;
}

@property (nonatomic, retain) NSMutableDictionary *actionSetExecutionFuturesKeyedByIdentifier;
@property (nonatomic) UIViewController<HUQuickControlPresentationHost> *ancestorQuickControlHostAtPresentationTime;
@property (nonatomic, readonly) UICollectionViewLayout<HUControllableCollectionViewLayout> *collectionViewLayout;
@property (nonatomic, readonly) unsigned long long contentColorStyle;
@property (nonatomic, retain) UIGestureRecognizer *contextualTapGestureRecognizer;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) HFItemManager *itemManager;
@property (nonatomic, retain) HUQuickControlPresentationCoordinator *quickControlPresentationCoordinator;
@property (nonatomic, retain) UILongPressGestureRecognizer *reorderGestureRecognizer;
@property (nonatomic, retain) HFItem<NSCopying> *selectedContextualMenuItem;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressCollectionViewUpdatesForReorderCommit;
@property (nonatomic) bool viewAppeared;

- (void).cxx_destruct;
- (id)_ancestorQuickControlPresentationHost;
- (void)_handleApplicationWillResignActiveNotification:(id)arg1;
- (void)_handleContextualGesture:(id)arg1;
- (void)_handleReorderGesture:(id)arg1;
- (bool)_hasTapActionForItem:(id)arg1;
- (id)_itemForServiceControlPresentationAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_itemSetDidChange;
- (void)_logUserMetricsAfterTapOfItem:(id)arg1;
- (id)_performTapActionForItem:(id)arg1;
- (void)_reorderGestureDidBegin:(id)arg1;
- (void)_reorderGestureDidChange:(id)arg1;
- (void)_reorderGestureDidEnd:(id)arg1 finished:(bool)arg2;
- (void)_showQuickControlsForSelectedMenuItem;
- (void)_showSettingsForSelectedMenuItem;
- (void)_updateEditingStateForCell:(id)arg1;
- (void)_updateReorderingGestureRecognizer;
- (id)_visibleCellForItem:(id)arg1;
- (id)actionSetExecutionFuturesKeyedByIdentifier;
- (bool)alwaysAllowReordering;
- (id)ancestorQuickControlHostAtPresentationTime;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canReorderItemAtIndexPath:(id)arg1;
- (void)childViewController:(id)arg1 didEndQuickControlsPresentation:(id)arg2;
- (void)childViewController:(id)arg1 willBeginQuickControlsPresentation:(id)arg2;
- (bool)collectionView:(id)arg1 canMoveItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 moveItemAtIndexPath:(id)arg2 toIndexPath:(id)arg3;
- (bool)collectionView:(id)arg1 shouldHighlightItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 targetIndexPathForMoveFromItemAtIndexPath:(id)arg2 toProposedIndexPath:(id)arg3;
- (void)configureCell:(id)arg1 forItem:(id)arg2;
- (unsigned long long)contentColorStyle;
- (id)contextualTapGestureRecognizer;
- (id)customContextualMenuItemsForItem:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)hasDetailsActionForPresentationCoordinator:(id)arg1 item:(id)arg2;
- (id)initWithItemManager:(id)arg1 collectionViewLayout:(id)arg2;
- (void)itemManager:(id)arg1 didMoveItem:(id)arg2 fromIndexPath:(id)arg3 toIndexPath:(id)arg4;
- (void)itemManager:(id)arg1 performUpdateRequest:(id)arg2;
- (id)prepareToPerformToggleActionForItem:(id)arg1 sourceItem:(id)arg2;
- (void)presentationCoordinator:(id)arg1 applyOverrideAttributes:(id)arg2 toItem:(id)arg3;
- (void)presentationCoordinator:(id)arg1 clearOverrideAttributesForItem:(id)arg2;
- (id)presentationCoordinator:(id)arg1 contextForPresentationAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)presentationCoordinator:(id)arg1 didEndPresentationWithContext:(id)arg2;
- (void)presentationCoordinator:(id)arg1 didRecognizeTapForItem:(id)arg2;
- (bool)presentationCoordinator:(id)arg1 shouldBeginInteractivePresentationWithTouchLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)presentationCoordinator:(id)arg1 willBeginPresentationWithContext:(id)arg2;
- (id)quickControlPresentationContextForItem:(id)arg1 atIndexPath:(id)arg2;
- (id)quickControlPresentationCoordinator;
- (id)reorderGestureRecognizer;
- (id)reorderableHomeKitItemListForSection:(long long)arg1;
- (id)selectedContextualMenuItem;
- (void)setActionSetExecutionFuturesKeyedByIdentifier:(id)arg1;
- (void)setAncestorQuickControlHostAtPresentationTime:(id)arg1;
- (void)setContentColorStyle:(unsigned long long)arg1;
- (void)setContextualTapGestureRecognizer:(id)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setExecutionFuture:(id)arg1 forActionSet:(id)arg2;
- (void)setQuickControlPresentationCoordinator:(id)arg1;
- (void)setReorderGestureRecognizer:(id)arg1;
- (void)setReorderableHomeKitItemList:(id)arg1 forSection:(long long)arg2;
- (void)setSelectedContextualMenuItem:(id)arg1;
- (void)setSuppressCollectionViewUpdatesForReorderCommit:(bool)arg1;
- (void)setViewAppeared:(bool)arg1;
- (bool)suppressCollectionViewUpdatesForReorderCommit;
- (void)traitCollectionDidChange:(id)arg1;
- (id)traitCollectionForPresentationCoordinator:(id)arg1;
- (bool)viewAppeared;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
