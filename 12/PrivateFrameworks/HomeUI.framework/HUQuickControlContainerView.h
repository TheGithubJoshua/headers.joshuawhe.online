<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HUQuickControlContainerView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeUI.framework/HUQuickControlContainerView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeUI.framework/HomeUI (1)
 */

@interface HUQuickControlContainerView : UIView {
    UIView * _activeControlView;
    HUPillButton * _alternateControlButton;
    NSString * _alternateControlButtonTitle;
    HUQuickControlAuxiliaryHostView * _auxiliaryHostView;
    _UIBackdropViewSettings * _blurSettings;
    UIView * _blurTintView;
    double  _blurTransitionProgress;
    _UIBackdropView * _blurView;
    HUQuickControlButtonRowView * _buttonRowView;
    double  _chromeTransitionProgress;
    NSLayoutConstraint * _compactControlBottomConstraint;
    NSArray * _contentConstraints;
    UILayoutGuide * _contentToAuxiliarySpacingLayoutGuide;
    HUControlHostView * _controlHostView;
    double  _controlTransitionProgress;
    UILayoutGuide * _controlViewLayoutGuide;
    UILayoutGuide * _controlViewPreferredFrameLayoutGuide;
    bool  _controlViewSupportsTransformTransition;
    <HUQuickControlContainerViewDelegate> * _delegate;
    HUPillButton * _detailsButton;
    unsigned long long  _edgesForExtendedLayout;
    double  _initialSourceViewScale;
    bool  _shouldShowActiveControl;
    bool  _shouldShowAlternateControlButton;
    bool  _shouldShowDetailsButton;
    bool  _showAlternateControlButton;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sourceRect;
    HUQuickControlSummaryView * _summaryView;
    UILayoutGuide * _topToSummarySpacingLayoutGuide;
}

@property (nonatomic, retain) UIView *activeControlView;
@property (nonatomic, retain) HUPillButton *alternateControlButton;
@property (nonatomic, copy) NSString *alternateControlButtonTitle;
@property (nonatomic, retain) HUQuickControlAuxiliaryHostView *auxiliaryHostView;
@property (nonatomic, retain) _UIBackdropViewSettings *blurSettings;
@property (nonatomic, retain) UIView *blurTintView;
@property (nonatomic) double blurTransitionProgress;
@property (nonatomic, retain) _UIBackdropView *blurView;
@property (nonatomic, retain) HUQuickControlButtonRowView *buttonRowView;
@property (nonatomic) double chromeTransitionProgress;
@property (nonatomic, retain) NSLayoutConstraint *compactControlBottomConstraint;
@property (nonatomic, retain) NSArray *contentConstraints;
@property (nonatomic, retain) UILayoutGuide *contentToAuxiliarySpacingLayoutGuide;
@property (nonatomic, retain) HUControlHostView *controlHostView;
@property (nonatomic) double controlTransitionProgress;
@property (nonatomic, retain) UILayoutGuide *controlViewLayoutGuide;
@property (nonatomic, retain) UILayoutGuide *controlViewPreferredFrameLayoutGuide;
@property (nonatomic) bool controlViewSupportsTransformTransition;
@property (nonatomic, readonly) <HUQuickControlContainerViewDelegate> *delegate;
@property (nonatomic, retain) HUPillButton *detailsButton;
@property (nonatomic) unsigned long long edgesForExtendedLayout;
@property (nonatomic) double initialSourceViewScale;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } presentedControlFrame;
@property (nonatomic) bool shouldShowActiveControl;
@property (nonatomic) bool shouldShowAlternateControlButton;
@property (nonatomic) bool shouldShowDetailsButton;
@property (nonatomic) bool showAlternateControlButton;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } sourceRect;
@property (nonatomic, retain) HUQuickControlSummaryView *summaryView;
@property (nonatomic, retain) UILayoutGuide *topToSummarySpacingLayoutGuide;

+ (bool)requiresConstraintBasedLayout;

- (void).cxx_destruct;
- (void)_alternateControlButtonTapped:(id)arg1;
- (void)_configureCompactHeightConstraints:(id)arg1;
- (void)_configureControlViewLayoutGuideConstraints:(id)arg1;
- (void)_configureRegularHeightConstraints:(id)arg1;
- (struct CGPoint { double x1; double x2; })_controlHostCenter;
- (struct CGPoint { double x1; double x2; })_controlHostCenterForPresentationProgress:(double)arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_controlHostTransform;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_controlHostTransformForPresentationProgress:(double)arg1;
- (void)_detailsButtonTapped:(id)arg1;
- (struct CGSize { double x1; double x2; })_presentedControlHostSize;
- (void)_setupAlternateControlButtonIfNecessary;
- (void)_setupBlurView;
- (bool)_shouldShowControlView;
- (long long)_sizeSubclass;
- (double)_summaryFirstBaselineToControlTopSpacing;
- (void)_updateAlternateControlButtonTitle;
- (void)_updateAlternateControlButtonVisibility;
- (void)_updateCompactControlBottomConstraint;
- (void)_updateContentAlignment;
- (void)_updateControlHostLayout;
- (void)_updateLayoutMargins;
- (bool)_useCompactHeightLayout;
- (id)activeControlView;
- (id)alternateControlButton;
- (id)alternateControlButtonTitle;
- (id)auxiliaryHostView;
- (id)blurSettings;
- (id)blurTintView;
- (double)blurTransitionProgress;
- (id)blurView;
- (id)buttonRowView;
- (double)chromeTransitionProgress;
- (id)compactControlBottomConstraint;
- (id)contentConstraints;
- (id)contentToAuxiliarySpacingLayoutGuide;
- (id)controlHostView;
- (double)controlTransitionProgress;
- (id)controlViewLayoutGuide;
- (id)controlViewPreferredFrameLayoutGuide;
- (bool)controlViewSupportsTransformTransition;
- (id)delegate;
- (id)detailsButton;
- (unsigned long long)edgesForExtendedLayout;
- (void)hideAuxiliaryView;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 delegate:(id)arg2 sourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (double)initialSourceViewScale;
- (void)layoutMarginsDidChange;
- (void)layoutSubviews;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })presentedControlFrame;
- (void)setActiveControlView:(id)arg1;
- (void)setAlternateControlButton:(id)arg1;
- (void)setAlternateControlButtonTitle:(id)arg1;
- (void)setAuxiliaryHostView:(id)arg1;
- (void)setBlurSettings:(id)arg1;
- (void)setBlurTintView:(id)arg1;
- (void)setBlurTransitionProgress:(double)arg1;
- (void)setBlurView:(id)arg1;
- (void)setButtonRowView:(id)arg1;
- (void)setChromeTransitionProgress:(double)arg1;
- (void)setCompactControlBottomConstraint:(id)arg1;
- (void)setContentConstraints:(id)arg1;
- (void)setContentToAuxiliarySpacingLayoutGuide:(id)arg1;
- (void)setControlHostView:(id)arg1;
- (void)setControlTransitionProgress:(double)arg1;
- (void)setControlViewLayoutGuide:(id)arg1;
- (void)setControlViewPreferredFrameLayoutGuide:(id)arg1;
- (void)setControlViewSupportsTransformTransition:(bool)arg1;
- (void)setDetailsButton:(id)arg1;
- (void)setEdgesForExtendedLayout:(unsigned long long)arg1;
- (void)setInitialSourceViewScale:(double)arg1;
- (void)setShouldShowActiveControl:(bool)arg1;
- (void)setShouldShowAlternateControlButton:(bool)arg1;
- (void)setShouldShowDetailsButton:(bool)arg1;
- (void)setShowAlternateControlButton:(bool)arg1;
- (void)setSummaryView:(id)arg1;
- (void)setTopToSummarySpacingLayoutGuide:(id)arg1;
- (bool)shouldShowActiveControl;
- (bool)shouldShowAlternateControlButton;
- (bool)shouldShowDetailsButton;
- (bool)showAlternateControlButton;
- (void)showAuxiliaryView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sourceRect;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })sourceViewTransformForPresentationProgress:(double)arg1;
- (id)summaryView;
- (id)topToSummarySpacingLayoutGuide;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateConstraints;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
