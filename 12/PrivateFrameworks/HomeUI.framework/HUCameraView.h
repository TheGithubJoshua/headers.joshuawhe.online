<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HUCameraView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/HomeUI.framework/HUCameraView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/HomeUI.framework/HomeUI (1)
 */

@interface HUCameraView : UIView <UIScrollViewDelegate> {
    UIActivityIndicatorView * _activityIndicatorView;
    bool  _allowDigitalZoom;
    UIView * _backgroundView;
    NSLayoutConstraint * _badgeLeadingConstraint;
    struct UIOffset { 
        double horizontal; 
        double vertical; 
    }  _badgeOffset;
    NSLayoutYAxisAnchor * _badgeTopAnchor;
    NSLayoutConstraint * _badgeTopConstraint;
    HUCameraBadgeView * _badgeView;
    NSLayoutConstraint * _cameraAspectRatioConstraint;
    HURemoteContextHostingView * _cameraContainerView;
    UIView * _cameraDimmingView;
    UIView * _cameraOverlayView;
    UIImageView * _demoSnapshotImageView;
    UITapGestureRecognizer * _doubleTapRecognizer;
    HUCameraErrorContent * _errorContent;
    HUCameraErrorView * _errorView;
    unsigned long long  _maskedCameraCorners;
    HUCenteringScrollView * _scrollView;
    bool  _showActivityIndicator;
    NADecayingTimer * _snapshotAgeUpdateTimer;
    NSArray * _staticConstraints;
}

@property (nonatomic, retain) UIActivityIndicatorView *activityIndicatorView;
@property (nonatomic) bool allowDigitalZoom;
@property (nonatomic, retain) UIView *backgroundView;
@property (getter=isBadgeHidden, nonatomic) bool badgeHidden;
@property (nonatomic, retain) NSLayoutConstraint *badgeLeadingConstraint;
@property (nonatomic) struct UIOffset { double x1; double x2; } badgeOffset;
@property (nonatomic, retain) NSLayoutYAxisAnchor *badgeTopAnchor;
@property (nonatomic, retain) NSLayoutConstraint *badgeTopConstraint;
@property (nonatomic, readonly) HUCameraBadgeView *badgeView;
@property (nonatomic, retain) NSLayoutConstraint *cameraAspectRatioConstraint;
@property (nonatomic, readonly) HURemoteContextHostingView *cameraContainerView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cameraContentFrame;
@property (nonatomic) long long cameraContentMode;
@property (nonatomic, readonly) UIView *cameraContentSnapshot;
@property (nonatomic, retain) UIView *cameraDimmingView;
@property (nonatomic, readonly) UIView *cameraOverlaySnapshot;
@property (nonatomic, readonly) UIView *cameraOverlayView;
@property (nonatomic, retain) HMCameraSource *cameraSource;
@property (nonatomic, readonly) HMCameraView *cameraView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) UIImageView *demoSnapshotImageView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } derivedCameraContentFrame;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UITapGestureRecognizer *doubleTapRecognizer;
@property (nonatomic, retain) HUCameraErrorContent *errorContent;
@property (nonatomic, retain) HUCameraErrorView *errorView;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long maskedCameraCorners;
@property (nonatomic, retain) HUCenteringScrollView *scrollView;
@property (nonatomic) bool showActivityIndicator;
@property (nonatomic, retain) NADecayingTimer *snapshotAgeUpdateTimer;
@property (nonatomic, retain) NSArray *staticConstraints;
@property (readonly) Class superclass;

+ (bool)requiresConstraintBasedLayout;

- (void).cxx_destruct;
- (void)_adjustContentInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_computeZoomRectForLocation:(struct CGPoint { double x1; double x2; })arg1 andScale:(double)arg2;
- (double)_continuousCornerRadius;
- (void)_createTapRecognizer;
- (void)_handleTaps:(id)arg1;
- (void)_scheduleNextSnapshotAgeUpdateForCaptureDate:(id)arg1;
- (void)_setContinuousCornerRadius:(double)arg1;
- (void)_updateBadgeView;
- (void)_updateBadgeViewReschedulingTimerIfNecessary:(bool)arg1;
- (void)_updateErrorAndActivityIndicatorVisibilityAnimated:(bool)arg1;
- (void)_updateMaskedCameraCorners;
- (id)activityIndicatorView;
- (bool)allowDigitalZoom;
- (id)backgroundColor;
- (id)backgroundView;
- (id)badgeLeadingConstraint;
- (struct UIOffset { double x1; double x2; })badgeOffset;
- (id)badgeTopAnchor;
- (id)badgeTopConstraint;
- (id)badgeView;
- (id)cameraAspectRatioConstraint;
- (id)cameraContainerView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cameraContentFrame;
- (long long)cameraContentMode;
- (id)cameraContentSnapshot;
- (id)cameraDimmingView;
- (id)cameraOverlaySnapshot;
- (id)cameraOverlayView;
- (id)cameraSource;
- (id)cameraView;
- (void)dealloc;
- (id)demoSnapshotImageView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })derivedCameraContentFrame;
- (id)doubleTapRecognizer;
- (id)errorContent;
- (id)errorView;
- (id)init;
- (id)initWithBadgeView:(id)arg1;
- (bool)isBadgeHidden;
- (void)layoutSubviews;
- (unsigned long long)maskedCameraCorners;
- (void)resetCameraZoom;
- (id)scrollView;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)setActivityIndicatorView:(id)arg1;
- (void)setAllowDigitalZoom:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBackgroundView:(id)arg1;
- (void)setBadgeHidden:(bool)arg1;
- (void)setBadgeLeadingConstraint:(id)arg1;
- (void)setBadgeOffset:(struct UIOffset { double x1; double x2; })arg1;
- (void)setBadgeTopAnchor:(id)arg1;
- (void)setBadgeTopConstraint:(id)arg1;
- (void)setCameraAspectRatioConstraint:(id)arg1;
- (void)setCameraContentMode:(long long)arg1;
- (void)setCameraDimmingView:(id)arg1;
- (void)setCameraSource:(id)arg1;
- (void)setCameraSource:(id)arg1 animated:(bool)arg2;
- (void)setCameraSource:(id)arg1 withDemoSnapshotURL:(id)arg2 animated:(bool)arg3;
- (void)setDemoSnapshotImageView:(id)arg1;
- (void)setDoubleTapRecognizer:(id)arg1;
- (void)setErrorContent:(id)arg1;
- (void)setErrorContent:(id)arg1 animated:(bool)arg2;
- (void)setErrorView:(id)arg1;
- (void)setMaskedCameraCorners:(unsigned long long)arg1;
- (void)setScrollView:(id)arg1;
- (void)setShowActivityIndicator:(bool)arg1;
- (void)setShowActivityIndicator:(bool)arg1 animated:(bool)arg2;
- (void)setSnapshotAgeUpdateTimer:(id)arg1;
- (void)setStaticConstraints:(id)arg1;
- (bool)showActivityIndicator;
- (id)snapshotAgeUpdateTimer;
- (id)staticConstraints;
- (void)updateConstraints;
- (id)viewForZoomingInScrollView:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
