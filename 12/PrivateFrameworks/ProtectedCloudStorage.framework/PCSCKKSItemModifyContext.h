<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PCSCKKSItemModifyContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProtectedCloudStorage.framework/PCSCKKSItemModifyContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProtectedCloudStorage.framework/ProtectedCloudStorage (1)
 */

@interface PCSCKKSItemModifyContext : NSObject {
    id  _activityAssertion;
    struct _PCSIdentityData { } * _currentIdentity;
    NSData * _currentItemReference;
    NSString * _dsid;
    NSData * _existingItemReference;
    NSData * _existingItemSHA1;
    PCSLockAssertion * _lockAssertion;
    struct __PCSLogContext { } * _log;
    PCSMTT * _mtt;
    struct _PCSIdentityData { } * _relocateIdentity;
    int  _retryLeftCount;
    bool  _returnedExistingIdentity;
    bool  _roll;
    struct __CFDictionary { } * _rollAttributes;
    struct _PCSIdentityData { } * _rollIdentity;
    NSData * _rollItemReference;
    NSData * _rollItemSHA1;
    NSDate * _server_NextRollDate;
    NSString * _service;
    struct _PCSIdentitySetData { } * _set;
    bool  _sync;
    long long  _timeoutValue;
    NSObject<OS_os_transaction> * _transaction;
}

@property (retain) id activityAssertion;
@property struct _PCSIdentityData { }*currentIdentity;
@property (retain) NSData *currentItemReference;
@property (retain) NSString *dsid;
@property (retain) NSData *existingItemReference;
@property (retain) NSData *existingItemSHA1;
@property (retain) PCSLockAssertion *lockAssertion;
@property struct __PCSLogContext { }*log;
@property (readonly) PCSMTT *mtt;
@property struct _PCSIdentityData { }*relocateIdentity;
@property int retryLeftCount;
@property bool returnedExistingIdentity;
@property bool roll;
@property struct _PCSIdentityData { }*rollIdentity;
@property (retain) NSData *rollItemReference;
@property (retain) NSData *rollItemSHA1;
@property (retain) NSDate *server_NextRollDate;
@property (retain) NSString *service;
@property struct _PCSIdentitySetData { }*set;
@property bool sync;
@property long long timeoutValue;
@property (retain) NSObject<OS_os_transaction> *transaction;

- (void).cxx_destruct;
- (id)activityAssertion;
- (struct _PCSIdentityData { }*)currentIdentity;
- (id)currentItemReference;
- (void)dealloc;
- (id)dsid;
- (id)existingItemReference;
- (id)existingItemSHA1;
- (id)init;
- (id)lockAssertion;
- (struct __PCSLogContext { }*)log;
- (id)mtt;
- (struct _PCSIdentityData { }*)relocateIdentity;
- (void)resetIdentities;
- (int)retryLeftCount;
- (bool)returnedExistingIdentity;
- (bool)roll;
- (struct _PCSIdentityData { }*)rollIdentity;
- (id)rollItemReference;
- (id)rollItemSHA1;
- (id)server_NextRollDate;
- (id)service;
- (struct _PCSIdentitySetData { }*)set;
- (void)setActivityAssertion:(id)arg1;
- (void)setCurrentIdentity:(struct _PCSIdentityData { }*)arg1;
- (void)setCurrentItemReference:(id)arg1;
- (void)setDsid:(id)arg1;
- (void)setExistingItemReference:(id)arg1;
- (void)setExistingItemSHA1:(id)arg1;
- (void)setLockAssertion:(id)arg1;
- (void)setLog:(struct __PCSLogContext { }*)arg1;
- (void)setRelocateIdentity:(struct _PCSIdentityData { }*)arg1;
- (void)setRetryLeftCount:(int)arg1;
- (void)setReturnedExistingIdentity:(bool)arg1;
- (void)setRoll:(bool)arg1;
- (void)setRollIdentity:(struct _PCSIdentityData { }*)arg1;
- (void)setRollItemReference:(id)arg1;
- (void)setRollItemSHA1:(id)arg1;
- (void)setServer_NextRollDate:(id)arg1;
- (void)setService:(id)arg1;
- (void)setSet:(struct _PCSIdentitySetData { }*)arg1;
- (void)setSync:(bool)arg1;
- (void)setTimeoutValue:(long long)arg1;
- (void)setTransaction:(id)arg1;
- (bool)sync;
- (long long)timeoutValue;
- (id)transaction;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
