<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UserRegistryDB.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ProtectedCloudStorage.framework/UserRegistryDB.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ProtectedCloudStorage.framework/ProtectedCloudStorage (1)
 */

@interface UserRegistryDB : NSObject {
    struct sqlite3_stmt { } * _deleteEscrowKey;
    struct sqlite3_stmt { } * _deleteMirrorKeys;
    struct sqlite3_stmt { } * _deleteStatment;
    NSString * _dsid;
    struct sqlite3_stmt { } * _insertEscrowKey;
    struct sqlite3_stmt { } * _insertMirrorKey;
    struct sqlite3_stmt { } * _insertWatch;
    struct sqlite3_stmt { } * _insertWatchKey;
    struct sqlite3_stmt { } * _markMirrorKey;
    NSObject<OS_os_log> * _oslog;
    struct sqlite3_stmt { } * _queryEscrowKey;
    struct sqlite3_stmt { } * _queryEscrowKeysAll;
    struct sqlite3_stmt { } * _queryMissingKeys;
    struct sqlite3_stmt { } * _queryWatches;
    struct sqlite3_stmt { } * _recordIDStatment;
    struct sqlite3_stmt { } * _replaceStatment;
    struct sqlite3_stmt { } * _resetCurrentMirrorKey;
    struct sqlite3 { } * _sqliteHandle;
    struct sqlite3_stmt { } * _updateEscrowKey;
    struct sqlite3_stmt { } * _updateMirrorKey;
    struct sqlite3_stmt { } * _updateWatch;
}

@property struct sqlite3_stmt { }*deleteEscrowKey;
@property struct sqlite3_stmt { }*deleteMirrorKeys;
@property struct sqlite3_stmt { }*deleteStatment;
@property (retain) NSString *dsid;
@property struct sqlite3_stmt { }*insertEscrowKey;
@property struct sqlite3_stmt { }*insertMirrorKey;
@property struct sqlite3_stmt { }*insertWatch;
@property struct sqlite3_stmt { }*insertWatchKey;
@property struct sqlite3_stmt { }*markMirrorKey;
@property (retain) NSObject<OS_os_log> *oslog;
@property struct sqlite3_stmt { }*queryEscrowKey;
@property struct sqlite3_stmt { }*queryEscrowKeysAll;
@property struct sqlite3_stmt { }*queryMissingKeys;
@property struct sqlite3_stmt { }*queryWatches;
@property struct sqlite3_stmt { }*recordIDStatment;
@property struct sqlite3_stmt { }*replaceStatment;
@property struct sqlite3_stmt { }*resetCurrentMirrorKey;
@property struct sqlite3 { }*sqliteHandle;
@property struct sqlite3_stmt { }*updateEscrowKey;
@property struct sqlite3_stmt { }*updateMirrorKey;
@property struct sqlite3_stmt { }*updateWatch;

- (void).cxx_destruct;
- (bool)beginExclusiveTransaction;
- (void)dealloc;
- (struct sqlite3_stmt { }*)deleteEscrowKey;
- (bool)deleteEscrowKey:(id)arg1;
- (struct sqlite3_stmt { }*)deleteMirrorKeys;
- (bool)deleteMirrorKeys:(int)arg1;
- (bool)deleteRecordAll;
- (bool)deleteRecordID:(id)arg1;
- (struct sqlite3_stmt { }*)deleteStatment;
- (id)dsid;
- (bool)endTransaction:(bool)arg1;
- (id)getConfigData:(id)arg1;
- (id)getData:(id)arg1 type:(int)arg2;
- (id)getRecordIDData:(id)arg1;
- (id)initWithDSID:(id)arg1;
- (struct sqlite3_stmt { }*)insertEscrowKey;
- (struct sqlite3_stmt { }*)insertMirrorKey;
- (struct sqlite3_stmt { }*)insertWatch;
- (struct sqlite3_stmt { }*)insertWatchKey;
- (struct sqlite3_stmt { }*)markMirrorKey;
- (bool)markMirrorKey:(int)arg1 type:(int)arg2;
- (id)missingKeysFromDevice:(id)arg1 type:(int)arg2;
- (id)oslog;
- (bool)prepare:(const char *)arg1 statement:(struct sqlite3_stmt {}**)arg2;
- (struct sqlite3_stmt { }*)queryEscrowKey;
- (id)queryEscrowKey:(id)arg1;
- (id)queryEscrowKeys;
- (struct sqlite3_stmt { }*)queryEscrowKeysAll;
- (struct sqlite3_stmt { }*)queryMissingKeys;
- (struct sqlite3_stmt { }*)queryWatches;
- (struct sqlite3_stmt { }*)recordIDStatment;
- (bool)replaceConfigRecord:(id)arg1 data:(id)arg2;
- (bool)replaceRecord:(id)arg1 type:(int)arg2 data:(id)arg3 publicKey:(id)arg4;
- (bool)replaceRecordID:(id)arg1 data:(id)arg2 publicKey:(id)arg3;
- (struct sqlite3_stmt { }*)replaceStatment;
- (struct sqlite3_stmt { }*)resetCurrentMirrorKey;
- (void)setDeleteEscrowKey:(struct sqlite3_stmt { }*)arg1;
- (void)setDeleteMirrorKeys:(struct sqlite3_stmt { }*)arg1;
- (void)setDeleteStatment:(struct sqlite3_stmt { }*)arg1;
- (void)setDsid:(id)arg1;
- (bool)setEscrowKey:(id)arg1 escrowBlob:(id)arg2;
- (void)setInsertEscrowKey:(struct sqlite3_stmt { }*)arg1;
- (void)setInsertMirrorKey:(struct sqlite3_stmt { }*)arg1;
- (void)setInsertWatch:(struct sqlite3_stmt { }*)arg1;
- (void)setInsertWatchKey:(struct sqlite3_stmt { }*)arg1;
- (void)setMarkMirrorKey:(struct sqlite3_stmt { }*)arg1;
- (bool)setMirrorKey:(id)arg1 service:(int)arg2 type:(int)arg3 publicIdentity:(id)arg4;
- (void)setOslog:(id)arg1;
- (void)setQueryEscrowKey:(struct sqlite3_stmt { }*)arg1;
- (void)setQueryEscrowKeysAll:(struct sqlite3_stmt { }*)arg1;
- (void)setQueryMissingKeys:(struct sqlite3_stmt { }*)arg1;
- (void)setQueryWatches:(struct sqlite3_stmt { }*)arg1;
- (void)setRecordIDStatment:(struct sqlite3_stmt { }*)arg1;
- (void)setReplaceStatment:(struct sqlite3_stmt { }*)arg1;
- (void)setResetCurrentMirrorKey:(struct sqlite3_stmt { }*)arg1;
- (void)setSqliteHandle:(struct sqlite3 { }*)arg1;
- (void)setUpdateEscrowKey:(struct sqlite3_stmt { }*)arg1;
- (void)setUpdateMirrorKey:(struct sqlite3_stmt { }*)arg1;
- (void)setUpdateWatch:(struct sqlite3_stmt { }*)arg1;
- (bool)setupDatabase;
- (struct sqlite3 { }*)sqliteHandle;
- (id)syncDevices;
- (bool)syncedKeyToDevice:(id)arg1 type:(int)arg2 device:(id)arg3;
- (struct sqlite3_stmt { }*)updateEscrowKey;
- (bool)updateEscrowKey:(id)arg1 escrowBlob:(id)arg2;
- (struct sqlite3_stmt { }*)updateMirrorKey;
- (bool)updateMirrorKey:(id)arg1 service:(int)arg2 type:(int)arg3 newType:(int)arg4 current:(bool)arg5;
- (bool)updateSyncDevice:(id)arg1 seen:(id)arg2 version:(id)arg3;
- (struct sqlite3_stmt { }*)updateWatch;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
