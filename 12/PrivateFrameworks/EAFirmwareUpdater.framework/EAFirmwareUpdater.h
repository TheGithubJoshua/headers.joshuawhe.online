<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EAFirmwareUpdater.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/EAFirmwareUpdater.framework/EAFirmwareUpdater.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/EAFirmwareUpdater.framework/EAFirmwareUpdater (1)
 */

@interface EAFirmwareUpdater : MobileAssetUpdater <NSStreamDelegate, iAUPServerDelegate> {
    EAAccessory * _accessory;
    NSString * _appProtocol;
    id /* block */  _applyCompletion;
    NSString * _bootloaderProtocol;
    NSArray * _buildIdentities;
    bool  _byteEscape;
    NSNumber * _cumulativeBytesDownloaded;
    NSNumber * _cumulativeCloak;
    NSNumber * _cumulativeCloakTime;
    NSNumber * _cumulativeProgressPercent;
    NSNumber * _cumulativeTimeTaken;
    NSString * _currentFirmwareVersionOnAcc;
    NSNumber * _currentSessionCloakTime;
    NSNumber * _currentSessionTimeTaken;
    NSString * _deviceClass;
    NSDictionary * _deviceOptions;
    NSObject<OS_dispatch_queue> * _eaNotificationDispatchQueue;
    NSString * _firmwareBundleFilename;
    NSURL * _firmwareBundleURL;
    bool  _firmwareUpdateComplete;
    NSString * _firmwareVersionAvailable;
    unsigned long long  _firmwareVersionMajor;
    unsigned long long  _firmwareVersionMinor;
    unsigned long long  _firmwareVersionRelease;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    }  _flushOutputLock;
    bool  _forceSilentUpdate;
    iAUPServer * _iAUPServer;
    int  _isExpectingReconnect;
    bool  _isMultiAssetSession;
    NSDictionary * _manifestIDs;
    unsigned int  _manifestIndex;
    NSArray * _manifestList;
    NSString * _multiAssetAppProtocol;
    NSString * _multiassetAppProtocol;
    NSMutableData * _outputData;
    id /* block */  _personalizationRequestHandler;
    id /* block */  _progressHandler;
    NSString * _protocolString;
    NSTimer * _reconnectTimer;
    NSNumber * _resumeCount;
    NSNumber * _resumedFromPercentNum;
    NSString * _serialNumber;
    EASession * _session;
    bool  _skipDFUMode;
    bool  _skipReconnect;
    NSNumber * _totalBytesForCompleteUpdate;
    NSString * _transportType;
    NSString * _updateBundleFilename;
    NSURL * _updateBundleURL;
    id /* block */  _updateHandler;
    NSDate * _updateStartTime;
}

@property (nonatomic, retain) EAAccessory *accessory;
@property (nonatomic, retain) NSString *appProtocol;
@property (nonatomic, copy) id /* block */ applyCompletion;
@property (nonatomic, retain) NSString *bootloaderProtocol;
@property (nonatomic, retain) NSNumber *cumulativeCloak;
@property (nonatomic, retain) NSNumber *cumulativeProgressPercent;
@property (nonatomic, retain) NSNumber *cumulativeTimeTaken;
@property (nonatomic, retain) NSString *currentFirmwareVersionOnAcc;
@property (nonatomic, retain) NSNumber *currentSessionTimeTaken;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSString *firmwareBundleFilename;
@property (nonatomic, retain) NSURL *firmwareBundleURL;
@property (nonatomic, retain) NSString *firmwareVersionAvailable;
@property (nonatomic) bool forceSilentUpdate;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isMultiAssetSession;
@property (nonatomic, copy) NSDictionary *manifestIDs;
@property (nonatomic, retain) NSString *multiAssetAppProtocol;
@property (nonatomic, retain) NSString *protocolString;
@property (nonatomic, retain) NSNumber *resumeCount;
@property (nonatomic, retain) NSNumber *resumedFromPercentNum;
@property (nonatomic, retain) NSString *serialNumber;
@property (nonatomic, retain) EASession *session;
@property (nonatomic) bool skipDFUMode;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSString *transportType;

+ (id)appProtocolStringWithEAID:(id)arg1;
+ (id)bootloaderProtocolStringWithEAID:(id)arg1;
+ (id)findAccessoryWithProtocolString:(id)arg1 serialNum:(id)arg2;
+ (id)multiAssetAppProtocolStringWithEAID:(id)arg1;

- (void)_accessoryDidConnect:(id)arg1;
- (void)_accessoryDidDisconnect:(id)arg1;
- (id)accessory;
- (id)appProtocol;
- (id /* block */)applyCompletion;
- (id)applyFirmware:(id /* block */)arg1 progress:(id /* block */)arg2 update:(id /* block */)arg3 personalization:(id /* block */)arg4;
- (id)assetWithMaxVersion:(id)arg1;
- (id)bootloaderProtocol;
- (void)closeSession;
- (id)createEndOfUpdateEventDict:(id)arg1 error:(id)arg2;
- (id)cumulativeCloak;
- (id)cumulativeProgressPercent;
- (id)cumulativeTimeTaken;
- (id)currentFirmwareVersionOnAcc;
- (id)currentSessionTimeTaken;
- (void)dealloc;
- (bool)findAccessory;
- (id)firmwareBundleFilename;
- (id)firmwareBundleURL;
- (void)firmwareUpdateComplete:(id)arg1 error:(id)arg2;
- (id)firmwareVersionAvailable;
- (id)flushOutput;
- (bool)forceSilentUpdate;
- (id)getDeviceClassName;
- (unsigned char)getPersonalizationID;
- (void)handleFirmwareUpdateStatus:(id)arg1;
- (void)handleInputData;
- (void)handleSessionError:(unsigned int)arg1 message:(id)arg2;
- (id)initWithDeviceClass:(id)arg1 assetType:(id)arg2 skipDFU:(bool)arg3 byteEscape:(bool)arg4 skipReconnect:(bool)arg5 options:(id)arg6 serialNum:(id)arg7;
- (bool)isMultiAssetSession;
- (bool)isRestartRequired;
- (void)logStatusString:(id)arg1;
- (id)manifestIDs;
- (id)multiAssetAppProtocol;
- (id)openSession;
- (id)overrideQueryPredicateFromDict:(id)arg1;
- (void)personalizationResponse:(id)arg1 error:(id)arg2;
- (void)processPersonalizationInfoFromAccessory:(id)arg1;
- (id)protocolString;
- (id)queryPredicate;
- (void)reconnectTimerDidFire:(id)arg1;
- (id)resumeCount;
- (id)resumedFromPercentNum;
- (id)serialNumber;
- (id)session;
- (void)setAccessory:(id)arg1;
- (void)setAppProtocol:(id)arg1;
- (void)setApplyCompletion:(id /* block */)arg1;
- (void)setBootloaderProtocol:(id)arg1;
- (void)setCumulativeCloak:(id)arg1;
- (void)setCumulativeProgressPercent:(id)arg1;
- (void)setCumulativeTimeTaken:(id)arg1;
- (void)setCurrentFirmwareVersionOnAcc:(id)arg1;
- (void)setCurrentSessionTimeTaken:(id)arg1;
- (void)setFirmwareBundle:(id)arg1 withManifest:(id)arg2;
- (void)setFirmwareBundleFilename:(id)arg1;
- (void)setFirmwareBundleURL:(id)arg1;
- (void)setFirmwareVersionAvailable:(id)arg1;
- (void)setForceSilentUpdate:(bool)arg1;
- (void)setIsMultiAssetSession:(bool)arg1;
- (void)setManifestIDs:(id)arg1;
- (void)setMultiAssetAppProtocol:(id)arg1;
- (void)setProtocolString:(id)arg1;
- (void)setResumeCount:(id)arg1;
- (void)setResumedFromPercentNum:(id)arg1;
- (void)setSerialNumber:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setSkipDFUMode:(bool)arg1;
- (void)setTransportType:(id)arg1;
- (bool)skipDFUMode;
- (void)startReconnectTimer:(int)arg1;
- (bool)stitchManifestInSuperBinary:(id)arg1 withManifest:(id)arg2 withId:(unsigned int)arg3;
- (void)stopReconnectTimer;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (id)supportedProtocolForAccessory:(id)arg1;
- (id)transportType;
- (void)updateComplete:(id)arg1 error:(id)arg2;
- (void)updateProgress:(double)arg1;
- (bool)updateRequiresPersonalization;
- (id)validateAsset;
- (id)validateAssetAttributes:(id)arg1;
- (id)writeData:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
