<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FBApplicationProcess.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/FrontBoard.framework/FBApplicationProcess.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/FrontBoard.framework/FrontBoard (486.52)
 */

@interface FBApplicationProcess : FBProcess <BKSProcessDelegate> {
    NSMutableSet * _allowedLockedFilePaths;
    FBApplicationInfo * _applicationInfo;
    bool  _attemptedBootstrap;
    bool  _attemptedFinalizedLaunch;
    bool  _beingDebugged;
    BKSProcess * _bksProcess;
    bool  _bootstrapFailed;
    bool  _connectedToExternalAccessory;
    BKSProcessAssertion * _continuousProcessAssertion;
    FBProcessCPUStatistics * _cpuStatistics;
    double  _execTime;
    FBProcessExecutionContext * _executionContext;
    FBApplicationProcessExitContext * _exitContext;
    bool  _exitedBeforeAttemptingFinalizedLaunch;
    BSMachPortSendRight * _gsEventPort;
    unsigned long long  _htAppIdentifier;
    BKSProcessAssertion * _launchProcessAssertion;
    bool  _nowPlayingWithAudio;
    bool  _pendingExit;
    bool  _queue_launchEventReceiptAcknowledged;
    NSMutableArray * _queue_terminateRequestCompletionBlocks;
    NSMutableArray * _queuedSceneBlocksToExecuteAfterLaunch;
    bool  _recordingAudio;
    FBSProcessWatchdogPolicy * _sceneCreateWatchdogPolicy;
    long long  _terminationReason;
    FBSProcessTerminationRequest * _terminationRequest;
    FBProcessState * _terminationState;
    FBProcessWatchdogEventContext * _terminationWatchdogContext;
    BKSProcessAssertion * _viewServiceProcessAssertion;
    bool  _waitForDebugger;
    FBProcessWatchdog * _watchdog;
}

@property (nonatomic, readonly) FBApplicationInfo *applicationInfo;
@property (getter=isBeingDebugged, nonatomic) bool beingDebugged;
@property (getter=isConnectedToExternalAccessory, nonatomic) bool connectedToExternalAccessory;
@property (getter=_queue_cpuStatistics, nonatomic, readonly) FBProcessCPUStatistics *cpuStatistics;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <FBApplicationProcessDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double elapsedCPUTime;
@property (getter=_queue_execTime, nonatomic, readonly) double execTime;
@property (nonatomic, readonly, copy) FBProcessExecutionContext *executionContext;
@property (nonatomic, readonly) FBApplicationProcessExitContext *exitContext;
@property (nonatomic, readonly) bool finishedLaunching;
@property (readonly) unsigned long long hash;
@property (getter=isNowPlayingWithAudio, nonatomic) bool nowPlayingWithAudio;
@property (getter=isPendingExit, nonatomic, readonly) bool pendingExit;
@property (getter=isRecordingAudio, nonatomic) bool recordingAudio;
@property (readonly) Class superclass;
@property (getter=_queue_terminationReason, nonatomic, readonly) long long terminationReason;

- (void).cxx_destruct;
- (id)GSEventPort;
- (id)_applicationWorkspace;
- (id)_createWorkspace;
- (long long)_exceptionCodeForKillReason:(int)arg1;
- (unsigned long long)_queue_activationInfoForEvent:(int)arg1 withToken:(unsigned long long)arg2 didWatchdog:(bool)arg3;
- (void)_queue_addAllowedLockedFilePath:(id)arg1;
- (void)_queue_addAllowedLockedPaths;
- (long long)_queue_bksVisibilityForVisibility:(int)arg1;
- (bool)_queue_bootstrapAndExecWithContext:(id)arg1;
- (void)_queue_callExitObservers;
- (void)_queue_cancelWatchdogTimer;
- (id)_queue_composeContextWithValue:(id)arg1 key:(id)arg2;
- (id)_queue_cpuStatistics;
- (id)_queue_crashReportThermalsInfo;
- (void)_queue_doGracefulKillWithDeliveryConfirmation:(id /* block */)arg1;
- (void)_queue_dropContinuousProcessAssertion;
- (void)_queue_dropLaunchProcessAssertion;
- (void)_queue_dropViewServiceAssertion;
- (void)_queue_enumerateApplicationObserversWithBlock:(id /* block */)arg1;
- (double)_queue_execTime;
- (void)_queue_executeBlockAfterLaunchCompletes:(id /* block */)arg1;
- (void)_queue_executeKillForRequest:(id)arg1;
- (void)_queue_executeLaunchCompletionBlocks;
- (void)_queue_executeTerminateRequestCompletionBlocksIfNecessaryForSucccess:(bool)arg1;
- (void)_queue_finishLaunch;
- (id)_queue_internalDebugEnvironmentVariables;
- (void)_queue_invalidateBKSProcess;
- (bool)_queue_isAllowedLockedFilePath:(id)arg1 standardizedPath:(out id*)arg2;
- (bool)_queue_isPlatformExecutable;
- (void)_queue_killForReason:(long long)arg1 andReport:(bool)arg2 withDescription:(id)arg3 completion:(id /* block */)arg4;
- (void)_queue_killWithSignal:(int)arg1;
- (void)_queue_launchIfNecessary;
- (id)_queue_lockedFilePathsIgnoringAllowed;
- (id)_queue_name;
- (id)_queue_newWatchdogForContext:(id)arg1 completion:(id /* block */)arg2;
- (unsigned long long)_queue_noteExitedForForceQuit:(bool)arg1;
- (void)_queue_noteSceneCreationAcknowledged:(id)arg1;
- (int)_queue_ourTaskStateForBKSTaskState:(long long)arg1;
- (void)_queue_processDidExit;
- (void)_queue_sceneNeedsGracefulExit:(id)arg1 withDeliveryConfirmation:(id /* block */)arg2;
- (void)_queue_setTaskState:(int)arg1;
- (void)_queue_setVisibility:(int)arg1;
- (bool)_queue_shouldWatchdogWithDeclineReason:(id*)arg1;
- (void)_queue_startWatchdogTimerForContext:(id)arg1;
- (void)_queue_takeLaunchProcessAssertion;
- (void)_queue_terminateWithRequest:(id)arg1 completion:(id /* block */)arg2;
- (long long)_queue_terminationReason;
- (void)_terminateWithRequest:(id)arg1 forWatchdog:(id)arg2;
- (bool)_watchdog:(id)arg1 shouldTerminateWithDeclineReason:(out id*)arg2;
- (id)_watchdog:(id)arg1 terminationRequestForViolatedProvision:(id)arg2 error:(id)arg3;
- (id)_watchdogProvider;
- (long long)_watchdogReportType;
- (void)_watchdogStarted:(id)arg1;
- (void)_watchdogStopped:(id)arg1;
- (id)_workspace;
- (id)_workspaceServer;
- (id)applicationInfo;
- (bool)bootstrapWithContext:(id)arg1;
- (void)dealloc;
- (double)elapsedCPUTime;
- (void)executeBlockAfterLaunchCompletes:(id /* block */)arg1;
- (id)executionContext;
- (id)exitContext;
- (bool)finishedLaunching;
- (id)initWithApplicationInfo:(id)arg1 callOutQueue:(id)arg2;
- (id)initWithApplicationInfo:(id)arg1 handle:(id)arg2 callOutQueue:(id)arg3;
- (id)initWithBundleID:(id)arg1 pid:(int)arg2 callOutQueue:(id)arg3;
- (bool)isApplicationProcess;
- (bool)isBeingDebugged;
- (bool)isConnectedToExternalAccessory;
- (bool)isNowPlayingWithAudio;
- (bool)isPendingExit;
- (bool)isRecordingAudio;
- (bool)isSystemApplicationProcess;
- (void)killForReason:(long long)arg1 andReport:(bool)arg2 withDescription:(id)arg3;
- (void)killForReason:(long long)arg1 andReport:(bool)arg2 withDescription:(id)arg3 completion:(id /* block */)arg4;
- (void)launchIfNecessary;
- (void)process:(id)arg1 didExitWithContext:(id)arg2;
- (void)process:(id)arg1 isBeingDebugged:(bool)arg2;
- (void)process:(id)arg1 taskStateDidChange:(long long)arg2;
- (void)processWillExpire:(id)arg1;
- (void)setBeingDebugged:(bool)arg1;
- (void)setConnectedToExternalAccessory:(bool)arg1;
- (void)setNowPlayingWithAudio:(bool)arg1;
- (void)setPendingExit:(bool)arg1;
- (void)setRecordingAudio:(bool)arg1;
- (void)stop;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
