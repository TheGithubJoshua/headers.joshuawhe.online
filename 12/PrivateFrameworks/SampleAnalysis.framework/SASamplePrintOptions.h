<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SASamplePrintOptions.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SampleAnalysis.framework/SASamplePrintOptions.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SampleAnalysis.framework/SampleAnalysis (218.2)
 */

@interface SASamplePrintOptions : NSObject {
    bool  _aggregateFramesByOffsetIntoBinary;
    bool  _aggregateProcessesByExecutable;
    bool  _aggregateStacksByProcess;
    bool  _aggregateStacksByThread;
    bool  _binaryImagesBeforeStacks;
    bool  _displayAddressesInBlockedReasons;
    bool  _displayAllBinaries;
    bool  _displayAllHIDEvents;
    bool  _displayAllTaskSizeChanges;
    bool  _displayBinaryImageAddresses;
    bool  _displayBinaryImagesLackingNameOrPath;
    bool  _displayBlockedReasons;
    bool  _displayBlockedReasonsLackingProcessOwners;
    bool  _displayBlockedThreads;
    bool  _displayBody;
    bool  _displayEmptyBootArgs;
    bool  _displayFooter;
    bool  _displayFrameAddresses;
    bool  _displayFullSourcePaths;
    bool  _displayHeader;
    bool  _displayIdleWorkQueueThreads;
    bool  _displayOffsetsFromUnnamedSymbols;
    bool  _displayProcessFirstLastTimes;
    bool  _displayRunnableThreads;
    bool  _displayRunningThreads;
    bool  _displayStacksWithZeroCount;
    bool  _displaySub1MsCpuTime;
    bool  _displaySymbolInformation;
    bool  _displayTasksWithZeroCount;
    bool  _displayThreadRunningState;
    bool  _forceOneBasedTimeIndexes;
    bool  _includeUserIdleAndBatteryStateInStacks;
    bool  _microstackshotsFormat;
    long long  _omitFramesAfterLineCount;
    BOOL  _omitFramesBelowPercentOfStackSamples;
    long long  _omitFramesBelowSampleCount;
    int  _omitStacksAboveBasePriority;
    int  _omitStacksBelowBasePriority;
    BOOL  _omitStacksBelowPercentOfTaskSamples;
    long long  _omitStacksBelowSampleCount;
    bool  _omitStacksOnAC;
    bool  _omitStacksOnBattery;
    bool  _omitStacksWithUserActive;
    bool  _omitStacksWithUserIdle;
    BOOL  _omitTasksBelowPercentOfTotalSamples;
    long long  _omitTasksBelowSampleCount;
    bool  _orderTasksBySampleCount;
    bool  _printHeavyStacks;
    bool  _printJson;
    bool  _printSpinSignatureStack;
    bool  _printTargetHIDEvent;
    bool  _printTargetThreadOnly;
    bool  _showThreadStateAsLeafFrame;
    bool  _systemstatsFormat;
    bool  _tabDelineateBinaryImageSections;
}

@property bool aggregateFramesByOffsetIntoBinary;
@property bool aggregateProcessesByExecutable;
@property bool aggregateStacksByProcess;
@property bool aggregateStacksByThread;
@property bool binaryImagesBeforeStacks;
@property bool displayAddressesInBlockedReasons;
@property bool displayAllBinaries;
@property bool displayAllHIDEvents;
@property bool displayAllTaskSizeChanges;
@property bool displayBinaryImageAddresses;
@property bool displayBinaryImagesLackingNameOrPath;
@property bool displayBlockedReasons;
@property bool displayBlockedReasonsLackingProcessOwners;
@property bool displayBlockedThreads;
@property bool displayBody;
@property bool displayEmptyBootArgs;
@property bool displayFooter;
@property bool displayFrameAddresses;
@property bool displayFullSourcePaths;
@property bool displayHeader;
@property bool displayIdleWorkQueueThreads;
@property bool displayOffsetsFromUnnamedSymbols;
@property bool displayProcessFirstLastTimes;
@property bool displayRunnableThreads;
@property bool displayRunningThreads;
@property bool displayStacksWithZeroCount;
@property bool displaySub1MsCpuTime;
@property bool displaySymbolInformation;
@property bool displayTasksWithZeroCount;
@property bool displayThreadRunningState;
@property bool forceOneBasedTimeIndexes;
@property bool includeUserIdleAndBatteryStateInStacks;
@property bool microstackshotsFormat;
@property long long omitFramesAfterLineCount;
@property BOOL omitFramesBelowPercentOfStackSamples;
@property long long omitFramesBelowSampleCount;
@property int omitStacksAboveBasePriority;
@property int omitStacksBelowBasePriority;
@property BOOL omitStacksBelowPercentOfTaskSamples;
@property long long omitStacksBelowSampleCount;
@property bool omitStacksOnAC;
@property bool omitStacksOnBattery;
@property bool omitStacksWithUserActive;
@property bool omitStacksWithUserIdle;
@property BOOL omitTasksBelowPercentOfTotalSamples;
@property long long omitTasksBelowSampleCount;
@property bool orderTasksBySampleCount;
@property bool printHeavyStacks;
@property bool printJson;
@property bool printSpinSignatureStack;
@property bool printTargetHIDEvent;
@property bool printTargetThreadOnly;
@property bool showThreadStateAsLeafFrame;
@property bool systemstatsFormat;
@property bool tabDelineateBinaryImageSections;
@property bool verbose;

- (bool)aggregateFramesByOffsetIntoBinary;
- (bool)aggregateProcessesByExecutable;
- (bool)aggregateStacksByProcess;
- (bool)aggregateStacksByThread;
- (bool)binaryImagesBeforeStacks;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)displayAddressesInBlockedReasons;
- (bool)displayAllBinaries;
- (bool)displayAllHIDEvents;
- (bool)displayAllTaskSizeChanges;
- (bool)displayBinaryImageAddresses;
- (bool)displayBinaryImagesLackingNameOrPath;
- (bool)displayBlockedReasons;
- (bool)displayBlockedReasonsLackingProcessOwners;
- (bool)displayBlockedThreads;
- (bool)displayBody;
- (bool)displayEmptyBootArgs;
- (bool)displayFooter;
- (bool)displayFrameAddresses;
- (bool)displayFullSourcePaths;
- (bool)displayHeader;
- (bool)displayIdleWorkQueueThreads;
- (bool)displayOffsetsFromUnnamedSymbols;
- (bool)displayProcessFirstLastTimes;
- (bool)displayRunnableThreads;
- (bool)displayRunningThreads;
- (bool)displayStacksWithZeroCount;
- (bool)displaySub1MsCpuTime;
- (bool)displaySymbolInformation;
- (bool)displayTasksWithZeroCount;
- (bool)displayThreadRunningState;
- (bool)forceOneBasedTimeIndexes;
- (bool)includeUserIdleAndBatteryStateInStacks;
- (id)init;
- (bool)microstackshotsFormat;
- (long long)omitFramesAfterLineCount;
- (BOOL)omitFramesBelowPercentOfStackSamples;
- (long long)omitFramesBelowSampleCount;
- (int)omitStacksAboveBasePriority;
- (int)omitStacksBelowBasePriority;
- (BOOL)omitStacksBelowPercentOfTaskSamples;
- (long long)omitStacksBelowSampleCount;
- (bool)omitStacksOnAC;
- (bool)omitStacksOnBattery;
- (bool)omitStacksWithUserActive;
- (bool)omitStacksWithUserIdle;
- (BOOL)omitTasksBelowPercentOfTotalSamples;
- (long long)omitTasksBelowSampleCount;
- (bool)orderTasksBySampleCount;
- (bool)printHeavyStacks;
- (bool)printJson;
- (bool)printSpinSignatureStack;
- (bool)printTargetHIDEvent;
- (bool)printTargetThreadOnly;
- (void)setAggregateFramesByOffsetIntoBinary:(bool)arg1;
- (void)setAggregateProcessesByExecutable:(bool)arg1;
- (void)setAggregateStacksByProcess:(bool)arg1;
- (void)setAggregateStacksByThread:(bool)arg1;
- (void)setBinaryImagesBeforeStacks:(bool)arg1;
- (void)setDisplayAddressesInBlockedReasons:(bool)arg1;
- (void)setDisplayAllBinaries:(bool)arg1;
- (void)setDisplayAllHIDEvents:(bool)arg1;
- (void)setDisplayAllTaskSizeChanges:(bool)arg1;
- (void)setDisplayBinaryImageAddresses:(bool)arg1;
- (void)setDisplayBinaryImagesLackingNameOrPath:(bool)arg1;
- (void)setDisplayBlockedReasons:(bool)arg1;
- (void)setDisplayBlockedReasonsLackingProcessOwners:(bool)arg1;
- (void)setDisplayBlockedThreads:(bool)arg1;
- (void)setDisplayBody:(bool)arg1;
- (void)setDisplayEmptyBootArgs:(bool)arg1;
- (void)setDisplayFooter:(bool)arg1;
- (void)setDisplayFrameAddresses:(bool)arg1;
- (void)setDisplayFullSourcePaths:(bool)arg1;
- (void)setDisplayHeader:(bool)arg1;
- (void)setDisplayIdleWorkQueueThreads:(bool)arg1;
- (void)setDisplayOffsetsFromUnnamedSymbols:(bool)arg1;
- (void)setDisplayProcessFirstLastTimes:(bool)arg1;
- (void)setDisplayRunnableThreads:(bool)arg1;
- (void)setDisplayRunningThreads:(bool)arg1;
- (void)setDisplayStacksWithZeroCount:(bool)arg1;
- (void)setDisplaySub1MsCpuTime:(bool)arg1;
- (void)setDisplaySymbolInformation:(bool)arg1;
- (void)setDisplayTasksWithZeroCount:(bool)arg1;
- (void)setDisplayThreadRunningState:(bool)arg1;
- (void)setForceOneBasedTimeIndexes:(bool)arg1;
- (void)setIncludeUserIdleAndBatteryStateInStacks:(bool)arg1;
- (void)setMicrostackshotsFormat:(bool)arg1;
- (void)setOmitFramesAfterLineCount:(long long)arg1;
- (void)setOmitFramesBelowPercentOfStackSamples:(BOOL)arg1;
- (void)setOmitFramesBelowSampleCount:(long long)arg1;
- (void)setOmitStacksAboveBasePriority:(int)arg1;
- (void)setOmitStacksBelowBasePriority:(int)arg1;
- (void)setOmitStacksBelowPercentOfTaskSamples:(BOOL)arg1;
- (void)setOmitStacksBelowSampleCount:(long long)arg1;
- (void)setOmitStacksOnAC:(bool)arg1;
- (void)setOmitStacksOnBattery:(bool)arg1;
- (void)setOmitStacksWithUserActive:(bool)arg1;
- (void)setOmitStacksWithUserIdle:(bool)arg1;
- (void)setOmitTasksBelowPercentOfTotalSamples:(BOOL)arg1;
- (void)setOmitTasksBelowSampleCount:(long long)arg1;
- (void)setOrderTasksBySampleCount:(bool)arg1;
- (void)setPrintHeavyStacks:(bool)arg1;
- (void)setPrintJson:(bool)arg1;
- (void)setPrintSpinSignatureStack:(bool)arg1;
- (void)setPrintTargetHIDEvent:(bool)arg1;
- (void)setPrintTargetThreadOnly:(bool)arg1;
- (void)setShowThreadStateAsLeafFrame:(bool)arg1;
- (void)setSystemstatsFormat:(bool)arg1;
- (void)setTabDelineateBinaryImageSections:(bool)arg1;
- (void)setVerbose:(bool)arg1;
- (bool)showThreadStateAsLeafFrame;
- (bool)systemstatsFormat;
- (bool)tabDelineateBinaryImageSections;
- (bool)verbose;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
