<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SAFrameKCDataIterator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SampleAnalysis.framework/SAFrameKCDataIterator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SampleAnalysis.framework/SampleAnalysis (218.2)
 */

@interface SAFrameKCDataIterator : NSObject <SAFrameIterator> {
    unsigned long long  _continuation;
    bool  _hideKernelFrames;
    bool  _hideUserFrames;
    bool  _isUserStackTruncated;
    SAKernelFrame * _kernel;
    struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; } * _kernel32Frames;
    unsigned int * _kernel32LRs;
    struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; } * _kernel64Frames;
    unsigned long long * _kernel64LRs;
    NSArray * _kernelBinaryLoadInfos;
    SAKernelLeafFrame * _kernelLeaf;
    int  _numKernel32Frames;
    int  _numKernel32LRs;
    int  _numKernel64Frames;
    int  _numKernel64LRs;
    int  _numUser32Frames;
    int  _numUser32LRs;
    int  _numUser64Frames;
    int  _numUser64LRs;
    SASharedCache * _sharedCache;
    SAUserTruncatedBacktrace * _truncatedBacktrace;
    SAFrame * _user;
    struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; } * _user32Frames;
    unsigned int * _user32LRs;
    struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; } * _user64Frames;
    unsigned long long * _user64LRs;
    NSArray * _userBinaryLoadInfos;
    SALeafFrame * _userLeaf;
}

@property unsigned long long continuation;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property bool isUserStackTruncated;
@property struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; }*kernel32Frames;
@property unsigned int*kernel32LRs;
@property struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; }*kernel64Frames;
@property unsigned long long*kernel64LRs;
@property (retain) NSArray *kernelBinaryLoadInfos;
@property int numKernel32Frames;
@property int numKernel32LRs;
@property int numKernel64Frames;
@property int numKernel64LRs;
@property int numUser32Frames;
@property int numUser32LRs;
@property int numUser64Frames;
@property int numUser64LRs;
@property (retain) SASharedCache *sharedCache;
@property (readonly) Class superclass;
@property struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; }*user32Frames;
@property unsigned int*user32LRs;
@property struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; }*user64Frames;
@property unsigned long long*user64LRs;
@property (retain) NSArray *userBinaryLoadInfos;

- (void).cxx_destruct;
- (void)clearTaskData;
- (void)clearThreadData;
- (unsigned long long)continuation;
- (void)dealloc;
- (void)exposeAllFrames;
- (void)exposeKernelFramesOnly;
- (void)exposeUserFramesOnly;
- (bool)hasStack;
- (bool)hasUserStack;
- (id)instructionForKernelAddress:(unsigned long long)arg1 symbolicationOffByOne:(bool)arg2;
- (id)instructionForUserAddress:(unsigned long long)arg1 symbolicationOffByOne:(bool)arg2;
- (bool)isUserStackTruncated;
- (void)iterateFrames:(id /* block */)arg1;
- (struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; }*)kernel32Frames;
- (unsigned int*)kernel32LRs;
- (struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; }*)kernel64Frames;
- (unsigned long long*)kernel64LRs;
- (id)kernelBinaryLoadInfos;
- (int)numKernel32Frames;
- (int)numKernel32LRs;
- (int)numKernel64Frames;
- (int)numKernel64LRs;
- (int)numUser32Frames;
- (int)numUser32LRs;
- (int)numUser64Frames;
- (int)numUser64LRs;
- (void)setContinuation:(unsigned long long)arg1;
- (void)setIsUserStackTruncated:(bool)arg1;
- (void)setKernel32Frames:(struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; }*)arg1;
- (void)setKernel32LRs:(unsigned int*)arg1;
- (void)setKernel64Frames:(struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; }*)arg1;
- (void)setKernel64LRs:(unsigned long long*)arg1;
- (void)setKernelBinaryLoadInfos:(id)arg1;
- (void)setNumKernel32Frames:(int)arg1;
- (void)setNumKernel32LRs:(int)arg1;
- (void)setNumKernel64Frames:(int)arg1;
- (void)setNumKernel64LRs:(int)arg1;
- (void)setNumUser32Frames:(int)arg1;
- (void)setNumUser32LRs:(int)arg1;
- (void)setNumUser64Frames:(int)arg1;
- (void)setNumUser64LRs:(int)arg1;
- (void)setSharedCache:(id)arg1;
- (void)setUser32Frames:(struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; }*)arg1;
- (void)setUser32LRs:(unsigned int*)arg1;
- (void)setUser64Frames:(struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; }*)arg1;
- (void)setUser64LRs:(unsigned long long*)arg1;
- (void)setUserBinaryLoadInfos:(id)arg1;
- (id)sharedCache;
- (struct stack_snapshot_frame32 { unsigned int x1; unsigned int x2; }*)user32Frames;
- (unsigned int*)user32LRs;
- (struct stack_snapshot_frame64 { unsigned long long x1; unsigned long long x2; }*)user64Frames;
- (unsigned long long*)user64LRs;
- (id)userBinaryLoadInfos;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
