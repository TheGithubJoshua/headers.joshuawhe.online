<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BRCDocumentItem.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudDocsDaemon.framework/BRCDocumentItem.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon (575.504)
 */

@interface BRCDocumentItem : BRCLocalItem <BRCTopLevelShareable> {
    BRCLocalVersion * _currentVersion;
    BRCDesiredVersion * _desiredVersion;
    NSMutableSet * _liveConflictLoserEtags;
    NSData * _liveThumbnailSignature;
    NSMutableSet * _resolvedConflictLoserEtags;
    bool  _shouldAutomaticallyDownloadThumbnail;
}

@property (nonatomic, readonly) BRCAliasItem *asBRAlias;
@property (nonatomic, readonly) BRCDirectoryItem *asDirectory;
@property (nonatomic, readonly) BRCDocumentItem *asDocument;
@property (nonatomic, readonly) NSDictionary *conflictLoserState;
@property (nonatomic, readonly) BRCLocalVersion *currentVersion;
@property (nonatomic, readonly) BRCDesiredVersion *desiredVersion;
@property (nonatomic, readonly) unsigned int downloadStatus;
@property (nonatomic, readonly) bool hasLocalContent;
@property (nonatomic, readonly) bool isAutomaticallyEvictable;
@property (nonatomic, readonly) bool isDownloadRequested;
@property (nonatomic, readonly) bool isDownloadRequestedForThumbnail;
@property (nonatomic, readonly) bool isEvictable;
@property (nonatomic, readonly) bool isVisibleIniCloudDrive;
@property (nonatomic, retain) NSSet *liveConflictLoserEtags;
@property (nonatomic, retain) NSData *liveThumbnailSignature;
@property (nonatomic, readonly) unsigned int queryItemStatus;
@property (nonatomic, readonly) NSSet *resolvedConflictLoserEtags;
@property (nonatomic, readonly) bool shouldAutomaticallyDownloadThumbnail;
@property (nonatomic, readonly) bool shouldBeGreedy;
@property (nonatomic, readonly) bool shouldHaveThumbnail;
@property (nonatomic, readonly) bool shouldTransferThumbnail;
@property (nonatomic, readonly) NSString *unsaltedBookmarkData;
@property (nonatomic, readonly) NSError *uploadError;

+ (id)anyReverseAliasInAppLibrary:(id)arg1 toRelativePath:(id)arg2;
+ (id)anyReverseAliasWithUnsaltedBookmarkData:(id)arg1 inAppLibrary:(id)arg2;
+ (bool)isDocumentAutomaticallyEvictableWithExtension:(id)arg1;
+ (bool)isDocumentAutomaticallyEvictableWithName:(id)arg1;
+ (struct PQLResultSet { Class x1; }*)reverseAliasEnumeratorWithRelativePath:(id)arg1;
+ (struct PQLResultSet { Class x1; }*)reverseAliasEnumeratorWithUnsaltedBookmarkData:(id)arg1 session:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (bool)_deleteFromDB:(id)arg1 keepAliases:(bool)arg2;
- (id)_filenameOverrideForPath:(id)arg1;
- (id)_initFromPQLResultSet:(id)arg1 session:(id)arg2 db:(id)arg3 error:(id*)arg4;
- (id)_initWithLocalItem:(id)arg1;
- (id)_initWithRelativePath:(id)arg1 parentGlobalID:(id)arg2;
- (id)_initWithServerItem:(id)arg1 dbRowID:(unsigned long long)arg2;
- (bool)_insertInDB:(id)arg1 dbRowID:(unsigned long long)arg2;
- (bool)_isInterestingUpdateForNotifs;
- (bool)_needsSyncBubbleRecomputeForError:(id)arg1 origError:(id)arg2;
- (bool)_nukePackageItemsFromDB:(id)arg1;
- (bool)_updateInDB:(id)arg1 diffs:(unsigned long long)arg2;
- (void)_updateLiveConflictLoserFromFSAtPath:(id)arg1;
- (void)_updateReadThrottleIfNeededForRowID:(unsigned long long)arg1 forCreation:(bool)arg2;
- (void)_updateRecursivePropertiesInDB:(id)arg1 dbRowID:(unsigned long long)arg2 diffs:(unsigned long long)arg3;
- (void)_updateUploadJobIfNeededWithDiffs:(unsigned long long)arg1;
- (void)addResolvedConflictLoserEtag:(id)arg1;
- (id)aliasItemID;
- (id)anyReverseAliasInAppLibrary:(id)arg1;
- (void)appDidResolveConflictLoserWithEtag:(id)arg1;
- (id)asDocument;
- (id)asShareableItem;
- (id)baseContentsRecord;
- (bool)changedAtRelativePath:(id)arg1 scanPackage:(bool)arg2;
- (void)clearDesiredVersion;
- (void)clearFromStage;
- (void)clearVersionSignatures:(unsigned long long)arg1 isPackage:(bool)arg2;
- (id)conflictLoserState;
- (bool)contentRecordNeedsForceAllFieldsWhenDeadInServerTruth:(bool)arg1;
- (id)contentsRecordID;
- (id)currentVersion;
- (id)descriptionWithContext:(id)arg1;
- (id)desiredVersion;
- (unsigned long long)diffAgainstLocalItem:(id)arg1;
- (unsigned long long)diffAgainstServerItem:(id)arg1;
- (unsigned int)downloadStatus;
- (void)encodeWithCoder:(id)arg1;
- (bool)evictInTask:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (void)forceVersionConflictByClearkingCKInfo;
- (void)forceiWorkConflictEtag:(id)arg1;
- (void)forceiWorkSharingInfoResend;
- (void)handleUnknownItemError;
- (bool)hasLocalContent;
- (bool)hasShareIDAndIsOwnedByMe;
- (id)initWithCoder:(id)arg1;
- (bool)isAutomaticallyEvictable;
- (bool)isDocument;
- (bool)isDownloadRequested;
- (bool)isDownloadRequestedForThumbnail;
- (bool)isEvictable;
- (bool)isFault;
- (bool)isPackage;
- (bool)isVisibleIniCloudDrive;
- (void)learnItemID:(id)arg1 ownerKey:(id)arg2 path:(id)arg3 markLost:(bool)arg4;
- (void)learnThumbnailSignatureFromLiveVersion:(id)arg1;
- (id)liveConflictLoserEtags;
- (id)liveThumbnailSignature;
- (void)markDead;
- (void)markForceNeedsSyncUp;
- (void)markForceUpload;
- (void)markItemForgottenByServer;
- (bool)markLatestRequestAcknowledgedInZone:(id)arg1;
- (void)markLatestSyncRequestRejectedInZone:(id)arg1;
- (void)markLiveFromStageWithPath:(id)arg1;
- (void)markNeedsReading;
- (void)markNeedsUploadOrSyncingUp;
- (void)markOverQuotaWithError:(id)arg1;
- (void)markUploadedWithRecord:(id)arg1;
- (unsigned int)queryItemStatus;
- (void)removeLiveConflictLoserEtag:(id)arg1;
- (id)resolvedConflictLoserEtags;
- (struct PQLResultSet { Class x1; }*)reverseAliasEnumerator;
- (void)setLiveConflictLoserEtags:(id)arg1;
- (void)setLiveThumbnailSignature:(id)arg1;
- (id)setOfAppLibraryIDsWithReverseAliases;
- (bool)shouldAutomaticallyDownloadThumbnail;
- (bool)shouldBeGreedy;
- (bool)shouldHaveThumbnail;
- (bool)shouldTransferThumbnail;
- (void)stageFaultForCreation:(bool)arg1 name:(id)arg2 size:(id)arg3 isPackage:(bool)arg4;
- (void)stageFaultForCreation:(bool)arg1 serverItem:(id)arg2;
- (bool)startDownloadInTask:(id)arg1 options:(unsigned long long)arg2 error:(id*)arg3;
- (id)syncContextUsedForTransfers;
- (void)updateContentsCKInfoAndDeviceIDFromServerItem:(id)arg1;
- (int)updateDesiredVersionWithServerItem:(id)arg1 diffs:(unsigned long long)arg2 options:(unsigned int)arg3 needsSave:(bool*)arg4;
- (int)updateDesiredVersionWithServerItem:(id)arg1 options:(unsigned int)arg2 needsSave:(bool*)arg3;
- (bool)updateFromFSAtPath:(id)arg1 parentGlobalID:(id)arg2;
- (bool)updateLocationAndMetaFromFSAtPath:(id)arg1 parentGlobalID:(id)arg2;
- (void)updateVersionMetadataFromServerItem:(id)arg1 preventVersionDiffs:(bool)arg2;
- (bool)updateXattrInfoFromPath:(id)arg1 error:(id*)arg2;
- (id)uploadError;
- (bool)validateLoggingToFile:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
