<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BRCRelativePath.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudDocsDaemon.framework/BRCRelativePath.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon (575.504)
 */

@interface BRCRelativePath : NSObject <NSSecureCoding> {
    NSString * _absolutePath;
    BRCAppLibrary * _appLibrary;
    BRCRelativePath * _basePath;
    struct timespec { 
        long long tv_sec; 
        long long tv_nsec; 
    }  _birthtime;
    BRCBookmark * _bookmark;
    int  _deviceID;
    unsigned int  _documentID;
    int  _fd;
    unsigned long long  _fileID;
    unsigned char  _finderInfo;
    unsigned int  _flags;
    unsigned int  _fsGenerationID;
    BRCGenerationID * _generationID;
    unsigned int  _hasFinderInfoAliasBit;
    unsigned int  _hasFinderTags;
    unsigned int  _isBRAlias;
    unsigned int  _isBundle;
    unsigned int  _isBusy;
    unsigned int  _isExcluded;
    unsigned int  _isInPackage;
    unsigned int  _isPackageRoot;
    unsigned char  _itemScope;
    unsigned short  _mode;
    struct timespec { 
        long long tv_sec; 
        long long tv_nsec; 
    }  _mtime;
    struct brc_mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } pthread; 
    }  _mutex;
    unsigned int  _nlink;
    _Atomic int  _openRefCount;
    unsigned long long  _parentFileID;
    unsigned int  _qtnResolved;
    NSData * _quarantineInfo;
    unsigned int  _readFault;
    NSString * _relativePath;
    NSSet * _roots;
    BRCAccountSession * _session;
    long long  _size;
    NSString * _symlinkContent;
    unsigned short  _type;
    NSData * _xattrs;
    unsigned int  _xattrsResolved;
}

@property (nonatomic, readonly) NSString *absolutePath;
@property (nonatomic, retain) BRCAppLibrary *appLibrary;
@property (nonatomic, readonly) long long birthTime;
@property (nonatomic, readonly) BRCBookmark *bookmark;
@property (nonatomic, readonly) int deviceID;
@property (nonatomic, readonly) unsigned int documentID;
@property (nonatomic, readonly) bool exists;
@property (nonatomic, readonly) NSString *faultDisplayName;
@property (nonatomic, readonly) unsigned long long fileID;
@property (nonatomic, readonly) BRFileObjectID *fileObjectID;
@property (nonatomic, readonly) unsigned int fileType;
@property (nonatomic, readonly) NSString *filename;
@property (nonatomic, readonly) unsigned int fsGenerationID;
@property (nonatomic, readonly) BRCGenerationID *generationID;
@property (nonatomic, readonly) unsigned int hardlinkCount;
@property (nonatomic, readonly) bool hasFinderTags;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isBRAlias;
@property (nonatomic, readonly) bool isBundle;
@property (nonatomic, readonly) bool isBusy;
@property (nonatomic, readonly) bool isDocument;
@property (nonatomic, readonly) bool isExcluded;
@property (nonatomic, readonly) bool isExecutable;
@property (nonatomic, readonly) bool isFault;
@property (nonatomic, readonly) bool isFile;
@property (nonatomic, readonly) bool isFinderAlias;
@property (nonatomic, readonly) bool isHiddenExtension;
@property (nonatomic, readonly) bool isHiddenFile;
@property (nonatomic, readonly) bool isInPackage;
@property (nonatomic, readonly) bool isPackageRoot;
@property (nonatomic, readonly) bool isRoot;
@property (nonatomic, readonly) bool isSymLink;
@property (nonatomic, readonly) bool isUnixDir;
@property (nonatomic, readonly) bool isWritable;
@property (nonatomic) unsigned char itemScope;
@property (nonatomic, readonly) NSString *logicalName;
@property (nonatomic, readonly) long long modificationTime;
@property (nonatomic, readonly) unsigned long long parentFileID;
@property (nonatomic, readonly) BRFileObjectID *parentFileObjectID;
@property (readonly) unsigned long long parentHash;
@property (nonatomic, readonly) NSString *pathRelativeToPackageRoot;
@property (nonatomic, readonly) NSString *pathRelativeToRoot;
@property (nonatomic, readonly) NSURL *physicalURL;
@property (nonatomic, readonly) NSData *quarantineInfo;
@property (nonatomic, readonly) BRCRelativePath *root;
@property (nonatomic, readonly) BRCAccountSession *session;
@property (nonatomic, readonly) long long size;
@property (nonatomic, readonly) NSString *symlinkContent;
@property (nonatomic) unsigned short type;
@property (nonatomic, readonly) NSData *xattrs;

+ (int)locateByFileID:(unsigned long long)arg1 session:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_close;
- (bool)_fixupRelativePath;
- (id)_initWithPath:(id)arg1 relativeToRoot:(id)arg2;
- (bool)_resolveAndKeepOpenMustExist:(bool)arg1 allowResolveInPkg:(bool)arg2 error:(int*)arg3;
- (int)_resolveBasePath:(bool)arg1;
- (int)_resolvePathTypeAndContainer;
- (bool)_resolveRootWhenExists:(bool)arg1;
- (int)_resolveSymlinkRelativeTo:(int)arg1 path:(id)arg2;
- (int)_resolveWhenDoesntExist;
- (int)_resolveWhenExists;
- (bool)_shouldKeepBasePathOpen;
- (bool)_shouldKeepBasePathOpenWithoutOpenedFD;
- (id)absolutePath;
- (id)appLibrary;
- (id)basePath;
- (long long)birthTime;
- (id)bookmark;
- (void)close;
- (void)dealloc;
- (id)description;
- (int)deviceID;
- (unsigned int)documentID;
- (void)encodeWithCoder:(id)arg1;
- (bool)exists;
- (id)faultDisplayName;
- (unsigned long long)fileID;
- (id)fileObjectID;
- (unsigned int)fileType;
- (id)filename;
- (bool)flock:(int)arg1;
- (unsigned int)fsGenerationID;
- (id)generationID;
- (unsigned int)hardlinkCount;
- (bool)hasFinderTags;
- (unsigned long long)hash;
- (id)init;
- (id)initWithAbsolutePath:(id)arg1 session:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFileID:(unsigned long long)arg1 root:(id)arg2 session:(id)arg3;
- (id)initWithFileID:(unsigned long long)arg1 session:(id)arg2;
- (id)initWithPath:(id)arg1 appLibrary:(id)arg2;
- (id)initWithRootPath:(id)arg1 session:(id)arg2;
- (bool)isBRAlias;
- (bool)isBundle;
- (bool)isBusy;
- (bool)isDocument;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToRelativePath:(id)arg1;
- (bool)isExcluded;
- (bool)isExecutable;
- (bool)isFault;
- (bool)isFile;
- (bool)isFileWithFinderInfoAliasBit;
- (bool)isFinderAlias;
- (bool)isHiddenExtension;
- (bool)isHiddenFile;
- (bool)isInPackage;
- (bool)isPackageRoot;
- (bool)isResolved;
- (bool)isRoot;
- (bool)isSymLink;
- (bool)isUnixDir;
- (bool)isWritable;
- (unsigned char)itemScope;
- (id)logicalName;
- (id)logicalURL;
- (id)logicalURLWithLogicalName:(id)arg1;
- (long long)modificationTime;
- (unsigned long long)parentFileID;
- (id)parentFileObjectID;
- (unsigned long long)parentHash;
- (id)pathOfPackageRoot;
- (id)pathRelativeToPackageRoot;
- (id)pathRelativeToRoot;
- (id)pathWithChildAtPath:(id)arg1;
- (bool)performOnOpenFileDescriptor:(id /* block */)arg1 error:(int*)arg2;
- (bool)performOnOpenParentFileDescriptor:(id /* block */)arg1 error:(int*)arg2;
- (id)physicalURL;
- (id)quarantineInfo;
- (id)refreshFromPathMustExist:(bool)arg1;
- (void)refreshPathTypeAndContainer;
- (id)relativePath;
- (bool)resolveAndKeepOpenMustExist:(bool)arg1 allowResolveInPkg:(bool)arg2 error:(int*)arg3;
- (bool)resolveAndKeepOpenMustExist:(bool)arg1 error:(int*)arg2;
- (bool)resolveMustExist:(bool)arg1 error:(int*)arg2;
- (id)root;
- (id)session;
- (void)setAppLibrary:(id)arg1;
- (void)setItemScope:(unsigned char)arg1;
- (void)setType:(unsigned short)arg1;
- (long long)size;
- (id)symlinkContent;
- (unsigned short)type;
- (id)xattrs;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
