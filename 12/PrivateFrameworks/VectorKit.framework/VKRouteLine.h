<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VKRouteLine.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VectorKit.framework/VKRouteLine.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKRouteLine : NSObject {
    struct Box<double, 2> { 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _minimum; 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _maximum; 
    }  _bounds;
    double  _boundsInWorldUnit;
    double  _boundsUnitsPerMeter;
    double  _builtViewUnitsPerPoint;
    bool  _hasNewRoadMatches;
    struct Matrix<double, 4, 4> { 
        double _e[16]; 
    }  _inverseMatrix;
    double  _lastTrafficTimeStamp;
    struct ManeuverArrowCoordinates { 
        struct vector<md::ManeuverArrowInfo, std::__1::allocator<md::ManeuverArrowInfo> > { 
            struct ManeuverArrowInfo {} *__begin_; 
            struct ManeuverArrowInfo {} *__end_; 
            struct __compressed_pair<md::ManeuverArrowInfo *, std::__1::allocator<md::ManeuverArrowInfo> > { 
                struct ManeuverArrowInfo {} *__value_; 
            } __end_cap_; 
        } _maneuverArrows; 
    }  _maneuverArrowCoordinates;
    bool  _matchToRoads;
    double  _metersPerPoint;
    <VKRouteLineObserverProtocol> * _observer;
    VKPolylineOverlay * _overlay;
    VKPolylineOverlayRenderRegion * _renderRegion;
    NSSet * _retainedTiles;
    struct vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > > { 
        struct fast_shared_ptr<md::RouteLineSection, std::allocator> {} *__begin_; 
        struct fast_shared_ptr<md::RouteLineSection, std::allocator> {} *__end_; 
        struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > > { 
            struct fast_shared_ptr<md::RouteLineSection, std::allocator> {} *__value_; 
        } __end_cap_; 
    }  _sections;
    double  _simplificationEpsilonPoints;
    struct Matrix<float, 2, 1> { 
        float _e[2]; 
    }  _userLocation;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    }  _userLocationIndex;
    struct fast_shared_ptr<md::RouteLineSection, std::allocator> { 
        struct _fast_shared_ptr_control {} *_control; 
    }  _userLocationSection;
    double  _viewUnitsPerPoint;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Box<double' */ struct  bounds; /* unknown property attribute:  1>=[2d]}} */
@property bool hasNewRoadMatches;
@property (nonatomic) <VKRouteLineObserverProtocol> *observer;
@property (nonatomic, readonly) VKPolylineOverlay *overlay;
@property (nonatomic, readonly) VKPolylineOverlayRenderRegion *renderRegion;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{vector<geo::fast_shared_ptr<md::RouteLineSection' */ struct  sections; /* unknown property attribute:  std::allocator>}}} */
@property (nonatomic) double simplificationEpsilonPoints;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_updateBounds:(id)arg1;
- (void)_updateTilesCovered:(id)arg1;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; })bounds;
- (double)boundsUnitsPerMeter;
- (bool)buildRouteLine:(id)arg1 tiles:(id)arg2 viewUnitsPerPoint:(double)arg3 force:(bool)arg4 selected:(bool)arg5 isNavMode:(bool)arg6;
- (void)createMeshIfNecessary:(long long)arg1;
- (void)dealloc;
- (void)forEachSection:(id /* block */)arg1;
- (void)generateArrowsForManeuverDisplayMode:(int)arg1 routeLineWidth:(double)arg2;
- (bool)hasNewRoadMatches;
- (id)initWithPolylineOverlay:(id)arg1;
- (struct Matrix<double, 4, 4> { double x1[16]; })inverseManeuverTransform;
- (bool)isTrafficUpToDate;
- (bool)isTrafficUptoDate:(double)arg1;
- (struct vector<gm::Matrix<float, 2, 1>, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x1; struct Matrix<float, 2, 1> {} *x2; struct __compressed_pair<gm::Matrix<float, 2, 1> *, std::__1::allocator<gm::Matrix<float, 2, 1> > > { struct Matrix<float, 2, 1> {} *x_3_1_1; } x3; })maneuverPoints;
- (struct Matrix<double, 4, 4> { double x1[16]; })maneuverTransform;
- (bool)needsUpdateForViewingScale:(double)arg1;
- (id)observer;
- (id)overlay;
- (id)renderRegion;
- (struct vector<geo::fast_shared_ptr<md::RouteLineSection, std::allocator>, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > > { struct fast_shared_ptr<md::RouteLineSection, std::allocator> {} *x1; struct fast_shared_ptr<md::RouteLineSection, std::allocator> {} *x2; struct __compressed_pair<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> *, std::__1::allocator<geo::fast_shared_ptr<md::RouteLineSection, std::allocator> > > { struct fast_shared_ptr<md::RouteLineSection, std::allocator> {} *x_3_1_1; } x3; })sections;
- (void)setHasNewRoadMatches:(bool)arg1;
- (void)setObserver:(id)arg1;
- (void)setSimplificationEpsilonPoints:(double)arg1;
- (double)simplificationEpsilonPoints;
- (void)splitRouteLineAtAnnotation:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
