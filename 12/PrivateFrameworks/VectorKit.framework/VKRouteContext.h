<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VKRouteContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VectorKit.framework/VKRouteContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKRouteContext : NSObject {
    NSString * _accessPointEntryName;
    NSString * _accessPointExitName;
    NSHashTable * _alternateRouteLineObservers;
    NSArray * _alternateRoutes;
    long long  _currentLegIndex;
    long long  _currentStepIndex;
    bool  _hasContextChangedForAlternateRouteLines;
    bool  _hasContextChangedForLabels;
    bool  _hasContextChangedForRouteLine;
    long long  _inspectedLegIndex;
    long long  _inspectedStepIndex;
    NSHashTable * _labelObservers;
    NSString * _locale;
    struct { 
        double latitude; 
        double longitude; 
    }  _puckLocation;
    float  _puckRadius;
    unsigned long long  _puckSnappedStopID;
    VKRouteInfo * _routeInfo;
    NSHashTable * _routeLineObservers;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    }  _routeOffset;
    struct multimap<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > > { 
        struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > > > > { 
            struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *__begin_node_; 
            struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, void *> > > { 
                struct __tree_end_node<std::__1::__tree_node_base<void *> *> { 
                    struct __tree_node_base<void *> {} *__left_; 
                } __value_; 
            } __pair1_; 
            struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<RouteSection, std::__1::allocator<RouteSection> > >, std::__1::less<unsigned int>, true> > { 
                unsigned long long __value_; 
            } __pair3_; 
        } __tree_; 
    }  _shareSections;
    bool  _snappingToTransitLines;
    unsigned char  _useType;
}

@property (nonatomic, retain) NSString *accessPointEntryName;
@property (nonatomic, retain) NSString *accessPointExitName;
@property (nonatomic, retain) NSArray *alternateRoutes;
@property (nonatomic) long long currentLegIndex;
@property (nonatomic) long long currentStepIndex;
@property (nonatomic) long long inspectedLegIndex;
@property (nonatomic) long long inspectedStepIndex;
@property (nonatomic, retain) NSString *locale;
@property (nonatomic) struct { double x1; double x2; } puckLocation;
@property (nonatomic) float puckRadius;
@property (nonatomic) unsigned long long puckSnappedStopID;
@property (nonatomic, readonly) VKRouteInfo *routeInfo;
@property (nonatomic) struct PolylineCoordinate { unsigned int x1; float x2; } routeOffset;
@property (nonatomic) bool snappingToTransitLines;
@property (nonatomic, readonly) unsigned long long totalRouteCount;
@property (nonatomic, readonly) unsigned char useType;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_hashTableForObserverType:(unsigned char)arg1;
- (void)_setHasContextChangedForObserverType:(unsigned char)arg1 withValue:(bool)arg2;
- (id)accessPointEntryName;
- (id)accessPointExitName;
- (void)addObserver:(id)arg1 withType:(unsigned char)arg2;
- (void)addShareSections:(const struct { id x1; struct PolylineCoordinate { unsigned int x_2_1_1; float x_2_1_2; } x2; struct PolylineCoordinate { unsigned int x_3_1_1; float x_3_1_2; } x3; }*)arg1 shareCount:(unsigned int)arg2;
- (id)alternateRoutes;
- (long long)currentLegIndex;
- (long long)currentStepIndex;
- (void)dealloc;
- (void)forEachSectionWithShareCount:(unsigned int)arg1 dothis:(id /* block */)arg2;
- (id)initWithComposedRoute:(id)arg1 useType:(unsigned char)arg2;
- (id)initWithRouteInfo:(id)arg1 useType:(unsigned char)arg2;
- (long long)inspectedLegIndex;
- (long long)inspectedStepIndex;
- (id)locale;
- (struct { double x1; double x2; })puckLocation;
- (float)puckRadius;
- (unsigned long long)puckSnappedStopID;
- (void)removeObserver:(id)arg1 withType:(unsigned char)arg2;
- (void)resetNotificationsForObserverType:(unsigned char)arg1;
- (id)routeInfo;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeOffset;
- (void)setAccessPointEntryName:(id)arg1;
- (void)setAccessPointExitName:(id)arg1;
- (void)setAlternateRoutes:(id)arg1;
- (void)setCurrentLegIndex:(long long)arg1;
- (void)setCurrentStepIndex:(long long)arg1;
- (void)setInspectedLegIndex:(long long)arg1;
- (void)setInspectedStepIndex:(long long)arg1;
- (void)setLocale:(id)arg1;
- (void)setPuckLocation:(struct { double x1; double x2; })arg1;
- (void)setPuckRadius:(float)arg1;
- (void)setPuckSnappedStopID:(unsigned long long)arg1;
- (void)setRouteOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setSnappingToTransitLines:(bool)arg1;
- (bool)snappingToTransitLines;
- (unsigned long long)totalRouteCount;
- (unsigned char)useType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
