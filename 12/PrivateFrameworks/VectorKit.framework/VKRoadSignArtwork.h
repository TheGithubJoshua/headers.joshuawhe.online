<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VKRoadSignArtwork.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VectorKit.framework/VKRoadSignArtwork.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKRoadSignArtwork : NSObject {
    struct __CTFrame { } * _frame;
    struct __CTFramesetter { } * _framesetter;
    struct RoadSignGeneratedMetrics { 
        struct RoadSignPartMetrics { 
            unsigned char _type; 
            struct CGSize { 
                double width; 
                double height; 
            } _imageSize; 
            struct CGRect { 
                struct CGPoint { 
                    double x; 
                    double y; 
                } origin; 
                struct CGSize { 
                    double width; 
                    double height; 
                } size; 
            } _signBaseRect; 
            double _topEmptySpaceHeight; 
            double _bottomEmptySpaceHeight; 
            double _leftEmptySpaceWidth; 
            double _rightEmptySpaceWidth; 
            double _outsideImagePathExtension; 
            bool _hasArrows; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMin; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMax; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowTip; 
        } _leftRoadSignPartMetrics; 
        struct RoadSignPartMetrics { 
            unsigned char _type; 
            struct CGSize { 
                double width; 
                double height; 
            } _imageSize; 
            struct CGRect { 
                struct CGPoint { 
                    double x; 
                    double y; 
                } origin; 
                struct CGSize { 
                    double width; 
                    double height; 
                } size; 
            } _signBaseRect; 
            double _topEmptySpaceHeight; 
            double _bottomEmptySpaceHeight; 
            double _leftEmptySpaceWidth; 
            double _rightEmptySpaceWidth; 
            double _outsideImagePathExtension; 
            bool _hasArrows; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMin; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMax; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowTip; 
        } _rightRoadSignPartMetrics; 
        struct RoadSignPartMetrics { 
            unsigned char _type; 
            struct CGSize { 
                double width; 
                double height; 
            } _imageSize; 
            struct CGRect { 
                struct CGPoint { 
                    double x; 
                    double y; 
                } origin; 
                struct CGSize { 
                    double width; 
                    double height; 
                } size; 
            } _signBaseRect; 
            double _topEmptySpaceHeight; 
            double _bottomEmptySpaceHeight; 
            double _leftEmptySpaceWidth; 
            double _rightEmptySpaceWidth; 
            double _outsideImagePathExtension; 
            bool _hasArrows; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMin; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMax; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowTip; 
        } _stretchedRoadSignPartMetrics; 
        struct RoadSignPartMetrics { 
            unsigned char _type; 
            struct CGSize { 
                double width; 
                double height; 
            } _imageSize; 
            struct CGRect { 
                struct CGPoint { 
                    double x; 
                    double y; 
                } origin; 
                struct CGSize { 
                    double width; 
                    double height; 
                } size; 
            } _signBaseRect; 
            double _topEmptySpaceHeight; 
            double _bottomEmptySpaceHeight; 
            double _leftEmptySpaceWidth; 
            double _rightEmptySpaceWidth; 
            double _outsideImagePathExtension; 
            bool _hasArrows; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMin; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowWingMax; 
            struct CGPoint { 
                double x; 
                double y; 
            } _arrowTip; 
        } _middleRoadSignPartMetrics; 
        bool _hasMiddleSignPart; 
        struct CGSize { 
            double width; 
            double height; 
        } _imageSize; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _signBaseRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _glyphRect; 
        double _stretchedRoadSignPartWidth; 
        struct CGPoint { 
            double x; 
            double y; 
        } _arrowTipPosition; 
        struct CGPoint { 
            double x; 
            double y; 
        } _textPosition; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _textBounds; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _leftPartRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _rightPartRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _stretchedPartRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _middlePartRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _middleLeftStretchedPartRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } _middleRightStretchedPartRect; 
    }  _generatedMetrics;
    struct CGImage { } * _glyph;
    struct mutex { 
        struct _opaque_pthread_mutex_t { 
            long long __sig; 
            BOOL __opaque[56]; 
        } __m_; 
    }  _imageLock;
    struct __CTLine { } * _line;
    struct RoadSignColoring { 
        bool _hasFillColor; 
        bool _hasStrokeColor; 
        bool _hasShadowColor; 
        bool _hasTextColor; 
        struct array<double, 4> { 
            double __elems_[4]; 
        } _fillColorComponents; 
        struct array<double, 4> { 
            double __elems_[4]; 
        } _strokeColorComponents; 
        struct array<double, 4> { 
            double __elems_[4]; 
        } _shadowColorComponents; 
        struct array<double, 4> { 
            double __elems_[4]; 
        } _textColorComponents; 
    }  _signColoring;
    struct RoadSignMetrics { 
        unsigned char _orientation; 
        double _scale; 
        double _contentScale; 
        double _arrowWeight; 
        double _arrowLength; 
        struct CGSize { 
            double width; 
            double height; 
        } _shadowOffset; 
        double _shadowRadius; 
        double _strokeWeight; 
        double _signHeight; 
        double _signMargin; 
        double _horizontalMargin; 
        double _verticalMargin; 
        double _cornerRadius; 
        struct CGSize { 
            double width; 
            double height; 
        } _glyphSize; 
    }  _signMetrics;
    struct RoadSignTextMetrics { 
        double _scale; 
        double _contentScale; 
        double _horizontalMargin; 
        double _verticalMargin; 
        double _verticalOffset; 
        double _textSize; 
        struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> > { 
            struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> >::__rep, geo::StdAllocator<char, lhp::Allocator> > { 
                struct __rep { 
                    union { 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned long long __cap_; 
                        } __l; 
                        struct __short { 
                            BOOL __data_[23]; 
                            struct { 
                                unsigned char __size_; 
                            } ; 
                        } __s; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __value_; 
                struct StdAllocator<char, lhp::Allocator> { 
                    struct Allocator {} *_allocator; 
                } __value_; 
            } __r_; 
        } _fontFamily; 
        double _textDrawWidth; 
        double _textWrapWidth; 
    }  _textMetrics;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)image;
- (id)initWithString:(id)arg1 signMetrics:(struct RoadSignMetrics { unsigned char x1; double x2; double x3; double x4; double x5; struct CGSize { double x_6_1_1; double x_6_1_2; } x6; double x7; double x8; double x9; double x10; double x11; double x12; double x13; struct CGSize { double x_14_1_1; double x_14_1_2; } x14; })arg2 textMetrics:(struct RoadSignTextMetrics { double x1; double x2; double x3; double x4; double x5; double x6; struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> >::__rep, geo::StdAllocator<char, lhp::Allocator> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; struct StdAllocator<char, lhp::Allocator> { struct Allocator {} *x_2_3_1; } x_1_2_2; } x_7_1_1; } x7; double x8; double x9; })arg3 signColoring:(struct RoadSignColoring { bool x1; bool x2; bool x3; bool x4; struct array<double, 4> { double x_5_1_1[4]; } x5; struct array<double, 4> { double x_6_1_1[4]; } x6; struct array<double, 4> { double x_7_1_1[4]; } x7; struct array<double, 4> { double x_8_1_1[4]; } x8; })arg4 glyph:(struct CGImage { }*)arg5;
- (struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; })localCollisionBounds;
- (struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; })localRenderBounds;
- (struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; })localSignBounds;
- (struct Matrix<float, 2, 1> { float x1[2]; })offsetPixelForPixel:(struct Matrix<float, 2, 1> { float x1[2]; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
