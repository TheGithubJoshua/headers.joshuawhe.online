/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKTile : NSObject {
    double  _birthdate;
    struct VKCameraState { 
        struct RigidTransform<double> { 
            struct Quaternion<double> { 
                struct Matrix<double, 3, 1> { 
                    double _e[3]; 
                } _imaginary; 
                double _scalar; 
            } _rotation; 
            struct Matrix<double, 3, 1> { 
                double _e[3]; 
            } _translation; 
        } transform; 
        double aspectRatio; 
        double verticalFieldOfView; 
        double horizontalOffset; 
    }  _cameraState;
    struct Matrix<double, 4, 4> { 
        double _e[16]; 
    }  _inverseMatrix;
    struct VKTileKey { 
        unsigned int z; 
        int x; 
        int y; 
        unsigned int pointSize; 
    }  _key;
    struct Matrix<double, 4, 4> { 
        double _e[16]; 
    }  _matrix;
    VKTilePool * _pool;
    bool  _preliminary;
    struct Matrix<float, 4, 4> { 
        float _e[16]; 
    }  _shaderMatrix;
    struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { 
        struct ConstantDataTyped<ggl::Tile::View> {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _viewConstantData;
    struct Box<double, 2> { 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _minimum; 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _maximum; 
    }  bounds;
}

@property (nonatomic, readonly) double birthdate;
@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{Matrix<double' */ struct *inverseMatrix; /* unknown property attribute:  4>=[16d]} */
@property (nonatomic, readonly) struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; } key;
@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{Matrix<double' */ struct *matrix; /* unknown property attribute:  4>=[16d]} */
@property (getter=isPreliminary, nonatomic) bool preliminary;
@property (nonatomic, readonly) const /* Warning: unhandled struct encoding: '{Matrix<float' */ struct *shaderMatrix; /* unknown property attribute:  4>=[16f]} */
@property (nonatomic, readonly) double tileWidth;
@property (nonatomic, readonly) const struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x1; struct __shared_weak_count {} *x2; }*viewConstantData;

- (id).cxx_construct;
- (void).cxx_destruct;
- (double)birthdate;
- (void)dealloc;
- (id)description;
- (unsigned long long)geometryCount;
- (id)initWithKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1;
- (const struct Matrix<double, 4, 4> { double x1[16]; }*)inverseMatrix;
- (bool)isPreliminary;
- (struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; })key;
- (const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)keyPointer;
- (const struct Matrix<double, 4, 4> { double x1[16]; }*)matrix;
- (void)setKey:(const struct VKTileKey { unsigned int x1; int x2; int x3; unsigned int x4; }*)arg1;
- (void)setPool:(id)arg1;
- (void)setPreliminary:(bool)arg1;
- (const struct Matrix<float, 4, 4> { float x1[16]; }*)shaderMatrix;
- (double)tileWidth;
- (void)updateViewDependentStateIfNecessaryWithContext:(struct LayoutContext { id x1; struct shared_ptr<md::ViewTransform> { struct ViewTransform {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct shared_ptr<md::AnchorContext> { struct AnchorContext {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; id x4; id x5; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6; struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x_7_1_1; struct __shared_weak_count {} *x_7_1_2; } x7; struct VKEdgeInsets { float x_8_1_1; float x_8_1_2; float x_8_1_3; float x_8_1_4; } x8; struct VKEdgeInsets { float x_9_1_1; float x_9_1_2; float x_9_1_3; float x_9_1_4; } x9; unsigned char x10; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_11_1_1; struct __shared_weak_count {} *x_11_1_2; } x11; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; }*)arg1;
- (void)updateViewDependentStateWithContext:(struct LayoutContext { id x1; struct shared_ptr<md::ViewTransform> { struct ViewTransform {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct shared_ptr<md::AnchorContext> { struct AnchorContext {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; id x4; id x5; struct shared_ptr<gss::StylesheetManager<gss::PropertyID> > { struct StylesheetManager<gss::PropertyID> {} *x_6_1_1; struct __shared_weak_count {} *x_6_1_2; } x6; struct shared_ptr<gss::StylesheetManager<gss::ScenePropertyID> > { struct StylesheetManager<gss::ScenePropertyID> {} *x_7_1_1; struct __shared_weak_count {} *x_7_1_2; } x7; struct VKEdgeInsets { float x_8_1_1; float x_8_1_2; float x_8_1_3; float x_8_1_4; } x8; struct VKEdgeInsets { float x_9_1_1; float x_9_1_2; float x_9_1_3; float x_9_1_4; } x9; unsigned char x10; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_11_1_1; struct __shared_weak_count {} *x_11_1_2; } x11; struct shared_ptr<ggl::PolygonBase::MeshMesh> { struct MeshMesh {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; }*)arg1;
- (const struct shared_ptr<ggl::ConstantDataTyped<ggl::Tile::View> > { struct ConstantDataTyped<ggl::Tile::View> {} *x1; struct __shared_weak_count {} *x2; }*)viewConstantData;

@end
