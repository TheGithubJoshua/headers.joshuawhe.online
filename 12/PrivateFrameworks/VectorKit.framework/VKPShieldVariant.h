<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VKPShieldVariant.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VectorKit.framework/VKPShieldVariant.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKPShieldVariant : PBCodable <NSCopying> {
    unsigned int  _atlasIndex;
    unsigned int  _backgroundColor;
    unsigned int  _borderColor;
    float  _capWidthLeft;
    float  _capWidthRight;
    float  _centerOffsetX;
    struct { 
        float *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _centerPoints;
    struct { 
        float _a; 
        unsigned int _b; 
        unsigned int _g; 
        unsigned int _r; 
    }  _fontColor;
    NSString * _fontName;
    float  _fontSize;
    struct { 
        unsigned int textShadow : 1; 
        unsigned int textStroke : 1; 
        unsigned int fontColor : 1; 
        unsigned int nonDigitFontColor : 1; 
        unsigned int atlasIndex : 1; 
        unsigned int backgroundColor : 1; 
        unsigned int borderColor : 1; 
        unsigned int capWidthLeft : 1; 
        unsigned int capWidthRight : 1; 
        unsigned int centerOffsetX : 1; 
        unsigned int fontSize : 1; 
        unsigned int lineSpacing : 1; 
        unsigned int maxDigits : 1; 
        unsigned int minDigits : 1; 
        unsigned int nonDigitFontSize : 1; 
        unsigned int paddingLeft : 1; 
        unsigned int paddingRight : 1; 
        unsigned int quadIndex : 1; 
        unsigned int textBaseline : 1; 
        unsigned int textMaskColor : 1; 
    }  _has;
    struct { unsigned int x1; int x2; int x3; float x4; unsigned int x5; struct { unsigned int x_6_1_1 : 1; unsigned int x_6_1_2 : 1; unsigned int x_6_1_3 : 1; unsigned int x_6_1_4 : 1; unsigned int x_6_1_5 : 1; } x6; } * _layers;
    unsigned long long  _layersCount;
    unsigned long long  _layersSpace;
    float  _lineSpacing;
    unsigned int  _maxDigits;
    unsigned int  _minDigits;
    struct { 
        float _a; 
        unsigned int _b; 
        unsigned int _g; 
        unsigned int _r; 
    }  _nonDigitFontColor;
    NSString * _nonDigitFontName;
    float  _nonDigitFontSize;
    float  _paddingLeft;
    float  _paddingRight;
    unsigned int  _quadIndex;
    float  _textBaseline;
    int  _textMaskColor;
    struct { 
        struct { 
            float _a; 
            unsigned int _b; 
            unsigned int _g; 
            unsigned int _r; 
        } _color; 
        float _offsetX; 
        float _offsetY; 
        float _size; 
        struct { 
            unsigned int offsetX : 1; 
            unsigned int offsetY : 1; 
        } _has; 
    }  _textShadow;
    struct { 
        struct { 
            float _a; 
            unsigned int _b; 
            unsigned int _g; 
            unsigned int _r; 
        } _color; 
        float _width; 
    }  _textStroke;
}

@property (nonatomic) unsigned int atlasIndex;
@property (nonatomic) unsigned int backgroundColor;
@property (nonatomic) unsigned int borderColor;
@property (nonatomic) float capWidthLeft;
@property (nonatomic) float capWidthRight;
@property (nonatomic) float centerOffsetX;
@property (nonatomic, readonly) float*centerPoints;
@property (nonatomic, readonly) unsigned long long centerPointsCount;
@property (nonatomic) struct { float x1; unsigned int x2; unsigned int x3; unsigned int x4; } fontColor;
@property (nonatomic, retain) NSString *fontName;
@property (nonatomic) float fontSize;
@property (nonatomic) bool hasAtlasIndex;
@property (nonatomic) bool hasBackgroundColor;
@property (nonatomic) bool hasBorderColor;
@property (nonatomic) bool hasCapWidthLeft;
@property (nonatomic) bool hasCapWidthRight;
@property (nonatomic) bool hasCenterOffsetX;
@property (nonatomic) bool hasFontColor;
@property (nonatomic, readonly) bool hasFontName;
@property (nonatomic) bool hasFontSize;
@property (nonatomic) bool hasLineSpacing;
@property (nonatomic) bool hasMaxDigits;
@property (nonatomic) bool hasMinDigits;
@property (nonatomic) bool hasNonDigitFontColor;
@property (nonatomic, readonly) bool hasNonDigitFontName;
@property (nonatomic) bool hasNonDigitFontSize;
@property (nonatomic) bool hasPaddingLeft;
@property (nonatomic) bool hasPaddingRight;
@property (nonatomic) bool hasQuadIndex;
@property (nonatomic) bool hasTextBaseline;
@property (nonatomic) bool hasTextMaskColor;
@property (nonatomic) bool hasTextShadow;
@property (nonatomic) bool hasTextStroke;
@property (nonatomic, readonly) struct { unsigned int x1; int x2; int x3; float x4; unsigned int x5; struct { unsigned int x_6_1_1 : 1; unsigned int x_6_1_2 : 1; unsigned int x_6_1_3 : 1; unsigned int x_6_1_4 : 1; unsigned int x_6_1_5 : 1; } x6; }*layers;
@property (nonatomic, readonly) unsigned long long layersCount;
@property (nonatomic) float lineSpacing;
@property (nonatomic) unsigned int maxDigits;
@property (nonatomic) unsigned int minDigits;
@property (nonatomic) struct { float x1; unsigned int x2; unsigned int x3; unsigned int x4; } nonDigitFontColor;
@property (nonatomic, retain) NSString *nonDigitFontName;
@property (nonatomic) float nonDigitFontSize;
@property (nonatomic) float paddingLeft;
@property (nonatomic) float paddingRight;
@property (nonatomic) unsigned int quadIndex;
@property (nonatomic) float textBaseline;
@property (nonatomic) int textMaskColor;
@property (nonatomic) struct { struct { float x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; } x1; float x2; float x3; float x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; } x5; } textShadow;
@property (nonatomic) struct { struct { float x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; } x1; float x2; } textStroke;

- (struct Matrix<float, 4, 1> { float x1[4]; })_colorForMaskColor:(int)arg1 colors:(struct { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; }*)arg2;
- (void)addCenterPoint:(float)arg1;
- (void)addLayer:(struct { unsigned int x1; int x2; int x3; float x4; unsigned int x5; struct { unsigned int x_6_1_1 : 1; unsigned int x_6_1_2 : 1; unsigned int x_6_1_3 : 1; unsigned int x_6_1_4 : 1; unsigned int x_6_1_5 : 1; } x6; })arg1;
- (unsigned int)atlasIndex;
- (unsigned int)backgroundColor;
- (unsigned int)borderColor;
- (float)capWidthLeft;
- (float)capWidthRight;
- (float)centerOffsetX;
- (float)centerPointAtIndex:(unsigned long long)arg1;
- (float*)centerPoints;
- (unsigned long long)centerPointsCount;
- (void)clearCenterPoints;
- (void)clearLayers;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (struct { float x1; unsigned int x2; unsigned int x3; unsigned int x4; })fontColor;
- (id)fontName;
- (float)fontSize;
- (bool)hasAtlasIndex;
- (bool)hasBackgroundColor;
- (bool)hasBorderColor;
- (bool)hasCapWidthLeft;
- (bool)hasCapWidthRight;
- (bool)hasCenterOffsetX;
- (bool)hasFontColor;
- (bool)hasFontName;
- (bool)hasFontSize;
- (bool)hasLineSpacing;
- (bool)hasMaxDigits;
- (bool)hasMinDigits;
- (bool)hasNonDigitFontColor;
- (bool)hasNonDigitFontName;
- (bool)hasNonDigitFontSize;
- (bool)hasPaddingLeft;
- (bool)hasPaddingRight;
- (bool)hasQuadIndex;
- (bool)hasTextBaseline;
- (bool)hasTextMaskColor;
- (bool)hasTextShadow;
- (bool)hasTextStroke;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (struct { unsigned int x1; int x2; int x3; float x4; unsigned int x5; struct { unsigned int x_6_1_1 : 1; unsigned int x_6_1_2 : 1; unsigned int x_6_1_3 : 1; unsigned int x_6_1_4 : 1; unsigned int x_6_1_5 : 1; } x6; })layerAtIndex:(unsigned long long)arg1;
- (struct { unsigned int x1; int x2; int x3; float x4; unsigned int x5; struct { unsigned int x_6_1_1 : 1; unsigned int x_6_1_2 : 1; unsigned int x_6_1_3 : 1; unsigned int x_6_1_4 : 1; unsigned int x_6_1_5 : 1; } x6; }*)layers;
- (unsigned long long)layersCount;
- (float)lineSpacing;
- (unsigned int)maxDigits;
- (void)mergeFrom:(id)arg1;
- (unsigned int)minDigits;
- (struct CGImage { }*)newImageWithTextureAtlases:(id)arg1 atlasToImageCache:(id)arg2 atlasToImageCacheLock:(id)arg3 contentScale:(double)arg4 colors:(struct { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; }*)arg5;
- (struct { float x1; unsigned int x2; unsigned int x3; unsigned int x4; })nonDigitFontColor;
- (id)nonDigitFontName;
- (float)nonDigitFontSize;
- (float)paddingLeft;
- (float)paddingRight;
- (unsigned int)quadIndex;
- (bool)readFrom:(id)arg1;
- (void)setAtlasIndex:(unsigned int)arg1;
- (void)setBackgroundColor:(unsigned int)arg1;
- (void)setBorderColor:(unsigned int)arg1;
- (void)setCapWidthLeft:(float)arg1;
- (void)setCapWidthRight:(float)arg1;
- (void)setCenterOffsetX:(float)arg1;
- (void)setCenterPoints:(float*)arg1 count:(unsigned long long)arg2;
- (void)setFontColor:(struct { float x1; unsigned int x2; unsigned int x3; unsigned int x4; })arg1;
- (void)setFontName:(id)arg1;
- (void)setFontSize:(float)arg1;
- (void)setHasAtlasIndex:(bool)arg1;
- (void)setHasBackgroundColor:(bool)arg1;
- (void)setHasBorderColor:(bool)arg1;
- (void)setHasCapWidthLeft:(bool)arg1;
- (void)setHasCapWidthRight:(bool)arg1;
- (void)setHasCenterOffsetX:(bool)arg1;
- (void)setHasFontColor:(bool)arg1;
- (void)setHasFontSize:(bool)arg1;
- (void)setHasLineSpacing:(bool)arg1;
- (void)setHasMaxDigits:(bool)arg1;
- (void)setHasMinDigits:(bool)arg1;
- (void)setHasNonDigitFontColor:(bool)arg1;
- (void)setHasNonDigitFontSize:(bool)arg1;
- (void)setHasPaddingLeft:(bool)arg1;
- (void)setHasPaddingRight:(bool)arg1;
- (void)setHasQuadIndex:(bool)arg1;
- (void)setHasTextBaseline:(bool)arg1;
- (void)setHasTextMaskColor:(bool)arg1;
- (void)setHasTextShadow:(bool)arg1;
- (void)setHasTextStroke:(bool)arg1;
- (void)setLayers:(struct { unsigned int x1; int x2; int x3; float x4; unsigned int x5; struct { unsigned int x_6_1_1 : 1; unsigned int x_6_1_2 : 1; unsigned int x_6_1_3 : 1; unsigned int x_6_1_4 : 1; unsigned int x_6_1_5 : 1; } x6; }*)arg1 count:(unsigned long long)arg2;
- (void)setLineSpacing:(float)arg1;
- (void)setMaxDigits:(unsigned int)arg1;
- (void)setMinDigits:(unsigned int)arg1;
- (void)setNonDigitFontColor:(struct { float x1; unsigned int x2; unsigned int x3; unsigned int x4; })arg1;
- (void)setNonDigitFontName:(id)arg1;
- (void)setNonDigitFontSize:(float)arg1;
- (void)setPaddingLeft:(float)arg1;
- (void)setPaddingRight:(float)arg1;
- (void)setQuadIndex:(unsigned int)arg1;
- (void)setTextBaseline:(float)arg1;
- (void)setTextMaskColor:(int)arg1;
- (void)setTextShadow:(struct { struct { float x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; } x1; float x2; float x3; float x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; } x5; })arg1;
- (void)setTextStroke:(struct { struct { float x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; } x1; float x2; })arg1;
- (float)textBaseline;
- (int)textMaskColor;
- (struct { struct { float x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; } x1; float x2; float x3; float x4; struct { unsigned int x_5_1_1 : 1; unsigned int x_5_1_2 : 1; } x5; })textShadow;
- (struct { struct { float x_1_1_1; unsigned int x_1_1_2; unsigned int x_1_1_3; unsigned int x_1_1_4; } x1; float x2; })textStroke;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
