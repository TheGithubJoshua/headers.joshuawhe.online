<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VKFootprint.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VectorKit.framework/VKFootprint.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKFootprint : NSObject {
    struct Box<double, 2> { 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _minimum; 
        struct Matrix<double, 2, 1> { 
            double _e[2]; 
        } _maximum; 
    }  _boundingRect;
    double  _centerDepth;
    struct VKFootprintConvexHull_struct { 
        int edgeCount; 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } edgeOrigin[6]; 
        struct Matrix<double, 3, 1> { 
            double _e[3]; 
        } edgeNormal[6]; 
    }  _convexHull;
    struct Matrix<double, 3, 1> { 
        double _e[3]; 
    }  _cornerGroundPoints;
    int  _cornerGroundPointsCount;
    struct Matrix<double, 3, 1> { 
        double _e[3]; 
    }  _furthestGroundPoint;
    double  _maxDepth;
    double  _maxDistance;
    double  _minDepth;
    double  _minDistance;
    struct Matrix<double, 3, 1> { 
        double _e[3]; 
    }  _nearestGroundPoint;
}

@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Box<double' */ struct  boundingRect; /* unknown property attribute:  1>=[2d]}} */
@property (nonatomic, readonly) double centerDepth;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{VKFootprintConvexHull_struct=i[6{Matrix<double' */ struct  convexHull; /* unknown property attribute:  1>=[3d]}]} */
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Matrix<double' */ struct *cornerGroundPoints; /* unknown property attribute:  1>=[3d]} */
@property (nonatomic, readonly) int cornerGroundPointsCount;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Matrix<double' */ struct  furthestGroundPoint; /* unknown property attribute:  1>=[3d]} */
@property (nonatomic, readonly) double maxDepth;
@property (nonatomic, readonly) double minDepth;
@property (nonatomic, readonly) /* Warning: unhandled struct encoding: '{Matrix<double' */ struct  nearestGroundPoint; /* unknown property attribute:  1>=[3d]} */

- (id).cxx_construct;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; })_expandedBoundingRect;
- (id /* block */)annotationCoordinateTest;
- (id /* block */)annotationRectTest;
- (struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; })boundingRect;
- (double)centerDepth;
- (void)computeFromCamera:(id)arg1;
- (bool)containsGroundPoint:(struct Matrix<double, 3, 1> { double x1[3]; }*)arg1;
- (struct VKFootprintConvexHull_struct { int x1; struct Matrix<double, 3, 1> { double x_2_1_1[3]; } x2[6]; struct Matrix<double, 3, 1> { double x_3_1_1[3]; } x3[6]; })convexHull;
- (struct Matrix<double, 3, 1> { double x1[3]; }*)cornerGroundPoints;
- (int)cornerGroundPointsCount;
- (struct Matrix<double, 3, 1> { double x1[3]; })furthestGroundPoint;
- (double)maxDepth;
- (double)minDepth;
- (struct Matrix<double, 3, 1> { double x1[3]; })nearestGroundPoint;
- (bool)rejectsRect:(const struct Box<double, 2> { struct Matrix<double, 2, 1> { double x_1_1_1[2]; } x1; struct Matrix<double, 2, 1> { double x_2_1_1[2]; } x2; }*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
