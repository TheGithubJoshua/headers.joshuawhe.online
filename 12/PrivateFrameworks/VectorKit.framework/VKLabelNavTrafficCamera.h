<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VKLabelNavTrafficCamera.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VectorKit.framework/VKLabelNavTrafficCamera.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKLabelNavTrafficCamera : NSObject <VKLabelNavFeature> {
    struct Mercator2<double> { 
        double _e[2]; 
    }  _displayMercatorPoint;
    unsigned char  _iconState;
    bool  _isAwayFromRoute;
    bool  _isOnRoute;
    bool  _isPicked;
    unsigned char  _labelNavMode;
    struct shared_ptr<md::LabelStyle> { 
        struct LabelStyle {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _labelStyle;
    struct Mercator2<double> { 
        double _e[2]; 
    }  _nextMercatorPoint;
    struct Mercator2<double> { 
        double _e[2]; 
    }  _previousMercatorPoint;
    VKLabelNavRoadLabel * _roadLabel;
    struct PolylineCoordinate { 
        unsigned int index; 
        float offset; 
    }  _routeOffset;
    bool  _shouldRestyleFeature;
    unsigned char  _tailDirection;
    VKTrafficCameraFeature * _trafficCamera;
}

@property (nonatomic, readonly) unsigned char currentIconState;
@property (nonatomic) struct Mercator2<double> { double x1[2]; } displayMercatorPoint;
@property (nonatomic, readonly) unsigned char expectedIconState;
@property (nonatomic, readonly) struct Mercator2<double> { double x1[2]; } featureMercatorPoint;
@property (nonatomic, readonly) long long intraRoadPriority;
@property (nonatomic, readonly) bool isAwayFromRoute;
@property (nonatomic, readonly) bool isEtaFeature;
@property (nonatomic, readonly) bool isGuidanceStepStart;
@property (nonatomic, readonly) bool isInGuidance;
@property (nonatomic, readonly) bool isOnRoute;
@property (nonatomic) bool isPicked;
@property (nonatomic, readonly) bool isRamp;
@property (nonatomic, readonly) bool isStartOfRoadName;
@property (nonatomic, readonly) bool isTrafficCameraFeature;
@property (nonatomic, readonly) VKLabelNavRoadLabel *label;
@property (nonatomic, readonly) unsigned char labelNavMode;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) long long navState;
@property (nonatomic, readonly) struct Mercator2<double> { double x1[2]; } nextMercatorPoint;
@property (nonatomic, readonly) struct Mercator2<double> { double x1[2]; } previousMercatorPoint;
@property (nonatomic, readonly) struct PolylineCoordinate { unsigned int x1; float x2; } routeOffset;
@property (nonatomic, readonly) NSString *shieldDisplayGroup;
@property (nonatomic) bool shouldRestyleFeature;
@property (nonatomic) unsigned char tailDirection;
@property (nonatomic, readonly) unsigned char tailOrientation;
@property (nonatomic, readonly) VKTrafficCameraFeature *trafficCamera;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_clearLabel;
- (unsigned char)currentIconState;
- (void)dealloc;
- (struct Mercator2<double> { double x1[2]; })displayMercatorPoint;
- (unsigned char)expectedIconState;
- (struct Mercator2<double> { double x1[2]; })featureMercatorPoint;
- (bool)hasLabelWithArtwork;
- (id)initWithTrafficCamera:(id)arg1 previousMercatorPoint:(const struct Mercator2<double> { double x1[2]; }*)arg2 nextMercatorPoint:(const struct Mercator2<double> { double x1[2]; }*)arg3;
- (long long)intraRoadPriority;
- (bool)isAwayFromRoute;
- (bool)isCallout;
- (bool)isEtaFeature;
- (bool)isGuidanceStepStart;
- (bool)isInGuidance;
- (bool)isOnRoute;
- (bool)isPOI;
- (bool)isPicked;
- (bool)isRamp;
- (bool)isStartOfRoadName;
- (bool)isTrafficCameraFeature;
- (id)label;
- (unsigned char)labelNavMode;
- (void)layoutWithNavContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; struct LabelLayoutContext {} *x3; struct LabelNavLayoutContext {} *x4; }*)arg1;
- (id)name;
- (long long)navState;
- (struct Mercator2<double> { double x1[2]; })nextMercatorPoint;
- (struct Mercator2<double> { double x1[2]; })previousMercatorPoint;
- (void)recreateRoadSignWithNavContext:(struct NavContext { int (**x1)(); struct LabelManager {} *x2; struct LabelLayoutContext {} *x3; struct LabelNavLayoutContext {} *x4; }*)arg1;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeOffset;
- (void)setDisplayMercatorPoint:(struct Mercator2<double> { double x1[2]; })arg1;
- (void)setIsPicked:(bool)arg1;
- (void)setShouldRestyleFeature:(bool)arg1;
- (void)setTailDirection:(unsigned char)arg1;
- (id)shieldDisplayGroup;
- (bool)shouldRestyleFeature;
- (void)swapExternalFeature:(id)arg1;
- (unsigned char)tailDirection;
- (unsigned char)tailOrientation;
- (id)trafficCamera;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
