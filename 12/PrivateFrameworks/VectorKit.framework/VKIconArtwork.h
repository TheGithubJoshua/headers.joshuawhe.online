<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VKIconArtwork.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VectorKit.framework/VKIconArtwork.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit (1360.35.12.18.4)
 */

@interface VKIconArtwork : NSObject {
    NSMutableArray * _completionHandlers;
    double  _contentScale;
    struct ExtraStyle { 
        float _scale; 
        float _contentScale; 
        float _tailDirection; 
        struct Matrix<unsigned int, 2, 1> { 
            unsigned int _e[2]; 
        } _glyphImageSize; 
        struct Matrix<unsigned int, 2, 1> { 
            unsigned int _e[2]; 
        } _landmarkImageSize; 
        struct Matrix<unsigned int, 2, 1> { 
            unsigned int _e[2]; 
        } _outlineImageSize; 
        struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> > { 
            struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> >::__rep, geo::StdAllocator<char, lhp::Allocator> > { 
                struct __rep { 
                    union { 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned long long __cap_; 
                        } __l; 
                        struct __short { 
                            BOOL __data_[23]; 
                            struct { 
                                unsigned char __size_; 
                            } ; 
                        } __s; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __value_; 
                struct StdAllocator<char, lhp::Allocator> { 
                    struct Allocator {} *_allocator; 
                } __value_; 
            } __r_; 
        } _text; 
    }  _extraStyle;
    struct CGColor { } * _fullBleedColor;
    struct atomic<bool> { 
        _Atomic bool __a_; 
    }  _hasIcon;
    VKImage * _image;
    struct Style { 
        struct optional<gss::IconStyle> { 
            bool _hasValue; 
            union ValueUnion { 
                unsigned char data[1]; 
                unsigned char type; 
            } _value; 
        } _iconStyle; 
        struct vector<md::IconImage::IconLayer, geo::StdAllocator<md::IconImage::IconLayer, lhp::Allocator> > { 
            unsigned char *__begin_; 
            unsigned char *__end_; 
            struct __compressed_pair<md::IconImage::IconLayer *, geo::StdAllocator<md::IconImage::IconLayer, lhp::Allocator> > { 
                unsigned char *__value_; 
                struct StdAllocator<md::IconImage::IconLayer, lhp::Allocator> { 
                    struct Allocator {} *_allocator; 
                } __value_; 
            } __end_cap_; 
        } _iconLayers; 
        float _scale; 
        float _contentScale; 
        float _fillWeight; 
        float _strokeWeight; 
        float _shadowWeight; 
        float _cornerRadius; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _glyphMargin; 
        struct Matrix<float, 2, 1> { 
            float _e[2]; 
        } _shadowOffset; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _fillColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _strokeColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _shadowColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _glyphColor; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _gradientTop; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _gradientBottom; 
        struct FixedPointVector<unsigned char, 4> { 
            unsigned char _e[4]; 
        } _overlayColor; 
        unsigned char _glyphBlendMode; 
        unsigned char _glyphStyle; 
        struct basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> > { 
            struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, geo::StdAllocator<char, lhp::Allocator> >::__rep, geo::StdAllocator<char, lhp::Allocator> > { 
                struct __rep { 
                    union { 
                        struct __long { 
                            char *__data_; 
                            unsigned long long __size_; 
                            unsigned long long __cap_; 
                        } __l; 
                        struct __short { 
                            BOOL __data_[23]; 
                            struct { 
                                unsigned char __size_; 
                            } ; 
                        } __s; 
                        struct __raw { 
                            unsigned long long __words[3]; 
                        } __r; 
                    } ; 
                } __value_; 
                struct StdAllocator<char, lhp::Allocator> { 
                    struct Allocator {} *_allocator; 
                } __value_; 
            } __r_; 
        } _shieldID; 
    }  _style;
    struct CGPoint { 
        double x; 
        double y; 
    }  _textCenterPosition;
}

@property (nonatomic, readonly) double contentScale;
@property (nonatomic) struct CGColor { }*fullBleedColor;
@property (nonatomic, readonly) struct Style { struct optional<gss::IconStyle> { bool x_1_1_1; union ValueUnion { unsigned char x_2_2_1[1]; unsigned char x_2_2_2; } x_1_1_2; } x1; /* Warning: unhandled struct encoding: '{vector<md::IconImage::IconLayer' */ struct x2; } style; /* unknown property attribute:  lhp::Allocator>=^{Allocator}}}}} */

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_cleanUpAfterDrawing;
- (id)_newImage;
- (id)_newImageWithText:(id)arg1 fontName:(id)arg2;
- (struct Matrix<float, 2, 1> { float x1[2]; })anchorPoint;
- (double)contentScale;
- (void)dealloc;
- (struct CGColor { }*)fullBleedColor;
- (void)getImage:(id /* block */)arg1 queue:(id)arg2;
- (bool)hasBounds;
- (id)image;
- (id)imageWithText:(id)arg1 fontName:(id)arg2;
- (id)initWithImage:(struct CGImage { }*)arg1 contentScale:(double)arg2;
- (struct Box<float, 2> { struct Matrix<float, 2, 1> { float x_1_1_1[2]; } x1; struct Matrix<float, 2, 1> { float x_2_1_1[2]; } x2; })localCollisionBounds;
- (struct Box<unsigned int, 2> { struct Matrix<unsigned int, 2, 1> { unsigned int x_1_1_1[2]; } x1; struct Matrix<unsigned int, 2, 1> { unsigned int x_2_1_1[2]; } x2; })localRenderBounds;
- (void)setFullBleedColor:(struct CGColor { }*)arg1;
- (struct Style { struct optional<gss::IconStyle> { bool x_1_1_1; union ValueUnion { unsigned char x_2_2_1[1]; unsigned char x_2_2_2; } x_1_1_2; } x1; struct vector<md::IconImage::IconLayer, geo::StdAllocator<md::IconImage::IconLayer, lhp::Allocator> > { unsigned char *x_2_1_1; unsigned char *x_2_1_2; struct __compressed_pair<md::IconImage::IconLayer *, geo::StdAllocator<md::IconImage::IconLayer, lhp::Allocator> > { unsigned char *x_3_2_1; struct StdAllocator<md::IconImage::IconLayer, lhp::Allocator> { struct Allocator {} *x_2_3_1; } x_3_2_2; } x_2_1_3; } x2; float x3; float x4; float x5; float x6; float x7; float x8; struct Matrix<float, 2, 1> { float x_9_1_1[2]; } x9; struct Matrix<float, 2, 1> { float x_10_1_1[2]; } x10; struct FixedPointVector<unsigned char, 4> { unsigned char x_11_1_1[4]; } x11; struct FixedPointVector<unsigned char, 4> { unsigned char x_12_1_1[4]; } x12; struct FixedPointVector<unsigned char, 4> { unsigned char x_13_1_1[4]; } x13; struct FixedPointVector<unsigned char, 4> { unsigned char x_14_1_1[4]; } x14; })style;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
