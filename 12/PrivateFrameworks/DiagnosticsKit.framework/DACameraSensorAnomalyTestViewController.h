<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>DACameraSensorAnomalyTestViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DiagnosticsKit.framework/DACameraSensorAnomalyTestViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DiagnosticsKit.framework/DiagnosticsKit (1)
 */

@interface DACameraSensorAnomalyTestViewController : DATestViewController <AVCapturePhotoCaptureDelegate, DACameraSensorAnomalyTargetViewDelegate, UIGestureRecognizerDelegate, UINavigationControllerDelegate, UIScrollViewDelegate> {
    CBAdaptationClient * _adaptationClient;
    NSMutableArray * _allResults;
    CBBlueLightClient * _blueLightClient;
    bool  _blueLightStatusActive;
    UIView * _bottomBar;
    CBClient * _client;
    bool  _colorAdaptationStatus;
    UIButton * _continueButton;
    DACameraSensorAnomalyTestImageView * _currentImageView;
    long long  _currentTag;
    bool  _disableAmbientLightAdaptation;
    UIColor * _drawColor;
    bool  _drawingMode;
    bool  _enableMaxBrightness;
    bool  _flashModeOn;
    NSString * _identifier;
    UIScrollView * _imageScrollView;
    float  _minimumSquareLength;
    struct CGPoint { 
        double x; 
        double y; 
    }  _originPoint;
    float  _originalScreenBrightness;
    AVCapturePhotoOutput * _output;
    DACameraSensorAnomalyTargetView * _overlayView;
    UIPanGestureRecognizer * _panGesture;
    UIView * _previewView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _rectangle;
    UIButton * _retakeButton;
    AVCaptureSession * _session;
    UITapGestureRecognizer * _tapGesture;
    UIButton * _usePhotoButton;
    NSString * _viewfinderInstruction;
}

@property (nonatomic, retain) CBAdaptationClient *adaptationClient;
@property (nonatomic, retain) NSMutableArray *allResults;
@property (nonatomic, retain) CBBlueLightClient *blueLightClient;
@property (nonatomic) bool blueLightStatusActive;
@property (nonatomic, retain) UIView *bottomBar;
@property (nonatomic, retain) CBClient *client;
@property (nonatomic) bool colorAdaptationStatus;
@property (nonatomic, retain) UIButton *continueButton;
@property (nonatomic, retain) DACameraSensorAnomalyTestImageView *currentImageView;
@property (nonatomic) long long currentTag;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableAmbientLightAdaptation;
@property (nonatomic, retain) UIColor *drawColor;
@property (nonatomic) bool drawingMode;
@property (nonatomic) bool enableMaxBrightness;
@property (nonatomic) bool flashModeOn;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *identifier;
@property (nonatomic, retain) UIScrollView *imageScrollView;
@property (nonatomic) float minimumSquareLength;
@property (nonatomic) struct CGPoint { double x1; double x2; } originPoint;
@property (nonatomic) float originalScreenBrightness;
@property (nonatomic, retain) AVCapturePhotoOutput *output;
@property (nonatomic, retain) DACameraSensorAnomalyTargetView *overlayView;
@property (nonatomic, retain) UIPanGestureRecognizer *panGesture;
@property (nonatomic, retain) UIView *previewView;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } rectangle;
@property (nonatomic, retain) UIButton *retakeButton;
@property (nonatomic, retain) AVCaptureSession *session;
@property (readonly) Class superclass;
@property (nonatomic, retain) UITapGestureRecognizer *tapGesture;
@property (nonatomic, retain) UIButton *usePhotoButton;
@property (nonatomic, copy) NSString *viewfinderInstruction;

- (void).cxx_destruct;
- (id)adaptationClient;
- (void)addPanGesture;
- (void)addTapGesture;
- (void)addedRectangleView;
- (id)allResults;
- (id)blueLightClient;
- (bool)blueLightStatusActive;
- (id)bottomBar;
- (void)cancelTapped;
- (void)cancelTest;
- (void)captureOutput:(id)arg1 didFinishProcessingPhoto:(id)arg2 error:(id)arg3;
- (void)cleanUp;
- (id)client;
- (bool)colorAdaptationStatus;
- (id)continueButton;
- (void)continueButtonPressed:(id)arg1;
- (id)currentImageView;
- (long long)currentTag;
- (void)disableAdaptationAndBlueLightReduction;
- (bool)disableAmbientLightAdaptation;
- (id)drawColor;
- (bool)drawingMode;
- (bool)enableMaxBrightness;
- (void)endTestWithStatusCode:(id)arg1;
- (id)findDevice:(id)arg1;
- (bool)flashModeOn;
- (void)hideCameraView;
- (id)identifier;
- (id)imageScrollView;
- (id)initWithTest:(id)arg1 fullScreen:(bool)arg2;
- (float)minimumSquareLength;
- (struct CGPoint { double x1; double x2; })originPoint;
- (float)originalScreenBrightness;
- (id)output;
- (id)overlayView;
- (id)panGesture;
- (void)panOccurred:(id)arg1;
- (void)parseResults;
- (long long)preferredInterfaceOrientationForPresentation;
- (bool)prefersStatusBarHidden;
- (id)previewView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectangle;
- (void)removeDrawingModeViews;
- (void)removeResultWithTag:(long long)arg1;
- (void)removeShape:(id)arg1;
- (void)resetBrightness;
- (void)resetColorAdjustmentStates;
- (id)retakeButton;
- (void)retakeButtonPressed:(id)arg1;
- (void)saveAndMaximizeBrightness;
- (void)saveColorAdjustmentStates;
- (void)scrollViewDidZoom:(id)arg1;
- (id)session;
- (void)setAdaptationClient:(id)arg1;
- (void)setAllResults:(id)arg1;
- (void)setBlueLightClient:(id)arg1;
- (void)setBlueLightStatusActive:(bool)arg1;
- (void)setBottomBar:(id)arg1;
- (void)setClient:(id)arg1;
- (void)setColorAdaptationStatus:(bool)arg1;
- (void)setContinueButton:(id)arg1;
- (void)setCurrentImageView:(id)arg1;
- (void)setCurrentTag:(long long)arg1;
- (void)setDisableAmbientLightAdaptation:(bool)arg1;
- (void)setDrawColor:(id)arg1;
- (void)setDrawingMode:(bool)arg1;
- (void)setEnableMaxBrightness:(bool)arg1;
- (void)setFlashModeOn:(bool)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setImageScrollView:(id)arg1;
- (void)setMinimumSquareLength:(float)arg1;
- (void)setOriginPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setOriginalScreenBrightness:(float)arg1;
- (void)setOutput:(id)arg1;
- (void)setOverlayView:(id)arg1;
- (void)setPanGesture:(id)arg1;
- (void)setPreviewView:(id)arg1;
- (void)setRectangle:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRetakeButton:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setTapGesture:(id)arg1;
- (void)setUsePhotoButton:(id)arg1;
- (void)setViewfinderInstruction:(id)arg1;
- (void)setupCamera;
- (long long)setupCameraPreview;
- (long long)setupSessionForDevice:(id)arg1;
- (bool)shouldAutorotate;
- (void)showCameraView;
- (unsigned long long)supportedInterfaceOrientations;
- (void)takePicture;
- (id)tapGesture;
- (void)tapOccurred:(id)arg1;
- (void)updateViewConstraints;
- (id)usePhotoButton;
- (void)usePhotoButtonPressed:(id)arg1;
- (bool)validateAndApplyParameters:(id)arg1;
- (bool)validateAndApplyPredicates:(id)arg1;
- (void)viewDidLoad;
- (id)viewForZoomingInScrollView:(id)arg1;
- (id)viewfinderInstruction;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
