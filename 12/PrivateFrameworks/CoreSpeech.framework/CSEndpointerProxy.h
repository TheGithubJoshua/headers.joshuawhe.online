<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CSEndpointerProxy.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreSpeech.framework/CSEndpointerProxy.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech ()
 */

@interface CSEndpointerProxy : NSObject <CSEndpointAnalyzer, CSEndpointAnalyzerDelegate> {
    <CSEndpointAnalyzerImpl> * _activeEndpointer;
    bool  _didEnterTwoshot;
    <CSEndpointAnalyzerDelegate> * _endpointerDelegate;
    <CSEndpointAnalyzerImpl> * _hybridEndpointer;
    bool  _recordingDidStop;
    double  _vad2AutomaticEndpointingSuspensionEndTime;
    double  _vad2Delay;
    double  _vad2EndWaitTime;
    long long  _vad2EndpointStyle;
    <CSEndpointAnalyzerImpl> * _vad2Endpointer;
    long long  _vad2EndpointtMode;
    double  _vad2InterspeechWaitTime;
    double  _vad2MinimumDurationForEndpointer;
    bool  _vad2SaveSamplesSeenInReset;
    double  _vad2StartWaitTime;
}

@property (nonatomic) <CSEndpointAnalyzerImpl> *activeEndpointer;
@property (nonatomic) double automaticEndpointingSuspensionEndTime;
@property (nonatomic) double bypassSamples;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double delay;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didEnterTwoshot;
@property (nonatomic) double endWaitTime;
@property (nonatomic) long long endpointMode;
@property (nonatomic) long long endpointStyle;
@property (nonatomic) <CSEndpointAnalyzerDelegate> *endpointerDelegate;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) <CSEndpointAnalyzerImpl> *hybridEndpointer;
@property (nonatomic) double interspeechWaitTime;
@property (nonatomic, readonly) double lastEndOfVoiceActivityTime;
@property (nonatomic, readonly) double lastStartOfVoiceActivityTime;
@property (nonatomic) double minimumDurationForEndpointer;
@property (nonatomic) bool recordingDidStop;
@property (nonatomic) bool saveSamplesSeenInReset;
@property (nonatomic) double startWaitTime;
@property (readonly) Class superclass;
@property (nonatomic) double vad2AutomaticEndpointingSuspensionEndTime;
@property (nonatomic) double vad2Delay;
@property (nonatomic) double vad2EndWaitTime;
@property (nonatomic) long long vad2EndpointStyle;
@property (nonatomic, retain) <CSEndpointAnalyzerImpl> *vad2Endpointer;
@property (nonatomic) long long vad2EndpointtMode;
@property (nonatomic) double vad2InterspeechWaitTime;
@property (nonatomic) double vad2MinimumDurationForEndpointer;
@property (nonatomic) bool vad2SaveSamplesSeenInReset;
@property (nonatomic) double vad2StartWaitTime;

- (void).cxx_destruct;
- (void)_setupVAD2Endpointer;
- (bool)_shouldEnterTwoShotAtEndPointTime:(double)arg1;
- (bool)_shouldUseVAD2ForTwoShot;
- (id)activeEndpointer;
- (double)automaticEndpointingSuspensionEndTime;
- (double)delay;
- (bool)didEnterTwoshot;
- (double)elapsedTimeWithNoSpeech;
- (unsigned long long)endPointAnalyzerType;
- (double)endWaitTime;
- (long long)endpointMode;
- (long long)endpointStyle;
- (void)endpointer:(id)arg1 didDetectHardEndpointAtTime:(double)arg2 withMetrics:(id)arg3;
- (void)endpointer:(id)arg1 didDetectStartpointAtTime:(double)arg2;
- (id)endpointerDelegate;
- (id)endpointerModelVersion;
- (id)hybridEndpointer;
- (id)init;
- (double)interspeechWaitTime;
- (double)lastEndOfVoiceActivityTime;
- (double)lastStartOfVoiceActivityTime;
- (double)minimumDurationForEndpointer;
- (void)preheat;
- (void)processAudioSamplesAsynchronously:(id)arg1;
- (void)processServerEndpointFeatures:(id)arg1;
- (bool)recordingDidStop;
- (void)recordingStoppedForReason:(unsigned long long)arg1;
- (void)reset;
- (void)resetForNewRequestWithSampleRate:(unsigned long long)arg1 recordContext:(id)arg2;
- (void)resetForVoiceTriggerTwoShotWithSampleRate:(unsigned long long)arg1;
- (bool)saveSamplesSeenInReset;
- (void)setActiveChannel:(unsigned long long)arg1;
- (void)setActiveEndpointer:(id)arg1;
- (void)setAutomaticEndpointingSuspensionEndTime:(double)arg1;
- (void)setDelay:(double)arg1;
- (void)setDidEnterTwoshot:(bool)arg1;
- (void)setEndWaitTime:(double)arg1;
- (void)setEndpointMode:(long long)arg1;
- (void)setEndpointStyle:(long long)arg1;
- (void)setEndpointerDelegate:(id)arg1;
- (void)setHybridEndpointer:(id)arg1;
- (void)setInterspeechWaitTime:(double)arg1;
- (void)setMinimumDurationForEndpointer:(double)arg1;
- (void)setRecordingDidStop:(bool)arg1;
- (void)setSaveSamplesSeenInReset:(bool)arg1;
- (void)setStartWaitTime:(double)arg1;
- (void)setVad2AutomaticEndpointingSuspensionEndTime:(double)arg1;
- (void)setVad2Delay:(double)arg1;
- (void)setVad2EndWaitTime:(double)arg1;
- (void)setVad2EndpointStyle:(long long)arg1;
- (void)setVad2Endpointer:(id)arg1;
- (void)setVad2EndpointtMode:(long long)arg1;
- (void)setVad2InterspeechWaitTime:(double)arg1;
- (void)setVad2MinimumDurationForEndpointer:(double)arg1;
- (void)setVad2SaveSamplesSeenInReset:(bool)arg1;
- (void)setVad2StartWaitTime:(double)arg1;
- (void)shouldAcceptEagerResultForDuration:(double)arg1 resultsCompletionHandler:(id /* block */)arg2;
- (double)startWaitTime;
- (double)trailingSilenceDurationAtEndpoint;
- (void)updateEndpointerDelayedTrigger:(bool)arg1;
- (void)updateEndpointerThreshold:(float)arg1;
- (double)vad2AutomaticEndpointingSuspensionEndTime;
- (double)vad2Delay;
- (double)vad2EndWaitTime;
- (long long)vad2EndpointStyle;
- (id)vad2Endpointer;
- (long long)vad2EndpointtMode;
- (double)vad2InterspeechWaitTime;
- (double)vad2MinimumDurationForEndpointer;
- (bool)vad2SaveSamplesSeenInReset;
- (double)vad2StartWaitTime;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
