<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CSAudioRecorder.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreSpeech.framework/CSAudioRecorder.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech ()
 */

@interface CSAudioRecorder : NSObject <AVVoiceControllerPlaybackDelegate, AVVoiceControllerRecordDelegate, CSAudioDecoderDelegate, CSAudioFileReaderDelegate, CSBeepCancellerDelegate> {
    unsigned long long  _audioFilePathIndex;
    CSAudioFileReader * _audioFileReader;
    CSBeepCanceller * _beepCanceller;
    CSAudioZeroCounter * _continuousZeroCounter;
    struct OpaqueAudioConverter { } * _deinterleaver;
    <CSAudioRecorderDelegate> * _delegate;
    struct AudioBufferList { 
        unsigned int mNumberBuffers; 
        struct AudioBuffer { 
            unsigned int mNumberChannels; 
            unsigned int mDataByteSize; 
            void *mData; 
        } mBuffers[1]; 
    }  _interleavedABL;
    NSDictionary * _latestContext;
    bool  _needSampleRateConversion;
    unsigned long long  _numSamplesProcessed;
    CSAudioDecoder * _opusDecoder;
    struct AudioBufferList { unsigned int x1; struct AudioBuffer { unsigned int x_2_1_1; unsigned int x_2_1_2; void *x_2_1_3; } x2[1]; } * _pNonInterleavedABL;
    CSAudioPowerMeter * _powerMeter;
    CSOSTransaction * _recordingTransaction;
    CSRemoteRecordClient * _remoteRecordClient;
    CSAudioSampleRateConverter * _sampleRateConverter;
    bool  _shouldUsePowerMeter;
    bool  _shouldUseRemoteRecord;
    AVVoiceController * _voiceController;
    unsigned long long  _vtEndInSampleCount;
    bool  _waitingForDidStart;
    CSAudioZeroFilter * _zeroFilter;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CSAudioRecorderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool duckOthersOption;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_audioRecorderDidStartRecordingSuccessfully:(bool)arg1 error:(id)arg2;
- (void)_audioRecorderDidStopRecordingForReason:(long long)arg1;
- (id)_beepCanceller;
- (void)_createAudioPowerMeterIfNeeded;
- (void)_createDeInterleaverIfNeeded;
- (void)_createSampleRateConverterIfNeeded;
- (id)_deinterleaveBufferIfNeeded:(id)arg1;
- (void)_destroyVoiceController;
- (void)_holdAudioRecordingTransaction;
- (bool)_needResetAudioInjectionIndex:(id)arg1;
- (void)_processAudioChain:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3;
- (void)_processAudioChainWithZeroFiltering:(id)arg1 atTime:(unsigned long long)arg2;
- (float)_recordingSampleRate;
- (void)_releaseAudioRecordingTransaction;
- (void)_resetZeroFilter;
- (id)_samplingRateConvertIfNeeded:(id)arg1;
- (bool)_shouldInjectAudio;
- (bool)_shouldRunZeroFilter;
- (bool)_shouldUseRemoteBuiltInMic:(id)arg1;
- (bool)_shouldUseRemoteRecordForContext:(id)arg1;
- (bool)_startRecordingForAudioInjection;
- (void)_updatePowerMeter:(id)arg1;
- (id)_voiceControllerWithContext:(id)arg1 error:(id*)arg2;
- (unsigned long long)alertStartTime;
- (void)audioDecoderDidDecodePackets:(id)arg1 buffer:(id)arg2 remoteVAD:(id)arg3 timestamp:(unsigned long long)arg4;
- (void)audioFileReaderBufferAvailable:(id)arg1 buffer:(id)arg2 atTime:(unsigned long long)arg3;
- (void)audioFileReaderDidStartRecording:(id)arg1 successfully:(bool)arg2 error:(id)arg3;
- (void)audioFileReaderDidStopRecording:(id)arg1 forReason:(long long)arg2;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)beepCancellerDidCancelSamples:(id)arg1 buffer:(id)arg2 timestamp:(unsigned long long)arg3;
- (void)configureAlertBehavior:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (bool)duckOthersOption;
- (void)enableMiniDucking:(bool)arg1;
- (double)getRecordBufferDuration;
- (id)initWithContext:(id)arg1 error:(id*)arg2;
- (bool)isNarrowBand;
- (bool)isRecording;
- (id)metrics;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (bool)playAlertSoundForType:(long long)arg1;
- (bool)playRecordStartingAlertAndResetEndpointer;
- (id)playbackRoute;
- (bool)prepareListenWithSettings:(id)arg1 error:(id*)arg2;
- (bool)prepareRecordWithSettings:(id)arg1 error:(id*)arg2;
- (void)prewarmAudioSession;
- (id)recordDeviceInfo;
- (id)recordRoute;
- (id)recordSettings;
- (void)releaseAudioSession:(unsigned long long)arg1;
- (bool)releaseAudioSessionForListening:(id*)arg1;
- (bool)releaseAudioSessionForListening:(unsigned long long)arg1 error:(id*)arg2;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;
- (bool)setCurrentContext:(id)arg1 error:(id*)arg2;
- (void)setDelegate:(id)arg1;
- (void)setDuckOthersOption:(bool)arg1;
- (void)setMeteringEnabled:(bool)arg1;
- (bool)setRecordBufferDuration:(double)arg1;
- (bool)setRecordMode:(long long)arg1 error:(id*)arg2;
- (void)setSynchronousCallbackEnabled:(bool)arg1;
- (bool)startListening:(id*)arg1;
- (bool)startListeningWithSettings:(id)arg1 error:(id*)arg2;
- (bool)startRecording;
- (bool)startRecording:(id*)arg1;
- (bool)startRecordingWithSettings:(id)arg1 error:(id*)arg2;
- (void)stopRecording;
- (void)updateMeters;
- (void)voiceControllerBeginRecordInterruption:(id)arg1;
- (void)voiceControllerBeginRecordInterruption:(id)arg1 withContext:(id)arg2;
- (void)voiceControllerDidFinishAlertPlayback:(id)arg1 ofType:(int)arg2 error:(id)arg3;
- (void)voiceControllerDidSetAudioSessionActive:(id)arg1 isActivated:(bool)arg2;
- (void)voiceControllerDidStartRecording:(id)arg1 successfully:(bool)arg2 error:(id)arg3;
- (void)voiceControllerDidStopRecording:(id)arg1 forReason:(long long)arg2;
- (void)voiceControllerEndRecordInterruption:(id)arg1;
- (void)voiceControllerMediaServicesWereLost:(id)arg1;
- (void)voiceControllerMediaServicesWereReset:(id)arg1;
- (void)voiceControllerRecordBufferAvailable:(id)arg1 buffer:(id)arg2;
- (void)voiceControllerRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(int)arg2;
- (void)voiceControllerWillSetAudioSessionActive:(id)arg1 willActivate:(bool)arg2;
- (id)voiceTriggerInfo;
- (void)willDestroy;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
