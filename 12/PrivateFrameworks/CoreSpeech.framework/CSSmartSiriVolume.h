<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CSSmartSiriVolume.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CoreSpeech.framework/CSSmartSiriVolume.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CoreSpeech.framework/CoreSpeech ()
 */

@interface CSSmartSiriVolume : NSObject <CSAlarmMonitorDelegate, CSMediaPlayingMonitorDelegate, CSSpeechManagerDelegate, CSTimerMonitorDelegate, CSVoiceTriggerDelegate> {
    unsigned long long  _LKFSChannelBitset;
    unsigned int  _LKFSLowerPercentile;
    float  _LKFSMicSensitivityOffset;
    float  _LKFSTTSMappingInputRangeHigh;
    float  _LKFSTTSMappingInputRangeLow;
    float  _LKFSTTSMappingOutputRangeHigh;
    float  _LKFSTTSMappingOutputRangeLow;
    float  _LKFSTimeConstant;
    unsigned int  _LKFSUpperPercentile;
    float  _TTSVolumeLowerLimitDB;
    float  _TTSVolumeUpperLimitDB;
    bool  _alarmSoundIsFiring;
    float  _alarmVolume;
    CSAsset * _currentAsset;
    NSUserDefaults * _defaults;
    <CSSmartSiriVolumeDelegate> * _delegate;
    unsigned int  _energyBufferSize;
    struct vector<float, std::__1::allocator<float> > { 
        float *__begin_; 
        float *__end_; 
        struct __compressed_pair<float *, std::__1::allocator<float> > { 
            float *__value_; 
        } __end_cap_; 
    }  _floatBuffer;
    bool  _isStartSampleCountMarked;
    bool  _mediaIsPlaying;
    float  _musicVolumeDB;
    unsigned long long  _noiseLevelChannelBitset;
    unsigned int  _noiseLowerPercentile;
    float  _noiseMicSensitivityOffset;
    float  _noiseTTSMappingInputRangeHigh;
    float  _noiseTTSMappingInputRangeLow;
    float  _noiseTTSMappingOutputRangeHigh;
    float  _noiseTTSMappingOutputRangeLow;
    float  _noiseTimeConstant;
    unsigned int  _noiseUpperPercentile;
    float  _noiseWeight;
    unsigned long long  _processedSampleCount;
    NSObject<OS_dispatch_queue> * _queue;
    unsigned long long  _samplesFed;
    bool  _shouldPauseLKFSProcess;
    bool  _shouldPauseSSVProcess;
    struct unique_ptr<SmartSiriVolume, std::__1::default_delete<SmartSiriVolume> > { 
        struct __compressed_pair<SmartSiriVolume *, std::__1::default_delete<SmartSiriVolume> > { 
            struct SmartSiriVolume {} *__value_; 
        } __ptr_; 
    }  _smartSiriVolumeLKFS;
    struct unique_ptr<SmartSiriVolume, std::__1::default_delete<SmartSiriVolume> > { 
        struct __compressed_pair<SmartSiriVolume *, std::__1::default_delete<SmartSiriVolume> > { 
            struct SmartSiriVolume {} *__value_; 
        } __ptr_; 
    }  _smartSiriVolumeNoiseLevel;
    CSSmartSiriVolumeEnablePolicy * _ssvEnablePolicy;
    unsigned long long  _startAnalyzeSampleCount;
    bool  _timerSoundIsFiring;
    float  _userOffsetInputRangeHigh;
    float  _userOffsetInputRangeLow;
    float  _userOffsetOutputRangeHigh;
    float  _userOffsetOutputRangeLow;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CSSmartSiriVolumeDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)CSAlarmMonitor:(id)arg1 didReceiveAlarmChanged:(long long)arg2;
- (void)CSMediaPlayingMonitor:(id)arg1 didReceiveMediaPlayingChanged:(long long)arg2;
- (void)CSTimerMonitor:(id)arg1 didReceiveTimerChanged:(long long)arg2;
- (void)CSVolumeMonitor:(id)arg1 didReceiveAlarmVolumeChanged:(float)arg2;
- (void)CSVolumeMonitor:(id)arg1 didReceiveMusicVolumeChanged:(float)arg2;
- (float)_combineResultsWithOptimalFromNoise:(float)arg1 andOptimalFromLkfs:(float)arg2 withUserOffset:(float)arg3;
- (float)_convertDB2Mag:(float)arg1;
- (float)_estimatedTTSVolume:(float)arg1 lowerLimit:(float)arg2 upperLimit:(float)arg3 TTSmappingInputRangeLow:(float)arg4 TTSmappingInputRangeHigh:(float)arg5 TTSmappingOutputRangeLow:(float)arg6 TTSmappingOutputRangeHigh:(float)arg7;
- (float)_getMusicVolumeDB:(float)arg1;
- (void)_pauseSSVProcessing;
- (void)_prepareSoundLevelBufferFromSamples:(unsigned int)arg1 soundType:(long long)arg2;
- (void)_processAudioChunk:(id)arg1 soundType:(long long)arg2;
- (void)_reset;
- (void)_resetStartAnalyzeTime;
- (void)_resumeSSVProcessing;
- (float)_scaleInputWithInRangeOutRange:(float)arg1 minIn:(float)arg2 maxIn:(float)arg3 minOut:(float)arg4 maxOut:(float)arg5;
- (void)_setAsset:(id)arg1;
- (void)_setDefaultParameters;
- (void)_setStartAnalyzeTime:(unsigned long long)arg1;
- (id)delegate;
- (float)estimateSoundLevelbySoundType:(long long)arg1;
- (float)estimatedTTSVolumeForNoiseLevelAndLKFS:(float)arg1 LKFS:(float)arg2;
- (void)fetchInitSystemVolumes;
- (id)initWithSamplingRate:(float)arg1 asset:(id)arg2;
- (void)initializeAlarmState;
- (void)initializeMediaPlayingState;
- (void)initializeTimerState;
- (void)prepareSoundLevelBufferFromSamples:(id)arg1 soundType:(long long)arg2 firedVoiceTriggerEvent:(bool)arg3 triggerStartTimeSampleOffset:(unsigned long long)arg4 triggerEndTimeSampleOffset:(unsigned long long)arg5;
- (void)reset;
- (void)setAsset:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)speechManagerDidStartForwarding:(id)arg1 successfully:(bool)arg2 error:(id)arg3;
- (void)speechManagerDidStopForwarding:(id)arg1 forReason:(long long)arg2;
- (void)speechManagerLPCMRecordBufferAvailable:(id)arg1 chunk:(id)arg2;
- (void)speechManagerRecordBufferAvailable:(id)arg1 buffer:(id)arg2;
- (void)startSmartSiriVolume;
- (void)voiceTriggerDidDetectKeyword:(id)arg1 deviceId:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
