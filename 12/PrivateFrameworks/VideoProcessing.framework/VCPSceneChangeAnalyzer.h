<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCPSceneChangeAnalyzer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideoProcessing.framework/VCPSceneChangeAnalyzer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing (699.60)
 */

@interface VCPSceneChangeAnalyzer : VCPVideoAnalyzer {
    VCPSceneChangeSegment * _activeSegment;
    bool  _currentStatus;
    bool  _firstFrame;
    struct FrameBuffer { 
        int frame_count_; 
        struct Frame { 
            int frame_idx_; 
            struct { 
                long long value; 
                int timescale; 
                unsigned int flags; 
                long long epoch; 
            } timestamp_; 
            struct { 
                long long value; 
                int timescale; 
                unsigned int flags; 
                long long epoch; 
            } duration_; 
            struct Translation { 
                float x_; 
                float y_; 
                float z_; 
            } ave_motion_; 
            struct Translation { 
                float x_; 
                float y_; 
                float z_; 
            } org_motion_; 
            float quality_score_; 
            unsigned long long distortion_; 
            float distortion_norm_; 
            struct Translation { 
                float x_; 
                float y_; 
                float z_; 
            } motion_change_; 
            unsigned int compressed_bytes_; 
            bool blur_; 
            struct Translation { 
                float x_; 
                float y_; 
                float z_; 
            } acc_var_; 
            float texture_; 
            struct MotionResult { 
                float significant_values_[6]; 
                float confidence_[6]; 
                float fine_action_score_; 
                float action_score_; 
                float track_score_; 
                float rotation_angle_; 
                int action_blocks_; 
                float action_motion_; 
                bool valid_mb_; 
                bool valid_submb_; 
                int support_size_; 
                float residual_var_; 
                float gmv_[2]; 
                struct { 
                    long long value; 
                    int timescale; 
                    unsigned int flags; 
                    long long epoch; 
                } duration_; 
                float scene_delta_; 
                float scene_delta_ratio_; 
                struct Vector<ma::Object *> { 
                    struct __CFArray {} *vector_; 
                } objects_; 
                struct Vector<ma::Object *> { 
                    struct __CFArray {} *vector_; 
                } detect_objects_; 
            } motion_result_; 
            float interestingness_; 
            float obstruction_; 
            float colorfulness_score_; 
            struct Histogram { 
                float extremities_; 
                float overexposes_; 
                int *histogram_[3]; 
                int *moments_hist_[2]; 
            } histogram_; 
        } buffer_[35]; 
    }  _frameBuffer;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  _frameTimeRange;
    bool  _isSegmentPoint;
    float  _sceneDeltaBuffer;
    NSMutableArray * _sceneSegments;
    bool  _verbose;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)ComputeSceneDelta:(struct Frame { int x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; struct { long long x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; long long x_3_1_4; } x3; struct Translation { float x_4_1_1; float x_4_1_2; float x_4_1_3; } x4; struct Translation { float x_5_1_1; float x_5_1_2; float x_5_1_3; } x5; float x6; unsigned long long x7; float x8; struct Translation { float x_9_1_1; float x_9_1_2; float x_9_1_3; } x9; unsigned int x10; bool x11; struct Translation { float x_12_1_1; float x_12_1_2; float x_12_1_3; } x12; float x13; struct MotionResult { float x_14_1_1[6]; float x_14_1_2[6]; float x_14_1_3; float x_14_1_4; float x_14_1_5; float x_14_1_6; int x_14_1_7; float x_14_1_8; bool x_14_1_9; bool x_14_1_10; int x_14_1_11; float x_14_1_12; float x_14_1_13[2]; struct { long long x_14_2_1; int x_14_2_2; unsigned int x_14_2_3; long long x_14_2_4; } x_14_1_14; float x_14_1_15; float x_14_1_16; struct Vector<ma::Object *> { struct __CFArray {} *x_17_2_1; } x_14_1_17; struct Vector<ma::Object *> { struct __CFArray {} *x_18_2_1; } x_14_1_18; } x14; }*)arg1;
- (void)PrintSegments;
- (int)analyzeFrame:(struct __CVBuffer { }*)arg1 withTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 andDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 flags:(unsigned long long*)arg4;
- (bool)decideLensSwitchPoint:(struct Frame { int x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; struct { long long x_3_1_1; int x_3_1_2; unsigned int x_3_1_3; long long x_3_1_4; } x3; struct Translation { float x_4_1_1; float x_4_1_2; float x_4_1_3; } x4; struct Translation { float x_5_1_1; float x_5_1_2; float x_5_1_3; } x5; float x6; unsigned long long x7; float x8; struct Translation { float x_9_1_1; float x_9_1_2; float x_9_1_3; } x9; unsigned int x10; bool x11; struct Translation { float x_12_1_1; float x_12_1_2; float x_12_1_3; } x12; float x13; struct MotionResult { float x_14_1_1[6]; float x_14_1_2[6]; float x_14_1_3; float x_14_1_4; float x_14_1_5; float x_14_1_6; int x_14_1_7; float x_14_1_8; bool x_14_1_9; bool x_14_1_10; int x_14_1_11; float x_14_1_12; float x_14_1_13[2]; struct { long long x_14_2_1; int x_14_2_2; unsigned int x_14_2_3; long long x_14_2_4; } x_14_1_14; float x_14_1_15; float x_14_1_16; struct Vector<ma::Object *> { struct __CFArray {} *x_17_2_1; } x_14_1_17; struct Vector<ma::Object *> { struct __CFArray {} *x_18_2_1; } x_14_1_18; } x14; }*)arg1;
- (int)finalizeAnalysisPass:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1;
- (id)init;
- (bool)isSegmentPoint;
- (id)results;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
