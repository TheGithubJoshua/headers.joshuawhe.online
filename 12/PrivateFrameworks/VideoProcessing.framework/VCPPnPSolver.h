<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCPPnPSolver.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideoProcessing.framework/VCPPnPSolver.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing (699.60)
 */

@interface VCPPnPSolver : NSObject {
    float * _alphas;
    float  _cameraOrientation;
    float  _controlPointsCamera;
    float  _controlPointsWorld;
    float  _fu;
    float  _fv;
    int  _numPoints;
    const float * _points2D;
    const float * _points3D;
    float * _points3DCamera;
    const float * _pointsImage;
    const float * _pointsWorld;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _pose;
    float  _uc;
    float  _vc;
}

@property struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } pose;

- (int)computeBarycentricCoordinates;
- (void)computeControlPointsCamera:(const float*)arg1 Vt:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2;
- (int)computeL6x10:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 L6x10:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2;
- (void)computePoints3DCamera;
- (float)computeProjectionError:(float)arg1 T:(float)arg2;
- (void)computeR6x1:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1;
- (int)computeRT:(float)arg1 T:(float)arg2;
- (int)computeSVDVt:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 Vt:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2;
- (int)configureGaussNewton:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 R6x1:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2 betas:(float)arg3 jacobian:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg4 residual:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg5;
- (int)correctSigns;
- (void)dealloc;
- (int)estimateBetasN1:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 R6x1:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2 betas:(float*)arg3;
- (int)estimateBetasN2:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 R6x1:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2 betas:(float*)arg3;
- (int)estimateBetasN3:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 R6x1:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2 betas:(float*)arg3;
- (int)estimateExtrinsicsWith:(const float*)arg1 andPoints3D:(const float*)arg2 andNumPoints:(int)arg3;
- (int)estimatePose:(float*)arg1;
- (int)estimateRT:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 betas:(const float*)arg2 R:(float)arg3 T:(float)arg4 projectionError:(float*)arg5;
- (int)getControlPoints;
- (id)initWithFocalLengthInPixels:(float)arg1 principalPoint:(struct CGPoint { double x1; double x2; })arg2 cameraTowardsPositiveZ:(bool)arg3;
- (int)optimizeBetas:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg1 R6x1:(struct Matrix<float, 0, 0> { float *x1; unsigned long long x2; unsigned int x3; unsigned int x4; }*)arg2 betas:(float)arg3;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })pose;
- (void)setPose:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)updateFocalLengthInPixels:(float)arg1;
- (void)updateIntrinsic:(float)arg1 vc:(float)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
