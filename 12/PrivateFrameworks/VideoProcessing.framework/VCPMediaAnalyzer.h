<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VCPMediaAnalyzer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/VideoProcessing.framework/VCPMediaAnalyzer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/VideoProcessing.framework/VideoProcessing (699.60)
 */

@interface VCPMediaAnalyzer : NSObject {
    NSObject<OS_dispatch_queue> * _analysisQueue;
    NSXPCConnection * _connection;
    VCPDatabaseReader * _databaseReader;
    bool  _noResultStrip;
    long long  _sandboxHandle;
    bool  _standalone;
    NSObject<OS_dispatch_queue> * _storageQueue;
}

+ (id)sharedMediaAnalyzer;

- (void).cxx_destruct;
- (id)addClassificationResults:(id)arg1 analysis:(id)arg2;
- (id)analyzeOndemand:(id)arg1 forAnalysisTypes:(unsigned long long)arg2 storeAnalysis:(bool)arg3;
- (void)assetsAnalyzedSinceDate:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)cancelAnalysisWithRequestID:(int)arg1;
- (void)checkDuplicate:(id)arg1 withAsset:(id)arg2 duplicate:(long long*)arg3;
- (id)connection;
- (id)curateMovieAssetsForCollection:(id)arg1 withAlreadyCuratedAssets:(id)arg2 andDesiredCount:(unsigned long long)arg3 allowOnDemand:(bool)arg4;
- (void)dealloc;
- (void)distanceFromAsset:(id)arg1 timeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg2 toAsset:(id)arg3 timeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg4 duplicate:(long long*)arg5 distance:(float*)arg6;
- (void)distanceFromAsset:(id)arg1 toAsset:(id)arg2 duplicate:(long long*)arg3 distance:(float*)arg4;
- (void)getDatabaseSandboxExtension;
- (void)getSceneDescriptors:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg1 featureResults:(id)arg2 descriptorArray:(id)arg3;
- (id)init;
- (unsigned long long)metaAnalysisTypesForAsset:(id)arg1;
- (id)queryImageDescriptorOfAsset:(id)arg1 withExistingAnalysis:(id)arg2 timeRange:(struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })arg3 lastFeature:(bool)arg4 isDegraded:(bool*)arg5;
- (int)requestAnalysesForAssets:(id)arg1 analysisTypes:(unsigned long long)arg2 allowOndemand:(bool)arg3 progressHandler:(id /* block */)arg4 completionHandler:(id /* block */)arg5;
- (int)requestAnalysisForAsset:(id)arg1 analysisTypes:(unsigned long long)arg2 progressHandler:(id /* block */)arg3 completionHandler:(id /* block */)arg4;
- (id)requestAnalysisForAsset:(id)arg1 withAnalysisInDatabase:(id)arg2 analysisTypes:(unsigned long long)arg3 allowOndemand:(bool)arg4;
- (int)requestAnalysisTypes:(unsigned long long)arg1 forAssets:(id)arg2 allowOndemand:(bool)arg3 progressHandler:(id /* block */)arg4 analyses:(id)arg5;
- (id)requestAnalysisTypes:(unsigned long long)arg1 forAssets:(id)arg2 allowOndemand:(bool)arg3 progressHandler:(id /* block */)arg4 error:(id*)arg5;
- (id)requestLivePhotoEffectsForAssets:(id)arg1 allowOnDemand:(bool)arg2 flags:(unsigned long long)arg3;
- (id)requestMovieHighlightsForAssets:(id)arg1;
- (unsigned long long)typesToRemove:(unsigned long long)arg1 requested:(unsigned long long)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
