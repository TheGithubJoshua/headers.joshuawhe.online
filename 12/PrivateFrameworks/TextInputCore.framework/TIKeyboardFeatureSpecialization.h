<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TIKeyboardFeatureSpecialization.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TextInputCore.framework/TIKeyboardFeatureSpecialization.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TextInputCore.framework/TextInputCore ()
 */

@interface TIKeyboardFeatureSpecialization : NSObject {
    long long  _currentUserInterfaceIdiom;
    TIInputMode * _inputMode;
    struct USet { } * m_acceptableCharacterSet;
    struct USet { } * m_precomposedCharacterSet;
}

@property (nonatomic) long long currentUserInterfaceIdiom;
@property (nonatomic, readonly) TIInputMode *inputMode;

+ (struct USet { }*)createAcceptableCharacterSetForKeyboardLocale:(id)arg1;
+ (id)createSpecializationForInputMode:(id)arg1;

- (void).cxx_destruct;
- (id)accentKeyStringForKeyboardState:(id)arg1;
- (bool)acceptsCharacter:(unsigned int)arg1;
- (bool)allowsAutocorrectionOfValidWords;
- (bool)canHandleKeyHitTest;
- (struct USet { }*)createAcceptableCharacterSet;
- (struct TIInputManager { int (**x1)(); struct vector<KB::Input, std::__1::allocator<KB::Input> > { struct Input {} *x_2_1_1; struct Input {} *x_2_1_2; struct __compressed_pair<KB::Input *, std::__1::allocator<KB::Input> > { struct Input {} *x_3_2_1; } x_2_1_3; } x2; struct String { unsigned short x_3_1_1; unsigned short x_3_1_2; unsigned short x_3_1_3; unsigned char x_3_1_4; char *x_3_1_5; BOOL x_3_1_6[16]; } x3; struct String { unsigned short x_4_1_1; unsigned short x_4_1_2; unsigned short x_4_1_3; unsigned char x_4_1_4; char *x_4_1_5; BOOL x_4_1_6[16]; } x4; unsigned int x5; struct String { unsigned short x_6_1_1; unsigned short x_6_1_2; unsigned short x_6_1_3; unsigned char x_6_1_4; char *x_6_1_5; BOOL x_6_1_6[16]; } x6; struct retain_ptr<const __CFLocale *> { struct __CFLocale {} *x_7_1_1; } x7; struct LockedInput { unsigned int x_8_1_1; unsigned int x_8_1_2; } x8; struct StrokeBuildManager {} *x9; struct String { unsigned short x_10_1_1; unsigned short x_10_1_2; unsigned short x_10_1_3; unsigned char x_10_1_4; char *x_10_1_5; BOOL x_10_1_6[16]; } x10; }*)createInputManager;
- (long long)currentUserInterfaceIdiom;
- (void)dealloc;
- (id)dictionaryInputMode;
- (bool)dictionaryUsesExternalEncoding;
- (bool)doesComposeText;
- (id)externalStringToInternal:(id)arg1;
- (id)initWithInputMode:(id)arg1;
- (id)inputMode;
- (id)internalStringToExternal:(id)arg1;
- (id)keyboardBehaviors;
- (unsigned long long)maxPriorWordTokensAfterTrimming;
- (id)nonstopPunctuationCharacters;
- (const struct USet { }*)precomposedCharacterSet;
- (void)reloadPrecomposedCharacterSetWithIdiom:(long long)arg1;
- (id)replacementForDoubleSpace;
- (id)sentenceDelimitingCharacters;
- (id)sentencePrefixingCharacters;
- (id)sentenceTrailingCharacters;
- (void)setCurrentUserInterfaceIdiom:(long long)arg1;
- (bool)shouldAddModifierSymbolsToWordCharacters;
- (bool)shouldConvertAutocorrectionCandidatesToFullWidth;
- (bool)shouldConvertCandidateToExternal;
- (bool)shouldExtendPriorWord;
- (bool)shouldLearnLowercaseAtBeginningOfSentence;
- (void)specializeInputManager:(struct TIInputManager { int (**x1)(); struct vector<KB::Input, std::__1::allocator<KB::Input> > { struct Input {} *x_2_1_1; struct Input {} *x_2_1_2; struct __compressed_pair<KB::Input *, std::__1::allocator<KB::Input> > { struct Input {} *x_3_2_1; } x_2_1_3; } x2; struct String { unsigned short x_3_1_1; unsigned short x_3_1_2; unsigned short x_3_1_3; unsigned char x_3_1_4; char *x_3_1_5; BOOL x_3_1_6[16]; } x3; struct String { unsigned short x_4_1_1; unsigned short x_4_1_2; unsigned short x_4_1_3; unsigned char x_4_1_4; char *x_4_1_5; BOOL x_4_1_6[16]; } x4; unsigned int x5; struct String { unsigned short x_6_1_1; unsigned short x_6_1_2; unsigned short x_6_1_3; unsigned char x_6_1_4; char *x_6_1_5; BOOL x_6_1_6[16]; } x6; struct retain_ptr<const __CFLocale *> { struct __CFLocale {} *x_7_1_1; } x7; struct LockedInput { unsigned int x_8_1_1; unsigned int x_8_1_2; } x8; struct StrokeBuildManager {} *x9; struct String { unsigned short x_10_1_1; unsigned short x_10_1_2; unsigned short x_10_1_3; unsigned char x_10_1_4; char *x_10_1_5; BOOL x_10_1_6[16]; } x10; }*)arg1 forLayoutState:(id)arg2;
- (bool)supportsLearning;
- (id)terminatorsDeletingAutospace;
- (id)wordCharacters;
- (id)wordSeparator;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
