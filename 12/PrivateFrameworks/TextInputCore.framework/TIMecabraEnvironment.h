<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TIMecabraEnvironment.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TextInputCore.framework/TIMecabraEnvironment.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TextInputCore.framework/TextInputCore ()
 */

@interface TIMecabraEnvironment : NSObject {
    NSMutableArray * _candidatesLeftOfCaret;
    NSMutableArray * _candidatesRightOfCaret;
    NSMutableArray * _candidatesToDelete;
    NSString * _leftDocumentContext;
    NSString * _leftDocumentContextCorrespondingToCandidates;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _leftDocumentContextCorrespondingToCandidatesRange;
    TIMecabraEnvironmentContextWrapper * _mecabraContextWrapper;
    NSString * _rightDocumentContext;
    NSString * _rightDocumentContextCorrespondingToCandidates;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _rightDocumentContextCorrespondingToCandidatesRange;
    bool  _shouldAdjustOnAnalyze;
}

@property (nonatomic, retain) NSMutableArray *candidatesLeftOfCaret;
@property (nonatomic, retain) NSMutableArray *candidatesRightOfCaret;
@property (nonatomic, retain) NSMutableArray *candidatesToDelete;
@property (nonatomic, readonly) NSArray *contextCandidateSurfaces;
@property (nonatomic, readonly) NSDictionary *environmentDebuggingInformation;
@property (nonatomic, readonly) NSArray *inlineCandidateSurfaces;
@property (nonatomic, copy) NSString *leftDocumentContext;
@property (nonatomic, copy) NSString *leftDocumentContextCorrespondingToCandidates;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } leftDocumentContextCorrespondingToCandidatesRange;
@property (nonatomic, readonly) struct __Mecabra { }*mecabra;
@property (nonatomic, retain) TIMecabraEnvironmentContextWrapper *mecabraContextWrapper;
@property (nonatomic, readonly) NSArray *rightCandidateSurfaces;
@property (nonatomic, copy) NSString *rightDocumentContext;
@property (nonatomic, copy) NSString *rightDocumentContextCorrespondingToCandidates;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } rightDocumentContextCorrespondingToCandidatesRange;
@property (nonatomic) bool shouldAdjustOnAnalyze;
@property (nonatomic) int textContentType;

+ (void)loadMobileAssetContentsForInputModes:(id)arg1 assetContentTypes:(id)arg2 inMecabra:(struct __Mecabra { }*)arg3 onQueue:(id)arg4;
+ (void)loadMobileAssetContentsForInputModes:(id)arg1 inMecabra:(struct __Mecabra { }*)arg2 onQueue:(id)arg3;
+ (id)loadMobileAssetContentsWhenMobileAssetChangesForMecabra:(struct __Mecabra { }*)arg1 inputModes:(id)arg2 onQueue:(id)arg3 oldMobileAssetChangeListener:(id)arg4;
+ (void)removeMobileAssetListener:(id)arg1;

- (void).cxx_destruct;
- (void)acceptInlineCandidates;
- (void)addCandidateWithString:(id)arg1 toArray:(id)arg2;
- (bool)addNewCandidatesIfNecessary:(long long)arg1;
- (void)addPunctuationCandidateToContext:(id)arg1;
- (void)addStringCandidateToContext:(id)arg1;
- (void)addStringCandidateToContextInternal:(id)arg1;
- (void)adjustEnvironment:(long long)arg1;
- (void)adjustEnvironmentDirectly:(long long)arg1;
- (void)adjustEnvironmentOnAction:(long long)arg1;
- (void)analyzeCandidateContextWithSplit:(bool)arg1;
- (bool)analyzeString:(id)arg1 options:(unsigned long long)arg2;
- (unsigned long long)candidateIndex;
- (id)candidatesLeftOfCaret;
- (id)candidatesRightOfCaret;
- (id)candidatesToDelete;
- (void)compareDocumentAndEnvironmentCandidates;
- (void)completelyCommitInlineCandidate:(void*)arg1;
- (id)contextCandidateSurfaces;
- (void)createNewCandidatesFromDocumentContext;
- (void)declareEndOfSentence;
- (bool)documentContextIsEmpty;
- (id)environmentDebuggingInformation;
- (id)initWithMecabraEngine:(struct __Mecabra { }*)arg1 language:(int)arg2;
- (id)inlineCandidateSurfaces;
- (void)insertCandidateWithString:(id)arg1 intoArray:(id)arg2 atIndex:(unsigned long long)arg3;
- (id)leftDocumentContext;
- (id)leftDocumentContextCorrespondingToCandidates;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })leftDocumentContextCorrespondingToCandidatesRange;
- (struct __Mecabra { }*)mecabra;
- (id)mecabraContextWrapper;
- (void)partiallyCommitInlineCandidate:(void*)arg1;
- (bool)predictionAnalyzeWithOptions:(unsigned long long)arg1 maxNumberOfCandidates:(unsigned long long)arg2;
- (void)reset;
- (void)revertInlineCandidate;
- (void)revertLearningOfCandidateIfNecessary;
- (id)rightCandidateSurfaces;
- (id)rightDocumentContext;
- (id)rightDocumentContextCorrespondingToCandidates;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rightDocumentContextCorrespondingToCandidatesRange;
- (void)setAppContext:(id)arg1;
- (void)setCandidateIndex:(long long)arg1;
- (void)setCandidatesLeftOfCaret:(id)arg1;
- (void)setCandidatesRightOfCaret:(id)arg1;
- (void)setCandidatesToDelete:(id)arg1;
- (void)setGeometryModel:(void*)arg1 modelData:(struct __CFArray { }*)arg2;
- (void)setLeftDocumentContext:(id)arg1;
- (void)setLeftDocumentContextCorrespondingToCandidates:(id)arg1;
- (void)setLeftDocumentContextCorrespondingToCandidatesRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setLeftDocumentContextInternal:(id)arg1;
- (void)setMecabraContextWrapper:(id)arg1;
- (void)setRightDocumentContext:(id)arg1;
- (void)setRightDocumentContextCorrespondingToCandidates:(id)arg1;
- (void)setRightDocumentContextCorrespondingToCandidatesRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setShouldAdjustOnAnalyze:(bool)arg1;
- (void)setShuangpinType:(int)arg1;
- (void)setTextContentType:(int)arg1;
- (bool)shouldAdjustOnAnalyze;
- (int)textContentType;
- (void)updateCursorPosition;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
