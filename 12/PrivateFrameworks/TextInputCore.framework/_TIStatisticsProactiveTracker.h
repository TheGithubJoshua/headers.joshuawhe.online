<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_TIStatisticsProactiveTracker.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TextInputCore.framework/_TIStatisticsProactiveTracker.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TextInputCore.framework/TextInputCore ()
 */

@interface _TIStatisticsProactiveTracker : NSObject {
    PETScalarEventTracker * _engagementCategoryEventDescriptionTracker;
    PETScalarEventTracker * _engagementEventDescriptionTracker;
    PETScalarEventTracker * _failureCategoryEventDescriptionTracker;
    PETScalarEventTracker * _failureCategoryEventTracker;
    PETScalarEventTracker * _failureEventDescriptionTracker;
    PETScalarEventTracker * _failureEventTracker;
    TIAutocorrectionList * _lastAutocorrectionList;
    PETScalarEventTracker * _personalizationEngagementTracker;
    PETScalarEventTracker * _personalizationOfferTracker;
    PETScalarEventTracker * _personalizationWordAcceptanceTracker;
    TIKeyboardCandidate * _responseKitEntryOffered;
    PETScalarEventTracker * _selectedCategoryEventTracker;
    PETScalarEventTracker * _selectedEventTracker;
    PETScalarEventTracker * _suggestedCategoryEventTracker;
    PETScalarEventTracker * _suggestedEventTracker;
    PETDistributionEventTracker * _timeInPredictionBarCategoryEventTracker;
    PETDistributionEventTracker * _timeInPredictionBarEventTracker;
    PETScalarEventTracker * _triggeredCategoryEventTracker;
    PETScalarEventTracker * _triggeredEventTracker;
}

@property (nonatomic, retain) PETScalarEventTracker *engagementCategoryEventDescriptionTracker;
@property (nonatomic, retain) PETScalarEventTracker *engagementEventDescriptionTracker;
@property (nonatomic, retain) PETScalarEventTracker *failureCategoryEventDescriptionTracker;
@property (nonatomic, retain) PETScalarEventTracker *failureCategoryEventTracker;
@property (nonatomic, retain) PETScalarEventTracker *failureEventDescriptionTracker;
@property (nonatomic, retain) PETScalarEventTracker *failureEventTracker;
@property (nonatomic, retain) TIAutocorrectionList *lastAutocorrectionList;
@property (nonatomic, retain) PETScalarEventTracker *personalizationEngagementTracker;
@property (nonatomic, retain) PETScalarEventTracker *personalizationOfferTracker;
@property (nonatomic, retain) PETScalarEventTracker *personalizationWordAcceptanceTracker;
@property (nonatomic, retain) TIKeyboardCandidate *responseKitEntryOffered;
@property (nonatomic, retain) PETScalarEventTracker *selectedCategoryEventTracker;
@property (nonatomic, retain) PETScalarEventTracker *selectedEventTracker;
@property (nonatomic, retain) PETScalarEventTracker *suggestedCategoryEventTracker;
@property (nonatomic, retain) PETScalarEventTracker *suggestedEventTracker;
@property (nonatomic, retain) PETDistributionEventTracker *timeInPredictionBarCategoryEventTracker;
@property (nonatomic, retain) PETDistributionEventTracker *timeInPredictionBarEventTracker;
@property (nonatomic, retain) PETScalarEventTracker *triggeredCategoryEventTracker;
@property (nonatomic, retain) PETScalarEventTracker *triggeredEventTracker;

+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)engagementCategoryEventDescriptionTracker;
- (id)engagementEventDescriptionTracker;
- (id)failureCategoryEventDescriptionTracker;
- (id)failureCategoryEventTracker;
- (id)failureEventDescriptionTracker;
- (id)failureEventTracker;
- (id)init;
- (id)lastAutocorrectionList;
- (id)personalizationEngagementTracker;
- (id)personalizationOfferTracker;
- (id)personalizationWordAcceptanceTracker;
- (id)responseKitEntryOffered;
- (id)selectedCategoryEventTracker;
- (id)selectedEventTracker;
- (void)setEngagementCategoryEventDescriptionTracker:(id)arg1;
- (void)setEngagementEventDescriptionTracker:(id)arg1;
- (void)setFailureCategoryEventDescriptionTracker:(id)arg1;
- (void)setFailureCategoryEventTracker:(id)arg1;
- (void)setFailureEventDescriptionTracker:(id)arg1;
- (void)setFailureEventTracker:(id)arg1;
- (void)setLastAutocorrectionList:(id)arg1;
- (void)setPersonalizationEngagementTracker:(id)arg1;
- (void)setPersonalizationOfferTracker:(id)arg1;
- (void)setPersonalizationWordAcceptanceTracker:(id)arg1;
- (void)setResponseKitEntryOffered:(id)arg1;
- (void)setSelectedCategoryEventTracker:(id)arg1;
- (void)setSelectedEventTracker:(id)arg1;
- (void)setSuggestedCategoryEventTracker:(id)arg1;
- (void)setSuggestedEventTracker:(id)arg1;
- (void)setTimeInPredictionBarCategoryEventTracker:(id)arg1;
- (void)setTimeInPredictionBarEventTracker:(id)arg1;
- (void)setTriggeredCategoryEventTracker:(id)arg1;
- (void)setTriggeredEventTracker:(id)arg1;
- (id)suggestedCategoryEventTracker;
- (id)suggestedEventTracker;
- (id)timeInPredictionBarCategoryEventTracker;
- (id)timeInPredictionBarEventTracker;
- (void)trackEngagementFailureWithDescription:(unsigned char)arg1 description:(id)arg2 categories:(id)arg3 locale:(id)arg4 fieldType:(id)arg5;
- (void)trackFailureWithDescription:(unsigned char)arg1 description:(id)arg2 categories:(id)arg3 locale:(id)arg4 fieldType:(id)arg5;
- (void)trackFailureWithSource:(unsigned char)arg1 reason:(unsigned char)arg2 categories:(id)arg3 locale:(id)arg4 fieldType:(id)arg5;
- (void)trackPredictionTimeWithSource:(unsigned char)arg1 time:(double)arg2 selected:(bool)arg3 categories:(id)arg4 locale:(id)arg5 fieldType:(id)arg6;
- (void)trackSelectedWithSource:(unsigned char)arg1 position:(unsigned long long)arg2 categories:(id)arg3 locale:(id)arg4 fieldType:(id)arg5;
- (void)trackSuggestedWithSource:(unsigned char)arg1 count:(unsigned long long)arg2 categories:(id)arg3 locale:(id)arg4 fieldType:(id)arg5;
- (void)trackTriggeredWithSource:(unsigned char)arg1 categories:(id)arg2 locale:(id)arg3 fieldType:(id)arg4;
- (id)triggeredCategoryEventTracker;
- (id)triggeredEventTracker;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
