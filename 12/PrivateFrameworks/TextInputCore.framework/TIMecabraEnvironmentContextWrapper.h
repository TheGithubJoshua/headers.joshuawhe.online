<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TIMecabraEnvironmentContextWrapper.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/TextInputCore.framework/TIMecabraEnvironmentContextWrapper.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/TextInputCore.framework/TextInputCore ()
 */

@interface TIMecabraEnvironmentContextWrapper : NSObject {
    NSString * _appContext;
    unsigned long long  _candidateIndex;
    unsigned long long  _candidateInternalIndex;
    unsigned long long  _environmentCandidateCount;
    NSMutableArray * _environmentCandidates;
    struct __MecabraContext { } * _mecabraContext;
    struct __Mecabra { } * _mecabraEngine;
    int  _shuangpinType;
    NSMutableArray * _temporaryCandidates;
    int  _textContentType;
}

@property (nonatomic, copy) NSString *appContext;
@property (nonatomic) unsigned long long candidateIndex;
@property (nonatomic) unsigned long long candidateInternalIndex;
@property (nonatomic, readonly) unsigned long long contextCandidateCount;
@property (nonatomic, readonly) NSArray *contextCandidateStrings;
@property (nonatomic, readonly) NSArray *contextCandidates;
@property (nonatomic, readonly) unsigned long long environmentCandidateCount;
@property (nonatomic, readonly) NSArray *environmentCandidateStrings;
@property (nonatomic, retain) NSMutableArray *environmentCandidates;
@property (nonatomic, readonly) NSArray *inlineCandidates;
@property (nonatomic) struct __MecabraContext { }*mecabraContext;
@property (nonatomic, readonly) struct __Mecabra { }*mecabraEngine;
@property (nonatomic) int shuangpinType;
@property (nonatomic, retain) NSMutableArray *temporaryCandidates;
@property (nonatomic) int textContentType;

- (void).cxx_destruct;
- (void)acceptInlineCandidates;
- (void)addContextCandidate:(void*)arg1 accept:(bool)arg2;
- (void)addContextStringCandidate:(void*)arg1;
- (void)addEnvironmentCandidate:(void*)arg1 atIndex:(unsigned long long)arg2;
- (bool)analyzeString:(id)arg1 options:(unsigned long long)arg2;
- (id)appContext;
- (unsigned long long)candidateIndex;
- (unsigned long long)candidateInternalIndex;
- (void)clearAll;
- (void)clearContext;
- (void)completelyCommitInlineCandidate:(void*)arg1;
- (unsigned long long)contextCandidateCount;
- (id)contextCandidateStrings;
- (id)contextCandidates;
- (void*)createMecabraCandidateFromString:(id)arg1;
- (void)dealloc;
- (void)declareEndOfSentence;
- (unsigned long long)environmentCandidateCount;
- (id)environmentCandidateStrings;
- (id)environmentCandidates;
- (id)initWithMecabraEngine:(struct __Mecabra { }*)arg1 language:(int)arg2;
- (id)inlineCandidates;
- (struct __MecabraContext { }*)mecabraContext;
- (struct __Mecabra { }*)mecabraEngine;
- (void)partiallyCommitInlineCandidate:(void*)arg1;
- (bool)predictionCandidatesWithOptions:(unsigned long long)arg1 maxNumberOfCandidates:(unsigned long long)arg2;
- (void)removeCandidatesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)revertInlineCandidate;
- (void)revertLearningForCandidate:(void*)arg1;
- (void)setAppContext:(id)arg1;
- (void)setCandidateIndex:(unsigned long long)arg1;
- (void)setCandidateInternalIndex:(unsigned long long)arg1;
- (void)setEnvironmentCandidates:(id)arg1;
- (void)setGeometryModel:(void*)arg1 modelData:(struct __CFArray { }*)arg2;
- (void)setMecabraContext:(struct __MecabraContext { }*)arg1;
- (void)setShuangpinType:(int)arg1;
- (void)setTemporaryCandidates:(id)arg1;
- (void)setTextContentType:(int)arg1;
- (int)shuangpinType;
- (void)syncEnvironmentAndContextCandidates;
- (id)temporaryCandidates;
- (int)textContentType;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
