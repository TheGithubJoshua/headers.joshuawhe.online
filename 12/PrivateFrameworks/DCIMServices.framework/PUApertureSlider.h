<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUApertureSlider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DCIMServices.framework/PUApertureSlider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DCIMServices.framework/DCIMServices (1)
 */

@interface PUApertureSlider : UIView <UIScrollViewDelegate> {
    bool  __active;
    unsigned long long  __currentApertureIndex;
    PUApertureSliderDotView * __dotView;
    unsigned int  __endStopSoundID;
    CAMSelectionFeedbackGenerator * __feedbackGenerator;
    unsigned int  __fullStopSoundID;
    UIView * __indicatorBackground;
    UIView * __indicatorView;
    unsigned long long  __markedApertureIndex;
    unsigned long long  __maximumApertureIndex;
    unsigned long long  __minimumApertureIndex;
    PUApertureGradientView * __opaqueGradientView;
    unsigned int  __overscrollStopSoundID;
    bool  __overscrolling;
    UIScrollView * __scrollView;
    unsigned int  __thirdStopSoundID;
    PUApertureSliderTickMarksView * __tickMarksView;
    UIImageView * __titleBackground;
    UILabel * __titleLabel;
    PUApertureGradientView * __transparentGradientView;
    UIImageView * __valueBackground;
    UILabel * __valueLabel;
    NSNumberFormatter * _decimalFormatter;
    <PUApertureSliderDelegate> * _delegate;
    bool  _enabled;
    long long  _textOrientation;
    bool  _useLegibilityBackgrounds;
    NSNumberFormatter * _wholeNumberFormatter;
}

@property (getter=_isActive, setter=_setActive:, nonatomic) bool _active;
@property (setter=_setCurrentApertureIndex:, nonatomic) unsigned long long _currentApertureIndex;
@property (nonatomic, readonly) PUApertureSliderDotView *_dotView;
@property (nonatomic, readonly) unsigned int _endStopSoundID;
@property (nonatomic, readonly) CAMSelectionFeedbackGenerator *_feedbackGenerator;
@property (nonatomic, readonly) unsigned int _fullStopSoundID;
@property (nonatomic, retain) UIView *_indicatorBackground;
@property (nonatomic, readonly) UIView *_indicatorView;
@property (setter=_setMarkedApertureIndex:, nonatomic) unsigned long long _markedApertureIndex;
@property (setter=_setMaximumApertureIndex:, nonatomic) unsigned long long _maximumApertureIndex;
@property (setter=_setMinimumApertureIndex:, nonatomic) unsigned long long _minimumApertureIndex;
@property (nonatomic, retain) PUApertureGradientView *_opaqueGradientView;
@property (nonatomic, readonly) unsigned int _overscrollStopSoundID;
@property (getter=_isOverscrolling, setter=_setOverscrolling:, nonatomic) bool _overscrolling;
@property (nonatomic, readonly) UIScrollView *_scrollView;
@property (nonatomic, readonly) unsigned int _thirdStopSoundID;
@property (nonatomic, readonly) PUApertureSliderTickMarksView *_tickMarksView;
@property (nonatomic, retain) UIImageView *_titleBackground;
@property (nonatomic, readonly) UILabel *_titleLabel;
@property (nonatomic, retain) PUApertureGradientView *_transparentGradientView;
@property (nonatomic, retain) UIImageView *_valueBackground;
@property (nonatomic, readonly) UILabel *_valueLabel;
@property (nonatomic, readonly) double apertureValue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PUApertureSliderDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool enabled;
@property (nonatomic, retain) UIColor *gradientColor;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) double markedApertureValue;
@property (nonatomic, readonly) double maximumApertureValue;
@property (nonatomic, readonly) double minimumApertureValue;
@property (readonly) Class superclass;
@property (nonatomic) long long textOrientation;
@property (nonatomic) bool useLegibilityBackgrounds;

+ (unsigned long long)firstFullStopIndexAfterOrIncludingIndex:(unsigned long long)arg1;
+ (bool)isValidApertureIndex:(unsigned long long)arg1;
+ (bool)isValidApertureIndexFullStop:(unsigned long long)arg1;
+ (id)validApertureValues;

- (void).cxx_destruct;
- (unsigned long long)_biasedValidApertureIndexForContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })_contentOffsetForApertureIndex:(unsigned long long)arg1;
- (id)_createLegibilityImage;
- (unsigned long long)_currentApertureIndex;
- (id)_dotView;
- (unsigned int)_endStopSoundID;
- (id)_feedbackGenerator;
- (unsigned int)_fullStopSoundID;
- (unsigned long long)_indexOfClosestValidValueForAperture:(double)arg1;
- (id)_indicatorBackground;
- (id)_indicatorView;
- (double)_interpolatedValidApertureIndexForContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_isActive;
- (bool)_isOverscrolling;
- (void)_layoutSliderContentAtY:(double)arg1 withHorizontalPadding:(double)arg2;
- (void)_layoutSubviewsWithLabelRotation:(double)arg1;
- (void)_layoutSubviewsWithNoRotation;
- (unsigned long long)_markedApertureIndex;
- (unsigned long long)_maximumApertureIndex;
- (unsigned long long)_minimumApertureIndex;
- (unsigned long long)_nearestValidApertureIndexForContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (id)_opaqueGradientView;
- (unsigned int)_overscrollStopSoundID;
- (void)_removeDotView;
- (id)_scrollView;
- (double)_scrollableDistanceInScrollView:(id)arg1;
- (void)_setActive:(bool)arg1;
- (void)_setActive:(bool)arg1 animated:(bool)arg2;
- (void)_setApertureWithIndex:(unsigned long long)arg1 shouldDelegate:(bool)arg2 shouldScroll:(bool)arg3 shouldEmitFeedback:(bool)arg4;
- (void)_setCurrentApertureIndex:(unsigned long long)arg1;
- (void)_setMarkedApertureIndex:(unsigned long long)arg1;
- (void)_setMaximumApertureIndex:(unsigned long long)arg1;
- (void)_setMinimumApertureIndex:(unsigned long long)arg1;
- (void)_setOverscrolling:(bool)arg1;
- (unsigned int)_thirdStopSoundID;
- (id)_tickMarksView;
- (id)_titleBackground;
- (id)_titleLabel;
- (id)_transparentGradientView;
- (void)_updateColorsAnimated:(bool)arg1;
- (void)_updateLabel;
- (void)_updateLegibilityBackgrounds;
- (void)_updateMarkedApertureViewAnimated:(bool)arg1;
- (void)_updateScrollViewContentOffset;
- (id)_valueBackground;
- (id)_valueLabel;
- (double)apertureValue;
- (void)dealloc;
- (id)delegate;
- (bool)enabled;
- (id)gradientColor;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)layoutSubviews;
- (double)markedApertureValue;
- (double)maximumApertureValue;
- (double)minimumApertureValue;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)setApertureValueClosestTo:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setGradientColor:(id)arg1;
- (void)setMarkedApertureValueClosestTo:(double)arg1;
- (void)setMarkedApertureValueToNone;
- (void)setMinimumApertureValueClosestTo:(double)arg1 maximumApertureValueClosestTo:(double)arg2;
- (void)setTextOrientation:(long long)arg1;
- (void)setTextOrientation:(long long)arg1 animated:(bool)arg2;
- (void)setUseLegibilityBackgrounds:(bool)arg1;
- (void)set_indicatorBackground:(id)arg1;
- (void)set_opaqueGradientView:(id)arg1;
- (void)set_titleBackground:(id)arg1;
- (void)set_transparentGradientView:(id)arg1;
- (void)set_valueBackground:(id)arg1;
- (long long)textOrientation;
- (bool)useLegibilityBackgrounds;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
