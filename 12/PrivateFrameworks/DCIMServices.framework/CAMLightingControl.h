<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMLightingControl.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DCIMServices.framework/CAMLightingControl.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DCIMServices.framework/DCIMServices (1)
 */

@interface CAMLightingControl : UIView <CAAnimationDelegate, CAMBadgeViewDelegate, UIGestureRecognizerDelegate> {
    CAMAnimationGenerator * __animationGenerator;
    CAMLightingDialBackground * __backgroundView;
    NSTimer * __collapseTimer;
    NSDictionary * __effectItemsForType;
    NSArray * __effectTypes;
    unsigned long long  __expandedAnimationCounter;
    CAMLightingFrameCache * __frameCache;
    NSDictionary * __itemOutlineViewsForType;
    NSDictionary * __itemShadowViewsForType;
    NSDictionary * __itemViewsForType;
    CAMLightingNameBadge * __nameBadge;
    UIPanGestureRecognizer * __panGesture;
    UILongPressGestureRecognizer * __pressGesture;
    double  __selectionAngularOffset;
    CAMSelectionFeedbackGenerator * __selectionFeedbackGenerator;
    unsigned long long  __selectionIndex;
    UIImageView * __selectionOverlay;
    UIImageView * __selectionUnderlay;
    unsigned long long  __stageLightTypesCount;
    UITapGestureRecognizer * __tapGesture;
    NSDate * __timeTrackingBegan;
    <CAMLightingControlDelegate> * _delegate;
    struct { 
        bool respondsToWillChangeExpanded; 
        bool respondsToDidChangeExpanded; 
    }  _delegateFlags;
    bool  _expanded;
    bool  _highlighted;
    bool  _nameBadgeHidden;
    long long  _orientation;
    long long  _selectedLightingType;
    bool  _showAllItemsWhenCollapsed;
    bool  _stageLightEnabled;
    bool  _tracking;
}

@property (nonatomic, readonly) CAMAnimationGenerator *_animationGenerator;
@property (setter=_setBackgroundView:, nonatomic, retain) CAMLightingDialBackground *_backgroundView;
@property (setter=_setCollapseTimer:, nonatomic, retain) NSTimer *_collapseTimer;
@property (setter=_setEffectItemsForType:, nonatomic, retain) NSDictionary *_effectItemsForType;
@property (nonatomic, readonly) NSArray *_effectTypes;
@property (setter=_setExpandedAnimationCounter:, nonatomic) unsigned long long _expandedAnimationCounter;
@property (nonatomic, readonly) CAMLightingFrameCache *_frameCache;
@property (setter=_setItemOutlineViewsForType:, nonatomic, retain) NSDictionary *_itemOutlineViewsForType;
@property (setter=_setItemShadowViewsForType:, nonatomic, retain) NSDictionary *_itemShadowViewsForType;
@property (setter=_setItemViewsForType:, nonatomic, retain) NSDictionary *_itemViewsForType;
@property (setter=_setNameBadge:, nonatomic, retain) CAMLightingNameBadge *_nameBadge;
@property (nonatomic, readonly) UIPanGestureRecognizer *_panGesture;
@property (nonatomic, readonly) UILongPressGestureRecognizer *_pressGesture;
@property (setter=_setSelectionAngularOffset:, nonatomic) double _selectionAngularOffset;
@property (nonatomic, readonly) CAMSelectionFeedbackGenerator *_selectionFeedbackGenerator;
@property (nonatomic, readonly) unsigned long long _selectionIndex;
@property (setter=_setSelectionOverlay:, nonatomic, retain) UIImageView *_selectionOverlay;
@property (setter=_setSelectionUnderlay:, nonatomic, retain) UIImageView *_selectionUnderlay;
@property (nonatomic, readonly) unsigned long long _stageLightTypesCount;
@property (nonatomic, readonly) UITapGestureRecognizer *_tapGesture;
@property (setter=_setTimeTrackingBegan:, nonatomic, retain) NSDate *_timeTrackingBegan;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) long long defaultLightingType;
@property (nonatomic) <CAMLightingControlDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isExpanded, nonatomic) bool expanded;
@property (readonly) unsigned long long hash;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (getter=isNameBadgeHidden, nonatomic) bool nameBadgeHidden;
@property (nonatomic) long long orientation;
@property (nonatomic) long long selectedLightingType;
@property (nonatomic) bool showAllItemsWhenCollapsed;
@property (getter=isStageLightEnabled, nonatomic) bool stageLightEnabled;
@property (readonly) Class superclass;
@property (getter=isTracking, setter=_setTracking:, nonatomic) bool tracking;

- (void).cxx_destruct;
- (double)_angleFromCenterToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)_angularSpacingForRadialLayout;
- (id)_animationGenerator;
- (id)_backgroundView;
- (void)_cancelDelayedCollapse;
- (id)_collapseTimer;
- (void)_collapseWithDelay:(double)arg1;
- (double)_compressedItemOffsetForFractionalItemOffset:(double)arg1;
- (void)_createBackgroundViewIfNeeded;
- (void)_createItemViewsIfNeeded;
- (void)_createNameBadgeIfNeeded;
- (void)_createSelectionViewsIfNeeded;
- (double)_dialBadgePaddingExpanded:(bool)arg1;
- (struct CGPoint { double x1; double x2; })_dialCenter;
- (double)_dialCenterDistanceBelowBoundsForWidth:(double)arg1;
- (struct CGPoint { double x1; double x2; })_dialCenterForWidth:(double)arg1;
- (double)_dialRadius;
- (double)_dialRadiusForWidth:(double)arg1;
- (double)_dialVisibleHeightExpanded:(bool)arg1;
- (id)_effectItemsForType;
- (id)_effectTypes;
- (unsigned long long)_enabledItemCount;
- (unsigned long long)_expandedAnimationCounter;
- (id)_frameCache;
- (void)_handleCollapseTimer:(id)arg1;
- (void)_handlePanGesture:(id)arg1;
- (void)_handlePressGesture:(id)arg1;
- (void)_handleSettlingSelectionViewsFromOffset:(double)arg1 withProgress:(double)arg2 timingCurve:(id)arg3;
- (void)_handleSnapFromOffset:(double)arg1 withProgress:(double)arg2 timingCurve:(id)arg3;
- (void)_handleTapGesture:(id)arg1;
- (void)_handleTapRotationFromOffset:(double)arg1 withProgress:(double)arg2 timingCurve:(id)arg3;
- (bool)_isLightingTypeEnabled:(long long)arg1;
- (bool)_isOverDialedWithSelectionAngularOffset:(double)arg1 selectionIndex:(unsigned long long)arg2;
- (bool)_isStageLightingType:(long long)arg1;
- (unsigned long long)_itemCount;
- (id)_itemOutlineViewsForType;
- (id)_itemShadowViewsForType;
- (id)_itemViewsForType;
- (void)_layoutBackgroundExpanded:(bool)arg1;
- (void)_layoutItemViewsLinear;
- (void)_layoutItemViewsRadialWithSelectionOffsetAngle:(double)arg1;
- (void)_layoutNameBadgeExpanded:(bool)arg1;
- (void)_layoutSelectionViewsExpanded:(bool)arg1;
- (void)_loadItemsIfNeeded;
- (id)_nameBadge;
- (double)_offsetAngleForItemAtIndex:(unsigned long long)arg1 withSelectionOffset:(double)arg2;
- (double)_offsetAngleForRubberBandOffsetAngle:(double)arg1 selectionIndex:(unsigned long long)arg2;
- (double)_offsetXForItemAtIndex:(unsigned long long)arg1;
- (id)_panGesture;
- (void)_performFeedback;
- (void)_prepareFeedback;
- (id)_pressGesture;
- (void)_rotateForTapFromSelectionIndex:(unsigned long long)arg1 offset:(double)arg2 toSelectionIndex:(unsigned long long)arg3;
- (double)_rotationForPanGesture:(id)arg1;
- (double)_rubberBandOffsetAngleForOffsetAngle:(double)arg1;
- (double)_safeWidthForWidth:(double)arg1;
- (double)_selectionAngularOffset;
- (id)_selectionFeedbackGenerator;
- (unsigned long long)_selectionIndex;
- (id)_selectionOverlay;
- (struct CGPoint { double x1; double x2; })_selectionPointForExpanded:(bool)arg1;
- (id)_selectionUnderlay;
- (void)_setBackgroundView:(id)arg1;
- (void)_setCollapseTimer:(id)arg1;
- (void)_setEffectItemsForType:(id)arg1;
- (void)_setExpanded:(bool)arg1 animated:(bool)arg2 shouldNotify:(bool)arg3;
- (void)_setExpandedAnimationCounter:(unsigned long long)arg1;
- (void)_setItemOutlineViewsForType:(id)arg1;
- (void)_setItemShadowViewsForType:(id)arg1;
- (void)_setItemViewsForType:(id)arg1;
- (void)_setNameBadge:(id)arg1;
- (void)_setSelectedLightingType:(long long)arg1 atIndex:(unsigned long long)arg2 shouldNotify:(bool)arg3 shouldSuppressHaptic:(bool)arg4 animated:(bool)arg5;
- (void)_setSelectionAngularOffset:(double)arg1;
- (void)_setSelectionOverlay:(id)arg1;
- (void)_setSelectionUnderlay:(id)arg1;
- (void)_setTimeTrackingBegan:(id)arg1;
- (void)_setTracking:(bool)arg1;
- (void)_settleSelectionViewsFromSelectionOffsetAngle:(double)arg1;
- (void)_snapFromSelectionOffsetAngle:(double)arg1 toAngle:(double)arg2 animated:(bool)arg3;
- (double)_spacingForLinearLayout;
- (unsigned long long)_stageLightTypesCount;
- (id)_tapGesture;
- (id)_timeTrackingBegan;
- (void)_updateItemViewsWithSelectionOffsetAngle:(double)arg1;
- (void)_updateNameBadgeAnimated:(bool)arg1;
- (void)_updateSelectionOverlayColorAnimated:(bool)arg1;
- (void)_updateSelectionViewsWithSelectionOffsetAngle:(double)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (void)badgeViewDidChangeIntrinsicContentSize:(id)arg1;
- (double)contentHeightForWidth:(double)arg1;
- (long long)defaultLightingType;
- (id)delegate;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isExpanded;
- (bool)isHighlighted;
- (bool)isNameBadgeHidden;
- (bool)isStageLightEnabled;
- (bool)isTracking;
- (void)layoutSubviews;
- (long long)orientation;
- (void)ppt_selectLightingType:(long long)arg1;
- (void)preloadEffectChangeAnimation;
- (long long)selectedLightingType;
- (void)setDelegate:(id)arg1;
- (void)setExpanded:(bool)arg1;
- (void)setExpanded:(bool)arg1 animated:(bool)arg2;
- (void)setHighlighted:(bool)arg1;
- (void)setHighlighted:(bool)arg1 animated:(bool)arg2;
- (void)setNameBadgeHidden:(bool)arg1;
- (void)setNameBadgeHidden:(bool)arg1 animated:(bool)arg2;
- (void)setOrientation:(long long)arg1;
- (void)setSelectedLightingType:(long long)arg1;
- (void)setSelectedLightingType:(long long)arg1 animated:(bool)arg2;
- (void)setShowAllItemsWhenCollapsed:(bool)arg1;
- (void)setShowAllItemsWhenCollapsed:(bool)arg1 animated:(bool)arg2;
- (void)setStageLightEnabled:(bool)arg1;
- (void)setStageLightEnabled:(bool)arg1 animated:(bool)arg2;
- (bool)showAllItemsWhenCollapsed;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)updateToContentSize:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
