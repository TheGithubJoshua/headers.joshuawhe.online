<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AFUISiriRemoteViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssistantUI.framework/AFUISiriRemoteViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssistantUI.framework/AssistantUI (1)
 */

@interface AFUISiriRemoteViewController : _UIRemoteViewController <SVSSiriViewControllerHosting> {
    <AFUISiriRemoteViewControllerDataSource> * _dataSource;
    <AFUISiriRemoteViewControllerDelegate> * _delegate;
    AFApplicationInfo * _viewServiceApplicationInfo;
}

@property (nonatomic) <AFUISiriRemoteViewControllerDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AFUISiriRemoteViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic, retain) AFApplicationInfo *viewServiceApplicationInfo;

+ (id)exportedInterface;
+ (id)requestViewControllerWithConnectionHandler:(id /* block */)arg1;
+ (id)serviceViewControllerInterface;

- (void).cxx_destruct;
- (void)applicationDidBecomeActive;
- (void)applicationWillEnterForeground;
- (void)applicationWillResignActive;
- (id)dataSource;
- (id)delegate;
- (void)didReceiveBugButtonLongPress;
- (void)didReceiveHelpAction;
- (void)didReceiveReportBugAction;
- (void)didReceiveShortTapAction;
- (void)dismissViewControllerAnimated:(bool)arg1 completion:(id /* block */)arg2;
- (void)getScreenshotWithReplyHandler:(id /* block */)arg1;
- (void)handlePasscodeUnlockWithCompletion:(id /* block */)arg1;
- (void)notifyOnNextUserInteraction;
- (void)preloadPluginBundles;
- (void)preloadPresentationBundleWithIdentifier:(id)arg1;
- (void)pulseHelpButton;
- (void)serviceBulletinWithIdentifier:(id)arg1 replyHandler:(id /* block */)arg2;
- (void)serviceDidDetectAudioRoutePickerTap;
- (void)serviceDidDetectMicButtonLongPressBegan;
- (void)serviceDidDetectMicButtonLongPressEnded;
- (void)serviceDidDetectMicButtonTap;
- (void)serviceDidDismissViewControllerWithStatusBarStyle:(long long)arg1;
- (void)serviceDidEndTaptoEdit;
- (void)serviceDidEnterUITrackingMode;
- (void)serviceDidExitUITrackingMode;
- (void)serviceDidFinishTest:(id)arg1;
- (void)serviceDidPresentConversationFromBreadcrumb;
- (void)serviceDidPresentUserInterface;
- (void)serviceDidPresentViewControllerWithStatusBarStyle:(long long)arg1;
- (void)serviceDidReadBulletinWithIdentifier:(id)arg1;
- (void)serviceDidRequestCurrentTextInput:(id /* block */)arg1;
- (void)serviceDidRequestKeyboard:(bool)arg1;
- (void)serviceDidRequestKeyboard:(bool)arg1 minimized:(bool)arg2;
- (void)serviceDidResetTextInput;
- (void)serviceFailTest:(id)arg1 withReason:(id)arg2;
- (void)serviceLaunchApplicationWithBundleIdentifier:(id)arg1 withURL:(id)arg2 launchOptions:(long long)arg3 replyHandler:(id /* block */)arg4;
- (void)serviceOpenURL:(id)arg1 appBundleID:(id)arg2 allowSiriDismissal:(bool)arg3;
- (void)serviceOpenURL:(id)arg1 delaySessionEndForTTS:(bool)arg2 replyHandler:(id /* block */)arg3;
- (void)servicePresentationDidChangePeekMode:(unsigned long long)arg1;
- (void)serviceRequestsActivationSourceWithReplyHandler:(id /* block */)arg1;
- (void)serviceRequestsDismissalWithDelayForTTS:(bool)arg1 userInfo:(id)arg2;
- (void)serviceStartGuidedAccess;
- (void)serviceStartRequestWithOptions:(id)arg1;
- (void)serviceUserRelevantEventDidOccur;
- (void)serviceWillBeginTapToEdit;
- (void)serviceWillDismissViewControllerWithStatusBarStyle:(long long)arg1;
- (void)serviceWillPresentViewControllerWithStatusBarStyle:(long long)arg1;
- (void)serviceWillStartTest:(id)arg1;
- (id)sessionDelegate;
- (void)setBugReportingAvailable:(bool)arg1;
- (void)setCarDisplayGatekeeperVisible:(bool)arg1;
- (void)setCarDisplaySnippetVisible:(bool)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHelpButtonEmphasized:(bool)arg1;
- (void)setRequestOptions:(id)arg1;
- (void)setRunningPPT:(bool)arg1 withTestName:(id)arg2 testOptions:(id)arg3;
- (void)setSession:(id)arg1;
- (void)setSpeechSynthesis:(id)arg1;
- (void)setStatusBarFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setStatusBarHidden:(bool)arg1 animated:(bool)arg2;
- (void)setStatusBarHidden:(bool)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)setStatusViewDisabled:(bool)arg1;
- (void)setStatusViewHeight:(double)arg1;
- (void)setStatusViewHidden:(bool)arg1;
- (void)setStatusViewUserInteractionEnabled:(bool)arg1;
- (void)setTypeToSiriViewHidden:(bool)arg1;
- (void)setViewServiceApplicationInfo:(id)arg1;
- (void)setWaitingForTelephonyToStart:(bool)arg1;
- (void)showPresentationWithIdentifier:(id)arg1 properties:(id)arg2 lockState:(unsigned long long)arg3;
- (void)siriDidActivateFromSource:(long long)arg1;
- (void)siriDidDeactivate;
- (void)siriDidHidePasscodeUnlock;
- (void)siriIdleAndQuietStatusDidChange:(bool)arg1;
- (void)siriKeyboardViewDidChange:(struct { bool x1; bool x2; bool x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; double x5; }*)arg1;
- (void)siriWillActivateFromSource:(long long)arg1;
- (void)siriWillHidePasscodeUnlockForResult:(long long)arg1;
- (void)siriWillShowPasscodeUnlock;
- (void)siriWillShowPasscodeUnlockAndCancelRequest:(bool)arg1;
- (id)speechSynthesisDelegate;
- (void)startRequestForText:(id)arg1;
- (void)viewDidAppear:(bool)arg1;
- (id)viewServiceApplicationInfo;
- (void)viewServiceDidTerminateWithError:(id)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
