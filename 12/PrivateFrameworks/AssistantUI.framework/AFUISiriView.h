<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AFUISiriView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssistantUI.framework/AFUISiriView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssistantUI.framework/AssistantUI (1)
 */

@interface AFUISiriView : UIView <AFUISiriRemoteViewHosting, SBUIPasscodeLockViewDelegate, SiriUISiriStatusViewDelegate> {
    UILabel * _assistantVersionLabel;
    SiriUIVisualEffectView * _assistantVersionVisualEffectView;
    SiriUIAudioRoutePickerButton * _audioRoutePickerButton;
    _UIBackdropView * _backdropView;
    bool  _backdropViewVisible;
    NSNumber * _cachedIsRightHandDrive;
    bool  _carDisplaySnippetVisible;
    UIView * _carPlayGatekeeperBackdropView;
    bool  _carPlayGatekeeperBackdropViewVisible;
    SiriUIConfiguration * _configuration;
    <AFUISiriViewDataSource> * _dataSource;
    <AFUISiriViewDelegate> * _delegate;
    UIView * _dimmingAndLockContainer;
    bool  _disabled;
    SiriUIVisualEffectView * _eyesFreeEffectView;
    UIImageView * _eyesFreeLogoView;
    bool  _flamesViewDeferred;
    UIView * _foregroundContainerView;
    UIView * _foregroundView;
    UIView * _frozenBackdropSnapshotView;
    SiriUIHelpButton * _helpButton;
    bool  _helpButtonDeferred;
    bool  _inFluidDismissal;
    bool  _inHideUnlockViewanimation;
    bool  _inShowUnlockViewAnimation;
    bool  _keepStatusViewHidden;
    UIView<SBUIPasscodeLockView> * _lockView;
    bool  _lockViewHidden;
    long long  _mode;
    UIView * _remoteContentView;
    bool  _remoteContentViewHidden;
    SiriUIContentButton * _reportBugButton;
    bool  _safeAreaInsetsSuspended;
    long long  _siriSessionState;
    UIView<SiriUISiriStatusViewProtocol> * _siriStatusView;
    UIView * _statusViewContainer;
    bool  _statusViewHidden;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _suspendedSafeAreaInsets;
    unsigned long long  _unlockAttemptCount;
    id /* block */  _unlockCompletion;
}

@property (nonatomic, readonly) _UIBackdropView *backgroundBlurView;
@property (nonatomic) bool carDisplaySnippetVisible;
@property (nonatomic) <AFUISiriViewDataSource> *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AFUISiriViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disabled;
@property (nonatomic) bool flamesViewDeferred;
@property (nonatomic) bool flamesViewPaused;
@property (nonatomic, readonly) UIView *foregroundContainerView;
@property (nonatomic, readonly) UIView *foregroundView;
@property (nonatomic, retain) UIView *frozenBackdropSnapshotView;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool helpButtonDeferred;
@property (getter=isInFluidDismissal, nonatomic) bool inFluidDismissal;
@property (getter=isInUITrackingMode, nonatomic) bool inUITrackingMode;
@property (nonatomic) bool keepStatusViewHidden;
@property (nonatomic) long long mode;
@property (nonatomic, retain) UIView *remoteContentView;
@property (nonatomic) long long siriSessionState;
@property (nonatomic, retain) UIView<SiriUISiriStatusViewProtocol> *siriStatusView;
@property (nonatomic, readonly) double statusViewHeight;
@property (nonatomic) bool statusViewHidden;
@property (readonly) Class superclass;

+ (void)_animateView:(id)arg1 fromYPosition:(double)arg2 toYPosition:(double)arg3 fade:(long long)arg4 completion:(id /* block */)arg5;

- (void).cxx_destruct;
- (void)_animateButtonsHidden:(bool)arg1;
- (void)_animateLockViewIsAnimatingIn:(bool)arg1 completion:(id /* block */)arg2;
- (void)_audioRouteButtonTapped:(id)arg1;
- (double)_buttonInset;
- (void)_configureEyesFreeLogo;
- (void)_configureHelpButton;
- (void)_configureReportBugButtonWithHoldToTalkState:(bool)arg1;
- (void)_createAssistantVersionLabelIfNecessary;
- (void)_createReportBugButtonWithTemplateImage:(id)arg1 andConfigureWithHoldToTalkState:(bool)arg2;
- (void)_destroyAssistantVersionLabelIfNecessary;
- (bool)_helpButtonIsVisible;
- (void)_helpButtonTapped:(id)arg1;
- (void)_hideLockViewWithResult:(long long)arg1;
- (void)_hideLockViewWithResult:(long long)arg1 hideCompletion:(id /* block */)arg2;
- (bool)_isRightHandDrive;
- (bool)_isTextInputEnabled;
- (void)_layoutReportBugButton;
- (void)_loadReportBugButtonTemplateImageInBackgroundWithCompletion:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_lockViewFrame;
- (id)_lockViewLegibilityProvider;
- (void)_preferencesDidChange:(id)arg1;
- (bool)_reducesMotionEffects;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_remoteContentViewFrame;
- (void)_reportBugButtonLongPressed;
- (void)_reportBugButtonTapped;
- (void)_setSafeAreaInsetsSuspended:(bool)arg1;
- (void)_setupButtonsIfNecessary;
- (bool)_shouldIndicateHoldToTalkMode;
- (bool)_showsReportBugButton;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_statusViewContainerFrame;
- (void)_updateControlsAppearance;
- (float)audioLevelForSiriStatusView:(id)arg1;
- (id)backgroundBlurView;
- (void)cancelShowingPasscodeUnlock;
- (bool)carDisplaySnippetVisible;
- (void)configureReportBugButtonToShowHoldToTalkState:(bool)arg1;
- (id)dataSource;
- (void)dealloc;
- (id)delegate;
- (id)dimBackdropSettings;
- (bool)disabled;
- (void)fadeOutCurrentAura;
- (bool)flamesViewDeferred;
- (bool)flamesViewPaused;
- (id)foregroundContainerView;
- (id)foregroundView;
- (id)frozenBackdropSnapshotView;
- (bool)helpButtonDeferred;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 configuration:(id)arg2;
- (bool)isCarPlayMode;
- (bool)isInFluidDismissal;
- (bool)isInUITrackingMode;
- (bool)keepStatusViewHidden;
- (void)layoutSubviews;
- (long long)mode;
- (void)passcodeLockViewCancelButtonPressed:(id)arg1;
- (void)passcodeLockViewPasscodeEntered:(id)arg1;
- (void)passcodeLockViewPasscodeEnteredViaMesa:(id)arg1;
- (void)pulseHelpButton;
- (void)reloadData;
- (id)remoteContentView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })safeAreaInsets;
- (void)safeAreaInsetsDidChange;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })safeAreaInsetsForSiriStatusView:(id)arg1;
- (void)setAudioRoutePickerBluetoothOn:(bool)arg1;
- (void)setBackdropShouldRasterize:(bool)arg1;
- (void)setBackdropVisible:(bool)arg1;
- (void)setBugReportingAvailable:(bool)arg1;
- (void)setCarDisplaySnippetVisible:(bool)arg1;
- (void)setCarPlayGatekeeperBackdropVisible:(bool)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisabled:(bool)arg1;
- (void)setFlamesViewDeferred:(bool)arg1;
- (void)setFlamesViewPaused:(bool)arg1;
- (void)setFrozenBackdropSnapshotView:(id)arg1;
- (void)setHelpButtonDeferred:(bool)arg1;
- (void)setHelpButtonEmphasized:(bool)arg1;
- (void)setInFluidDismissal:(bool)arg1;
- (void)setInUITrackingMode:(bool)arg1;
- (void)setKeepStatusViewHidden:(bool)arg1;
- (void)setMode:(long long)arg1;
- (void)setRemoteContentView:(id)arg1;
- (void)setShowAudioRoutePicker:(bool)arg1;
- (void)setSiriSessionState:(long long)arg1;
- (void)setSiriStatusView:(id)arg1;
- (void)setStatusViewHidden:(bool)arg1;
- (void)setStatusViewUserInteractionEnabled:(bool)arg1;
- (void)setupOrbIfNeeded;
- (void)showPasscodeUnlockWithStatusText:(id)arg1 subTitle:(id)arg2 completionHandler:(id /* block */)arg3 unlockCompletionHandler:(id /* block */)arg4;
- (void)siriDidActivateFromSource:(long long)arg1;
- (long long)siriSessionState;
- (id)siriStatusView;
- (void)siriStatusViewHoldDidBegin:(id)arg1;
- (void)siriStatusViewHoldDidEnd:(id)arg1;
- (void)siriStatusViewWasTapped:(id)arg1;
- (double)statusViewHeight;
- (bool)statusViewHidden;
- (void)teardownStatusView;
- (void)updateForPercentageRevealed:(double)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
