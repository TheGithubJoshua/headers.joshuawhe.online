<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AFUIRequestOptions.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AssistantUI.framework/AFUIRequestOptions.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AssistantUI.framework/AssistantUI (1)
 */

@interface AFUIRequestOptions : NSObject <NSCopying, NSSecureCoding> {
    bool  _acousticIdEnabled;
    NSString * _activationDeviceIdentifier;
    NSString * _appBundleIdentifier;
    AFBulletin * _bulletin;
    double  _buttonDownTimestamp;
    SAGuidanceCheckForGuideUpdateContext * _checkForGuideUpdateContext;
    NSDictionary * _continuityInfo;
    long long  _directActionEvent;
    double  _expectedTimestamp;
    NSNumber * _homeButtonUpFromBeep;
    bool  _initialBringUp;
    NSDictionary * _messagesDirectActionContext;
    bool  _predictedRecordRouteIsZLL;
    SASPronunciationContext * _pronunciationContext;
    bool  _pronunciationRequest;
    bool  _releaseAudioSessionOnRecordingCompletion;
    AFRequestInfo * _requestInfo;
    long long  _requestSource;
    NSString * _serverCommandId;
    NSURL * _speechFileURL;
    AFSpeechRequestOptions * _speechRequestOptions;
    NSString * _text;
    double  _timestamp;
    bool  _useAutomaticEndpointing;
    bool  _useStreamingDictation;
}

@property (nonatomic) bool acousticIdEnabled;
@property (nonatomic, copy) NSString *activationDeviceIdentifier;
@property (nonatomic, copy) NSString *appBundleIdentifier;
@property (nonatomic, retain) AFBulletin *bulletin;
@property (nonatomic) double buttonDownTimestamp;
@property (nonatomic, copy) SAGuidanceCheckForGuideUpdateContext *checkForGuideUpdateContext;
@property (nonatomic, copy) NSDictionary *continuityInfo;
@property (nonatomic) long long directActionEvent;
@property (nonatomic) double expectedTimestamp;
@property (getter=isForSpeechRequest, nonatomic, readonly) bool forSpeechRequest;
@property (getter=isForStark, nonatomic, readonly) bool forStark;
@property (nonatomic, retain) NSNumber *homeButtonUpFromBeep;
@property (getter=isInitialBringUp, nonatomic) bool initialBringUp;
@property (nonatomic, copy) NSDictionary *messagesDirectActionContext;
@property (nonatomic) bool predictedRecordRouteIsZLL;
@property (nonatomic, retain) SASPronunciationContext *pronunciationContext;
@property (getter=isPronunciationRequest, nonatomic) bool pronunciationRequest;
@property (nonatomic) bool releaseAudioSessionOnRecordingCompletion;
@property (nonatomic, retain) AFRequestInfo *requestInfo;
@property (nonatomic) long long requestSource;
@property (nonatomic, copy) NSString *serverCommandId;
@property (nonatomic, copy) NSURL *speechFileURL;
@property (nonatomic, retain) AFSpeechRequestOptions *speechRequestOptions;
@property (nonatomic, copy) NSString *text;
@property (nonatomic) double timestamp;
@property (nonatomic) bool useAutomaticEndpointing;
@property (nonatomic) bool useStreamingDictation;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_configureStreamingDictationForSource:(long long)arg1;
- (bool)acousticIdEnabled;
- (id)activationDeviceIdentifier;
- (id)appBundleIdentifier;
- (id)bulletin;
- (double)buttonDownTimestamp;
- (id)checkForGuideUpdateContext;
- (id)continuityInfo;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (long long)directActionEvent;
- (void)encodeWithCoder:(id)arg1;
- (double)expectedTimestamp;
- (id)homeButtonUpFromBeep;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithRequestSource:(long long)arg1;
- (bool)isForSpeechRequest;
- (bool)isForStark;
- (bool)isInitialBringUp;
- (bool)isPronunciationRequest;
- (id)messagesDirectActionContext;
- (bool)predictedRecordRouteIsZLL;
- (id)pronunciationContext;
- (bool)releaseAudioSessionOnRecordingCompletion;
- (id)requestInfo;
- (long long)requestSource;
- (id)serverCommandId;
- (void)setAcousticIdEnabled:(bool)arg1;
- (void)setActivationDeviceIdentifier:(id)arg1;
- (void)setAppBundleIdentifier:(id)arg1;
- (void)setBulletin:(id)arg1;
- (void)setButtonDownTimestamp:(double)arg1;
- (void)setCheckForGuideUpdateContext:(id)arg1;
- (void)setContinuityInfo:(id)arg1;
- (void)setDirectActionEvent:(long long)arg1;
- (void)setExpectedTimestamp:(double)arg1;
- (void)setHomeButtonUpFromBeep:(id)arg1;
- (void)setInitialBringUp:(bool)arg1;
- (void)setMessagesDirectActionContext:(id)arg1;
- (void)setPredictedRecordRouteIsZLL:(bool)arg1;
- (void)setPronunciationContext:(id)arg1;
- (void)setPronunciationRequest:(bool)arg1;
- (void)setReleaseAudioSessionOnRecordingCompletion:(bool)arg1;
- (void)setRequestInfo:(id)arg1;
- (void)setRequestSource:(long long)arg1;
- (void)setServerCommandId:(id)arg1;
- (void)setSpeechFileURL:(id)arg1;
- (void)setSpeechRequestOptions:(id)arg1;
- (void)setText:(id)arg1;
- (void)setTimestamp:(double)arg1;
- (void)setUseAutomaticEndpointing:(bool)arg1;
- (void)setUseStreamingDictation:(bool)arg1;
- (id)speechFileURL;
- (id)speechRequestOptions;
- (id)text;
- (double)timestamp;
- (bool)useAutomaticEndpointing;
- (bool)useStreamingDictation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
