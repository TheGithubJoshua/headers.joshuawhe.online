<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVTMultiAvatarController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AvatarUI.framework/AVTMultiAvatarController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI
 */

@interface AVTMultiAvatarController : NSObject <AVTAvatarDisplayingController, AVTNotifyingContainerViewDelegate, UICollectionViewDataSource, UICollectionViewDelegate> {
    AVTPlusButtonView * _addItemView;
    <AVTAvatarListItem> * _addListItem;
    bool  _allowsCreate;
    <AVTViewCarouselLayout> * _avtViewLayout;
    AVTViewSession * _avtViewSession;
    AVTCenteringCollectionViewDelegate * _centeringDelegate;
    UICollectionView * _collectionView;
    AVTZIndexEngagementListCollectionViewLayout * _collectionViewLayout;
    AVTAvatarRecordDataSource * _dataSource;
    double  _decelerationRate;
    <AVTAvatarRecord> * _displayedRecord;
    AVTUIEnvironment * _environment;
    bool  _hideImageForDisplayedRecord;
    struct CGPoint { 
        double x; 
        double y; 
    }  _lastContentOffset;
    AVTAvatarListCell * _liveCell;
    <AVTUILogger> * _logger;
    NSArray * _recordListItems;
    AVTRenderingScope * _renderingScope;
    _AVTAvatarRecordImageProvider * _thumbnailRenderer;
    AVTTransitionCoordinator * _transitionCoordinator;
    UIView * _view;
    <AVTAvatarDisplayingControllerDelegate> * delegate;
    <AVTPresenterDelegate> * presenterDelegate;
}

@property (nonatomic, retain) AVTPlusButtonView *addItemView;
@property (nonatomic, retain) <AVTAvatarListItem> *addListItem;
@property (nonatomic) bool allowsCreate;
@property (nonatomic, retain) <AVTViewCarouselLayout> *avtViewLayout;
@property (nonatomic, retain) AVTViewSession *avtViewSession;
@property (nonatomic, retain) AVTCenteringCollectionViewDelegate *centeringDelegate;
@property (nonatomic, retain) UICollectionView *collectionView;
@property (nonatomic, retain) AVTZIndexEngagementListCollectionViewLayout *collectionViewLayout;
@property (nonatomic, readonly) AVTAvatarRecordDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) double decelerationRate;
@property (nonatomic) <AVTAvatarDisplayingControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) <AVTAvatarRecord> *displayedRecord;
@property (nonatomic, readonly) AVTUIEnvironment *environment;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hideImageForDisplayedRecord;
@property (nonatomic) struct CGPoint { double x1; double x2; } lastContentOffset;
@property (nonatomic, retain) AVTAvatarListCell *liveCell;
@property (nonatomic, readonly) <AVTUILogger> *logger;
@property (nonatomic) <AVTPresenterDelegate> *presenterDelegate;
@property (nonatomic, retain) NSArray *recordListItems;
@property (nonatomic, readonly) AVTRenderingScope *renderingScope;
@property (readonly) Class superclass;
@property (nonatomic, readonly) _AVTAvatarRecordImageProvider *thumbnailRenderer;
@property (nonatomic, readonly) AVTTransitionCoordinator *transitionCoordinator;
@property (nonatomic, retain) UIView *view;

+ (id)listItemsForAvatarRecords:(id)arg1;
+ (id)newCollectionViewLayoutForEngagedCellSize:(struct CGSize { double x1; double x2; })arg1 boundsSize:(struct CGSize { double x1; double x2; })arg2 environment:(id)arg3;
+ (id)snapshotProviderFocusedOnRecordWithIdentifier:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 avtViewAspectRatio:(struct CGSize { double x1; double x2; })arg3 dataSource:(id)arg4 environment:(id)arg5;

- (void).cxx_destruct;
- (id)addItemView;
- (id)addListItem;
- (bool)allowsCreate;
- (id)avtViewLayout;
- (id)avtViewSession;
- (void)buildCollectionViewAndConfigureLayoutIfNeeded;
- (id)cellForRecordItem:(id)arg1;
- (id)centeringDelegate;
- (id)collectionView;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didEndDisplayingCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)collectionView:(id)arg1 willDisplayCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (id)collectionViewLayout;
- (void)createAddItemViewIfNeeded;
- (void)createAvatar;
- (id)dataSource;
- (double)decelerationRate;
- (id)delegate;
- (void)displayAvatarForRecord:(id)arg1 animated:(bool)arg2;
- (id)displayedRecord;
- (id)environment;
- (id)getFirstItem;
- (bool)hideImageForDisplayedRecord;
- (id)indexPathForItemClosestToCenter;
- (id)initWithDataSource:(id)arg1 environment:(id)arg2;
- (id)initWithDataSource:(id)arg1 environment:(id)arg2 initialAVTViewLayout:(id)arg3;
- (bool)isViewLoaded;
- (struct CGPoint { double x1; double x2; })lastContentOffset;
- (void)layoutDidChangeWhileMoving:(bool)arg1 offset:(struct CGPoint { double x1; double x2; })arg2;
- (unsigned long long)listItemIndexForRecord:(id)arg1;
- (id)listItemsForDisplay;
- (id)liveCell;
- (id)loadRecords;
- (void)loadRecordsIfNeeded;
- (void)loadView;
- (id)logger;
- (void)notifyDelegateForScrollingTowardItem:(id)arg1 ratio:(double)arg2;
- (void)notifyDelegateForScrollingTowardItemFromOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)notifyingContainerViewDidChangeSize:(struct CGSize { double x1; double x2; })arg1;
- (void)notifyingContainerViewWillChangeSize:(struct CGSize { double x1; double x2; })arg1;
- (void)preloadAll;
- (void)prepareToTransitionToVisible:(bool)arg1 completionHandler:(id /* block */*)arg2;
- (id)presenterDelegate;
- (id)recordForItem:(id)arg1;
- (id)recordListItems;
- (void)reloadData;
- (void)reloadRecordListItems;
- (id)renderingScope;
- (void)scrollToDisplayedRecord;
- (void)scrollToViewAtIndex:(unsigned long long)arg1 animated:(bool)arg2;
- (void)scrollToViewForAvatarRecord:(id)arg1 animated:(bool)arg2;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)setAddItemView:(id)arg1;
- (void)setAddListItem:(id)arg1;
- (void)setAllowsCreate:(bool)arg1;
- (void)setAllowsCreate:(bool)arg1 animated:(bool)arg2;
- (void)setAvtViewLayout:(id)arg1;
- (void)setAvtViewSession:(id)arg1;
- (void)setCenteringDelegate:(id)arg1;
- (void)setCollectionView:(id)arg1;
- (void)setCollectionViewLayout:(id)arg1;
- (void)setDecelerationRate:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayedRecord:(id)arg1;
- (void)setDisplayedRecordFromIndex:(unsigned long long)arg1;
- (void)setHideImageForDisplayedRecord:(bool)arg1;
- (void)setLastContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLiveCell:(id)arg1;
- (void)setPresenterDelegate:(id)arg1;
- (void)setRecordListItems:(id)arg1;
- (void)setView:(id)arg1;
- (bool)shouldCurrentlyDisplayedRecordTransitionToLive;
- (void)stopUsingAVTViewSessionSynchronously:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)thumbnailRenderer;
- (void)transitionCell:(id)arg1 indexPath:(id)arg2 toStartFocusingAnimated:(bool)arg3 session:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)transitionCell:(id)arg1 toStopFocusingAnimated:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)transitionCenterCellIfPresentToStartFocusing;
- (void)transitionCenterCellIfPresentToStopFocusingAnimated:(bool)arg1;
- (void)transitionCenterCellToStartFocusing:(id)arg1 indexPath:(id)arg2;
- (id)transitionCoordinator;
- (void)transitionCurrentDisplayedRecordAnimated:(bool)arg1;
- (void)updateDisplayedRecordIfNeeded;
- (void)useAVTViewFromSession:(id)arg1 withLayout:(id)arg2;
- (id)view;
- (id)viewForSnapshot;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
