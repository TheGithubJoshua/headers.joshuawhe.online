<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVTColorSlider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AvatarUI.framework/AVTColorSlider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI
 */

@interface AVTColorSlider : UISlider {
    <AVTColorSliderDelegate> * _delegate;
    _UIEdgeFeedbackGenerator * _edgeFeedbackGenerator;
    long long  _layoutDirection;
    UISelectionFeedbackGenerator * _selectionFeedbackGenerator;
    bool  _shouldTriggerFeedback;
    CAShapeLayer * _thumbBorderLayer;
    CAShapeLayer * _thumbClippingLayer;
    CALayer * _thumbContentLayer;
    UIImageView * _thumbView;
    CALayer * _trackLayer;
}

@property (nonatomic) <AVTColorSliderDelegate> *delegate;
@property (nonatomic, retain) _UIEdgeFeedbackGenerator *edgeFeedbackGenerator;
@property (nonatomic) long long layoutDirection;
@property (nonatomic, retain) UISelectionFeedbackGenerator *selectionFeedbackGenerator;
@property (nonatomic) bool shouldTriggerFeedback;
@property (nonatomic, retain) CAShapeLayer *thumbBorderLayer;
@property (nonatomic, retain) CAShapeLayer *thumbClippingLayer;
@property (nonatomic, retain) CALayer *thumbContentLayer;
@property (nonatomic, readonly) CALayer *thumbLayer;
@property (nonatomic, retain) UIImageView *thumbView;
@property (nonatomic, retain) CALayer *trackLayer;

- (void).cxx_destruct;
- (id)createThumbView;
- (id)currentMaximumTrackImage;
- (id)currentMinimumTrackImage;
- (id)delegate;
- (id)edgeFeedbackGenerator;
- (id)initWithUserInterfaceLayoutDirection:(long long)arg1;
- (long long)layoutDirection;
- (void)layoutSubviews;
- (void)relayoutSublayers;
- (void)removeTrackLayer:(id)arg1 animated:(bool)arg2;
- (id)selectionFeedbackGenerator;
- (void)setDelegate:(id)arg1;
- (void)setEdgeFeedbackGenerator:(id)arg1;
- (void)setLayoutDirection:(long long)arg1;
- (void)setSelectionFeedbackGenerator:(id)arg1;
- (void)setShouldTriggerFeedback:(bool)arg1;
- (void)setThumbBorderLayer:(id)arg1;
- (void)setThumbClippingLayer:(id)arg1;
- (void)setThumbContentLayer:(id)arg1;
- (void)setThumbView:(id)arg1;
- (void)setTrackLayer:(id)arg1;
- (void)setTrackLayer:(id)arg1 animated:(bool)arg2;
- (bool)shouldTriggerFeedback;
- (id)thumbBorderLayer;
- (id)thumbClippingLayer;
- (id)thumbContentLayer;
- (id)thumbLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })thumbRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 trackRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 value:(float)arg3;
- (id)thumbView;
- (id)trackLayer;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })trackRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)valueDidChange:(id)arg1 forEvent:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
