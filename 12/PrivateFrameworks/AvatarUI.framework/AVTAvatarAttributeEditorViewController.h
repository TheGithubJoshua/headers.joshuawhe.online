<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVTAvatarAttributeEditorViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AvatarUI.framework/AVTAvatarAttributeEditorViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AvatarUI.framework/AvatarUI
 */

@interface AVTAvatarAttributeEditorViewController : UIViewController <AVTAvatarAttributeEditorControllerSubSelectionDelegate, AVTCollapsibleHeaderControllerDelegate, AVTFaceTrackingManagerDelegate, AVTGroupDialDelegate, AVTNotifyingContainerViewDelegate, AVTTransitionModel, UICollectionViewDataSource, UICollectionViewDataSourcePrefetching, UICollectionViewDelegateFlowLayout> {
    UILabel * _alphaAssetsLabel;
    AVTAttributeEditorAnimationCoordinator * _animationCoordinator;
    UICollectionView * _attributesCollectionView;
    AVTViewSession * _avtViewSession;
    AVTViewSessionProvider * _avtViewSessionProvider;
    AVTViewThrottler * _avtViewThrottler;
    AVTCollapsibleHeaderController * _collapsibleHeaderController;
    <AVTAvatarAttributeEditorLayout> * _currentLayout;
    AVTTransition * _currentTransition;
    AVTAvatarAttributeEditorDataSource * _dataSource;
    <AVTAvatarAttributeEditorViewControllerDelegate> * _delegate;
    AVTUIEnvironment * _environment;
    AVTGroupDial * _groupDial;
    UIView * _groupDialContainerView;
    bool  _hasMadeAnySelection;
    UIView * _headerMaskingView;
    <AVTTaskScheduler> * _imageProviderScheduler;
    bool  _isAnimatingHighlight;
    bool  _isCreating;
    AVTAvatarAttributeEditorModelManager * _modelManager;
    id /* block */  _pendingUnhighlightBlock;
    id /* block */  _postSessionDidBecomeActiveHandler;
    AVTShadowView * _shadowView;
    UITapGestureRecognizer * _tapGestureRecognizer;
    _AVTAvatarRecordImageProvider * _thumbnailRenderer;
    AVTImageTransitioningContainerView * _transitioningContainer;
    CALayer * _verticleRule;
    UIView * _verticleRuleContainer;
}

@property (nonatomic, retain) UILabel *alphaAssetsLabel;
@property (nonatomic, retain) AVTAttributeEditorAnimationCoordinator *animationCoordinator;
@property (nonatomic, retain) UICollectionView *attributesCollectionView;
@property (nonatomic, readonly) AVTAvatarRecord *avatarRecord;
@property (nonatomic, retain) AVTViewSession *avtViewSession;
@property (nonatomic, readonly) AVTViewSessionProvider *avtViewSessionProvider;
@property (nonatomic, retain) AVTViewThrottler *avtViewThrottler;
@property (nonatomic, retain) AVTCollapsibleHeaderController *collapsibleHeaderController;
@property (nonatomic, retain) <AVTAvatarAttributeEditorLayout> *currentLayout;
@property (nonatomic, retain) AVTTransition *currentTransition;
@property (nonatomic, retain) AVTAvatarAttributeEditorDataSource *dataSource;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AVTAvatarAttributeEditorViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) AVTUIEnvironment *environment;
@property (nonatomic, retain) AVTGroupDial *groupDial;
@property (nonatomic, retain) UIView *groupDialContainerView;
@property (nonatomic) bool hasMadeAnySelection;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIView *headerMaskingView;
@property (nonatomic, readonly) <AVTTaskScheduler> *imageProviderScheduler;
@property (nonatomic) bool isAnimatingHighlight;
@property (nonatomic, readonly) bool isCreating;
@property (nonatomic, readonly) AVTAvatarAttributeEditorModelManager *modelManager;
@property (nonatomic, copy) id /* block */ pendingUnhighlightBlock;
@property (nonatomic, copy) id /* block */ postSessionDidBecomeActiveHandler;
@property (nonatomic, retain) AVTShadowView *shadowView;
@property (readonly) Class superclass;
@property (nonatomic, retain) UITapGestureRecognizer *tapGestureRecognizer;
@property (nonatomic, retain) _AVTAvatarRecordImageProvider *thumbnailRenderer;
@property (nonatomic, retain) AVTImageTransitioningContainerView *transitioningContainer;
@property (nonatomic, retain) CALayer *verticleRule;
@property (nonatomic, retain) UIView *verticleRuleContainer;

+ (id)attributeRowIdentifier;
+ (id)colorRowIdentifier;

- (void).cxx_destruct;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })adjustedSafeAreaInsets;
- (id)alphaAssetsLabel;
- (id)animationCoordinator;
- (void)applyBaseAlpha;
- (void)applyFullAlpha;
- (void)applyLayout:(id)arg1;
- (void)applyLayout:(id)arg1 layoutAvatarView:(bool)arg2;
- (void)attributeEditorSectionController:(id)arg1 didSelectSectionItem:(id)arg2;
- (void)attributeEditorSectionController:(id)arg1 didUpdateSectionItem:(id)arg2;
- (void)attributeEditorSectionControllerNeedsLayoutUpdate:(id)arg1;
- (id)attributesCollectionView;
- (id)avatarRecord;
- (id)avtViewSession;
- (id)avtViewSessionProvider;
- (id)avtViewThrottler;
- (void)beginAVTViewSessionWithDidBeginBlock:(id /* block */)arg1;
- (id)collapsibleHeaderController;
- (void)collapsibleHeaderController:(id)arg1 willUpdateHeaderToHeight:(double)arg2;
- (void)collectionView:(id)arg1 cancelPrefetchingForItemsAtIndexPaths:(id)arg2;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didEndDisplayingCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 didHighlightItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didSelectItemAtIndexPath:(id)arg2;
- (void)collectionView:(id)arg1 didUnhighlightItemAtIndexPath:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })collectionView:(id)arg1 layout:(id)arg2 insetForSectionAtIndex:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 referenceSizeForFooterInSection:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 referenceSizeForHeaderInSection:(long long)arg3;
- (struct CGSize { double x1; double x2; })collectionView:(id)arg1 layout:(id)arg2 sizeForItemAtIndexPath:(id)arg3;
- (long long)collectionView:(id)arg1 numberOfItemsInSection:(long long)arg2;
- (void)collectionView:(id)arg1 prefetchItemsAtIndexPaths:(id)arg2;
- (bool)collectionView:(id)arg1 shouldSelectItemAtIndexPath:(id)arg2;
- (id)collectionView:(id)arg1 viewForSupplementaryElementOfKind:(id)arg2 atIndexPath:(id)arg3;
- (void)collectionView:(id)arg1 willDisplayCell:(id)arg2 forItemAtIndexPath:(id)arg3;
- (void)configureAVTViewFromSession:(id)arg1;
- (void)configureThrottlerForAVTView:(id)arg1;
- (void)configureUserInfoLabel;
- (void)contentSizeCategoryDidChange:(id)arg1;
- (id)createAlphaAssetsLabel;
- (void)createVerticleRuleIfNeeded;
- (id)currentLayout;
- (id)currentTransition;
- (id)dataSource;
- (id)delegate;
- (void)didTapAvatarView:(id)arg1;
- (id)environment;
- (id)groupDial;
- (void)groupDial:(id)arg1 didDeselectGroupAtIndex:(long long)arg2;
- (void)groupDial:(id)arg1 didSelectGroupAtIndex:(long long)arg2 tapped:(bool)arg3;
- (id)groupDialContainerView;
- (bool)hasMadeAnySelection;
- (id)headerMaskingView;
- (id)imageProviderScheduler;
- (id)init;
- (id)initWithAvatarRecord:(id)arg1 avtViewSessionProvider:(id)arg2 environment:(id)arg3 isCreating:(bool)arg4;
- (long long)interfaceOrientationForFaceTrackingManager:(id)arg1;
- (bool)isAnimatingHighlight;
- (bool)isCreating;
- (id)liveView;
- (void)loadView;
- (id)modelManager;
- (void)notifyingContainerViewDidChangeSize:(struct CGSize { double x1; double x2; })arg1;
- (void)notifyingContainerViewWillChangeSize:(struct CGSize { double x1; double x2; })arg1;
- (long long)numberOfSectionsInCollectionView:(id)arg1;
- (id /* block */)pendingUnhighlightBlock;
- (id /* block */)postSessionDidBecomeActiveHandler;
- (void)prepareForAnimatedTransitionWithLayout:(id)arg1 completionBlock:(id /* block */)arg2;
- (id)presetSectionItemForIndexPath:(id)arg1;
- (void)setAlphaAssetsLabel:(id)arg1;
- (void)setAnimationCoordinator:(id)arg1;
- (void)setAttributesCollectionView:(id)arg1;
- (void)setAvtViewSession:(id)arg1;
- (void)setAvtViewThrottler:(id)arg1;
- (void)setCollapsibleHeaderController:(id)arg1;
- (void)setCurrentLayout:(id)arg1;
- (void)setCurrentTransition:(id)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGroupDial:(id)arg1;
- (void)setGroupDialContainerView:(id)arg1;
- (void)setHasMadeAnySelection:(bool)arg1;
- (void)setHeaderMaskingView:(id)arg1;
- (void)setIsAnimatingHighlight:(bool)arg1;
- (void)setPendingUnhighlightBlock:(id /* block */)arg1;
- (void)setPostSessionDidBecomeActiveHandler:(id /* block */)arg1;
- (void)setShadowView:(id)arg1;
- (void)setTapGestureRecognizer:(id)arg1;
- (void)setThumbnailRenderer:(id)arg1;
- (void)setTransitioningContainer:(id)arg1;
- (void)setVerticleRule:(id)arg1;
- (void)setVerticleRuleContainer:(id)arg1;
- (void)setupCollapsibleHeaderIfNeededForLayout:(id)arg1 withSession:(id)arg2;
- (void)setupTapGestureForView:(id)arg1;
- (id)shadowView;
- (id)tapGestureRecognizer;
- (void)tearDownCollapsibleHeaderIfNeeded;
- (void)tearDownThrottler;
- (id)thumbnailRenderer;
- (void)transitionLiveViewToFront;
- (void)transitionStaticViewToFront;
- (void)transitionToLiveViewAnimated:(bool)arg1;
- (id)transitioningContainer;
- (void)updateForChangedSelectionIfNeeded;
- (void)updateForSelectionOfItem:(id)arg1 controller:(id)arg2;
- (void)updateHeaderDependentLayoutWithHeaderFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fittingSize:(struct CGSize { double x1; double x2; })arg2;
- (void)updateImageViewWithPosedAvatarRecord;
- (void)updateLayoutAttributes;
- (id)verticleRule;
- (id)verticleRuleContainer;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;
- (id)visibleLayout;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
