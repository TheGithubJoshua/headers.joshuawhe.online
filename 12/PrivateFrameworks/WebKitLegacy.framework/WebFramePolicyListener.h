<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WebFramePolicyListener.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WebKitLegacy.framework/WebFramePolicyListener.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy (8607.3.18)
 */

@interface WebFramePolicyListener : NSObject <WebFormSubmissionListener, WebPolicyDecisionListener> {
    struct RetainPtr<NSURL> { 
        void *m_ptr; 
    }  _appLinkURL;
    unsigned char  _defaultPolicy;
    struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { 
        struct Frame {} *m_ptr; 
    }  _frame;
    struct PolicyCheckIdentifier { 
        struct ObjectIdentifier<WebCore::ProcessIdentifierType> { 
            unsigned long long m_identifier; 
        } m_process; 
        unsigned long long m_policyCheck; 
    }  _identifier;
    struct Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>="m_callableWrapper"{unique_ptr<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase, std::__1::default_delete<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase> >="__ptr_"{__compressed_pair<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase *, std::__1::default_delete<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase> >="__value_"^{CallableWrapperBase {}  _policyFunction;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)initialize;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)continue;
- (void)dealloc;
- (void)download;
- (void)ignore;
- (id)initWithFrame:(struct Frame { int (**x1)(); struct atomic<unsigned int> { _Atomic unsigned int x_2_1_1; } x2; struct Ref<WebCore::WindowProxy, WTF::DumbPtrTraits<WebCore::WindowProxy> > { struct WindowProxy {} *x_3_1_1; } x3; struct HashSet<WebCore::FrameDestructionObserver *, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct HashTable<WebCore::FrameDestructionObserver *, WebCore::FrameDestructionObserver *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct FrameDestructionObserver {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_4_1_1; } x4; struct Frame {} *x5; struct Page {} *x6; struct RefPtr<WebCore::Settings, WTF::DumbPtrTraits<WebCore::Settings> > { struct Settings {} *x_7_1_1; } x7; struct FrameTree { struct Frame {} *x_8_1_1; struct Frame {} *x_8_1_2; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_3_2_1; } x_8_1_3; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_4_2_1; } x_8_1_4; struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { struct Frame {} *x_5_2_1; } x_8_1_5; struct Frame {} *x_8_1_6; struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { struct Frame {} *x_7_2_1; } x_8_1_7; struct Frame {} *x_8_1_8; unsigned int x_8_1_9; unsigned long long x_8_1_10; } x8; }*)arg1 identifier:(struct PolicyCheckIdentifier { struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long x_1_1_1; } x1; unsigned long long x2; })arg2 policyFunction:(struct Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>={unique_ptr<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase, std::__1::default_delete<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase> >={__compressed_pair<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase *, std::__1::default_delete<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase> >=^{CallableWrapperBase {}*)arg3 defaultPolicy:(unsigned char)arg4;
- (id)initWithFrame:(struct Frame { int (**x1)(); struct atomic<unsigned int> { _Atomic unsigned int x_2_1_1; } x2; struct Ref<WebCore::WindowProxy, WTF::DumbPtrTraits<WebCore::WindowProxy> > { struct WindowProxy {} *x_3_1_1; } x3; struct HashSet<WebCore::FrameDestructionObserver *, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct HashTable<WebCore::FrameDestructionObserver *, WebCore::FrameDestructionObserver *, WTF::IdentityExtractor, WTF::PtrHash<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *>, WTF::HashTraits<WebCore::FrameDestructionObserver *> > { struct FrameDestructionObserver {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; unsigned int x_1_2_4; unsigned int x_1_2_5; } x_4_1_1; } x4; struct Frame {} *x5; struct Page {} *x6; struct RefPtr<WebCore::Settings, WTF::DumbPtrTraits<WebCore::Settings> > { struct Settings {} *x_7_1_1; } x7; struct FrameTree { struct Frame {} *x_8_1_1; struct Frame {} *x_8_1_2; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_3_2_1; } x_8_1_3; struct AtomicString { struct String { struct RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> > { struct StringImpl {} *x_1_4_1; } x_1_3_1; } x_4_2_1; } x_8_1_4; struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { struct Frame {} *x_5_2_1; } x_8_1_5; struct Frame {} *x_8_1_6; struct RefPtr<WebCore::Frame, WTF::DumbPtrTraits<WebCore::Frame> > { struct Frame {} *x_7_2_1; } x_8_1_7; struct Frame {} *x_8_1_8; unsigned int x_8_1_9; unsigned long long x_8_1_10; } x8; }*)arg1 identifier:(struct PolicyCheckIdentifier { struct ObjectIdentifier<WebCore::ProcessIdentifierType> { unsigned long long x_1_1_1; } x1; unsigned long long x2; })arg2 policyFunction:(struct Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>={unique_ptr<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase, std::__1::default_delete<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase> >={__compressed_pair<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase *, std::__1::default_delete<WTF::Function<void (WebCore::PolicyAction, WebCore::PolicyCheckIdentifier)>::CallableWrapperBase> >=^{CallableWrapperBase {}*)arg3 defaultPolicy:(unsigned char)arg4 appLinkURL:(id)arg5;
- (void)invalidate;
- (void)receivedPolicyDecision:(unsigned char)arg1;
- (void)use;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
