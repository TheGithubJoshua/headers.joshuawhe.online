<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WebUITextIndicatorData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/WebKitLegacy.framework/WebUITextIndicatorData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WebKitLegacy.framework/WebKitLegacy (8607.3.18)
 */

@interface WebUITextIndicatorData : NSObject {
    UIImage * _contentImage;
    double  _contentImageScaleFactor;
    UIImage * _contentImageWithHighlight;
    UIImage * _contentImageWithoutSelection;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentImageWithoutSelectionRectInRootViewCoordinates;
    UIImage * _dataInteractionImage;
    UIColor * _estimatedBackgroundColor;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _selectionRectInRootViewCoordinates;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _textBoundingRectInRootViewCoordinates;
    NSArray * _textRectsInBoundingRectCoordinates;
}

@property (nonatomic, retain) UIImage *contentImage;
@property (nonatomic) double contentImageScaleFactor;
@property (nonatomic, retain) UIImage *contentImageWithHighlight;
@property (nonatomic, retain) UIImage *contentImageWithoutSelection;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentImageWithoutSelectionRectInRootViewCoordinates;
@property (nonatomic, retain) UIImage *dataInteractionImage;
@property (nonatomic, retain) UIColor *estimatedBackgroundColor;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } selectionRectInRootViewCoordinates;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } textBoundingRectInRootViewCoordinates;
@property (nonatomic, retain) NSArray *textRectsInBoundingRectCoordinates;

- (id)contentImage;
- (double)contentImageScaleFactor;
- (id)contentImageWithHighlight;
- (id)contentImageWithoutSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentImageWithoutSelectionRectInRootViewCoordinates;
- (id)dataInteractionImage;
- (void)dealloc;
- (id)estimatedBackgroundColor;
- (id)initWithImage:(struct CGImage { }*)arg1 scale:(double)arg2;
- (id)initWithImage:(struct CGImage { }*)arg1 textIndicatorData:(const struct TextIndicatorData { struct FloatRect { struct FloatPoint { float x_1_2_1; float x_1_2_2; } x_1_1_1; struct FloatSize { float x_2_2_1; float x_2_2_2; } x_1_1_2; } x1; struct FloatRect { struct FloatPoint { float x_1_2_1; float x_1_2_2; } x_2_1_1; struct FloatSize { float x_2_2_1; float x_2_2_2; } x_2_1_2; } x2; struct FloatRect { struct FloatPoint { float x_1_2_1; float x_1_2_2; } x_3_1_1; struct FloatSize { float x_2_2_1; float x_2_2_2; } x_3_1_2; } x3; struct Vector<WebCore::FloatRect, 0, WTF::CrashOnOverflow, 16> { struct FloatRect {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; float x5; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_6_1_1; } x6; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_7_1_1; } x7; struct RefPtr<WebCore::Image, WTF::DumbPtrTraits<WebCore::Image> > { struct Image {} *x_8_1_1; } x8; struct Color { union { unsigned long long x_1_2_1; struct ExtendedColor {} *x_1_2_2; } x_9_1_1; } x9; unsigned char x10; unsigned short x11; }*)arg2 scale:(double)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionRectInRootViewCoordinates;
- (void)setContentImage:(id)arg1;
- (void)setContentImageScaleFactor:(double)arg1;
- (void)setContentImageWithHighlight:(id)arg1;
- (void)setContentImageWithoutSelection:(id)arg1;
- (void)setContentImageWithoutSelectionRectInRootViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDataInteractionImage:(id)arg1;
- (void)setEstimatedBackgroundColor:(id)arg1;
- (void)setSelectionRectInRootViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTextBoundingRectInRootViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setTextRectsInBoundingRectCoordinates:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textBoundingRectInRootViewCoordinates;
- (id)textRectsInBoundingRectCoordinates;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
