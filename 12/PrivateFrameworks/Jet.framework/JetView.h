<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>JetView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Jet.framework/JetView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Jet.framework/Jet (1)
 */

@interface JetView : UIView {
    double  _beginTime;
    unsigned int  _colorRenderBuffer;
    struct jet_context { int (**x1)(); struct jet_render_mode {} *x2; struct jet_framebuffer {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; struct shared_ptr<jet_fence> { struct jet_fence {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; struct unordered_set<jet_buffer *, std::__1::hash<jet_buffer *>, std::__1::equal_to<jet_buffer *>, std::__1::allocator<jet_buffer *> > { struct __hash_table<jet_buffer *, std::__1::hash<jet_buffer *>, std::__1::equal_to<jet_buffer *>, std::__1::allocator<jet_buffer *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *>, std::__1::allocator<std::__1::__hash_node<jet_buffer *, void *> > > { struct __hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> { struct __hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; } x_9_1_1; } x9; } * _ctx;
    <MTLDevice> * _device;
    bool  _didRunOnce;
    NSTimer * _drawTimer;
    CAEAGLLayer * _eaglLayer;
    struct jet_texture { int (**x1)(); } * _frameBufferColorTexture;
    struct jet_texture { int (**x1)(); } * _frameBufferDepthStencilTexture;
    struct jet_framebuffer { int (**x1)(); struct { struct jet_texture {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2[4]; struct { struct jet_texture {} *x_3_1_1; float x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; } x3; struct { struct jet_texture {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; unsigned int x_4_1_4; } x4; } * _framebuffer;
    EAGLContext * _glContext;
    CAMetalLayer * _metalLayer;
    struct shared_ptr<jet_fence> { 
        struct jet_fence {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _renderFence;
}

@property (readonly) struct jet_context { int (**x1)(); struct jet_render_mode {} *x2; struct jet_framebuffer {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; struct shared_ptr<jet_fence> { struct jet_fence {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; /* Warning: unhandled struct encoding: '{unordered_set<jet_buffer *' */ struct x9; }*context; /* unknown property attribute:  std::__1::equal_to<jet_buffer *> >=f}}}@} */

+ (bool)canRenderToContextType:(unsigned int)arg1;
+ (Class)layerClass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_bindGLContext;
- (void)_commonInit;
- (void)_createContext;
- (void)_renderCallback;
- (void)_reshape;
- (struct jet_context { int (**x1)(); struct jet_render_mode {} *x2; struct jet_framebuffer {} *x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; struct shared_ptr<jet_fence> { struct jet_fence {} *x_8_1_1; struct __shared_weak_count {} *x_8_1_2; } x8; struct unordered_set<jet_buffer *, std::__1::hash<jet_buffer *>, std::__1::equal_to<jet_buffer *>, std::__1::allocator<jet_buffer *> > { struct __hash_table<jet_buffer *, std::__1::hash<jet_buffer *>, std::__1::equal_to<jet_buffer *>, std::__1::allocator<jet_buffer *> > { struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > > { struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > > { struct __hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *>, std::__1::allocator<std::__1::__hash_node<jet_buffer *, void *> > > { struct __hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> { struct __hash_node_base<std::__1::__hash_node<jet_buffer *, void *> *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; } x_9_1_1; } x9; }*)context;
- (unsigned int)contextType;
- (struct jet_texture { int (**x1)(); }*)createTextureFromImageNamed:(id)arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isOpaque;
- (void)layoutSubviews;
- (void)onInit;
- (void)remakeFramebuffer;
- (void)renderInFramebuffer:(struct jet_framebuffer { int (**x1)(); struct { struct jet_texture {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2[4]; struct { struct jet_texture {} *x_3_1_1; float x_3_1_2; unsigned int x_3_1_3; unsigned int x_3_1_4; } x3; struct { struct jet_texture {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; unsigned int x_4_1_4; } x4; }*)arg1 forTime:(double)arg2;
- (void)runOnce;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
