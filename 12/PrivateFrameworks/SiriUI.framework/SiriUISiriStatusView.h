<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SiriUISiriStatusView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/SiriUI.framework/SiriUISiriStatusView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/SiriUI.framework/SiriUI (1)
 */

@interface SiriUISiriStatusView : UIView <SUICFlamesViewDelegate, SiriUISiriStatusViewProtocol, UIGestureRecognizerDelegate> {
    <SiriUISiriStatusViewAnimationDelegate> * _animationDelegate;
    SiriUIConfiguration * _configuration;
    int  _deferredFlamesViewState;
    <SiriUISiriStatusViewDelegate> * _delegate;
    double  _disabledMicOpacity;
    UIView * _flamesContainerView;
    SUICFlamesView * _flamesView;
    bool  _flamesViewDeferred;
    double  _flamesViewWidth;
    AVAudioSession * _glyphAudioSession;
    NSObject<OS_dispatch_queue> * _glyphConfigurationQueue;
    AVPlayerLayer * _glyphLayer;
    AVPlayerItem * _glyphPlayerItem;
    AVPlayerLooper * _glyphPlayerLooper;
    AVQueuePlayer * _glyphQueuePlayer;
    UIView * _glyphView;
    bool  _inUITrackingMode;
    double  _lastStateChangeTime;
    UILongPressGestureRecognizer * _longPressRecognizer;
    long long  _mode;
    bool  _paused;
    UIScreen * _screen;
    bool  _siriGlyphHidden;
    bool  _textInputEnabled;
    UIView * _touchInputView;
}

@property (nonatomic) <SiriUISiriStatusViewAnimationDelegate> *animationDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <SiriUISiriStatusViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) double disabledMicOpacity;
@property (nonatomic, readonly) UIView *flamesContainerView;
@property (nonatomic) bool flamesViewDeferred;
@property (nonatomic) double flamesViewWidth;
@property (readonly) unsigned long long hash;
@property (getter=isInUITrackingMode, nonatomic) bool inUITrackingMode;
@property (nonatomic) long long mode;
@property (nonatomic) bool paused;
@property (nonatomic, readonly) double statusViewHeight;
@property (readonly) Class superclass;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })activeFrameForScreen:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 safeAreaInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;

- (void).cxx_destruct;
- (void)_animateSiriGlyphHidden:(bool)arg1;
- (void)_attachFlamesViewIfNeeded;
- (bool)_deviceNeedsReducedFramerateForCarPlayThinkingState;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_flamesFrame;
- (id)_flamesView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_flamesViewFrame;
- (void)_handleKeyboardDidShowNotification:(id)arg1;
- (void)_handleKeyboardWillHideNotification:(id)arg1;
- (void)_layoutFlamesViewIfNeeded;
- (void)_micButtonHeld:(id)arg1;
- (void)_micButtonTapped:(id)arg1;
- (void)_setFlamesViewState:(int)arg1;
- (void)_setupOrbIfNeeded:(id /* block */)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_siriGlyphTappableRect;
- (id)animationDelegate;
- (float)audioLevelForFlamesView:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (double)disabledMicOpacity;
- (void)fadeOutCurrentAura;
- (id)flamesContainerView;
- (bool)flamesViewDeferred;
- (double)flamesViewWidth;
- (void)forceMicVisible:(bool)arg1;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 screen:(id)arg2 textInputEnabled:(bool)arg3 configuration:(id)arg4;
- (bool)isInUITrackingMode;
- (void)layoutSubviews;
- (long long)mode;
- (bool)paused;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })safeAreaInsets;
- (void)safeAreaInsetsDidChange;
- (void)setAnimationDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisabledMicOpacity:(double)arg1;
- (void)setFlamesViewDeferred:(bool)arg1;
- (void)setFlamesViewWidth:(double)arg1;
- (void)setInUITrackingMode:(bool)arg1;
- (void)setMode:(long long)arg1;
- (void)setPaused:(bool)arg1;
- (void)setupOrbIfNeeded;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (double)statusViewHeight;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
