<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXSwipeSelectionManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXSwipeSelectionManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXSwipeSelectionManager : NSObject <PXAutoScrollerDelegate, PXSectionedDataSourceManagerObserver> {
    PXUIAutoScroller * __autoScroller;
    unsigned long long  __currentDataSourceIdentifier;
    struct PXSimpleIndexPath { 
        unsigned long long dataSourceIdentifier; 
        long long section; 
        long long item; 
        long long subitem; 
    }  __currentIndexPath;
    id  __pausingChangesToken;
    PXIndexPathSet * __selectedIndexPathsBeforeSwipe;
    struct PXSimpleIndexPath { 
        unsigned long long dataSourceIdentifier; 
        long long section; 
        long long item; 
        long long subitem; 
    }  __startingIndexPath;
    <PXSwipeSelectionManagerDelegate> * _delegate;
    struct { 
        bool respondsToItemIndexPathAtLocation; 
        bool respondsToItemIndexPathClosestLeadingLocation; 
        bool respondsToItemIndexPathClosestAboveLocation; 
        bool respondsToShouldSelectItemAtIndexPath; 
    }  _delegateFlags;
    struct { 
        bool selectedIndexPaths; 
    }  _needsUpdateFlags;
    UIScrollView * _scrollView;
    PXSectionedSelectionManager * _selectionManager;
    unsigned long long  _state;
    UIGestureRecognizer * _swipeGestureRecognizer;
}

@property (nonatomic, readonly) PXUIAutoScroller *_autoScroller;
@property (setter=_setCurrentDataSourceIdentifier:, nonatomic) unsigned long long _currentDataSourceIdentifier;
@property (setter=_setCurrentIndexPath:, nonatomic) struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; } _currentIndexPath;
@property (setter=_setPausingChangesToken:, nonatomic, retain) id _pausingChangesToken;
@property (setter=_setSelectedIndexPathsBeforeSwipe:, nonatomic, retain) PXIndexPathSet *_selectedIndexPathsBeforeSwipe;
@property (setter=_setStartingIndexPath:, nonatomic) struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; } _startingIndexPath;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXSwipeSelectionManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (nonatomic, readonly) PXSectionedSelectionManager *selectionManager;
@property (setter=_setState:, nonatomic) unsigned long long state;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UIGestureRecognizer *swipeGestureRecognizer;

- (void).cxx_destruct;
- (id)_autoScroller;
- (void)_beginSelectionFromIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg1;
- (unsigned long long)_currentDataSourceIdentifier;
- (struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })_currentIndexPath;
- (void)_endSelection;
- (void)_handleSwipeSelectionGesture:(id)arg1;
- (void)_invalidateSelectedIndexPaths;
- (bool)_isSelecting;
- (struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })_itemIndexPathAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })_itemIndexPathClosestAboveLocation:(struct CGPoint { double x1; double x2; })arg1;
- (struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })_itemIndexPathClosestLeadingLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)_pausingChangesToken;
- (id)_selectedIndexPathsBeforeSwipe;
- (void)_setCurrentDataSourceIdentifier:(unsigned long long)arg1;
- (void)_setCurrentIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg1;
- (void)_setPausingChangesToken:(id)arg1;
- (void)_setSelectedIndexPathsBeforeSwipe:(id)arg1;
- (void)_setStartingIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg1;
- (void)_setState:(unsigned long long)arg1;
- (struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })_startingIndexPath;
- (void)_updateSelectedIndexPaths;
- (void)_updateSelectionWithHitIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg1 leadingClosestIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2 aboveClosestIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg3;
- (void)_updateWithDataSource:(id)arg1 changeHistory:(id)arg2;
- (void)autoScroller:(id)arg1 didAutoscrollWithTimestamp:(double)arg2;
- (void)dealloc;
- (id)delegate;
- (id)init;
- (id)initWithSelectionManager:(id)arg1 scrollView:(id)arg2;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (id)scrollView;
- (id)sectionedDataSourceManagerInterestingObjectReferences:(id)arg1;
- (id)selectionManager;
- (void)setDelegate:(id)arg1;
- (unsigned long long)state;
- (id)swipeGestureRecognizer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
