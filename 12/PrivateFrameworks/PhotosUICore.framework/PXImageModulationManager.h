<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXImageModulationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXImageModulationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXImageModulationManager : PXObservable <PXChangeObserver, PXPreferencesObserver, PXSettingsKeyObserver> {
    double  _HDRFocus;
    bool  _active;
    bool  _applicationActive;
    CAContext * _coreAnimationContext;
    bool  _enabled;
    NSHashTable * _imageLayerModulators;
    double  _imageModulationIntensity;
    double  _lastRequestedEDRHeadroomChangeTime;
    bool  _lowPowerModeEnabled;
    bool  _mainScreen;
    struct { 
        bool enabled; 
        bool lowPowerModeEnabled; 
        bool active; 
        bool HDRFocus; 
        bool imageModulationIntensity; 
        bool requestedEDRHeadroomFactor; 
        bool finalRequestedEDRHeadroomFactor; 
        bool desiredDynamicRange; 
        bool imageLayerModulators; 
    }  _needsUpdateFlags;
    double  _requestedEDRHeadroomFactor;
    PXRequestedEDRHeadroomFactorFilter * _requestedEDRHeadroomFactorFilter;
    UIViewController * _rootViewController;
    PXImageModulationSettings * _settings;
}

@property (nonatomic, readonly) double HDRFocus;
@property (getter=isActive, nonatomic, readonly) bool active;
@property (getter=isApplicationActive, nonatomic) bool applicationActive;
@property (nonatomic, retain) CAContext *coreAnimationContext;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isEnabled, nonatomic, readonly) bool enabled;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSHashTable *imageLayerModulators;
@property (nonatomic, readonly) double imageModulationIntensity;
@property (getter=isLowPowerModeEnabled, nonatomic) bool lowPowerModeEnabled;
@property (getter=isMainScreen, nonatomic, readonly) bool mainScreen;
@property (nonatomic, readonly) double requestedEDRHeadroomFactor;
@property (nonatomic, readonly) PXRequestedEDRHeadroomFactorFilter *requestedEDRHeadroomFactorFilter;
@property (nonatomic, readonly) UIViewController *rootViewController;
@property (nonatomic, readonly) PXImageModulationSettings *settings;
@property (readonly) Class superclass;

+ (double)HDRValueForAsset:(id)arg1;
+ (long long)_contentTypeForAsset:(id)arg1;
+ (struct { long long x1; float x2; })optionsForAsset:(id)arg1;

- (void).cxx_destruct;
- (double)HDRFocus;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidResignActive:(id)arg1;
- (void)_invalidateActive;
- (void)_invalidateDesiredDynamicRange;
- (void)_invalidateEnabled;
- (void)_invalidateFinalRequestedEDRHeadroomFactor;
- (void)_invalidateHDRFocus;
- (void)_invalidateImageLayerModulators;
- (void)_invalidateImageModulationIntensity;
- (void)_invalidateLowPowerModeEnabled;
- (void)_invalidateRequestedEDRHeadroomFactor;
- (bool)_needsUpdate;
- (void)_processInfoPowerStateDidChange:(id)arg1;
- (void)_setNeedsUpdate;
- (void)_updateActiveIfNeeded;
- (void)_updateCoreAnimationContext;
- (void)_updateDesiredDynamicRangeIfNeeded;
- (void)_updateEnabledIfNeeded;
- (void)_updateFinalRequestedEDRHeadroomFactorIfNeeded;
- (void)_updateHDRFocusIfNeeded;
- (void)_updateIfNeeded;
- (void)_updateImageLayerModulator:(id)arg1;
- (void)_updateImageLayerModulatorsIfNeeded;
- (void)_updateImageModulationIntensityIfNeeded;
- (void)_updateLowPowerModeEnabledIfNeeded;
- (void)_updateRequestedEDRHeadroomFactorIfNeeded;
- (void)checkInImageLayerModulator:(id)arg1;
- (id)checkoutImageLayerModulatorWithOptions:(struct { long long x1; float x2; })arg1;
- (id)coreAnimationContext;
- (void)dealloc;
- (void)didPerformChanges;
- (id)imageLayerModulators;
- (double)imageModulationIntensity;
- (id)init;
- (id)initWithRootViewController:(id)arg1 mainScreen:(bool)arg2;
- (bool)isActive;
- (bool)isApplicationActive;
- (bool)isEnabled;
- (bool)isLowPowerModeEnabled;
- (bool)isMainScreen;
- (id)mutableChangeObject;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (void)preferencesDidChange;
- (double)requestedEDRHeadroomFactor;
- (id)requestedEDRHeadroomFactorFilter;
- (id)rootViewController;
- (void)setActive:(bool)arg1;
- (void)setApplicationActive:(bool)arg1;
- (void)setCoreAnimationContext:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setHDRFocus:(double)arg1;
- (void)setImageModulationIntensity:(double)arg1;
- (void)setLowPowerModeEnabled:(bool)arg1;
- (void)setNeedsHDRFocusUpdate;
- (void)setNeedsImageModulationIntensityUpdate;
- (void)setRequestedEDRHeadroomFactor:(double)arg1;
- (id)settings;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
