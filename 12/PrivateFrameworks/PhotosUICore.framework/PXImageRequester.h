<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXImageRequester.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXImageRequester.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXImageRequester : PXObservable <PXMutableImageRequester> {
    <PXDisplayAsset> * __currentImageSourceAsset;
    PXImageRequest * __currentRequest;
    struct CGSize { 
        double width; 
        double height; 
    }  __targetSize;
    <PXDisplayAsset> * _asset;
    struct CGSize { 
        double width; 
        double height; 
    }  _contentSize;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentsRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _desiredContentsRect;
    bool  _hasFullQuality;
    UIImage * _image;
    bool  _isInCloud;
    double  _loadingProgress;
    struct CGSize { 
        double width; 
        double height; 
    }  _maximumRequestSize;
    <PXUIImageProvider> * _mediaProvider;
    struct { 
        bool targetSize; 
        bool imageRequest; 
        bool isInCloud; 
    }  _needsUpdateFlags;
    UIImage * _opportunisticImage;
    double  _scale;
    struct CGSize { 
        double width; 
        double height; 
    }  _viewportSize;
}

@property (setter=_setCurrentImageSourceAsset:, nonatomic, retain) <PXDisplayAsset> *_currentImageSourceAsset;
@property (setter=_setCurrentRequest:, nonatomic, retain) PXImageRequest *_currentRequest;
@property (setter=_setTargetSize:, nonatomic) struct CGSize { double x1; double x2; } _targetSize;
@property (nonatomic, readonly) <PXDisplayAsset> *asset;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } contentSize;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentsRect;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } desiredContentsRect;
@property (setter=_setHasFullQuality:, nonatomic) bool hasFullQuality;
@property (readonly) unsigned long long hash;
@property (setter=_setImage:, nonatomic, retain) UIImage *image;
@property (setter=_setIsInCloud:, nonatomic) bool isInCloud;
@property (setter=_setLoadingProgress:, nonatomic) double loadingProgress;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } maximumRequestSize;
@property (nonatomic, readonly) <PXUIImageProvider> *mediaProvider;
@property (setter=_setOpportunisticImage:, nonatomic, retain) UIImage *opportunisticImage;
@property (nonatomic, readonly) double scale;
@property (readonly) Class superclass;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } viewportSize;

+ (id)defaultOptions;

- (void).cxx_destruct;
- (void)_cancelRequests;
- (id)_currentImageSourceAsset;
- (id)_currentRequest;
- (void)_handleProgressForImageRequest:(id)arg1 progress:(double)arg2;
- (void)_handleResultOfImageRequest:(id)arg1 image:(id)arg2 info:(id)arg3;
- (void)_invalidateImageRequest;
- (void)_invalidateIsInCloud;
- (void)_invalidateTargetSize;
- (bool)_needsUpdate;
- (void)_setCurrentImageSourceAsset:(id)arg1;
- (void)_setCurrentRequest:(id)arg1;
- (void)_setHasFullQuality:(bool)arg1;
- (void)_setImage:(id)arg1;
- (void)_setIsInCloud:(bool)arg1;
- (void)_setLoadingProgress:(double)arg1;
- (void)_setOpportunisticImage:(id)arg1;
- (void)_setTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })_targetSize;
- (void)_updateIfNeeded;
- (void)_updateImageRequestIfNeeded;
- (void)_updateIsInCloudIfNeeded;
- (void)_updateTargetSizeIfNeeded;
- (id)asset;
- (struct CGSize { double x1; double x2; })contentSize;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentsRect;
- (void)dealloc;
- (id)description;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })desiredContentsRect;
- (void)didPerformChanges;
- (void)handlePreloadedImage:(id)arg1;
- (void)handlePreloadedImageRequester:(id)arg1;
- (bool)hasFullQuality;
- (id)image;
- (id)init;
- (id)initWithMediaProvider:(id)arg1 asset:(id)arg2;
- (bool)isInCloud;
- (double)loadingProgress;
- (struct CGSize { double x1; double x2; })maximumRequestSize;
- (id)mediaProvider;
- (id)mutableChangeObject;
- (id)opportunisticImage;
- (void)performChanges:(id /* block */)arg1;
- (double)scale;
- (void)setAsset:(id)arg1;
- (void)setContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDesiredContentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setMaximumRequestSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMediaProvider:(id)arg1;
- (void)setScale:(double)arg1;
- (void)setViewportSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })viewportSize;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
