<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXForYouSuggestionGadget.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXForYouSuggestionGadget.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXForYouSuggestionGadget : NSObject <PXGadget> {
    bool  _blursDegradedContent;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedHeightForWidth;
    bool  _contentHidden;
    PXForYouSuggestionGadgetContentView * _contentView;
    bool  _contentViewVisible;
    <PXForYouSuggestionGadgetDelegate> * _delegate;
    PXGadgetSpec * _gadgetSpec;
    <PXDisplayAsset> * _keyAsset;
    PXUIMediaProvider * _mediaProvider;
    long long  _priority;
    NSString * _subtitle;
    <PXDisplaySuggestion> * _suggestion;
    unsigned short  _suggestionType;
    NSString * _title;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _visibleContentRect;
}

@property (nonatomic, readonly) const struct __CFString { }*accessoryButtonEventTrackerKey;
@property (nonatomic, readonly) NSString *accessoryButtonTitle;
@property (nonatomic, readonly) unsigned long long accessoryButtonType;
@property (nonatomic) bool blursDegradedContent;
@property (nonatomic) struct CGSize { double x1; double x2; } cachedHeightForWidth;
@property (getter=isContentHidden, nonatomic) bool contentHidden;
@property (nonatomic, retain) PXForYouSuggestionGadgetContentView *contentView;
@property (nonatomic) bool contentViewVisible;
@property (nonatomic, readonly) UIImage *currentImage;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXForYouSuggestionGadgetDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) PXGadgetSpec *gadgetSpec;
@property (nonatomic, readonly) unsigned long long gadgetType;
@property (nonatomic, readonly) bool hasContentToDisplay;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long headerStyle;
@property (nonatomic, retain) <PXDisplayAsset> *keyAsset;
@property (nonatomic, readonly) NSString *localizedTitle;
@property (nonatomic, retain) PXUIMediaProvider *mediaProvider;
@property (nonatomic) long long priority;
@property (nonatomic, readonly) PXRegionOfInterest *regionOfInterestForOneUpTransition;
@property (nonatomic, copy) NSString *subtitle;
@property (nonatomic, retain) <PXDisplaySuggestion> *suggestion;
@property (nonatomic) unsigned short suggestionType;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsAssetsDrop;
@property (nonatomic, readonly) bool supportsHighlighting;
@property (nonatomic, readonly) bool supportsSelection;
@property (nonatomic, copy) NSString *title;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleContentRect;

+ (id)fetchQueue;
+ (id)placeholderFilters;
+ (void)preloadResources;

- (void).cxx_destruct;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (id)_contentViewIfLoaded;
- (void)_handleContentViewTap:(id)arg1;
- (void)_handleDismiss;
- (void)_markSuggestionAsActive;
- (void)_markSuggestionAsDeclined;
- (void)_updateContentViewMode;
- (void)_updateKeyAsset;
- (void)_updateTitleAndSubtitle;
- (bool)blursDegradedContent;
- (struct CGSize { double x1; double x2; })cachedHeightForWidth;
- (void)commitPreviewViewController:(id)arg1;
- (void)contentHasBeenSeen;
- (id)contentView;
- (void)contentViewDidDisappear;
- (bool)contentViewVisible;
- (void)contentViewWillAppear;
- (id)currentImage;
- (void)dealloc;
- (id)debugDictionary;
- (id)debugURLsForDiagnostics;
- (id)delegate;
- (void)didDismissPreviewViewController:(id)arg1 committing:(bool)arg2;
- (void)gadgetControllerHasAppeared;
- (id)gadgetSpec;
- (unsigned long long)gadgetType;
- (bool)hasContentToDisplay;
- (id)init;
- (id)initWithSuggestion:(id)arg1;
- (bool)isContentHidden;
- (id)keyAsset;
- (id)mediaProvider;
- (struct NSObject { Class x1; }*)previewViewControllerAtLocation:(struct CGPoint { double x1; double x2; })arg1 fromSourceView:(struct NSObject { Class x1; }*)arg2 outSourceRect:(out struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (long long)priority;
- (id)regionOfInterestForOneUpTransition;
- (void)setBlursDegradedContent:(bool)arg1;
- (void)setCachedHeightForWidth:(struct CGSize { double x1; double x2; })arg1;
- (void)setContentHidden:(bool)arg1;
- (void)setContentView:(id)arg1;
- (void)setContentViewVisible:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGadgetSpec:(id)arg1;
- (void)setKeyAsset:(id)arg1;
- (void)setMediaProvider:(id)arg1;
- (void)setPriority:(long long)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setSuggestion:(id)arg1;
- (void)setSuggestionType:(unsigned short)arg1;
- (void)setTitle:(id)arg1;
- (void)setVisibleContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)subtitle;
- (id)suggestion;
- (unsigned short)suggestionType;
- (id)title;
- (id)uniqueGadgetIdentifier;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleContentRect;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
