<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXContextualNotification.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXContextualNotification.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXContextualNotification : NSObject {
    long long  _animationCount;
    long long  _appearanceState;
    struct PXContextualNotificationVisualState { 
        bool onscreen; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } containingFrame; 
        double verticalOffset; 
        double alpha; 
    }  _appliedState;
    PXContextualNotificationCenter * _contextualNotificationCenter;
    <PXContextualNotificationDelegate> * _delegate;
    struct { 
        bool containingFrameInCoordinateSpace; 
        bool preferredContainerView; 
        bool preferredAnimation; 
        bool shouldPassthroughPointInCoordinateSpace; 
        bool wasTapped; 
        bool wasDiscarded; 
        bool didAppear; 
        bool didDisappear; 
    }  _delegateRespondsTo;
    UIImage * _image;
    PXImageRequester * _imageRequester;
    AVAsset * _loopingVideoAsset;
    AVVideoComposition * _loopingVideoComposition;
    NSString * _message;
    struct PXContextualNotificationVisualState { 
        bool onscreen; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } containingFrame; 
        double verticalOffset; 
        double alpha; 
    }  _nextState;
    double  _panInitialVerticalOffset;
    NSValue * _releaseVelocity;
    long long  _style;
    NSString * _title;
    UIImage * _titleIcon;
    id  _userInfo;
    PXContextualNotificationView * _view;
    UIWindow * _window;
}

@property (nonatomic) long long animationCount;
@property (nonatomic) long long appearanceState;
@property (nonatomic) struct PXContextualNotificationVisualState { bool x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; double x3; double x4; } appliedState;
@property (nonatomic) PXContextualNotificationCenter *contextualNotificationCenter;
@property (nonatomic) <PXContextualNotificationDelegate> *delegate;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic, retain) PXImageRequester *imageRequester;
@property (nonatomic, copy) AVAsset *loopingVideoAsset;
@property (nonatomic, copy) AVVideoComposition *loopingVideoComposition;
@property (nonatomic, copy) NSString *message;
@property (nonatomic) struct PXContextualNotificationVisualState { bool x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; double x3; double x4; } nextState;
@property (nonatomic) double panInitialVerticalOffset;
@property (nonatomic, readonly) long long preferredAnimation;
@property (nonatomic, readonly) UIView *preferredContainerView;
@property (nonatomic, retain) NSValue *releaseVelocity;
@property (nonatomic) long long style;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, retain) UIImage *titleIcon;
@property (nonatomic, retain) id userInfo;
@property (nonatomic, retain) PXContextualNotificationView *view;
@property (nonatomic) UIWindow *window;

- (void).cxx_destruct;
- (void)_invalidate;
- (long long)animationCount;
- (long long)appearanceState;
- (struct PXContextualNotificationVisualState { bool x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; double x3; double x4; })appliedState;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })containingFrameInContainerView:(id)arg1;
- (id)contextualNotificationCenter;
- (id)delegate;
- (void)dismiss;
- (void)handleDiscard;
- (void)handleTap:(id)arg1;
- (id)image;
- (id)imageRequester;
- (id)init;
- (void)invalidateLayout;
- (id)loopingVideoAsset;
- (id)loopingVideoComposition;
- (id)message;
- (struct PXContextualNotificationVisualState { bool x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; double x3; double x4; })nextState;
- (double)panInitialVerticalOffset;
- (long long)preferredAnimation;
- (id)preferredContainerView;
- (void)present;
- (id)releaseVelocity;
- (void)setAnimationCount:(long long)arg1;
- (void)setAppearanceState:(long long)arg1;
- (void)setAppliedState:(struct PXContextualNotificationVisualState { bool x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; double x3; double x4; })arg1;
- (void)setContextualNotificationCenter:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setImageRequester:(id)arg1;
- (void)setLoopingVideoAsset:(id)arg1;
- (void)setLoopingVideoComposition:(id)arg1;
- (void)setMessage:(id)arg1;
- (void)setNextState:(struct PXContextualNotificationVisualState { bool x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; double x3; double x4; })arg1;
- (void)setPanInitialVerticalOffset:(double)arg1;
- (void)setReleaseVelocity:(id)arg1;
- (void)setStyle:(long long)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleIcon:(id)arg1;
- (void)setUserInfo:(id)arg1;
- (void)setView:(id)arg1;
- (void)setWindow:(id)arg1;
- (bool)shouldPassthroughPoint:(struct CGPoint { double x1; double x2; })arg1 inCoordinateSpace:(id)arg2;
- (long long)style;
- (id)title;
- (id)titleIcon;
- (id)userInfo;
- (id)view;
- (id)window;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
