<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXTilingControllerCompositionEngine.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXTilingControllerCompositionEngine.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXTilingControllerCompositionEngine : NSObject <PXTilingControllerCompositionInput, PXTilingControllerCompositionObserver, PXTilingControllerCompositionOutput, PXTilingControllerObserver, PXTilingScrollControllerUpdateDelegate> {
    PXTilingControllerComposition * __composition;
    NSHashTable * __compositions;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  __contentInset;
    PXTilingControllerDefaultComposition * __defaultComposition;
    NSMutableArray * __invalidationContexts;
    struct CGSize { 
        double width; 
        double height; 
    }  __referenceSize;
    <PXTilingScrollController> * __scrollController;
    NSHashTable * __tilingControllers;
    NSMutableArray * __tilingControllersRequestingFocus;
    bool  _isPerformingChanges;
    bool  _isUpdatingComposition;
    struct { 
        bool scrollControllerMetrics; 
        bool composition; 
    }  _needsUpdateFlags;
}

@property (setter=_setComposition:, nonatomic, retain) PXTilingControllerComposition *_composition;
@property (nonatomic, readonly) NSHashTable *_compositions;
@property (setter=_setContentInset:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _contentInset;
@property (nonatomic, readonly) PXTilingControllerDefaultComposition *_defaultComposition;
@property (nonatomic, readonly) NSMutableArray *_invalidationContexts;
@property (setter=_setReferenceSize:, nonatomic) struct CGSize { double x1; double x2; } _referenceSize;
@property (nonatomic, readonly) <PXTilingScrollController> *_scrollController;
@property (nonatomic, readonly) NSHashTable *_tilingControllers;
@property (nonatomic, readonly) NSMutableArray *_tilingControllersRequestingFocus;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentInset;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSArray *invalidationContexts;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } referenceSize;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSArray *tilingControllersRequestingFocus;

+ (id)compositionEngineForScrollController:(id)arg1 createIfNeeded:(bool)arg2;

- (void).cxx_destruct;
- (void)_beginUpdate;
- (id)_composition;
- (id)_compositions;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_contentInset;
- (id)_defaultComposition;
- (void)_endUpdate;
- (id)_initWithScrollController:(id)arg1;
- (void)_invalidateComposition;
- (void)_invalidateScrollControllerMetrics;
- (id)_invalidationContexts;
- (bool)_needsUpdate;
- (void)_performChanges:(id /* block */)arg1;
- (struct CGSize { double x1; double x2; })_referenceSize;
- (id)_scrollController;
- (void)_setComposition:(id)arg1;
- (void)_setContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setNeedsUpdate;
- (void)_setReferenceSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_tilingControllers;
- (id)_tilingControllersRequestingFocus;
- (bool)_updateCompositionIfNeeded;
- (void)_updateScrollControllerMetricsIfNeeded;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentBoundsForTilingController:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInset;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromTilingController:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromTilingController:(id)arg2;
- (id)convertScrollInfo:(id)arg1 fromTilingController:(id)arg2;
- (id)init;
- (id)invalidationContexts;
- (struct CGPoint { double x1; double x2; })originForTilingController:(id)arg1;
- (struct CGPoint { double x1; double x2; })preferredOriginForTilingController:(id)arg1;
- (struct CGSize { double x1; double x2; })referenceSize;
- (void)registerComposition:(id)arg1;
- (void)registerTilingController:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })scrollBoundsForTilingController:(id)arg1;
- (id)scrollInfoForTilingController:(id)arg1;
- (void)setContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 scrollBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 scrollInfo:(id)arg3;
- (void)setOrigin:(struct CGPoint { double x1; double x2; })arg1 forTilingController:(id)arg2;
- (void)setReferenceSize:(struct CGSize { double x1; double x2; })arg1 contentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2 forTilingController:(id)arg3;
- (void)setTilingControllerCompositionNeedsUpdate:(id)arg1 withContext:(id)arg2;
- (void)setTilingControllerNeedsUpdate:(id)arg1;
- (void)tilingController:(id)arg1 invalidatedWithContext:(long long)arg2;
- (id)tilingControllersRequestingFocus;
- (void)tilingScrollControllerDidUpdate:(id)arg1;
- (void)unregisterComposition:(id)arg1;
- (void)unregisterTilingController:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
