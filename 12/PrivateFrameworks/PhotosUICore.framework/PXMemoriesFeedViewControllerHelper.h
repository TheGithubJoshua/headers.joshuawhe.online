<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXMemoriesFeedViewControllerHelper.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXMemoriesFeedViewControllerHelper.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXMemoriesFeedViewControllerHelper : PXObservable <PXMemoriesFeedScrollFilterDelegate, PXMemoriesFeedTilingLayoutDelegate, PXSectionedDataSourceManagerObserver, PXSectionedLayoutEngineDelegate, PXTilingControllerScrollDelegate, PXTilingControllerTransitionDelegate> {
    NSDate * __lastUserMemoryGenerationRequestDate;
    PXSectionedLayoutEngine * __layoutEngine;
    PXSectionedObjectReference * __memoryReferenceToScrollToVisible;
    id /* block */  __newMemoriesRequestCompletion;
    long long  __refreshRetryCount;
    bool  __requestingNewMemories;
    PXMemoriesFeedScrollFilter * __scrollFilter;
    PXMemoriesSpec * __spec;
    PXMemoriesFeedTransitionAnimationCoordinator * __transitionAnimationCoordinator;
    PXSectionedObjectReference * _activatedMemoryReference;
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchorMemoryOrigin;
    PXSectionedObjectReference * _anchorMemoryReference;
    PXMemoriesFeedDataSourceManager * _dataSourceManager;
    <PXMemoriesFeedViewControllerHelperDelegate> * _delegate;
    struct { 
        bool feedIsVisible; 
        bool reloadedTileKindsOnObjectChanged; 
        bool configureMetrics; 
    }  _delegateRespondsTo;
    bool  _hasAppeared;
    bool  _hasKickedOffBatchGeneration;
    PXSectionedObjectReference * _highlightedMemoryReference;
    PXSectionedObjectReference * _lastActionPresentationMemoryReference;
    struct { 
        bool layoutEngine; 
    }  _needsToUpdate;
    PHPhotoLibrary * _photoLibrary;
    id  _refreshResetNotification;
    NSString * _scrollTargetMemoryUUID;
    PXScrollViewController * _scrollViewController;
    PXSectionedSelectionManager * _selectionManager;
    PXMemoriesSpecManager * _specManager;
    PXTilingController * _tilingController;
    PXExtendedTraitCollection * _traitCollection;
}

@property (setter=_setLastUserMemoryGenerationRequestDate:, nonatomic, retain) NSDate *_lastUserMemoryGenerationRequestDate;
@property (nonatomic, readonly) PXSectionedLayoutEngine *_layoutEngine;
@property (setter=_setMemoryReferenceToScrollToVisible:, nonatomic, retain) PXSectionedObjectReference *_memoryReferenceToScrollToVisible;
@property (setter=_setNewMemoriesRequestCompletion:, nonatomic, copy) id /* block */ _newMemoriesRequestCompletion;
@property (setter=_setRefreshRetryCount:, nonatomic) long long _refreshRetryCount;
@property (getter=_isRequestingNewMemories, setter=_setRequestingNewMemories:, nonatomic) bool _requestingNewMemories;
@property (nonatomic, readonly) PXMemoriesFeedScrollFilter *_scrollFilter;
@property (setter=_setSpec:, nonatomic, retain) PXMemoriesSpec *_spec;
@property (nonatomic, readonly) PXMemoriesFeedTransitionAnimationCoordinator *_transitionAnimationCoordinator;
@property (nonatomic, retain) PXSectionedObjectReference *activatedMemoryReference;
@property (setter=_setAnchorMemoryOrigin:, nonatomic) struct CGPoint { double x1; double x2; } anchorMemoryOrigin;
@property (setter=_setAnchorMemoryReference:, nonatomic, retain) PXSectionedObjectReference *anchorMemoryReference;
@property (nonatomic, readonly) PXMemoriesFeedTilingLayout *currentLayout;
@property (nonatomic, readonly) PXMemoriesFeedDataSourceManager *dataSourceManager;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXMemoriesFeedViewControllerHelperDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PXSectionedObjectReference *highlightedMemoryReference;
@property (nonatomic, retain) PXSectionedObjectReference *lastActionPresentationMemoryReference;
@property (nonatomic, readonly) PHPhotoLibrary *photoLibrary;
@property (setter=setScrollTargetMemoryUUID:, nonatomic, retain) NSString *scrollTargetMemoryUUID;
@property (nonatomic, readonly) PXScrollViewController *scrollViewController;
@property (nonatomic, readonly) PXSectionedSelectionManager *selectionManager;
@property (nonatomic, readonly) PXMemoriesSpecManager *specManager;
@property (readonly) Class superclass;
@property (nonatomic, readonly) PXMemoriesFeedTilingLayout *targetLayout;
@property (nonatomic, readonly) PXTilingController *tilingController;
@property (nonatomic, readonly) PXExtendedTraitCollection *traitCollection;

- (void).cxx_destruct;
- (void)_configureLayout:(id)arg1;
- (void)_configureMetrics:(id)arg1;
- (void)_enumerateInsertedItemsInChangeDetails:(id)arg1 withDataSource:(id)arg2 usingBlock:(id /* block */)arg3;
- (void)_generateMemoriesForReason:(unsigned long long)arg1;
- (void)_generateMemoriesForReason:(unsigned long long)arg1 contextualMemoriesSettings:(id)arg2;
- (void)_handleChangeFromDataSource:(id)arg1 toDataSource:(id)arg2 withChangeDetails:(id)arg3;
- (void)_handleDataSourceChange;
- (void)_handleFinishedRequestingNewMemoriesWithSuccess:(bool)arg1 reason:(unsigned long long)arg2 error:(id)arg3;
- (void)_handleNewLayoutSnapshot:(id)arg1;
- (void)_handleRefreshCompletionWithResultInformation:(id)arg1 reason:(unsigned long long)arg2 error:(id)arg3;
- (void)_handleTraitCollectionChange:(unsigned long long)arg1;
- (void)_invalidateLayoutEngine;
- (bool)_isRequestingNewMemories;
- (id)_lastUserMemoryGenerationRequestDate;
- (id)_layoutEngine;
- (id)_memoryReferenceInsertedOnChangeToDataSource:(id)arg1 withChangeDetails:(id)arg2;
- (id)_memoryReferenceToScrollToVisible;
- (bool)_needsUpdate;
- (id /* block */)_newMemoriesRequestCompletion;
- (long long)_refreshRetryCount;
- (id)_scrollFilter;
- (void)_scrollToTargetMemoryUUIDWhenReady:(id)arg1;
- (void)_setAnchorMemoryOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setAnchorMemoryReference:(id)arg1;
- (void)_setLastUserMemoryGenerationRequestDate:(id)arg1;
- (void)_setMemoryReferenceToScrollToVisible:(id)arg1;
- (void)_setNewMemoriesRequestCompletion:(id /* block */)arg1;
- (void)_setRefreshRetryCount:(long long)arg1;
- (void)_setRequestingNewMemories:(bool)arg1;
- (void)_setSpec:(id)arg1;
- (id)_spec;
- (void)_startRefreshForReason:(unsigned long long)arg1;
- (id)_transitionAnimationCoordinator;
- (void)_updateHighlightedIndexPathInLayout;
- (void)_updateHighlightedIndexPathInLayout:(id)arg1;
- (void)_updateIfNeeded;
- (void)_updateLayoutEngineIfNeeded;
- (void)_updateSelectedIndexPathsInLayout;
- (void)_updateSelectedIndexPathsInLayout:(id)arg1;
- (id)activatedMemoryReference;
- (struct CGPoint { double x1; double x2; })anchorMemoryOrigin;
- (id)anchorMemoryReference;
- (bool)canRequestNewMemories;
- (bool)canRequestNewMemoriesForReason:(unsigned long long)arg1;
- (id)currentLayout;
- (id)dataSourceManager;
- (id)delegate;
- (void)didChangeTilingControllerLayout;
- (void)feedViewControllerDidAppear:(bool)arg1;
- (void)feedViewControllerDidDisappear;
- (void)feedViewControllerWillLayoutSubviews;
- (id)highlightedMemoryReference;
- (struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })indexPathForMemoryInScrollViewAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })indexPathForMemoryObjectReference:(id)arg1;
- (id)initWithPhotoLibrary:(id)arg1;
- (id)initWithScrollViewController:(id)arg1 photoLibrary:(id)arg2 traitCollection:(id)arg3 memoriesStyle:(unsigned long long)arg4 tilingControllerConfigurationBlock:(id /* block */)arg5;
- (id)initWithScrollViewController:(id)arg1 photoLibrary:(id)arg2 traitCollection:(id)arg3 tilingControllerConfigurationBlock:(id /* block */)arg4;
- (void)invalidateMetrics;
- (id)lastActionPresentationMemoryReference;
- (void)layoutEngine:(id)arg1 willGenerateLayoutWithGenerator:(id)arg2 forSection:(unsigned long long)arg3;
- (void)layoutEngineDidUpdateLayoutSnapshot:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })memoriesFeedTilingLayout:(id)arg1 contentsRectForItemAtIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2 forAspectRatio:(double)arg3;
- (id)memoriesFeedTilingLayout:(id)arg1 titleFontNameForItemAtIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg2;
- (id)memoryInfoAtIndexPath:(struct PXSimpleIndexPath { unsigned long long x1; long long x2; long long x3; long long x4; })arg1;
- (id)memoryInfoForMemoryObjectReference:(id)arg1;
- (id)memoryInfoInScrollViewAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)memoryObjectReferenceInScrollViewAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)mutableChangeObject;
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void*)arg3;
- (id)photoLibrary;
- (void)prepare;
- (void)requestNewMemoriesForReason:(unsigned long long)arg1 withCompletion:(id /* block */)arg2;
- (void)requestNewMemoriesWithCompletion:(id /* block */)arg1;
- (void)saveAnchorMemory;
- (void)scrollFilterShouldRequestAdditionalContent:(id)arg1;
- (void)scrollMemoryReferenceToVisible:(id)arg1 animated:(bool)arg2;
- (id)scrollTargetMemoryUUID;
- (id)scrollViewController;
- (id)sectionedDataSourceManagerInterestingObjectReferences:(id)arg1;
- (id)selectionManager;
- (void)setActivatedMemoryReference:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHighlightedMemoryReference:(id)arg1;
- (void)setLastActionPresentationMemoryReference:(id)arg1;
- (void)setScrollTargetMemoryUUID:(id)arg1;
- (id)specManager;
- (id)targetLayout;
- (id)tilingController;
- (struct CGPoint { double x1; double x2; })tilingController:(id)arg1 initialVisibleOriginForLayout:(id)arg2;
- (void)tilingController:(id)arg1 prepareForChange:(id)arg2;
- (struct CGPoint { double x1; double x2; })tilingController:(id)arg1 targetVisibleOriginForLayout:(id)arg2 proposedVisibleOrigin:(struct CGPoint { double x1; double x2; })arg3;
- (id)tilingController:(id)arg1 tileIdentifierConverterForChange:(id)arg2;
- (id)tilingController:(id)arg1 transitionAnimationCoordinatorForChange:(id)arg2;
- (id)traitCollection;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
