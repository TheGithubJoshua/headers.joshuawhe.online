<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXMagazineLayoutTileMaker.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXMagazineLayoutTileMaker.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXMagazineLayoutTileMaker : NSObject {
    NSMutableArray * _allFrames;
    PXMagazineRectArray * _cachedTileRects;
    struct CGSize { 
        double width; 
        double height; 
    }  _defaultTileSize;
    double  _height;
    double  _interTileSpacing;
    double  _lastTileWidthPadding;
    bool  _layoutFromRightToLeft;
    double  _maxFrameAspectRatio;
    unsigned long long  _maxTilesInFrame;
    double  _minFrameAspectRatio;
    double * _normalizedWeights;
    unsigned long long  _numberOfColumns;
    struct CGSize { 
        double width; 
        double height; 
    }  _referenceSize;
    NSMutableArray * _sharedTempArray;
    bool  _startLastPadding;
    double  _tileAspectRatio;
    PXMagazineGrid * _tileGrid;
}

@property (nonatomic, readonly) struct CGSize { double x1; double x2; } defaultTileSize;
@property (nonatomic, readonly) double height;
@property (nonatomic) double interTileSpacing;
@property (nonatomic) bool layoutFromRightToLeft;
@property (nonatomic) unsigned long long maxTilesInFrame;
@property (nonatomic, readonly) unsigned long long numberOfColumns;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } referenceSize;
@property (nonatomic, readonly) double tileAspectRatio;

+ (void)printInputs:(id)arg1;
+ (void)printLayout:(id)arg1 numOfColumns:(unsigned long long)arg2;
+ (void)printPossibleFrames:(unsigned long long)arg1 cellAspectRatio:(double)arg2 maxAspectRatio:(double)arg3 minAspectRato:(double)arg4;

- (void).cxx_destruct;
- (double)_aspectRatioOfInput:(id)arg1;
- (long long)_availableFrames:(id*)arg1 maxReturnCount:(unsigned long long)arg2 forAspectRatio:(double)arg3 weight:(double)arg4 maxWidth:(unsigned long long)arg5;
- (void)_findNextChunkWithInputs:(id)arg1 fromIndex:(unsigned long long)arg2 outArray:(id)arg3;
- (bool)_findNextTileWithInputs:(id)arg1 atIndex:(unsigned long long)arg2 baseIndex:(unsigned long long)arg3 coordinator:(id)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameFromTileFrame:(struct PXMagazineRect { struct PXMagazineOrigin { long long x_1_1_1; long long x_1_1_2; } x1; struct PXMagazineSize { long long x_2_1_1; long long x_2_1_2; } x2; })arg1;
- (id)_generateLastTilesWithInputs:(id)arg1 baseIndex:(unsigned long long)arg2 returnFallback:(bool)arg3;
- (id)_generateTilesWithInputs:(id)arg1;
- (bool)_generateTilesWithInputs:(id)arg1 atIndex:(unsigned long long)arg2 forMaxY:(unsigned long long)arg3 reserveNumberForPadding:(unsigned long long)arg4 outArray:(id)arg5;
- (id)_getAllFramesInOrder;
- (void)_getFrames:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 magazineRects:(struct PXMagazineRect { struct PXMagazineOrigin { long long x_1_1_1; long long x_1_1_2; } x1; struct PXMagazineSize { long long x_2_1_1; long long x_2_1_2; } x2; }*)arg2 withInputs:(id)arg3;
- (double*)_normalizeWeightsByInputs:(id)arg1;
- (unsigned long long)_numberOfInputsForLastPadding;
- (void)_resetWithNumberOfAssets:(unsigned long long)arg1;
- (void)_setRandomSeedWithInputs:(id)arg1;
- (void)_updateDimensionInfos;
- (bool)checkAndPrintResults:(bool)arg1;
- (void)dealloc;
- (struct CGSize { double x1; double x2; })defaultTileSize;
- (id)description;
- (void)getFrames:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 withInputs:(id)arg2;
- (unsigned long long)getMagazineRects:(struct PXMagazineRect { struct PXMagazineOrigin { long long x_1_1_1; long long x_1_1_2; } x1; struct PXMagazineSize { long long x_2_1_1; long long x_2_1_2; } x2; }*)arg1 withInputs:(id)arg2;
- (double)height;
- (id)initWithReferenceSize:(struct CGSize { double x1; double x2; })arg1 numberOfColumns:(unsigned long long)arg2;
- (double)interTileSpacing;
- (bool)layoutFromRightToLeft;
- (unsigned long long)maxTilesInFrame;
- (unsigned long long)numberOfColumns;
- (struct CGSize { double x1; double x2; })referenceSize;
- (void)setInterTileSpacing:(double)arg1;
- (void)setLayoutFromRightToLeft:(bool)arg1;
- (void)setMaxTilesInFrame:(unsigned long long)arg1;
- (double)tileAspectRatio;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
