<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXAssetVariationRenderProvider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXAssetVariationRenderProvider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXAssetVariationRenderProvider : PXObservable <PXPhotoLibraryUIChangeObserver> {
    NSOperation * __analysisOperation;
    NSDictionary * __analysisResult;
    NSDate * __beginRenderingDate;
    PLPhotoEditModel * __editModel;
    NSNumber * __editModelDuration;
    UIImage * __existingImage;
    AVAsset * __existingVideoAsset;
    NSURL * __imageURL;
    NSNumber * __imageURLDuration;
    int  __imageURLRequestID;
    int  __placeholderImageRequestID;
    NSNumber * __recipeGenerationDuration;
    NSMutableDictionary * __renderingDurationByVariationType;
    NSMutableDictionary * __renderingOperationsByVariationType;
    NSURL * __videoURL;
    NSNumber * __videoURLDuration;
    int  __videoURLRequestID;
    PHAsset * _asset;
    NSString * _assetLocalIdentifier;
    NSIndexSet * _desiredVariationTypes;
    NSError * _error;
    bool  _hasBegunRendering;
    NSProgress * _imageURLProgress;
    NSProgress * _initialLoadingProgress;
    UIImage * _placeholderImage;
    NSMutableDictionary * _progressesByVariationType;
    NSProgress * _recipeGenerationProgress;
    bool  _renderAllResources;
    NSMutableDictionary * _resultsByVariationType;
    long long  _status;
    NSString * _statusDescription;
    struct CGSize { 
        double width; 
        double height; 
    }  _targetSize;
    NSNumber * _totalRenderingDuration;
    PXUpdater * _updater;
    NSProgress * _videoURLProgress;
    NSObject<OS_dispatch_queue> * _workQueue;
}

@property (setter=_setAnalysisOperation:, nonatomic, retain) NSOperation *_analysisOperation;
@property (setter=_setAnalysisResult:, nonatomic, copy) NSDictionary *_analysisResult;
@property (setter=_setBeginRenderingDate:, nonatomic, retain) NSDate *_beginRenderingDate;
@property (setter=_setEditModel:, nonatomic, copy) PLPhotoEditModel *_editModel;
@property (setter=_setEditModelDuration:, nonatomic, retain) NSNumber *_editModelDuration;
@property (setter=_setExistingImage:, nonatomic, retain) UIImage *_existingImage;
@property (setter=_setExistingVideoAsset:, nonatomic, copy) AVAsset *_existingVideoAsset;
@property (nonatomic, readonly) bool _hasAllResults;
@property (setter=_setImageURL:, nonatomic, retain) NSURL *_imageURL;
@property (setter=_setImageURLDuration:, nonatomic, retain) NSNumber *_imageURLDuration;
@property (setter=_setImageURLRequestID:, nonatomic) int _imageURLRequestID;
@property (setter=_setPlaceholderImageRequestID:, nonatomic) int _placeholderImageRequestID;
@property (setter=_setRecipeGenerationDuration:, nonatomic, retain) NSNumber *_recipeGenerationDuration;
@property (nonatomic, readonly) NSMutableDictionary *_renderingDurationByVariationType;
@property (nonatomic, readonly) NSMutableDictionary *_renderingOperationsByVariationType;
@property (setter=_setVideoURL:, nonatomic, retain) NSURL *_videoURL;
@property (setter=_setVideoURLDuration:, nonatomic, retain) NSNumber *_videoURLDuration;
@property (setter=_setVideoURLRequestID:, nonatomic) int _videoURLRequestID;
@property (setter=_setAsset:, nonatomic, retain) PHAsset *asset;
@property (nonatomic, readonly) NSString *assetLocalIdentifier;
@property (nonatomic, readonly) PLPhotoEditModel *baseEditModel;
@property (nonatomic, readonly) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly, copy) NSIndexSet *desiredVariationTypes;
@property (setter=_setError:, nonatomic, retain) NSError *error;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSProgress *initialLoadingProgress;
@property (setter=_setPlaceholderImage:, nonatomic, retain) UIImage *placeholderImage;
@property (nonatomic) bool renderAllResources;
@property (setter=_setStatus:, nonatomic) long long status;
@property (setter=_setStatusDescription:, nonatomic, copy) NSString *statusDescription;
@property (readonly) Class superclass;
@property (nonatomic) struct CGSize { double x1; double x2; } targetSize;
@property (nonatomic, retain) NSNumber *totalRenderingDuration;

+ (id)_imageURLCache;
+ (void)_performSimulatedWorkWithProgress:(id)arg1;
+ (id)_videoURLCache;
+ (id)placeholderFilters;
+ (id)sharedOperationQueue;
+ (id)supportedVariationTypes;

- (void).cxx_destruct;
- (id)_analysisOperation;
- (id)_analysisResult;
- (id)_beginRenderingDate;
- (id)_editModel;
- (id)_editModelDuration;
- (id)_existingImage;
- (id)_existingVideoAsset;
- (void)_handleAdjustmentDataInfo:(id)arg1 startTime:(id)arg2;
- (void)_handleAnalysisOperationCompleted:(id)arg1;
- (void)_handleCachedAnalysisResult:(id)arg1;
- (void)_handleExistingVariationVideoResult:(id)arg1 info:(id)arg2;
- (void)_handleImageURLResult:(id)arg1 info:(id)arg2 startTime:(id)arg3;
- (void)_handlePlaceholderImageResult:(id)arg1 info:(id)arg2;
- (void)_handleRenderingOperationCompleted:(id)arg1;
- (void)_handleRenderingOperationStarted:(id)arg1;
- (void)_handleVideoURLResult:(id)arg1 info:(id)arg2 startTime:(id)arg3;
- (bool)_hasAllResults;
- (id)_imageURL;
- (id)_imageURLDuration;
- (int)_imageURLRequestID;
- (void)_invalidateAnalysisResult;
- (void)_invalidateCachedAnalysisResult;
- (void)_invalidateEditModel;
- (void)_invalidateExistingVariationResult;
- (void)_invalidateExistingVideoAsset;
- (void)_invalidateImageURL;
- (void)_invalidatePlaceholderImage;
- (void)_invalidateRenders;
- (void)_invalidateStatus;
- (void)_invalidateVideoURL;
- (int)_placeholderImageRequestID;
- (id)_recipeGenerationDuration;
- (void)_removeAllResults;
- (id)_renderingDurationByVariationType;
- (id)_renderingOperationsByVariationType;
- (void)_setAnalysisOperation:(id)arg1;
- (void)_setAnalysisResult:(id)arg1;
- (void)_setAsset:(id)arg1;
- (void)_setBeginRenderingDate:(id)arg1;
- (void)_setEditModel:(id)arg1;
- (void)_setEditModelDuration:(id)arg1;
- (void)_setError:(id)arg1;
- (void)_setExistingImage:(id)arg1;
- (void)_setExistingVideoAsset:(id)arg1;
- (void)_setImageURL:(id)arg1;
- (void)_setImageURLDuration:(id)arg1;
- (void)_setImageURLRequestID:(int)arg1;
- (void)_setPlaceholderImage:(id)arg1;
- (void)_setPlaceholderImageRequestID:(int)arg1;
- (void)_setProgress:(id)arg1 forVariationType:(long long)arg2;
- (void)_setRecipeGenerationDuration:(id)arg1;
- (void)_setResult:(id)arg1 forVariationType:(long long)arg2;
- (void)_setStatus:(long long)arg1;
- (void)_setStatusDescription:(id)arg1;
- (void)_setVideoURL:(id)arg1;
- (void)_setVideoURLDuration:(id)arg1;
- (void)_setVideoURLRequestID:(int)arg1;
- (void)_updateAnalysisResult;
- (void)_updateCachedAnalysisResult;
- (void)_updateEditModel;
- (void)_updateExistingVariationResult;
- (void)_updateExistingVideoAsset;
- (void)_updateImageURL;
- (void)_updatePlaceholderImage;
- (void)_updateRenders;
- (void)_updateStatus;
- (void)_updateVideoURL;
- (id)_videoURL;
- (id)_videoURLDuration;
- (int)_videoURLRequestID;
- (id)asset;
- (id)assetLocalIdentifier;
- (id)baseEditModel;
- (void)beginRendering;
- (void)cancelRendering;
- (void)dealloc;
- (id)debugDescription;
- (id)desiredVariationTypes;
- (void)didPerformChanges;
- (id)error;
- (id)init;
- (id)initWithAssetLocalIdentifier:(id)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2 desiredVariationTypes:(id)arg3;
- (id)initialLoadingProgress;
- (id)mutableChangeObject;
- (void)photoLibraryDidChangeOnMainQueue:(id)arg1;
- (id)placeholderImage;
- (id)progressForVariationType:(long long)arg1;
- (bool)renderAllResources;
- (id)renderResultForVariationType:(long long)arg1;
- (void)setRenderAllResources:(bool)arg1;
- (void)setTargetSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTotalRenderingDuration:(id)arg1;
- (long long)status;
- (id)statusDescription;
- (struct CGSize { double x1; double x2; })targetSize;
- (id)totalRenderingDuration;
- (void)unloadResults;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
