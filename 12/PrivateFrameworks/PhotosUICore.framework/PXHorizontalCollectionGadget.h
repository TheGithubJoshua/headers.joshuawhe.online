<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXHorizontalCollectionGadget.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXHorizontalCollectionGadget.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXHorizontalCollectionGadget : PXGadgetViewController <PXGadget, PXMutableHorizontalCollectionGadget> {
    id /* block */  _accessoryButtonAction;
    struct CGSize { 
        double width; 
        double height; 
    }  _cachedMaxHeightForColumnWidth;
    const struct __CFString { } * _collectionAccessoryButtonEventTrackerKey;
    NSString * _collectionAccessoryButtonTitle;
    unsigned long long  _collectionAccessoryButtonType;
    double  _collectionHeight;
    NSString * _collectionTitle;
    NSDictionary * _columnSpans;
    long long  _currentColumnSpan;
    long long  _defaultColumnSpan;
    <PXGadgetDelegate> * _delegate;
    PXGadgetSpec * _gadgetSpec;
    unsigned long long  _gadgetType;
    unsigned long long  _headerStyle;
    <PXHorizontalCollectionGadgetDelegate> * _horizontalGadgetDelegate;
    bool  _isPerformingChanges;
    PXGadgetOrbContext * _previewOrbContext;
    long long  _priority;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _visibleContentRect;
    bool  _visibleGadgetsLoaded;
}

@property (nonatomic, copy) id /* block */ accessoryButtonAction;
@property (nonatomic, readonly) const struct __CFString { }*accessoryButtonEventTrackerKey;
@property (nonatomic, readonly) NSString *accessoryButtonTitle;
@property (nonatomic, readonly) unsigned long long accessoryButtonType;
@property (nonatomic) struct CGSize { double x1; double x2; } cachedMaxHeightForColumnWidth;
@property (nonatomic, readonly) const struct __CFString { }*collectionAccessoryButtonEventTrackerKey;
@property (nonatomic, readonly, copy) NSString *collectionAccessoryButtonTitle;
@property (nonatomic, readonly) unsigned long long collectionAccessoryButtonType;
@property (nonatomic, readonly) double collectionHeight;
@property (nonatomic, readonly, copy) NSString *collectionTitle;
@property (nonatomic, copy) NSDictionary *columnSpans;
@property (nonatomic) long long currentColumnSpan;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long defaultColumnSpan;
@property (nonatomic) <PXGadgetDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) PXGadgetSpec *gadgetSpec;
@property (nonatomic) unsigned long long gadgetType;
@property (nonatomic, readonly) bool hasContentToDisplay;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long headerStyle;
@property (nonatomic) <PXHorizontalCollectionGadgetDelegate> *horizontalGadgetDelegate;
@property (nonatomic) bool isPerformingChanges;
@property (nonatomic, readonly) NSString *localizedTitle;
@property (nonatomic, retain) PXGadgetOrbContext *previewOrbContext;
@property (nonatomic) long long priority;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsAssetsDrop;
@property (nonatomic, readonly) bool supportsHighlighting;
@property (nonatomic, readonly) bool supportsSelection;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } visibleContentRect;
@property (nonatomic) bool visibleGadgetsLoaded;

- (void).cxx_destruct;
- (long long)_columnSpanForTraitCollection:(id)arg1;
- (struct CGSize { double x1; double x2; })_ensureCachedHeightForColumnWidth:(double)arg1;
- (void)_updateCollectionViewPaging;
- (void)_updateColumnSettings;
- (id /* block */)accessoryButtonAction;
- (const struct __CFString { }*)accessoryButtonEventTrackerKey;
- (id)accessoryButtonTitle;
- (unsigned long long)accessoryButtonType;
- (long long)anchorPosition;
- (struct CGSize { double x1; double x2; })cachedMaxHeightForColumnWidth;
- (const struct __CFString { }*)collectionAccessoryButtonEventTrackerKey;
- (id)collectionAccessoryButtonTitle;
- (unsigned long long)collectionAccessoryButtonType;
- (double)collectionHeight;
- (id)collectionTitle;
- (id)collectionView:(id)arg1 cellForItemAtIndexPath:(id)arg2;
- (id)columnSpans;
- (void)commitPreviewViewController:(id)arg1;
- (struct NSObject { Class x1; }*)contentViewController;
- (void)contentViewDidDisappear;
- (void)contentViewWillAppear;
- (long long)currentColumnSpan;
- (id)debugURLsForDiagnostics;
- (long long)defaultColumnSpan;
- (id)delegate;
- (void)didDismissPreviewViewController:(id)arg1 committing:(bool)arg2;
- (void)extendedTraitCollectionDidChange:(unsigned long long)arg1;
- (void)gadget:(id)arg1 didChange:(unsigned long long)arg2;
- (bool)gadget:(id)arg1 transitionToViewController:(struct NSObject { Class x1; }*)arg2 animated:(bool)arg3 completion:(id /* block */)arg4;
- (void)gadgetControllerFinishedUpdatingDataSourceWithChange:(id)arg1;
- (void)gadgetControllerHasAppeared;
- (void)gadgetControllerHasDisappeared;
- (id)gadgetSpec;
- (unsigned long long)gadgetType;
- (id)gridPresentation;
- (bool)hasContentToDisplay;
- (bool)hasLoadedContentData;
- (unsigned long long)headerStyle;
- (id)horizontalGadgetDelegate;
- (id)initWithDataSourceManager:(id)arg1;
- (id)initWithProviders:(id)arg1;
- (bool)isPerformingChanges;
- (bool)isRootGadgetViewController;
- (void)loadContentData;
- (id)localizedTitle;
- (id)oneUpPresentation;
- (void)performChanges:(id /* block */)arg1;
- (id)previewOrbContext;
- (struct NSObject { Class x1; }*)previewViewControllerAtLocation:(struct CGPoint { double x1; double x2; })arg1 fromSourceView:(struct NSObject { Class x1; }*)arg2 outSourceRect:(out struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (long long)priority;
- (void)setAccessoryButtonAction:(id /* block */)arg1;
- (void)setCachedMaxHeightForColumnWidth:(struct CGSize { double x1; double x2; })arg1;
- (void)setCollectionAccessoryButtonEventTrackerKey:(struct __CFString { }*)arg1;
- (void)setCollectionAccessoryButtonTitle:(id)arg1;
- (void)setCollectionAccessoryButtonType:(unsigned long long)arg1;
- (void)setCollectionHeight:(double)arg1;
- (void)setCollectionTitle:(id)arg1;
- (void)setColumnSpans:(id)arg1;
- (void)setCurrentColumnSpan:(long long)arg1;
- (void)setDefaultColumnSpan:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGadgetSpec:(id)arg1;
- (void)setGadgetType:(unsigned long long)arg1;
- (void)setHeaderStyle:(unsigned long long)arg1;
- (void)setHorizontalGadgetDelegate:(id)arg1;
- (void)setIsPerformingChanges:(bool)arg1;
- (void)setLayout:(id)arg1;
- (void)setPreviewOrbContext:(id)arg1;
- (void)setPriority:(long long)arg1;
- (void)setVisibleContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setVisibleGadgetsLoaded:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)updateIfNeeded;
- (void)userDidSelectAccessoryButton:(id)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleContentRect;
- (bool)visibleGadgetsLoaded;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
