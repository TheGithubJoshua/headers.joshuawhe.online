<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXWidgetComposition.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXWidgetComposition.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXWidgetComposition : PXTilingControllerComposition <PXScrollViewControllerObserver, PXWidgetCompositionElementDelegate, PXWidgetCompositionElementObserver> {
    bool  __didLayoutWidgets;
    NSArray * __elements;
    PXTilingController * __focusedTilingController;
    struct CGPoint { 
        double x; 
        double y; 
    }  __lastContentAdjustmentOffset;
    <PXWidgetCompositionDelegate> * _delegate;
    struct { 
        bool respondsToHasContentAbove; 
        bool respondsToShouldUseEdgeToEdgeLayoutForWidget; 
        bool respondsToLoadingPriorityForWidget; 
        bool respondsToWidgetTransitionToViewControllerWithTransitionType; 
        bool respondsToRequestViewControllerDismissalAnimated; 
        bool respondsToDidUpdateCompositionWithDefaultAnimationOptions; 
    }  _delegateFlags;
    bool  _isPerformingWidgetLoadingChange;
    long long  _minimumWidgetLoadingPriority;
    struct { 
        bool elementsToLoad; 
    }  _needsUpdateFlags;
    PXScrollViewController * _scrollViewController;
    bool  _shouldLoadAllWidgets;
    bool  _shouldLoadVisibleWidgets;
    bool  _shouldUnloadAllWidgets;
    PXWidgetCompositionSpec * _spec;
    NSArray * _widgets;
}

@property (setter=_setDidLayoutWidgets:, nonatomic) bool _didLayoutWidgets;
@property (setter=_setElements:, nonatomic, copy) NSArray *_elements;
@property (setter=_setFocusedTilingController:, nonatomic, retain) PXTilingController *_focusedTilingController;
@property (setter=_setLastContentAdjustmentOffset:, nonatomic) struct CGPoint { double x1; double x2; } _lastContentAdjustmentOffset;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PXWidgetCompositionDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) long long minimumWidgetLoadingPriority;
@property (nonatomic, readonly) PXScrollViewController *scrollViewController;
@property (nonatomic) bool shouldLoadAllWidgets;
@property (nonatomic) bool shouldLoadVisibleWidgets;
@property (nonatomic) bool shouldUnloadAllWidgets;
@property (nonatomic, retain) PXWidgetCompositionSpec *spec;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSArray *widgets;

- (void).cxx_destruct;
- (bool)_didLayoutWidgets;
- (id)_elements;
- (id)_focusedTilingController;
- (void)_invalidateElements;
- (void)_invalidateElementsSpec;
- (void)_invalidateElementsToLoad;
- (void)_invalidateFocusedTilingController;
- (struct CGPoint { double x1; double x2; })_lastContentAdjustmentOffset;
- (long long)_loadingPriorityForElement:(id)arg1;
- (void)_setDidLayoutWidgets:(bool)arg1;
- (void)_setElements:(id)arg1;
- (void)_setFocusedTilingController:(id)arg1;
- (void)_setLastContentAdjustmentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setNeedsUpdateWidgetLoading;
- (bool)_shouldFocusOnTilingController:(id)arg1;
- (bool)_shouldUseEdgeToEdgeLayoutForWidget:(id)arg1;
- (void)_updateElements;
- (void)_updateElementsSpec;
- (void)_updateElementsToLoadIfNeeded;
- (void)_updateFocusedTilingController;
- (void)_updateWidgetLoadingIfNeeded;
- (id)delegate;
- (bool)element:(id)arg1 requestViewControllerDismissalAnimated:(bool)arg2;
- (bool)element:(id)arg1 transitionToViewController:(struct NSObject { Class x1; }*)arg2 withTransitionType:(long long)arg3;
- (void)elementHasLoadedContentDataDidChange:(id)arg1;
- (void)elementNeedsLayout:(id)arg1 preferredAnimationOptions:(id)arg2 originatingTilingController:(id)arg3;
- (struct NSObject { Class x1; }*)elementViewController:(id)arg1;
- (id)footerTilingControllerForWidget:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForWidget:(id)arg1;
- (id)headerTilingControllerForWidget:(id)arg1;
- (id)init;
- (id)initWithScrollViewController:(id)arg1;
- (long long)minimumWidgetLoadingPriority;
- (void)performWidgetLoadingChange:(id /* block */)arg1;
- (id)scrollViewController;
- (void)scrollViewControllerDidScroll:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setMinimumWidgetLoadingPriority:(long long)arg1;
- (void)setShouldLoadAllWidgets:(bool)arg1;
- (void)setShouldLoadVisibleWidgets:(bool)arg1;
- (void)setShouldUnloadAllWidgets:(bool)arg1;
- (void)setSpec:(id)arg1;
- (void)setWidgets:(id)arg1;
- (bool)shouldLoadAllWidgets;
- (bool)shouldLoadVisibleWidgets;
- (bool)shouldUnloadAllWidgets;
- (id)spec;
- (id)tilingControllers;
- (void)updateComposition;
- (id)widgetAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)widgets;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
