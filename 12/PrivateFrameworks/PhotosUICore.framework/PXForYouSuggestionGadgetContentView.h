<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PXForYouSuggestionGadgetContentView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/PhotosUICore.framework/PXForYouSuggestionGadgetContentView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore (3462.11.110)
 */

@interface PXForYouSuggestionGadgetContentView : UIView <PXPhotoLibraryUIChangeObserver, PXSettingsKeyObserver> {
    bool  _assetContentHidden;
    PXDisplayAssetUIView * _assetView;
    unsigned long long  _badgeTypes;
    PXUIAssetBadgeView * _badgeView;
    bool  _blursDegradedContent;
    NSString * _caption;
    bool  _forceAssetContentReload;
    PXGadgetSpec * _gadgetSpec;
    <PXDisplayAsset> * _keyAsset;
    PXUIMediaProvider * _mediaProvider;
    long long  _mode;
    PXRoundedCornerOverlayView * _roundedOverlayView;
    NSString * _subtitle;
    UILabel * _subtitleLabel;
    <PXDisplaySuggestion> * _suggestion;
    NSString * _title;
    UILabel * _titleLabel;
    struct { 
        unsigned long long needsUpdate; 
        unsigned long long updated; 
        bool isPerformingUpdate; 
    }  _updateFlags;
}

@property (nonatomic) bool assetContentHidden;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } assetContentsRect;
@property (nonatomic, retain) PXDisplayAssetUIView *assetView;
@property (nonatomic) unsigned long long badgeTypes;
@property (nonatomic, retain) PXUIAssetBadgeView *badgeView;
@property (nonatomic) bool blursDegradedContent;
@property (nonatomic, copy) NSString *caption;
@property (nonatomic, readonly) UIImage *currentAssetImage;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSError *error;
@property (nonatomic, retain) PXGadgetSpec *gadgetSpec;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isDisplayingFullQualityContent;
@property (nonatomic, retain) <PXDisplayAsset> *keyAsset;
@property (nonatomic, retain) PXUIMediaProvider *mediaProvider;
@property (nonatomic) long long mode;
@property (nonatomic, retain) PXRoundedCornerOverlayView *roundedOverlayView;
@property (nonatomic, copy) NSString *subtitle;
@property (nonatomic, readonly) UILabel *subtitleLabel;
@property (nonatomic, retain) <PXDisplaySuggestion> *suggestion;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, readonly) UILabel *titleLabel;

+ (id)placeholderFilters;
+ (void)preloadResources;
+ (double)scaledSubtitleBaselineDistance;
+ (double)scaledSuggestionBaselineDistance;
+ (double)scaledTitleBaselineDistance;
+ (double)scaledTitleWithSuggestionBaselineDistance;
+ (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1 withSuggestion:(id)arg2 title:(id)arg3 subtitle:(id)arg4;
+ (struct UIFont { Class x1; }*)suggestionLabelFont;
+ (struct UIFont { Class x1; }*)titleLabelFont;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_assetFrameInBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })_calculateLayoutWithInputSize:(struct CGSize { double x1; double x2; })arg1 apply:(bool)arg2;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (void)_handleChangedAsset:(id)arg1;
- (void)_updateAssetView;
- (void)_updateAssetViewPlaceholderFilters;
- (void)_updateBadgeContents;
- (void)_updateBadgeViews;
- (void)_updateIfNeeded;
- (void)_updateRoundedCornerOverlayView;
- (void)_updateTitleFont;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })assetContentBoundsInCoordinateSpace:(id)arg1;
- (bool)assetContentHidden;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })assetContentsRect;
- (id)assetView;
- (unsigned long long)badgeTypes;
- (id)badgeView;
- (bool)blursDegradedContent;
- (id)caption;
- (id)currentAssetImage;
- (void)dealloc;
- (id)error;
- (id)gadgetSpec;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDisplayingFullQualityContent;
- (id)keyAsset;
- (void)layoutSubviews;
- (id)mediaProvider;
- (long long)mode;
- (void)photoLibraryDidChangeOnMainQueue:(id)arg1;
- (id)roundedOverlayView;
- (void)setAssetContentHidden:(bool)arg1;
- (void)setAssetView:(id)arg1;
- (void)setBadgeTypes:(unsigned long long)arg1;
- (void)setBadgeView:(id)arg1;
- (void)setBlursDegradedContent:(bool)arg1;
- (void)setCaption:(id)arg1;
- (void)setGadgetSpec:(id)arg1;
- (void)setKeyAsset:(id)arg1;
- (void)setMediaProvider:(id)arg1;
- (void)setMode:(long long)arg1;
- (void)setRoundedOverlayView:(id)arg1;
- (void)setSubtitle:(id)arg1;
- (void)setSuggestion:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)settings:(id)arg1 changedValueForKey:(id)arg2;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)subtitle;
- (id)subtitleLabel;
- (id)suggestion;
- (id)title;
- (id)titleLabel;
- (void)traitCollectionDidChange:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
