<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOLogMsgState.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOLogMsgState.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOLogMsgState : PBCodable <NSCopying> {
    GEOLogMsgStateApplicationIdentifier * _applicationIdentifier;
    GEOLogMsgStateCarPlay * _carPlay;
    GEOLogMsgStateDeviceBase * _deviceBase;
    GEOLogMsgStateDeviceConnection * _deviceConnection;
    GEOLogMsgStateDeviceIdentifier * _deviceIdentifier;
    GEOLogMsgStateDeviceLocale * _deviceLocale;
    GEOLogMsgStateExperiments * _experiments;
    GEOLogMsgStateExtension * _extension;
    GEOLogMsgStateFlyover * _flyover;
    struct { 
        unsigned int stateType : 1; 
    }  _has;
    GEOLogMsgStateMapRestore * _mapRestore;
    GEOLogMsgStateMapSettings * _mapSettings;
    GEOLogMsgStateMapUI * _mapUi;
    GEOLogMsgStateMapUIShown * _mapUiShown;
    GEOLogMsgStateMapView * _mapView;
    GEOLogMsgStateMapViewLocation * _mapViewLocation;
    GEOLogMsgStateMapsServer * _mapsServer;
    GEOLogMsgStateNavigation * _navigation;
    GEOLogMsgStatePairedDevice * _pairedDevice;
    GEOLogMsgStatePlaceCard * _placeCard;
    GEOLogMsgStatePlaceRequest * _placeRequest;
    GEOLogMsgStateRealtimeTrafficProbe * _realtimeTrafficProbe;
    GEOLogMsgStateReportAnIssue * _reportAnIssue;
    GEOLogMsgStateRoute * _route;
    NSString * _stateOrigin;
    int  _stateType;
    GEOLogMsgStateSuggestions * _suggestions;
    GEOLogMsgStateTileSet * _tileSet;
    GEOLogMsgStateTransit * _transit;
    GEOLogMsgStateUserSession * _userSession;
}

@property (nonatomic, retain) GEOLogMsgStateApplicationIdentifier *applicationIdentifier;
@property (nonatomic, retain) GEOLogMsgStateCarPlay *carPlay;
@property (nonatomic, retain) GEOLogMsgStateDeviceBase *deviceBase;
@property (nonatomic, retain) GEOLogMsgStateDeviceConnection *deviceConnection;
@property (nonatomic, retain) GEOLogMsgStateDeviceIdentifier *deviceIdentifier;
@property (nonatomic, retain) GEOLogMsgStateDeviceLocale *deviceLocale;
@property (nonatomic, retain) GEOLogMsgStateExperiments *experiments;
@property (nonatomic, retain) GEOLogMsgStateExtension *extension;
@property (nonatomic, retain) GEOLogMsgStateFlyover *flyover;
@property (nonatomic, readonly) bool hasApplicationIdentifier;
@property (nonatomic, readonly) bool hasCarPlay;
@property (nonatomic, readonly) bool hasDeviceBase;
@property (nonatomic, readonly) bool hasDeviceConnection;
@property (nonatomic, readonly) bool hasDeviceIdentifier;
@property (nonatomic, readonly) bool hasDeviceLocale;
@property (nonatomic, readonly) bool hasExperiments;
@property (nonatomic, readonly) bool hasExtension;
@property (nonatomic, readonly) bool hasFlyover;
@property (nonatomic, readonly) bool hasMapRestore;
@property (nonatomic, readonly) bool hasMapSettings;
@property (nonatomic, readonly) bool hasMapUi;
@property (nonatomic, readonly) bool hasMapUiShown;
@property (nonatomic, readonly) bool hasMapView;
@property (nonatomic, readonly) bool hasMapViewLocation;
@property (nonatomic, readonly) bool hasMapsServer;
@property (nonatomic, readonly) bool hasNavigation;
@property (nonatomic, readonly) bool hasPairedDevice;
@property (nonatomic, readonly) bool hasPlaceCard;
@property (nonatomic, readonly) bool hasPlaceRequest;
@property (nonatomic, readonly) bool hasRealtimeTrafficProbe;
@property (nonatomic, readonly) bool hasReportAnIssue;
@property (nonatomic, readonly) bool hasRoute;
@property (nonatomic, readonly) bool hasStateOrigin;
@property (nonatomic) bool hasStateType;
@property (nonatomic, readonly) bool hasSuggestions;
@property (nonatomic, readonly) bool hasTileSet;
@property (nonatomic, readonly) bool hasTransit;
@property (nonatomic, readonly) bool hasUserSession;
@property (nonatomic, retain) GEOLogMsgStateMapRestore *mapRestore;
@property (nonatomic, retain) GEOLogMsgStateMapSettings *mapSettings;
@property (nonatomic, retain) GEOLogMsgStateMapUI *mapUi;
@property (nonatomic, retain) GEOLogMsgStateMapUIShown *mapUiShown;
@property (nonatomic, retain) GEOLogMsgStateMapView *mapView;
@property (nonatomic, retain) GEOLogMsgStateMapViewLocation *mapViewLocation;
@property (nonatomic, retain) GEOLogMsgStateMapsServer *mapsServer;
@property (nonatomic, retain) GEOLogMsgStateNavigation *navigation;
@property (nonatomic, retain) GEOLogMsgStatePairedDevice *pairedDevice;
@property (nonatomic, retain) GEOLogMsgStatePlaceCard *placeCard;
@property (nonatomic, retain) GEOLogMsgStatePlaceRequest *placeRequest;
@property (nonatomic, retain) GEOLogMsgStateRealtimeTrafficProbe *realtimeTrafficProbe;
@property (nonatomic, retain) GEOLogMsgStateReportAnIssue *reportAnIssue;
@property (nonatomic, retain) GEOLogMsgStateRoute *route;
@property (nonatomic, retain) NSString *stateOrigin;
@property (nonatomic) int stateType;
@property (nonatomic, retain) GEOLogMsgStateSuggestions *suggestions;
@property (nonatomic, retain) GEOLogMsgStateTileSet *tileSet;
@property (nonatomic, retain) GEOLogMsgStateTransit *transit;
@property (nonatomic, retain) GEOLogMsgStateUserSession *userSession;

- (void).cxx_destruct;
- (int)StringAsStateType:(id)arg1;
- (id)applicationIdentifier;
- (id)carPlay;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)deviceBase;
- (id)deviceConnection;
- (id)deviceIdentifier;
- (id)deviceLocale;
- (id)dictionaryRepresentation;
- (id)experiments;
- (id)extension;
- (id)flyover;
- (bool)hasApplicationIdentifier;
- (bool)hasCarPlay;
- (bool)hasDeviceBase;
- (bool)hasDeviceConnection;
- (bool)hasDeviceIdentifier;
- (bool)hasDeviceLocale;
- (bool)hasExperiments;
- (bool)hasExtension;
- (bool)hasFlyover;
- (bool)hasMapRestore;
- (bool)hasMapSettings;
- (bool)hasMapUi;
- (bool)hasMapUiShown;
- (bool)hasMapView;
- (bool)hasMapViewLocation;
- (bool)hasMapsServer;
- (bool)hasNavigation;
- (bool)hasPairedDevice;
- (bool)hasPlaceCard;
- (bool)hasPlaceRequest;
- (bool)hasRealtimeTrafficProbe;
- (bool)hasReportAnIssue;
- (bool)hasRoute;
- (bool)hasStateOrigin;
- (bool)hasStateType;
- (bool)hasSuggestions;
- (bool)hasTileSet;
- (bool)hasTransit;
- (bool)hasUserSession;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (id)mapRestore;
- (id)mapSettings;
- (id)mapUi;
- (id)mapUiShown;
- (id)mapView;
- (id)mapViewLocation;
- (id)mapsServer;
- (void)mergeFrom:(id)arg1;
- (id)navigation;
- (id)pairedDevice;
- (id)placeCard;
- (id)placeRequest;
- (bool)readFrom:(id)arg1;
- (id)realtimeTrafficProbe;
- (id)reportAnIssue;
- (id)route;
- (void)setApplicationIdentifier:(id)arg1;
- (void)setCarPlay:(id)arg1;
- (void)setDeviceBase:(id)arg1;
- (void)setDeviceConnection:(id)arg1;
- (void)setDeviceIdentifier:(id)arg1;
- (void)setDeviceLocale:(id)arg1;
- (void)setExperiments:(id)arg1;
- (void)setExtension:(id)arg1;
- (void)setFlyover:(id)arg1;
- (void)setHasStateType:(bool)arg1;
- (void)setMapRestore:(id)arg1;
- (void)setMapSettings:(id)arg1;
- (void)setMapUi:(id)arg1;
- (void)setMapUiShown:(id)arg1;
- (void)setMapView:(id)arg1;
- (void)setMapViewLocation:(id)arg1;
- (void)setMapsServer:(id)arg1;
- (void)setNavigation:(id)arg1;
- (void)setPairedDevice:(id)arg1;
- (void)setPlaceCard:(id)arg1;
- (void)setPlaceRequest:(id)arg1;
- (void)setRealtimeTrafficProbe:(id)arg1;
- (void)setReportAnIssue:(id)arg1;
- (void)setRoute:(id)arg1;
- (void)setStateOrigin:(id)arg1;
- (void)setStateType:(int)arg1;
- (void)setSuggestions:(id)arg1;
- (void)setTileSet:(id)arg1;
- (void)setTransit:(id)arg1;
- (void)setUserSession:(id)arg1;
- (id)stateOrigin;
- (int)stateType;
- (id)stateTypeAsString:(int)arg1;
- (id)suggestions;
- (id)tileSet;
- (id)transit;
- (id)userSession;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
