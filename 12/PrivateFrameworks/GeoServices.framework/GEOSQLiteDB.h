<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOSQLiteDB.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOSQLiteDB.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOSQLiteDB : NSObject {
    NSURL * _databaseFileURL;
    struct sqlite3 { } * _db;
    bool  _didEncounterExternalResourceErrorInTransaction;
    union { 
        struct atomic_flag { 
            _Atomic bool _Value; 
        } flag; 
        int dummy; 
    }  _didTearDown;
    NSMutableArray * _externalFilesActiveChannels;
    NSObject<OS_dispatch_group> * _externalFilesGroup;
    NSObject<OS_dispatch_queue> * _externalFilesQueue;
    NSMutableArray * _filesAddedDuringTransaction;
    NSMutableArray * _filesDeletedDuringTransaction;
    bool  _isInTransaction;
    bool  _isTemporaryInMemoryDatabase;
    NSError * _lastError;
    NSObject<OS_os_log> * _log;
    NSDictionary * _pragmas;
    NSMapTable * _preparedStatements;
    NSObject<OS_dispatch_queue> * _queue;
    id /* block */  _setupBlock;
    int  _sqliteFlags;
    NSMapTable * _virtualTables;
}

@property (nonatomic, readonly) NSString *dbFilePath;
@property (nonatomic, readonly) bool isDBReady;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *isolationQueue;
@property (nonatomic, readonly) NSError *lastError;
@property (nonatomic, readonly) NSObject<OS_os_log> *log;
@property (nonatomic, readonly) NSDictionary *pragmas;
@property (nonatomic, readonly) struct sqlite3 { }*sqliteDB;
@property (nonatomic) long long user_version;

+ (id)defaultPragmas;

- (void).cxx_destruct;
- (id)UUIDForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2;
- (bool)_bindParameter:(const char *)arg1 inStatement:(struct sqlite3_stmt { }*)arg2 error:(id*)arg3 withBinder:(id /* block */)arg4;
- (id)_blobForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2 noCopy:(bool)arg3;
- (void)_channelCleanupFailedWithError:(int)arg1;
- (void)_channelEncounteredError:(int)arg1;
- (void)_closeDB;
- (void)_createParentDirectory;
- (void)_debug_lockDB:(id)arg1;
- (void)_debug_unlockDB:(id)arg1;
- (bool)_deleteAllDBFiles;
- (bool)_deleteAllDatabaseFilesIfCorrupt:(int)arg1;
- (void)_deleteAndReopenDatabaseIfCorrupt:(int)arg1;
- (void)_doneWritingToChannel:(id)arg1;
- (void)_execute:(id /* block */)arg1 errorHandler:(id /* block */)arg2;
- (int)_openAndConfigure;
- (bool)_openAndConfigureWithRetryIfCorrupt;
- (int)_openDatabaseFile;
- (int)_setPragmas;
- (bool)_waitForAllTransactionExternalResources;
- (void)_writeTransactionExternalResourceWithData:(id)arg1 toURL:(id)arg2;
- (bool)bindBlobNoCopyParameter:(const char *)arg1 toValue:(id)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (bool)bindBlobParameter:(const char *)arg1 toValue:(id)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (bool)bindInt64Parameter:(const char *)arg1 toValue:(long long)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (bool)bindIntParameter:(const char *)arg1 toValue:(int)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (bool)bindNullParameter:(const char *)arg1 inStatement:(struct sqlite3_stmt { }*)arg2 error:(id*)arg3;
- (bool)bindParameter:(const char *)arg1 toUUID:(id)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (bool)bindRealParameter:(const char *)arg1 toValue:(double)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (bool)bindTextParameter:(const char *)arg1 toValue:(id)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (bool)bindZeroBlobParameter:(const char *)arg1 length:(unsigned long long)arg2 inStatement:(struct sqlite3_stmt { }*)arg3 error:(id*)arg4;
- (id)blobForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2;
- (void)clearStatement:(id)arg1;
- (bool)createTable:(const char *)arg1 withDrop:(const char *)arg2;
- (id)dbFilePath;
- (void)dealloc;
- (bool)deleteAllDBFiles;
- (bool)deleteExternalResourceAtURL:(id)arg1 error:(id*)arg2;
- (id)description;
- (double)doubleForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2;
- (bool)dropAllTables;
- (bool)dropTablesLike:(id)arg1;
- (void)executeAsync:(id /* block */)arg1;
- (void)executeAsync:(id /* block */)arg1 errorHandler:(id /* block */)arg2;
- (bool)executeInTransaction:(id /* block */)arg1;
- (bool)executeStatement:(struct sqlite3_stmt { }*)arg1 error:(id*)arg2;
- (bool)executeStatement:(id)arg1 statementBlock:(id /* block */)arg2;
- (void)executeSync:(id /* block */)arg1;
- (void)executeSync:(id /* block */)arg1 errorHandler:(id /* block */)arg2;
- (id)getAllTables;
- (id)getTablesLike:(id)arg1;
- (id)initWithQueueName:(const char *)arg1 log:(id)arg2 databaseFileURL:(id)arg3 sqliteFlags:(int)arg4 pragmas:(id)arg5 setupBlock:(id /* block */)arg6;
- (id)initWithQueueName:(const char *)arg1 logFacility:(const char *)arg2 dbFilePath:(id)arg3 sqliteFlags:(int)arg4 pragmas:(id)arg5 setupBlock:(id /* block */)arg6;
- (long long)int64ForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2;
- (int)intForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2;
- (bool)isDBReady;
- (id)isolationQueue;
- (id)lastError;
- (long long)lastInsertRowID;
- (id)log;
- (id)noCopyBlobForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2;
- (id)pragmas;
- (bool)prepareStatement:(const char *)arg1 forKey:(id)arg2;
- (bool)registerVirtualTable:(id)arg1;
- (bool)reportSQLiteErrorCode:(int)arg1 method:(id)arg2 error:(id*)arg3;
- (void)setUser_version:(long long)arg1;
- (bool)setup;
- (struct sqlite3 { }*)sqliteDB;
- (struct sqlite3_stmt { }*)statementForKey:(id)arg1;
- (bool)statementForKey:(id)arg1 statementBlock:(id /* block */)arg2;
- (id)stringForColumn:(int)arg1 inStatment:(struct sqlite3_stmt { }*)arg2;
- (void)tearDown;
- (bool)unregisterVirtualTable:(id)arg1;
- (long long)user_version;
- (bool)vacuum;
- (bool)writeBlobData:(id)arg1 toTable:(const char *)arg2 column:(const char *)arg3 rowID:(long long)arg4 error:(id*)arg5;
- (bool)writeExternalResourceWithData:(id)arg1 toURL:(id)arg2 error:(id*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
