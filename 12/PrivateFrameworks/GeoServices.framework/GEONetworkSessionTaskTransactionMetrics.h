<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEONetworkSessionTaskTransactionMetrics.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEONetworkSessionTaskTransactionMetrics.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEONetworkSessionTaskTransactionMetrics : PBCodable <NSCopying> {
    double  _connectEnd;
    double  _connectStart;
    double  _domainLookupEnd;
    double  _domainLookupStart;
    double  _fetchStart;
    struct { 
        unsigned int connectEnd : 1; 
        unsigned int connectStart : 1; 
        unsigned int domainLookupEnd : 1; 
        unsigned int domainLookupStart : 1; 
        unsigned int fetchStart : 1; 
        unsigned int requestEnd : 1; 
        unsigned int requestStart : 1; 
        unsigned int responseEnd : 1; 
        unsigned int responseStart : 1; 
        unsigned int secureConnectEnd : 1; 
        unsigned int secureConnectStart : 1; 
        unsigned int protocolName : 1; 
        unsigned int resourceFetchType : 1; 
        unsigned int proxyConnection : 1; 
        unsigned int reusedConnection : 1; 
    }  _has;
    int  _protocolName;
    bool  _proxyConnection;
    double  _requestEnd;
    double  _requestStart;
    int  _resourceFetchType;
    double  _responseEnd;
    double  _responseStart;
    bool  _reusedConnection;
    double  _secureConnectEnd;
    double  _secureConnectStart;
}

@property (nonatomic) double connectEnd;
@property (nonatomic) double connectStart;
@property (nonatomic) double domainLookupEnd;
@property (nonatomic) double domainLookupStart;
@property (nonatomic) double fetchStart;
@property (nonatomic) bool hasConnectEnd;
@property (nonatomic) bool hasConnectStart;
@property (nonatomic) bool hasDomainLookupEnd;
@property (nonatomic) bool hasDomainLookupStart;
@property (nonatomic) bool hasFetchStart;
@property (nonatomic) bool hasProtocolName;
@property (nonatomic) bool hasProxyConnection;
@property (nonatomic) bool hasRequestEnd;
@property (nonatomic) bool hasRequestStart;
@property (nonatomic) bool hasResourceFetchType;
@property (nonatomic) bool hasResponseEnd;
@property (nonatomic) bool hasResponseStart;
@property (nonatomic) bool hasReusedConnection;
@property (nonatomic) bool hasSecureConnectEnd;
@property (nonatomic) bool hasSecureConnectStart;
@property (nonatomic) int protocolName;
@property (nonatomic) bool proxyConnection;
@property (nonatomic) double requestEnd;
@property (nonatomic) double requestStart;
@property (nonatomic) int resourceFetchType;
@property (nonatomic) double responseEnd;
@property (nonatomic) double responseStart;
@property (nonatomic) bool reusedConnection;
@property (nonatomic) double secureConnectEnd;
@property (nonatomic) double secureConnectStart;

- (int)StringAsProtocolName:(id)arg1;
- (int)StringAsResourceFetchType:(id)arg1;
- (double)connectEnd;
- (double)connectStart;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (double)domainLookupEnd;
- (double)domainLookupStart;
- (double)fetchStart;
- (bool)hasConnectEnd;
- (bool)hasConnectStart;
- (bool)hasDomainLookupEnd;
- (bool)hasDomainLookupStart;
- (bool)hasFetchStart;
- (bool)hasProtocolName;
- (bool)hasProxyConnection;
- (bool)hasRequestEnd;
- (bool)hasRequestStart;
- (bool)hasResourceFetchType;
- (bool)hasResponseEnd;
- (bool)hasResponseStart;
- (bool)hasReusedConnection;
- (bool)hasSecureConnectEnd;
- (bool)hasSecureConnectStart;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (int)protocolName;
- (id)protocolNameAsString:(int)arg1;
- (bool)proxyConnection;
- (bool)readFrom:(id)arg1;
- (double)requestEnd;
- (double)requestStart;
- (int)resourceFetchType;
- (id)resourceFetchTypeAsString:(int)arg1;
- (double)responseEnd;
- (double)responseStart;
- (bool)reusedConnection;
- (double)secureConnectEnd;
- (double)secureConnectStart;
- (void)setConnectEnd:(double)arg1;
- (void)setConnectStart:(double)arg1;
- (void)setDomainLookupEnd:(double)arg1;
- (void)setDomainLookupStart:(double)arg1;
- (void)setFetchStart:(double)arg1;
- (void)setHasConnectEnd:(bool)arg1;
- (void)setHasConnectStart:(bool)arg1;
- (void)setHasDomainLookupEnd:(bool)arg1;
- (void)setHasDomainLookupStart:(bool)arg1;
- (void)setHasFetchStart:(bool)arg1;
- (void)setHasProtocolName:(bool)arg1;
- (void)setHasProxyConnection:(bool)arg1;
- (void)setHasRequestEnd:(bool)arg1;
- (void)setHasRequestStart:(bool)arg1;
- (void)setHasResourceFetchType:(bool)arg1;
- (void)setHasResponseEnd:(bool)arg1;
- (void)setHasResponseStart:(bool)arg1;
- (void)setHasReusedConnection:(bool)arg1;
- (void)setHasSecureConnectEnd:(bool)arg1;
- (void)setHasSecureConnectStart:(bool)arg1;
- (void)setProtocolName:(int)arg1;
- (void)setProxyConnection:(bool)arg1;
- (void)setRequestEnd:(double)arg1;
- (void)setRequestStart:(double)arg1;
- (void)setResourceFetchType:(int)arg1;
- (void)setResponseEnd:(double)arg1;
- (void)setResponseStart:(double)arg1;
- (void)setReusedConnection:(bool)arg1;
- (void)setSecureConnectEnd:(double)arg1;
- (void)setSecureConnectStart:(double)arg1;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
