<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOMapFeatureTransitPoint.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOMapFeatureTransitPoint.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOMapFeatureTransitPoint : NSObject {
    double  _boundingRadius;
    struct { 
        struct { 
            double x; 
            double y; 
        } origin; 
        struct { 
            double width; 
            double height; 
        } size; 
    }  _boundingRect;
    struct { 
        double latitude; 
        double longitude; 
    }  _coordinate;
    struct GEOTransitNodeFeature { struct { struct { id x_1_2_1; char *x_1_2_2; unsigned long long x_1_2_3; unsigned long long x_1_2_4; unsigned long long x_1_2_5; unsigned long long x_1_2_6; unsigned int x_1_2_7; unsigned long long x_1_2_8; bool x_1_2_9; unsigned long long x_1_2_10; float x_1_2_11; unsigned long long x_1_2_12; id x_1_2_13; int x_1_2_14; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned long long x_1_1_6; unsigned long long x_1_1_7; short x_1_1_8; unsigned char x_1_1_9; struct { /* ? */ } *x_1_1_10; float x_1_1_11; float x_1_1_12; unsigned int x_1_1_13; unsigned char x_1_1_14; bool x_1_1_15; bool x_1_1_16; bool x_1_1_17; } x1; struct _NSRange { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; struct { /* ? */ } *x3; struct GEOTransitNodeFeature {} *x4; unsigned long long *x5; unsigned long long *x6; BOOL x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned short x11; unsigned long long x12; } * _feature;
    struct { double x1; double x2; } * _polygonPoints;
    unsigned long long  _polygonPointsCount;
}

@property (nonatomic, readonly) double boundingRadius;
@property (nonatomic, readonly) struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } boundingRect;
@property (nonatomic, readonly) struct { double x1; double x2; } coordinate;
@property (nonatomic, readonly) struct GEOTransitNodeFeature { struct { struct { id x_1_2_1; char *x_1_2_2; unsigned long long x_1_2_3; unsigned long long x_1_2_4; unsigned long long x_1_2_5; unsigned long long x_1_2_6; unsigned int x_1_2_7; unsigned long long x_1_2_8; bool x_1_2_9; unsigned long long x_1_2_10; float x_1_2_11; unsigned long long x_1_2_12; id x_1_2_13; int x_1_2_14; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned long long x_1_1_6; unsigned long long x_1_1_7; short x_1_1_8; unsigned char x_1_1_9; struct { /* ? */ } *x_1_1_10; float x_1_1_11; float x_1_1_12; unsigned int x_1_1_13; unsigned char x_1_1_14; bool x_1_1_15; bool x_1_1_16; bool x_1_1_17; } x1; struct _NSRange { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; struct { /* ? */ } *x3; struct GEOTransitNodeFeature {} *x4; unsigned long long *x5; unsigned long long *x6; BOOL x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned short x11; unsigned long long x12; }*feature;
@property (nonatomic, readonly) GEOMapFeatureTransitHall *hall;
@property (nonatomic, readonly) NSString *internalName;
@property (nonatomic, readonly) NSArray *internalSystemNames;
@property (nonatomic, readonly) struct { double x1; double x2; }*polygonPoints;
@property (nonatomic, readonly) unsigned long long polygonPointsCount;
@property (nonatomic, readonly) GEOMapFeatureTransitStation *station;
@property (nonatomic, readonly) GEOMapFeatureTransitStop *stop;
@property (nonatomic, readonly) struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; } tileKey;
@property (nonatomic, readonly) unsigned long long transitID;

- (double)boundingRadius;
- (struct { struct { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })boundingRect;
- (struct { double x1; double x2; })coordinate;
- (void)dealloc;
- (id)description;
- (struct GEOTransitNodeFeature { struct { struct { id x_1_2_1; char *x_1_2_2; unsigned long long x_1_2_3; unsigned long long x_1_2_4; unsigned long long x_1_2_5; unsigned long long x_1_2_6; unsigned int x_1_2_7; unsigned long long x_1_2_8; bool x_1_2_9; unsigned long long x_1_2_10; float x_1_2_11; unsigned long long x_1_2_12; id x_1_2_13; int x_1_2_14; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned long long x_1_1_6; unsigned long long x_1_1_7; short x_1_1_8; unsigned char x_1_1_9; struct { /* ? */ } *x_1_1_10; float x_1_1_11; float x_1_1_12; unsigned int x_1_1_13; unsigned char x_1_1_14; bool x_1_1_15; bool x_1_1_16; bool x_1_1_17; } x1; struct _NSRange { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; struct { /* ? */ } *x3; struct GEOTransitNodeFeature {} *x4; unsigned long long *x5; unsigned long long *x6; BOOL x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned short x11; unsigned long long x12; }*)feature;
- (id)hall;
- (id)initWithFeature:(struct GEOTransitNodeFeature { struct { struct { id x_1_2_1; char *x_1_2_2; unsigned long long x_1_2_3; unsigned long long x_1_2_4; unsigned long long x_1_2_5; unsigned long long x_1_2_6; unsigned int x_1_2_7; unsigned long long x_1_2_8; bool x_1_2_9; unsigned long long x_1_2_10; float x_1_2_11; unsigned long long x_1_2_12; id x_1_2_13; int x_1_2_14; } x_1_1_1; struct { float x_2_2_1; float x_2_2_2; } x_1_1_2; struct { float x_3_2_1; float x_3_2_2; } x_1_1_3; unsigned long long x_1_1_4; unsigned long long x_1_1_5; unsigned long long x_1_1_6; unsigned long long x_1_1_7; short x_1_1_8; unsigned char x_1_1_9; struct { /* ? */ } *x_1_1_10; float x_1_1_11; float x_1_1_12; unsigned int x_1_1_13; unsigned char x_1_1_14; bool x_1_1_15; bool x_1_1_16; bool x_1_1_17; } x1; struct _NSRange { unsigned long long x_2_1_1; unsigned long long x_2_1_2; } x2; struct { /* ? */ } *x3; struct GEOTransitNodeFeature {} *x4; unsigned long long *x5; unsigned long long *x6; BOOL x7; unsigned char x8; unsigned char x9; unsigned char x10; unsigned short x11; unsigned long long x12; }*)arg1;
- (id)internalName;
- (id)internalSystemNames;
- (struct { double x1; double x2; }*)polygonPoints;
- (unsigned long long)polygonPointsCount;
- (id)station;
- (id)stop;
- (struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; })tileKey;
- (unsigned long long)transitID;
- (void)updateWithGeometryFeature:(struct { struct { struct { id x_1_2_1; char *x_1_2_2; unsigned long long x_1_2_3; unsigned long long x_1_2_4; unsigned long long x_1_2_5; unsigned long long x_1_2_6; unsigned int x_1_2_7; unsigned long long x_1_2_8; bool x_1_2_9; unsigned long long x_1_2_10; float x_1_2_11; unsigned long long x_1_2_12; id x_1_2_13; int x_1_2_14; } x_1_1_1; unsigned long long x_1_1_2; unsigned long long x_1_1_3; int x_1_1_4; int x_1_1_5; int x_1_1_6; unsigned long long x_1_1_7; unsigned long long x_1_1_8; union { struct { struct { float x_1_4_1; float x_1_4_2; } x_1_3_1; struct { float x_2_4_1; float x_2_4_2; } x_1_3_2; } x_9_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; float x_2_3_4; } x_9_2_2; } x_1_1_9; struct { /* ? */ } *x_1_1_10; struct { unsigned short x_11_2_1[2]; unsigned short x_11_2_2[2]; } x_1_1_11; unsigned char x_1_1_12; bool x_1_1_13; unsigned char x_1_1_14; bool x_1_1_15; bool x_1_1_16; unsigned char x_1_1_17; bool x_1_1_18; unsigned char x_1_1_19; struct _NSRange { unsigned long long x_20_2_1; unsigned long long x_20_2_2; } x_1_1_20; } x1; }*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
