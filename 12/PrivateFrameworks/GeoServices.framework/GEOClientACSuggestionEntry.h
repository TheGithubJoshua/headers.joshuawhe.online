<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOClientACSuggestionEntry.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOClientACSuggestionEntry.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOClientACSuggestionEntry : PBCodable <NSCopying> {
    int  _age;
    double  _contactRelevanceScore;
    int  _distanceToSuggestion;
    double  _fractionOfMatch;
    struct { 
        unsigned int contactRelevanceScore : 1; 
        unsigned int fractionOfMatch : 1; 
        unsigned int mapsSuggestionsContactRevelanceScore : 1; 
        unsigned int mapsSuggestionsIsTouristScore : 1; 
        unsigned int mapsSuggestionsPoiRevelanceScore : 1; 
        unsigned int age : 1; 
        unsigned int distanceToSuggestion : 1; 
        unsigned int peopleSuggesterRank : 1; 
        unsigned int poiOpenState : 1; 
        unsigned int serverEntryType : 1; 
        unsigned int suggestionType : 1; 
        unsigned int isFavorite : 1; 
        unsigned int matchedUsingAddress : 1; 
        unsigned int matchedUsingEventName : 1; 
        unsigned int matchedUsingLabel : 1; 
        unsigned int matchedUsingName : 1; 
        unsigned int matchedUsingOrganization : 1; 
        unsigned int shownToUser : 1; 
    }  _has;
    bool  _isFavorite;
    double  _mapsSuggestionsContactRevelanceScore;
    double  _mapsSuggestionsIsTouristScore;
    double  _mapsSuggestionsPoiRevelanceScore;
    bool  _matchedUsingAddress;
    bool  _matchedUsingEventName;
    bool  _matchedUsingLabel;
    bool  _matchedUsingName;
    bool  _matchedUsingOrganization;
    int  _peopleSuggesterRank;
    int  _poiOpenState;
    int  _serverEntryType;
    bool  _shownToUser;
    int  _suggestionType;
}

@property (nonatomic) int age;
@property (nonatomic) double contactRelevanceScore;
@property (nonatomic) int distanceToSuggestion;
@property (nonatomic) double fractionOfMatch;
@property (nonatomic) bool hasAge;
@property (nonatomic) bool hasContactRelevanceScore;
@property (nonatomic) bool hasDistanceToSuggestion;
@property (nonatomic) bool hasFractionOfMatch;
@property (nonatomic) bool hasIsFavorite;
@property (nonatomic) bool hasMapsSuggestionsContactRevelanceScore;
@property (nonatomic) bool hasMapsSuggestionsIsTouristScore;
@property (nonatomic) bool hasMapsSuggestionsPoiRevelanceScore;
@property (nonatomic) bool hasMatchedUsingAddress;
@property (nonatomic) bool hasMatchedUsingEventName;
@property (nonatomic) bool hasMatchedUsingLabel;
@property (nonatomic) bool hasMatchedUsingName;
@property (nonatomic) bool hasMatchedUsingOrganization;
@property (nonatomic) bool hasPeopleSuggesterRank;
@property (nonatomic) bool hasPoiOpenState;
@property (nonatomic) bool hasServerEntryType;
@property (nonatomic) bool hasShownToUser;
@property (nonatomic) bool hasSuggestionType;
@property (nonatomic) bool isFavorite;
@property (nonatomic) double mapsSuggestionsContactRevelanceScore;
@property (nonatomic) double mapsSuggestionsIsTouristScore;
@property (nonatomic) double mapsSuggestionsPoiRevelanceScore;
@property (nonatomic) bool matchedUsingAddress;
@property (nonatomic) bool matchedUsingEventName;
@property (nonatomic) bool matchedUsingLabel;
@property (nonatomic) bool matchedUsingName;
@property (nonatomic) bool matchedUsingOrganization;
@property (nonatomic) int peopleSuggesterRank;
@property (nonatomic) int poiOpenState;
@property (nonatomic) int serverEntryType;
@property (nonatomic) bool shownToUser;
@property (nonatomic) int suggestionType;

- (int)StringAsPoiOpenState:(id)arg1;
- (int)StringAsServerEntryType:(id)arg1;
- (int)StringAsSuggestionType:(id)arg1;
- (int)age;
- (double)contactRelevanceScore;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (int)distanceToSuggestion;
- (double)fractionOfMatch;
- (bool)hasAge;
- (bool)hasContactRelevanceScore;
- (bool)hasDistanceToSuggestion;
- (bool)hasFractionOfMatch;
- (bool)hasIsFavorite;
- (bool)hasMapsSuggestionsContactRevelanceScore;
- (bool)hasMapsSuggestionsIsTouristScore;
- (bool)hasMapsSuggestionsPoiRevelanceScore;
- (bool)hasMatchedUsingAddress;
- (bool)hasMatchedUsingEventName;
- (bool)hasMatchedUsingLabel;
- (bool)hasMatchedUsingName;
- (bool)hasMatchedUsingOrganization;
- (bool)hasPeopleSuggesterRank;
- (bool)hasPoiOpenState;
- (bool)hasServerEntryType;
- (bool)hasShownToUser;
- (bool)hasSuggestionType;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (bool)isFavorite;
- (double)mapsSuggestionsContactRevelanceScore;
- (double)mapsSuggestionsIsTouristScore;
- (double)mapsSuggestionsPoiRevelanceScore;
- (bool)matchedUsingAddress;
- (bool)matchedUsingEventName;
- (bool)matchedUsingLabel;
- (bool)matchedUsingName;
- (bool)matchedUsingOrganization;
- (void)mergeFrom:(id)arg1;
- (int)peopleSuggesterRank;
- (int)poiOpenState;
- (id)poiOpenStateAsString:(int)arg1;
- (bool)readFrom:(id)arg1;
- (int)serverEntryType;
- (id)serverEntryTypeAsString:(int)arg1;
- (void)setAge:(int)arg1;
- (void)setContactRelevanceScore:(double)arg1;
- (void)setDistanceToSuggestion:(int)arg1;
- (void)setFractionOfMatch:(double)arg1;
- (void)setHasAge:(bool)arg1;
- (void)setHasContactRelevanceScore:(bool)arg1;
- (void)setHasDistanceToSuggestion:(bool)arg1;
- (void)setHasFractionOfMatch:(bool)arg1;
- (void)setHasIsFavorite:(bool)arg1;
- (void)setHasMapsSuggestionsContactRevelanceScore:(bool)arg1;
- (void)setHasMapsSuggestionsIsTouristScore:(bool)arg1;
- (void)setHasMapsSuggestionsPoiRevelanceScore:(bool)arg1;
- (void)setHasMatchedUsingAddress:(bool)arg1;
- (void)setHasMatchedUsingEventName:(bool)arg1;
- (void)setHasMatchedUsingLabel:(bool)arg1;
- (void)setHasMatchedUsingName:(bool)arg1;
- (void)setHasMatchedUsingOrganization:(bool)arg1;
- (void)setHasPeopleSuggesterRank:(bool)arg1;
- (void)setHasPoiOpenState:(bool)arg1;
- (void)setHasServerEntryType:(bool)arg1;
- (void)setHasShownToUser:(bool)arg1;
- (void)setHasSuggestionType:(bool)arg1;
- (void)setIsFavorite:(bool)arg1;
- (void)setMapsSuggestionsContactRevelanceScore:(double)arg1;
- (void)setMapsSuggestionsIsTouristScore:(double)arg1;
- (void)setMapsSuggestionsPoiRevelanceScore:(double)arg1;
- (void)setMatchedUsingAddress:(bool)arg1;
- (void)setMatchedUsingEventName:(bool)arg1;
- (void)setMatchedUsingLabel:(bool)arg1;
- (void)setMatchedUsingName:(bool)arg1;
- (void)setMatchedUsingOrganization:(bool)arg1;
- (void)setPeopleSuggesterRank:(int)arg1;
- (void)setPoiOpenState:(int)arg1;
- (void)setServerEntryType:(int)arg1;
- (void)setShownToUser:(bool)arg1;
- (void)setSuggestionType:(int)arg1;
- (bool)shownToUser;
- (int)suggestionType;
- (id)suggestionTypeAsString:(int)arg1;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
