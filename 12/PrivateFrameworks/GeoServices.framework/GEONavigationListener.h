<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEONavigationListener.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEONavigationListener.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEONavigationListener : NSObject <GEONavigationServerObserverXPCInterface> {
    id /* block */  _activeRouteDetailsDataUpdatedHandler;
    NSXPCConnection * _connection;
    NSString * _currentRoadName;
    <GEONavigationListenerDelegate> * _delegate;
    id /* block */  _guidanceStateUpdatedHandler;
    int  _navigationStartedToken;
    int  _navigationStoppedToken;
    id /* block */  _navigationVoiceVolumeUpdatedHandler;
    id /* block */  _positionFromDestinationUpdatedHandler;
    id /* block */  _positionFromManeuverUpdatedHandler;
    id /* block */  _positionFromSignUpdatedHandler;
    NSObject<OS_dispatch_queue> * _queue;
    id /* block */  _rideSelectionsUpdatedHandler;
    id /* block */  _routeSummaryUpdatedHandler;
    id /* block */  _stepIndexUpdatedHandler;
    id /* block */  _trafficIncidentAlertDetailsDataUpdatedHandler;
    id /* block */  _transitSummaryUpdatedHandler;
}

@property (nonatomic, copy) id /* block */ activeRouteDetailsDataUpdatedHandler;
@property (nonatomic, readonly) NSString *currentRoadName;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <GEONavigationListenerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) id /* block */ guidanceStateUpdatedHandler;
@property (readonly) unsigned long long hash;
@property (nonatomic, copy) id /* block */ navigationVoiceVolumeUpdatedHandler;
@property (nonatomic, copy) id /* block */ positionFromDestinationUpdatedHandler;
@property (nonatomic, copy) id /* block */ positionFromManeuverUpdatedHandler;
@property (nonatomic, copy) id /* block */ positionFromSignUpdatedHandler;
@property (nonatomic, copy) id /* block */ rideSelectionsUpdatedHandler;
@property (nonatomic, copy) id /* block */ routeSummaryUpdatedHandler;
@property (nonatomic, copy) id /* block */ stepIndexUpdatedHandler;
@property (readonly) Class superclass;
@property (nonatomic, copy) id /* block */ trafficIncidentAlertDetailsDataUpdatedHandler;
@property (nonatomic, copy) id /* block */ transitSummaryUpdatedHandler;

- (void).cxx_destruct;
- (void)_close;
- (void)_connectToDaemonIfNeeded;
- (void)_notifyWithActiveRouteDetailsData:(id)arg1;
- (void)_notifyWithGuidanceState:(id)arg1;
- (void)_notifyWithNavigationVoiceVolume:(int)arg1;
- (void)_notifyWithPositionFromDestination:(struct { double x1; double x2; })arg1;
- (void)_notifyWithPositionFromManeuver:(struct { double x1; double x2; })arg1;
- (void)_notifyWithPositionFromSign:(struct { double x1; double x2; })arg1;
- (void)_notifyWithRideSelections:(id)arg1;
- (void)_notifyWithRouteSummary:(id)arg1;
- (void)_notifyWithStepIndex:(unsigned long long)arg1;
- (void)_notifyWithStepNameInfo:(id)arg1;
- (void)_notifyWithTrafficIncidentDetailsData:(id)arg1;
- (void)_notifyWithTransitSummary:(id)arg1;
- (void)_open;
- (id /* block */)activeRouteDetailsDataUpdatedHandler;
- (id)currentRoadName;
- (void)currentRoadNameUpdated:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id /* block */)guidanceStateUpdatedHandler;
- (id)initWithQueue:(id)arg1;
- (void)navigationUpdatedWithVoiceVolumeData:(id)arg1;
- (id /* block */)navigationVoiceVolumeUpdatedHandler;
- (id /* block */)positionFromDestinationUpdatedHandler;
- (id /* block */)positionFromManeuverUpdatedHandler;
- (id /* block */)positionFromSignUpdatedHandler;
- (void)requestActiveRouteDetailsData;
- (void)requestGuidanceState;
- (void)requestNavigationVoiceVolume;
- (void)requestPositionFromDestination;
- (void)requestPositionFromManeuver;
- (void)requestPositionFromSign;
- (void)requestRideSelections;
- (void)requestRouteSummary;
- (void)requestStepIndex;
- (void)requestStepNameInfo;
- (void)requestTrafficIncidentDetailsData;
- (void)requestTransitSummary;
- (id /* block */)rideSelectionsUpdatedHandler;
- (id /* block */)routeSummaryUpdatedHandler;
- (void)routeSummaryUpdatedWithActiveRouteDetailsData:(id)arg1;
- (void)routeSummaryUpdatedWithGuidanceStateData:(id)arg1;
- (void)routeSummaryUpdatedWithNavigationRouteSummaryData:(id)arg1;
- (void)routeSummaryUpdatedWithPositionFromDestinationData:(id)arg1;
- (void)routeSummaryUpdatedWithPositionFromManeuverData:(id)arg1;
- (void)routeSummaryUpdatedWithPositionFromSignData:(id)arg1;
- (void)routeSummaryUpdatedWithRideSelectionData:(id)arg1;
- (void)routeSummaryUpdatedWithStepIndexData:(id)arg1;
- (void)routeSummaryUpdatedWithStepNameInfoData:(id)arg1;
- (void)routeSummaryUpdatedWithTrafficIncidentAlertDetailsData:(id)arg1;
- (void)routeSummaryUpdatedWithTransitSummaryData:(id)arg1;
- (void)setActiveRouteDetailsDataUpdatedHandler:(id /* block */)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGuidanceStateUpdatedHandler:(id /* block */)arg1;
- (void)setNavigationVoiceVolumeUpdatedHandler:(id /* block */)arg1;
- (void)setPositionFromDestinationUpdatedHandler:(id /* block */)arg1;
- (void)setPositionFromManeuverUpdatedHandler:(id /* block */)arg1;
- (void)setPositionFromSignUpdatedHandler:(id /* block */)arg1;
- (void)setRideSelectionsUpdatedHandler:(id /* block */)arg1;
- (void)setRouteSummaryUpdatedHandler:(id /* block */)arg1;
- (void)setStepIndexUpdatedHandler:(id /* block */)arg1;
- (void)setTrafficIncidentAlertDetailsDataUpdatedHandler:(id /* block */)arg1;
- (void)setTransitSummaryUpdatedHandler:(id /* block */)arg1;
- (id /* block */)stepIndexUpdatedHandler;
- (id /* block */)trafficIncidentAlertDetailsDataUpdatedHandler;
- (id /* block */)transitSummaryUpdatedHandler;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
