<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEODBWriter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEODBWriter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEODBWriter : NSObject {
    bool  _canCreateDebugTable;
    bool  _closed;
    GEOCountryConfiguration * _countryConfiguration;
    unsigned long long  _databaseSize;
    struct sqlite3 { } * _db;
    bool  _defunct;
    NSString * _devicePostureCountry;
    NSString * _devicePostureRegion;
    struct sqlite3_stmt { } * _editionDelete;
    struct sqlite3_stmt { } * _editionInvalidate;
    struct sqlite3_stmt { } * _editionInvalidateAll;
    void * _editionMap;
    struct sqlite3_stmt { } * _editionQuery;
    struct sqlite3_stmt { } * _editionUpdate;
    long long  _evictionRowsThreshold;
    unsigned long long  _expirationRecordCount;
    struct { unsigned int x1; double x2; } * _expirationRecords;
    double  _lastCheckedGeneralExpiration;
    long long  _lastRowID;
    GEOResourceManifestManager * _manifestManager;
    unsigned long long  _maxDatabaseSize;
    NSString * _path;
    unsigned long long  _pendingWriteBytes;
    NSDictionary * _pragmaOverrides;
    bool  _preloading;
    struct sqlite3_stmt { } * _sizeQuery;
    unsigned long long  _tileCacheMaximumWriteBytes;
    unsigned long long  _tileCacheMaximumWriteCount;
    unsigned long long  _tileCacheMinimumWriteBytes;
    unsigned long long  _tileCacheMinimumWriteCount;
    struct sqlite3_stmt { } * _tileDelete;
    struct sqlite3_stmt { } * _tileInsert;
    struct sqlite3_stmt { } * _tileSize;
    NSMutableSet * _uncommitedWriteSet;
    struct sqlite3_stmt { } * _versionInsert;
    struct sqlite3_stmt { } * _versionQuery;
    NSMutableArray * _writeList;
    NSLock * _writeListLock;
    NSObject<OS_dispatch_queue> * _writeQueue;
}

@property bool closed;
@property (nonatomic, readonly) unsigned long long databaseSize;
@property (nonatomic, readonly) NSString *devicePostureCountry;
@property (nonatomic, readonly) NSString *devicePostureRegion;
@property (nonatomic) unsigned long long maxDatabaseSize;
@property (nonatomic, readonly) NSString *path;

- (void).cxx_destruct;
- (void)_assertDatabaseSize;
- (void)_closeDB;
- (void)_countryChanged:(id)arg1;
- (void)_createTables;
- (unsigned long long)_dbFileSize;
- (void)_deleteKey:(struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; })arg1;
- (void)_deviceLocked;
- (void)_dropWritesOnFloor:(id)arg1;
- (void)_evict;
- (void)_finalizeStatements;
- (unsigned long long)_freeableDiskSpace;
- (void)_localeChanged:(id)arg1;
- (void)_openDBAndPurgeContents;
- (void)_openDBForceRecreate:(bool)arg1;
- (void)_openIfNecessary;
- (void)_performWrites:(bool)arg1;
- (void)_prepareStatements;
- (void)_printDBStatus:(const char *)arg1;
- (bool)_readEditions;
- (void)_setCurrentDevicePostureToCountry:(id)arg1 region:(id)arg2;
- (void)_shrinkToUnderSize:(unsigned long long)arg1 vacuum:(bool)arg2;
- (bool)_tileSetExpires:(unsigned int)arg1;
- (void)_updateEdition:(unsigned int)arg1 forTileset:(unsigned int)arg2 provider:(unsigned int)arg3 invalidateOnly:(bool)arg4;
- (void)_updateSize;
- (void)_updateVersionTableWithCountryAndRegion;
- (void)_writeEntry:(id)arg1;
- (void)_writeVersionForCountry:(id)arg1 region:(id)arg2;
- (void)addData:(id)arg1 forKey:(struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg2 edition:(unsigned int)arg3 set:(unsigned int)arg4 provider:(unsigned int)arg5 etag:(id)arg6;
- (void)beginPreloadSessionOfSize:(unsigned long long)arg1;
- (void)calculateFreeableSizeWithHandler:(id /* block */)arg1 onQueue:(id)arg2;
- (bool)closed;
- (unsigned long long)databaseSize;
- (void)dealloc;
- (void)deleteData:(const struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg1;
- (id)devicePostureCountry;
- (id)devicePostureRegion;
- (void)endPreloadSession;
- (void)evaluateDevicePostureAgainstCurrentManifest:(id)arg1;
- (void)flushPendingWrites;
- (id)initWithPath:(id)arg1;
- (id)initWithPath:(id)arg1 pragmaOverrides:(id)arg2;
- (id)initWithPath:(id)arg1 pragmaOverrides:(id)arg2 manifestManager:(id)arg3 countryConfiguration:(id)arg4;
- (unsigned long long)maxDatabaseSize;
- (id)path;
- (id)pendingWriteForKey:(struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; }*)arg1;
- (void)pendingWritesForKeys:(id)arg1 handler:(id /* block */)arg2;
- (bool)prepareSingleStatement:(struct sqlite3_stmt {}**)arg1 forSql:(id)arg2;
- (void)setClosed:(bool)arg1;
- (void)setExpirationRecords:(struct { unsigned int x1; double x2; }*)arg1 count:(unsigned long long)arg2;
- (void)setMaxDatabaseSize:(unsigned long long)arg1;
- (void)shrinkBySize:(unsigned long long)arg1 callback:(id /* block */)arg2 onQueue:(id)arg3;
- (void)shrinkToSize:(unsigned long long)arg1 finished:(id /* block */)arg2 onQueue:(id)arg3;
- (void)waitForPendingWrites;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
