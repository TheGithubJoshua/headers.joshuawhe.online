<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEODataURLSessionTask.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEODataURLSessionTask.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEODataURLSessionTask : NSObject <GEODataSessionTask, GEODataSessionUpdatableTask, GEOStateCapturing> {
    NSObject<OS_os_activity> * _activity;
    NSURLSessionDataTask * _backingTask;
    bool  _backingTaskNeedsResume;
    NSData * _cachedData;
    <GEODataSessionTaskDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    double  _endTime;
    bool  _finished;
    NSError * _nonBackingTaskError;
    <NSObject> * _parsedResponse;
    float  _priority;
    unsigned int  _qos;
    NSMutableData * _receivedData;
    GEODataRequest * _request;
    int  _requestKind;
    unsigned int  _sessionIdentifier;
    NSObject<OS_dispatch_queue> * _sessionIsolation;
    double  _startTime;
    unsigned long long  _stateCaptureHandle;
    unsigned int  _taskIdentifier;
    NSURLSessionTaskMetrics * _urlTaskMetrics;
    NSObject<OS_voucher> * _voucher;
}

@property (nonatomic, readonly) long long HTTPStatusCode;
@property (readonly) NSObject<OS_os_activity> *activity;
@property (nonatomic, readonly) NSURLSessionDataTask *backingTask;
@property (nonatomic, copy) NSData *cachedData;
@property (nonatomic, readonly) GEOClientMetrics *clientMetrics;
@property (nonatomic, readonly) unsigned long long contentLength;
@property (nonatomic, readonly) NSString *contentLengthString;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <GEODataSessionTaskDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (readonly) double elapsedTime;
@property (nonatomic, readonly) NSString *entityTag;
@property (nonatomic, retain) NSError *error;
@property (nonatomic, readonly) bool failedDueToCancel;
@property (readonly) bool failedDueToCancel;
@property (nonatomic, readonly) bool finished;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long incomingPayloadSize;
@property (nonatomic, readonly) NSURL *originalRequestURL;
@property (nonatomic, readonly) NSURLRequest *originalURLRequest;
@property (nonatomic, readonly) unsigned long long outgoingPayloadSize;
@property (nonatomic, readonly) <NSObject> *parsedResponse;
@property float priority;
@property (nonatomic, readonly) bool protocolBufferHasPreamble;
@property (nonatomic, readonly) NSData *receivedData;
@property (nonatomic, readonly) NSString *remoteAddressAndPort;
@property (nonatomic, readonly) GEODataRequest *request;
@property (nonatomic, readonly) <GEORequestCounterTicket> *requestCounterTicket;
@property (nonatomic, readonly) int requestKind;
@property (nonatomic, readonly) NSHTTPURLResponse *response;
@property (nonatomic) unsigned int sessionIdentifier;
@property (nonatomic, readonly) double startTime;
@property (readonly) Class superclass;
@property (nonatomic, readonly) unsigned int taskIdentifier;
@property (nonatomic, readonly) NSURLSessionTaskMetrics *urlTaskMetrics;

- (void).cxx_destruct;
- (long long)HTTPStatusCode;
- (void)_prepareForRestart;
- (void)_start;
- (id)activity;
- (id)backingTask;
- (id)cachedData;
- (void)cancel;
- (id)captureStateWithHints:(struct os_state_hints_s { unsigned int x1; char *x2; unsigned int x3; unsigned int x4; }*)arg1;
- (id)clientMetrics;
- (unsigned long long)contentLength;
- (id)contentLengthString;
- (id)createURLRequest;
- (id)createURLSessionTaskWithSession:(id)arg1 request:(id)arg2;
- (void)dataSession:(id)arg1 taskDidCompleteWithError:(id)arg2;
- (void)dataSession:(id)arg1 willSendRequestForEstablishedConnection:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (id)description;
- (void)didCollectMetrics:(id)arg1;
- (void)didReceiveData:(id)arg1;
- (void)didReceiveResponse:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)didValidateEntityTagForData:(id*)arg1 entityTag:(id*)arg2;
- (double)elapsedTime;
- (id)entityTag;
- (id)error;
- (bool)failedDueToCancel;
- (bool)finished;
- (unsigned long long)incomingPayloadSize;
- (id)init;
- (id)initWithSession:(id)arg1 delegate:(id)arg2 delegateQueue:(id)arg3 requestKind:(int)arg4 priority:(float)arg5;
- (void)notifyDelegateWithSession:(id)arg1;
- (id)originalRequestURL;
- (id)originalURLRequest;
- (unsigned long long)outgoingPayloadSize;
- (id)parsedResponse;
- (float)priority;
- (bool)protocolBufferHasPreamble;
- (id)receivedData;
- (id)remoteAddressAndPort;
- (id)request;
- (id)requestCounterTicket;
- (int)requestKind;
- (id)response;
- (unsigned int)sessionIdentifier;
- (void)setCachedData:(id)arg1;
- (void)setError:(id)arg1;
- (void)setParsedResponse:(id)arg1;
- (void)setPriority:(float)arg1;
- (void)setSessionIdentifier:(unsigned int)arg1;
- (void)start;
- (double)startTime;
- (unsigned int)taskIdentifier;
- (void)updateRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)urlTaskMetrics;
- (bool)validateContentLengthWithError:(id*)arg1;
- (bool)validateNonEmptyResponseWithError:(id*)arg1;
- (bool)validateTileResponseWithError:(id*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
