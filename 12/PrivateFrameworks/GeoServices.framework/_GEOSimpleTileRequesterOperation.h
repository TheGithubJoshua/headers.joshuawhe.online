<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_GEOSimpleTileRequesterOperation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/_GEOSimpleTileRequesterOperation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface _GEOSimpleTileRequesterOperation : NSObject <GEODataSessionTaskDelegate> {
    NSObject<OS_os_activity> * _activity;
    int  _attempts;
    _GEOSimpleTileRequesterOperation * _baseTile;
    int  _checksumMethod;
    GEOClientMetrics * _clientMetrics;
    NSData * _data;
    GEODataSession * _dataSession;
    <GEOSimpleTileRequesterOperationDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    NSString * _editionHeader;
    bool  _existingCachedDataCurrent;
    bool  _finished;
    struct _GEOTileKey { 
        unsigned int z : 6; 
        unsigned int x : 26; 
        unsigned int y : 26; 
        unsigned int type : 6; 
        unsigned int pixelSize : 8; 
        unsigned int textScale : 8; 
        unsigned int provider : 8; 
        unsigned int expires : 1; 
        unsigned int reserved1 : 7; 
        unsigned char reserved2[4]; 
    }  _key;
    _GEOSimpleTileRequesterOperation * _localizationTile;
    NSObject<OS_os_activity> * _parentTileActivity;
    _Atomic unsigned int  _priority;
    GEODataRequest * _request;
    NSString * _responseEtag;
    unsigned long long  _signpostID;
    double  _startTime;
    GEODataSessionTask * _task;
    unsigned int  _tileEdition;
    double  _timeout;
}

@property (nonatomic, readonly) NSURL *URL;
@property (nonatomic, retain) NSObject<OS_os_activity> *activity;
@property (nonatomic, retain) _GEOSimpleTileRequesterOperation *baseTile;
@property (nonatomic, retain) GEOClientMetrics *clientMetrics;
@property (nonatomic, readonly) unsigned long long contentLength;
@property (nonatomic, retain) NSData *data;
@property (nonatomic, retain) GEODataSession *dataSession;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <GEOSimpleTileRequesterOperationDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSString *editionHeader;
@property (getter=isExistingCachedDataCurrent, nonatomic, readonly) bool existingCachedDataCurrent;
@property (nonatomic, readonly) bool finished;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) int httpResponseStatusCode;
@property struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; } key;
@property (nonatomic, retain) _GEOSimpleTileRequesterOperation *localizationTile;
@property (nonatomic, retain) NSObject<OS_os_activity> *parentTileActivity;
@property unsigned int priority;
@property (nonatomic, readonly) GEODataRequest *request;
@property (nonatomic, retain) NSString *responseEtag;
@property (nonatomic, readonly) bool responseIsCacheable;
@property (nonatomic, readonly) long long responseSource;
@property (nonatomic) unsigned long long signpostID;
@property (readonly) Class superclass;
@property (nonatomic, retain) GEODataSessionTask *task;
@property unsigned int tileEdition;
@property (nonatomic) double timeout;

- (void).cxx_destruct;
- (id)URL;
- (void)_reportNetworkError:(id)arg1;
- (id)activity;
- (id)baseTile;
- (void)cancel;
- (void)clearAllRelatedOperations;
- (id)clientMetrics;
- (unsigned long long)contentLength;
- (id)data;
- (id)dataSession;
- (void)dataSession:(id)arg1 didCompleteTask:(id)arg2;
- (id)delegate;
- (id)delegateQueue;
- (id)description;
- (id)editionHeader;
- (double)elapsed;
- (bool)finished;
- (int)httpResponseStatusCode;
- (id)init;
- (id)initWithRequest:(id)arg1 delegateQueue:(id)arg2 delegate:(id)arg3;
- (bool)isExistingCachedDataCurrent;
- (struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; })key;
- (id)localizationTile;
- (id)parentTileActivity;
- (unsigned int)priority;
- (id)request;
- (id)responseEtag;
- (bool)responseIsCacheable;
- (long long)responseSource;
- (void)setActivity:(id)arg1;
- (void)setBaseTile:(id)arg1;
- (void)setClientMetrics:(id)arg1;
- (void)setData:(id)arg1;
- (void)setDataSession:(id)arg1;
- (void)setEditionHeader:(id)arg1;
- (void)setKey:(struct _GEOTileKey { unsigned int x1 : 6; unsigned int x2 : 26; unsigned int x3 : 26; unsigned int x4 : 6; unsigned int x5 : 8; unsigned int x6 : 8; unsigned int x7 : 8; unsigned int x8 : 1; unsigned int x9 : 7; unsigned char x10[4]; })arg1;
- (void)setLocalizationTile:(id)arg1;
- (void)setParentTileActivity:(id)arg1;
- (void)setPriority:(unsigned int)arg1;
- (void)setResponseEtag:(id)arg1;
- (void)setSignpostID:(unsigned long long)arg1;
- (void)setTask:(id)arg1;
- (void)setTileEdition:(unsigned int)arg1;
- (void)setTimeout:(double)arg1;
- (unsigned long long)signpostID;
- (void)start;
- (double)startTime;
- (id)task;
- (void)taskFailed:(id)arg1 withError:(id)arg2;
- (unsigned int)tileEdition;
- (double)timeout;
- (bool)validateTileIntegrityForTask:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
