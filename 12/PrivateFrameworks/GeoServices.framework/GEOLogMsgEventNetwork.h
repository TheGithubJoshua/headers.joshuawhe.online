<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOLogMsgEventNetwork.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOLogMsgEventNetwork.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOLogMsgEventNetwork : PBCodable <NSCopying> {
    int  _decodeTime;
    struct { 
        unsigned int requestEnd : 1; 
        unsigned int requestErrorCode : 1; 
        unsigned int requestStart : 1; 
        unsigned int decodeTime : 1; 
        unsigned int httpResponseCode : 1; 
        unsigned int networkService : 1; 
        unsigned int queuedTime : 1; 
        unsigned int redirectCount : 1; 
        unsigned int requestDataSize : 1; 
        unsigned int responseDataSize : 1; 
        unsigned int tilesetId : 1; 
        unsigned int totalTime : 1; 
    }  _has;
    int  _httpResponseCode;
    NSString * _manifestEnv;
    int  _networkService;
    int  _queuedTime;
    int  _redirectCount;
    NSString * _requestAppIdentifier;
    int  _requestDataSize;
    double  _requestEnd;
    long long  _requestErrorCode;
    NSString * _requestErrorDescription;
    NSString * _requestErrorDomain;
    double  _requestStart;
    int  _responseDataSize;
    NSString * _serviceIpAddress;
    GEONetworkSessionTaskTransactionMetrics * _taskMetrics;
    unsigned int  _tilesetId;
    int  _totalTime;
}

@property (nonatomic) int decodeTime;
@property (nonatomic) bool hasDecodeTime;
@property (nonatomic) bool hasHttpResponseCode;
@property (nonatomic, readonly) bool hasManifestEnv;
@property (nonatomic) bool hasNetworkService;
@property (nonatomic) bool hasQueuedTime;
@property (nonatomic) bool hasRedirectCount;
@property (nonatomic, readonly) bool hasRequestAppIdentifier;
@property (nonatomic) bool hasRequestDataSize;
@property (nonatomic) bool hasRequestEnd;
@property (nonatomic) bool hasRequestErrorCode;
@property (nonatomic, readonly) bool hasRequestErrorDescription;
@property (nonatomic, readonly) bool hasRequestErrorDomain;
@property (nonatomic) bool hasRequestStart;
@property (nonatomic) bool hasResponseDataSize;
@property (nonatomic, readonly) bool hasServiceIpAddress;
@property (nonatomic, readonly) bool hasTaskMetrics;
@property (nonatomic) bool hasTilesetId;
@property (nonatomic) bool hasTotalTime;
@property (nonatomic) int httpResponseCode;
@property (nonatomic, retain) NSString *manifestEnv;
@property (nonatomic) int networkService;
@property (nonatomic) int queuedTime;
@property (nonatomic) int redirectCount;
@property (nonatomic, retain) NSString *requestAppIdentifier;
@property (nonatomic) int requestDataSize;
@property (nonatomic) double requestEnd;
@property (nonatomic) long long requestErrorCode;
@property (nonatomic, retain) NSString *requestErrorDescription;
@property (nonatomic, retain) NSString *requestErrorDomain;
@property (nonatomic) double requestStart;
@property (nonatomic) int responseDataSize;
@property (nonatomic, retain) NSString *serviceIpAddress;
@property (nonatomic, retain) GEONetworkSessionTaskTransactionMetrics *taskMetrics;
@property (nonatomic) unsigned int tilesetId;
@property (nonatomic) int totalTime;

- (void).cxx_destruct;
- (int)StringAsNetworkService:(id)arg1;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (int)decodeTime;
- (id)description;
- (id)dictionaryRepresentation;
- (bool)hasDecodeTime;
- (bool)hasHttpResponseCode;
- (bool)hasManifestEnv;
- (bool)hasNetworkService;
- (bool)hasQueuedTime;
- (bool)hasRedirectCount;
- (bool)hasRequestAppIdentifier;
- (bool)hasRequestDataSize;
- (bool)hasRequestEnd;
- (bool)hasRequestErrorCode;
- (bool)hasRequestErrorDescription;
- (bool)hasRequestErrorDomain;
- (bool)hasRequestStart;
- (bool)hasResponseDataSize;
- (bool)hasServiceIpAddress;
- (bool)hasTaskMetrics;
- (bool)hasTilesetId;
- (bool)hasTotalTime;
- (unsigned long long)hash;
- (int)httpResponseCode;
- (bool)isEqual:(id)arg1;
- (id)manifestEnv;
- (void)mergeFrom:(id)arg1;
- (int)networkService;
- (id)networkServiceAsString:(int)arg1;
- (int)queuedTime;
- (bool)readFrom:(id)arg1;
- (int)redirectCount;
- (id)requestAppIdentifier;
- (int)requestDataSize;
- (double)requestEnd;
- (long long)requestErrorCode;
- (id)requestErrorDescription;
- (id)requestErrorDomain;
- (double)requestStart;
- (int)responseDataSize;
- (id)serviceIpAddress;
- (void)setDecodeTime:(int)arg1;
- (void)setHasDecodeTime:(bool)arg1;
- (void)setHasHttpResponseCode:(bool)arg1;
- (void)setHasNetworkService:(bool)arg1;
- (void)setHasQueuedTime:(bool)arg1;
- (void)setHasRedirectCount:(bool)arg1;
- (void)setHasRequestDataSize:(bool)arg1;
- (void)setHasRequestEnd:(bool)arg1;
- (void)setHasRequestErrorCode:(bool)arg1;
- (void)setHasRequestStart:(bool)arg1;
- (void)setHasResponseDataSize:(bool)arg1;
- (void)setHasTilesetId:(bool)arg1;
- (void)setHasTotalTime:(bool)arg1;
- (void)setHttpResponseCode:(int)arg1;
- (void)setManifestEnv:(id)arg1;
- (void)setNetworkService:(int)arg1;
- (void)setQueuedTime:(int)arg1;
- (void)setRedirectCount:(int)arg1;
- (void)setRequestAppIdentifier:(id)arg1;
- (void)setRequestDataSize:(int)arg1;
- (void)setRequestEnd:(double)arg1;
- (void)setRequestErrorCode:(long long)arg1;
- (void)setRequestErrorDescription:(id)arg1;
- (void)setRequestErrorDomain:(id)arg1;
- (void)setRequestStart:(double)arg1;
- (void)setResponseDataSize:(int)arg1;
- (void)setServiceIpAddress:(id)arg1;
- (void)setTaskMetrics:(id)arg1;
- (void)setTilesetId:(unsigned int)arg1;
- (void)setTotalTime:(int)arg1;
- (id)taskMetrics;
- (unsigned int)tilesetId;
- (int)totalTime;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
