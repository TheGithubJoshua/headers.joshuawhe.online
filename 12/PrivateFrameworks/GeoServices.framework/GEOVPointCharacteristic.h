<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOVPointCharacteristic.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOVPointCharacteristic.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOVPointCharacteristic : PBCodable <NSCopying> {
    bool  _brunnelEntry;
    bool  _castShadow;
    bool  _cropped;
    struct { 
        unsigned int roadLaneCount : 1; 
        unsigned int roadOffset : 1; 
        unsigned int sectionIndex : 1; 
        unsigned int vertexIndex : 1; 
        unsigned int zLevel : 1; 
        unsigned int brunnelEntry : 1; 
        unsigned int castShadow : 1; 
        unsigned int cropped : 1; 
        unsigned int shouldDrawLanes : 1; 
    }  _has;
    GEOVLaneCharacteristic * _laneCharacteristic;
    int  _roadLaneCount;
    int  _roadOffset;
    int  _sectionIndex;
    bool  _shouldDrawLanes;
    int  _vertexIndex;
    int  _zLevel;
}

@property (nonatomic) bool brunnelEntry;
@property (nonatomic) bool castShadow;
@property (nonatomic) bool cropped;
@property (nonatomic) bool hasBrunnelEntry;
@property (nonatomic) bool hasCastShadow;
@property (nonatomic) bool hasCropped;
@property (nonatomic, readonly) bool hasLaneCharacteristic;
@property (nonatomic) bool hasRoadLaneCount;
@property (nonatomic) bool hasRoadOffset;
@property (nonatomic) bool hasSectionIndex;
@property (nonatomic) bool hasShouldDrawLanes;
@property (nonatomic) bool hasVertexIndex;
@property (nonatomic) bool hasZLevel;
@property (nonatomic, retain) GEOVLaneCharacteristic *laneCharacteristic;
@property (nonatomic) int roadLaneCount;
@property (nonatomic) int roadOffset;
@property (nonatomic) int sectionIndex;
@property (nonatomic) bool shouldDrawLanes;
@property (nonatomic) int vertexIndex;
@property (nonatomic) int zLevel;

- (void).cxx_destruct;
- (bool)brunnelEntry;
- (bool)castShadow;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)cropped;
- (id)description;
- (id)dictionaryRepresentation;
- (bool)hasBrunnelEntry;
- (bool)hasCastShadow;
- (bool)hasCropped;
- (bool)hasLaneCharacteristic;
- (bool)hasRoadLaneCount;
- (bool)hasRoadOffset;
- (bool)hasSectionIndex;
- (bool)hasShouldDrawLanes;
- (bool)hasVertexIndex;
- (bool)hasZLevel;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (id)laneCharacteristic;
- (bool)readFrom:(id)arg1;
- (int)roadLaneCount;
- (int)roadOffset;
- (int)sectionIndex;
- (void)setBrunnelEntry:(bool)arg1;
- (void)setCastShadow:(bool)arg1;
- (void)setCropped:(bool)arg1;
- (void)setHasBrunnelEntry:(bool)arg1;
- (void)setHasCastShadow:(bool)arg1;
- (void)setHasCropped:(bool)arg1;
- (void)setHasRoadLaneCount:(bool)arg1;
- (void)setHasRoadOffset:(bool)arg1;
- (void)setHasSectionIndex:(bool)arg1;
- (void)setHasShouldDrawLanes:(bool)arg1;
- (void)setHasVertexIndex:(bool)arg1;
- (void)setHasZLevel:(bool)arg1;
- (void)setLaneCharacteristic:(id)arg1;
- (void)setRoadLaneCount:(int)arg1;
- (void)setRoadOffset:(int)arg1;
- (void)setSectionIndex:(int)arg1;
- (void)setShouldDrawLanes:(bool)arg1;
- (void)setVertexIndex:(int)arg1;
- (void)setZLevel:(int)arg1;
- (bool)shouldDrawLanes;
- (int)vertexIndex;
- (void)writeTo:(id)arg1;
- (int)zLevel;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
