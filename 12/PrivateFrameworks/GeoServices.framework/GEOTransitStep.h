<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOTransitStep.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOTransitStep.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOTransitStep : PBCodable <NSCopying> {
    unsigned int  _accessPointZilchIndex;
    GEOTransitArrivalInfo * _arrivalInfo;
    GEOTransitBaseFare * _baseFare;
    unsigned int  _defaultVehicleInfoIndex;
    unsigned int  _departureFrequency;
    unsigned int  _distanceInMeters;
    unsigned int  _endingStopIndex;
    NSMutableArray * _enterExitInfos;
    struct { 
        unsigned int accessPointZilchIndex : 1; 
        unsigned int defaultVehicleInfoIndex : 1; 
        unsigned int departureFrequency : 1; 
        unsigned int distanceInMeters : 1; 
        unsigned int endingStopIndex : 1; 
        unsigned int listTransitIncidentMessageIndex : 1; 
        unsigned int maneuverType : 1; 
        unsigned int routeDetailsSecondaryArtworkIndex : 1; 
        unsigned int significanceForEndNode : 1; 
        unsigned int startingStopIndex : 1; 
        unsigned int startingTime : 1; 
        unsigned int steppingTransitIncidentMessageIndex : 1; 
        unsigned int walkingIndex : 1; 
        unsigned int zilchIndex : 1; 
        unsigned int prioritizeTilesPreloading : 1; 
    }  _has;
    GEOInstructionSet * _instructions;
    unsigned int  _listTransitIncidentMessageIndex;
    GEOLatLng * _location;
    int  _maneuverType;
    bool  _prioritizeTilesPreloading;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _routeDetailsPrimaryArtworkIndexs;
    unsigned int  _routeDetailsSecondaryArtworkIndex;
    int  _significanceForEndNode;
    unsigned int  _startingStopIndex;
    unsigned int  _startingTime;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _steppingArtworkIndexs;
    unsigned int  _steppingTransitIncidentMessageIndex;
    GEOTransitSurcharge * _surcharge;
    NSMutableArray * _transferInfos;
    NSMutableArray * _vehicleInfos;
    unsigned int  _walkingIndex;
    unsigned int  _zilchIndex;
}

@property (nonatomic) unsigned int accessPointZilchIndex;
@property (nonatomic, retain) GEOTransitArrivalInfo *arrivalInfo;
@property (nonatomic, retain) GEOTransitBaseFare *baseFare;
@property (nonatomic) unsigned int defaultVehicleInfoIndex;
@property (nonatomic) unsigned int departureFrequency;
@property (nonatomic) unsigned int distanceInMeters;
@property (nonatomic) unsigned int endingStopIndex;
@property (nonatomic, retain) NSMutableArray *enterExitInfos;
@property (nonatomic) bool hasAccessPointZilchIndex;
@property (nonatomic, readonly) bool hasArrivalInfo;
@property (nonatomic, readonly) bool hasBaseFare;
@property (nonatomic) bool hasDefaultVehicleInfoIndex;
@property (nonatomic) bool hasDepartureFrequency;
@property (nonatomic) bool hasDistanceInMeters;
@property (nonatomic) bool hasEndingStopIndex;
@property (nonatomic, readonly) bool hasInstructions;
@property (nonatomic) bool hasListTransitIncidentMessageIndex;
@property (nonatomic, readonly) bool hasLocation;
@property (nonatomic) bool hasManeuverType;
@property (nonatomic) bool hasPrioritizeTilesPreloading;
@property (nonatomic) bool hasRouteDetailsSecondaryArtworkIndex;
@property (nonatomic) bool hasSignificanceForEndNode;
@property (nonatomic) bool hasStartingStopIndex;
@property (nonatomic) bool hasStartingTime;
@property (nonatomic) bool hasSteppingTransitIncidentMessageIndex;
@property (nonatomic, readonly) bool hasSurcharge;
@property (nonatomic) bool hasWalkingIndex;
@property (nonatomic) bool hasZilchIndex;
@property (nonatomic, retain) GEOInstructionSet *instructions;
@property (nonatomic) unsigned int listTransitIncidentMessageIndex;
@property (nonatomic, retain) GEOLatLng *location;
@property (nonatomic) int maneuverType;
@property (nonatomic) bool prioritizeTilesPreloading;
@property (nonatomic, readonly) unsigned int*routeDetailsPrimaryArtworkIndexs;
@property (nonatomic, readonly) unsigned long long routeDetailsPrimaryArtworkIndexsCount;
@property (nonatomic) unsigned int routeDetailsSecondaryArtworkIndex;
@property (nonatomic) int significanceForEndNode;
@property (nonatomic) unsigned int startingStopIndex;
@property (nonatomic) unsigned int startingTime;
@property (nonatomic, readonly) unsigned int*steppingArtworkIndexs;
@property (nonatomic, readonly) unsigned long long steppingArtworkIndexsCount;
@property (nonatomic) unsigned int steppingTransitIncidentMessageIndex;
@property (nonatomic, retain) GEOTransitSurcharge *surcharge;
@property (nonatomic, retain) NSMutableArray *transferInfos;
@property (nonatomic, retain) NSMutableArray *vehicleInfos;
@property (nonatomic) unsigned int walkingIndex;
@property (nonatomic) unsigned int zilchIndex;

+ (Class)enterExitInfoType;
+ (Class)transferInfoType;
+ (Class)vehicleInfoType;

- (void).cxx_destruct;
- (int)StringAsManeuverType:(id)arg1;
- (int)StringAsSignificanceForEndNode:(id)arg1;
- (unsigned int)accessPointZilchIndex;
- (void)addEnterExitInfo:(id)arg1;
- (void)addRouteDetailsPrimaryArtworkIndex:(unsigned int)arg1;
- (void)addSteppingArtworkIndex:(unsigned int)arg1;
- (void)addTransferInfo:(id)arg1;
- (void)addVehicleInfo:(id)arg1;
- (id)arrivalInfo;
- (id)baseFare;
- (void)clearEnterExitInfos;
- (void)clearRouteDetailsPrimaryArtworkIndexs;
- (void)clearSteppingArtworkIndexs;
- (void)clearTransferInfos;
- (void)clearVehicleInfos;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (unsigned int)defaultVehicleInfoIndex;
- (unsigned int)departureFrequency;
- (id)description;
- (id)dictionaryRepresentation;
- (unsigned int)distanceInMeters;
- (unsigned int)endingStopIndex;
- (id)enterExitInfoAtIndex:(unsigned long long)arg1;
- (id)enterExitInfos;
- (unsigned long long)enterExitInfosCount;
- (bool)hasAccessPointZilchIndex;
- (bool)hasArrivalInfo;
- (bool)hasBaseFare;
- (bool)hasDefaultVehicleInfoIndex;
- (bool)hasDepartureFrequency;
- (bool)hasDistanceInMeters;
- (bool)hasEndingStopIndex;
- (bool)hasInstructions;
- (bool)hasListTransitIncidentMessageIndex;
- (bool)hasLocation;
- (bool)hasManeuverType;
- (bool)hasPrioritizeTilesPreloading;
- (bool)hasRouteDetailsSecondaryArtworkIndex;
- (bool)hasSignificanceForEndNode;
- (bool)hasStartingStopIndex;
- (bool)hasStartingTime;
- (bool)hasSteppingTransitIncidentMessageIndex;
- (bool)hasSurcharge;
- (bool)hasWalkingIndex;
- (bool)hasZilchIndex;
- (unsigned long long)hash;
- (id)instructions;
- (bool)isEqual:(id)arg1;
- (long long)legTypeForManuever;
- (unsigned int)listTransitIncidentMessageIndex;
- (id)location;
- (int)maneuverType;
- (id)maneuverTypeAsString:(int)arg1;
- (void)mergeFrom:(id)arg1;
- (bool)prioritizeTilesPreloading;
- (bool)readFrom:(id)arg1;
- (unsigned int)routeDetailsPrimaryArtworkIndexAtIndex:(unsigned long long)arg1;
- (unsigned int*)routeDetailsPrimaryArtworkIndexs;
- (unsigned long long)routeDetailsPrimaryArtworkIndexsCount;
- (unsigned int)routeDetailsSecondaryArtworkIndex;
- (void)setAccessPointZilchIndex:(unsigned int)arg1;
- (void)setArrivalInfo:(id)arg1;
- (void)setBaseFare:(id)arg1;
- (void)setDefaultVehicleInfoIndex:(unsigned int)arg1;
- (void)setDepartureFrequency:(unsigned int)arg1;
- (void)setDistanceInMeters:(unsigned int)arg1;
- (void)setEndingStopIndex:(unsigned int)arg1;
- (void)setEnterExitInfos:(id)arg1;
- (void)setHasAccessPointZilchIndex:(bool)arg1;
- (void)setHasDefaultVehicleInfoIndex:(bool)arg1;
- (void)setHasDepartureFrequency:(bool)arg1;
- (void)setHasDistanceInMeters:(bool)arg1;
- (void)setHasEndingStopIndex:(bool)arg1;
- (void)setHasListTransitIncidentMessageIndex:(bool)arg1;
- (void)setHasManeuverType:(bool)arg1;
- (void)setHasPrioritizeTilesPreloading:(bool)arg1;
- (void)setHasRouteDetailsSecondaryArtworkIndex:(bool)arg1;
- (void)setHasSignificanceForEndNode:(bool)arg1;
- (void)setHasStartingStopIndex:(bool)arg1;
- (void)setHasStartingTime:(bool)arg1;
- (void)setHasSteppingTransitIncidentMessageIndex:(bool)arg1;
- (void)setHasWalkingIndex:(bool)arg1;
- (void)setHasZilchIndex:(bool)arg1;
- (void)setInstructions:(id)arg1;
- (void)setListTransitIncidentMessageIndex:(unsigned int)arg1;
- (void)setLocation:(id)arg1;
- (void)setManeuverType:(int)arg1;
- (void)setPrioritizeTilesPreloading:(bool)arg1;
- (void)setRouteDetailsPrimaryArtworkIndexs:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setRouteDetailsSecondaryArtworkIndex:(unsigned int)arg1;
- (void)setSignificanceForEndNode:(int)arg1;
- (void)setStartingStopIndex:(unsigned int)arg1;
- (void)setStartingTime:(unsigned int)arg1;
- (void)setSteppingArtworkIndexs:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setSteppingTransitIncidentMessageIndex:(unsigned int)arg1;
- (void)setSurcharge:(id)arg1;
- (void)setTransferInfos:(id)arg1;
- (void)setVehicleInfos:(id)arg1;
- (void)setWalkingIndex:(unsigned int)arg1;
- (void)setZilchIndex:(unsigned int)arg1;
- (int)significanceForEndNode;
- (id)significanceForEndNodeAsString:(int)arg1;
- (unsigned int)startingStopIndex;
- (unsigned int)startingTime;
- (unsigned int)steppingArtworkIndexAtIndex:(unsigned long long)arg1;
- (unsigned int*)steppingArtworkIndexs;
- (unsigned long long)steppingArtworkIndexsCount;
- (unsigned int)steppingTransitIncidentMessageIndex;
- (id)surcharge;
- (id)transferInfoAtIndex:(unsigned long long)arg1;
- (id)transferInfos;
- (unsigned long long)transferInfosCount;
- (id)vehicleInfoAtIndex:(unsigned long long)arg1;
- (id)vehicleInfos;
- (unsigned long long)vehicleInfosCount;
- (unsigned int)walkingIndex;
- (void)writeTo:(id)arg1;
- (unsigned int)zilchIndex;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
