<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEORouteAttributes.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEORouteAttributes.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEORouteAttributes : PBCodable <NSCopying> {
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _additionalTransportTypes;
    GEOAutomobileOptions * _automobileOptions;
    int  _basicPointsToBeIncluded;
    GEODestinationInfo * _destinationInfo;
    int  _destinationType;
    bool  _enableExperimentalMode;
    struct { 
        unsigned int timepoint : 1; 
        unsigned int basicPointsToBeIncluded : 1; 
        unsigned int destinationType : 1; 
        unsigned int mainTransportType : 1; 
        unsigned int trafficType : 1; 
        unsigned int walkingLimitMeters : 1; 
        unsigned int enableExperimentalMode : 1; 
        unsigned int includeContingencyRoutes : 1; 
        unsigned int includeCrossLanguagePhonetics : 1; 
        unsigned int includeHistoricTravelTime : 1; 
        unsigned int includeLaneGuidance : 1; 
        unsigned int includeManeuverIcons : 1; 
        unsigned int includePhonetics : 1; 
        unsigned int includeTrafficAlongRoute : 1; 
        unsigned int includeTrafficIncidents : 1; 
        unsigned int includeZilchPoints : 1; 
        unsigned int useMetricThreshold : 1; 
    }  _has;
    bool  _includeContingencyRoutes;
    bool  _includeCrossLanguagePhonetics;
    bool  _includeHistoricTravelTime;
    bool  _includeLaneGuidance;
    bool  _includeManeuverIcons;
    bool  _includePhonetics;
    bool  _includeTrafficAlongRoute;
    bool  _includeTrafficIncidents;
    bool  _includeZilchPoints;
    int  _mainTransportType;
    NSString * _phoneticLocaleIdentifier;
    struct GEOTimepoint { 
        double _time; 
        int _type; 
        struct { 
            unsigned int time : 1; 
            unsigned int type : 1; 
        } _has; 
    }  _timepoint;
    int  _trafficType;
    GEOTransitOptions * _transitOptions;
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _uiContexts;
    bool  _useMetricThreshold;
    unsigned int  _walkingLimitMeters;
    GEOWalkingOptions * _walkingOptions;
}

@property (nonatomic, readonly) int*additionalTransportTypes;
@property (nonatomic, readonly) unsigned long long additionalTransportTypesCount;
@property (nonatomic, retain) GEOAutomobileOptions *automobileOptions;
@property (nonatomic) int basicPointsToBeIncluded;
@property (nonatomic, retain) GEODestinationInfo *destinationInfo;
@property (nonatomic) int destinationType;
@property (nonatomic) bool enableExperimentalMode;
@property (nonatomic, readonly) bool hasAutomobileOptions;
@property (nonatomic) bool hasBasicPointsToBeIncluded;
@property (nonatomic, readonly) bool hasDestinationInfo;
@property (nonatomic) bool hasDestinationType;
@property (nonatomic) bool hasEnableExperimentalMode;
@property (nonatomic) bool hasIncludeContingencyRoutes;
@property (nonatomic) bool hasIncludeCrossLanguagePhonetics;
@property (nonatomic) bool hasIncludeHistoricTravelTime;
@property (nonatomic) bool hasIncludeLaneGuidance;
@property (nonatomic) bool hasIncludeManeuverIcons;
@property (nonatomic) bool hasIncludePhonetics;
@property (nonatomic) bool hasIncludeTrafficAlongRoute;
@property (nonatomic) bool hasIncludeTrafficIncidents;
@property (nonatomic) bool hasIncludeZilchPoints;
@property (nonatomic) bool hasMainTransportType;
@property (nonatomic, readonly) bool hasPhoneticLocaleIdentifier;
@property (nonatomic) bool hasTimepoint;
@property (nonatomic) bool hasTrafficType;
@property (nonatomic, readonly) bool hasTransitOptions;
@property (nonatomic) bool hasUseMetricThreshold;
@property (nonatomic) bool hasWalkingLimitMeters;
@property (nonatomic, readonly) bool hasWalkingOptions;
@property (nonatomic) bool includeContingencyRoutes;
@property (nonatomic) bool includeCrossLanguagePhonetics;
@property (nonatomic) bool includeHistoricTravelTime;
@property (nonatomic) bool includeLaneGuidance;
@property (nonatomic) bool includeManeuverIcons;
@property (nonatomic) bool includePhonetics;
@property (nonatomic) bool includeTrafficAlongRoute;
@property (nonatomic) bool includeTrafficIncidents;
@property (nonatomic) bool includeZilchPoints;
@property (nonatomic) int mainTransportType;
@property (nonatomic, retain) NSString *phoneticLocaleIdentifier;
@property (nonatomic) struct GEOTimepoint { double x1; int x2; struct { unsigned int x_3_1_1 : 1; unsigned int x_3_1_2 : 1; } x3; } timepoint;
@property (nonatomic) int trafficType;
@property (nonatomic, retain) GEOTransitOptions *transitOptions;
@property (nonatomic, readonly) int*uiContexts;
@property (nonatomic, readonly) unsigned long long uiContextsCount;
@property (nonatomic) bool useMetricThreshold;
@property (nonatomic) unsigned int walkingLimitMeters;
@property (nonatomic, retain) GEOWalkingOptions *walkingOptions;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

+ (id)defaultRouteAttributes;

- (void).cxx_destruct;
- (int)StringAsAdditionalTransportTypes:(id)arg1;
- (int)StringAsBasicPointsToBeIncluded:(id)arg1;
- (int)StringAsDestinationType:(id)arg1;
- (int)StringAsMainTransportType:(id)arg1;
- (int)StringAsTrafficType:(id)arg1;
- (int)StringAsUiContexts:(id)arg1;
- (void)addAdditionalTransportType:(int)arg1;
- (void)addUiContext:(int)arg1;
- (int)additionalTransportTypeAtIndex:(unsigned long long)arg1;
- (int*)additionalTransportTypes;
- (id)additionalTransportTypesAsString:(int)arg1;
- (unsigned long long)additionalTransportTypesCount;
- (id)automobileOptions;
- (int)basicPointsToBeIncluded;
- (id)basicPointsToBeIncludedAsString:(int)arg1;
- (void)clearAdditionalTransportTypes;
- (void)clearUiContexts;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)destinationInfo;
- (int)destinationType;
- (id)destinationTypeAsString:(int)arg1;
- (id)dictionaryRepresentation;
- (bool)enableExperimentalMode;
- (bool)hasAutomobileOptions;
- (bool)hasBasicPointsToBeIncluded;
- (bool)hasDestinationInfo;
- (bool)hasDestinationType;
- (bool)hasEnableExperimentalMode;
- (bool)hasIncludeContingencyRoutes;
- (bool)hasIncludeCrossLanguagePhonetics;
- (bool)hasIncludeHistoricTravelTime;
- (bool)hasIncludeLaneGuidance;
- (bool)hasIncludeManeuverIcons;
- (bool)hasIncludePhonetics;
- (bool)hasIncludeTrafficAlongRoute;
- (bool)hasIncludeTrafficIncidents;
- (bool)hasIncludeZilchPoints;
- (bool)hasMainTransportType;
- (bool)hasPhoneticLocaleIdentifier;
- (bool)hasTimepoint;
- (bool)hasTrafficType;
- (bool)hasTransitOptions;
- (bool)hasUseMetricThreshold;
- (bool)hasWalkingLimitMeters;
- (bool)hasWalkingOptions;
- (unsigned long long)hash;
- (bool)includeContingencyRoutes;
- (bool)includeCrossLanguagePhonetics;
- (bool)includeHistoricTravelTime;
- (bool)includeLaneGuidance;
- (bool)includeManeuverIcons;
- (bool)includePhonetics;
- (bool)includeTrafficAlongRoute;
- (bool)includeTrafficIncidents;
- (bool)includeZilchPoints;
- (bool)isEqual:(id)arg1;
- (int)mainTransportType;
- (id)mainTransportTypeAsString:(int)arg1;
- (void)mergeFrom:(id)arg1;
- (id)phoneticLocaleIdentifier;
- (bool)readFrom:(id)arg1;
- (void)setAdditionalTransportTypes:(int*)arg1 count:(unsigned long long)arg2;
- (void)setAutomobileOptions:(id)arg1;
- (void)setBasicPointsToBeIncluded:(int)arg1;
- (void)setDestinationInfo:(id)arg1;
- (void)setDestinationType:(int)arg1;
- (void)setEnableExperimentalMode:(bool)arg1;
- (void)setHasBasicPointsToBeIncluded:(bool)arg1;
- (void)setHasDestinationType:(bool)arg1;
- (void)setHasEnableExperimentalMode:(bool)arg1;
- (void)setHasIncludeContingencyRoutes:(bool)arg1;
- (void)setHasIncludeCrossLanguagePhonetics:(bool)arg1;
- (void)setHasIncludeHistoricTravelTime:(bool)arg1;
- (void)setHasIncludeLaneGuidance:(bool)arg1;
- (void)setHasIncludeManeuverIcons:(bool)arg1;
- (void)setHasIncludePhonetics:(bool)arg1;
- (void)setHasIncludeTrafficAlongRoute:(bool)arg1;
- (void)setHasIncludeTrafficIncidents:(bool)arg1;
- (void)setHasIncludeZilchPoints:(bool)arg1;
- (void)setHasMainTransportType:(bool)arg1;
- (void)setHasTimepoint:(bool)arg1;
- (void)setHasTrafficType:(bool)arg1;
- (void)setHasUseMetricThreshold:(bool)arg1;
- (void)setHasWalkingLimitMeters:(bool)arg1;
- (void)setIncludeContingencyRoutes:(bool)arg1;
- (void)setIncludeCrossLanguagePhonetics:(bool)arg1;
- (void)setIncludeHistoricTravelTime:(bool)arg1;
- (void)setIncludeLaneGuidance:(bool)arg1;
- (void)setIncludeManeuverIcons:(bool)arg1;
- (void)setIncludePhonetics:(bool)arg1;
- (void)setIncludeTrafficAlongRoute:(bool)arg1;
- (void)setIncludeTrafficIncidents:(bool)arg1;
- (void)setIncludeZilchPoints:(bool)arg1;
- (void)setMainTransportType:(int)arg1;
- (void)setPhoneticLocaleIdentifier:(id)arg1;
- (void)setTimepoint:(struct GEOTimepoint { double x1; int x2; struct { unsigned int x_3_1_1 : 1; unsigned int x_3_1_2 : 1; } x3; })arg1;
- (void)setTrafficType:(int)arg1;
- (void)setTransitOptions:(id)arg1;
- (void)setUiContexts:(int*)arg1 count:(unsigned long long)arg2;
- (void)setUseMetricThreshold:(bool)arg1;
- (void)setWalkingLimitMeters:(unsigned int)arg1;
- (void)setWalkingOptions:(id)arg1;
- (struct GEOTimepoint { double x1; int x2; struct { unsigned int x_3_1_1 : 1; unsigned int x_3_1_2 : 1; } x3; })timepoint;
- (int)trafficType;
- (id)trafficTypeAsString:(int)arg1;
- (id)transitOptions;
- (int)uiContextAtIndex:(unsigned long long)arg1;
- (int*)uiContexts;
- (id)uiContextsAsString:(int)arg1;
- (unsigned long long)uiContextsCount;
- (bool)useMetricThreshold;
- (unsigned int)walkingLimitMeters;
- (id)walkingOptions;
- (void)writeTo:(id)arg1;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation

+ (id)defaultRouteAttributesForTransportType:(int)arg1;

- (void)setDestinationInfoForWaypoint:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
