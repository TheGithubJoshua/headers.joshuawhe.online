<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOETAResultByType.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOETAResultByType.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOETAResultByType : PBCodable <NSCopying> {
    unsigned int  _distance;
    double  _expectedTimeOfDeparture;
    struct { 
        unsigned int expectedTimeOfDeparture : 1; 
        unsigned int distance : 1; 
        unsigned int historicTravelTime : 1; 
        unsigned int staticTravelTime : 1; 
        unsigned int status : 1; 
        unsigned int transportType : 1; 
        unsigned int travelTimeAggressiveEstimate : 1; 
        unsigned int travelTimeBestEstimate : 1; 
        unsigned int travelTimeConservativeEstimate : 1; 
    }  _has;
    unsigned int  _historicTravelTime;
    GEORouteTrafficDetail * _routeTrafficDetail;
    GEOShortTrafficSummary * _shortTrafficSummary;
    unsigned int  _staticTravelTime;
    int  _status;
    NSMutableArray * _summaryForPredictedDestinations;
    int  _transportType;
    unsigned int  _travelTimeAggressiveEstimate;
    unsigned int  _travelTimeBestEstimate;
    unsigned int  _travelTimeConservativeEstimate;
}

@property (nonatomic) unsigned int distance;
@property (nonatomic) double expectedTimeOfDeparture;
@property (nonatomic) bool hasDistance;
@property (nonatomic) bool hasExpectedTimeOfDeparture;
@property (nonatomic) bool hasHistoricTravelTime;
@property (nonatomic, readonly) bool hasRouteTrafficDetail;
@property (nonatomic, readonly) bool hasShortTrafficSummary;
@property (nonatomic) bool hasStaticTravelTime;
@property (nonatomic) bool hasStatus;
@property (nonatomic) bool hasTransportType;
@property (nonatomic) bool hasTravelTimeAggressiveEstimate;
@property (nonatomic) bool hasTravelTimeBestEstimate;
@property (nonatomic) bool hasTravelTimeConservativeEstimate;
@property (nonatomic) unsigned int historicTravelTime;
@property (nonatomic, retain) GEORouteTrafficDetail *routeTrafficDetail;
@property (nonatomic, retain) GEOShortTrafficSummary *shortTrafficSummary;
@property (nonatomic) unsigned int staticTravelTime;
@property (nonatomic) int status;
@property (nonatomic, retain) NSMutableArray *summaryForPredictedDestinations;
@property (nonatomic) int transportType;
@property (nonatomic) unsigned int travelTimeAggressiveEstimate;
@property (nonatomic) unsigned int travelTimeBestEstimate;
@property (nonatomic) unsigned int travelTimeConservativeEstimate;

+ (Class)summaryForPredictedDestinationType;

- (void).cxx_destruct;
- (int)StringAsStatus:(id)arg1;
- (int)StringAsTransportType:(id)arg1;
- (void)addSummaryForPredictedDestination:(id)arg1;
- (void)clearSummaryForPredictedDestinations;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (unsigned int)distance;
- (double)expectedTimeOfDeparture;
- (bool)hasDistance;
- (bool)hasExpectedTimeOfDeparture;
- (bool)hasHistoricTravelTime;
- (bool)hasRouteTrafficDetail;
- (bool)hasShortTrafficSummary;
- (bool)hasStaticTravelTime;
- (bool)hasStatus;
- (bool)hasTransportType;
- (bool)hasTravelTimeAggressiveEstimate;
- (bool)hasTravelTimeBestEstimate;
- (bool)hasTravelTimeConservativeEstimate;
- (unsigned long long)hash;
- (unsigned int)historicTravelTime;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (id)routeTrafficDetail;
- (void)setDistance:(unsigned int)arg1;
- (void)setExpectedTimeOfDeparture:(double)arg1;
- (void)setHasDistance:(bool)arg1;
- (void)setHasExpectedTimeOfDeparture:(bool)arg1;
- (void)setHasHistoricTravelTime:(bool)arg1;
- (void)setHasStaticTravelTime:(bool)arg1;
- (void)setHasStatus:(bool)arg1;
- (void)setHasTransportType:(bool)arg1;
- (void)setHasTravelTimeAggressiveEstimate:(bool)arg1;
- (void)setHasTravelTimeBestEstimate:(bool)arg1;
- (void)setHasTravelTimeConservativeEstimate:(bool)arg1;
- (void)setHistoricTravelTime:(unsigned int)arg1;
- (void)setRouteTrafficDetail:(id)arg1;
- (void)setShortTrafficSummary:(id)arg1;
- (void)setStaticTravelTime:(unsigned int)arg1;
- (void)setStatus:(int)arg1;
- (void)setSummaryForPredictedDestinations:(id)arg1;
- (void)setTransportType:(int)arg1;
- (void)setTravelTimeAggressiveEstimate:(unsigned int)arg1;
- (void)setTravelTimeBestEstimate:(unsigned int)arg1;
- (void)setTravelTimeConservativeEstimate:(unsigned int)arg1;
- (id)shortTrafficSummary;
- (unsigned int)staticTravelTime;
- (int)status;
- (id)statusAsString:(int)arg1;
- (id)summaryForPredictedDestinationAtIndex:(unsigned long long)arg1;
- (id)summaryForPredictedDestinations;
- (unsigned long long)summaryForPredictedDestinationsCount;
- (int)transportType;
- (id)transportTypeAsString:(int)arg1;
- (unsigned int)travelTimeAggressiveEstimate;
- (unsigned int)travelTimeBestEstimate;
- (unsigned int)travelTimeConservativeEstimate;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
