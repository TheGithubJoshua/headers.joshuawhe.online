<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GEOETARoute.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/GeoServices.framework/GEOETARoute.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices (1364.36.4.19.8)
 */

@interface GEOETARoute : PBCodable <NSCopying> {
    NSMutableArray * _enrouteNotices;
    struct { 
        unsigned int historicTravelTime : 1; 
        unsigned int staticTravelTime : 1; 
        unsigned int travelTimeAggressiveEstimate : 1; 
        unsigned int travelTimeBestEstimate : 1; 
        unsigned int travelTimeConservativeEstimate : 1; 
        unsigned int isOfflineResponse : 1; 
        unsigned int routeNoLongerValid : 1; 
    }  _has;
    unsigned int  _historicTravelTime;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _incidentEndOffsetsInETARoutes;
    NSMutableArray * _incidentsOffReRoutes;
    NSMutableArray * _incidentsOnETARoutes;
    NSMutableArray * _incidentsOnReRoutes;
    NSMutableArray * _invalidSectionZilchPoints;
    bool  _isOfflineResponse;
    NSMutableArray * _reroutedRoutes;
    NSData * _routeID;
    bool  _routeNoLongerValid;
    unsigned int  _staticTravelTime;
    NSMutableArray * _steps;
    GEOTrafficBannerText * _trafficBannerText;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _trafficColorOffsets;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _trafficColors;
    unsigned int  _travelTimeAggressiveEstimate;
    unsigned int  _travelTimeBestEstimate;
    unsigned int  _travelTimeConservativeEstimate;
    NSData * _zilchPoints;
}

@property (nonatomic, retain) NSMutableArray *enrouteNotices;
@property (nonatomic, readonly) double expectedTime;
@property (nonatomic) bool hasHistoricTravelTime;
@property (nonatomic) bool hasIsOfflineResponse;
@property (nonatomic, readonly) bool hasRouteID;
@property (nonatomic) bool hasRouteNoLongerValid;
@property (nonatomic) bool hasStaticTravelTime;
@property (nonatomic, readonly) bool hasTrafficBannerText;
@property (nonatomic, readonly) bool hasTrafficIncidentAlert;
@property (nonatomic) bool hasTravelTimeAggressiveEstimate;
@property (nonatomic) bool hasTravelTimeBestEstimate;
@property (nonatomic) bool hasTravelTimeConservativeEstimate;
@property (nonatomic, readonly) bool hasValidTrafficIncidentAlertText;
@property (nonatomic, readonly) bool hasZilchPoints;
@property (nonatomic) unsigned int historicTravelTime;
@property (nonatomic, readonly) unsigned int*incidentEndOffsetsInETARoutes;
@property (nonatomic, readonly) unsigned long long incidentEndOffsetsInETARoutesCount;
@property (nonatomic, retain) NSMutableArray *incidentsOffReRoutes;
@property (nonatomic, retain) NSMutableArray *incidentsOnETARoutes;
@property (nonatomic, retain) NSMutableArray *incidentsOnReRoutes;
@property (nonatomic, retain) NSMutableArray *invalidSectionZilchPoints;
@property (nonatomic) bool isOfflineResponse;
@property (nonatomic, retain) NSMutableArray *reroutedRoutes;
@property (nonatomic, retain) NSData *routeID;
@property (nonatomic) bool routeNoLongerValid;
@property (nonatomic) unsigned int staticTravelTime;
@property (nonatomic, retain) NSMutableArray *steps;
@property (nonatomic, retain) GEOTrafficBannerText *trafficBannerText;
@property (nonatomic, readonly) unsigned int*trafficColorOffsets;
@property (nonatomic, readonly) unsigned long long trafficColorOffsetsCount;
@property (nonatomic, readonly) unsigned int*trafficColors;
@property (nonatomic, readonly) unsigned long long trafficColorsCount;
@property (nonatomic) unsigned int travelTimeAggressiveEstimate;
@property (nonatomic) unsigned int travelTimeBestEstimate;
@property (nonatomic) unsigned int travelTimeConservativeEstimate;
@property (nonatomic, retain) NSData *zilchPoints;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

+ (Class)enrouteNoticeType;
+ (Class)incidentsOffReRoutesType;
+ (Class)incidentsOnETARouteType;
+ (Class)incidentsOnReRoutesType;
+ (Class)invalidSectionZilchPointsType;
+ (Class)reroutedRouteType;
+ (Class)stepType;

- (void).cxx_destruct;
- (void)_addDebugArguments:(id)arg1;
- (void)addEnrouteNotice:(id)arg1;
- (void)addIncidentEndOffsetsInETARoute:(unsigned int)arg1;
- (void)addIncidentsOffReRoutes:(id)arg1;
- (void)addIncidentsOnETARoute:(id)arg1;
- (void)addIncidentsOnReRoutes:(id)arg1;
- (void)addInvalidSectionZilchPoints:(id)arg1;
- (void)addReroutedRoute:(id)arg1;
- (void)addStep:(id)arg1;
- (void)addTrafficColor:(unsigned int)arg1;
- (void)addTrafficColorOffset:(unsigned int)arg1;
- (id)bannerDescription;
- (id)bannerSpoken;
- (id)bannerTitle;
- (void)clearEnrouteNotices;
- (void)clearIncidentEndOffsetsInETARoutes;
- (void)clearIncidentsOffReRoutes;
- (void)clearIncidentsOnETARoutes;
- (void)clearIncidentsOnReRoutes;
- (void)clearInvalidSectionZilchPoints;
- (void)clearReroutedRoutes;
- (void)clearSteps;
- (void)clearTrafficColorOffsets;
- (void)clearTrafficColors;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (id)enrouteNoticeAtIndex:(unsigned long long)arg1;
- (id)enrouteNotices;
- (unsigned long long)enrouteNoticesCount;
- (double)expectedTime;
- (bool)hasHistoricTravelTime;
- (bool)hasIsOfflineResponse;
- (bool)hasRouteID;
- (bool)hasRouteNoLongerValid;
- (bool)hasStaticTravelTime;
- (bool)hasTrafficBannerText;
- (bool)hasTravelTimeAggressiveEstimate;
- (bool)hasTravelTimeBestEstimate;
- (bool)hasTravelTimeConservativeEstimate;
- (bool)hasZilchPoints;
- (unsigned long long)hash;
- (unsigned int)historicTravelTime;
- (unsigned int)incidentEndOffsetsInETARouteAtIndex:(unsigned long long)arg1;
- (unsigned int*)incidentEndOffsetsInETARoutes;
- (unsigned long long)incidentEndOffsetsInETARoutesCount;
- (id)incidentsOffReRoutes;
- (id)incidentsOffReRoutesAtIndex:(unsigned long long)arg1;
- (unsigned long long)incidentsOffReRoutesCount;
- (id)incidentsOnETARouteAtIndex:(unsigned long long)arg1;
- (id)incidentsOnETARoutes;
- (unsigned long long)incidentsOnETARoutesCount;
- (id)incidentsOnReRoutes;
- (id)incidentsOnReRoutesAtIndex:(unsigned long long)arg1;
- (unsigned long long)incidentsOnReRoutesCount;
- (id)invalidSectionZilchPoints;
- (id)invalidSectionZilchPointsAtIndex:(unsigned long long)arg1;
- (unsigned long long)invalidSectionZilchPointsCount;
- (bool)isEqual:(id)arg1;
- (bool)isOfflineResponse;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (double)remainingTimeAlongRoute:(unsigned int)arg1 currentStepRemainingDistance:(double)arg2;
- (id)reroutedRouteAtIndex:(unsigned long long)arg1;
- (id)reroutedRoutes;
- (unsigned long long)reroutedRoutesCount;
- (id)routeID;
- (bool)routeNoLongerValid;
- (void)setDebugBannerTitle:(id)arg1 bannerDescription:(id)arg2 bannerSpoken:(id)arg3;
- (void)setEnrouteNotices:(id)arg1;
- (void)setHasHistoricTravelTime:(bool)arg1;
- (void)setHasIsOfflineResponse:(bool)arg1;
- (void)setHasRouteNoLongerValid:(bool)arg1;
- (void)setHasStaticTravelTime:(bool)arg1;
- (void)setHasTravelTimeAggressiveEstimate:(bool)arg1;
- (void)setHasTravelTimeBestEstimate:(bool)arg1;
- (void)setHasTravelTimeConservativeEstimate:(bool)arg1;
- (void)setHistoricTravelTime:(unsigned int)arg1;
- (void)setIncidentEndOffsetsInETARoutes:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setIncidentsOffReRoutes:(id)arg1;
- (void)setIncidentsOnETARoutes:(id)arg1;
- (void)setIncidentsOnReRoutes:(id)arg1;
- (void)setInvalidSectionZilchPoints:(id)arg1;
- (void)setIsOfflineResponse:(bool)arg1;
- (void)setReroutedRoutes:(id)arg1;
- (void)setRouteID:(id)arg1;
- (void)setRouteNoLongerValid:(bool)arg1;
- (void)setStaticTravelTime:(unsigned int)arg1;
- (void)setSteps:(id)arg1;
- (void)setTrafficBannerText:(id)arg1;
- (void)setTrafficColorOffsets:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setTrafficColors:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setTravelTimeAggressiveEstimate:(unsigned int)arg1;
- (void)setTravelTimeBestEstimate:(unsigned int)arg1;
- (void)setTravelTimeConservativeEstimate:(unsigned int)arg1;
- (void)setZilchPoints:(id)arg1;
- (unsigned int)staticTravelTime;
- (id)stepAtIndex:(unsigned long long)arg1;
- (unsigned long long)stepIndexOfStepWithID:(unsigned int)arg1;
- (id)steps;
- (unsigned long long)stepsCount;
- (id)trafficBannerText;
- (unsigned int)trafficColorAtIndex:(unsigned long long)arg1;
- (unsigned int)trafficColorOffsetAtIndex:(unsigned long long)arg1;
- (unsigned int*)trafficColorOffsets;
- (unsigned long long)trafficColorOffsetsCount;
- (unsigned int*)trafficColors;
- (unsigned long long)trafficColorsCount;
- (unsigned int)travelTimeAggressiveEstimate;
- (unsigned int)travelTimeBestEstimate;
- (unsigned int)travelTimeConservativeEstimate;
- (void)writeTo:(id)arg1;
- (id)zilchPoints;

// Image: /System/Library/PrivateFrameworks/Navigation.framework/Navigation

- (bool)hasTrafficIncidentAlert;
- (bool)hasValidTrafficIncidentAlertText;
- (id)initForRoute:(id)arg1 usingETAsFromOtherRoute:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
