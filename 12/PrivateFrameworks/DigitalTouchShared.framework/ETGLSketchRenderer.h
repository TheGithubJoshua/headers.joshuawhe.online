<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ETGLSketchRenderer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/DigitalTouchShared.framework/ETGLSketchRenderer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/DigitalTouchShared.framework/DigitalTouchShared (1)
 */

@interface ETGLSketchRenderer : NSObject {
    struct { } * _allVertices;
    unsigned int  _allocatedHeight;
    unsigned int  _allocatedWidth;
    unsigned int  _backingHeight;
    unsigned int  _backingWidth;
    void _brushColorForFinalColor;
    void _brushColorForInitialColor;
    CAEAGLLayer * _cachedLayer;
    double  _cometScaleFactor;
    id /* block */  _completionBlock;
    EAGLContext * _context;
    float  _currentTimeClock;
    float  _currentTimeIndex;
    float  _deathTime;
    <ETGLSketchRendererDelegate> * _delegate;
    bool  _isDying;
    float  _lastBirth;
    double  _lineWidthScaleFactor;
    bool  _renderingOffscreen;
    unsigned int  _shaderProgram;
    bool  _useFastVerticalWisp;
    bool  _useThisRendererOnlyForWarmup;
    unsigned int  _vaoLineID;
    unsigned int  _vboVertLineId;
    int  _vertexBufferBegin;
    int  _vertexBufferCount;
    unsigned long long  _vertexCount;
    unsigned int  _viewFramebuffer;
    unsigned int  _viewRenderbuffer;
    double  _wispDelay;
}

@property (nonatomic) struct { }*allVertices;
@property (nonatomic) unsigned int allocatedHeight;
@property (nonatomic) unsigned int allocatedWidth;
@property (nonatomic) unsigned int backingHeight;
@property (nonatomic) unsigned int backingWidth;
@property (nonatomic) void brushColorForFinalColor;
@property (nonatomic) void brushColorForInitialColor;
@property (nonatomic) CAEAGLLayer *cachedLayer;
@property (nonatomic) double cometScaleFactor;
@property (nonatomic, copy) id /* block */ completionBlock;
@property (nonatomic) EAGLContext *context;
@property (nonatomic, readonly) float currentTimeClock;
@property (nonatomic, readonly) float currentTimeIndex;
@property (nonatomic) float deathTime;
@property (nonatomic) <ETGLSketchRendererDelegate> *delegate;
@property (nonatomic) bool isDying;
@property (nonatomic) float lastBirth;
@property (nonatomic) double lineWidthScaleFactor;
@property (nonatomic) bool renderingOffscreen;
@property (nonatomic) unsigned int shaderProgram;
@property (nonatomic) bool useFastVerticalWisp;
@property (nonatomic) unsigned int vaoLineID;
@property (nonatomic) unsigned int vboVertLineId;
@property (nonatomic) int vertexBufferBegin;
@property (nonatomic) int vertexBufferCount;
@property (nonatomic) unsigned long long vertexCount;
@property (nonatomic) unsigned int viewFramebuffer;
@property (nonatomic) unsigned int viewRenderbuffer;
@property (nonatomic) double wispDelay;

+ (void)warmupShaders;

- (void).cxx_destruct;
- (void)_warmupShaders;
- (struct { }*)allVertices;
- (unsigned int)allocatedHeight;
- (unsigned int)allocatedWidth;
- (void)animateOutWithCompletion:(id /* block */)arg1;
- (void)appendDualPointArray:(void *)arg1 length:(void *)arg2 controlPoint:(void *)arg3 alternatePoints:(void *)arg4 alternateLength:(void *)arg5 alternateControlPoint:(void *)arg6 unitSize:(void *)arg7 segmentIndex:(void *)arg8 segmentCount:(void *)arg9; // needs 9 arg types, found 7: /* Warning: Unrecognized filer type: '1' using 'void*' */ void**, unsigned long long, /* Warning: Unrecognized filer type: '4' using 'void*' */ void**, unsigned long long, float, unsigned long long, unsigned long long
- (void)appendPointArray:(/* Warning: Unrecognized filer type: '1' using 'void*' */ void**)arg1 length:(unsigned long long)arg2;
- (unsigned int)backingHeight;
- (unsigned int)backingWidth;
- (void)brushColorForFinalColor;
- (void)brushColorForInitialColor;
- (id)cachedLayer;
- (double)cometScaleFactor;
- (id /* block */)completionBlock;
- (id)context;
- (struct CGImage { }*)createRenderedFrameImageUsingAlpha:(bool)arg1;
- (float)currentTimeClock;
- (float)currentTimeIndex;
- (void)dealloc;
- (float)deathTime;
- (id)delegate;
- (void)erase;
- (id)initWithContext:(id)arg1 andDrawable:(id)arg2;
- (bool)isDying;
- (float)lastBirth;
- (double)lineWidthScaleFactor;
- (int)linkProgramWithVShader:(int)arg1 FShader:(int)arg2;
- (int)loadOneShaderOfType:(unsigned int)arg1 withCString:(const char *)arg2 length:(int)arg3;
- (void)render;
- (bool)renderingOffscreen;
- (void)reset;
- (bool)resizeFromCachedLayer;
- (bool)resizeFromLayer:(id)arg1;
- (void)setAllVertices:(struct { }*)arg1;
- (void)setAllocatedHeight:(unsigned int)arg1;
- (void)setAllocatedWidth:(unsigned int)arg1;
- (void)setBackingHeight:(unsigned int)arg1;
- (void)setBackingWidth:(unsigned int)arg1;
- (void)setBrushColorForFinalColor;
- (void)setBrushColorForInitialColor;
- (void)setCachedLayer:(id)arg1;
- (void)setCometScaleFactor:(double)arg1;
- (void)setCompletionBlock:(id /* block */)arg1;
- (void)setContext:(id)arg1;
- (void)setDeathTime:(float)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFinalDrawingColor:(/* Warning: Unrecognized filer type: '1' using 'void*' */ void**)arg1;
- (void)setInitialDrawingColor:(/* Warning: Unrecognized filer type: '1' using 'void*' */ void**)arg1;
- (void)setIsDying:(bool)arg1;
- (void)setLastBirth:(float)arg1;
- (void)setLineWidthScaleFactor:(double)arg1;
- (void)setRenderingOffscreen:(bool)arg1;
- (void)setShaderProgram:(unsigned int)arg1;
- (void)setUseFastVerticalWisp:(bool)arg1;
- (void)setVaoLineID:(unsigned int)arg1;
- (void)setVboVertLineId:(unsigned int)arg1;
- (void)setVertexBufferBegin:(int)arg1;
- (void)setVertexBufferCount:(int)arg1;
- (void)setVertexCount:(unsigned long long)arg1;
- (void)setViewFramebuffer:(unsigned int)arg1;
- (void)setViewRenderbuffer:(unsigned int)arg1;
- (void)setWispDelay:(double)arg1;
- (void)setupFBOs:(id)arg1;
- (void)setupShaders;
- (void)setupTexture;
- (void)setupVAOs;
- (unsigned int)shaderProgram;
- (void)updateGLWithCurrentTime;
- (void)updateGLWithTime:(float)arg1;
- (void)updateVertexBufferWithVertexCount:(unsigned long long)arg1;
- (bool)useFastVerticalWisp;
- (unsigned int)vaoLineID;
- (unsigned int)vboVertLineId;
- (int)vertexBufferBegin;
- (int)vertexBufferCount;
- (unsigned long long)vertexCount;
- (unsigned int)viewFramebuffer;
- (unsigned int)viewRenderbuffer;
- (double)wispDelay;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
