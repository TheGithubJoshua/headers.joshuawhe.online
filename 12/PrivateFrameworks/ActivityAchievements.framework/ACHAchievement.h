<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ACHAchievement.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ActivityAchievements.framework/ACHAchievement.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ActivityAchievements.framework/ActivityAchievements (1)
 */

@interface ACHAchievement : NSObject <NSSecureCoding> {
    struct { 
        float red; 
        float green; 
        float blue; 
    }  _badgeEnamelColor;
    struct { 
        float red; 
        float green; 
        float blue; 
    }  _badgeMetalColor;
    long long  _badgeModelVersion;
    NSString * _badgeShapeName;
    bool  _badgeUsesFullColorEnamel;
    bool  _badgeUsesTriColorEnamel;
    NSDictionary * _customPlaceholderValues;
    NSArray * _earnedInstances;
    struct { 
        float red; 
        float green; 
        float blue; 
    }  _enamelTriColor1;
    struct { 
        float red; 
        float green; 
        float blue; 
    }  _enamelTriColor2;
    struct { 
        float red; 
        float green; 
        float blue; 
    }  _enamelTriColor3;
    bool  _faceHasMetalInlay;
    HKQuantity * _goal;
    NSURL * _localizationBundleURL;
    HKQuantity * _progress;
    NSURL * _propertyListBundleURL;
    NSURL * _resourceBundleURL;
    NSString * _section;
    NSURL * _stickerBundleURL;
    ACHTemplate * _template;
    NSString * _textureFilename;
    bool  _unearnedUsesTwoToneEnamel;
}

@property (nonatomic) struct { float x1; float x2; float x3; } badgeEnamelColor;
@property (nonatomic) struct { float x1; float x2; float x3; } badgeMetalColor;
@property (nonatomic) long long badgeModelVersion;
@property (nonatomic, retain) NSString *badgeShapeName;
@property (nonatomic) bool badgeUsesFullColorEnamel;
@property (nonatomic) bool badgeUsesTriColorEnamel;
@property (nonatomic, retain) NSDictionary *customPlaceholderValues;
@property (nonatomic, readonly) NSArray *earnedInstances;
@property (nonatomic) struct { float x1; float x2; float x3; } enamelTriColor1;
@property (nonatomic) struct { float x1; float x2; float x3; } enamelTriColor2;
@property (nonatomic) struct { float x1; float x2; float x3; } enamelTriColor3;
@property (nonatomic) bool faceHasMetalInlay;
@property (nonatomic, retain) HKQuantity *goal;
@property (nonatomic, readonly) bool hasClientRequiredURLs;
@property (nonatomic, retain) NSURL *localizationBundleURL;
@property (nonatomic, retain) HKQuantity *progress;
@property (nonatomic, retain) NSURL *propertyListBundleURL;
@property (nonatomic, retain) NSURL *resourceBundleURL;
@property (nonatomic, copy) NSString *section;
@property (nonatomic, retain) NSURL *stickerBundleURL;
@property (nonatomic, readonly) ACHTemplate *template;
@property (nonatomic, retain) NSString *textureFilename;
@property (nonatomic, readonly) bool unearned;
@property (nonatomic) bool unearnedUsesTwoToneEnamel;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_expandedClientRequiredURLs;
- (struct { float x1; float x2; float x3; })badgeEnamelColor;
- (struct { float x1; float x2; float x3; })badgeMetalColor;
- (long long)badgeModelVersion;
- (id)badgeShapeName;
- (bool)badgeUsesFullColorEnamel;
- (bool)badgeUsesTriColorEnamel;
- (id)customPlaceholderValues;
- (id)description;
- (id)earnedInstances;
- (struct { float x1; float x2; float x3; })enamelTriColor1;
- (struct { float x1; float x2; float x3; })enamelTriColor2;
- (struct { float x1; float x2; float x3; })enamelTriColor3;
- (void)encodeWithCoder:(id)arg1;
- (bool)faceHasMetalInlay;
- (id)goal;
- (bool)hasClientRequiredURLs;
- (unsigned long long)hash;
- (id)initWithCodable:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithTemplate:(id)arg1 earnedInstances:(id)arg2;
- (bool)isEqual:(id)arg1;
- (id)localizationBundleURL;
- (id)progress;
- (id)propertyListBundleURL;
- (id)resourceBundleURL;
- (id)section;
- (void)setBadgeEnamelColor:(struct { float x1; float x2; float x3; })arg1;
- (void)setBadgeMetalColor:(struct { float x1; float x2; float x3; })arg1;
- (void)setBadgeModelVersion:(long long)arg1;
- (void)setBadgeShapeName:(id)arg1;
- (void)setBadgeUsesFullColorEnamel:(bool)arg1;
- (void)setBadgeUsesTriColorEnamel:(bool)arg1;
- (void)setCustomPlaceholderValues:(id)arg1;
- (void)setEnamelTriColor1:(struct { float x1; float x2; float x3; })arg1;
- (void)setEnamelTriColor2:(struct { float x1; float x2; float x3; })arg1;
- (void)setEnamelTriColor3:(struct { float x1; float x2; float x3; })arg1;
- (void)setFaceHasMetalInlay:(bool)arg1;
- (void)setGoal:(id)arg1;
- (void)setLocalizationBundleURL:(id)arg1;
- (void)setProgress:(id)arg1;
- (void)setPropertyListBundleURL:(id)arg1;
- (void)setResourceBundleURL:(id)arg1;
- (void)setSection:(id)arg1;
- (void)setStickerBundleURL:(id)arg1;
- (void)setTextureFilename:(id)arg1;
- (void)setUnearnedUsesTwoToneEnamel:(bool)arg1;
- (id)shallowCopyReplacingEarnedInstances:(id)arg1;
- (id)stickerBundleURL;
- (id)template;
- (id)textureFilename;
- (bool)unearned;
- (bool)unearnedUsesTwoToneEnamel;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
