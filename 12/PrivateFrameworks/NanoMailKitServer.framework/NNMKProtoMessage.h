<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NNMKProtoMessage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NanoMailKitServer.framework/NNMKProtoMessage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NanoMailKitServer.framework/NanoMailKitServer (1)
 */

@interface NNMKProtoMessage : PBCodable <NSCopying> {
    NSString * _accountId;
    NSMutableArray * _bccs;
    NSMutableArray * _ccs;
    NSString * _conversationId;
    NSData * _dateReceived;
    NSData * _dateSent;
    NSString * _from;
    struct { 
        unsigned int isSpecialMailboxSpecific : 1; 
        unsigned int status : 1; 
        unsigned int statusVersion : 1; 
        unsigned int isThreadSpecific : 1; 
    }  _has;
    unsigned int  _isSpecialMailboxSpecific;
    bool  _isThreadSpecific;
    NSString * _mailboxId;
    NSString * _messageId;
    NSString * _messageIdHeader;
    NSString * _notificationMessageId;
    NSString * _publisherBulletinId;
    NSString * _remoteId;
    unsigned int  _status;
    unsigned int  _statusVersion;
    NSString * _subject;
    NSMutableArray * _tos;
}

@property (nonatomic, retain) NSString *accountId;
@property (nonatomic, retain) NSMutableArray *bccs;
@property (nonatomic, retain) NSMutableArray *ccs;
@property (nonatomic, retain) NSString *conversationId;
@property (nonatomic, retain) NSData *dateReceived;
@property (nonatomic, retain) NSData *dateSent;
@property (nonatomic, retain) NSString *from;
@property (nonatomic, readonly) bool hasAccountId;
@property (nonatomic, readonly) bool hasConversationId;
@property (nonatomic, readonly) bool hasDateReceived;
@property (nonatomic, readonly) bool hasDateSent;
@property (nonatomic, readonly) bool hasFrom;
@property (nonatomic) bool hasIsSpecialMailboxSpecific;
@property (nonatomic) bool hasIsThreadSpecific;
@property (nonatomic, readonly) bool hasMailboxId;
@property (nonatomic, readonly) bool hasMessageId;
@property (nonatomic, readonly) bool hasMessageIdHeader;
@property (nonatomic, readonly) bool hasNotificationMessageId;
@property (nonatomic, readonly) bool hasPublisherBulletinId;
@property (nonatomic, readonly) bool hasRemoteId;
@property (nonatomic) bool hasStatus;
@property (nonatomic) bool hasStatusVersion;
@property (nonatomic, readonly) bool hasSubject;
@property (nonatomic) unsigned int isSpecialMailboxSpecific;
@property (nonatomic) bool isThreadSpecific;
@property (nonatomic, retain) NSString *mailboxId;
@property (nonatomic, retain) NSString *messageId;
@property (nonatomic, retain) NSString *messageIdHeader;
@property (nonatomic, retain) NSString *notificationMessageId;
@property (nonatomic, retain) NSString *publisherBulletinId;
@property (nonatomic, retain) NSString *remoteId;
@property (nonatomic) unsigned int status;
@property (nonatomic) unsigned int statusVersion;
@property (nonatomic, retain) NSString *subject;
@property (nonatomic, retain) NSMutableArray *tos;

+ (Class)bccType;
+ (Class)ccType;
+ (id)protoMessageFromMessage:(id)arg1 organizedByThread:(bool)arg2 sanitizeMessageId:(bool)arg3 supportsStandaloneMode:(bool)arg4;
+ (Class)toType;

- (void).cxx_destruct;
- (id)accountId;
- (void)addBcc:(id)arg1;
- (void)addCc:(id)arg1;
- (void)addTo:(id)arg1;
- (id)bccAtIndex:(unsigned long long)arg1;
- (id)bccs;
- (unsigned long long)bccsCount;
- (id)ccAtIndex:(unsigned long long)arg1;
- (id)ccs;
- (unsigned long long)ccsCount;
- (void)clearBccs;
- (void)clearCcs;
- (void)clearTos;
- (id)conversationId;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dateReceived;
- (id)dateSent;
- (id)description;
- (id)dictionaryRepresentation;
- (id)from;
- (bool)hasAccountId;
- (bool)hasConversationId;
- (bool)hasDateReceived;
- (bool)hasDateSent;
- (bool)hasFrom;
- (bool)hasIsSpecialMailboxSpecific;
- (bool)hasIsThreadSpecific;
- (bool)hasMailboxId;
- (bool)hasMessageId;
- (bool)hasMessageIdHeader;
- (bool)hasNotificationMessageId;
- (bool)hasPublisherBulletinId;
- (bool)hasRemoteId;
- (bool)hasStatus;
- (bool)hasStatusVersion;
- (bool)hasSubject;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (unsigned int)isSpecialMailboxSpecific;
- (bool)isThreadSpecific;
- (id)mailboxId;
- (void)mergeFrom:(id)arg1;
- (id)messageId;
- (id)messageIdHeader;
- (id)notificationMessageId;
- (id)publisherBulletinId;
- (bool)readFrom:(id)arg1;
- (id)remoteId;
- (void)setAccountId:(id)arg1;
- (void)setBccs:(id)arg1;
- (void)setCcs:(id)arg1;
- (void)setConversationId:(id)arg1;
- (void)setDateReceived:(id)arg1;
- (void)setDateSent:(id)arg1;
- (void)setFrom:(id)arg1;
- (void)setHasIsSpecialMailboxSpecific:(bool)arg1;
- (void)setHasIsThreadSpecific:(bool)arg1;
- (void)setHasStatus:(bool)arg1;
- (void)setHasStatusVersion:(bool)arg1;
- (void)setIsSpecialMailboxSpecific:(unsigned int)arg1;
- (void)setIsThreadSpecific:(bool)arg1;
- (void)setMailboxId:(id)arg1;
- (void)setMessageId:(id)arg1;
- (void)setMessageIdHeader:(id)arg1;
- (void)setNotificationMessageId:(id)arg1;
- (void)setPublisherBulletinId:(id)arg1;
- (void)setRemoteId:(id)arg1;
- (void)setStatus:(unsigned int)arg1;
- (void)setStatusVersion:(unsigned int)arg1;
- (void)setSubject:(id)arg1;
- (void)setTos:(id)arg1;
- (unsigned int)status;
- (unsigned int)statusVersion;
- (id)subject;
- (id)toAtIndex:(unsigned long long)arg1;
- (id)tos;
- (unsigned long long)tosCount;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
