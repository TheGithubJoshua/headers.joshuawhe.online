<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CNObservable.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ContactsFoundation.framework/CNObservable.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ContactsFoundation.framework/ContactsFoundation ()
 */

@interface CNObservable : NSObject <CNObservable> {
    NSString * _pipelineDescription;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) NSString *debugPipelineDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

// Image: /System/Library/PrivateFrameworks/ContactsFoundation.framework/ContactsFoundation

+ (id)amb:(id)arg1;
+ (id)binderTypeForResultType:(unsigned long long)arg1;
+ (id)combineLatest:(id)arg1;
+ (id)combineLatest:(id)arg1 schedulerProvider:(id)arg2;
+ (id)concatenate:(id)arg1;
+ (id)emptyObservable;
+ (id)forkJoin:(id)arg1 scheduler:(id)arg2;
+ (id)merge:(id)arg1;
+ (id)merge:(id)arg1 schedulerProvider:(id)arg2;
+ (id)neverObservable;
+ (id)observableForKeyPath:(id)arg1 ofObject:(id)arg2 withOptions:(unsigned long long)arg3;
+ (id)observableOnDarwinNotificationCenterWithName:(id)arg1;
+ (id)observableOnDefaultNotificationCenterWithName:(id)arg1 object:(id)arg2;
+ (id)observableOnNotificationCenter:(id)arg1 withName:(id)arg2 object:(id)arg3;
+ (id)observableWithAbsoluteTimestamps:(id)arg1 schedulerProvider:(id)arg2;
+ (id)observableWithBlock:(id /* block */)arg1;
+ (id)observableWithEmailAddressesInString:(id)arg1;
+ (id)observableWithError:(id)arg1;
+ (id)observableWithFuture:(id)arg1;
+ (id)observableWithFutures:(id)arg1;
+ (id)observableWithFutures:(id)arg1 schedulerProvider:(id)arg2;
+ (id)observableWithInitialState:(id)arg1 condition:(id /* block */)arg2 nextState:(id /* block */)arg3 resultSelector:(id /* block */)arg4;
+ (id)observableWithInitialState:(id)arg1 condition:(id /* block */)arg2 nextState:(id /* block */)arg3 resultSelector:(id /* block */)arg4 delay:(id /* block */)arg5 scheduler:(id)arg6;
+ (id)observableWithInitialState:(id)arg1 condition:(id /* block */)arg2 nextState:(id /* block */)arg3 resultSelector:(id /* block */)arg4 scheduler:(id)arg5;
+ (id)observableWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
+ (id)observableWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 interval:(double)arg2 scheduler:(id)arg3;
+ (id)observableWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 scheduler:(id)arg2;
+ (id)observableWithRelativeTimestamps:(id)arg1 schedulerProvider:(id)arg2;
+ (id)observableWithResult:(id)arg1;
+ (id)observableWithResults:(id)arg1;
+ (id)observableWithResults:(id)arg1 interval:(double)arg2 scheduler:(id)arg3;
+ (id)observableWithResults:(id)arg1 scheduler:(id)arg2;
+ (id)observableWithScannerResultsInString:(id)arg1;
+ (id)observableWithScannerResultsOfType:(unsigned long long)arg1 inString:(id)arg2;
+ (id)observableWithTimeInterval:(double)arg1 scheduler:(id)arg2;
+ (id)progressiveForkJoin:(id)arg1 scheduler:(id)arg2;
+ (void)sendNextTimestampFromQueue:(id)arg1 toObserver:(id)arg2 untilCanceled:(id)arg3 scheduler:(id)arg4;
+ (id)timerWithDelay:(double)arg1;
+ (id)timerWithDelay:(double)arg1 scheduler:(id)arg2;

- (void).cxx_destruct;
- (id)allObjects:(id*)arg1;
- (id)ambWith:(id)arg1;
- (id)any:(id /* block */)arg1;
- (id)buffer:(unsigned long long)arg1;
- (id)buffer:(unsigned long long)arg1 interval:(double)arg2;
- (id)buffer:(unsigned long long)arg1 interval:(double)arg2 scheduler:(id)arg3;
- (id)bufferWithInterval:(double)arg1;
- (id)bufferWithInterval:(double)arg1 scheduler:(id)arg2;
- (id)concatMap:(id /* block */)arg1;
- (id)concatMap:(id /* block */)arg1 schedulerProvider:(id)arg2;
- (id)debugPipelineDescription;
- (id)delay:(double)arg1 scheduler:(id)arg2;
- (id)delaySubscription:(double)arg1 scheduler:(id)arg2;
- (id)dematerialize;
- (id)distinct;
- (id)distinctUntilChanged;
- (id)doOnCancel:(id /* block */)arg1;
- (id)doOnCompletion:(id /* block */)arg1;
- (id)doOnError:(id /* block */)arg1;
- (id)doOnNext:(id /* block */)arg1;
- (id)doOnSubscribe:(id /* block */)arg1;
- (id)doOnTerminate:(id /* block */)arg1;
- (void)enumerateObjectsUsingBlock:(id /* block */)arg1;
- (id)filter:(id /* block */)arg1;
- (id)flatMap:(id /* block */)arg1;
- (id)flatMap:(id /* block */)arg1 schedulerProvider:(id)arg2;
- (id)ignoreElements;
- (id)map:(id /* block */)arg1;
- (id)materialize;
- (id)observeOn:(id)arg1;
- (id)onEmpty:(id)arg1;
- (id)onError:(id)arg1;
- (id)onErrorHandler:(id /* block */)arg1;
- (id)pipelineDescription:(id /* block */)arg1;
- (id)pipelineDescriptionWithOperation:(id /* block */)arg1 onObservable:(id)arg2;
- (id)publish;
- (id)sample:(double)arg1;
- (id)sample:(double)arg1 scheduler:(id)arg2;
- (id)sampleWithObservable:(id)arg1;
- (id)scan:(id /* block */)arg1;
- (id)scan:(id /* block */)arg1 seed:(id)arg2;
- (id)skip:(unsigned long long)arg1;
- (id)skipLast:(unsigned long long)arg1;
- (id)skipUntil:(id)arg1;
- (id)startWith:(id)arg1;
- (id)startWith:(id)arg1 scheduler:(id)arg2;
- (id)subscribe:(id)arg1;
- (id)subscribeOn:(id)arg1;
- (id)switch;
- (id)switchMap:(id /* block */)arg1;
- (id)switchMap:(id /* block */)arg1 schedulerProvider:(id)arg2;
- (id)switchWithSchedulerProvider:(id)arg1;
- (id)take:(unsigned long long)arg1;
- (id)takeLast:(unsigned long long)arg1;
- (id)takeUntil:(id)arg1;
- (id)throttle:(double)arg1 options:(unsigned long long)arg2 schedulerProvider:(id)arg3;
- (id)throttle:(double)arg1 schedulerProvider:(id)arg2;
- (id)throttleFirst:(double)arg1 scheduler:(id)arg2;
- (id)throttleFirstAndLast:(double)arg1 schedulerProvider:(id)arg2;
- (id)timeInterval;
- (id)timeIntervalWithScheduler:(id)arg1;
- (id)timeoutAfterDelay:(double)arg1 alternateObservable:(id)arg2 schedule:(id)arg3;
- (id)timestampWithScheduler:(id)arg1;
- (id)toArray;
- (id)using:(id /* block */)arg1;

// Image: /System/Library/PrivateFrameworks/ContactsAutocomplete.framework/ContactsAutocomplete

- (id)activityIndicatingObservableWithActivityDidStartHandler:(id /* block */)arg1 activityDidStopHandler:(id /* block */)arg2;
- (id)autocompleteTimeoutAfterDelay:(double)arg1 doOnTimeout:(id /* block */)arg2 scheduler:(id)arg3;
- (id)localObservableWithScheduler:(id)arg1;
- (id)localObservableWithScheduler:(id)arg1 doOnTimeout:(id /* block */)arg2;
- (id)networkObservableWithActivityDidStartHandler:(id /* block */)arg1 activityDidStopHandler:(id /* block */)arg2 timeoutDelay:(double)arg3 subscriptionDelay:(double)arg4 scheduler:(id)arg5;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
