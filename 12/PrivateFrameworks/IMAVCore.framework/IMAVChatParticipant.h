<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMAVChatParticipant.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMAVCore.framework/IMAVChatParticipant.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMAVCore.framework/IMAVCore (1000)
 */

@interface IMAVChatParticipant : NSObject {
    NSArray * _additionalPeers;
    bool  _audioMuted;
    IMAVChat * _avChat;
    unsigned int  _cameraOrientation;
    unsigned int  _cameraType;
    unsigned int  _chatEndedReason;
    int  _chatError;
    NSString * _conferenceID;
    NSTimer * _connectTimeoutTimer;
    NSArray * _excludingPushTokens;
    bool  _hasReinitiateCapability;
    IMHandle * _imHandle;
    NSData * _inFrequencyLevel;
    bool  _inviteDelivered;
    IMHandle * _inviter;
    bool  _isInitiator;
    bool  _mediaStalled;
    NSData * _outFrequencyLevel;
    NSMutableArray * _participantsCallInfo;
    NSDictionary * _properties;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _remoteLandscapeContentRect;
    struct CGSize { 
        double width; 
        double height; 
    }  _remoteLandscapeOrientation;
    struct CGSize { 
        double width; 
        double height; 
    }  _remotePIPLandscapeOrientation;
    struct CGSize { 
        double width; 
        double height; 
    }  _remotePIPPortraitOrientation;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _remotePortraitContentRect;
    struct CGSize { 
        double width; 
        double height; 
    }  _remotePortraitOrientation;
    unsigned int  _screenOrientation;
    bool  _sendingAudio;
    bool  _sendingVideo;
    unsigned int  _state;
    NSString * _vcPartyID;
    bool  _videoDegraded;
    bool  _videoPaused;
}

@property (nonatomic, readonly) long long _activeCallID;
@property (setter=_setConferenceID:, nonatomic, retain) NSString *_conferenceID;
@property (setter=_setConnectTimeoutTimer:, retain) NSTimer *_connectTimeoutTimer;
@property (setter=_setInviteDelivered:) bool _inviteDelivered;
@property (nonatomic, retain) NSMutableArray *_participantsCallInfo;
@property (setter=_setRemoteLandscapeContentRect:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _remoteLandscapeContentRect;
@property (setter=_setRemoteLandscapeOrientation:, nonatomic) struct CGSize { double x1; double x2; } _remoteLandscapeOrientation;
@property (setter=_setRemotePIPLandscapeOrientation:, nonatomic) struct CGSize { double x1; double x2; } _remotePIPLandscapeOrientation;
@property (setter=_setRemotePIPPortraitOrientation:, nonatomic) struct CGSize { double x1; double x2; } _remotePIPPortraitOrientation;
@property (setter=_setRemotePortraitContentRect:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _remotePortraitContentRect;
@property (setter=_setRemotePortraitOrientation:, nonatomic) struct CGSize { double x1; double x2; } _remotePortraitOrientation;
@property (setter=_setScreenOrientation:, nonatomic) unsigned int _screenOrientation;
@property (nonatomic, retain) NSArray *additionalPeers;
@property (setter=setAVChat:, nonatomic) IMAVChat *avChat;
@property (setter=_setCameraOrientation:) unsigned int cameraOrientation;
@property (setter=_setCameraType:) unsigned int cameraType;
@property (setter=_setChatError:, nonatomic) int error;
@property (nonatomic, retain) NSArray *excludingPushTokens;
@property (nonatomic, readonly) bool hasConnectingSessions;
@property (nonatomic) bool hasReinitiateCapability;
@property (nonatomic, readonly) bool hasUnfinishedSessions;
@property (nonatomic, readonly, retain) IMHandle *imHandle;
@property (nonatomic, retain) NSData *inFrequencyLevel;
@property (nonatomic, readonly, retain) IMHandle *invitedBy;
@property (setter=setAudioMuted:, nonatomic) bool isAudioMuted;
@property (nonatomic, readonly) bool isInitiator;
@property (nonatomic, readonly) bool isLocalParticipant;
@property (nonatomic, readonly) bool isMediaStalled;
@property (setter=setMediaStalled:) bool isMediaStalled;
@property (nonatomic, readonly) bool isSendingAudio;
@property (nonatomic, readonly) bool isSendingVideo;
@property (nonatomic, readonly) bool isVideoDegraded;
@property (setter=setVideoDegraded:) bool isVideoDegraded;
@property (setter=setVideoPaused:, nonatomic) bool isVideoPaused;
@property (nonatomic, readonly, retain) NSString *name;
@property (nonatomic, retain) NSData *outFrequencyLevel;
@property (nonatomic, retain) NSDictionary *properties;
@property (nonatomic, readonly) unsigned int reasonChatEnded;
@property (nonatomic) unsigned int state;
@property (setter=setVCPartyID:, retain) NSString *vcPartyID;
@property (nonatomic) void*videoBackLayer;
@property (nonatomic) void*videoLayer;

- (long long)_activeCallID;
- (id)_callInfoForCallID:(long long)arg1;
- (id)_callInfoForReinitiate;
- (id)_callInfoWithState:(long long)arg1;
- (id)_callInfosWaitingForAcceptAction;
- (id)_callInfosWaitingForResponse;
- (void)_cancelInvitationWithReason:(unsigned int)arg1 response:(id)arg2;
- (void)_cleanupOrphanedCallInfos;
- (id)_conferenceID;
- (void)_connectTimeout:(id)arg1;
- (id)_connectTimeoutTimer;
- (bool)_generateCallInfo:(id)arg1;
- (void)_handleIMAVResponse:(unsigned int)arg1;
- (void)_hangupCallLaterIfReinitiateFailsForCallInfo:(id)arg1;
- (id)_initAs:(id)arg1 invitedBy:(id)arg2 sendingAudio:(bool)arg3 sendingVideo:(bool)arg4 usingICE:(bool)arg5 toChat:(id)arg6 inState:(unsigned int)arg7 withError:(int)arg8 andReason:(unsigned int)arg9 andVCPartyID:(id)arg10 account:(id)arg11;
- (bool)_inviteDelivered;
- (id)_natType;
- (void)_noteInviteDelivered:(bool)arg1;
- (id)_participantsCallInfo;
- (id)_processIncomingCallProperties:(id)arg1;
- (void)_processPropertyUpdate:(id)arg1;
- (bool)_processResponseDictionary:(id)arg1 allowSecondConnection:(bool)arg2;
- (id)_proxyRepresentation;
- (void)_reInitiateWithCallInfo:(id)arg1;
- (void)_registerCallInfo:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_remoteLandscapeContentRect;
- (struct CGSize { double x1; double x2; })_remoteLandscapeOrientation;
- (struct CGSize { double x1; double x2; })_remotePIPLandscapeOrientation;
- (struct CGSize { double x1; double x2; })_remotePIPPortraitOrientation;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_remotePortraitContentRect;
- (struct CGSize { double x1; double x2; })_remotePortraitOrientation;
- (unsigned int)_screenOrientation;
- (void)_sendResponse:(unsigned int)arg1 callInfo:(id)arg2;
- (void)_setCameraOrientation:(unsigned int)arg1;
- (void)_setCameraType:(unsigned int)arg1;
- (void)_setChatError:(int)arg1;
- (void)_setConferenceID:(id)arg1;
- (void)_setConnectTimeoutTimer:(id)arg1;
- (void)_setInviteDelivered:(bool)arg1;
- (void)_setRemoteLandscapeContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setRemoteLandscapeOrientation:(struct CGSize { double x1; double x2; })arg1;
- (void)_setRemotePIPLandscapeOrientation:(struct CGSize { double x1; double x2; })arg1;
- (void)_setRemotePIPPortraitOrientation:(struct CGSize { double x1; double x2; })arg1;
- (void)_setRemotePortraitContentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setRemotePortraitOrientation:(struct CGSize { double x1; double x2; })arg1;
- (void)_setScreenOrientation:(unsigned int)arg1;
- (void)_setState:(unsigned int)arg1 withReason:(unsigned int)arg2 andError:(int)arg3;
- (void)_switchToUseNewIMHandle:(id)arg1;
- (void)_updateProperties:(id)arg1;
- (id)additionalPeers;
- (struct CGSize { double x1; double x2; })aspectRatioForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
- (id)avChat;
- (long long)bestCallID;
- (id)callInfoBeingHandedOff;
- (unsigned int)cameraOrientation;
- (unsigned int)cameraType;
- (void)cancelInvitation;
- (void)cancelInvitationWithReason:(unsigned int)arg1;
- (void)cancelInvitationWithResponse:(unsigned int)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentRectForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
- (void)dealloc;
- (id)description;
- (void)disconnectFromAVChat;
- (int)error;
- (id)excludingPushTokens;
- (bool)hasConnectingSessions;
- (bool)hasReinitiateCapability;
- (bool)hasUnfinishedSessions;
- (id)imHandle;
- (id)inFrequencyLevel;
- (id)init;
- (id)initAs:(id)arg1 invitedBy:(id)arg2 toChat:(id)arg3 account:(id)arg4;
- (id)invitedBy;
- (bool)isAudioMuted;
- (bool)isInitiator;
- (bool)isLocalParticipant;
- (bool)isMediaStalled;
- (bool)isSendingAudio;
- (bool)isSendingVideo;
- (bool)isVideoDegraded;
- (bool)isVideoPaused;
- (struct CGSize { double x1; double x2; })localAspectRatioForCameraOrientation:(unsigned int)arg1 cameraType:(unsigned int)arg2;
- (bool)matchesAVConferenceCallID:(long long)arg1;
- (id)name;
- (id)outFrequencyLevel;
- (id)properties;
- (unsigned int)reasonChatEnded;
- (void)reinitializeCallForCallID:(unsigned int)arg1;
- (void)requestIconIfNecessary;
- (void)resetWaitingToConnectTimer;
- (void)sendAVMessage:(unsigned int)arg1 userInfo:(id)arg2;
- (void)sendInvitation;
- (void)sendResponse:(unsigned int)arg1;
- (void)setAVChat:(id)arg1;
- (void)setAdditionalPeers:(id)arg1;
- (void)setAudioMuted:(bool)arg1;
- (void)setExcludingPushTokens:(id)arg1;
- (void)setHasReinitiateCapability:(bool)arg1;
- (void)setInFrequencyLevel:(id)arg1;
- (void)setMediaStalled:(bool)arg1;
- (void)setOutFrequencyLevel:(id)arg1;
- (void)setProperties:(id)arg1;
- (void)setState:(unsigned int)arg1;
- (void)setStateToEndedWithReason:(unsigned int)arg1 andError:(int)arg2;
- (void)setVCPartyID:(id)arg1;
- (void)setVideoBackLayer:(void*)arg1;
- (void)setVideoDegraded:(bool)arg1;
- (void)setVideoLayer:(void*)arg1;
- (void)setVideoPaused:(bool)arg1;
- (void)setWaitingToConnect:(bool)arg1;
- (void)set_participantsCallInfo:(id)arg1;
- (unsigned int)state;
- (id)vcPartyID;
- (void*)videoBackLayer;
- (void*)videoLayer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
