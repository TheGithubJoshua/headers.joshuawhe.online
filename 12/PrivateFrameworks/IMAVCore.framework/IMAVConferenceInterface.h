<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMAVConferenceInterface.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMAVCore.framework/IMAVConferenceInterface.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMAVCore.framework/IMAVCore (1000)
 */

@interface IMAVConferenceInterface : IMAVInterface <AVConferenceDelegate> {
    NSMutableDictionary * _avConferences;
    NSLock * _avConferencesLock;
    NSMutableArray * _avConferencesToCleanup;
    bool  _duringInit;
    bool  _pendingCleanup;
}

@property (nonatomic, readonly) AVConference *controller;

+ (void)_postParticipantMediaChangeNotification:(id)arg1 cameraChanged:(bool)arg2 orientationChanged:(bool)arg3 aspectChanged:(bool)arg4 contentRectChanged:(bool)arg5 cameraWillSwitch:(bool)arg6 camera:(unsigned int)arg7 orentation:(unsigned int)arg8 aspect:(struct CGSize { double x1; double x2; })arg9 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg10;
+ (void)_postParticipantScreenAttributesChangeNotification:(id)arg1 cameraChanged:(bool)arg2 orientationChanged:(bool)arg3 aspectChanged:(bool)arg4 cameraWillSwitch:(bool)arg5 camera:(unsigned int)arg6 orentation:(unsigned int)arg7 aspect:(struct CGSize { double x1; double x2; })arg8;
+ (bool)_useMultipleAVConference;

- (void)_avChatDealloc:(id)arg1;
- (id)_avChatForConference:(id)arg1;
- (id)_avChatForConference:(id)arg1 callID:(long long)arg2 errorString:(id)arg3;
- (void)_cleanupAVInterface;
- (void)_conferenceEnded:(id)arg1;
- (id)_conferenceForAVChat:(id)arg1;
- (void)_configureAVConference:(id)arg1 forChat:(id)arg2;
- (id)_controller;
- (int)_deviceRoleForAVChat:(id)arg1;
- (id)_existingConferenceForAVChat:(id)arg1;
- (id)_existingConferenceForAVChatGUID:(id)arg1;
- (id)_faceTimeUUID;
- (bool)_hasAVConferenceObjectsForChatsOtherThan:(id)arg1;
- (id)_imAVChatParticipantForConference:(id)arg1 callID:(long long)arg2 errorString:(id)arg3;
- (void)_notifyAboutPotentialCallForChat:(id)arg1;
- (void)_queueAVConferenceForCleanup:(id)arg1;
- (bool)_submitEndCallMetric:(id)arg1 forCallID:(long long)arg2;
- (bool)_submitLoggingInformation:(id)arg1 forChat:(id)arg2;
- (int)avChat:(id)arg1 endConferenceForUserID:(id)arg2;
- (bool)avChat:(id)arg1 generateCallInfoForID:(id)arg2 service:(id)arg3 usingRelay:(bool)arg4 callInfo:(id)arg5;
- (void)avChat:(id)arg1 prepareConnectionWithCallInfo:(id)arg2;
- (void)avChat:(id)arg1 setLocalLandscapeAspectRatio:(struct CGSize { double x1; double x2; })arg2 localPortraitAspectRatio:(struct CGSize { double x1; double x2; })arg3;
- (void)avChat:(id)arg1 setMute:(bool)arg2;
- (void)avChat:(id)arg1 setPaused:(bool)arg2;
- (void)avChat:(id)arg1 setSendingAudio:(bool)arg2;
- (void)avChat:(id)arg1 setSendingVideo:(bool)arg2;
- (void)cancelConferenceForAVChat:(id)arg1;
- (unsigned long long)capabilities;
- (unsigned long long)capabilitiesOfCPU;
- (unsigned long long)capabilitiesOfNetwork;
- (void)chatRelayedStatusChanged:(id)arg1;
- (void)chatStateUpdated;
- (void)conference:(id)arg1 cancelRelayRequest:(long long)arg2 requestDict:(id)arg3;
- (void)conference:(id)arg1 didChangeLocalVariablesForCallID:(long long)arg2;
- (void)conference:(id)arg1 didStartSession:(bool)arg2 withUserInfo:(id)arg3;
- (void)conference:(id)arg1 didStopWithCallID:(long long)arg2 error:(id)arg3;
- (void)conference:(id)arg1 didStopWithCallID:(long long)arg2 error:(id)arg3 callMetadata:(id)arg4;
- (void)conference:(id)arg1 inititiateRelayRequest:(long long)arg2 requestDict:(id)arg3;
- (void)conference:(id)arg1 localIPChange:(id)arg2 withCallID:(long long)arg3;
- (void)conference:(id)arg1 receivedFirstRemoteFrameForCallID:(long long)arg2;
- (void)conference:(id)arg1 reinitializeCallForCallID:(unsigned int)arg2;
- (void)conference:(id)arg1 remoteAudioPaused:(bool)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteScreenAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteVideoAttributesChanged:(id)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 remoteVideoPaused:(bool)arg2 callID:(long long)arg3;
- (void)conference:(id)arg1 sendRelayUpdate:(long long)arg2 updateDict:(id)arg3;
- (void)conference:(id)arg1 updateInputFrequencyLevel:(id)arg2;
- (void)conference:(id)arg1 updateOutputFrequencyLevel:(id)arg2;
- (void)conference:(id)arg1 videoQualityNotificationForCallID:(long long)arg2 isDegraded:(bool)arg3 isRemote:(bool)arg4;
- (void)conference:(id)arg1 withCallID:(long long)arg2 didPauseAudio:(bool)arg3 error:(id)arg4;
- (void)conference:(id)arg1 withCallID:(long long)arg2 networkHint:(bool)arg3;
- (void)conference:(id)arg1 withCallID:(long long)arg2 remoteMediaStalled:(bool)arg3;
- (id)controller;
- (void)dealloc;
- (void)endAVConferenceWithChat:(id)arg1 callID:(long long)arg2;
- (int)endConferenceForAVChat:(id)arg1;
- (id)getNatIPFromICEData:(id)arg1;
- (void)handleRelayCancel:(id)arg1 fromParticipant:(id)arg2 callInfo:(id)arg3;
- (void)handleRelayInitate:(id)arg1 fromParticipant:(id)arg2 callInfo:(id)arg3;
- (void)handleRelayUpdate:(id)arg1 fromParticipant:(id)arg2 callInfo:(id)arg3;
- (id)init;
- (void)initAVInterface;
- (bool)isAVInterfaceReady;
- (bool)isMuteForAVChat:(id)arg1;
- (bool)isPausedForAVChat:(id)arg1;
- (bool)isSendingAudioForAVChat:(id)arg1;
- (bool)isSendingVideoForAVChat:(id)arg1;
- (void*)localVideoBackLayer;
- (void*)localVideoLayer;
- (id)natTypeForAVChat:(id)arg1;
- (void)processRemoteIPChanged:(id)arg1 fromParticipant:(id)arg2;
- (void)serverDiedForConference:(id)arg1;
- (void)setLocalVideoBackLayer:(void*)arg1;
- (void)setLocalVideoLayer:(void*)arg1;
- (void)setRemoteVideoPresentationSize:(struct CGSize { double x1; double x2; })arg1 forChat:(id)arg2;
- (void)setRemoteVideoPresentationState:(unsigned int)arg1 forChat:(id)arg2;
- (bool)startPreviewWithError:(id*)arg1;
- (bool)stopPreview;
- (bool)supportsLayers;
- (bool)supportsRelay;
- (void)updateAVChat:(id)arg1 withCallMetadata:(id)arg2 isFinalUpdate:(bool)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
