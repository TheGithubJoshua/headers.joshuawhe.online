<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>IMAVInterface.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/IMAVCore.framework/IMAVInterface.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/IMAVCore.framework/IMAVCore (1000)
 */

@interface IMAVInterface : NSObject {
    id  _delegate;
}

@property (nonatomic, readonly) id _controller;
@property (nonatomic, readonly) unsigned long long capabilities;
@property (nonatomic, readonly) unsigned long long capabilitiesOfCPU;
@property (nonatomic, readonly) unsigned long long capabilitiesOfNetwork;
@property (nonatomic, readonly) id controller;
@property id delegate;
@property (nonatomic, readonly) bool isAVInterfaceReady;
@property (nonatomic) void*localVideoBackLayer;
@property (nonatomic) void*localVideoLayer;
@property (nonatomic) unsigned int maxBitrate;
@property (nonatomic, readonly) unsigned int overallChatState;
@property (nonatomic) bool shouldKeepCameraRunning;
@property (nonatomic, readonly) bool supportsLayers;
@property (nonatomic, readonly) bool supportsRelay;
@property (nonatomic, readonly) bool systemCanAudioChat;
@property (nonatomic, readonly) bool systemCanVideoChat;
@property (nonatomic, readonly) bool systemSupportsBackFacingCamera;
@property (nonatomic, readonly) bool systemSupportsFrontFacingCamera;

+ (id)alloc;
+ (id)sharedInstance;

- (void)_avChatDealloc:(id)arg1;
- (long long)_checkNetworkForChat:(id)arg1 requiresWifi:(bool)arg2;
- (void)_conferenceEnded:(id)arg1;
- (void)_conferenceWillStart:(id)arg1;
- (id)_controller;
- (void)_notifyAboutPotentialCallForChat:(id)arg1;
- (long long)_runPingTestForChat:(id)arg1;
- (bool)_submitEndCallMetric:(id)arg1 forCallID:(long long)arg2;
- (bool)_submitLoggingInformation:(id)arg1 forChat:(id)arg2;
- (id)avChat:(id)arg1 IPAndPortDataWithCallerIP:(id)arg2 callerSIPPort:(unsigned int)arg3 shouldFindExternalIP:(bool)arg4;
- (id)avChat:(id)arg1 IPAndPortDataWithCallerIPAndPortData:(id)arg2 shouldFindExternalIP:(bool)arg3;
- (int)avChat:(id)arg1 endConferenceForUserID:(id)arg2;
- (bool)avChat:(id)arg1 generateCallInfoForID:(id)arg2 service:(id)arg3 usingRelay:(bool)arg4 callInfo:(id)arg5;
- (void)avChat:(id)arg1 prepareConnectionWithCallInfo:(id)arg2;
- (void)avChat:(id)arg1 setLocalLandscapeAspectRatio:(struct CGSize { double x1; double x2; })arg2 localPortraitAspectRatio:(struct CGSize { double x1; double x2; })arg3;
- (void)avChat:(id)arg1 setMute:(bool)arg2;
- (void)avChat:(id)arg1 setPaused:(bool)arg2;
- (void)avChat:(id)arg1 setRemoteMute:(bool)arg2;
- (void)avChat:(id)arg1 setSendingAudio:(bool)arg2;
- (void)avChat:(id)arg1 setSendingVideo:(bool)arg2;
- (void)avChat:(id)arg1 setValidatedIdentity:(struct __SecIdentity { }*)arg2;
- (void)cancelConferenceForAVChat:(id)arg1;
- (unsigned long long)capabilities;
- (unsigned long long)capabilitiesOfCPU;
- (unsigned long long)capabilitiesOfNetwork;
- (void)chatRelayedStatusChanged:(id)arg1;
- (void)chatStateUpdated;
- (void)cleanupAVInterface;
- (id)controller;
- (void)dealloc;
- (id)delegate;
- (void)endAVConferenceWithChat:(id)arg1 callID:(long long)arg2;
- (int)endConferenceForAVChat:(id)arg1;
- (id)getNatIPFromICEData:(id)arg1;
- (void)handleRelayCancel:(id)arg1 fromParticipant:(id)arg2 callInfo:(id)arg3;
- (void)handleRelayInitate:(id)arg1 fromParticipant:(id)arg2 callInfo:(id)arg3;
- (void)handleRelayUpdate:(id)arg1 fromParticipant:(id)arg2 callInfo:(id)arg3;
- (void)initAVInterface;
- (bool)isAVInterfaceReady;
- (bool)isMuteForAVChat:(id)arg1;
- (bool)isPausedForAVChat:(id)arg1;
- (bool)isRemoteMuteForAVChat:(id)arg1;
- (bool)isSendingAudioForAVChat:(id)arg1;
- (bool)isSendingVideoForAVChat:(id)arg1;
- (void*)localVideoBackLayer;
- (void*)localVideoLayer;
- (unsigned int)maxBitrate;
- (id)natTypeForAVChat:(id)arg1;
- (unsigned int)overallChatState;
- (void)persistentProperty:(id)arg1 changedTo:(id)arg2 from:(id)arg3;
- (void)processRemoteIPChanged:(id)arg1 fromParticipant:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setLocalVideoBackLayer:(void*)arg1;
- (void)setLocalVideoLayer:(void*)arg1;
- (void)setMaxBitrate:(unsigned int)arg1;
- (void)setRemoteVideoPresentationSize:(struct CGSize { double x1; double x2; })arg1 forChat:(id)arg2;
- (void)setRemoteVideoPresentationState:(unsigned int)arg1 forChat:(id)arg2;
- (void)setShouldKeepCameraRunning:(bool)arg1;
- (bool)shouldKeepCameraRunning;
- (bool)startPreviewWithError:(id*)arg1;
- (bool)stopPreview;
- (bool)supportsLayers;
- (bool)supportsRelay;
- (bool)systemCanAudioChat;
- (bool)systemCanVideoChat;
- (bool)systemSupportsBackFacingCamera;
- (bool)systemSupportsFrontFacingCamera;
- (void)unsetDelegate:(id)arg1;
- (void)updateAVChat:(id)arg1 withCallMetadata:(id)arg2 isFinalUpdate:(bool)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
