<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>UAUserActivityInfo.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/UserActivity.framework/UAUserActivityInfo.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/UserActivity.framework/UserActivity (231)
 */

@interface UAUserActivityInfo : NSObject <NSCopying, NSSecureCoding> {
    NSString * _activityType;
    NSString * _bundleIdentifier;
    NSString * _contentUserAction;
    bool  _dirty;
    NSString * _dynamicActivityType;
    bool  _eligibleForHandoff;
    bool  _eligibleForPrediction;
    bool  _eligibleForPublicIndexing;
    bool  _eligibleForReminders;
    bool  _eligibleForSearch;
    bool  _eligibleToAdvertise;
    bool  _eligibleToAlwaysAdvertise;
    NSError * _encodedUserInfoError;
    NSDictionary * _encodingOptions;
    NSError * _error;
    NSDate * _expirationDate;
    NSSet * _keywords;
    NSDate * _lastInterestingTime;
    NSDictionary * _options;
    bool  _payloadAvailable;
    bool  _payloadRequested;
    NSMutableDictionary * _payloads;
    SFPeerDevice * _peerDevice;
    NSString * _persistentIdentifier;
    NSURL * _referrerURL;
    NSSet * _requiredUserInfoKeys;
    NSString * _teamIdentifier;
    NSString * _title;
    unsigned long long  _type;
    NSUUID * _uuid;
    _LSUserActivityWasContinuedInfo * _wasContinuedInfo;
    NSURL * _webpageURL;
    NSDate * _when;
}

@property (copy) NSString *activityType;
@property (copy) NSString *bundleIdentifier;
@property (copy) NSString *contentUserAction;
@property (getter=isDirty, readonly) bool dirty;
@property (copy) NSString *dynamicActivityType;
@property bool eligibleForHandoff;
@property bool eligibleForPrediction;
@property bool eligibleForPublicIndexing;
@property bool eligibleForReminders;
@property bool eligibleForSearch;
@property (readonly) bool eligibleToAdvertise;
@property (readonly) bool eligibleToAlwaysAdvertise;
@property (copy) NSError *encodedUserInfoError;
@property (copy) NSDictionary *encodingOptions;
@property (copy) NSError *error;
@property (copy) NSDate *expirationDate;
@property (copy) NSSet *keywords;
@property (copy) NSDate *lastInterestingTime;
@property (copy) NSDictionary *options;
@property (getter=isPayloadAvailable) bool payloadAvailable;
@property (getter=isPayloadRequested) bool payloadRequested;
@property (copy) NSDictionary *payloads;
@property (retain) SFPeerDevice *peerDevice;
@property (copy) NSString *persistentIdentifier;
@property (copy) NSURL *referrerURL;
@property (copy) NSSet *requiredUserInfoKeys;
@property (copy) NSString *teamIdentifier;
@property (copy) NSString *title;
@property unsigned long long type;
@property (copy) NSUUID *uuid;
@property (retain) _LSUserActivityWasContinuedInfo *wasContinuedInfo;
@property (copy) NSURL *webpageURL;
@property (copy) NSDate *when;

+ (id)encodedInfoToOldEncodedInfo:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_createUserActivityStrings:(id)arg1 secondaryString:(id)arg2 optionalData:(id)arg3;
- (id)activityType;
- (id)archiveUserActivityInfo;
- (id)bundleIdentifier;
- (void)clearPayload;
- (id)contentUserAction;
- (id)copyUserActivityInfoWithUUID:(bool)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dynamicActivityType;
- (bool)eligibleForHandoff;
- (bool)eligibleForPrediction;
- (bool)eligibleForPublicIndexing;
- (bool)eligibleForReminders;
- (bool)eligibleForSearch;
- (bool)eligibleToAdvertise;
- (bool)eligibleToAlwaysAdvertise;
- (void)encodeWithCoder:(id)arg1;
- (id)encodedUserInfoError;
- (id)encodingOptions;
- (id)error;
- (id)expirationDate;
- (id)initWithArchivedUserActivityInfo:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithUUID:(id)arg1 type:(unsigned long long)arg2 options:(id)arg3;
- (id)initWithUserActivityInfo:(id)arg1;
- (bool)isDirty;
- (bool)isPayloadAvailable;
- (bool)isPayloadRequested;
- (id)keywords;
- (id)lastInterestingTime;
- (id)logString;
- (id)optionalUserActivityData;
- (id)options;
- (id)payloadForIdentifier:(id)arg1;
- (id)payloadIdentifiers;
- (id)payloads;
- (id)peerDevice;
- (id)persistentIdentifier;
- (id)referrerURL;
- (bool)requestPayloadWithCompletionHandler:(id /* block */)arg1;
- (bool)requestPayloadWithCompletionHandlerEvenIfClean:(bool)arg1 withCompletionHandler:(id /* block */)arg2;
- (id)requiredUserInfoKeys;
- (id)secondaryUserActivityString;
- (void)setActivityType:(id)arg1;
- (void)setBundleIdentifier:(id)arg1;
- (void)setContentUserAction:(id)arg1;
- (void)setDynamicActivityType:(id)arg1;
- (void)setEligibleForHandoff:(bool)arg1;
- (void)setEligibleForPrediction:(bool)arg1;
- (void)setEligibleForPublicIndexing:(bool)arg1;
- (void)setEligibleForReminders:(bool)arg1;
- (void)setEligibleForSearch:(bool)arg1;
- (void)setEncodedUserInfoError:(id)arg1;
- (void)setEncodingOptions:(id)arg1;
- (void)setError:(id)arg1;
- (void)setExpirationDate:(id)arg1;
- (void)setKeywords:(id)arg1;
- (void)setLastInterestingTime:(id)arg1;
- (void)setOptions:(id)arg1;
- (bool)setPayload:(id)arg1 identifier:(id)arg2;
- (void)setPayloadAvailable:(bool)arg1;
- (void)setPayloadRequested:(bool)arg1;
- (void)setPayloads:(id)arg1;
- (void)setPeerDevice:(id)arg1;
- (void)setPersistentIdentifier:(id)arg1;
- (void)setReferrerURL:(id)arg1;
- (void)setRequiredUserInfoKeys:(id)arg1;
- (void)setTeamIdentifier:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setType:(unsigned long long)arg1;
- (void)setUuid:(id)arg1;
- (void)setWasContinuedInfo:(id)arg1;
- (void)setWebpageURL:(id)arg1;
- (void)setWhen:(id)arg1;
- (id)statusString;
- (id)teamIdentifier;
- (id)title;
- (unsigned long long)type;
- (id)userActivityString;
- (id)uuid;
- (id)wasContinuedInfo;
- (bool)wasResumedOnAnotherDeviceWithCompletionHandler:(id /* block */)arg1;
- (id)webpageURL;
- (id)when;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
