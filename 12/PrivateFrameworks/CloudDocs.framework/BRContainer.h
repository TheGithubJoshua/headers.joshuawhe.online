<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BRContainer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/CloudDocs.framework/BRContainer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs (575.504)
 */

@interface BRContainer : NSObject <NSSecureCoding> {
    NSDictionary * _bundleIDVersions;
    NSSet * _bundleIDs;
    unsigned int  _currentStatus;
    NSData * _dataRepresentation;
    NSSet * _documentsTypes;
    NSSet * _exportedTypes;
    NSNumber * _iconGeneratorVersion;
    NSDictionary * _iconMetadata;
    NSDictionary * _iconURLs;
    NSData * _imageSandboxExtension;
    NSSet * _importedTypes;
    bool  _isCloudSyncTCCDisabled;
    NSNumber * _isDocumentScopePublicAsNumber;
    bool  _isInCloudDocsZone;
    bool  _isInInitialState;
    bool  _isObservingCurrentStatus;
    bool  _isObservingLastServerUpdate;
    bool  _isObservingOverQuota;
    bool  _isOverQuota;
    NSDate * _lastServerUpdate;
    NSString * _localizedName;
    BRMangledID * _mangledID;
    NSObject<OS_dispatch_queue> * _observationSetupQueueForDefaultConnection;
    NSObject<OS_dispatch_queue> * _observationSetupQueueForSecondaryConnection;
    NSPurgeableData * _purgeableDataRepresentation;
    NSObject<OS_dispatch_queue> * _serialQueue;
    bool  _shouldUsePurgeableData;
}

@property (nonatomic, readonly, copy) NSSet *bundleIdentifiers;
@property (readonly) unsigned int currentStatus;
@property unsigned int currentStatus;
@property (nonatomic, readonly) NSSet *documentsTypes;
@property (nonatomic, readonly) NSURL *documentsURL;
@property (nonatomic, readonly) NSSet *exportedTypes;
@property (nonatomic, readonly) NSString *identifier;
@property (nonatomic, readonly) NSSet *importedTypes;
@property (nonatomic) bool isCloudSyncTCCDisabled;
@property (nonatomic, readonly) bool isDocumentScopePublic;
@property (nonatomic) bool isInCloudDocsZone;
@property (nonatomic) bool isInInitialState;
@property (retain) NSDate *lastServerUpdate;
@property (readonly) NSDate *lastServerUpdate;
@property (nonatomic, readonly) NSString *localizedName;
@property (getter=isOverQuota) bool overQuota;
@property (getter=isOverQuota, readonly) bool overQuota;
@property (nonatomic, readonly) NSString *supportedFolderLevels;
@property (nonatomic, readonly) NSURL *trashURL;
@property (nonatomic, readonly) NSURL *url;

// Image: /System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs

+ (id)_URLForPlistOfMangledID:(id)arg1;
+ (id)_bundleIDVersionsWithProperties:(id)arg1 mangledID:(id)arg2;
+ (id)_bundleIDsWithProperties:(id)arg1;
+ (id)_containerRepositoryURLForMangledID:(id)arg1;
+ (id)_documentsTypesWithProperties:(id)arg1;
+ (id)_exportedTypesWithProperties:(id)arg1;
+ (void)_generateiOSIconsForMangledID:(id)arg1 usingBundle:(struct __CFBundle { }*)arg2 generatedIcons:(id)arg3;
+ (id)_iconGeneratorVersionWithProperties:(id)arg1;
+ (id)_iconMetadataWithProperties:(id)arg1;
+ (id)_iconURLsWithProperties:(id)arg1 mangledID:(id)arg2;
+ (id)_importedTypesWithProperties:(id)arg1;
+ (id)_isDocumentScopePublicAsNumberWithProperties:(id)arg1 mangledID:(id)arg2;
+ (id)_localizedNameWithProperties:(id)arg1 mangledID:(id)arg2;
+ (id)_localizedNameWithProperties:(id)arg1 mangledID:(id)arg2 preferredLanguages:(id)arg3;
+ (id)_pathForIconName:(id)arg1 mangledID:(id)arg2;
+ (id)_sanitizedContainerFallbackNameForMangledID:(id)arg1;
+ (id)allContainers;
+ (id)allContainersBlockIfNeeded:(bool)arg1;
+ (id)allContainersByContainerID;
+ (id)bundleIdentifiersEnumeratorForProperties:(id)arg1;
+ (id)bundlePropertyEnumerator:(id)arg1 valuesOfClass:(Class)arg2 forProperties:(id)arg3;
+ (bool)canMoveFilesWithoutDownloadingFromContainer:(id)arg1 toContainer:(id)arg2;
+ (id)classesForDecoding;
+ (id)containerForItemAtURL:(id)arg1 error:(id*)arg2;
+ (id)containerForMangledID:(id)arg1;
+ (id)containerInRepositoryURL:(id)arg1 createIfMissing:(bool)arg2 error:(id*)arg3;
+ (id)containerInRepositoryURL:(id)arg1 error:(id*)arg2;
+ (id)containersRepositoryURL;
+ (id)documentContainers;
+ (id)documentsContainersInBackupHomeAtURL:(id)arg1 error:(id*)arg2;
+ (void)forceRefreshAllContainersWithCompletion:(id /* block */)arg1;
+ (void)forceRefreshContainers:(id)arg1 completion:(id /* block */)arg2;
+ (void)initialize;
+ (bool)isDocumentScopePublicWithProperties:(id)arg1 mangledID:(id)arg2;
+ (id)localizedNameForDefaultCloudDocsContainer;
+ (id)localizedNameForDesktopContainer;
+ (id)localizedNameForDocumentsContainer;
+ (void)postContainerListUpdateNotification;
+ (void)postContainerStatusChangeNotificationWithID:(id)arg1 key:(id)arg2 value:(id)arg3;
+ (id)propertiesForMangledID:(id)arg1 usingBundle:(struct __CFBundle { }*)arg2 minimumBundleVersion:(id)arg3 bundleIcons:(id*)arg4;
+ (bool)supportsSecureCoding;
+ (void)unregisterCurrentProcessAsPriorityHint;
+ (bool)versionOfBundle:(id)arg1 changedFromVersion:(id)arg2;

- (void).cxx_destruct;
- (id)_containerRepositoryURL;
- (id)_imageDataForSize:(struct CGSize { double x1; double x2; })arg1 scale:(long long)arg2 isiOSIcon:(bool*)arg3 shouldTransformToAppIcon:(bool*)arg4;
- (id)_pathForIconName:(id)arg1;
- (id)_pathForPlist;
- (void)_performWhileAccessingSecurityScopedContainer:(id /* block */)arg1;
- (void)_replaceDataRepresentationWithData:(id)arg1;
- (bool)_updateMetadataOnDiskWithProperties:(id)arg1;
- (void)accessDataRepresentationInBlock:(id /* block */)arg1;
- (void)accessPropertiesInBlock:(id /* block */)arg1;
- (id)bestFittingImageDataForSize:(struct CGSize { double x1; double x2; })arg1 shouldTransformToAppIcon:(bool*)arg2;
- (id)bundleIDVersions;
- (id)bundleIdentifiers;
- (id)computedProperties;
- (bool)containsExcludedDocumentsOnTheFSWithExcludedButPreservedFilename:(id)arg1 excludedButPreservedExtensions:(id)arg2 andStampUploadedAppWithXattr:(bool)arg3;
- (id)copyDataRepresentation;
- (unsigned int)currentStatus;
- (bool)deleteAllContentsOnClientAndServer:(id*)arg1;
- (id)description;
- (id)documentsTypes;
- (id)documentsURL;
- (void)encodeWithCoder:(id)arg1;
- (id)exportedTypes;
- (void)forceRefreshWithCompletion:(id /* block */)arg1;
- (bool)hasIconWithName:(id)arg1;
- (id)iconGeneratorVersion;
- (id)iconMetadata;
- (id)iconURLs;
- (id)identifier;
- (id)imageDataForSize:(struct CGSize { double x1; double x2; })arg1 scale:(long long)arg2;
- (id)imageDataForSize:(struct CGSize { double x1; double x2; })arg1 scale:(long long)arg2 isiOSIcon:(bool*)arg3;
- (id)imageDataForSize:(struct CGSize { double x1; double x2; })arg1 scale:(long long)arg2 shouldTransformToAppIcon:(bool*)arg3;
- (id)imageRepresentationsAvailable;
- (id)importedTypes;
- (id)initWithCoder:(id)arg1;
- (id)initWithDocsOrDesktopContainerID:(id)arg1;
- (id)initWithMangledID:(id)arg1;
- (id)initWithMangledID:(id)arg1 dataRepresentation:(id)arg2;
- (bool)isCloudSyncTCCDisabled;
- (bool)isDocumentScopePublic;
- (bool)isInCloudDocsZone;
- (bool)isInInitialState;
- (bool)isOverQuota;
- (id)lastServerUpdate;
- (id)localizedName;
- (id)localizedNameWithPreferredLanguages:(id)arg1;
- (bool)registerCurrentProcessAsPriorityHintWithError:(id*)arg1;
- (void)setCurrentStatus:(unsigned int)arg1;
- (void)setIsCloudSyncTCCDisabled:(bool)arg1;
- (void)setIsInCloudDocsZone:(bool)arg1;
- (void)setIsInInitialState:(bool)arg1;
- (void)setLastServerUpdate:(id)arg1;
- (void)setOverQuota:(bool)arg1;
- (id)shortDescription;
- (id)supportedFolderLevels;
- (id)trashRestoreStringForURL:(id)arg1;
- (id)trashURL;
- (bool)updateMetadataWithExtractorProperties:(id)arg1 iconPaths:(id)arg2 bundleID:(id)arg3;
- (bool)updateMetadataWithRecordData:(id)arg1 iconPaths:(id)arg2;
- (id)url;
- (id)versionNumberForBundleIdentifier:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon

- (unsigned int)currentStatus;
- (bool)isOverQuota;
- (id)lastServerUpdate;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
