<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWStreamingFilterNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWStreamingFilterNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWStreamingFilterNode : BWNode <BWDetectedFacesFilterDelegate, BWRendererResourceProvider> {
    bool  _attachesInputPixelBufferAfterRendering;
    BWFigVideoCaptureDevice * _captureDevice;
    BWColorLookupCache * _colorLookupCache;
    BWRenderListAnimator * _currentAnimator;
    BWRenderList * _currentRenderList;
    bool  _depthDataDeliveryEnabled;
    bool  _focusBlurMapDeliveryEnabled;
    bool  _metadataProcessingEnabled;
    BWRenderList * _mostRecentRenderListRequested;
    BWRenderListAnimator * _nextAnimator;
    BWRenderList * _nextRenderList;
    bool  _preparedToBecomeLive;
    NSObject<OS_dispatch_queue> * _processorPreparationQueue;
    bool  _receivedInitialFixedPointDisparityBuffer;
    bool  _receivedOccludedFixedPointDisparityBuffer;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _renderListLock;
    BWRenderListProcessor * _renderListProcessor;
    bool  _stageRenderingEnabled;
    BWStreamingCVAFilterRenderer * _streamingCVAFilterRenderer;
    bool  _studioAndContourRenderingEnabled;
}

@property (nonatomic) bool attachesInputPixelBufferAfterRendering;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isDepthDataDeliveryEnabled, nonatomic) bool depthDataDeliveryEnabled;
@property (readonly, copy) NSString *description;
@property (getter=isFocusBlurMapDeliveryEnabled, nonatomic) bool focusBlurMapDeliveryEnabled;
@property (readonly) unsigned long long hash;
@property (getter=isMetadataProcessingEnabled, nonatomic) bool metadataProcessingEnabled;
@property float simulatedAperture;
@property (nonatomic) bool stageRenderingEnabled;
@property (nonatomic) bool studioAndContourRenderingEnabled;
@property (readonly) Class superclass;

+ (void)initialize;

- (bool)attachesInputPixelBufferAfterRendering;
- (void)changeToFilters:(id)arg1 animated:(bool)arg2;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2 forAttachedMediaKey:(id)arg3;
- (void)filterDetectedFacesInSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (id)initWithCaptureDevice:(id)arg1 usingDepth:(bool)arg2;
- (bool)isDepthDataDeliveryEnabled;
- (bool)isFocusBlurMapDeliveryEnabled;
- (bool)isMetadataProcessingEnabled;
- (id)nodeSubType;
- (id)nodeType;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)prepareForRenderingWithPreparedPixelBufferPool;
- (id)provideColorLookupCache;
- (id)provideCoreImageFilterRenderer;
- (id)provideMetalFilterRenderer;
- (id)provideStillImageMetalBlurMapRenderer;
- (id)provideStillImageMetalSDOFRenderer;
- (id)provideStreamingCVAFilterRenderer;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (void)setAttachesInputPixelBufferAfterRendering:(bool)arg1;
- (void)setDepthDataDeliveryEnabled:(bool)arg1;
- (void)setFocusBlurMapDeliveryEnabled:(bool)arg1;
- (void)setMetadataProcessingEnabled:(bool)arg1;
- (void)setSimulatedAperture:(float)arg1;
- (void)setStageRenderingEnabled:(bool)arg1;
- (void)setStudioAndContourRenderingEnabled:(bool)arg1;
- (float)simulatedAperture;
- (bool)stageRenderingEnabled;
- (bool)studioAndContourRenderingEnabled;
- (id)videoInput;
- (id)videoOutput;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
