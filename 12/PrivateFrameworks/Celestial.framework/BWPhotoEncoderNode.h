<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWPhotoEncoderNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWPhotoEncoderNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWPhotoEncoderNode : BWNode {
    bool  _allowHEIFPrewarming;
    bool  _cameraSupportsFlash;
    FigCapturePixelConverter * _clientThumbnailPixelConverter;
    struct FigPhotoCompressionSession { } * _compressionSession;
    bool  _croppingEnabled;
    bool  _heifEmbedThumb;
    bool  _heifForceCABAC;
    bool  _heifForceHEVC;
    float  _heifQualityOverride;
    unsigned long long  _heifThumbnailMaxPixelSize;
    int  _heifTileHeight;
    int  _heifTileWidth;
    bool  _heifUseTiling;
    NSDictionary * _inputColorInfo;
    FigCapturePixelConverter * _jpegPixelConverter;
    NSObject<OS_dispatch_group> * _previewGenerationGroup;
    NSObject<OS_dispatch_queue> * _previewGenerationQueue;
    FigCapturePixelConverter * _previewPixelConverter;
    NSObject<OS_dispatch_queue> * _prewarmQueue;
    void * _prewarmQueueID;
    long long  _prewarmedSettingsID;
    bool  _prewarmingOngoing;
    float  _segmentationDownscalingFactor;
    struct { 
        int width; 
        int height; 
    }  _sourceVideoDimensions;
    bool  _stillDuringVideoRecording;
    FigCapturePixelConverter * _thumbnailPixelConverter;
    bool  _zeroShutterLagEnabled;
}

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_cropRectForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 requestedStillImageCaptureSettings:(id)arg2 whenEnabled:(bool)arg3;
+ (bool)_croppingRequiredForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 stillImageSettings:(id)arg2 whenEnabled:(bool)arg3;
+ (void)_updateMetadataForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 stillImageSettings:(id)arg2 whenCroppingEnabled:(bool)arg3;
+ (void)initialize;

- (void)_addDepthFromSampleBufferIfAvailable:(struct opaqueCMSampleBuffer { }*)arg1;
- (int)_addMetadataFromSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 requestedStillImageCaptureSettings:(id)arg2 resolvedStillImageCaptureSettings:(id)arg3;
- (int)_addPortraitEffectsMatteFromSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_addQualityOptionsToDictionary:(id)arg1 pixelBuffer:(struct __CVBuffer { }*)arg2 metadata:(id)arg3 requestedStillImageCaptureSettings:(id)arg4 resolvedStillImageCaptureSettings:(id)arg5 forMainImage:(bool)arg6;
- (int)_addThumbnailFromBuffer:(struct __CVBuffer { }*)arg1 metadata:(id)arg2 requestedStillImageCaptureSettings:(id)arg3 resolvedStillImageCaptureSettings:(id)arg4 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg5 codecType:(unsigned int)arg6 maxPixelSize:(unsigned long long)arg7;
- (int)_addValue:(id)arg1 toAuxiliaryImageProperties:(struct CGImageMetadata { }*)arg2 namespace:(struct __CFString { }*)arg3 prefix:(struct __CFString { }*)arg4 key:(struct __CFString { }*)arg5;
- (id)_arrayInColumnMajorOrderFrom3x3MatrixData:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg1;
- (id)_arrayInColumnMajorOrderFrom3x4MatrixData:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (struct __IOSurface { }*)_closeContainerAndCopySurfaceWithSurfaceSize:(unsigned long long*)arg1;
- (int)_defaultJPEGIndexedQTableForPixelBuffer:(struct __CVBuffer { }*)arg1 metadata:(id)arg2 captureType:(int)arg3 quantizationTableIndexOut:(int*)arg4 isHighGainImageOut:(bool*)arg5;
- (id)_depthEncodingOptionsFromDepthMetadata:(id)arg1 pixelFormat:(unsigned int)arg2;
- (int)_encodePhotoForPixelBuffer:(struct __CVBuffer { }*)arg1 metadata:(id)arg2 thumbnailOptions:(id)arg3 requestedStillImageCaptureSettings:(id)arg4 resolvedStillImageCaptureSettings:(id)arg5 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg6 outputSurfaceImageSize:(struct CGSize { double x1; double x2; }*)arg7;
- (id)_encodingOptionsForAuxiliaryImageWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 pixelBufferAttributes:(id)arg3;
- (int)_generatePreviewForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 requestedStillImageCaptureSettings:(id)arg2 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 previewPixelBuffer:(struct __CVBuffer {}**)arg4;
- (int)_getColorSpacePropertiesForSourcePixelFormat:(unsigned int)arg1 destinationPixelFormat:(unsigned int)arg2;
- (struct CGImageMetadata { }*)_newAuxiliaryImagePropertiesFromDepthMetadata:(id)arg1;
- (struct CGImageMetadata { }*)_newAuxiliaryImagePropertiesFromPortraitEffectsMatteMetadata:(id)arg1;
- (int)_scaleInputPixelBuffer:(struct __CVBuffer { }*)arg1 toDimensions:(struct { int x1; int x2; })arg2 colorSpaceProperties:(int)arg3 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 pixelConverter:(id)arg5 poolCapacity:(int)arg6 thumbnailPixelBuffer:(struct __CVBuffer {}**)arg7;
- (id)_thumbnailOptionsForImageWithMetadata:(id)arg1 requestedStillImageCaptureSettings:(id)arg2 resolvedStillImageCaptureSettings:(id)arg3 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg4 codecType:(unsigned int)arg5 maxPixelSize:(unsigned long long)arg6;
- (id)_transcodeQualityHintFromQuantizationTableIndex:(int)arg1;
- (bool)cameraSupportsFlash;
- (bool)croppingEnabled;
- (void)dealloc;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2 forAttachedMediaKey:(id)arg3;
- (void)handleStillImagePrewarmWithRequestedStillImageCaptureSettings:(id)arg1 resolvedStillImageCaptureSettings:(id)arg2 resolvedPhotoManifest:(id)arg3 forInput:(id)arg4;
- (id)initWithPersonSegmentationEnabled:(bool)arg1;
- (id)inputColorInfo;
- (id)nodeSubType;
- (id)nodeType;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (float)segmentationDownscalingFactor;
- (void)setCameraSupportsFlash:(bool)arg1;
- (void)setCroppingEnabled:(bool)arg1;
- (void)setInputColorInfo:(id)arg1;
- (void)setSegmentationDownscalingFactor:(float)arg1;
- (void)setSourceVideoDimensions:(struct { int x1; int x2; })arg1;
- (void)setStillDuringVideoRecording:(bool)arg1;
- (void)setZeroShutterLagEnabled:(bool)arg1;
- (struct { int x1; int x2; })sourceVideoDimensions;
- (bool)stillDuringVideoRecording;
- (bool)zeroShutterLagEnabled;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
