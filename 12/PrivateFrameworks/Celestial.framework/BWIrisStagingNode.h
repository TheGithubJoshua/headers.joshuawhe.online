<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWIrisStagingNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWIrisStagingNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWIrisStagingNode : BWNode {
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _beginIrisMovieCaptureTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _bufferingTime;
    <BWIrisStagingNodeIrisRequestDelegate> * _delegate;
    int  _emittedIrisRequestCount;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _endIrisMovieCaptureTime;
    struct { long long x1; int x2; unsigned int x3; long long x4; } * _firstEmittedPTSArray;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _firstTrimStartPTS;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _frameGovernorNextFrameThreshold;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _frameGovernorReferenceTime;
    bool  _haveSeenFirstAudioSampleBuffer;
    bool  _haveSeenFirstVideoSampleBuffer;
    unsigned long long  _inferencesInputIndex;
    struct __CFDictionary { } * _intermediateJPEGCompressionOptions;
    float  _intermediateJPEGCompressionQuality;
    struct FigPhotoCompressionSession { } * _intermediateJPEGCompressionSession;
    bool  _intermediateJPEGCompressionSetupIsComplete;
    struct __CFDictionary { } * _intermediateJPEGContainerOptions;
    int  _intermediateJPEGDownstreamRetainedBufferCount;
    struct opaqueCMFormatDescription { } * _intermediateJPEGFormatDescription;
    int  _intermediateJPEGSurfaceLocalRetainedBufferCount;
    struct FigPhotoSurfacePool { } * _intermediateJPEGSurfacePool;
    NSMutableArray * _irisRequestsInFlight;
    NSMutableArray * _irisRequestsSoonToBeEmitted;
    NSMutableArray * _lastEmittedBuffers;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastProcessedVideoPTS;
    struct OpaqueCMClock { } * _masterClock;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _masterMovieStartPTS;
    NSURL * _masterMovieURL;
    BWMotionDataPreserver * _motionDataPreserver;
    int  _numEODMessagesReceived;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _readyToEmitPTS;
    bool  _readyToReceiveRequests;
    NSObject<OS_dispatch_group> * _readyToReceiveRequestsGroup;
    BWIrisSequenceAdjuster * _sequenceAdjuster;
    NSMutableArray * _stagingQueues;
    struct OpaqueFigSimpleMutex { } * _stateMutex;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _targetFrameDuration;
    NSURL * _temporaryMovieDirectoryURL;
    int  _trimMethod;
    FigIrisAutoTrimmer * _trimmer;
    bool  _valveDraining;
    bool  _valveOpen;
    long long  _valveOpenerSettingsID;
}

@property struct { long long x1; int x2; unsigned int x3; long long x4; } beginIrisMovieCaptureTime;
@property struct { long long x1; int x2; unsigned int x3; long long x4; } endIrisMovieCaptureTime;
@property (readonly) NSURL *temporaryMovieDirectoryURL;

+ (void)initialize;

- (struct { long long x1; int x2; unsigned int x3; long long x4; })_adjustedStartTimeForTrimmedStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 ensuringAtLeast3FramesBeforeStillTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 ensuringFrameIsAfterTrimmedStartTime:(bool)arg3 butNotEarlierThanOriginalStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg4;
- (struct opaqueCMSampleBuffer { }*)_createIntermediateJPEGSampleBufferFromUncompressedSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_earliestAllowedStillHostPTS;
- (int)_emissionStatusForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_emitBuffersThroughPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_emitBuffersThroughPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 forInputIndex:(unsigned long long)arg2;
- (void)_emitIrisRequest:(id)arg1 withEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)_emitIrisRequestsOlderThanTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 withEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)_emitSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInputIndex:(unsigned long long)arg2;
- (unsigned long long)_emittingInputsCount;
- (void)_enqueueIrisRequest:(id)arg1;
- (void)_feedTrimmerWithInferencesSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_feedTrimmerWithVideoSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (bool)_fillInRefMovieStartAndTrimTimesForStillImageTimesBeforeTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (bool)_fillInStartAndTrimTimesForMasterMovieWithInfo:(id)arg1;
- (bool)_haveEnoughVideoStagedToStartFirstIrisRecording:(id)arg1 currentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_hostPTSForSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (unsigned long long)_indexOfBufferBeforeOrEqualToHostPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 inputIndex:(unsigned long long)arg2 tolerance:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (unsigned long long)_indexOfBufferBeforeOrEqualToPTS:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 inputIndex:(unsigned long long)arg2;
- (void)_informDelegateOfSoonToBeEmittedIrisRequestsForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_prepareToEmitFramesFromStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 throughEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (void)_processQueuedVideoFrames;
- (void)_releaseJPEGEncodeResources;
- (void)_serviceIrisRequestsForCurrentTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 emitBuffers:(bool)arg2 ensureStillImageTimesAreStaged:(bool)arg3;
- (int)_setupIntermediateJPEGCompressionOptions;
- (int)_setupIntermediateJPEGCompressionSession;
- (int)_setupIntermediateJPEGContainerOptions;
- (int)_setupIntermediateJPEGFormatDescriptionFromSourceBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (int)_setupIntermediateJPEGSurfacePool;
- (int)_setupJPEGEncodeResources;
- (void)_tagStillImageVISKeyFrames;
- (id)_temporaryURLForIrisWithSettingsID:(long long)arg1 isOriginalRecording:(bool)arg2;
- (void)_trimQueueForInputIndex:(unsigned long long)arg1;
- (void)_updateRetainedBufferCount;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })beginIrisMovieCaptureTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })bufferingTime;
- (void)closeValve;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (void)dealloc;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })endIrisMovieCaptureTime;
- (int)enqueueIrisRequest:(id)arg1;
- (void)handleDroppedSample:(id)arg1 forInput:(id)arg2;
- (void)handleNodeError:(id)arg1 forInput:(id)arg2;
- (id)initWithNumberOfVideoInputs:(unsigned long long)arg1 numberOfAudioInputs:(unsigned long long)arg2 numberOfMetadataInputs:(unsigned long long)arg3 autoTrimMethod:(int)arg4 intermediateJPEGCompressionQuality:(float)arg5 temporaryMovieDirectoryURL:(id)arg6 irisRequestDelegate:(id)arg7;
- (int)intermediateJPEGDownstreamRetainedBufferCount;
- (struct OpaqueCMClock { }*)masterClock;
- (bool)openValveWithIrisRequest:(id)arg1;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (void)setBeginIrisMovieCaptureTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setBufferingTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setEndIrisMovieCaptureTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setIntermediateJPEGDownstreamRetainedBufferCount:(int)arg1;
- (void)setMasterClock:(struct OpaqueCMClock { }*)arg1;
- (void)setTargetFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })targetFrameDuration;
- (id)temporaryMovieDirectoryURL;
- (bool)waitUntilReadyToReceiveRequestsWithTimeout:(float)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
