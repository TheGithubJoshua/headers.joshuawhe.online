<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWGNRNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWGNRNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWGNRNode : BWNode {
    bool  _allowedToModifyInputBuffers;
    BWNodeOutput * _bravoHDRDisparityOutput;
    bool  _clientExpectsPreBracketFrame;
    struct opaqueCMSampleBuffer { } * _collectedUnprocessedPreBracketHDR;
    int (* _createSampleBufferProcessorFunction;
    FigCaptureStillImageSettings * _currentRequestedStillImageCaptureSettings;
    BWStillImageCaptureSettings * _currentResolvedStillImageCaptureSettings;
    unsigned int  _expectedFrameCount;
    bool  _expectsPreBracketFrame;
    int  _gnrFusionReferenceFrameBracketedCaptureSequenceNumber;
    int  _hdrDisparityBracketedCaptureSequenceNumber;
    int  _hdrEV0BracketCaptureIdentifier;
    bool  _hdrEnabled;
    <BWStillImageProcessingStatusDelegate> * _hdrReferenceFrameSelectionDelegate;
    NSMutableDictionary * _inputAttachedMedia;
    bool  _oisEnabled;
    NSString * _portType;
    NSMutableDictionary * _presentationTimeStampsForInputFrames;
    long long  _previouslyCompletedFusionSettingsID;
    bool  _processingHDREV0BracketFrame;
    bool  _processingLTMHDRFusion;
    int  _processingType;
    bool  _receivedAllFrames;
    unsigned int  _receivedFrameCount;
    bool  _receivedPreBracketFrame;
    int  _receivedReferenceFrameBracketedCaptureSequenceNumber;
    struct OpaqueFigSampleBufferProcessor { } * _sampleBufferProcessor;
    NSString * _sensorID;
    NSDictionary * _sensorIDDictionary;
    bool  _sisEnabled;
    FigCapturePixelConverter * _stereoFusedGNRHDRPixelConverter;
    NSString * _telephotoPortType;
    NSString * _telephotoSensorID;
    NSDictionary * _telephotoSensorIDDictionary;
    bool  _usesHDRPreBracketFrameForErrorRecoveryDownstream;
}

+ (void)initialize;

- (void)_clearCaptureRequestState;
- (struct opaqueCMSampleBuffer { }*)_copyAndZoomSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 usingNormalizedZoomRectangle:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_detectMissingPreBracketedFrameAndEmitBWNodeError;
- (int)_gnrProcessingTypeWithMetadataDictionary:(id)arg1;
- (void)_handleSBPReferenceFrame:(int)arg1;
- (id)_initWithSISEnabled:(bool)arg1 OISEnabled:(bool)arg2 LTMHDREnabled:(bool)arg3 processingLTMHDRFusion:(bool)arg4 portType:(id)arg5 sensorID:(id)arg6 sensorIDDictionary:(id)arg7 telephotoPortType:(id)arg8 telephotoSensorID:(id)arg9 telephotoSensorIDDictionary:(id)arg10 sbpCreationFunction:(int (*)arg11 treatSoftErrorsAsHardErrors:(bool)arg12;
- (bool)_isBravoDepthDataCapture;
- (bool)_isBravoHDRDepthDataCapture;
- (bool)_isBravoTelephotoHDRDepthDataCapture;
- (void)_processSequenceInSampleBufferProcessor;
- (bool)_receivedExpectedAmountOfFrames;
- (void)_sampleBufferProcessorOutputReady:(int)arg1 sampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)_setExpectedFrameCountForPortType:(id)arg1;
- (int)_setPropertyOnSampleBufferProcessorWithKey:(struct __CFString { }*)arg1 value:(void*)arg2;
- (void)_setReferenceFrameBracketedCaptureSequenceNumberOnSampleBufferProcessor:(int)arg1;
- (int)_setupSampleBufferProcessor;
- (id)_tuningDictionaryWithOnlyGNRParameters;
- (unsigned int)_worstCaseFrameRetainCount;
- (bool)allowedToModifyInputBuffers;
- (bool)attachesInputBracketToOutputSampleBuffer;
- (void)dealloc;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2;
- (void)handleNodeError:(id)arg1 forInput:(id)arg2;
- (void)handleStillImageReferenceFrameBracketedCaptureSequenceNumber:(int)arg1 forInput:(id)arg2;
- (id)hdrReferenceFrameSelectionDelegate;
- (id)initWithSISEnabled:(bool)arg1 OISEnabled:(bool)arg2 LTMHDREnabled:(bool)arg3 processingLTMHDRFusion:(bool)arg4 portType:(id)arg5 sensorID:(id)arg6 sensorIDDictionary:(id)arg7 telephotoPortType:(id)arg8 telephotoSensorID:(id)arg9 telephotoSensorIDDictionary:(id)arg10;
- (id)nodeSubType;
- (id)nodeType;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (id)sbpOptionsDictionary;
- (void)setAllowedToModifyInputBuffers:(bool)arg1;
- (void)setAttachesInputBracketToOutputSampleBuffer:(bool)arg1;
- (void)setHdrReferenceFrameSelectionDelegate:(id)arg1;
- (void)setUsesHDRPreBracketFrameForErrorRecoveryDownstream:(bool)arg1;
- (bool)usesHDRPreBracketFrameForErrorRecoveryDownstream;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
