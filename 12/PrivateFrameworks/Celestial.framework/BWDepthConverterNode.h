<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWDepthConverterNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWDepthConverterNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWDepthConverterNode : BWNode {
    int  _baseRotationDegrees;
    float  _baseline;
    NSDictionary * _cameraInfoByPortType;
    bool  _conversionAfterFilteringRequired;
    int  _depthAccuracy;
    int  _depthBufferFinalExifOrientation;
    int  _depthBufferOriginalExifOrientation;
    bool  _depthFromInfrared;
    bool  _depthIsAlwaysHighQuality;
    struct { 
        float forwardOrders[8]; 
        float inverseOrders[8]; 
    }  _depthLensDistortionCorrectionBasePolynomial;
    struct { 
        float forwardOrders[8]; 
        float inverseOrders[8]; 
    }  _depthLensDistortionCorrectionDynamicPolynomial;
    float  _depthPixelSizeInMicrons;
    <DepthProcessor> * _depthProcessor;
    NSString * _depthProcessorClassName;
    struct __CVBuffer { } * _filteringInputBuffer;
    struct __CVBuffer { } * _filteringOutputBuffer;
    struct __CVBuffer { } * _filteringScaledYUVBuffer;
    struct __CVBuffer { } * _fixedPointRotatedIntermediateBuffer;
    struct __CVBuffer { } * _fixedPointScaledIntermediateBuffer;
    bool  _forceCPath;
    int  _horizontalSensorBinningFactor;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _identityExtrinsicMatrix;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _infraredProjectorExtrinsicMatrix;
    struct { 
        int width; 
        int height; 
    }  _inputDepthDimensions;
    bool  _mirroringEnabled;
    struct { 
        int width; 
        int height; 
    }  _outputDimensions;
    unsigned int  _outputFormat;
    struct opaqueCMFormatDescription { } * _outputFormatDescription;
    int  _rotationDegrees;
    struct FigPhotoScaleAndRotateSession { } * _scaler;
    NSDictionary * _sensorIDDictionary;
    bool  _stillFilteringEnabled;
    bool  _streamingFilteringEnabled;
    struct __CVBuffer { } * _streamingFilteringScaledDepthInputBuffer;
    struct __CVBuffer { } * _streamingFilteringScaledDepthOutputBuffer;
    int  _verticalSensorBinningFactor;
    struct work_interval { } * _workInterval;
    bool  _workIntervalHintsEnabled;
}

+ (void)initialize;

- (int)_computeConversionParametersFromSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 convertOptionsOut:(struct { unsigned int x1; float x2; float x3; unsigned int x4; bool x5; }*)arg2;
- (int)_convertDepthDisparityToFloat_C:(struct __CVBuffer { }*)arg1 dst:(struct __CVBuffer { }*)arg2 options:(struct { unsigned int x1; float x2; float x3; unsigned int x4; bool x5; }*)arg3;
- (int)_convertDepthDisparityToFloat_NEON:(struct __CVBuffer { }*)arg1 dst:(struct __CVBuffer { }*)arg2 options:(struct { unsigned int x1; float x2; float x3; unsigned int x4; bool x5; }*)arg3;
- (int)_convertU16toFloatForImage_NEON:(struct __CVBuffer { }*)arg1 dst:(struct __CVBuffer { }*)arg2 options:(struct { unsigned int x1; float x2; float x3; unsigned int x4; bool x5; }*)arg3;
- (id)_depthMetadataDictionaryFromDepthSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 orientation:(unsigned int)arg2 stillFilteringRequested:(bool)arg3;
- (int)_loadAndConfigureDepthProcessorClass:(id)arg1;
- (int)_parseCameraInfo;
- (void)_updateOutputRequirements;
- (int)baseRotationDegrees;
- (int)convertToFloatAndRotate:(struct opaqueCMSampleBuffer { }*)arg1 inputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 outputPixelBuffer:(struct __CVBuffer { }*)arg3;
- (void)dealloc;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2 forAttachedMediaKey:(id)arg3;
- (int)filterBuffer:(struct __CVBuffer { }*)arg1 outputPixelBuffer:(struct __CVBuffer { }*)arg2 imageSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg3;
- (int)horizontalSensorBinningFactor;
- (id)init;
- (id)initWithCameraInfoByPortType:(id)arg1 sensorIDDictionary:(id)arg2 rgbPersonSegmentationEnabled:(bool)arg3 depthIsAlwaysHighQuality:(bool)arg4;
- (bool)mirroringEnabled;
- (id)nodeSubType;
- (id)nodeType;
- (struct { int x1; int x2; })outputDimensions;
- (unsigned int)outputFormat;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (int)rotateAndScaleImagePixelBuffer:(struct __CVBuffer { }*)arg1 depthPixelBuffer:(struct __CVBuffer { }*)arg2 to:(struct __CVBuffer { }*)arg3 rotationAngle:(int)arg4 flip:(bool)arg5;
- (int)rotationDegrees;
- (void)setBaseRotationDegrees:(int)arg1;
- (void)setHorizontalSensorBinningFactor:(int)arg1;
- (void)setMirroringEnabled:(bool)arg1;
- (void)setOutputDimensions:(struct { int x1; int x2; })arg1;
- (void)setOutputFormat:(unsigned int)arg1;
- (void)setRotationDegrees:(int)arg1;
- (void)setStillFilteringEnabled:(bool)arg1;
- (void)setStreamingFilteringEnabled:(bool)arg1;
- (void)setVerticalSensorBinningFactor:(int)arg1;
- (bool)stillFilteringEnabled;
- (bool)streamingFilteringEnabled;
- (int)verticalSensorBinningFactor;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
