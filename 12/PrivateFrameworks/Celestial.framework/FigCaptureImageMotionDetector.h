<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FigCaptureImageMotionDetector.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/FigCaptureImageMotionDetector.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface FigCaptureImageMotionDetector : NSObject {
    struct { 
        double centerx; 
        double centery; 
        bool lensCoefficientsValid; 
        float lensCoefficients[5]; 
        float gravityFactor; 
        float pixelsPerMicron; 
        bool isFrontCamera; 
    }  _cameraData;
    int  _colSumCapacity;
    int  _colSumLength;
    double * _corrArray;
    struct { 
        int fusedRingIndex; 
        double fusedRingTime[256]; 
        struct { 
            double w; 
            double x; 
            double y; 
            double z; 
        } fusedRingQuaternion[256]; 
        unsigned char ignoreMotionDataForPowerTest; 
        unsigned char relaxMotionDataLoggingThreshold; 
        unsigned char didHaveMotionData; 
        unsigned char prevDidHaveMotionData; 
        unsigned char usingMotionDataFromISP; 
        struct { 
            unsigned int numSamples; 
            struct { 
                bool doingBiasEstimation; 
                double timestamp; 
                struct { 
                    double w; 
                    double x; 
                    double y; 
                    double z; 
                } quaternion; 
            } samples[256]; 
        } rawQuaternions; 
    }  _gyroDataCtx;
    struct { 
        int fusedRingIndex[2]; 
        double fusedRingTime[2][256]; 
        struct { 
            float x; 
            float y; 
        } fusedRingHallPosition[2][256]; 
        double hallTimeShift; 
        unsigned char isFirstSample[2]; 
        unsigned char bypassHighPassFilter; 
        float lowpassParameter; 
        struct { 
            float x; 
            float y; 
        } lowpassHallPosition[2]; 
    }  _hallDataCtx;
    int  _height;
    struct { 
        double **rowSums; 
        double **colSums; 
        struct { /* ? */ } *motionMetadata; 
        unsigned int curIdx; 
        unsigned int count; 
        unsigned int size; 
    }  _imgProj;
    int * _intColSum;
    int * _intRowSum;
    int  _maximumSearchRange;
    struct { 
        float crossCorrelationMaximum[2]; 
        int maxCorrelationShift[2]; 
        bool useCameraMotionMetadata; 
        float gyroTranslation[2]; 
        float oisTranslation[2]; 
        int frameRingBufferCount; 
        int frameRingBufferDistance; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } roi; 
        bool isMotionDetected; 
        bool valid; 
    }  _motionStatistics;
    int  _processedBufferCount;
    int  _rowSumCapacity;
    int  _rowSumLength;
    float  _stationaryThreshold;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sumROI;
    double * _tmpSum1;
    double * _tmpSum2;
    struct { 
        int width; 
        int height; 
        int overscanWidth; 
        int overscanHeight; 
        int method; 
        int platform; 
        int baseTransformCount; 
        int derivedTransformCount; 
        int derivedTransformStep; 
        float limitFactor; 
        unsigned char limitTransform; 
        unsigned char prevTransformLimited; 
        unsigned char forceIdentity; 
        unsigned short lineBufferCount; 
        float digitalZoomFactorOverride; 
        int ISPStripOffsetX; 
        int ISPStripOffsetY; 
        int ISPHorizontalTileCount; 
        int ISPVerticalTileCount; 
        bool isUsing1kLineBuffers; 
        struct { /* ? */ } *visStripParams; 
        unsigned long long visStripParamsSize; 
    }  _transformCtx;
    int  _width;
}

@property (nonatomic, readonly) int maximumSearchRange;
@property (nonatomic, readonly) struct { float x1[2]; int x2[2]; bool x3; float x4[2]; float x5[2]; int x6; int x7; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_8_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_8_1_2; } x8; bool x9; bool x10; } motionStatistics;
@property (nonatomic) float stationaryThreshold;

- (int)_allocateArrays:(int)arg1 height:(int)arg2 frameRingSize:(int)arg3;
- (int)_computeStatistics;
- (struct { bool x1; struct { double x_2_1_1; double x_2_1_2; double x_2_1_3; double x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; } x3; struct { int x_4_1_1; float x_4_1_2; float x_4_1_3; unsigned char x_4_1_4; float x_4_1_5; float x_4_1_6; double x_4_1_7; double x_4_1_8; double x_4_1_9; double x_4_1_10; struct { struct { int x_1_3_1; int x_1_3_2; } x_11_2_1; struct { int x_2_3_1; int x_2_3_2; } x_11_2_2; } x_4_1_11; int x_4_1_12; } x4; })_extractMotionMetadata:(id)arg1;
- (void)_freeAllocatedArrays;
- (void)_resetGyroHallContext;
- (void)dealloc;
- (id)init;
- (id)initWithWidth:(int)arg1 height:(int)arg2;
- (id)initWithWidth:(int)arg1 height:(int)arg2 maximumSearchRange:(int)arg3 frameRingSize:(int)arg4;
- (int)maximumSearchRange;
- (struct { float x1[2]; int x2[2]; bool x3; float x4[2]; float x5[2]; int x6; int x7; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_8_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_8_1_2; } x8; bool x9; bool x10; })motionStatistics;
- (int)processPixelBuffer:(struct __CVBuffer { }*)arg1;
- (int)processPixelBuffer:(struct __CVBuffer { }*)arg1 metadataDictionary:(id)arg2;
- (void)resetProcessingState;
- (int)setCentralROIAndGetRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (int)setRoi:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 actualROI:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg2;
- (void)setStationaryThreshold:(float)arg1;
- (float)stationaryThreshold;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
