<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FigCaptureCameraSourcePipeline.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/FigCaptureCameraSourcePipeline.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface FigCaptureCameraSourcePipeline : FigCapturePipeline {
    BWFigVideoCaptureDevice * _captureDevice;
    BWDepthConverterNode * _depthConverterNode;
    BWNodeOutput * _detectedFacesOutput;
    int  _devicePosition;
    int  _deviceType;
    BWMultiStreamCameraSourceNode * _infraredSourceNode;
    BWNodeOutput * _infraredStillImageOutput;
    BWMemoryPool * _memoryPool;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _overscanRect;
    NSArray * _previewFilters;
    BWNodeOutput * _previewOutput;
    BWNodeOutput * _sourceFormatReferenceOutput;
    NSString * _sourceID;
    BWSourceNode<BWFigCameraSourceNode> * _sourceNode;
    NSMutableArray * _sourceNodes;
    BWNodeOutput * _stillImageOutput;
    bool  _stillImageOutputDerivesFromVideoCaptureOutput;
    BWSynchronizerNode * _synchronizerNode;
    BWMultiStreamCameraSourceNode * _telephotoSourceNode;
    BWNodeOutput * _telephotoStillImageOutput;
    bool  _useCaptureOutputForPreview;
    bool  _useMultiStreamCameraNode;
    NSArray * _videoCaptureOutputs;
    BWNodeOutput * _visionDataOutput;
}

@property (nonatomic, readonly) BWFigVideoCaptureDevice *captureDevice;
@property (nonatomic, readonly) struct OpaqueCMClock { }*clock;
@property (nonatomic, readonly) BWNodeOutput *detectedFacesOutput;
@property (nonatomic) <BWDetectedFacesFilterDelegate> *faceFilteringDelegate;
@property (nonatomic, readonly) BWNodeOutput *infraredStillImageOutput;
@property (nonatomic) bool keepISPStreamingWhenStopping;
@property (nonatomic) struct OpaqueCMClock { }*masterClock;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } overscanRect;
@property (nonatomic, readonly) BWNodeOutput *previewOutput;
@property (nonatomic, readonly) bool requiresMasterClock;
@property (nonatomic, readonly) BWNodeOutput *sourceFormatReferenceOutput;
@property (nonatomic, readonly) NSString *sourceID;
@property (nonatomic, readonly) BWSourceNode<BWFigCameraSourceNode> *sourceNode;
@property (nonatomic, readonly) BWNodeOutput *stillImageOutput;
@property (nonatomic, readonly) bool stillImageOutputDerivesFromVideoCaptureOutput;
@property (nonatomic) int stillImageOutputRetainedBufferCountOverride;
@property (nonatomic, readonly) unsigned int stillImagePixelFormat;
@property (nonatomic, readonly) BWNodeOutput *telephotoStillImageOutput;
@property (nonatomic, readonly) NSArray *videoCaptureOutputs;
@property (nonatomic, readonly) BWNodeOutput *visionDataOutput;

+ (void)initialize;

- (int)_buildCameraSourcePipeline:(id)arg1 graph:(id)arg2 renderDelegate:(id)arg3;
- (int)_buildMultiStreamCameraSourcePipeline:(id)arg1 graph:(id)arg2 ispIsStreaming:(bool)arg3 renderDelegate:(id)arg4;
- (int)_configure:(id)arg1 graph:(id)arg2 ispIsStreaming:(bool)arg3 renderDelegate:(id)arg4;
- (int)allocateSharedBufferPools;
- (id)captureDevice;
- (struct OpaqueCMClock { }*)clock;
- (void)dealloc;
- (id)detectedFacesOutput;
- (id)faceFilteringDelegate;
- (void)hackRetainedBufferCountsForDualStreamSources;
- (id)infraredStillImageOutput;
- (id)initWithConfiguration:(id)arg1 captureDevice:(id)arg2 graph:(id)arg3 ispIsStreaming:(bool)arg4 renderDelegate:(id)arg5;
- (bool)keepISPStreamingWhenStopping;
- (void)logCameraStreamingInformationToAggd:(long long)arg1 applicationID:(id)arg2;
- (struct OpaqueCMClock { }*)masterClock;
- (bool)newConfigurationRequiresStreamRestart:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })overscanRect;
- (int)prepareForStillImageCaptureWithStillImageOutputRetainedBufferCountOverride:(int)arg1 clientBracketCount:(int)arg2 enableSushiRawAttachmentOption:(bool)arg3;
- (id)previewOutput;
- (int)reconfigure:(id)arg1;
- (bool)requiresMasterClock;
- (void)setFaceFilteringDelegate:(id)arg1;
- (void)setKeepISPStreamingWhenStopping:(bool)arg1;
- (void)setMasterClock:(struct OpaqueCMClock { }*)arg1;
- (void)setStillImageOutputRetainedBufferCountOverride:(int)arg1;
- (id)sourceFormatReferenceOutput;
- (id)sourceID;
- (id)sourceNode;
- (id)stillImageOutput;
- (bool)stillImageOutputDerivesFromVideoCaptureOutput;
- (int)stillImageOutputRetainedBufferCountOverride;
- (unsigned int)stillImagePixelFormat;
- (id)telephotoStillImageOutput;
- (id)videoCaptureOutputs;
- (id)visionDataOutput;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
