<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/AVController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface AVController : NSObject {
    struct AVControllerPrivate { id x1; id x2; id x3; id x4; id x5; Class x6; id x7; long long x8; long long x9; float x10; float x11; long long x12; bool x13; id x14; float x15; struct __CFString {} *x16; id x17; bool x18; bool x19; bool x20; id x21; struct OpaqueFigVisualContext {} *x22; id x23; struct __CFRunLoop {} *x24; unsigned long long x25; int x26; int x27; int x28; bool x29; bool x30; bool x31; bool x32; id x33; struct OpaqueFigPlayer {} *x34; id x35; id x36; id x37; bool x38; bool x39; id x40; id x41; bool x42; bool x43; bool x44; int x45; bool x46; } * _priv;
}

+ (id)avController;
+ (id)avControllerWithQueue:(id)arg1 error:(id*)arg2;
+ (id)compatibleAudioRouteForRoute:(id)arg1;
+ (id)convertFigTimeDictionaryToTimeIntervalWithKey:(id)arg1 stringURLToNSURLWithKey:(id)arg2 inDictionaries:(id)arg3;
+ (bool)isNetworkSupportedPath:(id)arg1;
+ (bool)isSupportedFileExtension:(id)arg1;
+ (bool)isSupportedMimeType:(id)arg1;
+ (void)setEnableNetworkMode:(bool)arg1;

- (id)_figPlayerNotifications;
- (bool)activate:(id*)arg1;
- (id)addNextFeederItemToQueue;
- (void)applyDesiredRepeatMode;
- (id)attributeForKey:(id)arg1;
- (void)avPlaybackQueueCurrentItemChangedNotification:(id)arg1;
- (bool)beginInterruption:(id*)arg1;
- (bool)beginRepeatGap;
- (id)bookmarkGroupIDForAVItem:(id)arg1;
- (double)bookmarkTimeForAVItem:(id)arg1;
- (bool)canBeginInterruption;
- (void)cancelAllCGImageRequests;
- (void)cancelContinueAfterRepeatGap;
- (void)checkQueueSpace;
- (void)continueAfterRepeatGap;
- (int)copyImageForTime:(struct __CVBuffer {}**)arg1 time:(const struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg2;
- (struct OpaqueFigPlaybackItem { }*)createItemWithURL:(id)arg1 flags:(unsigned int)arg2 error:(int*)arg3;
- (struct OpaqueFigPlaybackItem { }*)currentFPItem;
- (id)currentItem;
- (void)currentItemHasChanged:(id)arg1;
- (void)currentItemWillChangeToItem:(id)arg1 oldItemCurrentTime:(double)arg2;
- (double)currentTime;
- (void)dealloc;
- (id)delegate;
- (void)dequeueDeadItem;
- (void)dequeueFirstItem;
- (void)endInterruptionWithStatus:(id)arg1;
- (void)ensurePlaybackQueueImmed;
- (long long)eqPreset;
- (id)errorWithDescription:(id)arg1 code:(int)arg2;
- (void)feederInvalidatedWithCurrentItemMoved:(id)arg1;
- (void)feederRangeWasInserted:(id)arg1;
- (void)feederRangeWasRemoved:(id)arg1;
- (void)figPlayerNotificationHandler:(id)arg1;
- (void)fmpEffectiveVolumeDidChange;
- (void)fpItemNotification:(id)arg1 sender:(id)arg2;
- (struct CGImage { }*)grabCGImageAtTime:(double)arg1 withTimeOptions:(long long)arg2 withImageOptions:(id)arg3 actualTime:(double*)arg4;
- (bool)havePlayedCurrentItem;
- (unsigned long long)indexOfCurrentQueueFeederItem;
- (id)init;
- (id)initForStreaming;
- (id)initWithError:(id*)arg1;
- (id)initWithQueue:(id)arg1 error:(id*)arg2;
- (id)initWithQueue:(id)arg1 fmpType:(unsigned int)arg2 error:(id*)arg3;
- (bool)isCurrentItemReady;
- (bool)isNewImageAvailableForTime:(const struct { long long x1; int x2; unsigned int x3; long long x4; }*)arg1 willNeverBeAvailable:(bool*)arg2;
- (bool)isValid;
- (void)itemHasFinishedPlayingNotification:(id)arg1;
- (id)lkLayer;
- (void)logPerformanceDataForCurrentItem;
- (void)makeCurrentItemReady;
- (void)makeError:(id*)arg1 withDescription:(id)arg2 code:(int)arg3;
- (bool)muted;
- (bool)okToNotifyFromThisThread;
- (id)outputQTESFilePath;
- (void)pause;
- (bool)play:(id*)arg1;
- (bool)playNextItem:(id*)arg1;
- (struct AVControllerPrivate { id x1; id x2; id x3; id x4; id x5; Class x6; id x7; long long x8; long long x9; float x10; float x11; long long x12; bool x13; id x14; float x15; struct __CFString {} *x16; id x17; bool x18; bool x19; bool x20; id x21; struct OpaqueFigVisualContext {} *x22; id x23; struct __CFRunLoop {} *x24; unsigned long long x25; int x26; int x27; int x28; bool x29; bool x30; bool x31; bool x32; id x33; struct OpaqueFigPlayer {} *x34; id x35; id x36; id x37; bool x38; bool x39; id x40; id x41; bool x42; bool x43; bool x44; int x45; bool x46; }*)privateStorage;
- (id)queue;
- (id)queueFeeder;
- (float)rate;
- (void)rateDidChangeToRate:(float)arg1;
- (void)registerTimeMarkerObserver:(id)arg1 forItem:(id)arg2 times:(id)arg3 context:(id)arg4;
- (void)removeObserver:(id)arg1 fromTMOArray:(id)arg2;
- (long long)repeatMode;
- (void)requestAsyncCGImagesAtTimes:(id)arg1 requestIDs:(id)arg2 withTimeOptions:(long long)arg3 withImageOptions:(id)arg4;
- (void)requestAsyncCGImagesAtTimes:(id)arg1 withTimeOptions:(long long)arg2 withImageOptions:(id)arg3;
- (bool)resumePlayback:(double)arg1 error:(id*)arg2;
- (void)safeSubtitleCommandPosted:(void*)arg1;
- (void)scheduleQueueSpaceCheck;
- (void)scheduleUpdateTimeMarkerObservations;
- (void)seekToDate:(id)arg1;
- (void)setAVItemClass:(Class)arg1;
- (void)setApplyVideoTrackMatrix;
- (bool)setAttribute:(id)arg1 forKey:(id)arg2 error:(id*)arg3;
- (void)setCurrentTime:(double)arg1;
- (void)setCurrentTime:(double)arg1 options:(long long)arg2;
- (void)setDelegate:(id)arg1;
- (void)setEQPreset:(long long)arg1;
- (bool)setIndexOfCurrentQueueFeederItem:(unsigned long long)arg1 error:(id*)arg2;
- (void)setLayer:(id)arg1;
- (void)setMuted:(bool)arg1;
- (void)setOutputQTESFilePath:(id)arg1;
- (bool)setPickedRouteWithPassword:(id)arg1 withPassword:(id)arg2;
- (void)setQueue:(id)arg1;
- (void)setQueueFeeder:(id)arg1;
- (void)setQueueFeeder:(id)arg1 withIndex:(int)arg2;
- (bool)setRate:(float)arg1 error:(id*)arg2;
- (bool)setRepeatMode:(long long)arg1;
- (void)setShouldDisplayClosedCaptions:(bool)arg1;
- (void)setSubtitleRecipient:(id)arg1;
- (void)setVibrationEnabled:(bool)arg1;
- (void)setVibrationPattern:(id)arg1;
- (void)setVisualContext:(struct OpaqueFigVisualContext { }*)arg1;
- (void)setVolume:(float)arg1;
- (bool)shouldBeginPlayingItem:(id)arg1 error:(id*)arg2;
- (bool)shouldDisplayClosedCaptions;
- (void)stepByCount:(int)arg1;
- (void)unregisterTimeMarkerObserver:(id)arg1 forItem:(id)arg2;
- (int)updateActionAtEnd;
- (void)updateTimeMarkerObservations;
- (bool)vibrationEnabled;
- (id)vibrationPattern;
- (struct OpaqueFigVisualContext { }*)visualContext;
- (float)volume;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
