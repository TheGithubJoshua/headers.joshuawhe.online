<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWPixelTransferNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWPixelTransferNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWPixelTransferNode : BWNode {
    bool  _appliesUprightExifOrientationTransformToInput;
    int  _cropMode;
    NSObject<OS_dispatch_semaphore> * _emitSampleBufferSemaphore;
    bool  _expectsMarkerBuffers;
    bool  _flipHorizontal;
    bool  _flipVertical;
    bool  _haveLiveInputCropRect;
    bool  _htpcCompressionSupported;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _inputCropRect;
    BWPixelBufferPool * _intermediateBufferPool;
    struct { 
        int width; 
        int height; 
    }  _intermediatePoolDimensions;
    int  _lastInputUprightExifOrientation;
    BWLimitedGMErrorLogger * _limitedGMErrorLogger;
    bool  _liveAppliesUprightExifOrientationTransformToInput;
    int  _liveCropMode;
    bool  _liveExpectsMarkerBuffers;
    bool  _liveFlipHorizontal;
    bool  _liveFlipVertical;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _liveInputCropRect;
    bool  _liveLowSpeed;
    bool  _livePassesBuffersThroughWhenPossible;
    int  _liveRotationDegrees;
    bool  _liveUpdatesSampleBufferMetadataForIrisVIS;
    bool  _liveZeroFillBuffers;
    bool  _lowSpeed;
    bool  _makeCurrentConfigurationLiveOnNextRenderCallback;
    int  _outputColorSpaceProperties;
    struct opaqueCMFormatDescription { } * _outputFormatDescription;
    unsigned long long  _outputHeight;
    unsigned int  _outputPixelFormat;
    unsigned long long  _outputWidth;
    bool  _packed10BitPixelFormatSupported;
    bool  _passesBuffersThroughWhenPossible;
    int  _rotationDegrees;
    struct OpaqueVTImageRotationSession { } * _rotationSession;
    int  _rotationSessionColorSpaceProperties;
    bool  _rotationSessionFlipHorizontal;
    bool  _rotationSessionFlipVertical;
    bool  _rotationSessionLowSpeed;
    int  _rotationSessionRotationDegrees;
    bool  _rotationSessionZeroFillBuffers;
    struct OpaqueVTPixelTransferSession { } * _transferSession;
    bool  _updatesSampleBufferMetadataForIrisVIS;
}

+ (void)initialize;

- (bool)_emitIfMarkerBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (int)_ensureIntermediatePoolWithDimensions:(struct { int x1; int x2; })arg1;
- (void)_ensureRotationSession;
- (void)_ensureTransferSession;
- (struct { int x1; int x2; })_intermediateBufferDimensionsForInputDimensions:(struct { int x1; int x2; })arg1 outputDimensions:(struct { int x1; int x2; })arg2;
- (void)_makeCurrentConfigurationLive;
- (id)_supportedOutputPixelFormatsInPreferredOrder;
- (void)_updateCameraIntrinsicsMatrixOnSampleBufferIfNeeded:(struct opaqueCMSampleBuffer { }*)arg1 inputCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_updateLiveRotationAndFlipsToApplyUprightExifOrientation:(int)arg1;
- (void)_updateMetadataForOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)_updateOutputRequirements;
- (void)_updateUprightExifOrientationOnSampleBufferIfNeeded:(struct opaqueCMSampleBuffer { }*)arg1;
- (bool)_zeroFillBuffers;
- (bool)appliesUprightExifOrientationTransformToInput;
- (void)configurationWithID:(long long)arg1 updatedFormat:(id)arg2 didBecomeLiveForInput:(id)arg3;
- (int)cropMode;
- (void)dealloc;
- (void)didReachEndOfDataForInput:(id)arg1;
- (void)didSelectFormat:(id)arg1 forInput:(id)arg2;
- (id)emitSampleBufferSemaphore;
- (bool)expectsMarkerBuffers;
- (bool)flipHorizontal;
- (bool)flipVertical;
- (bool)hasNonLiveConfigurationChanges;
- (bool)htpcCompressionSupported;
- (id)init;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputCropRect;
- (bool)lowSpeed;
- (void)makeCurrentConfigurationLive;
- (id)nodeSubType;
- (id)nodeType;
- (int)outputColorSpaceProperties;
- (unsigned long long)outputHeight;
- (unsigned int)outputPixelFormat;
- (unsigned long long)outputWidth;
- (bool)packed10BitPixelFormatSupported;
- (bool)passesBuffersThroughWhenPossible;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)renderSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 forInput:(id)arg2;
- (int)rotationDegrees;
- (void)setAppliesUprightExifOrientationTransformToInput:(bool)arg1;
- (void)setCropMode:(int)arg1;
- (void)setEmitSampleBufferSemaphore:(id)arg1;
- (void)setExpectsMarkerBuffers:(bool)arg1;
- (void)setFlipHorizontal:(bool)arg1;
- (void)setFlipVertical:(bool)arg1;
- (void)setHtpcCompressionSupported:(bool)arg1;
- (void)setInputCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLowSpeed:(bool)arg1;
- (void)setOutputColorSpaceProperties:(int)arg1;
- (void)setOutputHeight:(unsigned long long)arg1;
- (void)setOutputPixelFormat:(unsigned int)arg1;
- (void)setOutputWidth:(unsigned long long)arg1;
- (void)setPacked10BitPixelFormatSupported:(bool)arg1;
- (void)setPassesBuffersThroughWhenPossible:(bool)arg1;
- (void)setRotationDegrees:(int)arg1;
- (void)setUpdatesSampleBufferMetadataForIrisVIS:(bool)arg1;
- (bool)updatesSampleBufferMetadataForIrisVIS;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
