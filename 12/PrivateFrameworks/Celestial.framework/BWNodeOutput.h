<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWNodeOutput.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWNodeOutput.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWNodeOutput : NSObject {
    NSMutableDictionary * _attachedMediaConfigurations;
    NSMutableDictionary * _attachedMediaProperties;
    long long  _configurationID;
    <BWNodeOutputConsumer> * _consumer;
    bool  _consumerIsANodeConnection;
    bool  _discardsSampleData;
    bool  _dropsSampleBuffersWithUnexpectedPTS;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastEmittedPTS;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _lastValidPTS;
    long long  _liveConfigurationID;
    float  _maxSampleDataOutputRate;
    unsigned int  _mediaType;
    bool  _mediaTypeIsVideo;
    BWMemoryPool * _memoryPool;
    NSString * _name;
    BWNode * _node;
    unsigned int  _numberOfBuffersDropped;
    unsigned int  _numberOfBuffersEmitted;
    NSMutableArray * _poolPreallocationCompletionHandlers;
    bool  _poolPreallocationDone;
    struct OpaqueFigSimpleMutex { } * _poolPreallocationMutex;
    bool  _prefetchesPixelBufferPool;
    BWNodeOutputMediaConfiguration * _primaryMediaConfiguration;
    BWNodeOutputMediaProperties * _primaryMediaProperties;
    bool  _receivedEOD;
    BWNodeOutputMediaConfiguration * _unspecifiedAttachedMediaConfiguration;
}

@property (nonatomic) bool buffersOriginateUpstream;
@property (nonatomic) long long configurationID;
@property (nonatomic, readonly) BWNodeConnection *connection;
@property (nonatomic) <BWNodeOutputConsumer> *consumer;
@property (nonatomic) bool discardsSampleData;
@property (nonatomic) bool dropsSampleBuffersWithUnexpectedPTS;
@property (nonatomic, copy) BWFormat *format;
@property (nonatomic, copy) BWFormatRequirements *formatRequirements;
@property (nonatomic) int indexOfInputWhichDrivesThisOutput;
@property (nonatomic, readonly) long long liveConfigurationID;
@property (nonatomic, readonly) BWFormat *liveFormat;
@property (nonatomic, readonly) BWPixelBufferPool *livePixelBufferPool;
@property (nonatomic) float maxSampleDataOutputRate;
@property (nonatomic, readonly) unsigned int mediaType;
@property (nonatomic, readonly) bool mediaTypeIsVideo;
@property (nonatomic, retain) BWMemoryPool *memoryPool;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, readonly) BWNode *node;
@property (nonatomic, readonly) unsigned int numberOfBuffersDropped;
@property (nonatomic, readonly) unsigned int numberOfBuffersEmitted;
@property (nonatomic) int owningNodeRetainedBufferCount;
@property (nonatomic) int passthroughMode;
@property (nonatomic) bool prefetchesPixelBufferPool;
@property (nonatomic, readonly) BWPixelBufferPool *preparedPixelBufferPool;
@property (nonatomic, readonly) BWNodeOutputMediaConfiguration *primaryMediaConfiguration;
@property (nonatomic, readonly) BWNodeOutputMediaProperties *primaryMediaProperties;
@property (nonatomic) bool providesPixelBufferPool;
@property (nonatomic, readonly) NSArray *resolvedAttachedMediaKeys;
@property (nonatomic) int retainedBufferCount;
@property (nonatomic, readonly) NSArray *specifiedAttachedMediaKeys;
@property (nonatomic, retain) BWNodeOutputMediaConfiguration *unspecifiedAttachedMediaConfiguration;
@property (nonatomic, readonly) BWVideoFormat *videoFormat;

+ (void)initialize;

- (void)_clearAllMediaProperties;
- (void)_makeConfiguredFormatLiveForAttachedMediaKey:(id)arg1;
- (void)_markEndOfLiveOutputForAttachedMediaKey:(id)arg1;
- (id)_mediaConfigurationForBufferCountOfPossiblyUnspecifiedAttachedMediaKey:(id)arg1;
- (id)_mediaConfigurationForPossiblyUnspecifiedAttachedMediaKey:(id)arg1;
- (id)_mediaPropertiesForPossiblyUnspecifiedAttachedMediaKey:(id)arg1;
- (int)_passthroughModeForAttachedMediaKey:(id)arg1;
- (int)_passthroughModeForUnspecifiedAttachedMedia;
- (id)_poolName;
- (void)_prepareForConfiguredFormatToBecomeLiveForAttachedMediaKey:(id)arg1;
- (void)_setMediaProperties:(id)arg1 forAttachedMediaKey:(id)arg2;
- (void)_setPrimaryProperties:(id)arg1;
- (void)addPoolPreallocationCompletionHandler:(id /* block */)arg1;
- (id)attachedMediaKeyDrivenByInputAttachedMediaKey:(id)arg1 inputIndex:(unsigned long long)arg2;
- (bool)buffersOriginateUpstream;
- (long long)configurationID;
- (id)connection;
- (id)consumer;
- (void)dealloc;
- (id)description;
- (bool)discardsSampleData;
- (bool)dropsSampleBuffersWithUnexpectedPTS;
- (void)emitDroppedSample:(id)arg1;
- (void)emitIrisReferenceMovieRequestWithInfo:(id)arg1;
- (void)emitNodeError:(id)arg1;
- (void)emitSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (void)emitStillImagePrewarmMessageWithRequestedStillImageCaptureSettings:(id)arg1 resolvedStillImageCaptureSettings:(id)arg2 resolvedPhotoManifest:(id)arg3;
- (void)emitStillImageReferenceFrameBracketedCaptureSequenceNumberMessageWithSequenceNumber:(int)arg1;
- (id)format;
- (id)formatRequirements;
- (int)indexOfInputWhichDrivesThisOutput;
- (id)initWithMediaType:(unsigned int)arg1 node:(id)arg2;
- (void)invalidate;
- (long long)liveConfigurationID;
- (id)liveFormat;
- (id)livePixelBufferPool;
- (void)makeConfiguredFormatLive;
- (void)markEndOfLiveOutput;
- (float)maxSampleDataOutputRate;
- (id)mediaConfigurationForAttachedMediaKey:(id)arg1;
- (id)mediaPropertiesForAttachedMediaKey:(id)arg1;
- (unsigned int)mediaType;
- (bool)mediaTypeIsVideo;
- (id)memoryPool;
- (id)name;
- (id)node;
- (unsigned int)numberOfBuffersDropped;
- (unsigned int)numberOfBuffersEmitted;
- (int)owningNodeRetainedBufferCount;
- (int)passthroughMode;
- (bool)prefetchesPixelBufferPool;
- (void)prepareForConfiguredFormatToBecomeLive;
- (id)preparedPixelBufferPool;
- (id)primaryMediaConfiguration;
- (id)primaryMediaProperties;
- (bool)providesPixelBufferPool;
- (id)resolvedAttachedMediaKeys;
- (int)retainedBufferCount;
- (void)setBuffersOriginateUpstream:(bool)arg1;
- (void)setConfigurationID:(long long)arg1;
- (void)setConsumer:(id)arg1;
- (void)setDiscardsSampleData:(bool)arg1;
- (void)setDropsSampleBuffersWithUnexpectedPTS:(bool)arg1;
- (void)setFormat:(id)arg1;
- (void)setFormatRequirements:(id)arg1;
- (void)setIndexOfInputWhichDrivesThisOutput:(int)arg1;
- (void)setLiveFormat:(id)arg1;
- (void)setMaxSampleDataOutputRate:(float)arg1;
- (void)setMediaConfiguration:(id)arg1 forAttachedMediaKey:(id)arg2;
- (void)setMemoryPool:(id)arg1;
- (void)setName:(id)arg1;
- (void)setNodePreparedPixelBufferPool:(id)arg1;
- (void)setOwningNodeRetainedBufferCount:(int)arg1;
- (void)setPassthroughMode:(int)arg1;
- (void)setPrefetchesPixelBufferPool:(bool)arg1;
- (void)setPreparedSharedPixelBufferPool:(id)arg1;
- (void)setProvidesPixelBufferPool:(bool)arg1;
- (void)setRetainedBufferCount:(int)arg1;
- (void)setUnspecifiedAttachedMediaConfiguration:(id)arg1;
- (id)specifiedAttachedMediaKeys;
- (id)unspecifiedAttachedMediaConfiguration;
- (id)videoFormat;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
