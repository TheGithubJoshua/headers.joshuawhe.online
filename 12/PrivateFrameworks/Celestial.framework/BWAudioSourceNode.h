<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWAudioSourceNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWAudioSourceNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWAudioSourceNode : BWSourceNode <BWAudioSourceRecordingReadinessDelegate> {
    struct opaqueCMSession { } * _CMSession;
    struct __CFString { } * _CMSessionAudioMode;
    struct opaqueCMSimpleQueue { } * _activeBuffersQueue;
    long long  _auRenderCount;
    unsigned int  _auSubType;
    int  _audioLevelUnits;
    struct OpaqueAudioComponentInstance { } * _audioUnit;
    struct { 
        unsigned int val[8]; 
    }  _clientAuditToken;
    bool  _clientAuditTokenIsValid;
    int  _clientPID;
    struct OpaqueCMClock { } * _clock;
    NSObject<OS_dispatch_queue> * _cmSessionOrientationLockQueue;
    bool  _configuresSession;
    struct TimestampedAudioBufferList { 
        struct __CFAllocator {} *allocator; 
        long long auRenderCount; 
        unsigned int dataBytesCapacity; 
        unsigned int numFrames; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } pts; 
        struct AudioBufferList {} *abl; 
        unsigned int numPrependedSilenceFrames; 
    }  _currentSilenceBuffer;
    bool  _didBeginInterruption;
    bool  _doEndInterruption;
    struct opaqueCMFormatDescription { } * _formatDescription;
    NSObject<OS_dispatch_queue> * _generateSamplesDispatchQueue;
    struct opaqueCMSimpleQueue { } * _inactiveBuffersQueue;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _ioprocTimeStampDeltaLimit;
    bool  _isAppAudioSession;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _latencyOffset;
    bool  _levelMeteringEnabled;
    unsigned long long  _nextExpectedHostTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _nextExpectedSampleTime;
    NSObject<OS_dispatch_queue> * _preparedToRecordHandlerCallbackQueue;
    unsigned int  _prevNumFrames;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _prevPTS;
    unsigned int  _pullDuration;
    struct opaqueCMSimpleQueue { } * _renderProcErrorQueue;
    bool  _selectsMicForFrontCamera;
    long long  _silenceFramesGeneratedSinceLastAURenderProc;
    NSObject<OS_dispatch_source> * _silenceTimer;
    bool  _streamInterrupted;
    bool  _streamStarted;
    bool  _useDecoupledIO;
}

@property (nonatomic, readonly) NSArray *audioLevels;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) bool didBeginInterruption;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool interrupted;
@property (readonly) Class superclass;

+ (double)_desiredSampleRate;
+ (id)audioSourceNodeWithAttributes:(id)arg1 clock:(struct OpaqueCMClock { }*)arg2 CMSession:(struct opaqueCMSession { }*)arg3 configureSession:(bool)arg4 doEndInterruption:(bool)arg5 clientToken:(id)arg6 clientPID:(int)arg7 clientVersionOfLinkedSDK:(unsigned int)arg8;
+ (void)initialize;

- (struct __CFString { }*)CMSessionAudioMode;
- (unsigned int)_audioCombinedLatency;
- (bool)_cmSessionBooleanPropertyIsTrue:(struct __CFString { }*)arg1;
- (int)_configureCMSessionWithDefaultHardwareSampleRate:(double)arg1 didCallDoNotNotifyOtherSessionsOnNextInactive:(bool*)arg2;
- (struct opaqueCMSampleBuffer { }*)_createSampleBufferForTimestampedAudioBufferList:(struct TimestampedAudioBufferList { struct __CFAllocator {} *x1; long long x2; unsigned int x3; unsigned int x4; struct { long long x_5_1_1; int x_5_1_2; unsigned int x_5_1_3; long long x_5_1_4; } x5; struct AudioBufferList {} *x6; unsigned int x7; }*)arg1;
- (int)_deactivateCMSessionIfNecessary:(bool*)arg1;
- (int)_generatePullBuffers;
- (void)_generateSamples;
- (void)_generateSilenceIfNeeded;
- (int)_getAudioDevicePullFrames:(unsigned int*)arg1;
- (id)_initWithAttributes:(id)arg1 clock:(struct OpaqueCMClock { }*)arg2 CMSession:(struct opaqueCMSession { }*)arg3 configureSession:(bool)arg4 doEndInterruption:(bool)arg5 clientToken:(id)arg6 clientPID:(int)arg7 clientVersionOfLinkedSDK:(unsigned int)arg8;
- (int)_selectMicForAudioRoute:(id)arg1;
- (int)_setCMSessionAudioModeAndSelectMic:(bool*)arg1;
- (int)_setCMSessionPropertyWithKey:(struct __CFString { }*)arg1 value:(void*)arg2;
- (int)_setupAudioUnit;
- (void)_setupPrepareToRecordStateWithFlags:(unsigned int)arg1;
- (int)_updatePullFormatDescription;
- (id)audioLevels;
- (struct OpaqueCMClock { }*)clock;
- (void)dealloc;
- (bool)didBeginInterruption;
- (bool)hasNonLiveConfigurationChanges;
- (bool)interrupted;
- (bool)levelMeteringEnabled;
- (void)makeCurrentConfigurationLive;
- (void)makeOutputsLiveIfNeeded;
- (id)nodeSubType;
- (void)prepareForCurrentConfigurationToBecomeLive;
- (void)prepareToStartRecordingWithOrientation:(int)arg1 recordingSettingsID:(long long)arg2 completionHandler:(id /* block */)arg3;
- (bool)selectsMicForFrontCamera;
- (void)setCMSessionAudioMode:(struct __CFString { }*)arg1;
- (void)setInterrupted:(bool)arg1;
- (void)setLevelMeteringEnabled:(bool)arg1;
- (void)setSelectsMicForFrontCamera:(bool)arg1;
- (bool)start:(id*)arg1;
- (bool)stop:(id*)arg1;
- (void)unprepareForRecording;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
