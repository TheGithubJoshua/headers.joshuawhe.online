<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FigCaptureSourceConfiguration.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/FigCaptureSourceConfiguration.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface FigCaptureSourceConfiguration : NSObject <FigXPCCoding, NSCopying> {
    bool  _applyMaxExposureDurationFrameworkOverrideWhenAvailable;
    bool  _builtInMicrophoneStereoAudioCaptureEnabled;
    int  _colorSpace;
    bool  _depthDataDeliveryEnabled;
    FigCaptureSourceDepthDataFormat * _depthDataFormat;
    float  _depthDataMaxFrameRate;
    NSDictionary * _faceDetectionConfiguration;
    bool  _hasSetVideoZoomFactorOnCaptureSource;
    bool  _highlightRecoveryEnabled;
    int  _imageControlMode;
    bool  _lowLightVideoCaptureEnabled;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _maxExposureDurationClientOverride;
    FigCaptureSourceVideoFormat * _requiredFormat;
    float  _requiredMaxFrameRate;
    float  _requiredMinFrameRate;
    bool  _sensorHDREnabled;
    struct OpaqueFigCaptureSource { } * _source;
    NSDictionary * _sourceAttributes;
    NSString * _sourceID;
    int  _sourceType;
    float  _videoZoomFactor;
    float  _videoZoomRampAcceleration;
}

@property (nonatomic) bool applyMaxExposureDurationFrameworkOverrideWhenAvailable;
@property (readonly) bool bravoShiftMitigationEnabled;
@property (nonatomic) bool builtInMicrophoneStereoAudioCaptureEnabled;
@property (nonatomic) int colorSpace;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool depthDataDeliveryEnabled;
@property (nonatomic, retain) FigCaptureSourceDepthDataFormat *depthDataFormat;
@property (nonatomic) float depthDataMaxFrameRate;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSDictionary *faceDetectionConfiguration;
@property (nonatomic) bool hasSetVideoZoomFactorOnCaptureSource;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool highlightRecoveryEnabled;
@property (nonatomic) int imageControlMode;
@property (nonatomic) bool lowLightVideoCaptureEnabled;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } maxExposureDurationClientOverride;
@property (nonatomic, retain) FigCaptureSourceVideoFormat *requiredFormat;
@property (nonatomic) float requiredMaxFrameRate;
@property (nonatomic) float requiredMinFrameRate;
@property (nonatomic) bool sensorHDREnabled;
@property (readonly) bool smartCameraEnabled;
@property (nonatomic, readonly) struct OpaqueFigCaptureSource { }*source;
@property (nonatomic, copy) NSString *sourceID;
@property (nonatomic, readonly) int sourcePosition;
@property (nonatomic, readonly) int sourceType;
@property (readonly) Class superclass;
@property (nonatomic) float videoZoomFactor;
@property (nonatomic) float videoZoomRampAcceleration;

+ (int)sourceTypeForString:(id)arg1;
+ (id)stringForSourceType:(int)arg1;

- (int)_deviceType;
- (bool)_isCameraSource;
- (bool)_isMicSource;
- (id)_sourceAttributes;
- (int)_sourceToken;
- (id)_sourceUID;
- (bool)applyMaxExposureDurationFrameworkOverrideWhenAvailable;
- (bool)bravoShiftMitigationEnabled;
- (bool)builtInMicrophoneStereoAudioCaptureEnabled;
- (int)colorSpace;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)copyXPCEncoding;
- (void)dealloc;
- (bool)depthDataDeliveryEnabled;
- (id)depthDataFormat;
- (float)depthDataMaxFrameRate;
- (id)description;
- (id)faceDetectionConfiguration;
- (bool)hasSetVideoZoomFactorOnCaptureSource;
- (bool)highlightRecoveryEnabled;
- (int)imageControlMode;
- (id)initWithSource:(struct OpaqueFigCaptureSource { }*)arg1;
- (id)initWithSourceType:(int)arg1;
- (id)initWithXPCEncoding:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)lowLightVideoCaptureEnabled;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })maxExposureDurationClientOverride;
- (id)requiredFormat;
- (float)requiredMaxFrameRate;
- (float)requiredMinFrameRate;
- (bool)sensorHDREnabled;
- (void)setApplyMaxExposureDurationFrameworkOverrideWhenAvailable:(bool)arg1;
- (void)setBuiltInMicrophoneStereoAudioCaptureEnabled:(bool)arg1;
- (void)setColorSpace:(int)arg1;
- (void)setDepthDataDeliveryEnabled:(bool)arg1;
- (void)setDepthDataFormat:(id)arg1;
- (void)setDepthDataMaxFrameRate:(float)arg1;
- (void)setFaceDetectionConfiguration:(id)arg1;
- (void)setHasSetVideoZoomFactorOnCaptureSource:(bool)arg1;
- (void)setHighlightRecoveryEnabled:(bool)arg1;
- (void)setImageControlMode:(int)arg1;
- (void)setLowLightVideoCaptureEnabled:(bool)arg1;
- (void)setMaxExposureDurationClientOverride:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setRequiredFormat:(id)arg1;
- (void)setRequiredMaxFrameRate:(float)arg1;
- (void)setRequiredMinFrameRate:(float)arg1;
- (void)setSensorHDREnabled:(bool)arg1;
- (void)setSourceID:(id)arg1;
- (void)setVideoZoomFactor:(float)arg1;
- (void)setVideoZoomRampAcceleration:(float)arg1;
- (bool)smartCameraEnabled;
- (struct OpaqueFigCaptureSource { }*)source;
- (id)sourceID;
- (int)sourcePosition;
- (int)sourceType;
- (float)videoZoomFactor;
- (float)videoZoomRampAcceleration;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
