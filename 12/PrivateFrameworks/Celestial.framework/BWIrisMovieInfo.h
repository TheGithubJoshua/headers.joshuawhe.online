<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWIrisMovieInfo.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWIrisMovieInfo.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWIrisMovieInfo : NSObject <NSCopying> {
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _audioOffset;
    bool  _finalEnqueuedIrisRequest;
    bool  _finalReferenceMovie;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _masterMovieStartTime;
    NSURL * _masterMovieURL;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _movieEndTime;
    NSArray * _movieLevelMetadataForSDOFOriginalMovie;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _movieStartTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _movieTrimEndTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _movieTrimStartTime;
    bool  _originalPhotoRecording;
    NSURL * _outputMovieURL;
    NSURL * _outputURLForSDOFOriginalMovie;
    unsigned int  _requestedSDOFVariants;
    FigCaptureMovieFileRecordingSettings * _settings;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _stillImageCaptureHostTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _stillImageCaptureTime;
    bool  _stillImageEncoderKeyFrameEmitted;
    bool  _stillImageVISKeyFrameTagged;
    NSURL * _temporaryMovieURL;
    NSURL * _temporaryURLForSDOFOriginalMovie;
}

@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } audioOffset;
@property (nonatomic, readonly) bool containsTrims;
@property (getter=isFinalEnqueuedIrisRequest, nonatomic) bool finalEnqueuedIrisRequest;
@property (getter=isFinalReferenceMovie, nonatomic) bool finalReferenceMovie;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } masterMovieStartTime;
@property (nonatomic, retain) NSURL *masterMovieURL;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } movieEndTime;
@property (nonatomic, copy) NSArray *movieLevelMetadataForSDOFOriginalMovie;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } movieStartTime;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } movieTrimEndTime;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } movieTrimStartTime;
@property (nonatomic, readonly) int numberOfRequestedVariants;
@property (getter=isOriginalPhotoRecording, nonatomic) bool originalPhotoRecording;
@property (nonatomic, retain) NSURL *outputMovieURL;
@property (nonatomic, copy) NSURL *outputURLForSDOFOriginalMovie;
@property (nonatomic) unsigned int requestedSDOFVariants;
@property (nonatomic, readonly) FigCaptureMovieFileRecordingSettings *settings;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } stillImageCaptureHostTime;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } stillImageCaptureTime;
@property (nonatomic) bool stillImageEncoderKeyFrameEmitted;
@property (nonatomic) bool stillImageVISKeyFrameTagged;
@property (nonatomic, retain) NSURL *temporaryMovieURL;
@property (nonatomic, copy) NSURL *temporaryURLForSDOFOriginalMovie;

+ (id)irisMovieInfoWithFigCaptureMovieFileRecordingSettings:(id)arg1 stillImageCaptureTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 stillImageCaptureHostTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 originalPhotoRecording:(bool)arg4;

- (id)_initWithFigCaptureMovieFileRecordingSettings:(id)arg1 stillImageCaptureTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 stillImageCaptureHostTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 originalPhotoRecording:(bool)arg4;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })audioOffset;
- (bool)containsTrims;
- (id)copyMovieInfosForRequestedSDOFVariants;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (bool)isFinalEnqueuedIrisRequest;
- (bool)isFinalReferenceMovie;
- (bool)isOriginalPhotoRecording;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })masterMovieStartTime;
- (id)masterMovieURL;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })movieEndTime;
- (id)movieLevelMetadataForSDOFOriginalMovie;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })movieStartTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })movieTrimEndTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })movieTrimStartTime;
- (int)numberOfRequestedVariants;
- (id)outputMovieURL;
- (id)outputURLForSDOFOriginalMovie;
- (unsigned int)requestedSDOFVariants;
- (void)setAudioOffset:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setFinalEnqueuedIrisRequest:(bool)arg1;
- (void)setFinalReferenceMovie:(bool)arg1;
- (void)setMasterMovieStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMasterMovieURL:(id)arg1;
- (void)setMovieEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMovieLevelMetadataForSDOFOriginalMovie:(id)arg1;
- (void)setMovieStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMovieTrimEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setMovieTrimStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setOriginalPhotoRecording:(bool)arg1;
- (void)setOutputMovieURL:(id)arg1;
- (void)setOutputURLForSDOFOriginalMovie:(id)arg1;
- (void)setRequestedSDOFVariants:(unsigned int)arg1;
- (void)setStillImageCaptureTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setStillImageEncoderKeyFrameEmitted:(bool)arg1;
- (void)setStillImageVISKeyFrameTagged:(bool)arg1;
- (void)setTemporaryMovieURL:(id)arg1;
- (void)setTemporaryURLForSDOFOriginalMovie:(id)arg1;
- (id)settings;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })stillImageCaptureHostTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })stillImageCaptureTime;
- (bool)stillImageEncoderKeyFrameEmitted;
- (bool)stillImageVISKeyFrameTagged;
- (id)temporaryMovieURL;
- (id)temporaryURLForSDOFOriginalMovie;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
