<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FigCaptureCalibrationContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/FigCaptureCalibrationContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface FigCaptureCalibrationContext : NSObject {
    NSString * _activityName;
    unsigned long long  _expectedDataSize;
    NSString * _internalLogName;
    int  _interval;
    NSMutableDictionary * _lastSuccessfulCalibrationData;
    struct { 
        double x; 
        double y; 
        double z; 
    }  _lastSuccessfulCalibrationMagneticField;
    double  _lastSuccessfulCalibrationTimeStamp;
    int  _minimumBatteryLevelToRun;
    NSString * _preferenceString;
    NSString * _propertyName;
    NSArray * _supportedDevices;
}

@property (nonatomic, readonly) NSString *activityName;
@property (nonatomic, readonly) unsigned long long expectedDataSize;
@property (nonatomic, readonly) int interval;
@property (nonatomic, retain) NSDictionary *lastSuccessfulCalibrationData;
@property (nonatomic) struct { double x1; double x2; double x3; } lastSuccessfulCalibrationMagneticField;
@property (nonatomic) double lastSuccessfulCalibrationTimeStamp;
@property (nonatomic, readonly) int minimumBatteryLevelToRun;
@property (nonatomic, readonly) NSString *propertyName;

+ (id)calibrationDataStringForInternalLogging:(id)arg1;
+ (unsigned int)calibrationStatusFromRawStreamCalibrationData:(id)arg1;
+ (id)createRawStreamCalibrationDataWithFailureReasons:(int)arg1;
+ (void)initialize;
+ (void)printDebugInfoForRawStreamCalibrationData:(id)arg1;
+ (void)setStatusForCalibrationData:(id)arg1 status:(int)arg2;

- (id)_createDictionaryForFailureOutsideFirmwareWithReasons:(unsigned int)arg1;
- (unsigned int)_updateAndStashCalibrationData:(id)arg1 externalErrors:(unsigned int)arg2 hasFirmwareErrors:(bool)arg3 magneticFieldAttempts:(int)arg4 magneticField:(struct { double x1; double x2; double x3; })arg5;
- (void)_writeCalibrationDataToInternalLogFile:(id)arg1 magneticField:(struct { double x1; double x2; double x3; })arg2;
- (id)activityName;
- (id)calibrationDataHistory;
- (unsigned long long)expectedDataSize;
- (id)initWithPreferenceString:(id)arg1 withActivityName:(id)arg2 withPropertyName:(id)arg3 withExpectedDataSize:(unsigned long long)arg4 withInterval:(int)arg5 withMinimumBatteryLevel:(int)arg6 withInternalLogName:(id)arg7 supportedDeviceNames:(id)arg8;
- (id)initWithSupportedDeviceNames:(id)arg1;
- (int)interval;
- (id)lastSuccessfulCalibrationData;
- (struct { double x1; double x2; double x3; })lastSuccessfulCalibrationMagneticField;
- (double)lastSuccessfulCalibrationTimeStamp;
- (int)minimumBatteryLevelToRun;
- (id)propertyName;
- (void)pushCalibrationDataToHistory:(id)arg1 isRejected:(bool*)arg2;
- (void)reportForAggdLoggingWithCalibrationData:(id)arg1 isValid:(bool)arg2 magneticFieldMagnitude:(double)arg3;
- (void)setLastSuccessfulCalibrationData:(id)arg1;
- (void)setLastSuccessfulCalibrationMagneticField:(struct { double x1; double x2; double x3; })arg1;
- (void)setLastSuccessfulCalibrationTimeStamp:(double)arg1;
- (void)updateWithNewCalibrationData:(id)arg1 orExternalErrors:(unsigned int)arg2 magneticFieldAttempts:(int)arg3 magneticField:(struct { double x1; double x2; double x3; })arg4 isCalibrationValid:(bool*)arg5 calibrationStatus:(unsigned int*)arg6;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
