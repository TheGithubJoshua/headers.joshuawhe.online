<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BWRenderList.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/Celestial.framework/BWRenderList.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/Celestial.framework/Celestial (2290.13.1.3)
 */

@interface BWRenderList : NSObject <BWRenderListParameterListProvider> {
    bool  _affectsMetadata;
    bool  _isolationQueuePrepared;
    struct BWRenderListRendererNode { struct { struct BWRenderListRendererNode {} *x_1_1_1; } x1; id x2; } * _originalMarkerRendererNode;
    struct BWRenderListParameterList { 
        struct BWRenderListParameterNode {} *slh_first; 
    }  _parameterList;
    NSObject<OS_dispatch_queue> * _preparationIsolationQueue;
    struct BWRenderListRendererList { 
        struct BWRenderListRendererNode {} *slh_first; 
    }  _rendererList;
    bool  _supportsAnimation;
}

@property (nonatomic, readonly) bool affectsMetadata;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct BWRenderListParameterList { struct BWRenderListParameterNode {} *x1; }*parameterList;
@property (getter=isPrepared, nonatomic) bool prepared;
@property (nonatomic, readonly) bool producesOriginalRender;
@property (nonatomic, readonly) struct BWRenderListRendererList { struct BWRenderListRendererNode {} *x1; }*rendererList;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool supportsAnimation;

+ (void)initialize;
+ (id)shallowDepthOfFieldFilterName;

- (void)_appendBatchRendererFromProvider:(id)arg1 toRendererList:(struct BWRenderListRendererList { struct BWRenderListRendererNode {} *x1; }*)arg2 parameterList:(struct BWRenderListParameterList { struct BWRenderListParameterNode {} *x1; }*)arg3 withContext:(struct BWRenderListOptimizationContext { short x1; struct BWRenderListRendererNode {} *x2; struct BWRenderListParameterNode {} *x3; struct BWRenderListRendererNode {} *x4; id x5; id x6; short x7; bool x8; id x9; bool x10; bool x11; }*)arg4;
- (void)_appendSingleRendererOfType:(short)arg1 forFilter:(id)arg2 fromProvider:(id)arg3 toRendererList:(struct BWRenderListRendererList { struct BWRenderListRendererNode {} *x1; }*)arg4 parameterList:(struct BWRenderListParameterList { struct BWRenderListParameterNode {} *x1; }*)arg5 withContext:(struct BWRenderListOptimizationContext { short x1; struct BWRenderListRendererNode {} *x2; struct BWRenderListParameterNode {} *x3; struct BWRenderListRendererNode {} *x4; id x5; id x6; short x7; bool x8; id x9; bool x10; bool x11; }*)arg6;
- (void)_continueOptimizingRendererList:(struct BWRenderListRendererList { struct BWRenderListRendererNode {} *x1; }*)arg1 parameterList:(struct BWRenderListParameterList { struct BWRenderListParameterNode {} *x1; }*)arg2 withFilter:(id)arg3 fromProvider:(id)arg4 context:(struct BWRenderListOptimizationContext { short x1; struct BWRenderListRendererNode {} *x2; struct BWRenderListParameterNode {} *x3; struct BWRenderListRendererNode {} *x4; id x5; id x6; short x7; bool x8; id x9; bool x10; bool x11; }*)arg5;
- (void)_finishOptimizingRendererList:(struct BWRenderListRendererList { struct BWRenderListRendererNode {} *x1; }*)arg1 parameterList:(struct BWRenderListParameterList { struct BWRenderListParameterNode {} *x1; }*)arg2 fromProvider:(id)arg3 context:(struct BWRenderListOptimizationContext { short x1; struct BWRenderListRendererNode {} *x2; struct BWRenderListParameterNode {} *x3; struct BWRenderListRendererNode {} *x4; id x5; id x6; short x7; bool x8; id x9; bool x10; bool x11; }*)arg4;
- (bool)_shouldStreamingSDOFRendererConsumeFilter:(id)arg1;
- (bool)_shouldUseMetalRendererForFilterWithName:(id)arg1 optimizationStrategy:(short)arg2;
- (bool)_shouldUseOptimizationStrategyDependentSDOFRendererForFilterWithName:(id)arg1;
- (bool)affectsMetadata;
- (id)copyParameters;
- (void)dealloc;
- (struct BWRenderListRendererNode { struct { struct BWRenderListRendererNode {} *x_1_1_1; } x1; id x2; }*)firstRendererNode;
- (id)init;
- (id)initWithAnimationSupported:(bool)arg1;
- (id)initWithResourceProvider:(id)arg1 originalFilters:(id)arg2 processedFilters:(id)arg3 optimizationStrategy:(short)arg4;
- (bool)isPrepared;
- (struct BWRenderListParameterList { struct BWRenderListParameterNode {} *x1; }*)parameterList;
- (void)prepareWithParameters:(id)arg1 forInputVideoFormat:(id)arg2 inputDepthFormat:(id)arg3;
- (bool)producesOriginalRender;
- (struct BWRenderListRendererList { struct BWRenderListRendererNode {} *x1; }*)rendererList;
- (void)setPrepared:(bool)arg1;
- (bool)shouldAllowOriginalRenderFromNode:(struct BWRenderListRendererNode { struct { struct BWRenderListRendererNode {} *x_1_1_1; } x1; id x2; }*)arg1;
- (bool)supportsAnimation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
