<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BKUIPearlPillView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/BiometricKitUI.framework/BKUIPearlPillView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/BiometricKitUI.framework/BiometricKitUI (1)
 */

@interface BKUIPearlPillView : UIView {
    double  _arc;
    double  _cornerRadius;
    CADisplayLink * _displayLink;
    double  _height;
    double  _numberOfPills;
    double  _pillCompletedHeight;
    double  _pillCornerRadius;
    double  _pillInitialHeight;
    double  _radius;
    id /* block */  _radiusAnimationCompletion;
    double  _radiusAnimationDuration;
    NSDate * _radiusAnimationStart;
    double  _ringHeight;
    CAShapeLayer * _shapeLayer;
    double  _startArc;
    double  _startCornerRadius;
    double  _startHeight;
    double  _startRadius;
    unsigned long long  _state;
    id /* block */  _stateAnimationCompletion;
    double  _stateAnimationDuration;
    NSDate * _stateAnimationStart;
    NSTimer * _stateDelayTimer;
    double  _targetArc;
    double  _targetCornerRadius;
    double  _targetHeight;
    double  _targetRadius;
}

@property (nonatomic) double arc;
@property (getter=isCompleted, nonatomic, readonly) bool completed;
@property (nonatomic) double cornerRadius;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic) double height;
@property (nonatomic) double numberOfPills;
@property (nonatomic) double pillCompletedHeight;
@property (nonatomic) double pillCornerRadius;
@property (nonatomic) double pillInitialHeight;
@property (nonatomic) double radius;
@property (nonatomic, copy) id /* block */ radiusAnimationCompletion;
@property (nonatomic) double radiusAnimationDuration;
@property (nonatomic, retain) NSDate *radiusAnimationStart;
@property (nonatomic) double ringHeight;
@property (nonatomic, retain) CAShapeLayer *shapeLayer;
@property (nonatomic) double startArc;
@property (nonatomic) double startCornerRadius;
@property (nonatomic) double startHeight;
@property (nonatomic) double startRadius;
@property (nonatomic) unsigned long long state;
@property (nonatomic, copy) id /* block */ stateAnimationCompletion;
@property (nonatomic) double stateAnimationDuration;
@property (nonatomic, retain) NSDate *stateAnimationStart;
@property (nonatomic, retain) NSTimer *stateDelayTimer;
@property (nonatomic) double targetArc;
@property (nonatomic) double targetCornerRadius;
@property (nonatomic) double targetHeight;
@property (nonatomic) double targetRadius;

- (void).cxx_destruct;
- (double)arc;
- (double)cornerRadius;
- (id)displayLink;
- (void)displayTick;
- (double)height;
- (id)init;
- (bool)isCompleted;
- (void)layoutSubviews;
- (double)numberOfPills;
- (double)pillCompletedHeight;
- (double)pillCornerRadius;
- (double)pillInitialHeight;
- (double)pillMaxLength;
- (struct CGPath { }*)pillPath;
- (double)radius;
- (id /* block */)radiusAnimationCompletion;
- (double)radiusAnimationDuration;
- (id)radiusAnimationStart;
- (double)ringArcLength;
- (double)ringHeight;
- (void)setArc:(double)arg1;
- (void)setCornerRadius:(double)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setHeight:(double)arg1;
- (void)setNumberOfPills:(double)arg1;
- (void)setPillCompletedHeight:(double)arg1;
- (void)setPillCornerRadius:(double)arg1;
- (void)setPillInitialHeight:(double)arg1;
- (void)setRadius:(double)arg1;
- (void)setRadius:(double)arg1 animationDuration:(double)arg2 completion:(id /* block */)arg3;
- (void)setRadiusAnimationCompletion:(id /* block */)arg1;
- (void)setRadiusAnimationDuration:(double)arg1;
- (void)setRadiusAnimationStart:(id)arg1;
- (void)setRingHeight:(double)arg1;
- (void)setShapeLayer:(id)arg1;
- (void)setStartArc:(double)arg1;
- (void)setStartCornerRadius:(double)arg1;
- (void)setStartHeight:(double)arg1;
- (void)setStartRadius:(double)arg1;
- (void)setState:(unsigned long long)arg1;
- (void)setState:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setState:(unsigned long long)arg1 animated:(bool)arg2 animationDelay:(double)arg3 completion:(id /* block */)arg4;
- (void)setState:(unsigned long long)arg1 animated:(bool)arg2 completion:(id /* block */)arg3;
- (void)setStateAnimationCompletion:(id /* block */)arg1;
- (void)setStateAnimationDuration:(double)arg1;
- (void)setStateAnimationStart:(id)arg1;
- (void)setStateDelayTimer:(id)arg1;
- (void)setTargetArc:(double)arg1;
- (void)setTargetCornerRadius:(double)arg1;
- (void)setTargetHeight:(double)arg1;
- (void)setTargetRadius:(double)arg1;
- (id)shapeLayer;
- (void)startAnimationWithDuration:(double)arg1 completion:(id /* block */)arg2;
- (double)startArc;
- (double)startCornerRadius;
- (double)startHeight;
- (double)startRadius;
- (unsigned long long)state;
- (id /* block */)stateAnimationCompletion;
- (double)stateAnimationDuration;
- (id)stateAnimationStart;
- (id)stateDelayTimer;
- (double)targetArc;
- (double)targetCornerRadius;
- (double)targetHeight;
- (double)targetRadius;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
