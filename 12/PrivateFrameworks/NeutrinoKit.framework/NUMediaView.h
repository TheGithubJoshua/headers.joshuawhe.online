<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NUMediaView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/NeutrinoKit.framework/NUMediaView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/NeutrinoKit.framework/NeutrinoKit (3462.2.130)
 */

@interface NUMediaView : UIView <NUAVPlayerControllerDelegate, NUAVPlayerViewDelegate> {
    struct CGSize { 
        double width; 
        double height; 
    }  __masterSizeWithoutGeometry;
    double  _angle;
    bool  _centerContent;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _cropRect;
    bool  _debugEnabled;
    <NUMediaViewDelegate> * _delegate;
    struct { 
        bool hasDidFinishRendering; 
        bool hasDidUpdateLivePhoto; 
        bool hasDidFinishRenderingWithStatistics; 
        bool hasDidZoom; 
        bool hasWillBeginZooming; 
        bool hasDidEndZooming; 
        bool hasIsReadyForVideoPlayback; 
        bool hasDidStartPreparingVideo; 
        bool hasDidFinishPreparingVideo; 
    }  _delegateFlags;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _edgeInsets;
    UIView * _livePhotoView;
    bool  _loopsVideo;
    bool  _muted;
    NUAVPlayerController * _nuAVPlayerController;
    NUAVPlayerView * _playerView;
    NURenderView * _renderView;
    NUMediaViewRenderer * _renderer;
    bool  _scrollUpdatesSuppressed;
    NUScrollView * _scrollView;
    long long  _transitionCount;
    bool  _videoPlayerVisible;
}

@property (nonatomic) struct CGSize { double x1; double x2; } _masterSizeWithoutGeometry;
@property (nonatomic) double angle;
@property (nonatomic) bool centerContent;
@property (nonatomic, copy) NUComposition *composition;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } cropRect;
@property (readonly, copy) NSString *debugDescription;
@property (getter=isDebugEnabled, nonatomic) bool debugEnabled;
@property (nonatomic) <NUMediaViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } edgeInsets;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } imageFrame;
@property (nonatomic) bool loopsVideoPlayback;
@property (nonatomic) double maximumZoomScale;
@property (nonatomic) double minimumZoomScale;
@property (getter=isMuted, nonatomic) bool muted;
@property (nonatomic) NSArray *pipelineFilters;
@property (nonatomic) bool scrollUpdatesSuppressed;
@property (readonly) Class superclass;
@property (getter=isVideoEnabled, nonatomic) bool videoEnabled;
@property (getter=isVideoPlayerVisible, nonatomic) bool videoPlayerVisible;
@property (nonatomic) double zoomScale;

+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_proposedInsetsForInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1 contentSize:(struct CGSize { double x1; double x2; })arg2 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 centerContent:(bool)arg4;

- (void).cxx_destruct;
- (void)_beginTransition;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_edgeInsetsForContentSize:(struct CGSize { double x1; double x2; })arg1 inFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_endTransition;
- (id)_geometry;
- (id)_imageLayer;
- (struct CGSize { double x1; double x2; })_imageSize;
- (id)_layerRecursiveDescription;
- (id)_livePhotoView;
- (struct CGSize { double x1; double x2; })_masterSizeWithoutGeometry;
- (id)_renderView;
- (id)_renderer;
- (void)_rendererDidCreateAVPlayerController:(id)arg1;
- (void)_rendererDidFinishPreparingVideo;
- (void)_rendererDidFinishWithStatistics:(id)arg1;
- (void)_rendererDidStartPreparingVideo;
- (void)_rendererDidUpdateLivePhoto;
- (id)_scrollView;
- (void)_setLayerFilters:(id)arg1;
- (void)_setPipelineFilters:(id)arg1 shouldUpdateContent:(bool)arg2;
- (void)_setupViews;
- (void)_startLoopPlayback;
- (void)_stopLoopPlayback;
- (void)_transitionToInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_updateContentInsets;
- (void)_updateRenderContent;
- (void)_updateVideoPlayerAlpha;
- (id)_videoPlayerView;
- (id)_videoPlayerViewWithoutControls;
- (id)_viewRecursiveDescription;
- (void)_withComposition:(id)arg1 visitRenderClient:(id /* block */)arg2;
- (double)angle;
- (bool)centerContent;
- (id)composition;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromSpace:(id)arg2 toView:(id)arg3;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromView:(id)arg2 toSpace:(id)arg3;
- (struct CGPoint { double x1; double x2; })convertPointFromImage:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPointToImage:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })cropRect;
- (id)delegate;
- (void)didMoveToWindow;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })edgeInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageFrame;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDebugEnabled;
- (bool)isMuted;
- (bool)isReady;
- (bool)isVideoEnabled;
- (bool)isVideoPlayerVisible;
- (void)layoutSubviews;
- (bool)loopsVideoPlayback;
- (double)maximumZoomScale;
- (double)minimumZoomScale;
- (id)pipelineFilters;
- (void)playerController:(id)arg1 didUpdateElapsedTime:(double)arg2 duration:(double)arg3;
- (void)playerControllerDidFinishPlaying:(id)arg1 duration:(double)arg2;
- (void)playerControllerIsReadyForPlayback:(id)arg1;
- (void)playerViewReadyForDisplayDidChange:(id)arg1;
- (bool)scrollUpdatesSuppressed;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)setAngle:(double)arg1;
- (void)setCenterContent:(bool)arg1;
- (void)setComposition:(id)arg1;
- (void)setCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setDebugEnabled:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setLoopsVideoPlayback:(bool)arg1;
- (void)setMaximumZoomScale:(double)arg1;
- (void)setMinimumZoomScale:(double)arg1;
- (void)setMuted:(bool)arg1;
- (void)setPipelineFilters:(id)arg1;
- (void)setScrollUpdatesSuppressed:(bool)arg1;
- (void)setVideoEnabled:(bool)arg1;
- (void)setVideoPlayerVisible:(bool)arg1;
- (void)setZoomScale:(double)arg1;
- (void)setZoomScaleToFit;
- (void)set_masterSizeWithoutGeometry:(struct CGSize { double x1; double x2; })arg1;
- (id)viewForZoomingInScrollView:(id)arg1;
- (void)waitForRender;
- (double)zoomScale;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
