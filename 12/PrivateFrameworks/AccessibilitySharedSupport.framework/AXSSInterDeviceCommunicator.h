<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXSSInterDeviceCommunicator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/AccessibilitySharedSupport.framework/AXSSInterDeviceCommunicator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/AccessibilitySharedSupport.framework/AccessibilitySharedSupport (1)
 */

@interface AXSSInterDeviceCommunicator : NSObject <IDSServiceDelegate, MCNearbyServiceAdvertiserDelegate, MCNearbyServiceBrowserDelegate, MCSessionDelegate> {
    <AXSSInterDeviceActionReceiver> * _actionReceiver;
    MCNearbyServiceAdvertiser * _advertiser;
    NSMutableArray * _availableDevices;
    MCNearbyServiceBrowser * _browser;
    <AXSSInterDeviceConnectionListener> * _connectionListener;
    NSMutableDictionary * _deviceTypesByPeerID;
    NSTimer * _dummyPacketTimer;
    MCPeerID * _localPeerID;
    MCPeerID * _master;
    unsigned long long  _numberOfBurstPacketsRemaining;
    <AXSSInterDeviceSearchObserver> * _searchObserver;
    AXSSInterDeviceSecurityHelper * _securityHelper;
    IDSService * _service;
    MCSession * _session;
    MCPeerID * _slave;
    long long  _state;
    unsigned long long  _switchEventIndex;
}

@property (nonatomic) <AXSSInterDeviceActionReceiver> *actionReceiver;
@property (nonatomic, retain) MCNearbyServiceAdvertiser *advertiser;
@property (nonatomic, retain) NSMutableArray *availableDevices;
@property (nonatomic, retain) MCNearbyServiceBrowser *browser;
@property (nonatomic, readonly) bool canSearch;
@property (nonatomic) <AXSSInterDeviceConnectionListener> *connectionListener;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableDictionary *deviceTypesByPeerID;
@property (nonatomic, retain) NSTimer *dummyPacketTimer;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isForwardingSwitchEvents;
@property (nonatomic, readonly) bool isIdle;
@property (nonatomic, readonly) bool isReceivingSwitchEvents;
@property (nonatomic, readonly) bool isSearching;
@property (nonatomic, readonly) MCPeerID *localPeerID;
@property (nonatomic, retain) MCPeerID *master;
@property (nonatomic) unsigned long long numberOfBurstPacketsRemaining;
@property (nonatomic) <AXSSInterDeviceSearchObserver> *searchObserver;
@property (nonatomic, readonly) NSArray *searchResults;
@property (nonatomic, retain) AXSSInterDeviceSecurityHelper *securityHelper;
@property (nonatomic, readonly) IDSService *service;
@property (nonatomic, retain) MCSession *session;
@property (nonatomic, retain) MCPeerID *slave;
@property (nonatomic) long long state;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long switchEventIndex;

- (void).cxx_destruct;
- (void)_advertise;
- (void)_broadcastICloudMessage:(id)arg1;
- (void)_cancelAdvertising;
- (void)_handleHighlightMessage;
- (void)_handleSelectionMessageWithPayload:(id)arg1;
- (void)_handleSwitchEventMessageWithPayload:(id)arg1 fromPeer:(id)arg2;
- (void)_handleTimeoutAsPotentialSlave;
- (id)_messageForSelection:(bool)arg1 settings:(id)arg2;
- (id)_messageForSwitchEvent:(id)arg1 index:(unsigned long long)arg2;
- (void)_removePeerFromAvailableDevices:(id)arg1;
- (void)_sendDataToSlave:(id)arg1;
- (void)_sendDummyPacket;
- (bool)_setUpSessionIfNecessary;
- (id)_stateDescription;
- (id)_stringForState:(long long)arg1;
- (void)_tearDownAdvertiser;
- (void)_tearDownBrowser;
- (void)_tearDownConnectivity;
- (void)_tearDownSession;
- (id)actionReceiver;
- (id)advertiser;
- (void)advertiser:(id)arg1 didNotStartAdvertisingPeer:(id)arg2;
- (void)advertiser:(id)arg1 didReceiveInvitationFromPeer:(id)arg2 withContext:(id)arg3 invitationHandler:(id /* block */)arg4;
- (id)availableDevices;
- (id)browser;
- (void)browser:(id)arg1 didNotStartBrowsingForPeers:(id)arg2;
- (void)browser:(id)arg1 foundPeer:(id)arg2 withDiscoveryInfo:(id)arg3;
- (void)browser:(id)arg1 lostPeer:(id)arg2;
- (bool)canSearch;
- (id)connectionListener;
- (void)dealloc;
- (id)deviceTypesByPeerID;
- (id)dummyPacketTimer;
- (void)forwardSwitchEvent:(id)arg1;
- (void)highlightSearchResult:(id)arg1;
- (id)init;
- (bool)isForwardingSwitchEvents;
- (bool)isIdle;
- (bool)isReceivingSwitchEvents;
- (bool)isSearching;
- (id)localPeerID;
- (id)master;
- (unsigned long long)numberOfBurstPacketsRemaining;
- (void)search;
- (id)searchObserver;
- (id)searchResults;
- (id)securityHelper;
- (void)selectSearchResult:(id)arg1 settings:(id)arg2;
- (id)service;
- (void)service:(id)arg1 account:(id)arg2 identifier:(id)arg3 didSendWithSuccess:(bool)arg4 error:(id)arg5;
- (void)service:(id)arg1 account:(id)arg2 incomingMessage:(id)arg3 fromID:(id)arg4 context:(id)arg5;
- (void)service:(id)arg1 devicesChanged:(id)arg2;
- (id)session;
- (void)session:(id)arg1 didFinishReceivingResourceWithName:(id)arg2 fromPeer:(id)arg3 atURL:(id)arg4 withError:(id)arg5;
- (void)session:(id)arg1 didReceiveCertificate:(id)arg2 fromPeer:(id)arg3 certificateHandler:(id /* block */)arg4;
- (void)session:(id)arg1 didReceiveData:(id)arg2 fromPeer:(id)arg3;
- (void)session:(id)arg1 didReceiveStream:(id)arg2 withName:(id)arg3 fromPeer:(id)arg4;
- (void)session:(id)arg1 didStartReceivingResourceWithName:(id)arg2 fromPeer:(id)arg3 withProgress:(id)arg4;
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(long long)arg3;
- (void)setActionReceiver:(id)arg1;
- (void)setAdvertiser:(id)arg1;
- (void)setAvailableDevices:(id)arg1;
- (void)setBrowser:(id)arg1;
- (void)setConnectionListener:(id)arg1;
- (void)setDeviceTypesByPeerID:(id)arg1;
- (void)setDummyPacketTimer:(id)arg1;
- (void)setMaster:(id)arg1;
- (void)setNumberOfBurstPacketsRemaining:(unsigned long long)arg1;
- (void)setSearchObserver:(id)arg1;
- (void)setSecurityHelper:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setSlave:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setSwitchEventIndex:(unsigned long long)arg1;
- (id)slave;
- (long long)state;
- (void)stop;
- (unsigned long long)switchEventIndex;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
