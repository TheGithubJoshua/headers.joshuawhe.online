<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCROBrailleFormatter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ScreenReaderOutput.framework/SCROBrailleFormatter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ScreenReaderOutput.framework/ScreenReaderOutput (562.845)
 */

@interface SCROBrailleFormatter : NSObject <NSCopying> {
    bool  _anyUnread;
    id  _appToken;
    NSMutableArray * _chunkArray;
    NSMutableDictionary * _chunkDictionary;
    bool  _currentUnread;
    int  _displayMode;
    SCROBrailleChunk * _editingChunk;
    long long  _firstToken;
    unsigned long long  _generationID;
    int  _inputContractionMode;
    bool  _inputShowEightDot;
    long long  _lastToken;
    int  _lineFocus;
    long long  _lineOffset;
    int  _outputContractionMode;
    bool  _outputShowEightDot;
    bool  _showDotsSevenAndEight;
    NSAttributedString * _statusText;
    NSMapTable * _tokenMap;
}

@property (nonatomic) bool anyUnread;
@property (nonatomic, retain) id appToken;
@property (nonatomic, readonly) NSArray *chunkArray;
@property (nonatomic, readonly) NSDictionary *chunkDictionary;
@property (nonatomic) bool currentUnread;
@property (nonatomic) int displayMode;
@property (nonatomic, readonly) SCROBrailleChunk *editingChunk;
@property (nonatomic, readonly) long long firstToken;
@property (nonatomic, readonly) unsigned long long generationID;
@property (nonatomic, readonly) int inputContractionMode;
@property (nonatomic, readonly) bool inputShowEightDot;
@property (nonatomic, readonly) long long lastToken;
@property (nonatomic) int lineFocus;
@property (nonatomic) long long lineOffset;
@property (nonatomic, readonly) int outputContractionMode;
@property (nonatomic, readonly) bool outputShowEightDot;
@property (nonatomic, readonly) bool showDotsSevenAndEight;
@property (nonatomic, retain) NSAttributedString *statusText;

- (void).cxx_destruct;
- (void)addChunk:(id)arg1 forToken:(long long)arg2;
- (void)addText:(id)arg1 language:(id)arg2 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 token:(long long)arg4 focus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 isEditableText:(bool)arg6;
- (void)addText:(id)arg1 language:(id)arg2 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 token:(long long)arg4 focus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 technical:(bool)arg6 isEditableText:(bool)arg7;
- (void)addText:(id)arg1 overrideText:(id)arg2 language:(id)arg3 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4 token:(long long)arg5 focus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 technical:(bool)arg7 isEditableText:(bool)arg8;
- (void)addText:(id)arg1 overrideText:(id)arg2 language:(id)arg3 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4 token:(long long)arg5 focus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 technical:(bool)arg7 isEditableText:(bool)arg8 paddingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg9 editingString:(id)arg10;
- (void)addText:(id)arg1 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 token:(long long)arg3 focus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4 isEditableText:(bool)arg5;
- (void)addText:(id)arg1 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 token:(long long)arg3 focus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4 technical:(bool)arg5 isEditableText:(bool)arg6;
- (bool)anyUnread;
- (id)appToken;
- (id)chunkArray;
- (id)chunkDictionary;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (bool)currentUnread;
- (id)deepCopyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (int)displayMode;
- (id)editingChunk;
- (void)enumerateChunksOfText:(id)arg1 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 focus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 paddingRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4 usingBlock:(id /* block */)arg5;
- (long long)firstToken;
- (unsigned long long)generationID;
- (id)initWithOutputContractionMode:(int)arg1 inputContractionMode:(int)arg2 outputShowEightDot:(bool)arg3 inputShowEightDot:(bool)arg4 showDotsSevenAndEight:(bool)arg5;
- (int)inputContractionMode;
- (bool)inputShowEightDot;
- (long long)lastToken;
- (int)lineFocus;
- (long long)lineOffset;
- (int)outputContractionMode;
- (bool)outputShowEightDot;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfBrailleCellRepresentingCharacterAtIndex:(unsigned long long)arg1;
- (void)replaceObjectInChunkArrayAtIndex:(unsigned long long)arg1 withObject:(id)arg2;
- (void)setAnyUnread:(bool)arg1;
- (void)setAppToken:(id)arg1;
- (void)setCurrentUnread:(bool)arg1;
- (void)setDisplayMode:(int)arg1;
- (void)setLineFocus:(int)arg1;
- (void)setLineOffset:(long long)arg1;
- (void)setStatusText:(id)arg1;
- (bool)showDotsSevenAndEight;
- (id)statusText;
- (void)translate;
- (void)translate:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
