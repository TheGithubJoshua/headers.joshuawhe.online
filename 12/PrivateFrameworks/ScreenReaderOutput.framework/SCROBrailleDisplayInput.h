<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCROBrailleDisplayInput.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ScreenReaderOutput.framework/SCROBrailleDisplayInput.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ScreenReaderOutput.framework/ScreenReaderOutput (562.845)
 */

@interface SCROBrailleDisplayInput : NSObject {
    double  _brailleCharExponentialMovingAverage;
    double  _brailleTranslationTimeout;
    double  _busySince;
    struct __CFArray { } * _currentBrailleChord;
    bool  _currentBrailleChordBeganWithSpacebar;
    bool  _currentBrailleChordContainsNonSpacebarChordableKey;
    bool  _currentBrailleChordContainsSpacebar;
    unsigned int  _currentBrailleModifiers;
    struct __CFArray { } * _currentChord;
    unsigned int  _currentHIDCommand;
    struct __CFSet { } * _downBrailleDots;
    unsigned int  _downBrailleModifiers;
    struct __CFSet { } * _downKeys;
    bool  _isQuiet;
    double  _lastBrailleChordPosted;
    double  _lastBrailleChordTypingTime;
    bool  _memorizeNextKeyImmediately;
    double  _memorizeNextKeyImmediatelyTimeout;
    bool  _newDown;
    double  _nextWillMemorizeNotificationTime;
    bool  _prepareToMemorizeNextKey;
    double  _quietSince;
    bool  _requestPrepareToMemorizeNextKey;
    unsigned int  _routerEvent;
    bool  _skipBrailleKeyboardKeyTranslation;
    bool  _spacebarIsDown;
    bool  _willMemorizeNow;
}

@property (nonatomic) double brailleCharExponentialMovingAverage;
@property (nonatomic) double brailleTranslationTimeout;
@property (nonatomic) double busySince;
@property (nonatomic) struct __CFArray { }*currentBrailleChord;
@property (nonatomic) bool currentBrailleChordBeganWithSpacebar;
@property (nonatomic) bool currentBrailleChordContainsNonSpacebarChordableKey;
@property (nonatomic) bool currentBrailleChordContainsSpacebar;
@property (nonatomic) unsigned int currentBrailleModifiers;
@property (nonatomic) struct __CFArray { }*currentChord;
@property (nonatomic) unsigned int currentHIDCommand;
@property (nonatomic) struct __CFSet { }*downBrailleDots;
@property (nonatomic) unsigned int downBrailleModifiers;
@property (nonatomic) struct __CFSet { }*downKeys;
@property (nonatomic) bool isQuiet;
@property (nonatomic) double lastBrailleChordPosted;
@property (nonatomic) double lastBrailleChordTypingTime;
@property (nonatomic) bool memorizeNextKeyImmediately;
@property (nonatomic) double memorizeNextKeyImmediatelyTimeout;
@property (nonatomic) bool newDown;
@property (nonatomic) double nextWillMemorizeNotificationTime;
@property (nonatomic) bool prepareToMemorizeNextKey;
@property (nonatomic) double quietSince;
@property (nonatomic) bool requestPrepareToMemorizeNextKey;
@property (nonatomic) unsigned int routerEvent;
@property (nonatomic) bool skipBrailleKeyboardKeyTranslation;
@property (nonatomic) bool spacebarIsDown;
@property (nonatomic) bool willMemorizeNow;

- (double)brailleCharExponentialMovingAverage;
- (double)brailleTranslationTimeout;
- (double)busySince;
- (struct __CFArray { }*)currentBrailleChord;
- (bool)currentBrailleChordBeganWithSpacebar;
- (bool)currentBrailleChordContainsNonSpacebarChordableKey;
- (bool)currentBrailleChordContainsSpacebar;
- (unsigned int)currentBrailleModifiers;
- (struct __CFArray { }*)currentChord;
- (unsigned int)currentHIDCommand;
- (void)dealloc;
- (struct __CFSet { }*)downBrailleDots;
- (unsigned int)downBrailleModifiers;
- (struct __CFSet { }*)downKeys;
- (bool)isQuiet;
- (double)lastBrailleChordPosted;
- (double)lastBrailleChordTypingTime;
- (bool)memorizeNextKeyImmediately;
- (double)memorizeNextKeyImmediatelyTimeout;
- (bool)newDown;
- (double)nextWillMemorizeNotificationTime;
- (bool)prepareToMemorizeNextKey;
- (double)quietSince;
- (bool)requestPrepareToMemorizeNextKey;
- (unsigned int)routerEvent;
- (void)setBrailleCharExponentialMovingAverage:(double)arg1;
- (void)setBrailleTranslationTimeout:(double)arg1;
- (void)setBusySince:(double)arg1;
- (void)setCurrentBrailleChord:(struct __CFArray { }*)arg1;
- (void)setCurrentBrailleChordBeganWithSpacebar:(bool)arg1;
- (void)setCurrentBrailleChordContainsNonSpacebarChordableKey:(bool)arg1;
- (void)setCurrentBrailleChordContainsSpacebar:(bool)arg1;
- (void)setCurrentBrailleModifiers:(unsigned int)arg1;
- (void)setCurrentChord:(struct __CFArray { }*)arg1;
- (void)setCurrentHIDCommand:(unsigned int)arg1;
- (void)setDownBrailleDots:(struct __CFSet { }*)arg1;
- (void)setDownBrailleModifiers:(unsigned int)arg1;
- (void)setDownKeys:(struct __CFSet { }*)arg1;
- (void)setIsQuiet:(bool)arg1;
- (void)setLastBrailleChordPosted:(double)arg1;
- (void)setLastBrailleChordTypingTime:(double)arg1;
- (void)setMemorizeNextKeyImmediately:(bool)arg1;
- (void)setMemorizeNextKeyImmediatelyTimeout:(double)arg1;
- (void)setNewDown:(bool)arg1;
- (void)setNextWillMemorizeNotificationTime:(double)arg1;
- (void)setPrepareToMemorizeNextKey:(bool)arg1;
- (void)setQuietSince:(double)arg1;
- (void)setRequestPrepareToMemorizeNextKey:(bool)arg1;
- (void)setRouterEvent:(unsigned int)arg1;
- (void)setSkipBrailleKeyboardKeyTranslation:(bool)arg1;
- (void)setSpacebarIsDown:(bool)arg1;
- (void)setWillMemorizeNow:(bool)arg1;
- (bool)skipBrailleKeyboardKeyTranslation;
- (bool)spacebarIsDown;
- (bool)willMemorizeNow;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
