<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCROBrailleLine.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ScreenReaderOutput.framework/SCROBrailleLine.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ScreenReaderOutput.framework/ScreenReaderOutput (562.845)
 */

@interface SCROBrailleLine : NSObject {
    bool  _anyUnread;
    id  _appToken;
    bool  _blink;
    char * _blinkerBuffer;
    bool  _brailleChunksAreDirty;
    <SCROBrailleDriverProtocol> * _brailleDriver;
    NSArray * _chunkArray;
    NSDictionary * _chunkDictionary;
    SCROBrailleChunk * _chunkPendingTranslation;
    bool  _currentUnread;
    char * _displayBuffer;
    bool  _displayEnabled;
    char * _displayFilter;
    int  _displayMode;
    SCROBrailleChunk * _editingChunk;
    long long  _firstToken;
    long long  _focusLocation;
    unsigned long long  _generationID;
    long long  _iBeamLocation;
    long long  _insetSize;
    bool  _isKeyboardHelpOn;
    bool  _isPanning;
    long long  _lastToken;
    long long  _leftInset;
    NSMutableAttributedString * _lineBuffer;
    int  _lineFocus;
    long long  _lineOffset;
    char * _mainCellsBuffer;
    long long  _masterStatusCellIndex;
    bool  _needsDisplayFlush;
    bool  _needsFocusFlush;
    bool  _needsStatusFlush;
    NSMutableArray * _pendingBrailleStringDictionaries;
    long long  _rightInset;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _selectionRange;
    bool  _showDotsSevenAndEight;
    long long  _size;
    NSData * _statusData;
    char * _statusFilter;
    long long  _statusSize;
    SCROBrailleLineVirtualStatus * _virtualStatus;
    bool  _wordWrapEnabled;
}

@property (nonatomic, retain) NSArray *chunkArray;
@property (nonatomic, retain) NSDictionary *chunkDictionary;
@property (nonatomic) SCROBrailleChunk *chunkPendingTranslation;
@property (nonatomic) bool displayEnabled;
@property (nonatomic) SCROBrailleChunk *editingChunk;
@property (nonatomic, readonly) NSAttributedString *editingString;
@property (nonatomic) unsigned long long generationID;
@property (nonatomic, readonly) bool hasEdits;
@property (nonatomic) bool isKeyboardHelpOn;
@property (nonatomic) long long lineOffset;
@property (nonatomic, readonly) bool needsDisplayFlush;
@property (nonatomic, retain) NSMutableArray *pendingBrailleStringDictionaries;
@property (nonatomic, readonly) bool shouldTranslateNow;
@property (nonatomic, readonly) bool wantsEdits;
@property (nonatomic) bool wordWrapEnabled;

+ (void)initialize;

- (void).cxx_destruct;
- (bool)_allowInset;
- (bool)_blink:(bool)arg1;
- (id)_chunkAfterEditingChunk;
- (id)_chunkAtLineBufferIndex:(unsigned long long)arg1;
- (id)_chunkBeforeEditingChunk;
- (id)_chunkBeforeEditingChunkInEnumerator:(id)arg1;
- (unsigned long long)_chunkIndexForLineBufferIndex:(unsigned long long)arg1;
- (unsigned long long)_cursorOffset;
- (void)_didMoveToChunk:(id)arg1;
- (id)_dotDescriptionForBrailleString:(id)arg1;
- (void)_flush;
- (void)_flushRealStatus;
- (long long)_indexOfWhitespaceAfterIBeam:(long long)arg1 inLine:(id)arg2;
- (long long)_indexOfWhitespaceBeforeIBeam:(long long)arg1 inLine:(id)arg2;
- (unsigned long long)_lengthPrecedingChunkPendingTranslation;
- (bool)_moveToBrailleIndex:(unsigned long long)arg1;
- (bool)_setMainCells:(const char *)arg1 length:(long long)arg2;
- (id)_spokenStringForBrailleString:(id)arg1 isDelete:(bool)arg2 speakLiterally:(out bool*)arg3;
- (id)_translatedTextForPrefixBraille:(id)arg1 printBraille:(id)arg2 contracted:(bool)arg3;
- (id)_translatedTextInIsolationForBraille:(id)arg1 contracted:(bool)arg2;
- (id)_trimCommonPrefixWithString:(id)arg1 fromString:(id)arg2;
- (void)_updateOffsets;
- (void)addAttributedPaddingToLineBuffer:(id)arg1 chunkWithIndex:(unsigned long long)arg2;
- (void)addAttributedStringToLineBuffer:(id)arg1 fromChunkWithIndex:(unsigned long long)arg2 brailleOffset:(unsigned long long)arg3;
- (bool)anyUnread;
- (id)appToken;
- (void)blinker;
- (unsigned long long)bufferIndexForRouterIndex:(unsigned long long)arg1;
- (bool)canPanLeft;
- (bool)canPanRight;
- (id)chunkArray;
- (id)chunkDictionary;
- (id)chunkPendingTranslation;
- (bool)currentUnread;
- (void)dealloc;
- (bool)deleteAtCursorShouldTranslate:(out bool*)arg1 deletedText:(id*)arg2;
- (id)description;
- (void)discardEdits;
- (bool)display;
- (bool)displayEnabled;
- (int)displayMode;
- (id)editingChunk;
- (id)editingString;
- (long long)firstToken;
- (bool)forwardDeleteAtCursorShouldTranslate:(out bool*)arg1;
- (unsigned long long)generationID;
- (bool)getStatusRouterIndex:(long long*)arg1 forRawIndex:(long long)arg2;
- (bool)hasEdits;
- (id)initWithDriver:(id)arg1 mainSize:(long long)arg2 statusSize:(long long)arg3;
- (bool)insertBrailleStringAtCursor:(id)arg1 modifiers:(id)arg2;
- (bool)isKeyboardHelpOn;
- (long long)lastToken;
- (int)lineFocus;
- (long long)lineOffset;
- (long long)locationForIndex:(long long)arg1;
- (long long)masterStatusCellIndex;
- (bool)moveCursorLeft;
- (bool)moveCursorRight;
- (bool)moveCursorToRouterIndex:(unsigned long long)arg1 didLeaveEditingContext:(out bool*)arg2 forwardToScreenReader:(out bool*)arg3;
- (bool)needsDisplayFlush;
- (id)newLineDescriptor;
- (bool)panLeft;
- (bool)panRight;
- (id)pendingBrailleStringDictionaries;
- (void)setAnyUnread:(bool)arg1;
- (void)setAppToken:(id)arg1;
- (void)setChunkArray:(id)arg1;
- (void)setChunkDictionary:(id)arg1;
- (void)setChunkPendingTranslation:(id)arg1;
- (void)setCurrentUnread:(bool)arg1;
- (void)setDisplayEnabled:(bool)arg1;
- (void)setDisplayMode:(int)arg1;
- (void)setEditingChunk:(id)arg1;
- (void)setFormatter:(id)arg1;
- (void)setGenerationID:(unsigned long long)arg1;
- (void)setIsKeyboardHelpOn:(bool)arg1;
- (void)setLineFocus:(int)arg1;
- (void)setLineOffset:(long long)arg1;
- (void)setMainSize:(long long)arg1;
- (void)setMasterStatusCellIndex:(long long)arg1;
- (void)setPendingBrailleStringDictionaries:(id)arg1;
- (void)setRealStatus:(id)arg1;
- (void)setShowDotsSevenAndEight:(bool)arg1;
- (void)setStatusSize:(long long)arg1;
- (void)setVirtualStatus:(id)arg1 alignment:(int)arg2;
- (void)setWordWrapEnabled:(bool)arg1;
- (bool)shouldTranslateNow;
- (bool)showDotsSevenAndEight;
- (id)spokenStringForDeletedBrailleString:(id)arg1 speakLiterally:(out bool*)arg2;
- (id)spokenStringForInsertedBrailleString:(id)arg1 speakLiterally:(out bool*)arg2;
- (unsigned long long)textCursorIndex;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })textRangeForBrailleRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (long long)tokenForRouterIndex:(long long*)arg1 location:(long long*)arg2 appToken:(id*)arg3;
- (id)translatedTextForBraille:(out id*)arg1 replacingTextInRange:(out struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 cursor:(out unsigned long long*)arg3;
- (bool)wantsEdits;
- (bool)wordWrapEnabled;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
