<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCROBrailleChunk.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/ScreenReaderOutput.framework/SCROBrailleChunk.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/ScreenReaderOutput.framework/ScreenReaderOutput (562.845)
 */

@interface SCROBrailleChunk : NSObject <NSCopying> {
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  __textFocus;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _brailleFocus;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _brailleSelection;
    NSMutableAttributedString * _brailleString;
    int  _contractionMode;
    bool  _hasTextSelection;
    bool  _isEditableText;
    bool  _isFocused;
    bool  _isPadding;
    bool  _isTechnical;
    NSString * _language;
    NSAttributedString * _originalBraille;
    NSString * _originalText;
    NSString * _overrideText;
    NSMutableAttributedString * _pendingBraille;
    bool  _showDotsSevenAndEight;
    bool  _showEightDot;
    NSString * _text;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _textSelection;
    long long  _token;
}

@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } _textFocus;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } brailleFocus;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } brailleSelection;
@property (nonatomic, retain) NSMutableAttributedString *brailleString;
@property (nonatomic, readonly) int contractionMode;
@property (nonatomic, readonly) NSMutableAttributedString *currentBrailleString;
@property (nonatomic, readonly) bool hasEdits;
@property (nonatomic) bool isEditableText;
@property (nonatomic) bool isPadding;
@property (nonatomic, readonly) NSString *language;
@property (nonatomic, readonly) unsigned long long length;
@property (nonatomic, copy) NSAttributedString *originalBraille;
@property (nonatomic, copy) NSString *originalText;
@property (nonatomic, retain) NSMutableAttributedString *pendingBraille;
@property (nonatomic, readonly) bool shouldProvideReplacementRange;
@property (nonatomic, readonly) bool shouldTranslateNow;
@property (nonatomic, readonly) bool showEightDot;
@property (nonatomic, retain) NSString *text;
@property (nonatomic, readonly) unsigned long long textLength;
@property (nonatomic, readonly) long long token;

+ (void)initialize;

- (void).cxx_destruct;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_adjustedTextRangeForBrailleTranslation:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)_beginEditing;
- (bool)_deleteSelectionOrRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1 deletedText:(id*)arg2;
- (void)_endEditing;
- (void)_retranslateWithTextPositionsRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)_tableIdentifierForLanguage:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_textFocus;
- (void)_translateAsLiteraryTextWithPrimaryTable:(bool)arg1 textPositionsRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_translateAsTechnicalTextWithPrimaryTable:(bool)arg1;
- (id)_translatePendingBraille;
- (void)_translateWithTextPositionsRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })brailleFocus;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })brailleRangeForLocation:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })brailleSelection;
- (id)brailleString;
- (id)brailleWithIBeamLocation:(long long*)arg1 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 brailleOffset:(long long)arg3;
- (int)contractionMode;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentBrailleString;
- (bool)deleteAtCursorShouldTranslate:(out bool*)arg1 deletedText:(id*)arg2;
- (bool)deleteAtEndShouldTranslate:(out bool*)arg1 deletedText:(id*)arg2;
- (id)description;
- (void)discardEdits;
- (void)enumerateWordsBetweenCharacters:(id)arg1 text:(id)arg2 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3 usingBlock:(id /* block */)arg4;
- (bool)focused;
- (bool)forwardDeleteAtBeginningShouldTranslate:(out bool*)arg1;
- (bool)forwardDeleteAtCursorShouldTranslate:(out bool*)arg1;
- (bool)hasEdits;
- (bool)hasSelection;
- (bool)indexIsWithinWord:(unsigned long long)arg1;
- (id)initWithText:(id)arg1 language:(id)arg2 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 token:(long long)arg4 textFocus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 contractionMode:(int)arg6 showEightDot:(bool)arg7 showDotsSevenAndEight:(bool)arg8 isEditableText:(bool)arg9;
- (id)initWithText:(id)arg1 language:(id)arg2 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3 token:(long long)arg4 textFocus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg5 contractionMode:(int)arg6 showEightDot:(bool)arg7 showDotsSevenAndEight:(bool)arg8 technical:(bool)arg9 isEditableText:(bool)arg10;
- (id)initWithText:(id)arg1 overrideText:(id)arg2 language:(id)arg3 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4 token:(long long)arg5 textFocus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 contractionMode:(int)arg7 showEightDot:(bool)arg8 showDotsSevenAndEight:(bool)arg9 technical:(bool)arg10 isEditableText:(bool)arg11;
- (id)initWithText:(id)arg1 overrideText:(id)arg2 language:(id)arg3 selection:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg4 token:(long long)arg5 textFocus:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg6 contractionMode:(int)arg7 showEightDot:(bool)arg8 showDotsSevenAndEight:(bool)arg9 technical:(bool)arg10 isEditableText:(bool)arg11 isPadding:(bool)arg12 editingString:(id)arg13;
- (void)insertBrailleStringAtCursor:(id)arg1 modifiers:(id)arg2;
- (bool)isEditableText;
- (bool)isFocusedOrSelected;
- (bool)isPadding;
- (id)language;
- (unsigned long long)length;
- (long long)locationForIndex:(long long)arg1;
- (bool)moveCursorLeft;
- (bool)moveCursorRight;
- (bool)moveCursorTo:(unsigned long long)arg1;
- (id)originalBraille;
- (id)originalText;
- (id)pendingBraille;
- (void)removeCursor;
- (void)setBrailleFocus:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setBrailleString:(id)arg1;
- (void)setIsEditableText:(bool)arg1;
- (void)setIsPadding:(bool)arg1;
- (void)setOriginalBraille:(id)arg1;
- (void)setOriginalText:(id)arg1;
- (void)setPendingBraille:(id)arg1;
- (void)setText:(id)arg1;
- (void)set_textFocus:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)shouldProvideReplacementRange;
- (bool)shouldTranslateNow;
- (bool)showEightDot;
- (id)text;
- (unsigned long long)textLength;
- (long long)token;
- (void)translate;
- (void)translate:(bool)arg1;
- (id)translatedTextForBraille:(out id*)arg1 replacingTextInRange:(out struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 cursor:(out unsigned long long*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
