<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MRPlatterViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/PrivateFrameworks/MediaControls.framework/MRPlatterViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/MediaControls.framework/MediaControls (1)
 */

@interface MRPlatterViewController : UIViewController <FBSDisplayLayoutObserver, MPAVRoutingViewControllerDelegate, MPAVRoutingViewControllerThemeDelegate, MediaControlsActionsDelegate, MediaControlsCollectionItemViewController, MediaControlsEndpointControllerDelegate, MediaControlsMasterVolumeSliderDelegate, MediaControlsPanelViewControllerDelegate> {
    double  __continuousCornerRadius;
    bool  _allowsNowPlayingAppLaunch;
    MPArtworkCatalog * _artworkCatalog;
    UIView * _backgroundView;
    UIView * _bottomDividerView;
    UIView * _contentView;
    <MRPlatterViewControllerDelegate> * _delegate;
    NSArray * _displayElements;
    FBSDisplayLayoutMonitor * _displayMonitor;
    MediaControlsEndpointController * _endpointController;
    NSString * _explicitString;
    long long  _failedArtworkRetryCount;
    bool  _failedToLoadArtwork;
    MPVolumeGroupSliderCoordinator * _groupSliderCoordinator;
    bool  _isListeningForResponse;
    NSString * _label;
    MediaControlsLanguageOptionsViewController * _languageOptionsViewController;
    struct CGSize { 
        double width; 
        double height; 
    }  _lastKnownSize;
    MPMediaControls * _mediaControls;
    MediaControlsHeaderView * _nowPlayingHeaderView;
    bool  _onScreen;
    MediaControlsParentContainerView * _parentContainerView;
    MPAVEndpointRoute * _route;
    NSString * _routeUID;
    MediaControlsRoutingCornerView * _routingCornerView;
    id /* block */  _routingCornerViewTappedBlock;
    MPAVRoutingViewController * _routingViewController;
    NSMutableArray * _secondaryStringComponents;
    bool  _selected;
    long long  _selectedMode;
    long long  _style;
    unsigned long long  _supportedModes;
    UIView * _topDividerView;
    bool  _transitioning;
    MediaControlsTransitioningDelegate * _transitioningDelegate;
    MTVibrantStylingProvider * _vibrantStylingProvider;
    MRMediaControlsVideoPickerFooterView * _videoPickerFooterView;
    MRMediaControlsVideoPickerHeaderView * _videoPickerHeaderView;
    MediaControlsVolumeContainerView * _volumeContainerView;
}

@property (setter=_setContinuousCornerRadius:, nonatomic) double _continuousCornerRadius;
@property (nonatomic) bool allowsNowPlayingAppLaunch;
@property (nonatomic, retain) MPArtworkCatalog *artworkCatalog;
@property (nonatomic, retain) UIView *backgroundView;
@property (nonatomic, retain) UIView *bottomDividerView;
@property (nonatomic, readonly) UIView *contentView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MRPlatterViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (getter=isDeviceUnlocked, nonatomic, readonly) bool deviceUnlocked;
@property (nonatomic, retain) NSArray *displayElements;
@property (nonatomic, retain) FBSDisplayLayoutMonitor *displayMonitor;
@property (nonatomic, readonly) UIView *effectiveFooterView;
@property (nonatomic, readonly) UIView *effectiveHeaderView;
@property (nonatomic, retain) MediaControlsEndpointController *endpointController;
@property (nonatomic, copy) NSString *explicitString;
@property (nonatomic, readonly) long long failedArtworkRetryCount;
@property (nonatomic) bool failedToLoadArtwork;
@property (nonatomic, retain) MPVolumeGroupSliderCoordinator *groupSliderCoordinator;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isListeningForResponse;
@property (nonatomic, copy) NSString *label;
@property (nonatomic) MediaControlsLanguageOptionsViewController *languageOptionsViewController;
@property (nonatomic) struct CGSize { double x1; double x2; } lastKnownSize;
@property (nonatomic, retain) MPMediaControls *mediaControls;
@property (nonatomic, retain) MediaControlsHeaderView *nowPlayingHeaderView;
@property (getter=isOnScreen, nonatomic) bool onScreen;
@property (nonatomic, retain) MediaControlsParentContainerView *parentContainerView;
@property (nonatomic, retain) MPAVEndpointRoute *route;
@property (nonatomic, readonly) NSString *routeName;
@property (nonatomic, readonly) NSString *routeUID;
@property (nonatomic, retain) MediaControlsRoutingCornerView *routingCornerView;
@property (nonatomic, copy) id /* block */ routingCornerViewTappedBlock;
@property (nonatomic, retain) MPAVRoutingViewController *routingViewController;
@property (nonatomic, retain) NSMutableArray *secondaryStringComponents;
@property (getter=isSelected, nonatomic) bool selected;
@property (nonatomic) long long selectedMode;
@property (nonatomic, readonly) bool shouldDisplayPlatter;
@property (nonatomic) long long style;
@property (readonly) Class superclass;
@property (nonatomic) unsigned long long supportedModes;
@property (nonatomic, retain) UIView *topDividerView;
@property (getter=isTransitioning, nonatomic) bool transitioning;
@property (nonatomic, retain) MediaControlsTransitioningDelegate *transitioningDelegate;
@property (nonatomic, retain) MTVibrantStylingProvider *vibrantStylingProvider;
@property (nonatomic, retain) MRMediaControlsVideoPickerFooterView *videoPickerFooterView;
@property (nonatomic, retain) MRMediaControlsVideoPickerHeaderView *videoPickerHeaderView;
@property (nonatomic, retain) MediaControlsVolumeContainerView *volumeContainerView;

+ (id)coverSheetPlatterViewController;

- (void).cxx_destruct;
- (double)_continuousCornerRadius;
- (void)_platterViewControllerReceivedInteraction:(id)arg1;
- (void)_presentRoutingViewControllerFromCoverSheet;
- (void)_prewarmTVRemoteIfNeeded;
- (id)_route;
- (void)_routingCornerViewReceivedTap:(id)arg1;
- (void)_setContinuousCornerRadius:(double)arg1;
- (void)_setRoutingPickerVisible:(bool)arg1 animated:(bool)arg2;
- (bool)_shouldUseViewServiceToPresentTVRemote;
- (id)_tvAirplayIdentifier;
- (id)_tvMediaRemoteIdentifier;
- (void)_updateConfiguration;
- (void)_updateControlCenterMetadata:(id)arg1;
- (void)_updateExplicitTreatmentString;
- (void)_updateHeaderUI;
- (void)_updateOnScreenForStyle:(long long)arg1;
- (void)_updatePlaceholderArtwork;
- (void)_updateRouteNameLabel;
- (void)_updateRoutingCornerView;
- (void)_updateRoutingIndicators;
- (void)_updateSecondaryStringFormat;
- (void)_updateStyle;
- (bool)allowsNowPlayingAppLaunch;
- (id)artworkCatalog;
- (id)backgroundView;
- (id)bottomDividerView;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentInsetsForRoutingViewController:(id)arg1;
- (id)contentView;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)didMoveToParentViewController:(id)arg1;
- (id)displayElements;
- (id)displayMonitor;
- (id)effectiveFooterView;
- (id)effectiveHeaderView;
- (id)endpointController;
- (void)endpointController:(id)arg1 didLoadNewResponse:(id)arg2;
- (void)endpointControllerDidChangeState:(id)arg1;
- (void)endpointControllerDidUpdateRoutingAvailability:(id)arg1;
- (void)endpointControllerRouteDidUpdate:(id)arg1;
- (id)explicitString;
- (long long)failedArtworkRetryCount;
- (bool)failedToLoadArtwork;
- (void)footerViewButtonPressed:(id)arg1;
- (id)groupSliderCoordinator;
- (void)headerViewButtonPressed:(id)arg1;
- (void)headerViewLaunchNowPlayingAppButtonPressed:(id)arg1;
- (id)initWithActiveRouteType:(long long)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithRouteUID:(id)arg1;
- (id)initWithStyle:(long long)arg1;
- (bool)isDeviceUnlocked;
- (bool)isListeningForResponse;
- (bool)isOnScreen;
- (bool)isSelected;
- (bool)isTransitioning;
- (id)label;
- (id)languageOptionsViewController;
- (struct CGSize { double x1; double x2; })lastKnownSize;
- (void)layoutMonitor:(id)arg1 didUpdateDisplayLayout:(id)arg2 withContext:(id)arg3;
- (long long)lockScreenInternalRoutePickerOverrideWithDefaultStyle:(long long)arg1;
- (bool)lockScreenPresentsOverrideRoutePicker;
- (id)mediaControls;
- (id)nowPlayingHeaderView;
- (id)parentContainerView;
- (void)presentLanguageOptions;
- (void)presentRatingActionSheet:(id)arg1 sourceView:(id)arg2;
- (void)presentTVRemote;
- (id)route;
- (id)routeName;
- (id)routeUID;
- (id)routingCornerView;
- (id /* block */)routingCornerViewTappedBlock;
- (id)routingViewController;
- (void)routingViewController:(id)arg1 didPickRoute:(id)arg2;
- (void)routingViewController:(id)arg1 willDisplayCell:(id)arg2;
- (id)secondaryStringComponents;
- (long long)selectedMode;
- (void)setAllowsNowPlayingAppLaunch:(bool)arg1;
- (void)setArtworkCatalog:(id)arg1;
- (void)setBackgroundView:(id)arg1;
- (void)setBottomDividerView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayElements:(id)arg1;
- (void)setDisplayMonitor:(id)arg1;
- (void)setEndpointController:(id)arg1;
- (void)setExplicitString:(id)arg1;
- (void)setFailedToLoadArtwork:(bool)arg1;
- (void)setGroupSliderCoordinator:(id)arg1;
- (void)setIsListeningForResponse:(bool)arg1;
- (void)setLabel:(id)arg1;
- (void)setLanguageOptionsViewController:(id)arg1;
- (void)setLastKnownSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMediaControls:(id)arg1;
- (void)setNowPlayingHeaderView:(id)arg1;
- (void)setOnScreen:(bool)arg1;
- (void)setParentContainerView:(id)arg1;
- (void)setRoute:(id)arg1;
- (void)setRoutingCornerView:(id)arg1;
- (void)setRoutingCornerViewTappedBlock:(id /* block */)arg1;
- (void)setRoutingViewController:(id)arg1;
- (void)setSecondaryStringComponents:(id)arg1;
- (void)setSelected:(bool)arg1;
- (void)setSelectedMode:(long long)arg1;
- (void)setSelectedMode:(long long)arg1 animated:(bool)arg2;
- (void)setStyle:(long long)arg1;
- (void)setSupportedModes:(unsigned long long)arg1;
- (void)setTopDividerView:(id)arg1;
- (void)setTransitioning:(bool)arg1;
- (void)setTransitioningDelegate:(id)arg1;
- (void)setVibrantStylingProvider:(id)arg1;
- (void)setVideoPickerFooterView:(id)arg1;
- (void)setVideoPickerHeaderView:(id)arg1;
- (void)setVolumeContainerView:(id)arg1;
- (bool)shouldAutomaticallyForwardAppearanceMethods;
- (bool)shouldDisplayPlatter;
- (bool)shouldEnableSyncingForSlider:(id)arg1;
- (bool)shouldShowTVRemoteButton;
- (bool)slider:(id)arg1 shouldCancelSnapWithTouch:(id)arg2;
- (bool)slider:(id)arg1 syncStateWillChangeFromState:(long long)arg2 toState:(long long)arg3;
- (long long)style;
- (unsigned long long)supportedModes;
- (id)topDividerView;
- (id)transitioningDelegate;
- (id)vibrantStylingProvider;
- (id)videoPickerFooterView;
- (id)videoPickerHeaderView;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (id)volumeContainerView;
- (void)willTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withCoordinator:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
