<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WK_RTCVideoEncoderSettings.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libwebrtc.dylib/WK_RTCVideoEncoderSettings.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/PrivateFrameworks/WebCore.framework/Frameworks/libwebrtc.dylib (8607.3.18)
 */

@interface WK_RTCVideoEncoderSettings : NSObject {
    unsigned short  _height;
    unsigned int  _maxBitrate;
    unsigned int  _maxFramerate;
    unsigned int  _minBitrate;
    unsigned long long  _mode;
    NSString * _name;
    struct VideoCodec { 
        int codecType; 
        unsigned char plType; 
        unsigned short width; 
        unsigned short height; 
        unsigned int startBitrate; 
        unsigned int maxBitrate; 
        unsigned int minBitrate; 
        unsigned int targetBitrate; 
        unsigned int maxFramerate; 
        bool active; 
        unsigned int qpMax; 
        unsigned char numberOfSimulcastStreams; 
        struct SpatialLayer { 
            unsigned short width; 
            unsigned short height; 
            float maxFramerate; 
            unsigned char numberOfTemporalLayers; 
            unsigned int maxBitrate; 
            unsigned int targetBitrate; 
            unsigned int minBitrate; 
            unsigned int qpMax; 
            bool active; 
        } simulcastStream[4]; 
        struct SpatialLayer { 
            unsigned short width; 
            unsigned short height; 
            float maxFramerate; 
            unsigned char numberOfTemporalLayers; 
            unsigned int maxBitrate; 
            unsigned int targetBitrate; 
            unsigned int minBitrate; 
            unsigned int qpMax; 
            bool active; 
        } spatialLayers[5]; 
        int mode; 
        bool expect_encode_from_texture; 
        struct TimingFrameTriggerThresholds { 
            long long delay_ms; 
            unsigned short outlier_ratio_percent; 
        } timing_frame_thresholds; 
        union VideoCodecUnion { 
            struct VideoCodecVP8 { 
                int complexity; 
                unsigned char numberOfTemporalLayers; 
                bool denoisingOn; 
                bool automaticResizeOn; 
                bool frameDroppingOn; 
                int keyFrameInterval; 
            } VP8; 
            struct VideoCodecVP9 { 
                int complexity; 
                unsigned char numberOfTemporalLayers; 
                bool denoisingOn; 
                bool frameDroppingOn; 
                int keyFrameInterval; 
                bool adaptiveQpMode; 
                bool automaticResizeOn; 
                unsigned char numberOfSpatialLayers; 
                bool flexibleMode; 
                int interLayerPred; 
            } VP9; 
            struct VideoCodecH264 { 
                bool frameDroppingOn; 
                int keyFrameInterval; 
                char *spsData; 
                unsigned long long spsLen; 
                char *ppsData; 
                unsigned long long ppsLen; 
                int profile; 
            } H264; 
        } codec_specific_; 
    }  _nativeVideoCodec;
    unsigned int  _qpMax;
    unsigned int  _startBitrate;
    unsigned int  _targetBitrate;
    unsigned short  _width;
}

@property (nonatomic) unsigned short height;
@property (nonatomic) unsigned int maxBitrate;
@property (nonatomic) unsigned int maxFramerate;
@property (nonatomic) unsigned int minBitrate;
@property (nonatomic) unsigned long long mode;
@property (nonatomic, retain) NSString *name;
@property (nonatomic) unsigned int qpMax;
@property (nonatomic) unsigned int startBitrate;
@property (nonatomic) unsigned int targetBitrate;
@property (nonatomic) unsigned short width;

- (id).cxx_construct;
- (void).cxx_destruct;
- (unsigned short)height;
- (id)initWithNativeVideoCodec:(const struct VideoCodec { int x1; unsigned char x2; unsigned short x3; unsigned short x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; unsigned int x11; unsigned char x12; struct SpatialLayer { unsigned short x_13_1_1; unsigned short x_13_1_2; float x_13_1_3; unsigned char x_13_1_4; unsigned int x_13_1_5; unsigned int x_13_1_6; unsigned int x_13_1_7; unsigned int x_13_1_8; bool x_13_1_9; } x13[4]; struct SpatialLayer { unsigned short x_14_1_1; unsigned short x_14_1_2; float x_14_1_3; unsigned char x_14_1_4; unsigned int x_14_1_5; unsigned int x_14_1_6; unsigned int x_14_1_7; unsigned int x_14_1_8; bool x_14_1_9; } x14[5]; int x15; bool x16; struct TimingFrameTriggerThresholds { long long x_17_1_1; unsigned short x_17_1_2; } x17; union VideoCodecUnion { struct VideoCodecVP8 { int x_1_2_1; unsigned char x_1_2_2; bool x_1_2_3; bool x_1_2_4; bool x_1_2_5; int x_1_2_6; } x_18_1_1; struct VideoCodecVP9 { int x_2_2_1; unsigned char x_2_2_2; bool x_2_2_3; bool x_2_2_4; int x_2_2_5; bool x_2_2_6; bool x_2_2_7; unsigned char x_2_2_8; bool x_2_2_9; int x_2_2_10; } x_18_1_2; struct VideoCodecH264 { bool x_3_2_1; int x_3_2_2; char *x_3_2_3; unsigned long long x_3_2_4; char *x_3_2_5; unsigned long long x_3_2_6; int x_3_2_7; } x_18_1_3; } x18; }*)arg1;
- (unsigned int)maxBitrate;
- (unsigned int)maxFramerate;
- (unsigned int)minBitrate;
- (unsigned long long)mode;
- (id)name;
- (struct VideoCodec { int x1; unsigned char x2; unsigned short x3; unsigned short x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; bool x10; unsigned int x11; unsigned char x12; struct SpatialLayer { unsigned short x_13_1_1; unsigned short x_13_1_2; float x_13_1_3; unsigned char x_13_1_4; unsigned int x_13_1_5; unsigned int x_13_1_6; unsigned int x_13_1_7; unsigned int x_13_1_8; bool x_13_1_9; } x13[4]; struct SpatialLayer { unsigned short x_14_1_1; unsigned short x_14_1_2; float x_14_1_3; unsigned char x_14_1_4; unsigned int x_14_1_5; unsigned int x_14_1_6; unsigned int x_14_1_7; unsigned int x_14_1_8; bool x_14_1_9; } x14[5]; int x15; bool x16; struct TimingFrameTriggerThresholds { long long x_17_1_1; unsigned short x_17_1_2; } x17; union VideoCodecUnion { struct VideoCodecVP8 { int x_1_2_1; unsigned char x_1_2_2; bool x_1_2_3; bool x_1_2_4; bool x_1_2_5; int x_1_2_6; } x_18_1_1; struct VideoCodecVP9 { int x_2_2_1; unsigned char x_2_2_2; bool x_2_2_3; bool x_2_2_4; int x_2_2_5; bool x_2_2_6; bool x_2_2_7; unsigned char x_2_2_8; bool x_2_2_9; int x_2_2_10; } x_18_1_2; struct VideoCodecH264 { bool x_3_2_1; int x_3_2_2; char *x_3_2_3; unsigned long long x_3_2_4; char *x_3_2_5; unsigned long long x_3_2_6; int x_3_2_7; } x_18_1_3; } x18; })nativeVideoCodec;
- (unsigned int)qpMax;
- (void)setHeight:(unsigned short)arg1;
- (void)setMaxBitrate:(unsigned int)arg1;
- (void)setMaxFramerate:(unsigned int)arg1;
- (void)setMinBitrate:(unsigned int)arg1;
- (void)setMode:(unsigned long long)arg1;
- (void)setName:(id)arg1;
- (void)setQpMax:(unsigned int)arg1;
- (void)setStartBitrate:(unsigned int)arg1;
- (void)setTargetBitrate:(unsigned int)arg1;
- (void)setWidth:(unsigned short)arg1;
- (unsigned int)startBitrate;
- (unsigned int)targetBitrate;
- (unsigned short)width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
