<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AWDLBConnectionReport.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libAWDSupportFramework.dylib/AWDLBConnectionReport.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /usr/lib/libAWDSupportFramework.dylib
 */

@interface AWDLBConnectionReport : PBCodable <NSCopying> {
    long long  _bytesReceived;
    long long  _bytesSent;
    long long  _clientConnectionCount;
    int  _connectionAttemptCount;
    int  _connectionCellularFallbackCount;
    long long  _connectionDuration;
    int  _connectionFailureCount;
    struct { 
        long long *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _connectionReadyTimes;
    int  _connectionSuccessMptcpCount;
    int  _connectionSuccessTcpCount;
    struct { 
        unsigned int bytesReceived : 1; 
        unsigned int bytesSent : 1; 
        unsigned int clientConnectionCount : 1; 
        unsigned int connectionDuration : 1; 
        unsigned int timestamp : 1; 
        unsigned int connectionAttemptCount : 1; 
        unsigned int connectionCellularFallbackCount : 1; 
        unsigned int connectionFailureCount : 1; 
        unsigned int connectionSuccessMptcpCount : 1; 
        unsigned int connectionSuccessTcpCount : 1; 
        unsigned int resumptionFailureCount : 1; 
        unsigned int resumptionSuccessCount : 1; 
        unsigned int suspensionCount : 1; 
        unsigned int upgradeSuccessAndNotNeededCount : 1; 
        unsigned int upgradeSuccessAndPrimaryCount : 1; 
    }  _has;
    int  _resumptionFailureCount;
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _resumptionFailureErrors;
    struct { 
        long long *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _resumptionFailureTimes;
    int  _resumptionSuccessCount;
    struct { 
        long long *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _resumptionSuccessTimes;
    int  _suspensionCount;
    unsigned long long  _timestamp;
    int  _upgradeSuccessAndNotNeededCount;
    int  _upgradeSuccessAndPrimaryCount;
}

@property (nonatomic) long long bytesReceived;
@property (nonatomic) long long bytesSent;
@property (nonatomic) long long clientConnectionCount;
@property (nonatomic) int connectionAttemptCount;
@property (nonatomic) int connectionCellularFallbackCount;
@property (nonatomic) long long connectionDuration;
@property (nonatomic) int connectionFailureCount;
@property (nonatomic, readonly) long long*connectionReadyTimes;
@property (nonatomic, readonly) unsigned long long connectionReadyTimesCount;
@property (nonatomic) int connectionSuccessMptcpCount;
@property (nonatomic) int connectionSuccessTcpCount;
@property (nonatomic) bool hasBytesReceived;
@property (nonatomic) bool hasBytesSent;
@property (nonatomic) bool hasClientConnectionCount;
@property (nonatomic) bool hasConnectionAttemptCount;
@property (nonatomic) bool hasConnectionCellularFallbackCount;
@property (nonatomic) bool hasConnectionDuration;
@property (nonatomic) bool hasConnectionFailureCount;
@property (nonatomic) bool hasConnectionSuccessMptcpCount;
@property (nonatomic) bool hasConnectionSuccessTcpCount;
@property (nonatomic) bool hasResumptionFailureCount;
@property (nonatomic) bool hasResumptionSuccessCount;
@property (nonatomic) bool hasSuspensionCount;
@property (nonatomic) bool hasTimestamp;
@property (nonatomic) bool hasUpgradeSuccessAndNotNeededCount;
@property (nonatomic) bool hasUpgradeSuccessAndPrimaryCount;
@property (nonatomic) int resumptionFailureCount;
@property (nonatomic, readonly) int*resumptionFailureErrors;
@property (nonatomic, readonly) unsigned long long resumptionFailureErrorsCount;
@property (nonatomic, readonly) long long*resumptionFailureTimes;
@property (nonatomic, readonly) unsigned long long resumptionFailureTimesCount;
@property (nonatomic) int resumptionSuccessCount;
@property (nonatomic, readonly) long long*resumptionSuccessTimes;
@property (nonatomic, readonly) unsigned long long resumptionSuccessTimesCount;
@property (nonatomic) int suspensionCount;
@property (nonatomic) unsigned long long timestamp;
@property (nonatomic) int upgradeSuccessAndNotNeededCount;
@property (nonatomic) int upgradeSuccessAndPrimaryCount;

- (void)addConnectionReadyTimes:(long long)arg1;
- (void)addResumptionFailureErrors:(int)arg1;
- (void)addResumptionFailureTimes:(long long)arg1;
- (void)addResumptionSuccessTimes:(long long)arg1;
- (long long)bytesReceived;
- (long long)bytesSent;
- (void)clearConnectionReadyTimes;
- (void)clearResumptionFailureErrors;
- (void)clearResumptionFailureTimes;
- (void)clearResumptionSuccessTimes;
- (long long)clientConnectionCount;
- (int)connectionAttemptCount;
- (int)connectionCellularFallbackCount;
- (long long)connectionDuration;
- (int)connectionFailureCount;
- (long long*)connectionReadyTimes;
- (long long)connectionReadyTimesAtIndex:(unsigned long long)arg1;
- (unsigned long long)connectionReadyTimesCount;
- (int)connectionSuccessMptcpCount;
- (int)connectionSuccessTcpCount;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (bool)hasBytesReceived;
- (bool)hasBytesSent;
- (bool)hasClientConnectionCount;
- (bool)hasConnectionAttemptCount;
- (bool)hasConnectionCellularFallbackCount;
- (bool)hasConnectionDuration;
- (bool)hasConnectionFailureCount;
- (bool)hasConnectionSuccessMptcpCount;
- (bool)hasConnectionSuccessTcpCount;
- (bool)hasResumptionFailureCount;
- (bool)hasResumptionSuccessCount;
- (bool)hasSuspensionCount;
- (bool)hasTimestamp;
- (bool)hasUpgradeSuccessAndNotNeededCount;
- (bool)hasUpgradeSuccessAndPrimaryCount;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (int)resumptionFailureCount;
- (int*)resumptionFailureErrors;
- (int)resumptionFailureErrorsAtIndex:(unsigned long long)arg1;
- (unsigned long long)resumptionFailureErrorsCount;
- (long long*)resumptionFailureTimes;
- (long long)resumptionFailureTimesAtIndex:(unsigned long long)arg1;
- (unsigned long long)resumptionFailureTimesCount;
- (int)resumptionSuccessCount;
- (long long*)resumptionSuccessTimes;
- (long long)resumptionSuccessTimesAtIndex:(unsigned long long)arg1;
- (unsigned long long)resumptionSuccessTimesCount;
- (void)setBytesReceived:(long long)arg1;
- (void)setBytesSent:(long long)arg1;
- (void)setClientConnectionCount:(long long)arg1;
- (void)setConnectionAttemptCount:(int)arg1;
- (void)setConnectionCellularFallbackCount:(int)arg1;
- (void)setConnectionDuration:(long long)arg1;
- (void)setConnectionFailureCount:(int)arg1;
- (void)setConnectionReadyTimes:(long long*)arg1 count:(unsigned long long)arg2;
- (void)setConnectionSuccessMptcpCount:(int)arg1;
- (void)setConnectionSuccessTcpCount:(int)arg1;
- (void)setHasBytesReceived:(bool)arg1;
- (void)setHasBytesSent:(bool)arg1;
- (void)setHasClientConnectionCount:(bool)arg1;
- (void)setHasConnectionAttemptCount:(bool)arg1;
- (void)setHasConnectionCellularFallbackCount:(bool)arg1;
- (void)setHasConnectionDuration:(bool)arg1;
- (void)setHasConnectionFailureCount:(bool)arg1;
- (void)setHasConnectionSuccessMptcpCount:(bool)arg1;
- (void)setHasConnectionSuccessTcpCount:(bool)arg1;
- (void)setHasResumptionFailureCount:(bool)arg1;
- (void)setHasResumptionSuccessCount:(bool)arg1;
- (void)setHasSuspensionCount:(bool)arg1;
- (void)setHasTimestamp:(bool)arg1;
- (void)setHasUpgradeSuccessAndNotNeededCount:(bool)arg1;
- (void)setHasUpgradeSuccessAndPrimaryCount:(bool)arg1;
- (void)setResumptionFailureCount:(int)arg1;
- (void)setResumptionFailureErrors:(int*)arg1 count:(unsigned long long)arg2;
- (void)setResumptionFailureTimes:(long long*)arg1 count:(unsigned long long)arg2;
- (void)setResumptionSuccessCount:(int)arg1;
- (void)setResumptionSuccessTimes:(long long*)arg1 count:(unsigned long long)arg2;
- (void)setSuspensionCount:(int)arg1;
- (void)setTimestamp:(unsigned long long)arg1;
- (void)setUpgradeSuccessAndNotNeededCount:(int)arg1;
- (void)setUpgradeSuccessAndPrimaryCount:(int)arg1;
- (int)suspensionCount;
- (unsigned long long)timestamp;
- (int)upgradeSuccessAndNotNeededCount;
- (int)upgradeSuccessAndPrimaryCount;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
