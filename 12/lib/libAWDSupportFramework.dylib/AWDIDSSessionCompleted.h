<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AWDIDSSessionCompleted.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libAWDSupportFramework.dylib/AWDIDSSessionCompleted.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /usr/lib/libAWDSupportFramework.dylib
 */

@interface AWDIDSSessionCompleted : PBCodable <NSCopying> {
    int  _clientType;
    unsigned int  _destinationType;
    unsigned int  _durationOfSession;
    unsigned int  _durationToConnect;
    unsigned int  _endedReason;
    NSString * _guid;
    struct { 
        unsigned int timestamp : 1; 
        unsigned int clientType : 1; 
        unsigned int destinationType : 1; 
        unsigned int durationOfSession : 1; 
        unsigned int durationToConnect : 1; 
        unsigned int endedReason : 1; 
        unsigned int isCellularInterfaceDisallowed : 1; 
        unsigned int isInitiator : 1; 
        unsigned int isLegacySessionType : 1; 
        unsigned int isNetworkActive : 1; 
        unsigned int isNetworkEnabled : 1; 
        unsigned int isNetworkReachable : 1; 
        unsigned int isQREnabled : 1; 
        unsigned int isUsingQRDirectly : 1; 
        unsigned int isWifiInterfaceDisallowed : 1; 
        unsigned int isWithDefaultPairedDevice : 1; 
        unsigned int linkProtocol : 1; 
        unsigned int linkType : 1; 
        unsigned int sessionProtocolVersionNumber : 1; 
        unsigned int transportType : 1; 
    }  _has;
    unsigned int  _isCellularInterfaceDisallowed;
    unsigned int  _isInitiator;
    unsigned int  _isLegacySessionType;
    unsigned int  _isNetworkActive;
    unsigned int  _isNetworkEnabled;
    unsigned int  _isNetworkReachable;
    unsigned int  _isQREnabled;
    unsigned int  _isUsingQRDirectly;
    unsigned int  _isWifiInterfaceDisallowed;
    unsigned int  _isWithDefaultPairedDevice;
    unsigned int  _linkProtocol;
    unsigned int  _linkType;
    NSString * _serviceName;
    unsigned int  _sessionProtocolVersionNumber;
    unsigned long long  _timestamp;
    unsigned int  _transportType;
}

@property (nonatomic) int clientType;
@property (nonatomic) unsigned int destinationType;
@property (nonatomic) unsigned int durationOfSession;
@property (nonatomic) unsigned int durationToConnect;
@property (nonatomic) unsigned int endedReason;
@property (nonatomic, retain) NSString *guid;
@property (nonatomic) bool hasClientType;
@property (nonatomic) bool hasDestinationType;
@property (nonatomic) bool hasDurationOfSession;
@property (nonatomic) bool hasDurationToConnect;
@property (nonatomic) bool hasEndedReason;
@property (nonatomic, readonly) bool hasGuid;
@property (nonatomic) bool hasIsCellularInterfaceDisallowed;
@property (nonatomic) bool hasIsInitiator;
@property (nonatomic) bool hasIsLegacySessionType;
@property (nonatomic) bool hasIsNetworkActive;
@property (nonatomic) bool hasIsNetworkEnabled;
@property (nonatomic) bool hasIsNetworkReachable;
@property (nonatomic) bool hasIsQREnabled;
@property (nonatomic) bool hasIsUsingQRDirectly;
@property (nonatomic) bool hasIsWifiInterfaceDisallowed;
@property (nonatomic) bool hasIsWithDefaultPairedDevice;
@property (nonatomic) bool hasLinkProtocol;
@property (nonatomic) bool hasLinkType;
@property (nonatomic, readonly) bool hasServiceName;
@property (nonatomic) bool hasSessionProtocolVersionNumber;
@property (nonatomic) bool hasTimestamp;
@property (nonatomic) bool hasTransportType;
@property (nonatomic) unsigned int isCellularInterfaceDisallowed;
@property (nonatomic) unsigned int isInitiator;
@property (nonatomic) unsigned int isLegacySessionType;
@property (nonatomic) unsigned int isNetworkActive;
@property (nonatomic) unsigned int isNetworkEnabled;
@property (nonatomic) unsigned int isNetworkReachable;
@property (nonatomic) unsigned int isQREnabled;
@property (nonatomic) unsigned int isUsingQRDirectly;
@property (nonatomic) unsigned int isWifiInterfaceDisallowed;
@property (nonatomic) unsigned int isWithDefaultPairedDevice;
@property (nonatomic) unsigned int linkProtocol;
@property (nonatomic) unsigned int linkType;
@property (nonatomic, retain) NSString *serviceName;
@property (nonatomic) unsigned int sessionProtocolVersionNumber;
@property (nonatomic) unsigned long long timestamp;
@property (nonatomic) unsigned int transportType;

- (int)clientType;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (unsigned int)destinationType;
- (id)dictionaryRepresentation;
- (unsigned int)durationOfSession;
- (unsigned int)durationToConnect;
- (unsigned int)endedReason;
- (id)guid;
- (bool)hasClientType;
- (bool)hasDestinationType;
- (bool)hasDurationOfSession;
- (bool)hasDurationToConnect;
- (bool)hasEndedReason;
- (bool)hasGuid;
- (bool)hasIsCellularInterfaceDisallowed;
- (bool)hasIsInitiator;
- (bool)hasIsLegacySessionType;
- (bool)hasIsNetworkActive;
- (bool)hasIsNetworkEnabled;
- (bool)hasIsNetworkReachable;
- (bool)hasIsQREnabled;
- (bool)hasIsUsingQRDirectly;
- (bool)hasIsWifiInterfaceDisallowed;
- (bool)hasIsWithDefaultPairedDevice;
- (bool)hasLinkProtocol;
- (bool)hasLinkType;
- (bool)hasServiceName;
- (bool)hasSessionProtocolVersionNumber;
- (bool)hasTimestamp;
- (bool)hasTransportType;
- (unsigned long long)hash;
- (unsigned int)isCellularInterfaceDisallowed;
- (bool)isEqual:(id)arg1;
- (unsigned int)isInitiator;
- (unsigned int)isLegacySessionType;
- (unsigned int)isNetworkActive;
- (unsigned int)isNetworkEnabled;
- (unsigned int)isNetworkReachable;
- (unsigned int)isQREnabled;
- (unsigned int)isUsingQRDirectly;
- (unsigned int)isWifiInterfaceDisallowed;
- (unsigned int)isWithDefaultPairedDevice;
- (unsigned int)linkProtocol;
- (unsigned int)linkType;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (id)serviceName;
- (unsigned int)sessionProtocolVersionNumber;
- (void)setClientType:(int)arg1;
- (void)setDestinationType:(unsigned int)arg1;
- (void)setDurationOfSession:(unsigned int)arg1;
- (void)setDurationToConnect:(unsigned int)arg1;
- (void)setEndedReason:(unsigned int)arg1;
- (void)setGuid:(id)arg1;
- (void)setHasClientType:(bool)arg1;
- (void)setHasDestinationType:(bool)arg1;
- (void)setHasDurationOfSession:(bool)arg1;
- (void)setHasDurationToConnect:(bool)arg1;
- (void)setHasEndedReason:(bool)arg1;
- (void)setHasIsCellularInterfaceDisallowed:(bool)arg1;
- (void)setHasIsInitiator:(bool)arg1;
- (void)setHasIsLegacySessionType:(bool)arg1;
- (void)setHasIsNetworkActive:(bool)arg1;
- (void)setHasIsNetworkEnabled:(bool)arg1;
- (void)setHasIsNetworkReachable:(bool)arg1;
- (void)setHasIsQREnabled:(bool)arg1;
- (void)setHasIsUsingQRDirectly:(bool)arg1;
- (void)setHasIsWifiInterfaceDisallowed:(bool)arg1;
- (void)setHasIsWithDefaultPairedDevice:(bool)arg1;
- (void)setHasLinkProtocol:(bool)arg1;
- (void)setHasLinkType:(bool)arg1;
- (void)setHasSessionProtocolVersionNumber:(bool)arg1;
- (void)setHasTimestamp:(bool)arg1;
- (void)setHasTransportType:(bool)arg1;
- (void)setIsCellularInterfaceDisallowed:(unsigned int)arg1;
- (void)setIsInitiator:(unsigned int)arg1;
- (void)setIsLegacySessionType:(unsigned int)arg1;
- (void)setIsNetworkActive:(unsigned int)arg1;
- (void)setIsNetworkEnabled:(unsigned int)arg1;
- (void)setIsNetworkReachable:(unsigned int)arg1;
- (void)setIsQREnabled:(unsigned int)arg1;
- (void)setIsUsingQRDirectly:(unsigned int)arg1;
- (void)setIsWifiInterfaceDisallowed:(unsigned int)arg1;
- (void)setIsWithDefaultPairedDevice:(unsigned int)arg1;
- (void)setLinkProtocol:(unsigned int)arg1;
- (void)setLinkType:(unsigned int)arg1;
- (void)setServiceName:(id)arg1;
- (void)setSessionProtocolVersionNumber:(unsigned int)arg1;
- (void)setTimestamp:(unsigned long long)arg1;
- (void)setTransportType:(unsigned int)arg1;
- (unsigned long long)timestamp;
- (unsigned int)transportType;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
