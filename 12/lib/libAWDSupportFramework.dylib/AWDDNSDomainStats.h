<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AWDDNSDomainStats.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libAWDSupportFramework.dylib/AWDDNSDomainStats.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /usr/lib/libAWDSupportFramework.dylib
 */

@interface AWDDNSDomainStats : PBCodable <NSCopying> {
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _answeredQuerySendCounts;
    NSString * _domain;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _expiredAnswerStates;
    struct { 
        unsigned int networkType : 1; 
        unsigned int recordType : 1; 
    }  _has;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _negAnsweredQuerySendCounts;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _negResponseLatencyMs;
    int  _networkType;
    int  _recordType;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _responseLatencyMs;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _unansweredQueryDurationMs;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _unansweredQuerySendCounts;
}

@property (nonatomic, readonly) unsigned int*answeredQuerySendCounts;
@property (nonatomic, readonly) unsigned long long answeredQuerySendCountsCount;
@property (nonatomic, retain) NSString *domain;
@property (nonatomic, readonly) unsigned int*expiredAnswerStates;
@property (nonatomic, readonly) unsigned long long expiredAnswerStatesCount;
@property (nonatomic, readonly) bool hasDomain;
@property (nonatomic) bool hasNetworkType;
@property (nonatomic) bool hasRecordType;
@property (nonatomic, readonly) unsigned int*negAnsweredQuerySendCounts;
@property (nonatomic, readonly) unsigned long long negAnsweredQuerySendCountsCount;
@property (nonatomic, readonly) unsigned int*negResponseLatencyMs;
@property (nonatomic, readonly) unsigned long long negResponseLatencyMsCount;
@property (nonatomic) int networkType;
@property (nonatomic) int recordType;
@property (nonatomic, readonly) unsigned int*responseLatencyMs;
@property (nonatomic, readonly) unsigned long long responseLatencyMsCount;
@property (nonatomic, readonly) unsigned int*unansweredQueryDurationMs;
@property (nonatomic, readonly) unsigned long long unansweredQueryDurationMsCount;
@property (nonatomic, readonly) unsigned int*unansweredQuerySendCounts;
@property (nonatomic, readonly) unsigned long long unansweredQuerySendCountsCount;

- (int)StringAsNetworkType:(id)arg1;
- (int)StringAsRecordType:(id)arg1;
- (void)addAnsweredQuerySendCount:(unsigned int)arg1;
- (void)addExpiredAnswerState:(unsigned int)arg1;
- (void)addNegAnsweredQuerySendCount:(unsigned int)arg1;
- (void)addNegResponseLatencyMs:(unsigned int)arg1;
- (void)addResponseLatencyMs:(unsigned int)arg1;
- (void)addUnansweredQueryDurationMs:(unsigned int)arg1;
- (void)addUnansweredQuerySendCount:(unsigned int)arg1;
- (unsigned int)answeredQuerySendCountAtIndex:(unsigned long long)arg1;
- (unsigned int*)answeredQuerySendCounts;
- (unsigned long long)answeredQuerySendCountsCount;
- (void)clearAnsweredQuerySendCounts;
- (void)clearExpiredAnswerStates;
- (void)clearNegAnsweredQuerySendCounts;
- (void)clearNegResponseLatencyMs;
- (void)clearResponseLatencyMs;
- (void)clearUnansweredQueryDurationMs;
- (void)clearUnansweredQuerySendCounts;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (id)domain;
- (unsigned int)expiredAnswerStateAtIndex:(unsigned long long)arg1;
- (unsigned int*)expiredAnswerStates;
- (unsigned long long)expiredAnswerStatesCount;
- (bool)hasDomain;
- (bool)hasNetworkType;
- (bool)hasRecordType;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (unsigned int)negAnsweredQuerySendCountAtIndex:(unsigned long long)arg1;
- (unsigned int*)negAnsweredQuerySendCounts;
- (unsigned long long)negAnsweredQuerySendCountsCount;
- (unsigned int*)negResponseLatencyMs;
- (unsigned int)negResponseLatencyMsAtIndex:(unsigned long long)arg1;
- (unsigned long long)negResponseLatencyMsCount;
- (int)networkType;
- (id)networkTypeAsString:(int)arg1;
- (bool)readFrom:(id)arg1;
- (int)recordType;
- (id)recordTypeAsString:(int)arg1;
- (unsigned int*)responseLatencyMs;
- (unsigned int)responseLatencyMsAtIndex:(unsigned long long)arg1;
- (unsigned long long)responseLatencyMsCount;
- (void)setAnsweredQuerySendCounts:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setDomain:(id)arg1;
- (void)setExpiredAnswerStates:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setHasNetworkType:(bool)arg1;
- (void)setHasRecordType:(bool)arg1;
- (void)setNegAnsweredQuerySendCounts:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setNegResponseLatencyMs:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setNetworkType:(int)arg1;
- (void)setRecordType:(int)arg1;
- (void)setResponseLatencyMs:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setUnansweredQueryDurationMs:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setUnansweredQuerySendCounts:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (unsigned int*)unansweredQueryDurationMs;
- (unsigned int)unansweredQueryDurationMsAtIndex:(unsigned long long)arg1;
- (unsigned long long)unansweredQueryDurationMsCount;
- (unsigned int)unansweredQuerySendCountAtIndex:(unsigned long long)arg1;
- (unsigned int*)unansweredQuerySendCounts;
- (unsigned long long)unansweredQuerySendCountsCount;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
