<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AWDWifiLinkQualityRecord.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libAWDSupportFramework.dylib/AWDWifiLinkQualityRecord.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /usr/lib/libAWDSupportFramework.dylib
 */

@interface AWDWifiLinkQualityRecord : PBCodable <NSCopying> {
    unsigned int  _arpFailureCount;
    unsigned int  _bcnPerSign;
    unsigned int  _bcnRcvs;
    unsigned int  _bcnSched;
    unsigned int  _dnsServersImpacted;
    unsigned int  _dnsServersTotal;
    unsigned int  _fwTxFail;
    unsigned int  _fwTxFrames;
    unsigned int  _fwTxPerSign;
    unsigned int  _fwTxRetrans;
    double  _gateOpenTime;
    unsigned int  _gwArpExpiry;
    struct { 
        unsigned int gateOpenTime : 1; 
        unsigned int trafficWatchDuration : 1; 
        unsigned int trafficWatchTime : 1; 
        unsigned int arpFailureCount : 1; 
        unsigned int bcnPerSign : 1; 
        unsigned int bcnRcvs : 1; 
        unsigned int bcnSched : 1; 
        unsigned int dnsServersImpacted : 1; 
        unsigned int dnsServersTotal : 1; 
        unsigned int fwTxFail : 1; 
        unsigned int fwTxFrames : 1; 
        unsigned int fwTxPerSign : 1; 
        unsigned int fwTxRetrans : 1; 
        unsigned int gwArpExpiry : 1; 
        unsigned int netScore : 1; 
        unsigned int rssi : 1; 
        unsigned int rxFrames : 1; 
        unsigned int sympAwdCode : 1; 
        unsigned int sympSign : 1; 
        unsigned int trafficWatchRx : 1; 
        unsigned int trgDisc : 1; 
        unsigned int txFail : 1; 
        unsigned int txFrames : 1; 
        unsigned int txPerSign : 1; 
        unsigned int txRetrans : 1; 
        unsigned int usrImpact : 1; 
        unsigned int usrInput : 1; 
        unsigned int validState : 1; 
    }  _has;
    unsigned int  _netScore;
    int  _rssi;
    unsigned int  _rxFrames;
    unsigned int  _sympAwdCode;
    unsigned int  _sympSign;
    double  _trafficWatchDuration;
    unsigned int  _trafficWatchRx;
    double  _trafficWatchTime;
    unsigned int  _trgDisc;
    unsigned int  _txFail;
    unsigned int  _txFrames;
    unsigned int  _txPerSign;
    unsigned int  _txRetrans;
    unsigned int  _usrImpact;
    unsigned int  _usrInput;
    unsigned int  _validState;
}

@property (nonatomic) unsigned int arpFailureCount;
@property (nonatomic) unsigned int bcnPerSign;
@property (nonatomic) unsigned int bcnRcvs;
@property (nonatomic) unsigned int bcnSched;
@property (nonatomic) unsigned int dnsServersImpacted;
@property (nonatomic) unsigned int dnsServersTotal;
@property (nonatomic) unsigned int fwTxFail;
@property (nonatomic) unsigned int fwTxFrames;
@property (nonatomic) unsigned int fwTxPerSign;
@property (nonatomic) unsigned int fwTxRetrans;
@property (nonatomic) double gateOpenTime;
@property (nonatomic) unsigned int gwArpExpiry;
@property (nonatomic) bool hasArpFailureCount;
@property (nonatomic) bool hasBcnPerSign;
@property (nonatomic) bool hasBcnRcvs;
@property (nonatomic) bool hasBcnSched;
@property (nonatomic) bool hasDnsServersImpacted;
@property (nonatomic) bool hasDnsServersTotal;
@property (nonatomic) bool hasFwTxFail;
@property (nonatomic) bool hasFwTxFrames;
@property (nonatomic) bool hasFwTxPerSign;
@property (nonatomic) bool hasFwTxRetrans;
@property (nonatomic) bool hasGateOpenTime;
@property (nonatomic) bool hasGwArpExpiry;
@property (nonatomic) bool hasNetScore;
@property (nonatomic) bool hasRssi;
@property (nonatomic) bool hasRxFrames;
@property (nonatomic) bool hasSympAwdCode;
@property (nonatomic) bool hasSympSign;
@property (nonatomic) bool hasTrafficWatchDuration;
@property (nonatomic) bool hasTrafficWatchRx;
@property (nonatomic) bool hasTrafficWatchTime;
@property (nonatomic) bool hasTrgDisc;
@property (nonatomic) bool hasTxFail;
@property (nonatomic) bool hasTxFrames;
@property (nonatomic) bool hasTxPerSign;
@property (nonatomic) bool hasTxRetrans;
@property (nonatomic) bool hasUsrImpact;
@property (nonatomic) bool hasUsrInput;
@property (nonatomic) bool hasValidState;
@property (nonatomic) unsigned int netScore;
@property (nonatomic) int rssi;
@property (nonatomic) unsigned int rxFrames;
@property (nonatomic) unsigned int sympAwdCode;
@property (nonatomic) unsigned int sympSign;
@property (nonatomic) double trafficWatchDuration;
@property (nonatomic) unsigned int trafficWatchRx;
@property (nonatomic) double trafficWatchTime;
@property (nonatomic) unsigned int trgDisc;
@property (nonatomic) unsigned int txFail;
@property (nonatomic) unsigned int txFrames;
@property (nonatomic) unsigned int txPerSign;
@property (nonatomic) unsigned int txRetrans;
@property (nonatomic) unsigned int usrImpact;
@property (nonatomic) unsigned int usrInput;
@property (nonatomic) unsigned int validState;

- (unsigned int)arpFailureCount;
- (unsigned int)bcnPerSign;
- (unsigned int)bcnRcvs;
- (unsigned int)bcnSched;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (unsigned int)dnsServersImpacted;
- (unsigned int)dnsServersTotal;
- (unsigned int)fwTxFail;
- (unsigned int)fwTxFrames;
- (unsigned int)fwTxPerSign;
- (unsigned int)fwTxRetrans;
- (double)gateOpenTime;
- (unsigned int)gwArpExpiry;
- (bool)hasArpFailureCount;
- (bool)hasBcnPerSign;
- (bool)hasBcnRcvs;
- (bool)hasBcnSched;
- (bool)hasDnsServersImpacted;
- (bool)hasDnsServersTotal;
- (bool)hasFwTxFail;
- (bool)hasFwTxFrames;
- (bool)hasFwTxPerSign;
- (bool)hasFwTxRetrans;
- (bool)hasGateOpenTime;
- (bool)hasGwArpExpiry;
- (bool)hasNetScore;
- (bool)hasRssi;
- (bool)hasRxFrames;
- (bool)hasSympAwdCode;
- (bool)hasSympSign;
- (bool)hasTrafficWatchDuration;
- (bool)hasTrafficWatchRx;
- (bool)hasTrafficWatchTime;
- (bool)hasTrgDisc;
- (bool)hasTxFail;
- (bool)hasTxFrames;
- (bool)hasTxPerSign;
- (bool)hasTxRetrans;
- (bool)hasUsrImpact;
- (bool)hasUsrInput;
- (bool)hasValidState;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (unsigned int)netScore;
- (bool)readFrom:(id)arg1;
- (int)rssi;
- (unsigned int)rxFrames;
- (void)setArpFailureCount:(unsigned int)arg1;
- (void)setBcnPerSign:(unsigned int)arg1;
- (void)setBcnRcvs:(unsigned int)arg1;
- (void)setBcnSched:(unsigned int)arg1;
- (void)setDnsServersImpacted:(unsigned int)arg1;
- (void)setDnsServersTotal:(unsigned int)arg1;
- (void)setFwTxFail:(unsigned int)arg1;
- (void)setFwTxFrames:(unsigned int)arg1;
- (void)setFwTxPerSign:(unsigned int)arg1;
- (void)setFwTxRetrans:(unsigned int)arg1;
- (void)setGateOpenTime:(double)arg1;
- (void)setGwArpExpiry:(unsigned int)arg1;
- (void)setHasArpFailureCount:(bool)arg1;
- (void)setHasBcnPerSign:(bool)arg1;
- (void)setHasBcnRcvs:(bool)arg1;
- (void)setHasBcnSched:(bool)arg1;
- (void)setHasDnsServersImpacted:(bool)arg1;
- (void)setHasDnsServersTotal:(bool)arg1;
- (void)setHasFwTxFail:(bool)arg1;
- (void)setHasFwTxFrames:(bool)arg1;
- (void)setHasFwTxPerSign:(bool)arg1;
- (void)setHasFwTxRetrans:(bool)arg1;
- (void)setHasGateOpenTime:(bool)arg1;
- (void)setHasGwArpExpiry:(bool)arg1;
- (void)setHasNetScore:(bool)arg1;
- (void)setHasRssi:(bool)arg1;
- (void)setHasRxFrames:(bool)arg1;
- (void)setHasSympAwdCode:(bool)arg1;
- (void)setHasSympSign:(bool)arg1;
- (void)setHasTrafficWatchDuration:(bool)arg1;
- (void)setHasTrafficWatchRx:(bool)arg1;
- (void)setHasTrafficWatchTime:(bool)arg1;
- (void)setHasTrgDisc:(bool)arg1;
- (void)setHasTxFail:(bool)arg1;
- (void)setHasTxFrames:(bool)arg1;
- (void)setHasTxPerSign:(bool)arg1;
- (void)setHasTxRetrans:(bool)arg1;
- (void)setHasUsrImpact:(bool)arg1;
- (void)setHasUsrInput:(bool)arg1;
- (void)setHasValidState:(bool)arg1;
- (void)setNetScore:(unsigned int)arg1;
- (void)setRssi:(int)arg1;
- (void)setRxFrames:(unsigned int)arg1;
- (void)setSympAwdCode:(unsigned int)arg1;
- (void)setSympSign:(unsigned int)arg1;
- (void)setTrafficWatchDuration:(double)arg1;
- (void)setTrafficWatchRx:(unsigned int)arg1;
- (void)setTrafficWatchTime:(double)arg1;
- (void)setTrgDisc:(unsigned int)arg1;
- (void)setTxFail:(unsigned int)arg1;
- (void)setTxFrames:(unsigned int)arg1;
- (void)setTxPerSign:(unsigned int)arg1;
- (void)setTxRetrans:(unsigned int)arg1;
- (void)setUsrImpact:(unsigned int)arg1;
- (void)setUsrInput:(unsigned int)arg1;
- (void)setValidState:(unsigned int)arg1;
- (unsigned int)sympAwdCode;
- (unsigned int)sympSign;
- (double)trafficWatchDuration;
- (unsigned int)trafficWatchRx;
- (double)trafficWatchTime;
- (unsigned int)trgDisc;
- (unsigned int)txFail;
- (unsigned int)txFrames;
- (unsigned int)txPerSign;
- (unsigned int)txRetrans;
- (unsigned int)usrImpact;
- (unsigned int)usrInput;
- (unsigned int)validState;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
