<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AWDWiFiCLTMSliceSpecific.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libAWDSupportFramework.dylib/AWDWiFiCLTMSliceSpecific.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /usr/lib/libAWDSupportFramework.dylib
 */

@interface AWDWiFiCLTMSliceSpecific : PBCodable <NSCopying> {
    unsigned int  _batteryVoltage;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _batteryVoltageBucketeds;
    unsigned int  _cltmIndex;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _cltmIndexBucketeds;
    struct { 
        unsigned int timestamp : 1; 
        unsigned int updateCount : 1; 
        unsigned int batteryVoltage : 1; 
        unsigned int cltmIndex : 1; 
        unsigned int numActiveChains : 1; 
        unsigned int ppm : 1; 
        unsigned int temperature : 1; 
        unsigned int txDutyCycle : 1; 
        unsigned int txPowerBackoff : 1; 
    }  _has;
    unsigned int  _numActiveChains;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _numActiveChainsBucketeds;
    unsigned int  _ppm;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _ppmBucketeds;
    int  _temperature;
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _temperatureBucketeds;
    unsigned long long  _timestamp;
    unsigned int  _txDutyCycle;
    struct { 
        unsigned int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _txDutyCycleBucketeds;
    int  _txPowerBackoff;
    struct { 
        int *list; 
        unsigned long long count; 
        unsigned long long size; 
    }  _txPowerBackoffBucketeds;
    unsigned long long  _updateCount;
}

@property (nonatomic) unsigned int batteryVoltage;
@property (nonatomic, readonly) unsigned int*batteryVoltageBucketeds;
@property (nonatomic, readonly) unsigned long long batteryVoltageBucketedsCount;
@property (nonatomic) unsigned int cltmIndex;
@property (nonatomic, readonly) unsigned int*cltmIndexBucketeds;
@property (nonatomic, readonly) unsigned long long cltmIndexBucketedsCount;
@property (nonatomic) bool hasBatteryVoltage;
@property (nonatomic) bool hasCltmIndex;
@property (nonatomic) bool hasNumActiveChains;
@property (nonatomic) bool hasPpm;
@property (nonatomic) bool hasTemperature;
@property (nonatomic) bool hasTimestamp;
@property (nonatomic) bool hasTxDutyCycle;
@property (nonatomic) bool hasTxPowerBackoff;
@property (nonatomic) bool hasUpdateCount;
@property (nonatomic) unsigned int numActiveChains;
@property (nonatomic, readonly) unsigned int*numActiveChainsBucketeds;
@property (nonatomic, readonly) unsigned long long numActiveChainsBucketedsCount;
@property (nonatomic) unsigned int ppm;
@property (nonatomic, readonly) unsigned int*ppmBucketeds;
@property (nonatomic, readonly) unsigned long long ppmBucketedsCount;
@property (nonatomic) int temperature;
@property (nonatomic, readonly) int*temperatureBucketeds;
@property (nonatomic, readonly) unsigned long long temperatureBucketedsCount;
@property (nonatomic) unsigned long long timestamp;
@property (nonatomic) unsigned int txDutyCycle;
@property (nonatomic, readonly) unsigned int*txDutyCycleBucketeds;
@property (nonatomic, readonly) unsigned long long txDutyCycleBucketedsCount;
@property (nonatomic) int txPowerBackoff;
@property (nonatomic, readonly) int*txPowerBackoffBucketeds;
@property (nonatomic, readonly) unsigned long long txPowerBackoffBucketedsCount;
@property (nonatomic) unsigned long long updateCount;

- (void)addBatteryVoltageBucketed:(unsigned int)arg1;
- (void)addCltmIndexBucketed:(unsigned int)arg1;
- (void)addNumActiveChainsBucketed:(unsigned int)arg1;
- (void)addPpmBucketed:(unsigned int)arg1;
- (void)addTemperatureBucketed:(int)arg1;
- (void)addTxDutyCycleBucketed:(unsigned int)arg1;
- (void)addTxPowerBackoffBucketed:(int)arg1;
- (unsigned int)batteryVoltage;
- (unsigned int)batteryVoltageBucketedAtIndex:(unsigned long long)arg1;
- (unsigned int*)batteryVoltageBucketeds;
- (unsigned long long)batteryVoltageBucketedsCount;
- (void)clearBatteryVoltageBucketeds;
- (void)clearCltmIndexBucketeds;
- (void)clearNumActiveChainsBucketeds;
- (void)clearPpmBucketeds;
- (void)clearTemperatureBucketeds;
- (void)clearTxDutyCycleBucketeds;
- (void)clearTxPowerBackoffBucketeds;
- (unsigned int)cltmIndex;
- (unsigned int)cltmIndexBucketedAtIndex:(unsigned long long)arg1;
- (unsigned int*)cltmIndexBucketeds;
- (unsigned long long)cltmIndexBucketedsCount;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (bool)hasBatteryVoltage;
- (bool)hasCltmIndex;
- (bool)hasNumActiveChains;
- (bool)hasPpm;
- (bool)hasTemperature;
- (bool)hasTimestamp;
- (bool)hasTxDutyCycle;
- (bool)hasTxPowerBackoff;
- (bool)hasUpdateCount;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (unsigned int)numActiveChains;
- (unsigned int)numActiveChainsBucketedAtIndex:(unsigned long long)arg1;
- (unsigned int*)numActiveChainsBucketeds;
- (unsigned long long)numActiveChainsBucketedsCount;
- (unsigned int)ppm;
- (unsigned int)ppmBucketedAtIndex:(unsigned long long)arg1;
- (unsigned int*)ppmBucketeds;
- (unsigned long long)ppmBucketedsCount;
- (bool)readFrom:(id)arg1;
- (void)setBatteryVoltage:(unsigned int)arg1;
- (void)setBatteryVoltageBucketeds:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setCltmIndex:(unsigned int)arg1;
- (void)setCltmIndexBucketeds:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setHasBatteryVoltage:(bool)arg1;
- (void)setHasCltmIndex:(bool)arg1;
- (void)setHasNumActiveChains:(bool)arg1;
- (void)setHasPpm:(bool)arg1;
- (void)setHasTemperature:(bool)arg1;
- (void)setHasTimestamp:(bool)arg1;
- (void)setHasTxDutyCycle:(bool)arg1;
- (void)setHasTxPowerBackoff:(bool)arg1;
- (void)setHasUpdateCount:(bool)arg1;
- (void)setNumActiveChains:(unsigned int)arg1;
- (void)setNumActiveChainsBucketeds:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setPpm:(unsigned int)arg1;
- (void)setPpmBucketeds:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setTemperature:(int)arg1;
- (void)setTemperatureBucketeds:(int*)arg1 count:(unsigned long long)arg2;
- (void)setTimestamp:(unsigned long long)arg1;
- (void)setTxDutyCycle:(unsigned int)arg1;
- (void)setTxDutyCycleBucketeds:(unsigned int*)arg1 count:(unsigned long long)arg2;
- (void)setTxPowerBackoff:(int)arg1;
- (void)setTxPowerBackoffBucketeds:(int*)arg1 count:(unsigned long long)arg2;
- (void)setUpdateCount:(unsigned long long)arg1;
- (int)temperature;
- (int)temperatureBucketedAtIndex:(unsigned long long)arg1;
- (int*)temperatureBucketeds;
- (unsigned long long)temperatureBucketedsCount;
- (unsigned long long)timestamp;
- (unsigned int)txDutyCycle;
- (unsigned int)txDutyCycleBucketedAtIndex:(unsigned long long)arg1;
- (unsigned int*)txDutyCycleBucketeds;
- (unsigned long long)txDutyCycleBucketedsCount;
- (int)txPowerBackoff;
- (int)txPowerBackoffBucketedAtIndex:(unsigned long long)arg1;
- (int*)txPowerBackoffBucketeds;
- (unsigned long long)txPowerBackoffBucketedsCount;
- (unsigned long long)updateCount;
- (void)writeTo:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
