<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AXSpeechAction.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libAXSpeechManager.dylib/AXSpeechAction.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /usr/lib/libAXSpeechManager.dylib
 */

@interface AXSpeechAction : NSObject {
    NSString * _IPAPhonemes;
    NSAttributedString * _attributedString;
    unsigned int  _audioQueueFlags;
    bool  _cannotInterrupt;
    id /* block */  _completionCallback;
    NSMutableArray * _emojiRangeReplacements;
    NSString * _finalSpokenString;
    bool  _ignoreCustomSubstitutions;
    NSString * _language;
    id /* block */  _onPauseCallback;
    id /* block */  _onResumeCallback;
    id /* block */  _onSpeechStartCallback;
    id /* block */  _onWillSpeakRangeCallback;
    double  _pitch;
    NSString * _processedString;
    bool  _shouldDetectLanguage;
    bool  _shouldPrecomposeString;
    bool  _shouldProcessEmoji;
    bool  _shouldProcessEmoticons;
    bool  _shouldQueue;
    double  _speakingRate;
    long long  _state;
    NSString * _string;
    bool  _useMonarchStyleSpeechRate;
    NSString * _voiceIdentifier;
    double  _volume;
    long long  _wordCallbackPostProcessedOffset;
}

@property (nonatomic, copy) NSString *IPAPhonemes;
@property (nonatomic, copy) NSAttributedString *attributedString;
@property (nonatomic) unsigned int audioQueueFlags;
@property (nonatomic) bool cannotInterrupt;
@property (nonatomic, copy) id /* block */ completionCallback;
@property (nonatomic, retain) NSMutableArray *emojiRangeReplacements;
@property (nonatomic, retain) NSString *finalSpokenString;
@property (nonatomic) bool ignoreCustomSubstitutions;
@property (nonatomic, retain) NSString *language;
@property (nonatomic, copy) id /* block */ onPauseCallback;
@property (nonatomic, copy) id /* block */ onResumeCallback;
@property (nonatomic, copy) id /* block */ onSpeechStartCallback;
@property (nonatomic, copy) id /* block */ onWillSpeakRangeCallback;
@property (nonatomic) double pitch;
@property (nonatomic, retain) NSString *processedString;
@property (nonatomic) bool shouldDetectLanguage;
@property (nonatomic) bool shouldPrecomposeString;
@property (nonatomic) bool shouldProcessEmoji;
@property (nonatomic) bool shouldProcessEmoticons;
@property (nonatomic) bool shouldQueue;
@property (nonatomic) double speakingRate;
@property (nonatomic) long long state;
@property (nonatomic, copy) NSString *string;
@property (nonatomic) bool useMonarchStyleSpeechRate;
@property (nonatomic, retain) NSString *voiceIdentifier;
@property (nonatomic) double volume;
@property (nonatomic) long long wordCallbackPostProcessedOffset;

+ (id)actionWithAttributedString:(id)arg1 shouldQueue:(bool)arg2;
+ (id)actionWithString:(id)arg1 shouldQueue:(bool)arg2;

- (void).cxx_destruct;
- (id)IPAPhonemes;
- (id)_detectLanguageFromContent;
- (id)attributedString;
- (unsigned int)audioQueueFlags;
- (bool)cannotInterrupt;
- (id /* block */)completionCallback;
- (id)description;
- (id)emojiRangeReplacements;
- (id)finalSpokenString;
- (bool)ignoreCustomSubstitutions;
- (id)init;
- (id)language;
- (id /* block */)onPauseCallback;
- (id /* block */)onResumeCallback;
- (id /* block */)onSpeechStartCallback;
- (id /* block */)onWillSpeakRangeCallback;
- (double)pitch;
- (void)preprocessAction;
- (id)processedString;
- (void)setAttributedString:(id)arg1;
- (void)setAudioQueueFlags:(unsigned int)arg1;
- (void)setCannotInterrupt:(bool)arg1;
- (void)setCompletionCallback:(id /* block */)arg1;
- (void)setEmojiRangeReplacements:(id)arg1;
- (void)setFinalSpokenString:(id)arg1;
- (void)setIPAPhonemes:(id)arg1;
- (void)setIgnoreCustomSubstitutions:(bool)arg1;
- (void)setLanguage:(id)arg1;
- (void)setOnPauseCallback:(id /* block */)arg1;
- (void)setOnResumeCallback:(id /* block */)arg1;
- (void)setOnSpeechStartCallback:(id /* block */)arg1;
- (void)setOnWillSpeakRangeCallback:(id /* block */)arg1;
- (void)setPitch:(double)arg1;
- (void)setProcessedString:(id)arg1;
- (void)setShouldDetectLanguage:(bool)arg1;
- (void)setShouldPrecomposeString:(bool)arg1;
- (void)setShouldProcessEmoji:(bool)arg1;
- (void)setShouldProcessEmoticons:(bool)arg1;
- (void)setShouldQueue:(bool)arg1;
- (void)setSpeakingRate:(double)arg1;
- (void)setState:(long long)arg1;
- (void)setString:(id)arg1;
- (void)setUseMonarchStyleSpeechRate:(bool)arg1;
- (void)setVoiceIdentifier:(id)arg1;
- (void)setVolume:(double)arg1;
- (void)setWordCallbackPostProcessedOffset:(long long)arg1;
- (bool)shouldDetectLanguage;
- (bool)shouldPrecomposeString;
- (bool)shouldProcessEmoji;
- (bool)shouldProcessEmoticons;
- (bool)shouldQueue;
- (double)speakingRate;
- (long long)state;
- (id)string;
- (bool)useMonarchStyleSpeechRate;
- (id)voiceIdentifier;
- (double)volume;
- (long long)wordCallbackPostProcessedOffset;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
