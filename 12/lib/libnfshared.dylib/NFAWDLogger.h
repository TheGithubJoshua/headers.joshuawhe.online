<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NFAWDLogger.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/lib/libnfshared.dylib/NFAWDLogger.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /usr/lib/libnfshared.dylib
 */

@interface NFAWDLogger : NSObject {
    NSData * _activeAID;
    AWDServerConnection * _awdServer;
    NSObject<OS_dispatch_queue> * _awdSubmissionQueue;
    NFWeakReference * _delegate;
    NSData * _deviceExceptionUuid;
    NSCountedSet * _expressTransactionInfo;
    unsigned int  _hwType;
    unsigned long long  _middlewareExceptionCount;
    unsigned long long  _previousCardIngestionSessionState;
    unsigned long long  _previousExpressTransactionState;
    unsigned long long  _previousTransactionState;
    unsigned long long  _previousVASTransactionState;
    NSData * _restrictedModeID;
    NSData * _tsmUuid;
    unsigned long long  _tsmUuidRefTimestamp;
    NSUserDefaults * _userDefault;
    NSData * _uuid;
    unsigned long long  _uuidRefTimestamp;
    NFAWDVersionInfo * _versionInfo;
}

@property (copy) NSData *activeAID;
@property (nonatomic) <NFAWDLoggerDelegate> *delegate;

+ (id)sharedAWDLogger;

- (void)_postAWDEvent:(id)arg1 withTimestamp:(unsigned long long)arg2;
- (void)_postAWDHardwareExceptionEventWithAssertionCounter:(unsigned int)arg1 hardwareType:(unsigned int)arg2 wdogDump:(unsigned int*)arg3 hwFltDump:(unsigned int*)arg4;
- (void)_postReaderSessionEndedWithType:(unsigned int)arg1 uuid:(id)arg2 startTime:(id)arg3 params:(id)arg4;
- (void)_postReaderSessionPollingStartedWithType:(unsigned int)arg1 uuid:(id)arg2 startTime:(id)arg3;
- (void)_postReaderSessionStartedWithType:(unsigned int)arg1 uuid:(id)arg2;
- (void)_postReaderSessionTagFoundWithType:(unsigned int)arg1 uuid:(id)arg2 startTime:(id)arg3 params:(id)arg4;
- (void)_postReaderSessionTagReadWithType:(unsigned int)arg1 uuid:(id)arg2 startTime:(id)arg3 params:(id)arg4;
- (void)_registerDeviceExceptionStatisticMetric;
- (void)_registerExpressTransactionStatisticMetric;
- (void)_registerGeneralStatisticMetric;
- (void)_registerLPCDStatisticMetric;
- (void)_registerNFCVersionMetric;
- (void)_resetAWDLoadStackExceptionCount;
- (void)_updateStats:(id)arg1 reset:(bool)arg2;
- (id)activeAID;
- (void)dealloc;
- (id)delegate;
- (void)enableQueryMetricsListener;
- (id)generateUUID;
- (unsigned long long)getTimestamp;
- (bool)incrementMiddlewareExceptionCountWithReset:(bool)arg1;
- (id)init;
- (void)postAWDAPNReceived;
- (void)postAWDCRSActivationTimerExpiredWithVersion:(unsigned int)arg1 withStatus:(unsigned int)arg2;
- (void)postAWDCRSAuthECommerceWithParameters:(id)arg1;
- (void)postAWDCRSAuthInitEventWithStatus:(unsigned int)arg1;
- (void)postAWDCRSAuthWithStatus:(unsigned int)arg1 withMethod:(unsigned int)arg2;
- (void)postAWDCRSDeAuthWithStatus:(unsigned int)arg1;
- (void)postAWDCardIngestionReaderStateChangeWithType:(unsigned int)arg1 errorCode:(unsigned int)arg2;
- (void)postAWDCardIngestionSessionStateChange:(id)arg1;
- (void)postAWDEvent:(id)arg1;
- (void)postAWDExpressTransactionEvent:(id)arg1;
- (void)postAWDFelicaStateChangeEvent:(id)arg1;
- (void)postAWDFieldEventWithFieldOn:(bool)arg1 withTechnology:(unsigned int)arg2;
- (void)postAWDHCEEndEvent;
- (void)postAWDHCEStartEvent:(id)arg1;
- (void)postAWDHCEStateChangeEvent:(unsigned int)arg1;
- (void)postAWDHCIActivityTimeout:(id)arg1;
- (void)postAWDHCIEndOfTransactionEventWithParameters:(id)arg1;
- (void)postAWDHCIEndOfTransactionV2EventWithParameters:(id)arg1;
- (void)postAWDHCIStartOfTransactionEventWithVersion:(unsigned int)arg1 withStatus:(unsigned int)arg2;
- (void)postAWDHCIStartOfTransactionV2EventWithParameters:(id)arg1;
- (void)postAWDMiddlewareException:(unsigned int)arg1 mwVersion:(unsigned int)arg2 errorType:(unsigned int)arg3 errorCode:(unsigned int)arg4 breadcrumb:(unsigned long long)arg5 checkMaxExceptionCounter:(bool)arg6;
- (void)postAWDMobileSoftwareUpdateException:(unsigned int)arg1;
- (void)postAWDPLLUnlockEvent;
- (void)postAWDPeerPaymentEnrollmentWithParameters:(id)arg1;
- (void)postAWDPeerPaymentRequestWithParameters:(id)arg1;
- (void)postAWDPurpleTrustOperationWithParameters:(id)arg1;
- (void)postAWDReaderModeExceptionForType:(unsigned int)arg1 withErrorCode:(unsigned int)arg2;
- (void)postAWDReaderSessionEventWithParameters:(id)arg1;
- (void)postAWDRestrictedModeFromContactlessMode:(bool)arg1 isIcf:(bool)arg2;
- (void)postAWDSEMemoryInfo:(id)arg1 isIcf:(bool)arg2;
- (void)postAWDSERemovedEvent:(id)arg1 isIcf:(bool)arg2;
- (void)postAWDSERestrictedModeEntered:(id)arg1 isIcf:(bool)arg2;
- (void)postAWDSERestrictedModeExited:(bool)arg1;
- (void)postAWDSESelectEventWithAID:(id)arg1;
- (void)postAWDTSMConnectivityException:(unsigned int)arg1;
- (void)postAWDTSMEndOfSession;
- (void)postAWDTSMEndWithParameters:(id)arg1;
- (void)postAWDTSMStartWithParameters:(id)arg1;
- (void)postAWDTransactionEndOfOperation;
- (void)postAWDTransactionLastRAPDU;
- (void)postAWDVASGetData:(id)arg1;
- (void)postAWDVASSelectOSE:(id)arg1;
- (void)postAWDVASTransactionException:(unsigned int)arg1 withSWStatus:(unsigned int)arg2;
- (void)postAWDVersionInfo:(id)arg1;
- (void)setActiveAID:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)updateStats:(id)arg1 reset:(bool)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
