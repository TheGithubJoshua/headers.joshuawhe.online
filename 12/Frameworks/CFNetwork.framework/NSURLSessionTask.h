<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSURLSessionTask.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CFNetwork.framework/NSURLSessionTask.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork (978.0.7)
 */

@interface NSURLSessionTask : NSObject <FCOperationIdentifying, FCOperationPrioritizing, NSCopying, NSProgressReporting, RCOperationIdentifying, RCOperationPrioritizing> {
    bool  __extractorFinishedDecoding;
    bool  __extractorPreparedForExtraction;
    double  __loadingPriority;
    double  __timeoutIntervalForResource;
    float  _priority;
}

@property (nonatomic, copy) NSString *_APSRelayTopic;
@property (copy) NSDictionary *_DuetActivityProperties;
@property (copy) NSData *_TCPConnectionMetadata;
@property (readonly) unsigned short _TLSNegotiatedCipherSuite;
@property unsigned long long _allowedProtocolTypes;
@property bool _allowsCellular;
@property (nonatomic) bool _allowsQUIC;
@property (setter=_setAppleIDContext:, copy) <NSURLSessionAppleIDContext> *_appleIDContext;
@property bool _authenticatorConfiguredViaTaskProperty;
@property (nonatomic, retain) NSURL *_backgroundPublishingURL;
@property (nonatomic, copy) NSDictionary *_backgroundTaskTimingData;
@property (copy) NSString *_boundInterfaceIdentifier;
@property long long _bytesPerSecondLimit;
@property bool _cacheOnly;
@property int _cachePolicy;
@property (retain) struct _CFURLCache { }*_cfCache;
@property (retain) struct OpaqueCFHTTPCookieStorage { }*_cfCookies;
@property (retain) struct _CFURLCredentialStorage { }*_cfCreds;
@property (retain) struct _CFHSTSPolicy { }*_cfHSTS;
@property (setter=_setConnectionIsCellular:) bool _connectionIsCellular;
@property (copy) NSArray *_contentDispositionFallbackArray;
@property int _cookieAcceptPolicy;
@property long long _countOfBytesReceivedEncoded;
@property long long _countOfPendingBytesReceivedEncoded;
@property (retain) struct _CFURLRequest { }*_currentCFURLRequest;
@property unsigned int _darkWakePowerAssertion;
@property (nonatomic, retain) NSDictionary *_dependencyInfo;
@property bool _disallowCellular;
@property (nonatomic) long long _discretionaryOverride;
@property (nonatomic) bool _doesSZExtractorConsumeExtractedData;
@property long long _expectedWorkload;
@property (setter=set_extractor:, nonatomic, retain) <SZExtractor> *_extractor;
@property bool _extractorFinishedDecoding;
@property bool _extractorPreparedForExtraction;
@property (nonatomic) bool _hasSZExtractor;
@property (nonatomic, retain) NSURLSessionTaskMetrics *_incompleteTaskMetrics;
@property (nonatomic, readonly) bool _isAVAssetTask;
@property bool _isTopLevelNavigation;
@property (copy) NSURL *_ledBellyFallbackURL;
@property (copy) NSString *_ledBellyServiceIdentifier;
@property (copy) NSDictionary *_legacySocketStreamProperties;
@property double _loadingPriority;
@property double _loadingPriorityValue;
@property (nonatomic, readonly) NSString *_loggableDescription;
@property int _networkServiceType;
@property (retain) NSObject<OS_nw_activity> *_nw_activity;
@property (copy) NSString *_pathToDownloadTaskFile;
@property (nonatomic, retain) struct __PerformanceTiming { }*_performanceTiming;
@property unsigned int _powerAssertion;
@property (nonatomic) bool _preconnect;
@property bool _preventsIdleSystemSleep;
@property bool _preventsSystemHTTPProxyAuthentication;
@property long long _priority;
@property long long _priorityValue;
@property (retain) NSObject<OS_nw_activity> *_private_nw_activity;
@property bool _prohibitAuthUI;
@property (nonatomic) id _protocolForTask;
@property (copy) NSDictionary *_proxySettings;
@property (nonatomic, retain) NSURL *_publishingURL;
@property (nonatomic) unsigned int _qos;
@property long long _requestPriority;
@property bool _requiresSecureHTTPSProxyConnection;
@property bool _shouldHandleCookies;
@property bool _shouldPipelineHTTP;
@property (nonatomic) bool _shouldReportTimingDataToAWD;
@property bool _shouldSkipPipelineProbe;
@property bool _shouldSkipPreferredClientCertificateLookup;
@property bool _shouldUsePipelineHeuristics;
@property (retain) NSURL *_siteForCookies;
@property (copy) NSDictionary *_sslSettings;
@property (copy) NSString *_storagePartitionIdentifier;
@property bool _strictContentLength;
@property long long _suspensionThreshhold;
@property (retain) __NSCFTaskPerformanceTiming *_taskPerformanceTiming;
@property double _timeWindowDelay;
@property double _timeWindowDuration;
@property double _timeoutInterval;
@property double _timeoutIntervalForResource;
@property (nonatomic, retain) NSDictionary *_trailers;
@property (copy) NSString *_uniqueIdentifier;
@property (copy) NSURLSessionTaskHTTPAuthenticator *authenticator;
@property long long countOfBytesClientExpectsToReceive;
@property long long countOfBytesClientExpectsToSend;
@property long long countOfBytesExpectedToReceive;
@property long long countOfBytesExpectedToSend;
@property long long countOfBytesReceived;
@property long long countOfBytesSent;
@property (copy) NSURLRequest *currentRequest;
@property (readonly, retain) NSURL *currentRequest_URL;
@property (readonly, retain) NSURL *currentRequest_mainDocumentURL;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSURLSessionTaskDependencyTree *dependencyTree;
@property (readonly, copy) NSString *description;
@property (copy) NSDate *earliestBeginDate;
@property (copy) NSError *error;
@property (readonly) unsigned long long hash;
@property (copy) NSURLRequest *originalRequest;
@property float priority;
@property (readonly) NSProgress *progress;
@property (nonatomic) long long relativePriority;
@property (copy) NSURLResponse *response;
@property (retain) NSURLSession *session;
@property double startTime;
@property long long state;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSURLSessionTaskDependency *taskDependency;
@property (copy) NSString *taskDescription;
@property unsigned long long taskIdentifier;
@property (nonatomic, readonly) NSURLSessionTaskMetrics *ts_taskMetrics;
@property (readonly, retain) NSObject<OS_dispatch_queue> *workQueue;

// Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork

+ (id)taskForWrappedRequest:(id)arg1;

- (void)_appendCountOfPendingBytesReceivedEncoded:(long long)arg1;
- (void)_completeUploadProgress;
- (void)_consumePendingBytesReceivedEncoded;
- (struct _CFURLRequest { }*)_copyCurrentCFURLRequest;
- (struct _CFHSTSPolicy { }*)_copyHSTSPolicy;
- (struct _CFURLRequest { }*)_copyOriginalCFURLRequest;
- (struct __CFDictionary { }*)_copySocketStreamProperties;
- (const struct XCookieStorage { int (**x1)(); struct __CFAllocator {} *x2; int x3; }*)_createXCookieStorage;
- (const struct XCredentialStorage { int (**x1)(); struct __CFAllocator {} *x2; int x3; }*)_createXCredentialStorage;
- (bool)_extractorFinishedDecoding;
- (bool)_extractorPreparedForExtraction;
- (void)_finishProgressReporting;
- (void)_initializeTimingDataWithSessionConfiguration:(id)arg1;
- (bool)_isAVAssetTask;
- (double)_loadingPriority;
- (id)_loggableDescription;
- (void)_onSessionQueue_cleanupAndBreakCycles;
- (void)_onqueue_adjustBytesPerSecondLimit:(long long)arg1;
- (void)_onqueue_adjustPriorityHint:(float)arg1;
- (void)_onqueue_releasePowerAsssertion;
- (void)_prepareNewTimingDataContainer;
- (void)_setBytesPerSecondLimit:(long long)arg1;
- (void)_setExplicitCookieStorage:(struct OpaqueCFHTTPCookieStorage { }*)arg1;
- (void)_setExplicitStorageSession:(struct __CFURLStorageSession { }*)arg1;
- (void)_setSocketProperties:(struct __CFDictionary { }*)arg1 connectionProperties:(struct __CFDictionary { }*)arg2;
- (double)_timeoutIntervalForResource;
- (id)_transactionMetrics;
- (void)_withXURLCache:(id /* block */)arg1;
- (void)cancel;
- (long long)computeAdjustedPoolPriority;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)initWithOriginalRequest:(id)arg1 updatedRequest:(id)arg2 ident:(unsigned long long)arg3 session:(id)arg4;
- (id)initWithTask:(id)arg1;
- (void)initializeHTTPAuthenticatorWithAppleIDContext:(id)arg1 statusCodes:(id)arg2;
- (float)priority;
- (void)resume;
- (void)setPriority:(float)arg1;
- (void)set_TLSNegotiatedCipherSuite:(unsigned short)arg1;
- (void)set_extractorFinishedDecoding:(bool)arg1;
- (void)set_extractorPreparedForExtraction:(bool)arg1;
- (void)set_loadingPriority:(double)arg1;
- (void)set_timeoutIntervalForResource:(double)arg1;
- (bool)shouldHandleCookiesAndSchemeIsAppropriate;
- (void)suspend;
- (void)updateCurrentRequest:(id)arg1;

// Image: /System/Library/PrivateFrameworks/AssetCacheServices.framework/AssetCacheServices

- (id)descriptionWithAddress;

// Image: /System/Library/PrivateFrameworks/News/TeaFoundation.framework/TeaFoundation

- (id)ts_taskMetrics;

// Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore

- (id)longOperationDescription;
- (long long)relativePriority;
- (void)setRelativePriority:(long long)arg1;
- (id)shortOperationDescription;

// Image: /System/Library/PrivateFrameworks/RemoteConfiguration.framework/RemoteConfiguration

- (id)longOperationDescription;
- (long long)relativePriority;
- (void)setRelativePriority:(long long)arg1;
- (id)shortOperationDescription;

// Image: /System/Library/PrivateFrameworks/Stocks/TeaFoundation.framework/TeaFoundation

- (id)ts_taskMetrics;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
