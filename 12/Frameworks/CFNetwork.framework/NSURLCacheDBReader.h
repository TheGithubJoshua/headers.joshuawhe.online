<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSURLCacheDBReader.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CFNetwork.framework/NSURLCacheDBReader.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork (978.0.7)
 */

@interface NSURLCacheDBReader : NSObject {
    NSString * _dbPathDirectory;
    NSString * _dbPathFile;
    struct sqlite3 { } * _dbReadConnection;
    NSLock * _dbReadConnectionLock;
    bool  _isDBOpen;
    unsigned char  _performTimeRelativeLookups;
    NSMutableSet * _recentTimeStampLookups;
    long long  _schemaVersion;
    struct sqlite3_stmt { } * _sqlSelectStmt;
    struct sqlite3_stmt { } * _sqlSelectTimeStmt;
    NSLock * _timeRelativeLookupLock;
    NSMutableSet * recentTimeStampLookups;
}

@property (retain) NSString *dbPathDirectory;
@property (retain) NSString *dbPathFile;
@property bool isDBOpen;
@property unsigned char performTimeRelativeLookups;
@property (retain) NSMutableSet *recentTimeStampLookups;

- (void)_closeDB;
- (void)_closeDBReadConnections;
- (bool)_finalizeAllDBStatements;
- (bool)_finalizeDBSelectStatements;
- (bool)_openDBReadConnections;
- (bool)_prepareDBSelectStatements;
- (bool)_prepareDBStatements;
- (void)cleanupAndShutdown_Lock;
- (id)createCachedResponseDictForTransmissionWithKey:(id)arg1 objectVersion:(long long)arg2 storagePolicy:(int)arg3 responseObjectBytes:(char *)arg4 responseObjectBytesLength:(int)arg5 protoProps:(char *)arg6 protoPropsLength:(int)arg7 receiverDataBytes:(char *)arg8 receiverDataLength:(int)arg9 requestObjectBytes:(char *)arg10 requestObjectBytesLength:(int)arg11 userInfoBytes:(const char *)arg12 useInfoLength:(int)arg13 isDataOnFS:(bool)arg14 cacheDirPath:(id)arg15 cacheFileName:(id)arg16;
- (struct _CFCachedURLResponse { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct __CFCachedURLResponse {} *x2; }*)createCachedResponseForKey:(id)arg1 cacheDataPath:(id*)arg2 cacheDataFile:(id*)arg3 caller:(struct _CFURLCache { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct shared_ptr<__CFURLCache> { struct __CFURLCache {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg4;
- (id)dbPathDirectory;
- (id)dbPathFile;
- (void)dealloc;
- (int)execSQLStatement:(const char *)arg1 onConnection:(struct sqlite3 { }*)arg2 toCompletionWithRetry:(long long)arg3 writeLockHeld:(bool)arg4;
- (id)init;
- (id)initWithDBPath:(id)arg1 maxSize:(long long)arg2;
- (bool)isDBOpen;
- (bool)openAndPrepareReadCacheDB;
- (void)performTimeRelativeLookupWithInitialTime:(id)arg1 caller:(struct _CFURLCache { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; struct shared_ptr<__CFURLCache> { struct __CFURLCache {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg2;
- (unsigned char)performTimeRelativeLookups;
- (id)recentTimeStampLookups;
- (void)setDbPathDirectory:(id)arg1;
- (void)setDbPathFile:(id)arg1;
- (void)setIsDBOpen:(bool)arg1;
- (void)setPerformTimeRelativeLookups:(unsigned char)arg1;
- (void)setRecentTimeStampLookups:(id)arg1;
- (int)stepSQLStatement:(struct sqlite3_stmt { }*)arg1 toCompletionWithRetry:(long long)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
