<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>__NSCFTCPIOStreamTask.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CFNetwork.framework/__NSCFTCPIOStreamTask.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork (978.0.7)
 */

@interface __NSCFTCPIOStreamTask : __NSCFURLSessionTask {
    NSData * __initialDataPayload;
    unsigned char  _captureStreamsUponCompletion;
    NSMutableArray * _completedSuspendedWork;
    int  _connectionState;
    __NSCFURLLocalStreamTaskWorkRead * _currentReadTask;
    __NSCFURLLocalStreamTaskWorkWrite * _currentWriteTask;
    id /* block */  _disavow;
    bool  _doingWorkOnThisQueue;
    struct shared_ptr<TCPIO_EstablishBase> { 
        struct TCPIO_EstablishBase {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _establish;
    bool  _goneSecure;
    struct shared_ptr<HTTPProtocol> { 
        struct HTTPProtocol {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _httpProtocol;
    struct shared_ptr<TCPIOConnectionObjCPP> { 
        struct TCPIOConnectionObjCPP {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    }  _ios;
    NSMutableArray * _pendingWork;
    bool  _readClosed;
    struct { 
        long long domain; 
        int error; 
    }  _readError;
    bool  _readInProgress;
    CFNetworkTimer * _readTimer;
    bool  _receivedServerTrustChallenge;
    unsigned char  _secure;
    bool  _streamsCaptured;
    bool  _writeClosed;
    bool  _writeEOF;
    struct { 
        long long domain; 
        int error; 
    }  _writeError;
    bool  _writeInProgress;
    CFNetworkTimer * _writeTimer;
}

@property (copy) NSData *_initialDataPayload;
@property (nonatomic, retain) __NSCFURLLocalStreamTaskWorkRead *currentReadTask;
@property (nonatomic, retain) __NSCFURLLocalStreamTaskWorkWrite *currentWriteTask;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_initialDataPayload;
- (void)_onSessionQueue_cleanupAndBreakCycles;
- (void)_onSessionQueue_disavow;
- (void)_onqueue_addBlockOp:(id /* block */)arg1 description:(const char *)arg2;
- (void)_onqueue_addBlockOp:(id /* block */)arg1 description:(const char *)arg2 shouldWaitForTls:(bool)arg3;
- (void)_onqueue_adjustLoadingPoolPriority;
- (void)_onqueue_adjustPoolPriority;
- (void)_onqueue_callbackCompletedWork;
- (void)_onqueue_cancel;
- (void)_onqueue_captureStreams;
- (void)_onqueue_checkForCompletion;
- (void)_onqueue_cleanUpConnectionEstablishmentState;
- (void)_onqueue_closeRead;
- (void)_onqueue_closeWrite;
- (void)_onqueue_connectionEstablishedWithError:(struct { long long x1; int x2; })arg1 callbackReferent:(id)arg2;
- (void)_onqueue_dealWithSessionClientCertAuth:(long long)arg1 credential:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_onqueue_dealWithSessionTrustAuth:(long long)arg1 credential:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_onqueue_errorOrCancelError;
- (void)_onqueue_ioTick;
- (bool)_onqueue_isSecure;
- (void)_onqueue_needClientCert:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_needServerTrust:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_postConnectConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_preConnectionConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_processReadWork:(id)arg1;
- (void)_onqueue_processWriteWork:(id)arg1;
- (void)_onqueue_resume;
- (bool)_onqueue_sendSessionChallenge:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_setTCPIOConnection:(struct shared_ptr<TCPIOConnection> { struct TCPIOConnection {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)_onqueue_startSecureConnection;
- (void)_onqueue_stopSecureConnection;
- (void)_onqueue_suspend;
- (void)_onqueue_timeoutOccured;
- (void)_onqueue_tlsCompletion;
- (void)_onqueue_tlsDisabled;
- (bool)_onqueue_usingCONNECTProxy;
- (struct __PerformanceTiming { }*)_performanceTimingRef;
- (void)_reportTimingDataToAWD:(id)arg1;
- (void)_task_onqueue_didFinish;
- (void)cancel;
- (void)captureStreams;
- (void)closeRead;
- (void)closeWrite;
- (void)copyStreamProperty:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentReadTask;
- (id)currentWriteTask;
- (void)dealloc;
- (id)initWithHost:(id)arg1 port:(long long)arg2 session:(id)arg3 disavow:(id /* block */)arg4;
- (id)initWithTask:(id)arg1 Connection:(struct shared_ptr<TCPIOConnection> { struct TCPIOConnection {} *x1; struct __shared_weak_count {} *x2; })arg2 disavow:(id /* block */)arg3;
- (struct shared_ptr<TCPIOConnectionObjCPP> { struct TCPIOConnectionObjCPP {} *x1; struct __shared_weak_count {} *x2; })ios;
- (bool)isKindOfClass:(Class)arg1;
- (void)readDataOfMinLength:(unsigned long long)arg1 maxLength:(unsigned long long)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
- (void)setCurrentReadTask:(id)arg1;
- (void)setCurrentWriteTask:(id)arg1;
- (void)set_initialDataPayload:(id)arg1;
- (bool)shouldDoWorkConsideringTlsState;
- (void)startSecureConnection;
- (void)stopSecureConnection;
- (void)writeData:(id)arg1 timeout:(double)arg2 completionHandler:(id /* block */)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
