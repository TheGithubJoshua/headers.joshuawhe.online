<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>__NSCFURLLocalStreamTask.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CFNetwork.framework/__NSCFURLLocalStreamTask.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork (978.0.7)
 */

@interface __NSCFURLLocalStreamTask : NSURLSessionStreamTask {
    NSData * __TCPConnectionMetadata;
    NSData * __initialDataPayload;
    NSMutableArray * _afterConnectQueue;
    bool  _betterRouteDiscovered;
    NSString * _boundInterfaceIdentifier;
    int  _connectionState;
    long long  _countOfBytesClientExpectsToReceive;
    long long  _countOfBytesClientExpectsToSend;
    long long  _countOfBytesExpectedToReceive;
    long long  _countOfBytesExpectedToSend;
    long long  _countOfBytesReceived;
    long long  _countOfBytesSent;
    NSURLRequest * _currentRequest;
    bool  _deliveredConnectionEstablished;
    bool  _didIssueCancel;
    bool  _disallowCellular;
    id /* block */  _disavow;
    bool  _doingWorkOnThisQueue;
    NSDate * _earliestBeginDate;
    NSError * _error;
    long long  _expectedWorkload;
    NSMutableArray * _extraWork;
    NSMutableArray * _finalizationQueue;
    bool  _goneSecure;
    NSString * _ledBellyServiceIdentifier;
    NSDictionary * _legacySocketStreamProperties;
    double  _loadingPriorityValue;
    int  _networkServiceType;
    NSURLRequest * _originalRequest;
    NSMutableArray * _pendingWork;
    long long  _priorityValue;
    NSData * _readBuffer;
    bool  _readEOF;
    struct { 
        long long domain; 
        int error; 
    }  _readError;
    bool  _readSignaled;
    struct __CFReadStream { } * _readStream;
    NSURLResponse * _response;
    __NSURLSessionLocal * _session;
    struct BaseSocketStreamClient { int (**x1)(); } * _socketStreamClient;
    long long  _state;
    NSString * _taskDescription;
    unsigned long long  _taskIdentifier;
    NSObject<OS_dispatch_source> * _tickerTimeoutTimer;
    double  _timeWindowDelay;
    double  _timeWindowDuration;
    NSObject<OS_dispatch_queue> * _workQueue;
    NSData * _writeBuffer;
    long long  _writeBufferAlreadyWrittenForNextWrite;
    bool  _writeEOF;
    struct { 
        long long domain; 
        int error; 
    }  _writeError;
    bool  _writeSignaled;
    struct __CFWriteStream { } * _writeStream;
    double  startTime;
}

@property (copy) NSData *_TCPConnectionMetadata;
@property (readonly) bool _goneSecure;
@property (copy) NSData *_initialDataPayload;
@property double _timeoutIntervalForResource;
@property long long countOfBytesClientExpectsToReceive;
@property long long countOfBytesClientExpectsToSend;
@property long long countOfBytesExpectedToReceive;
@property long long countOfBytesExpectedToSend;
@property long long countOfBytesReceived;
@property long long countOfBytesSent;
@property (copy) NSURLRequest *currentRequest;
@property (copy) NSDate *earliestBeginDate;
@property (copy) NSError *error;
@property (copy) NSURLRequest *originalRequest;
@property (copy) NSURLResponse *response;
@property long long state;
@property (copy) NSString *taskDescription;
@property unsigned long long taskIdentifier;

- (id)_TCPConnectionMetadata;
- (id)_boundInterfaceIdentifier;
- (struct __CFDictionary { }*)_copySocketStreamProperties;
- (bool)_disallowCellular;
- (long long)_expectedWorkload;
- (bool)_goneSecure;
- (id)_initCommonWithSession:(id)arg1 disavow:(id /* block */)arg2;
- (id)_initWithExistingTask:(id)arg1 disavow:(id /* block */)arg2;
- (id)_initWithSession:(id)arg1 disavow:(id /* block */)arg2;
- (void)_init_setupTimeoutTimer;
- (id)_initialDataPayload;
- (id)_ledBellyServiceIdentifier;
- (id)_legacySocketStreamProperties;
- (int)_networkServiceType;
- (void)_onSessionQueue_cleanupAndBreakCycles;
- (void)_onSessionQueue_disavow;
- (void)_onqueue_addBlockOp:(id /* block */)arg1 description:(const char *)arg2;
- (void)_onqueue_addBlockOpAtHead:(id /* block */)arg1 description:(const char *)arg2;
- (void)_onqueue_cancel;
- (void)_onqueue_captureStreams;
- (void)_onqueue_checkForCompletion;
- (void)_onqueue_closeReadOp;
- (void)_onqueue_closeWriteOp;
- (void)_onqueue_dealWithSessionClientCertAuth:(long long)arg1 credential:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)_onqueue_dealWithSessionTrustAuth:(long long)arg1 credential:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)_onqueue_errorOrCancelError;
- (void)_onqueue_ioTick;
- (void)_onqueue_needClientCert:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_needServerTrust:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_postConnectConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_onqueue_preConnectionConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)_onqueue_processReadWork:(id)arg1;
- (bool)_onqueue_processWriteWork:(id)arg1;
- (void)_onqueue_readDataOfMinLength:(unsigned long long)arg1 maxLength:(unsigned long long)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
- (void)_onqueue_readStream:(struct __CFReadStream { }*)arg1 writeStreamAvailable:(struct __CFWriteStream { }*)arg2;
- (void)_onqueue_readStreamEvent:(unsigned long long)arg1;
- (void)_onqueue_resume;
- (void)_onqueue_scheduleStreams;
- (bool)_onqueue_sendSessionChallenge:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)_onqueue_shufflePendingFor:(Class)arg1;
- (void)_onqueue_startSecureConnection;
- (void)_onqueue_stopSecureConnection;
- (void)_onqueue_unscheduleStreams;
- (void)_onqueue_writeData:(id)arg1 timeout:(double)arg2 completionHandler:(id /* block */)arg3;
- (void)_onqueue_writeStreamEvent:(unsigned long long)arg1;
- (void)_reportTimingDataToAWD:(id)arg1;
- (void)_task_onqueue_didFinish;
- (void)_task_onqueue_didReceiveDispatchData:(id)arg1 completionHandler:(id /* block */)arg2;
- (double)_timeWindowDelay;
- (double)_timeWindowDuration;
- (void)adjustConditionalConnectionProperties:(struct __CFDictionary { }*)arg1;
- (void)cancel;
- (void)captureStreams;
- (void)closeRead;
- (void)closeWrite;
- (long long)computeAdjustedPoolPriority;
- (void)copyStreamProperty:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)countOfBytesClientExpectsToReceive;
- (long long)countOfBytesClientExpectsToSend;
- (long long)countOfBytesExpectedToReceive;
- (long long)countOfBytesExpectedToSend;
- (long long)countOfBytesReceived;
- (long long)countOfBytesSent;
- (id)currentRequest;
- (void)dealloc;
- (id)describePending:(id)arg1;
- (id)description;
- (id)earliestBeginDate;
- (id)error;
- (id)initWithHost:(id)arg1 port:(long long)arg2 session:(id)arg3 disavow:(id /* block */)arg4;
- (id)initWithNetService:(id)arg1 session:(id)arg2 disavow:(id /* block */)arg3;
- (id)originalRequest;
- (void)readDataOfMinLength:(unsigned long long)arg1 maxLength:(unsigned long long)arg2 timeout:(double)arg3 completionHandler:(id /* block */)arg4;
- (id)response;
- (void)resume;
- (void)setCountOfBytesClientExpectsToReceive:(long long)arg1;
- (void)setCountOfBytesClientExpectsToSend:(long long)arg1;
- (void)setCountOfBytesExpectedToReceive:(long long)arg1;
- (void)setCountOfBytesExpectedToSend:(long long)arg1;
- (void)setCountOfBytesReceived:(long long)arg1;
- (void)setCountOfBytesSent:(long long)arg1;
- (void)setCurrentRequest:(id)arg1;
- (void)setEarliestBeginDate:(id)arg1;
- (void)setError:(id)arg1;
- (void)setOriginalRequest:(id)arg1;
- (void)setResponse:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setTaskDescription:(id)arg1;
- (void)setTaskIdentifier:(unsigned long long)arg1;
- (void)set_TCPConnectionMetadata:(id)arg1;
- (void)set_boundInterfaceIdentifier:(id)arg1;
- (void)set_disallowCellular:(bool)arg1;
- (void)set_expectedWorkload:(long long)arg1;
- (void)set_initialDataPayload:(id)arg1;
- (void)set_ledBellyServiceIdentifier:(id)arg1;
- (void)set_legacySocketStreamProperties:(id)arg1;
- (void)set_networkServiceType:(int)arg1;
- (void)set_timeWindowDelay:(double)arg1;
- (void)set_timeWindowDuration:(double)arg1;
- (void)startSecureConnection;
- (long long)state;
- (void)stopSecureConnection;
- (void)suspend;
- (id)taskDescription;
- (unsigned long long)taskIdentifier;
- (void)writeData:(id)arg1 timeout:(double)arg2 completionHandler:(id /* block */)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
