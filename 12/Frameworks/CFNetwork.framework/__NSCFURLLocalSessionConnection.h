<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>__NSCFURLLocalSessionConnection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CFNetwork.framework/__NSCFURLLocalSessionConnection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork (978.0.7)
 */

@interface __NSCFURLLocalSessionConnection : __NSCFURLSessionConnection <NSCopying, NSURLAuthenticationChallengeSender> {
    bool  _actuallyTriedCredentialsSuppliedInURL;
    bool  _canSendDidFinishCollectingMetrics;
    bool  _canceled;
    long long  _clientBufferLength;
    bool  _didCheckCredentialsSuppliedInURL;
    bool  _didCheckMixedReplace;
    unsigned int  _didReceiveDataCount;
    unsigned long long  _didReceiveResponseDisposition;
    bool  _isMixedReplace;
    struct URLConnectionLoader { int (**x1)(); struct __CFAllocator {} *x2; int (**x3)(); unsigned char x4; unsigned char x5; struct InterfaceRequiredForLoader {} *x6; id x7; int (**x8)(); int (**x9)(); id x10; long long x11; struct RedirectionRecorder {} *x12; unsigned char x13; unsigned char x14; unsigned char x15; id x16; unsigned char x17; double x18; struct URLProtocol {} *x19; id x20; unsigned char x21; struct CoreSchedulingSet {} *x22; double x23; double x24; unsigned long long x25; struct ConfigFlags { unsigned int x_26_1_1 : 1; unsigned int x_26_1_2 : 1; unsigned int x_26_1_3 : 1; unsigned int x_26_1_4 : 1; unsigned int x_26_1_5 : 1; unsigned int x_26_1_6 : 1; unsigned int x_26_1_7 : 1; unsigned int x_26_1_8 : 1; } x26; unsigned char x27; unsigned char x28; unsigned char x29; unsigned char x30; unsigned long long x31; unsigned int x32; unsigned char x33; } * _loader;
    struct SessionConnectionLoadable { int (**x1)(); long long x2; long long x3; long long x4; long long x5; int (**x6)(); int (**x7)(); id x8; } * _loaderClient;
    unsigned long long  _maxDataSegmentCoalesceThreshhold;
    unsigned long long  _maxDataSegmentCount;
    long long  _pendingCompletion;
    NSObject<OS_dispatch_data> * _pendingData;
    NSError * _pendingError;
    bool  _sentDidFinishCollectingMetrics;
    NSObject<OS_dispatch_data> * _sniffData;
    NSURLResponse * _sniffResponse;
    int  _state;
    long long  _suspended;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void)_ackBytes:(long long)arg1;
- (void)_captureTCPIOConnection:(struct shared_ptr<TCPIOConnection> { struct TCPIOConnection {} *x1; struct __shared_weak_count {} *x2; })arg1;
- (void)_capturedSocketInputStream:(id)arg1 outputStream:(id)arg2;
- (void)_cleanup;
- (void)_conditionalRequirementsChanged:(bool)arg1;
- (void)_connectionIsWaitingWithReason:(long long)arg1;
- (void)_didFinishWithError:(id)arg1;
- (void)_didReceiveChallenge:(id)arg1;
- (void)_didReceiveConnectionCacheKey:(struct HTTPConnectionCacheKey { int (**x1)(); struct __CFAllocator {} *x2; int x3; unsigned long long x4; struct __CFString {} *x5; int x6; int x7; struct __CFDictionary {} *x8; unsigned long long x9; struct __CFDictionary {} *x10; struct shared_ptr<NetworkProxy> { struct NetworkProxy {} *x_11_1_1; struct __shared_weak_count {} *x_11_1_2; } x11; struct shared_ptr<const __CFString> { struct __CFString {} *x_12_1_1; struct __shared_weak_count {} *x_12_1_2; } x12; int x13; int x14; struct unique_ptr<const __CFDictionary, Deleter_CFRelease> { struct __compressed_pair<const __CFDictionary *, Deleter_CFRelease> { struct __CFDictionary {} *x_1_2_1; } x_15_1_1; } x15; struct unique_ptr<const __CFString, Deleter_CFRelease> { struct __compressed_pair<const __CFString *, Deleter_CFRelease> { struct __CFString {} *x_1_2_1; } x_16_1_1; } x16; }*)arg1;
- (void)_didReceiveData:(id)arg1;
- (void)_didReceiveResponse:(id)arg1 sniff:(bool)arg2;
- (void)_didSendBodyData:(struct UploadProgressInfo { long long x1; long long x2; long long x3; })arg1;
- (void)_didSendMetrics;
- (void)_immediatePostDelegateTick;
- (void)_needConnectedSocketToHost:(id)arg1 port:(unsigned long long)arg2 completion:(id /* block */)arg3;
- (void)_needNewBodyStream;
- (bool)_needSendingMetrics;
- (void)_redirectRequest:(id)arg1 redirectResponse:(id)arg2 completion:(id /* block */)arg3;
- (void)_task_sendFinish;
- (void)_tick;
- (void)_tick_finishing;
- (void)_tick_initialize;
- (void)_tick_running;
- (void)_tick_sniffNow;
- (void)_willSendRequestForEstablishedConnection:(id)arg1 completion:(id /* block */)arg2;
- (void)afterDelegateWithTick:(id /* block */)arg1;
- (void)cancel;
- (void)cancelAuthenticationChallenge:(id)arg1;
- (void)continueWithoutCredentialForAuthenticationChallenge:(id)arg1;
- (void)dealloc;
- (id)initWithTask:(id)arg1 delegate:(id)arg2 delegateQueue:(id)arg3;
- (void)resume;
- (void)setBytesPerSecondLimit:(long long)arg1;
- (void)setIsDownload:(bool)arg1;
- (void)setPoolPriority:(long long)arg1;
- (void)setPriorityHint:(float)arg1;
- (void)suspend;
- (void)useCredential:(id)arg1 forAuthenticationChallenge:(id)arg2;
- (void)withDelegateAndPendingCompletion:(id /* block */)arg1;
- (void)withLoaderAsync:(id /* block */)arg1;
- (void)withLoaderOnQueue:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
