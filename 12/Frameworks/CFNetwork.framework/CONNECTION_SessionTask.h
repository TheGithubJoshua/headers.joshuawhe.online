<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CONNECTION_SessionTask.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CFNetwork.framework/CONNECTION_SessionTask.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork (978.0.7)
 */

@interface CONNECTION_SessionTask : NSObject {
    struct __CFDictionary { } * __atsContext;
    struct __PerformanceTiming { } * __performanceTiming;
    bool  __shouldSkipPreferredClientCertificateLookup;
    struct __CFDictionary { } * _connectionProperties;
    struct _CFURLRequest { } * _currentRequest;
    bool  _is_cellular;
    Class  _my_protocolForTask;
    NSMutableURLRequest * _nsCurrentRequest;
    NSURLRequest * _nsOriginalRequest;
    struct _CFURLRequest { } * _originalRequest;
    __NSCFURLSession * _session;
    struct __CFDictionary { } * _socketProperties;
    NSMutableArray * _transactionMetrics;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _unfair_lock;
    NSString * _uniqueIdentifier;
}

- (id)_APSRelayTopic;
- (const struct __CFDictionary {}**)_DuetActivityProperties;
- (const struct __CFData {}**)_TCPConnectionMetadata;
- (unsigned short)_TLSNegotiatedCipherSuite;
- (unsigned long long)_allowedProtocolTypes;
- (id)_allowsCellular;
- (bool)_allowsQUIC;
- (void)_appendCountOfPendingBytesReceivedEncoded:(long long)arg1;
- (id)_backgroundTaskTimingData;
- (id)_boundInterfaceIdentifier;
- (long long)_bytesPerSecondLimit;
- (bool)_cacheOnly;
- (int)_cachePolicy;
- (id)_cfCache;
- (id)_cfCookies;
- (id)_cfCreds;
- (id)_cfHSTS;
- (id)_connectionPropertyDuet;
- (void)_consumePendingBytesReceivedEncoded;
- (id)_contentDispositionFallbackArray;
- (int)_cookieAcceptPolicy;
- (struct __CFDictionary { }*)_copyATSState;
- (struct _CFURLRequest { }*)_copyCurrentCFURLRequest;
- (struct _CFHSTSPolicy { }*)_copyHSTSPolicy;
- (struct _CFURLRequest { }*)_copyOriginalCFURLRequest;
- (struct __CFDictionary { }*)_copySocketStreamProperties;
- (id)_countOfBytesReceivedEncoded;
- (id)_countOfPendingBytesReceivedEncoded;
- (const struct XCookieStorage { int (**x1)(); struct __CFAllocator {} *x2; int x3; }*)_createXCookieStorage;
- (const struct XCredentialStorage { int (**x1)(); struct __CFAllocator {} *x2; int x3; }*)_createXCredentialStorage;
- (struct _CFURLRequest { }*)_currentCFURLRequest;
- (struct __CFDictionary { }*)_dependencyInfo;
- (id)_disallowCellular;
- (long long)_discretionaryOverrride;
- (id)_expectedWorkload;
- (void)_getAuthenticationHeadersForResponse:(struct _CFURLResponse { }*)arg1 completionHandler:(id /* block */)arg2;
- (struct __CFSet { }*)_getAuthenticatorStatusCodes;
- (id)_incompleteTaskMetrics;
- (void)_initializeTimingDataWithSessionConfiguration:(id)arg1;
- (bool)_isTopLevelNavigation;
- (id)_loggableDescription;
- (id)_networkServiceType;
- (struct __PerformanceTiming { }*)_performanceTiming;
- (bool)_preconnect;
- (void)_prepareNewTimingDataContainer;
- (unsigned char)_preventsIdleSystemSleep;
- (bool)_preventsSystemHTTPProxyAuthentication;
- (id)_priorityValue;
- (id)_private_nw_activity;
- (void)_processConnectionProperties;
- (id)_prohibitAuthUI;
- (id)_protocolForTask;
- (struct __CFDictionary { }*)_proxySettings;
- (void)_releasePreventIdleSleepAssertionIfAppropriate;
- (long long)_requestPriority;
- (bool)_requiresSecureHTTPSProxyConnection;
- (void)_setAppleIDContext:(id)arg1;
- (void)_setConnectionIsCellular:(bool)arg1;
- (void)_setSocketProperties:(struct __CFDictionary { }*)arg1 connectionProperties:(struct __CFDictionary { }*)arg2;
- (id)_shouldHandleCookies;
- (unsigned char)_shouldPipelineHTTP;
- (unsigned char)_shouldSkipPipelineProbe;
- (bool)_shouldSkipPreferredClientCertificateLookup;
- (unsigned char)_shouldUsePipelineHeuristics;
- (id)_siteForCookies;
- (struct __CFDictionary { }*)_sslSettings;
- (id)_storagePartitionIdentifier;
- (unsigned char)_strictContentLength;
- (long long)_suspensionThreshhold;
- (void)_takePreventIdleSleepAssertionIfAppropriate;
- (id)_timeWindowDelay;
- (id)_timeWindowDuration;
- (double)_timeoutInterval;
- (id)_trailers;
- (id)_transactionMetrics;
- (void)_withXURLCache:(id /* block */)arg1;
- (id)countOfBytesExpectedToReceive;
- (id)countOfBytesExpectedToSend;
- (id)countOfBytesReceived;
- (id)countOfBytesSent;
- (id)currentRequest;
- (struct __CFURL { }*)currentRequest_URL;
- (struct __CFURL { }*)currentRequest_mainDocumentURL;
- (void)dealloc;
- (id)error;
- (bool)hasExtractor;
- (id)initWithRequest:(struct _CFURLRequest { }*)arg1 mutableCurrent:(struct _CFURLRequest { }*)arg2 connProps:(struct __CFDictionary { }*)arg3 sockProps:(struct __CFDictionary { }*)arg4 session:(id)arg5;
- (id)originalRequest;
- (float)priority;
- (id)session;
- (void)set_TCPConnectionMetadata:(id)arg1;
- (void)set_TLSNegotiatedCipherSuite:(unsigned short)arg1;
- (void)set_allowsQUIC:(bool)arg1;
- (void)set_discretionaryOverride:(long long)arg1;
- (void)set_incompleteTaskMetrics:(id)arg1;
- (void)set_preconnect:(bool)arg1;
- (void)set_protocolForTask:(id)arg1;
- (void)set_trailers:(id)arg1;
- (bool)shouldHandleCookiesAndSchemeIsAppropriate;
- (id)startTime;
- (id)state;
- (id)taskIdentifier;
- (void)updateCurrentRequest:(id)arg1;
- (id)workQueue;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
