<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSURLSessionConfiguration.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CFNetwork.framework/NSURLSessionConfiguration.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork (978.0.7)
 */

@interface NSURLSessionConfiguration : NSObject <NSCopying, NSSecureCoding> {
    bool  __allowsWCA;
}

@property (copy) NSDictionary *HTTPAdditionalHeaders;
@property unsigned long long HTTPCookieAcceptPolicy;
@property (retain) NSHTTPCookieStorage *HTTPCookieStorage;
@property long long HTTPMaximumConnectionsPerHost;
@property bool HTTPShouldSetCookies;
@property bool HTTPShouldUsePipelining;
@property int TLSMaximumSupportedProtocol;
@property int TLSMinimumSupportedProtocol;
@property (retain) NSURLCache *URLCache;
@property (retain) NSURLCredentialStorage *URLCredentialStorage;
@property (copy) NSString *_CTDataConnectionServiceType;
@property long long _IDSMessageTimeout;
@property unsigned long long _TCPAdaptiveReadTimeout;
@property unsigned long long _TCPAdaptiveWriteTimeout;
@property bool _allowTCPIOConnectionStreamTask;
@property bool _allowsExpensiveAccess;
@property bool _allowsIndefiniteConnections;
@property bool _allowsMultipathTCP;
@property bool _allowsPowerNapScheduling;
@property bool _allowsResponseMonitoringDuringBodyTranmission;
@property bool _allowsRetryForBackgroundDataTasks;
@property bool _allowsTCPFastOpen;
@property bool _allowsTLSSessionResumption;
@property bool _allowsTLSSessionTickets;
@property bool _allowsWCA;
@property bool _alwaysPerformDefaultTrustEvaluation;
@property (copy) <NSURLSessionAppleIDContext> *_appleIDContext;
@property (copy) NSData *_atsContext;
@property (copy) NSSet *_authenticatorStatusCodes;
@property bool _clientIsNotExplicitlyDiscretionary;
@property bool _collectsTimingData;
@property (copy) NSString *_companionAppBundleIdentifier;
@property double _connectionCacheCellPurgeTimeout;
@property double _connectionCachePurgeTimeout;
@property (copy) NSString *_connectionPoolName;
@property (copy) NSArray *_contentDispHeadEncFallback;
@property unsigned long long _customReadBufferSize;
@property double _customReadBufferTimeout;
@property (copy) NSURL *_directoryForDownloadedFiles;
@property bool _disablesOutOfProcessDirectWiFiUsage;
@property bool _disablesUseOfProxySession;
@property bool _disallowsSPDY;
@property bool _duetPreauthorized;
@property long long _expiredDNSBehavior;
@property unsigned long long _forcedNetworkServiceType;
@property bool _forcesNewConnections;
@property bool _ignoreDidReceiveResponseDisposition;
@property bool _infersDiscretionaryFromOriginatingClient;
@property (copy) NSString *_ledBellyServiceIdentifier;
@property double _longLivedConnectionCacheCellPurgeTimeout;
@property double _longLivedConnectionCachePurgeTimeout;
@property bool _onBehalfOfPairedDevice;
@property (copy) NSDictionary *_overriddenDelegateOptions;
@property bool _overridesBackgroundSessionAutoRedirect;
@property bool _performsEVCertCheck;
@property (retain) NSHTTPCookieStorage *_phskip_cookieStorage;
@property bool _phskip_cookieStorageSet;
@property (retain) NSURLCredentialStorage *_phskip_credStorage;
@property bool _phskip_credStorageSet;
@property (retain) struct _CFHSTSPolicy { }*_phskip_hstsStorage;
@property bool _phskip_hstsStorageSet;
@property (retain) NSURLCache *_phskip_urlCache;
@property bool _phskip_urlCacheSet;
@property bool _prefersInfraWiFi;
@property bool _preventsDirectWiFiAccess;
@property bool _preventsIdleSleep;
@property bool _preventsIdleSleepOnceConnected;
@property bool _preventsSystemHTTPProxyAuthentication;
@property (getter=_isProxySession) bool _proxySession;
@property bool _requiresClientToOpenFiles;
@property bool _requiresPowerPluggedIn;
@property bool _requiresSecureHTTPSProxyConnection;
@property bool _requiresSustainedDataDelivery;
@property bool _respectsAllowsCellularAccessForDiscretionaryTasks;
@property bool _sessionSendsLaunchOnDemandEvents;
@property bool _shouldPreserveBackgroundSessionDisposition;
@property bool _shouldSkipPreferredClientCertificateLookup;
@property (copy) NSDictionary *_socketStreamProperties;
@property (copy) NSData *_sourceApplicationAuditTokenData;
@property (copy) NSString *_sourceApplicationBundleIdentifier;
@property (copy) NSString *_sourceApplicationSecondaryIdentifier;
@property bool _supportsAVAssetDownloads;
@property (copy) NSSet *_suppressedAutoAddedHTTPHeaders;
@property (copy) NSString *_tcpConnectionPoolName;
@property long long _timingDataOptions;
@property (copy) NSString *_tlsCachePrefix;
@property (copy) NSString *_tlsTrustPinningPolicyName;
@property bool _usePipeliningHeuristics;
@property (copy) NSString *_watchAppBundleIdentifier;
@property (copy) NSString *_watchExtensionBundleIdentifier;
@property bool allowsCellularAccess;
@property (getter=isBackgroundSession) bool backgroundSession;
@property (copy) NSDictionary *connectionProxyDictionary;
@property (getter=isDiscretionary) bool discretionary;
@property NSString *disposition;
@property (copy) NSString *identifier;
@property long long minimumFastLanePriority;
@property long long multipathServiceType;
@property unsigned long long networkServiceType;
@property long long numFastLanes;
@property long long numPriorityLevels;
@property long long pipeliningHighWatermark;
@property long long pipeliningLowWatermark;
@property (copy) NSArray *protocolClasses;
@property unsigned long long requestCachePolicy;
@property bool sessionSendsLaunchEvents;
@property (copy) NSString *sharedContainerIdentifier;
@property bool shouldUseExtendedBackgroundIdleMode;
@property bool skip_download_unlink;
@property double timeoutIntervalForRequest;
@property double timeoutIntervalForResource;
@property (nonatomic) bool ts_timingDataEnabled;
@property bool waitsForConnectivity;

// Image: /System/Library/Frameworks/CFNetwork.framework/CFNetwork

+ (id)AVBackgroundSessionConfigurationWithIdentifier:(id)arg1;
+ (id)_AVBackgroundSessionConfigurationWithIdentifier:(id)arg1;
+ (id)_defaultProtocolClasses;
+ (id)_proxySessionConfigurationWithIdentifier:(id)arg1;
+ (id)backgroundSessionConfiguration:(id)arg1;
+ (id)backgroundSessionConfigurationWithIdentifier:(id)arg1;
+ (id)defaultSessionConfiguration;
+ (id)ephemeralSessionConfiguration;
+ (id)sessionConfigurationForSharedSession;
+ (bool)supportsSecureCoding;

- (bool)_allowsWCA;
- (void*)_copyAttribute:(struct __CFString { }*)arg1;
- (struct OpaqueCFHTTPCookieStorage { }*)_copyCFCookieStorage;
- (struct _CFHSTSPolicy { }*)copyHSTSPolicy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)encodeWithCoder:(id)arg1;
- (struct HTTPConnectionCacheLimits { int x1; int x2; int x3; int x4; int x5; int x6; int x7; int x8; int x9; int x10; })getConnectionCacheLimits;
- (id)initWithCoder:(id)arg1;
- (id)initWithDisposition:(id)arg1;
- (void)set_allowsWCA:(bool)arg1;

// Image: /System/Library/PrivateFrameworks/AppleAccount.framework/AppleAccount

- (void)aa_registerProtocolClass:(Class)arg1;
- (void)aa_unregisterProtocolClass:(Class)arg1;

// Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices

- (void)applyNSURLConnectionProperties:(id)arg1;
- (void)geo_configureWithRequest:(id)arg1;
- (bool)geo_hasApplicationAttribution:(id)arg1;
- (bool)geo_isCompatibleWithRequest:(id)arg1;
- (void)geo_setApplicationAttribution:(id)arg1;

// Image: /System/Library/PrivateFrameworks/News/TeaFoundation.framework/TeaFoundation

- (void)setTs_timingDataEnabled:(bool)arg1;
- (bool)ts_timingDataEnabled;

// Image: /System/Library/PrivateFrameworks/ProtocolBuffer.framework/ProtocolBuffer

- (void)applyNSURLConnectionProperties:(id)arg1;

// Image: /System/Library/PrivateFrameworks/Stocks/TeaFoundation.framework/TeaFoundation

- (void)setTs_timingDataEnabled:(bool)arg1;
- (bool)ts_timingDataEnabled;

// Image: /System/Library/PrivateFrameworks/VideoSubscriberAccountUI.framework/VideoSubscriberAccountUI

+ (id)vs_defaultSessionConfigurationForSourceAppWithAuditToken:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
