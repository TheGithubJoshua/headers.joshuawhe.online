<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ENManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ExposureNotification.framework/ENManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ExposureNotification.framework/ExposureNotification (150.1)
 */

@interface ENManager : NSObject {
    bool  _activateCalled;
    id /* block */  _activityHandler;
    unsigned int  _clientID;
    ENExposureDetectionClientSession * _detectionSession;
    id /* block */  _diagnosisKeysAvailableHandler;
    NSObject<OS_dispatch_queue> * _dispatchQueue;
    bool  _exposureNotificationEnabled;
    bool  _exposureNotificationPaused;
    long long  _exposureNotificationStatus;
    NSMutableArray * _exposureWindows;
    bool  _invalidateCalled;
    bool  _invalidateDone;
    id /* block */  _invalidationHandler;
    bool  _isTestEntitlement;
    <ENUIRemotePresentationController> * _remotePresentationController;
    id /* block */  _statusChangedHandler;
    NSObject<OS_xpc_object> * _testListenerEndpoint;
    NSObject<OS_xpc_object> * _xpcCnx;
}

@property (nonatomic, copy) id /* block */ activityHandler;
@property (nonatomic) unsigned int clientID;
@property (nonatomic, copy) id /* block */ diagnosisKeysAvailableHandler;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dispatchQueue;
@property (nonatomic, readonly) bool exposureNotificationEnabled;
@property (nonatomic, readonly) bool exposureNotificationPaused;
@property (nonatomic, readonly) long long exposureNotificationStatus;
@property (nonatomic, copy) id /* block */ invalidationHandler;
@property (nonatomic, copy) id /* block */ statusChangedHandler;
@property (nonatomic, retain) NSObject<OS_xpc_object> *testListenerEndpoint;

+ (long long)authorizationStatus;

- (void).cxx_destruct;
- (void)_activateInitial:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)_checkRemoteDialogueRequirementForRequestType:(long long)arg1 completionHandler:(id /* block */)arg2;
- (id)_ensureXPCStarted;
- (void)_entitlementCheckUpdate:(id)arg1;
- (void)_entitlementCheckWithCompletion:(id /* block */)arg1;
- (void)_getDetectionHistoryFilesCompleted:(id)arg1 completion:(id /* block */)arg2;
- (void)_getDetectionHistorySessionsCompleted:(id)arg1 completion:(id /* block */)arg2;
- (void)_getDiagnosisKeysReply:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_getExposureInfoCompleted:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_getExposureWindowsCompleted:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_getExposureWindowsFromIndex:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (void)_handleRemotePresentationRequest:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_interrupted;
- (void)_invalidate;
- (void)_invalidated;
- (void)_populateDetectionHistoryChecks:(id)arg1 forSessions:(id)arg2 sessionIndex:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (void)_preAuthorizeDiagnosisKeysWithSessionID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_reactivate;
- (bool)_setActivationPropertiesOnRequest:(id)arg1 error:(id*)arg2;
- (void)_tccCheckWithCompletion:(id /* block */)arg1;
- (void)_xpcHandleActivity:(id)arg1;
- (void)_xpcHandlePreAuthorizedDiagnosisKeysAvailable:(id)arg1;
- (void)_xpcHandleStatusChanged:(id)arg1 initial:(bool)arg2;
- (void)_xpcReceivedEvent:(id)arg1;
- (void)_xpcReceivedMessage:(id)arg1;
- (void)activateWithCompletionHandler:(id /* block */)arg1;
- (void)activeRegionWithCompletion:(id /* block */)arg1;
- (id /* block */)activityHandler;
- (void)agencyConfigurationForLocale:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)allAgencyConfigurationsForLocale:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)allRegionConfigurationsWithCompletion:(id /* block */)arg1;
- (void)allRegionServerConfigurationsWithCompletion:(id /* block */)arg1;
- (void)clearDeveloperServerConfigurationWithCompletionHandler:(id /* block */)arg1;
- (unsigned int)clientID;
- (void)dealloc;
- (void)deleteExposureDetectionHistoryWithCompletionHandler:(id /* block */)arg1;
- (id)description;
- (id)descriptionWithLevel:(int)arg1;
- (id)detectExposuresWithConfiguration:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)detectExposuresWithConfiguration:(id)arg1 diagnosisKeyURLs:(id)arg2 completionHandler:(id /* block */)arg3;
- (id /* block */)diagnosisKeysAvailableHandler;
- (void)diagnosticControl:(id)arg1 completion:(id /* block */)arg2;
- (void)diagnosticShow:(id)arg1 completion:(id /* block */)arg2;
- (id)dispatchQueue;
- (void)downloadAndDetectExposure:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)exposureDetectionActivate:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionAddKeys:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionFileActivate:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionFileAdd:(id)arg1 signatureURL:(id)arg2 completion:(id /* block */)arg3;
- (void)exposureDetectionFileFinishWithCompletion:(id /* block */)arg1;
- (void)exposureDetectionFinishWithCompletion:(id /* block */)arg1;
- (void)exposureDetectionGetExposureInfoCompleted:(id)arg1 completion:(id /* block */)arg2;
- (void)exposureDetectionGetExposureInfoWithMaximumCount:(unsigned long long)arg1 completion:(id /* block */)arg2;
- (bool)exposureNotificationEnabled;
- (void)exposureNotificationGetStatusForBundleIdentifier:(id)arg1 completion:(id /* block */)arg2;
- (bool)exposureNotificationPaused;
- (long long)exposureNotificationStatus;
- (void)fetchConfigurationsForRegion:(id)arg1 forceServerFetch:(bool)arg2 completion:(id /* block */)arg3;
- (void)fetchSubdivisionsForCountry:(id)arg1 completion:(id /* block */)arg2;
- (void)fetchTestMetadataForSession:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)finishTestVerificationForSession:(id)arg1 userDidConsent:(bool)arg2 metadata:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)getAllEntitiesWithCompletion:(id /* block */)arg1;
- (void)getDataVaultSizeWithCompletion:(id /* block */)arg1;
- (void)getDetectionHistoryChecksWithCompletion:(id /* block */)arg1;
- (void)getDetectionHistoryFilesForSession:(id)arg1 completion:(id /* block */)arg2;
- (void)getDetectionHistorySessionsWithCompletion:(id /* block */)arg1;
- (void)getDiagnosisKeysForTesting:(bool)arg1 forceRefresh:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)getDiagnosisKeysWithCompletionHandler:(id /* block */)arg1;
- (id)getExposureInfoFromSummary:(id)arg1 userExplanation:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)getExposureWindowsFromSummary:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getInfoForKey:(id)arg1 completion:(id /* block */)arg2;
- (void)getLastExposureNotificationWithCompletion:(id /* block */)arg1;
- (void)getPreAuthorizeDiagnosisKeysEnabledForRegion:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getRegionHistoryEnabledWithCompletionHandler:(id /* block */)arg1;
- (void)getRegionMonitorEnabledWithCompletionHandler:(id /* block */)arg1;
- (void)getRegionVisitHistoryWithCompletion:(id /* block */)arg1;
- (void)getTestDiagnosisKeysWithCompletionHandler:(id /* block */)arg1;
- (void)getTravelStatusEnabledForRegion:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)getTravelStatusEnabledWithCompletionHandler:(id /* block */)arg1;
- (void)getUserTraveledWithCompletionHandler:(id /* block */)arg1;
- (id)init;
- (void)invalidate;
- (id /* block */)invalidationHandler;
- (void)onboardingDidStartForRegion:(id)arg1 withSource:(id)arg2 completion:(id /* block */)arg3;
- (void)pauseWithExpiration:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)preAuthorizeDiagnosisKeysWithCompletionHandler:(id /* block */)arg1;
- (void)regionConfigurationWithCompletion:(id /* block */)arg1;
- (void)regionHistoryWithCompletion:(id /* block */)arg1;
- (void)regionServerConfigurationWithCompletion:(id /* block */)arg1;
- (void)remotePresentationRequestDidComplete:(id)arg1 completion:(id /* block */)arg2;
- (void)requestPreAuthorizedDiagnosisKeysWithCompletionHandler:(id /* block */)arg1;
- (void)resetAllDataWithCompletionHandler:(id /* block */)arg1;
- (void)resetDataWithFlags:(unsigned int)arg1 completionHandler:(id /* block */)arg2;
- (void)setActiveEntityWithAppBundleID:(id)arg1 completion:(id /* block */)arg2;
- (void)setActiveEntityWithRegion:(id)arg1 completion:(id /* block */)arg2;
- (void)setActiveRegion:(id)arg1 completion:(id /* block */)arg2;
- (void)setActivityHandler:(id /* block */)arg1;
- (void)setAutomaticRegionSwitchEnabled:(bool)arg1 completion:(id /* block */)arg2;
- (void)setAvailabilityAlertEnabled:(bool)arg1 completion:(id /* block */)arg2;
- (void)setClientID:(unsigned int)arg1;
- (void)setCurrentActiveApp:(id)arg1 completion:(id /* block */)arg2;
- (void)setDeveloperServerConfiguration:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)setDiagnosisKeysAvailableHandler:(id /* block */)arg1;
- (void)setDispatchQueue:(id)arg1;
- (void)setExposureNotificationEnabled:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)setInvalidationHandler:(id /* block */)arg1;
- (void)setPaused:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)setPreAuthorizeDiagnosisKeysEnabled:(bool)arg1 region:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setRegionConsent:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)setRegionConsent:(long long)arg1 region:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setRegionHistoryEnabled:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)setRegionUserConsent:(id)arg1 region:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setStatusChangedHandler:(id /* block */)arg1;
- (void)setTestListenerEndpoint:(id)arg1;
- (void)setTravelStatusEnabled:(bool)arg1 completionHandler:(id /* block */)arg2;
- (void)setTravelStatusEnabled:(bool)arg1 region:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)setWeeklySummaryAlertEnabled:(bool)arg1 completion:(id /* block */)arg2;
- (void)showBuddyForRegion:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)startTestVerificationSessionWithCode:(id)arg1 region:(id)arg2 completionHandler:(id /* block */)arg3;
- (id /* block */)statusChangedHandler;
- (id)testListenerEndpoint;
- (void)triggerNotificationOfType:(int)arg1 appBundleIdentifier:(id)arg2 classificationName:(id)arg3 interval:(id)arg4 region:(id)arg5 completion:(id /* block */)arg6;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
