<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ENProtobufCoder.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ExposureNotification.framework/ENProtobufCoder.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ExposureNotification.framework/ExposureNotification (150.1)
 */

@interface ENProtobufCoder : NSObject {
    NSMutableData * _bufferData;
    unsigned long long  _bufferMaxSize;
    unsigned long long  _bufferOffset;
    struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; } * _fileHandle;
    ENArchive * _readArchive;
    const char * _readBase;
    const char * _readEnd;
    const char * _readSrc;
    unsigned char  _staticBuffer;
    NSMutableArray * _subCoders;
    char * _writeBase;
    char * _writeDst;
    char * _writeLim;
}

@property (nonatomic, readonly) NSMutableData *bufferData;
@property (nonatomic) unsigned long long bufferMaxSize;
@property (nonatomic) unsigned long long bufferOffset;
@property (nonatomic, readonly) struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*fileHandle;
@property (nonatomic, readonly) ENArchive *readArchive;
@property (nonatomic, readonly) const char *readBase;
@property (nonatomic, readonly) const char *readEnd;
@property (nonatomic, readonly) const char *readSrc;
@property (nonatomic, readonly) char *writeBase;
@property (nonatomic, readonly) char *writeDst;
@property (nonatomic, readonly) char *writeLim;

- (void).cxx_destruct;
- (const char *)_readLength:(unsigned long long)arg1 eofOkay:(bool)arg2 error:(id*)arg3;
- (bool)_skipLength:(unsigned long long)arg1 error:(id*)arg2;
- (bool)_writeBytes:(const void*)arg1 length:(unsigned long long)arg2 error:(id*)arg3;
- (id)bufferData;
- (unsigned long long)bufferMaxSize;
- (unsigned long long)bufferOffset;
- (id)dequeueOrCreateSubCoder;
- (void)enqueueSubCoder:(id)arg1;
- (struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)fileHandle;
- (id)init;
- (void)prepareForReuse;
- (id)readArchive;
- (const char *)readBase;
- (const char *)readEnd;
- (bool)readFixedDouble:(double*)arg1 error:(id*)arg2;
- (bool)readFixedFloat:(float*)arg1 error:(id*)arg2;
- (bool)readFixedSInt32:(int*)arg1 error:(id*)arg2;
- (bool)readFixedSInt64:(long long*)arg1 error:(id*)arg2;
- (bool)readFixedUInt32:(unsigned int*)arg1 error:(id*)arg2;
- (bool)readFixedUInt64:(unsigned long long*)arg1 error:(id*)arg2;
- (const char *)readLengthDelimited:(unsigned long long*)arg1 error:(id*)arg2;
- (id)readNSDataAndReturnError:(id*)arg1;
- (id)readNSStringAndReturnError:(id*)arg1;
- (const char *)readSrc;
- (bool)readType:(char *)arg1 tag:(unsigned long long*)arg2 eofOkay:(bool)arg3 error:(id*)arg4;
- (bool)readVarInt:(unsigned long long*)arg1 eofOkay:(bool)arg2 error:(id*)arg3;
- (bool)readVarIntInt32:(int*)arg1 error:(id*)arg2;
- (bool)readVarIntSInt32:(int*)arg1 error:(id*)arg2;
- (bool)readVarIntSInt64:(long long*)arg1 error:(id*)arg2;
- (bool)readVarIntUInt32:(unsigned int*)arg1 error:(id*)arg2;
- (bool)readVarIntUInt64:(unsigned long long*)arg1 error:(id*)arg2;
- (void)setBufferMaxSize:(unsigned long long)arg1;
- (void)setBufferOffset:(unsigned long long)arg1;
- (void)setFileHandle:(struct __sFILE { char *x1; int x2; int x3; short x4; short x5; struct __sbuf { char *x_6_1_1; int x_6_1_2; } x6; int x7; void *x8; int (*x9)(); int (*x10)(); int (*x11)(); int (*x12)(); struct __sbuf { char *x_13_1_1; int x_13_1_2; } x13; struct __sFILEX {} *x14; int x15; unsigned char x16[3]; unsigned char x17[1]; struct __sbuf { char *x_18_1_1; int x_18_1_2; } x18; int x19; long long x20; }*)arg1;
- (void)setReadArchive:(id)arg1;
- (void)setReadMemory:(const void*)arg1 length:(unsigned long long)arg2;
- (void)setWriteMemory:(void*)arg1 length:(unsigned long long)arg2;
- (void)setWriteMutableData:(id)arg1;
- (bool)skipType:(unsigned char)arg1 error:(id*)arg2;
- (char *)writeBase;
- (char *)writeDst;
- (bool)writeFixedDouble:(double)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeFixedFloat:(float)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeFixedSInt32:(int)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeFixedSInt64:(long long)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeFixedUInt32:(unsigned int)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeFixedUInt64:(unsigned long long)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeLengthDelimitedPtr:(const void*)arg1 length:(unsigned long long)arg2 tag:(unsigned long long)arg3 error:(id*)arg4;
- (char *)writeLim;
- (bool)writeNSData:(id)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeNSString:(id)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeVarInt:(unsigned long long)arg1 error:(id*)arg2;
- (bool)writeVarIntSInt32:(int)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeVarIntSInt64:(long long)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeVarIntUInt32:(unsigned int)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;
- (bool)writeVarIntUInt64:(unsigned long long)arg1 tag:(unsigned long long)arg2 error:(id*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
