<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PFUbiquityTransactionLog.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/PFUbiquityTransactionLog.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface PFUbiquityTransactionLog : NSObject {
    NSMutableDictionary * _contents;
    NSRecursiveLock * _contentsLock;
    NSString * _fileProtectionOption;
    bool  _inPermanentLocation;
    bool  _inStagingLocation;
    bool  _inTemporaryLocation;
    PFUbiquityKnowledgeVector * _knowledgeVector;
    bool  _loadUsingRetry;
    bool  _loadedComparisonMetadata;
    bool  _loadedContents;
    bool  _loadedDeletedObjectData;
    bool  _loadedImportMetadata;
    bool  _loadedInsertedObjectData;
    bool  _loadedUpdatedObjectData;
    NSString * _localPeerID;
    PFUbiquitySaveSnapshot * _saveSnapshot;
    PFUbiquityLocation * _stagingTransactionLogLocation;
    PFUbiquityLocation * _temporaryTransactionLogLocation;
    PFUbiquityLocation * _transactionLogLocation;
    int  _transactionLogType;
    bool  _useTemporaryLogLocation;
}

@property (nonatomic, readonly) PFUbiquityLocation *currentLocation;
@property (nonatomic, readonly) NSString *exportingPeerID;
@property (nonatomic, readonly) NSString *fileProtectionOption;
@property (nonatomic, readonly) bool inPermanentLocation;
@property (nonatomic, readonly) bool inStagingLocation;
@property (nonatomic, readonly) bool inTemporaryLocation;
@property (nonatomic, readonly) PFUbiquityKnowledgeVector *knowledgeVector;
@property (nonatomic) bool loadUsingRetry;
@property (nonatomic, readonly) bool loadedComparisonMetadata;
@property (nonatomic, readonly) bool loadedDeletedObjectData;
@property (nonatomic, readonly) bool loadedImportMetadata;
@property (nonatomic, readonly) bool loadedInsertedObjectData;
@property (nonatomic, readonly) bool loadedUpdatedObjectData;
@property (nonatomic, readonly) NSString *localPeerID;
@property (nonatomic, readonly) NSString *modelVersionHash;
@property (nonatomic, readonly) PFUbiquitySaveSnapshot *saveSnapshot;
@property (nonatomic, readonly) PFUbiquityLocation *stagingTransactionLogLocation;
@property (nonatomic, readonly) NSString *storeName;
@property (nonatomic, readonly) PFUbiquityLocation *temporaryTransactionLogLocation;
@property (nonatomic, readonly) NSString *transactionLogFilename;
@property (nonatomic, readonly) PFUbiquityLocation *transactionLogLocation;
@property (nonatomic, readonly) int transactionLogType;
@property (nonatomic, readonly) NSNumber *transactionNumber;
@property (nonatomic) bool useTemporaryLogLocation;

+ (id)createDataFromExtendedAttrsForLog:(id)arg1 error:(id*)arg2;
+ (id)createTransactionLogFilenameForLogType:(int)arg1;
+ (id)generateTransactionLogFilename;
+ (bool)pruneTemporaryLogDirectoryForPeerRootLocation:(id)arg1 error:(id*)arg2;
+ (id)transactionLogFilenameUUID;
+ (int)transactionLogTypeFromLocation:(id)arg1;
+ (void)truncateLogFilesBeforeBaselineMetadata:(id)arg1 withLocalPeerID:(id)arg2 andUbiquityRootLocation:(id)arg3;
+ (void)truncateLogFilesForPeerID:(id)arg1 storeName:(id)arg2 modelVersionHash:(id)arg3 beforeKnowledgeVector:(id)arg4 withLocalPeerID:(id)arg5 andUbiquityRootLocation:(id)arg6;
+ (void)updateModificationTimesForLocation:(id)arg1;

- (void)cleanupExternalDataReferences;
- (id)currentLocation;
- (void)dealloc;
- (bool)deleteLogFileWithError:(id*)arg1;
- (id)description;
- (id)exportingPeerID;
- (id)fileProtectionOption;
- (id)generatePeerCodeKnowledgeVectorWithManagedObjectContext:(id)arg1;
- (bool)inPermanentLocation;
- (bool)inStagingLocation;
- (bool)inTemporaryLocation;
- (id)init;
- (id)initWithStoreName:(id)arg1 andSaveSnapshot:(id)arg2 andRootLocation:(id)arg3;
- (id)initWithTransactionLogLocation:(id)arg1 andLocalPeerID:(id)arg2;
- (id)initWithTransactionLogURL:(id)arg1 ubiquityRootLocation:(id)arg2 andLocalPeerID:(id)arg3;
- (id)knowledgeVector;
- (bool)loadComparisonMetadataWithError:(id*)arg1;
- (bool)loadContents:(id*)arg1;
- (bool)loadDeletedObjectsDataWithError:(id*)arg1;
- (bool)loadImportMetadataWithError:(id*)arg1;
- (bool)loadInsertedObjectsDataWithError:(id*)arg1;
- (id)loadPlistAtLocation:(id)arg1 withError:(id*)arg2;
- (bool)loadUpdatedObjectsDataWithError:(id*)arg1;
- (bool)loadUsingRetry;
- (bool)loadedComparisonMetadata;
- (bool)loadedDeletedObjectData;
- (bool)loadedImportMetadata;
- (bool)loadedInsertedObjectData;
- (bool)loadedUpdatedObjectData;
- (id)localPeerID;
- (id)modelVersionHash;
- (bool)moveFileToPermanentLocationWithError:(id*)arg1;
- (void)populateContents;
- (bool)releaseContents:(id*)arg1;
- (void)releaseDeletedObjects;
- (void)releaseInsertedObjects;
- (void)releaseUpdatedObjects;
- (bool)rewriteToDiskWithError:(id*)arg1;
- (id)saveSnapshot;
- (void)setLoadUsingRetry:(bool)arg1;
- (void)setUseTemporaryLogLocation:(bool)arg1;
- (id)stagingTransactionLogLocation;
- (id)storeName;
- (id)temporaryTransactionLogLocation;
- (id)transactionLogFilename;
- (id)transactionLogLocation;
- (int)transactionLogType;
- (id)transactionNumber;
- (bool)useTemporaryLogLocation;
- (bool)writeContentsOfZipArchive:(id)arg1 intoExtendedAttributesForFile:(id)arg2 error:(id*)arg3;
- (bool)writeToDiskWithError:(id*)arg1 andUpdateFilenameInTransactionEntries:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
