<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_PFUbiquityRecordsImporter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/_PFUbiquityRecordsImporter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface _PFUbiquityRecordsImporter : NSObject <NSManagedObjectContextFaultingDelegate, PFUbiquityBaselineRecoveryOperationDelegate, PFUbiquityBaselineRollOperationDelegate, PFUbiquityBaselineRollResponseOperationDelegate, _PFUbiquityRecordImportOperationDelegate> {
    bool  _allowBaselineRoll;
    bool  _importOnlyActiveStores;
    NSOperationQueue * _importQueue;
    bool  _isMonitoring;
    NSString * _localPeerID;
    NSObject<OS_dispatch_source> * _logRestartTimer;
    NSString * _modelVersionHash;
    unsigned long long  _numPendingNotifications;
    unsigned long long  _pendingImportOperationsCount;
    NSPersistentStoreCoordinator * _privatePSC;
    NSObject<OS_dispatch_queue> * _privateQueue;
    NSSQLCore * _privateStore;
    PFUbiquityRecordsImporterSchedulingContext * _schedulingContext;
    NSRecursiveLock * _schedulingLock;
    PFUbiquitySwitchboardCacheWrapper * _sideLoadCacheWrapper;
    NSString * _storeName;
    bool  _throttleNotifications;
    PFUbiquityLocation * _ubiquityRootLocation;
}

@property bool allowBaselineRoll;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property bool importOnlyActiveStores;
@property (readonly) NSOperationQueue *importQueue;
@property (readonly) bool isMonitoring;
@property (readonly) NSString *localPeerID;
@property NSObject<OS_dispatch_source> *logRestartTimer;
@property (nonatomic, readonly) NSPersistentStoreCoordinator *privatePSC;
@property (nonatomic, readonly) NSPersistentStore *privateStore;
@property (nonatomic, readonly) PFUbiquityRecordsImporterSchedulingContext *schedulingContext;
@property (nonatomic, readonly) NSRecursiveLock *schedulingLock;
@property (nonatomic, retain) PFUbiquitySwitchboardCacheWrapper *sideLoadCacheWrapper;
@property (readonly) NSString *storeName;
@property (readonly) Class superclass;
@property bool throttleNotifications;
@property (nonatomic, retain) PFUbiquityLocation *ubiquityRootLocation;

+ (id)addPrivateStore:(id)arg1 toCoordinator:(id)arg2 atURL:(id)arg3 error:(id*)arg4;
+ (void)afterDelay:(double)arg1 executeBlockOnRootQueue:(id /* block */)arg2;
+ (bool)canProcessContentsOfUbiquityRootPath:(id)arg1;
+ (id)createPrivateCoordinatorAndStoreForStore:(id)arg1 atURL:(id)arg2 error:(id*)arg3;
+ (id)createPrivateCoordinatorForStore:(id)arg1 error:(id*)arg2;
+ (void)executeBlockOnRootQueue:(id /* block */)arg1;
+ (void)initialize;

- (bool)allowBaselineRoll;
- (void)baselineRollOperationEncounteredAnInconsistentBaselineState:(id)arg1;
- (void)baselineRollOperationWasUnableToLockPersistentStore:(id)arg1;
- (bool)batchDownloadTransactionLogsAtLocations:(id)arg1 error:(id*)arg2;
- (bool)canProcessTransactionLogWithScore:(id)arg1 afterLogWithScore:(id)arg2;
- (bool)checkSchedulingContextForMissingLocalPeerOperations:(id)arg1 error:(id*)arg2;
- (long long)compareScoreKnowledgeVector:(id)arg1 withScoreDictionary:(id)arg2;
- (long long)context:(id)arg1 shouldHandleInaccessibleFault:(id)arg2 forObjectID:(id)arg3 andTrigger:(id)arg4;
- (id)createNewSetOfObjectIDsForCoordinator:(id)arg1 fromObjectIDs:(id)arg2;
- (id)createSortedOperationsArrayWithMetadata:(id)arg1 isFirstImport:(bool)arg2;
- (void)dealloc;
- (id)description;
- (bool)discoverAndImportAllAvailableLogs:(bool)arg1 error:(id*)arg2;
- (void)executeBlockOnPrivateQueue:(id /* block */)arg1;
- (bool)importOnlyActiveStores;
- (id)importQueue;
- (id)init;
- (id)initWithLocalPeerID:(id)arg1 andUbiquityRootLocation:(id)arg2;
- (id)initWithLocalPeerID:(id)arg1 ubiquityRootLocation:(id)arg2 storeName:(id)arg3 andPrivateStore:(id)arg4;
- (bool)isMonitoring;
- (bool)isPeerForked:(id)arg1 andLocalKV:(id)arg2;
- (id)localPeerID;
- (id)logRestartTimer;
- (void)metadataInconsistencyDetectedForStore:(id)arg1;
- (void)operation:(id)arg1 failedWithError:(id)arg2;
- (void)operationDidFinish:(id)arg1;
- (void)operationWasInterruptedDuringImport:(id)arg1;
- (void)postImportNotificationForStoreName:(id)arg1 andLocalPeerID:(id)arg2 withUserInfo:(id)arg3;
- (id)privatePSC;
- (id)privateStore;
- (void)recoveryOperation:(id)arg1 didReplaceLocalStoreFileWithBaseline:(id)arg2;
- (void)recoveryOperation:(id)arg1 encounteredAnError:(id)arg2 duringRecoveryOfBaseline:(id)arg3;
- (void)requestBaselineRollForStore:(id)arg1;
- (void)rollResponseOperation:(id)arg1 encounteredAnError:(id)arg2 whileTryingToAdoptBaseline:(id)arg3;
- (void)rollResponseOperation:(id)arg1 successfullyAdoptedBaseline:(id)arg2;
- (void)scheduleBaselineRecoveryOperationWithActiveBaselineOperation:(id)arg1;
- (void)scheduleBaselineRollResponseOperationForBaselineAtLocation:(id)arg1;
- (bool)schedulePendingLogs:(bool)arg1 error:(id*)arg2;
- (void)scheduleRecoveryTimer;
- (bool)scheduleTransactionLogOperations:(id)arg1 synchronous:(bool)arg2 error:(id*)arg3;
- (id)schedulingContext;
- (id)schedulingLock;
- (void)setAllowBaselineRoll:(bool)arg1;
- (void)setImportOnlyActiveStores:(bool)arg1;
- (void)setLogRestartTimer:(id)arg1;
- (void)setSideLoadCacheWrapper:(id)arg1;
- (void)setThrottleNotifications:(bool)arg1;
- (void)setUbiquityRootLocation:(id)arg1;
- (bool)shouldThrottleNotificationsWithOperation:(id)arg1;
- (id)sideLoadCacheWrapper;
- (bool)startMonitor:(id*)arg1;
- (id)storeName;
- (void)tearDown;
- (bool)throttleNotifications;
- (id)ubiquityRootLocation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
