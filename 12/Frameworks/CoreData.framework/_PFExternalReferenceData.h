<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_PFExternalReferenceData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/_PFExternalReferenceData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface _PFExternalReferenceData : NSData {
    unsigned long long  _bytesLengthForExternalReference;
    unsigned long long  _bytesLengthForStore;
    void * _bytesPtrForExternalReference;
    void * _bytesPtrForStore;
    struct __externalDataFlags { 
        unsigned int _isStoredExternally : 1; 
        unsigned int _hasMappedData : 1; 
        unsigned int _cleanupOnDealloc : 1; 
        unsigned int _dataProtectionLevel : 3; 
        unsigned int _isStoredUbiquitously : 1; 
        unsigned int _createdByUbiquityImport : 1; 
        unsigned int _reserved : 24; 
    }  _externalDataFlags;
    NSString * _externalReferenceLocation;
    NSData * _originalData;
    NSString * _safeguardLocation;
    id  _ubiquitousLocation;
}

+ (bool)_releaseReservedMapFileDescriptor;
+ (bool)_reserveMapFileDescriptor;
+ (bool)_updateFileDescriptorsInUseReserveNew:(bool)arg1;
+ (Class)classForKeyedUnarchiver;

- (id)UUID;
- (bool)_attemptToMapData:(id*)arg1;
- (unsigned long long)_bytesLengthForExternalReference;
- (unsigned long long)_bytesLengthForStore;
- (const void*)_bytesPtrForExternalReference;
- (const void*)_bytesPtrForStore;
- (bool)_createdByUbiquityImport;
- (void)_deleteExternalReferenceFromPermanentLocation;
- (void)_doCleanup;
- (id)_exceptionForReadError:(id)arg1;
- (const char *)_externalReferenceLocation;
- (id)_externalReferenceLocationString;
- (bool)_isEqualHelper:(id)arg1;
- (void)_moveExternalReferenceToPermanentLocation;
- (id)_originalData;
- (const void*)_retrieveExternalData;
- (const char *)_safeguardLocation;
- (id)_safeguardLocationString;
- (void)_setBytesForExternalReference:(const void*)arg1;
- (void)_writeExternalReferenceToInterimLocation;
- (const void*)bytes;
- (Class)classForArchiver;
- (Class)classForCoder;
- (id)constructSafeguardStringFromString:(id)arg1;
- (id)copy;
- (id)databaseValue;
- (void)dealloc;
- (id)description;
- (void)doCleanupOnDealloc;
- (id)externalReferenceLocationString;
- (id)filename;
- (void)finalize;
- (void)getBytes:(void*)arg1 length:(unsigned long long)arg2;
- (void)getBytes:(void*)arg1 range:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)hasExternalReferenceContent;
- (id)initForExternalLocation:(id)arg1 safeguardLocation:(id)arg2 data:(id)arg3 protectionLevel:(int)arg4;
- (id)initForUbiquityDictionary:(id)arg1 store:(id)arg2;
- (id)initWithStoreBytes:(const void*)arg1 length:(unsigned long long)arg2 externalLocation:(id)arg3 safeguardLocation:(id)arg4 protectionLevel:(int)arg5;
- (id)initWithStoreBytes:(const void*)arg1 length:(unsigned long long)arg2 externalLocation:(id)arg3 safeguardLocation:(id)arg4 protectionLevel:(int)arg5 ubiquitousLocation:(id)arg6;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToData:(id)arg1;
- (unsigned long long)length;
- (id)mutableCopy;
- (int)preferredProtectionLevel;
- (id)subdataWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
