<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_PFUbiquityRecordImportOperation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/_PFUbiquityRecordImportOperation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface _PFUbiquityRecordImportOperation : PFUbiquityImportOperation <NSManagedObjectContextFaultingDelegate> {
    NSMutableSet * _deletedObjectIDs;
    PFUbiquitySwitchboardEntry * _entry;
    PFUbiquityImportContext * _importContext;
    PFUbiquityKnowledgeVector * _initialStoreKnowledgeVector;
    NSMutableSet * _insertedObjectIDs;
    bool  _lockedExistingCoord;
    PFUbiquityKnowledgeVector * _logScore;
    NSManagedObjectContext * _moc;
    NSError * _operationError;
    NSPersistentStoreCoordinator * _psc;
    NSMutableDictionary * _relationshipsToObjectIDsToCheck;
    NSMutableDictionary * _resolvedConflicts;
    bool  _success;
    bool  _transactionDidRollback;
    PFUbiquityTransactionLog * _transactionLog;
    NSMutableSet * _updatedObjectIDs;
    PFUbiquityKnowledgeVector * _updatedStoreKnowledgeVector;
    bool  _wroteKV;
}

@property (readonly, copy) NSString *debugDescription;
@property NSObject<_PFUbiquityRecordImportOperationDelegate> *delegate;
@property (nonatomic, readonly) NSMutableSet *deletedObjectIDs;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PFUbiquityImportContext *importContext;
@property (readonly) PFUbiquityKnowledgeVector *initialStoreKnowledgeVector;
@property (nonatomic, readonly) NSMutableSet *insertedObjectIDs;
@property bool lockedExistingCoord;
@property (nonatomic, retain) PFUbiquityKnowledgeVector *logScore;
@property (readonly) NSManagedObjectContext *moc;
@property (nonatomic, readonly) NSError *operationError;
@property (readonly) NSPersistentStoreCoordinator *psc;
@property (nonatomic, readonly) NSMutableDictionary *resolvedConflicts;
@property (nonatomic, readonly) bool success;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool transactionDidRollBack;
@property (nonatomic, readonly) PFUbiquityTransactionLog *transactionLog;
@property (nonatomic, readonly) NSMutableSet *updatedObjectIDs;
@property (nonatomic, retain) PFUbiquityKnowledgeVector *updatedStoreKnowledgeVector;
@property (nonatomic, readonly) bool wroteKV;

- (bool)applyChangesFromStoreSaveSnapshot:(id)arg1 withImportContext:(id)arg2 withError:(id*)arg3;
- (void)cancel;
- (long long)context:(id)arg1 shouldHandleInaccessibleFault:(id)arg2 forObjectID:(id)arg3 andTrigger:(id)arg4;
- (id)copy;
- (void)dealloc;
- (id)delegate;
- (id)deletedObjectIDs;
- (id)description;
- (bool)fillManagedObject:(id)arg1 withGlobalID:(id)arg2 fromUbiquityDictionary:(id)arg3 missingObjects:(id)arg4 importContext:(id)arg5 withError:(id*)arg6;
- (id)importContext;
- (id)init;
- (id)initWithTransactionLog:(id)arg1 persistentStore:(id)arg2 andLocalPeerID:(id)arg3;
- (id)initialStoreKnowledgeVector;
- (id)insertedObjectIDs;
- (bool)lockedExistingCoord;
- (id)logScore;
- (void)main;
- (id)moc;
- (void)notifyDelegateOfError:(id)arg1;
- (id)operationError;
- (bool)processObjects:(id)arg1 withState:(int)arg2 andImportContext:(id)arg3 outError:(id*)arg4;
- (id)psc;
- (id)resolvedConflicts;
- (void)respondToStoreTransactionStateChangeNotification:(id)arg1;
- (id)retainedDelegate;
- (void)setDelegate:(id)arg1;
- (void)setImportContext:(id)arg1;
- (void)setLockedExistingCoord:(bool)arg1;
- (void)setLogScore:(id)arg1;
- (void)setUpdatedStoreKnowledgeVector:(id)arg1;
- (bool)success;
- (bool)transactionDidRollBack;
- (id)transactionLog;
- (id)updatedObjectIDs;
- (id)updatedStoreKnowledgeVector;
- (bool)wroteKV;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
