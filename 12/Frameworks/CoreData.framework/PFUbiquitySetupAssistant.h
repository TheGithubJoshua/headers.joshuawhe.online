<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PFUbiquitySetupAssistant.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/PFUbiquitySetupAssistant.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface PFUbiquitySetupAssistant : NSObject {
    bool  _abortSetup;
    NSURL * _actualStoreFileURL;
    PFUbiquityBaseline * _baseline;
    bool  _baselineFileExistsInCloud;
    PFUbiquityKnowledgeVector * _baselineKV;
    bool  _cacheFilePresenterForUbiquityRoot;
    PFUbiquityContainerIdentifier * _containerIdentifier;
    bool  _didBaselineCopy;
    bool  _didMigrateBaseline;
    NSMutableDictionary * _entityNameToGidSet;
    PFUbiquitySwitchboardEntry * _entry;
    bool  _failSetup;
    NSError * _failSetupError;
    NSMutableDictionary * _gidToRid;
    bool  _gotAccountChange;
    bool  _gotExportNotification;
    bool  _hasContainerUUID;
    bool  _hasContainerUUIDInStore;
    bool  _hasLocalTransactionLogs;
    bool  _hasMigrationOptions;
    bool  _hasStoreMetadataEntry;
    bool  _hasStoreMetadataFile;
    bool  _hasUploadingBaseline;
    bool  _haveExistingUUIDMappings;
    int  _initialSyncComplete;
    NSObject<OS_dispatch_semaphore> * _initialSyncSemaphore;
    NSString * _localPeerID;
    PFUbiquityPeerReceipt * _localPeerReceipt;
    PFUbiquityPeerState * _localPeerState;
    PFUbiquityLocation * _localRootLocation;
    NSMutableSet * _logLocationsExportedDuringSideLoad;
    PFUbiquityKnowledgeVector * _metaKV;
    PFUbiquityMigrationAssistant * _migrationAssistant;
    PFUbiquityMigrationManager * _migrationManager;
    NSString * _modelVersionHash;
    bool  _monitorUploadingBaselineAsync;
    bool  _needsMetadataRecovery;
    bool  _needsMetadataWrite;
    bool  _notifyAboutSetupProgress;
    long long  _numSetupTries;
    NSMutableDictionary * _options;
    NSString * _preStoreContainerUUID;
    NSString * _previousModelVersionHash;
    NSPersistentStoreCoordinator * _psc;
    NSMutableArray * _queryLocations;
    bool  _reapUbiquitousLogs;
    PFUbiquityKnowledgeVector * _receiptKV;
    bool  _replayLogsSynchronously;
    bool  _respondToBaselineRoll;
    unsigned long long  _retryDelaySec;
    bool  _seedStore;
    NSURL * _seedStoreURL;
    int  _sideLoadLock;
    _PFUbiquityStack * _stack;
    NSPersistentStore * _store;
    bool  _storeFileExists;
    bool  _storeFileIsReadOnly;
    PFUbiquityKnowledgeVector * _storeKV;
    PFUbiquityStoreMetadata * _storeMetadata;
    NSMutableDictionary * _storeMetadataDict;
    NSString * _storeType;
    NSURL * _storeURL;
    bool  _storeWasMigrated;
    NSString * _ubiquityContainerIdentifier;
    bool  _ubiquityEnabled;
    <NSObject><NSCopying><NSCoding> * _ubiquityIdentityToken;
    NSString * _ubiquityName;
    PFUbiquityLocation * _ubiquityRootLocation;
    NSString * _ubiquityRootSubpath;
    NSURL * _ubiquityRootURL;
    bool  _useLocalAccount;
    bool  _usedExistingUUIDMapping;
    bool  _votedOffIsland;
}

@property (nonatomic) bool abortSetup;
@property (nonatomic, readonly) NSURL *actualStoreFileURL;
@property (nonatomic) bool cacheFilePresenterForUbiquityRoot;
@property (nonatomic, readonly) PFUbiquityContainerIdentifier *containerIdentifier;
@property (nonatomic) bool failSetup;
@property (nonatomic, retain) NSError *failSetupError;
@property (nonatomic, readonly) NSString *localPeerID;
@property (nonatomic, readonly) PFUbiquityLocation *localRootLocation;
@property (nonatomic, readonly) bool needsMetadataRecovery;
@property (nonatomic, readonly) NSDictionary *options;
@property (nonatomic) unsigned long long retryDelaySec;
@property (nonatomic, readonly) PFUbiquityKnowledgeVector *storeKV;
@property (nonatomic) bool storeWasMigrated;
@property (nonatomic, readonly) bool ubiquityEnabled;
@property (nonatomic, readonly) PFUbiquityLocation *ubiquityRootLocation;
@property (nonatomic, readonly) NSURL *ubiquityRootURL;
@property (nonatomic, readonly) bool useLocalAccount;

+ (void)cleanUserDefaultsForStore:(id)arg1;
+ (id)createActualStoreURLForStoreURL:(id)arg1 localPeerID:(id)arg2 containerIdentifier:(id)arg3 andStoreName:(id)arg4;
+ (id)createBaselineFromMostRecentLocation:(id)arg1 localPeerID:(id)arg2 error:(id*)arg3;
+ (id)createDefaultLocalPeerID;
+ (bool)doBasicSanityCheckForUbiquityRootURL:(id)arg1 withError:(id*)arg2;
+ (id)findContainerIDForToken:(id)arg1 storeName:(id)arg2 haveExistingMappings:(bool*)arg3;
+ (id)generateMachineUUIDString;
+ (void)removeUbiquityMetadataFromStore:(id)arg1;
+ (void)setContainerIdentifierUUID:(id)arg1 forIdentityToken:(id)arg2 forStoreName:(id)arg3;
+ (bool)ubiquityMetadataTablesPresentInStore:(id)arg1;

- (void)_setUbiquityRootLocation:(id)arg1 storeName:(id)arg2 localPeerID:(id)arg3 andModelVersionHash:(id)arg4;
- (bool)abortSetup;
- (id)actualStoreFileURL;
- (bool)attemptMetadataRecoveryForStore:(id)arg1 error:(id*)arg2;
- (bool)cacheFilePresenterForUbiquityRoot;
- (bool)canReadFromUbiquityRootLocation:(id*)arg1;
- (bool)checkAndPerformMigrationForStore:(id)arg1 error:(id*)arg2;
- (bool)checkKnowledgeVectorsAndBaselineWithStore:(id)arg1 error:(id*)arg2;
- (bool)cleanUpFromFailedSetup:(id*)arg1;
- (id)containerIdentifier;
- (void)coordinatorWillRemoveStore:(id)arg1;
- (id)createSetOfLocalLogLocations:(id*)arg1;
- (void)dealloc;
- (bool)detectAndFixForkedContainer:(bool)arg1 store:(id)arg2 error:(id*)arg3;
- (bool)doPostValidationInit:(id*)arg1;
- (void)exportedLog:(id)arg1;
- (bool)failSetup;
- (id)failSetupError;
- (bool)finishSetupForStore:(id)arg1 error:(id*)arg2;
- (void)finishSetupWithRetry:(id)arg1;
- (void)fixdictionary:(id)arg1 withDeletes:(id)arg2;
- (id)getCurrentUbiquityIdentityToken;
- (id)init;
- (id)initWithPersistentStoreCoordinator:(id)arg1 andStoreOptions:(id)arg2 forPersistentStoreOfType:(id)arg3 atURL:(id)arg4;
- (void)initialSyncComplete;
- (bool)initializeBaselineForStore:(id)arg1 error:(id*)arg2;
- (bool)initializeContainerIdentifierWithStore:(id)arg1 error:(id*)arg2;
- (bool)initializeReceiptFile:(id*)arg1;
- (bool)initializeStack:(id*)arg1;
- (bool)initializeStoreKnowledgeVectorFromStore:(id)arg1 error:(id*)arg2;
- (void)insertEntriesInDicitonary:(id)arg1 inBigramManagedObjectContext:(id)arg2;
- (void)insertEntriesInDicitonary:(id)arg1 inLearningDictionaryJPManagedObjectContext:(id)arg2;
- (void)insertEntriesInDicitonary:(id)arg1 inLearningDictionaryManagedObjectContext:(id)arg2;
- (void)insertEntriesInDicitonary:(id)arg1 inUserDictionaryManagedObjectContext:(id)arg2;
- (bool)isInitialSyncComplete;
- (id)localPeerID;
- (id)localRootLocation;
- (id)longDescription;
- (bool)migrateMetadataRoot:(id*)arg1;
- (id)migrationAssistant;
- (bool)moveLocalLogFilesToUbiquityLocation:(id*)arg1;
- (bool)needsMetadataRecovery;
- (id)options;
- (bool)performCoordinatorPostStoreSetup:(id)arg1 error:(id*)arg2;
- (bool)pruneStagingDirectoryForStore:(id)arg1 error:(id*)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withBigramSnapshot:(id)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withPhraseLearningJPSnapshot:(id)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withPhraseLearningSnapshot:(id)arg2;
- (void)removeEntriesFromDictionary:(id)arg1 withShortcutSnapshot:(id)arg2;
- (bool)respondToBaselineRoll:(id*)arg1;
- (unsigned long long)retryDelaySec;
- (bool)rewriteTransactionLogs:(id)arg1 toMatchStore:(id)arg2 error:(id*)arg3;
- (bool)seedStore:(id)arg1 error:(id*)arg2;
- (void)setAbortSetup:(bool)arg1;
- (void)setCacheFilePresenterForUbiquityRoot:(bool)arg1;
- (void)setFailSetup:(bool)arg1;
- (void)setFailSetupError:(id)arg1;
- (void)setRetryDelaySec:(unsigned long long)arg1;
- (void)setStoreWasMigrated:(bool)arg1;
- (bool)sideLoadStore:(id)arg1 error:(id*)arg2;
- (id)storeKV;
- (bool)storeWasMigrated;
- (bool)tryToReplaceLocalStore:(id)arg1 withStoreSideLoadedByImporter:(id)arg2;
- (bool)ubiquityEnabled;
- (void)ubiquityIdentityTokenChanged:(id)arg1;
- (id)ubiquityRootLocation;
- (id)ubiquityRootURL;
- (void)updateDictionary:(id)arg1 withBigramSnapshot:(id)arg2;
- (void)updateDictionary:(id)arg1 withPhraseLearningJPSnapshot:(id)arg2;
- (void)updateDictionary:(id)arg1 withPhraseLearningSnapshot:(id)arg2;
- (void)updateDictionary:(id)arg1 withShortcutSnapshot:(id)arg2;
- (bool)useLocalAccount;
- (bool)validateOptionsWithError:(id*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
