<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_NSSQLiteStoreMigrator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/_NSSQLiteStoreMigrator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface _NSSQLiteStoreMigrator : NSObject {
    NSSQLiteAdapter * _adapter;
    NSMutableDictionary * _addedEntityMigrations;
    NSMutableDictionary * _attributeExtensionsToUpdate;
    NSSQLiteConnection * _connection;
    NSMutableDictionary * _copiedEntityMigrations;
    NSSQLModel * _dstModel;
    NSArray * _existingTableNames;
    bool  _hasPKTableChanges;
    NSMutableDictionary * _historyMigrationPropertyDataForEntityCache;
    NSMutableArray * _indexesToCreate;
    NSMutableArray * _indexesToDrop;
    NSMappingModel * _mappingModel;
    NSMutableArray * _pkTableUpdateStatements;
    NSMutableDictionary * _reindexedEntities;
    NSMutableDictionary * _reindexedPropertiesByEntity;
    NSMutableDictionary * _removedEntityMigrations;
    NSMutableDictionary * _sourceToDestinationEntityMap;
    NSSQLModel * _srcModel;
    NSSQLCore * _store;
    NSArray * _tableGenerationSQL;
    NSMutableDictionary * _tableMigrationDescriptionsByEntity;
    NSMutableDictionary * _transformedEntityMigrations;
}

@property (nonatomic, readonly) NSSQLiteAdapter *adapter;
@property (nonatomic, readonly) NSSQLModel *dstModel;
@property (nonatomic, retain) NSMutableDictionary *historyMigrationCache;
@property (nonatomic, readonly) NSSQLModel *srcModel;

+ (bool)_annotatesMigrationMetadata;
+ (void)_setAnnotatesMigrationMetadata:(bool)arg1;

- (void)_addEntityMigration:(id)arg1 toTableMigrationForRootEntity:(id)arg2 tableMigrationType:(int)arg3;
- (void)_addReindexedProperty:(id)arg1 toSetForEntity:(id)arg2;
- (long long)_countNullsInColumn:(id)arg1 forEntity:(id)arg2;
- (long long)_countUnreferencedPrimaryKeysForEntity:(id)arg1 inForeignKeyColumnName:(id)arg2 fromTable:(id)arg3;
- (void)_determineAncillaryModelIndexesForMigration;
- (void)_determineAttributeTriggerToMigrateForAttributeNamed:(id)arg1 withSourceEntity:(id)arg2 andDestinationEntity:(id)arg3;
- (void)_determineIndexesToMigrateForSourceEntity:(id)arg1 andDestinationEntity:(id)arg2;
- (void)_determinePropertyDependenciesOnIDForEntity:(id)arg1;
- (void)_determineRTreeExtensionsToMigrateForAttributeNamed:(id)arg1 withSourceEntity:(id)arg2 andDestinationEntity:(id)arg3;
- (void)_determineReindexedEntitiesAndAffectedProperties;
- (void)_determineUniquenessConstraintsToMigrateForSourceEntity:(id)arg1 andDestinationEntity:(id)arg2;
- (void)_disconnect;
- (id /* block */)_indexMigrationBlockForSourceEntity:(id)arg1 andDestinationEntity:(id)arg2;
- (id)_originalRootsForAddedEntity:(id)arg1;
- (void)_populateEntityMigrationDescriptionsAndEntityMap;
- (void)_populateTableMigrationDescriptions;
- (bool)_sourceTableIsClean:(id)arg1;
- (id)adapter;
- (bool)clearTombstoneColumnsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)createEntityMigrationStatements;
- (id)createStatementsForUpdatingEntityKeys;
- (void)dealloc;
- (bool)deleteStatementsForHistory;
- (id)dstModel;
- (id)entityMigrationDescriptionForEntity:(id)arg1;
- (void)generatePKTableUpdateStatements;
- (id)historyMigrationCache;
- (id)initWithStore:(id)arg1 destinationModel:(id)arg2 mappingModel:(id)arg3;
- (bool)performMigration:(id*)arg1;
- (void)setHistoryMigrationCache:(id)arg1;
- (bool)shiftTombstones;
- (id)srcModel;
- (id)tableMigrationDescriptionForEntity:(id)arg1;
- (id)updateStatementsForHistoryChanges;
- (bool)validateMandatoryAttribute:(id)arg1 onEntity:(id)arg2 error:(id*)arg3;
- (bool)validateMandatoryRelationship:(id)arg1 onEntity:(id)arg2 error:(id*)arg3;
- (bool)validateMigratedDataFromEntityMapping:(id)arg1 error:(id*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
