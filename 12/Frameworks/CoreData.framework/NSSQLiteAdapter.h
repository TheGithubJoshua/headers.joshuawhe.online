<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSSQLiteAdapter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/NSSQLiteAdapter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface NSSQLiteAdapter : NSObject {
    struct __CFDictionary { } * _cachedDeleteTriggersByEntity;
    int  _lock;
    NSSQLModel * _model;
    NSSQLCore * _sqlCore;
}

+ (id)generateStatementForCheckingMulticolumnConstraint:(id)arg1 onObjects:(id)arg2 usingSQLCore:(id)arg3;
+ (id)generateStatementForCheckingUniqueAttributesOnObjects:(id)arg1 usingSQLCore:(id)arg2;
+ (id)generateSubselectForColumn:(id)arg1 givenObjects:(id)arg2;

- (void)_cacheTriggers:(id)arg1 forEntity:(id)arg2;
- (id)_cachedTriggersForEntity:(id)arg1;
- (id)_generateExternalDataRefStatementsForEntities:(id)arg1 inRequestContext:(id)arg2;
- (void)_generateFragmentsForEntity:(id)arg1 inArray:(id)arg2;
- (id)_statementForFetchRequestContext:(id)arg1 ignoreInheritance:(bool)arg2 countOnly:(bool)arg3 nestingLevel:(unsigned int)arg4;
- (void)_useModel:(id)arg1;
- (id)createCleanupSQLForRelationship:(id)arg1 existing:(struct __CFDictionary { }*)arg2 correlationTableTriggers:(struct __CFDictionary { }*)arg3 batchHistory:(struct __CFDictionary { }*)arg4 error:(id*)arg5;
- (id)createSQLStatementsForRTreeTriggersForLocationAttribute:(id)arg1 withSQLEntity:(id)arg2 existingRtreeTables:(id)arg3;
- (id)createSQLStatementsForTriggerAttribute:(id)arg1 withSQLEntity:(id)arg2;
- (void)dealloc;
- (id)generateBatchDeleteUpdateHistoryStatementEntity:(id)arg1 andRelationship:(id)arg2;
- (id)generateBatchDeleteUpdateHistoryStatementEntity:(id)arg1 andRelationship:(id)arg2 useInverse:(bool)arg3;
- (bool)generateBatchDeleteUpdateHistoryTriggerForEntity:(id)arg1 andRelationship:(id)arg2 batchHistory:(struct __CFDictionary { }*)arg3 error:(id*)arg4;
- (bool)generateCorrelationTableTriggerStatementsForRelationship:(id)arg1 existing:(struct __CFDictionary { }*)arg2 correlationTableTriggers:(struct __CFDictionary { }*)arg3 error:(id*)arg4;
- (id)generateDeleteHistoryTriggerForEntity:(id)arg1 error:(id*)arg2;
- (id)generateDeleteStatementsForRequest:(id)arg1 error:(id*)arg2;
- (id)generateSQLStatmentForSourcesAndOrderKeysForDestination:(id)arg1 inManyToMany:(id)arg2;
- (id)generateSQLStatmentForSourcesAndOrderKeysForDestination:(id)arg1 inToMany:(id)arg2;
- (bool)generateTriggerForEntity:(id)arg1 alreadyCreated:(struct __CFDictionary { }*)arg2 correlations:(struct __CFDictionary { }*)arg3 batchHistory:(struct __CFDictionary { }*)arg4 fragments:(id)arg5 error:(id*)arg6;
- (id)generateTriggerStatementsForEntity:(id)arg1 usingRelationshipCleanupSQL:(id)arg2 error:(id*)arg3;
- (id)initWithSQLCore:(id)arg1;
- (id)newComplexPrimaryKeyUpdateStatementForEntity:(id)arg1;
- (id)newConstrainedValuesUpdateStatementWithRow:(id)arg1;
- (id)newCopyAndInsertStatementForManyToMany:(id)arg1 toManyToMany:(id)arg2 intermediateTableName:(id)arg3 invertColumns:(bool)arg4;
- (id)newCorrelationDeleteStatementForRelationship:(id)arg1;
- (id)newCorrelationInsertStatementForRelationship:(id)arg1;
- (id)newCorrelationMasterReorderStatementForRelationship:(id)arg1;
- (id)newCorrelationMasterReorderStatementPart2ForRelationship:(id)arg1;
- (id)newCorrelationReorderStatementForRelationship:(id)arg1;
- (id)newCountStatementWithFetchRequestContext:(id)arg1;
- (id)newCreateBinaryIndexStatementsForIndex:(id)arg1 onEntity:(id)arg2;
- (id)newCreateIndexStatementForColumn:(id)arg1;
- (id)newCreateIndexStatementForColumnWithName:(id)arg1 inTableWithName:(id)arg2;
- (id)newCreateIndexStatementForColumns:(id)arg1 name:(id)arg2;
- (id)newCreateIndexStatementForCorrelationTable:(id)arg1;
- (id)newCreateIndexStatementsForEntity:(id)arg1;
- (id)newCreateIndexStatementsForEntity:(id)arg1 defaultIndicesOnly:(bool)arg2;
- (id)newCreatePrimaryKeyTableStatement;
- (id)newCreateRTreeIndexStatementsForIndex:(id)arg1 onEntity:(id)arg2;
- (id)newCreateTableStatementForEntity:(id)arg1;
- (id)newCreateTableStatementForManyToMany:(id)arg1;
- (id)newCreateTempTableStatementForEntity:(id)arg1 withAttributesToConstrain:(id)arg2;
- (id)newCreateTriggersForEntity:(id)arg1 existingRtreeTables:(id)arg2;
- (id)newDeleteStatementWithRow:(id)arg1;
- (id)newDropTableStatementForTableNamed:(id)arg1;
- (id)newDropTableStatementOrFailForTableNamed:(id)arg1;
- (id)newGeneratorWithStatement:(id)arg1;
- (id)newInsertStatementWithRow:(id)arg1;
- (id)newPrimaryKeyInitializeStatementForEntity:(id)arg1 withInitialMaxPK:(long long)arg2;
- (id)newRenameTableStatementFrom:(id)arg1 to:(id)arg2;
- (id)newRenameTableStatementFromManyToMany:(id)arg1 toManyToMany:(id)arg2 orToRandomSpot:(id)arg3;
- (id)newSelectStatementWithFetchRequest:(id)arg1 ignoreInheritance:(bool)arg2;
- (id)newSelectStatementWithFetchRequestContext:(id)arg1 ignoreInheritance:(bool)arg2;
- (id)newSimplePrimaryKeyUpdateStatementForEntity:(id)arg1;
- (id)newStatementWithEntity:(id)arg1;
- (id)newStatementWithSQLString:(id)arg1;
- (id)newStatementWithoutEntity;
- (id)newUpdateStatementWithRow:(id)arg1 originalRow:(id)arg2 withMask:(struct __CFBitVector { }*)arg3;
- (id)sqlCore;
- (unsigned char)sqlTypeForExpressionConstantValue:(id)arg1;
- (id)sqliteVersion;
- (id)typeStringForColumn:(id)arg1;
- (id)typeStringForSQLType:(unsigned char)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
