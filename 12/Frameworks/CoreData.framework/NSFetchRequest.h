<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSFetchRequest.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreData.framework/NSFetchRequest.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreData.framework/CoreData (866.6)
 */

@interface NSFetchRequest : NSPersistentStoreRequest <NSCoding, NSSecureCoding> {
    id * _additionalPrivateIvars;
    unsigned long long  _batchSize;
    NSEntityDescription * _entity;
    unsigned long long  _fetchLimit;
    struct _fetchRequestFlags { 
        unsigned int distinctValuesOnly : 1; 
        unsigned int includesSubentities : 1; 
        unsigned int includesPropertyValues : 1; 
        unsigned int resultType : 3; 
        unsigned int returnsObjectsAsFaults : 1; 
        unsigned int excludePendingChanges : 1; 
        unsigned int isInUse : 1; 
        unsigned int entityIsName : 1; 
        unsigned int refreshesRefetched : 1; 
        unsigned int propertiesValidated : 1; 
        unsigned int disableCaching : 1; 
        unsigned int _RESERVED : 19; 
    }  _flags;
    NSArray * _groupByProperties;
    NSPredicate * _havingPredicate;
    NSPredicate * _predicate;
    NSArray * _relationshipKeyPathsForPrefetching;
    NSArray * _sortDescriptors;
    NSArray * _valuesToFetch;
}

@property (nonatomic, retain) NSArray *affectedStores;
@property (nonatomic, retain) NSEntityDescription *entity;
@property (nonatomic, readonly) NSString *entityName;
@property (nonatomic) unsigned long long fetchBatchSize;
@property (nonatomic) unsigned long long fetchLimit;
@property (nonatomic) unsigned long long fetchOffset;
@property (nonatomic, retain) NSPredicate *havingPredicate;
@property (nonatomic) bool includesPendingChanges;
@property (nonatomic) bool includesPropertyValues;
@property (nonatomic) bool includesSubentities;
@property (nonatomic, retain) NSPredicate *predicate;
@property (nonatomic, copy) NSArray *propertiesToFetch;
@property (nonatomic, copy) NSArray *propertiesToGroupBy;
@property (nonatomic, copy) NSArray *relationshipKeyPathsForPrefetching;
@property (nonatomic) unsigned long long resultType;
@property (nonatomic) bool returnsDistinctResults;
@property (nonatomic) bool returnsObjectsAsFaults;
@property (nonatomic) bool shouldRefreshRefetchedObjects;
@property (nonatomic, retain) NSArray *sortDescriptors;

+ (id)_newDenormalizedFetchProperties:(id)arg1;
+ (bool)accessInstanceVariablesDirectly;
+ (id)decodeFromXPCArchive:(id)arg1 withContext:(id)arg2;
+ (id)fetchRequestWithEntityName:(id)arg1;
+ (void)initialize;
+ (bool)supportsSecureCoding;

- (id)_XPCEncodedFlags;
- (id)_asyncResultHandle;
- (id)_copyForDirtyContext;
- (bool)_disablePersistentStoreResultCaching;
- (void)_incrementInUseCounter;
- (bool)_isCachingFetchRequest;
- (bool)_isEditable;
- (id)_newNormalizedFetchProperties:(id)arg1;
- (id)_newValidatedProperties:(id)arg1 groupBy:(bool)arg2 error:(id*)arg3;
- (void)_resolveEntityWithContext:(id)arg1;
- (void)_setAsyncResultHandle:(id)arg1;
- (void)_setDisablePersistentStoreResultCaching:(bool)arg1;
- (void)_setFlagsFromXPCEncoding:(id)arg1;
- (void)_throwIfNotEditable;
- (void)_writeIntoData:(id)arg1 propertiesDict:(id)arg2 uniquedPropertyNames:(id)arg3 uniquedStrings:(id)arg4 uniquedData:(id)arg5 uniquedMappings:(id)arg6 entities:(id)arg7;
- (id)affectedStores;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)encodeForXPC;
- (void)encodeWithCoder:(id)arg1;
- (id)entity;
- (id)entityName;
- (id)execute:(id*)arg1;
- (unsigned long long)fetchBatchSize;
- (unsigned long long)fetchLimit;
- (unsigned long long)fetchOffset;
- (id)groupByProperties;
- (bool)hasChanges;
- (unsigned long long)hash;
- (id)havingPredicate;
- (bool)includesPendingChanges;
- (bool)includesPropertyValues;
- (bool)includesSubentities;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithEntityName:(id)arg1;
- (bool)isEqual:(id)arg1;
- (id)predicate;
- (id)propertiesToFetch;
- (id)propertiesToGroupBy;
- (id)relationshipKeyPathsForPrefetching;
- (unsigned long long)requestType;
- (unsigned long long)resultType;
- (bool)returnsDistinctResults;
- (bool)returnsObjectsAsFaults;
- (void)setAffectedStores:(id)arg1;
- (void)setEntity:(id)arg1;
- (void)setFetchBatchSize:(unsigned long long)arg1;
- (void)setFetchLimit:(unsigned long long)arg1;
- (void)setFetchOffset:(unsigned long long)arg1;
- (void)setGroupByProperties:(id)arg1;
- (void)setHavingPredicate:(id)arg1;
- (void)setIncludesPendingChanges:(bool)arg1;
- (void)setIncludesPropertyValues:(bool)arg1;
- (void)setIncludesSubentities:(bool)arg1;
- (void)setPredicate:(id)arg1;
- (void)setPropertiesToFetch:(id)arg1;
- (void)setPropertiesToGroupBy:(id)arg1;
- (void)setRelationshipKeyPathsForPrefetching:(id)arg1;
- (void)setResultType:(unsigned long long)arg1;
- (void)setReturnsDistinctResults:(bool)arg1;
- (void)setReturnsObjectsAsFaults:(bool)arg1;
- (void)setShouldRefreshRefetchedObjects:(bool)arg1;
- (void)setSortDescriptors:(id)arg1;
- (bool)shouldRefreshRefetchedObjects;
- (id)sortDescriptors;
- (id)stores;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
