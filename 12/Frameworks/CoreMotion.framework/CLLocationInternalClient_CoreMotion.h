<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CLLocationInternalClient_CoreMotion.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreMotion.framework/CLLocationInternalClient_CoreMotion.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion (2245.16.14)
 */

@interface CLLocationInternalClient_CoreMotion : NSObject {
    NSXPCConnection * _connection;
}

+ (id)sharedServiceClient;

- (unsigned char)clearLocationAuthorizations;
- (unsigned char)compassCalibrationDatabaseGetBias:(struct { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; } x1; int x2; }*)arg1 magneticField:(struct { float x1; float x2; float x3; })arg2 acceleration:(struct { float x1; float x2; float x3; })arg3;
- (unsigned char)compassCalibrationDatabaseSetBias:(struct { float x1; float x2; float x3; })arg1 magneticField:(struct { float x1; float x2; float x3; })arg2 level:(int)arg3 magnitude:(float)arg4 inclination:(float)arg5;
- (unsigned char)configure:(struct { bool x1; bool x2; bool x3; bool x4; bool x5; bool x6; unsigned char x7; float x8; BOOL x9; unsigned short x10; })arg1;
- (const struct __CFArray { }*)copyActivityAlarms;
- (const struct __CFDictionary { }*)copyAppsUsingLocation;
- (unsigned char)copyLastLog;
- (const struct __CFDictionary { }*)copyMonitoredRegionsForBundleIdentifier:(const struct __CFString { }*)arg1 orBundlePath:(const struct __CFString { }*)arg2;
- (const struct __CFArray { }*)copyTechnologiesInUse;
- (unsigned char)displayStatistics;
- (unsigned char)dumpLogs:(const struct __CFString { }*)arg1;
- (id)getAccessoryMotionSensorLogs;
- (unsigned char)getAuthorizationStatus:(int*)arg1 forBundleID:(const struct __CFString { }*)arg2 orBundlePath:(const struct __CFString { }*)arg3;
- (unsigned char)getAuthorizationStatusForService:(int*)arg1 forBundleID:(const struct __CFString { }*)arg2 orBundlePath:(const struct __CFString { }*)arg3 serviceMask:(unsigned long long)arg4;
- (unsigned char)getControlPlaneStatusReportClear:(int)arg1 startTime:(double*)arg2 endTime:(double*)arg3 latitude:(double*)arg4 longitude:(double*)arg5 altitude:(double*)arg6 accuracy:(double*)arg7 status:(unsigned int*)arg8;
- (unsigned char)getGestureServiceEnabled:(char *)arg1;
- (unsigned char)getGyroCalibrationDatabaseBiasFit:(struct { int x1; double x2; union { struct { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; } x_1_2_1; struct { float x_2_3_1; float x_2_3_2; float x_2_3_3; } x_1_2_2; } x_3_1_1; struct { bool x_2_2_1; BOOL x_2_2_2[246]; } x_3_1_2; } x3; }*)arg1 atTemperature:(float)arg2;
- (unsigned char)getGyroCalibrationDatabaseNumTemperatures:(int*)arg1;
- (const void*)getLocationDefaultForKey:(const struct __CFString { }*)arg1;
- (unsigned char)getLocationForBundleID:(const struct __CFString { }*)arg1 orBundlePath:(const struct __CFString { }*)arg2 dynamicAccuracyReductionEnabled:(unsigned char)arg3 allowsAlteredAccessoryLocations:(unsigned char)arg4 location:(struct { int x1; struct { double x_2_1_1; double x_2_1_2; } x2; double x3; double x4; double x5; double x6; double x7; double x8; double x9; double x10; int x11; double x12; int x13; struct { double x_14_1_1; double x_14_1_2; } x14; double x15; int x16; unsigned int x17; int x18; int x19; }*)arg5;
- (unsigned char)getLocationServicesEnabled:(char *)arg1;
- (id)getMotionSensorLogs;
- (unsigned char)getPrivateMode;
- (unsigned char)getStatusBarIconEnabled:(bool*)arg1 forEntityClass:(unsigned int)arg2;
- (int)getStatusBarIconState;
- (unsigned char)gyroCalibrationDatabaseSupportsMiniCalibration:(int*)arg1;
- (unsigned char)gyroCalibrationDatabaseWipe;
- (unsigned char)insertGyroCalibrationDatabaseBiasEstimateIfValid:(struct { float x1; float x2; float x3; })arg1 temperature:(float)arg2 variance:(struct { float x1; float x2; float x3; })arg3 timestamp:(double)arg4;
- (unsigned char)performMigration;
- (unsigned char)pingDaemon;
- (unsigned char)setAuthorizationStatus:(unsigned char)arg1 forBundleID:(const struct __CFString { }*)arg2 orBundlePath:(const struct __CFString { }*)arg3;
- (unsigned char)setAuthorizationStatusByType:(int)arg1 forBundleID:(const struct __CFString { }*)arg2 orBundlePath:(const struct __CFString { }*)arg3;
- (unsigned char)setBackgroundIndicatorForBundleID:(const struct __CFString { }*)arg1 orBundlePath:(const struct __CFString { }*)arg2 enabled:(unsigned char)arg3;
- (void)setGestureServiceEnabled:(unsigned char)arg1;
- (void)setLocationDefaultForKey:(const struct __CFString { }*)arg1 value:(const void*)arg2;
- (void)setLocationServicesEnabled:(unsigned char)arg1;
- (void)setMapMatchingRouteHint:(unsigned long long*)arg1 count:(int)arg2;
- (void)setPrivateMode:(unsigned char)arg1;
- (unsigned char)setStatusBarIconEnabled:(bool)arg1 forEntityClass:(unsigned int)arg2;
- (unsigned char)shutdownDaemon;
- (bool)startStopAdvertisingBeacon:(id)arg1 power:(id)arg2;
- (id)synchronousRemoteObject;
- (unsigned char)timeSyncMachTimeStamp:(unsigned long long*)arg1 oscarTimeStamp:(unsigned long long*)arg2;
- (id)timeZoneAtLocation:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
