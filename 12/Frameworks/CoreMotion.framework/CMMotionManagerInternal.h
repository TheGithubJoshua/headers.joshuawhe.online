<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CMMotionManagerInternal.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreMotion.framework/CMMotionManagerInternal.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion (2245.16.14)
 */

@interface CMMotionManagerInternal : NSObject {
    NSOperationQueue * _fDeviceMotionLiteClientQueue;
    id /* block */  _fDeviceMotionLiteFusedHandler;
    NSString * _fDeviceMotionLitePhysicalDeviceID;
    struct Dispatcher { int (**x1)(); id x2; } * fAccelerometerDispatcher;
    id /* block */  fAccelerometerHandler;
    NSOperationQueue * fAccelerometerQueue;
    double  fAccelerometerUpdateInterval;
    struct Dispatcher { int (**x1)(); id x2; } * fAmbientPressureDispatcher;
    id /* block */  fAmbientPressureHandler;
    NSOperationQueue * fAmbientPressureQueue;
    double  fAmbientPressureUpdateInterval;
    unsigned long long  fAttitudeReferenceFrame;
    long long  fCaptureMode;
    bool  fCompassCalibrationHud;
    struct Dispatcher { int (**x1)(); id x2; } * fCompensatedAmbientPressureDispatcher;
    id /* block */  fCompensatedAmbientPressureHandler;
    NSOperationQueue * fCompensatedAmbientPressureQueue;
    double  fCompensatedAmbientPressureUpdateInterval;
    struct CLConnectionClient { id x1; struct CLCallbackDropManager { int (**x_2_1_1)(); struct shared_ptr<int> { int *x_2_2_1; struct __shared_weak_count {} *x_2_2_2; } x_2_1_2; } x2; struct shared_ptr<CLConnectionClientInternal> { struct CLConnectionClientInternal {} *x_3_1_1; struct __shared_weak_count {} *x_3_1_2; } x3; struct CLConnectionClientNotificationContext {} *x4; } * fConnection;
    NSObject<OS_dispatch_queue> * fConnectionQueue;
    struct Dispatcher { int (**x1)(); id x2; } * fDeviceMotionDispatcher;
    id /* block */  fDeviceMotionErrorHandler;
    NSOperationQueue * fDeviceMotionErrorQueue;
    id /* block */  fDeviceMotionHandler;
    struct unique_ptr<CLDeviceMotionLiteService, std::__1::default_delete<CLDeviceMotionLiteService> > { 
        struct __compressed_pair<CLDeviceMotionLiteService *, std::__1::default_delete<CLDeviceMotionLiteService> > { 
            struct CLDeviceMotionLiteService {} *__value_; 
        } __ptr_; 
    }  fDeviceMotionLiteService;
    int  fDeviceMotionMode;
    NSOperationQueue * fDeviceMotionQueue;
    double  fDeviceMotionStartTimestamp;
    double  fDeviceMotionUpdateInterval;
    struct { 
        double x; 
        double y; 
        double z; 
        double magnitude; 
        double horizontal; 
        double declination; 
        double inclination; 
        double timestamp; 
    }  fGeomagneticModel;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > { 
        struct __compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > { 
            struct Client {} *__value_; 
        } __ptr_; 
    }  fGeomagneticModelProviderClient;
    struct Dispatcher { int (**x1)(); id x2; } * fGyroDispatcher;
    id /* block */  fGyroHandler;
    NSOperationQueue * fGyroQueue;
    double  fGyroUpdateInterval;
    bool  fHaveSentDeviceRequiresMovementError;
    bool  fHaveSentTrueNorthUnavailableError;
    bool  fIsApplicationActive;
    bool  fIsCompassCalibrated;
    bool  fIsUsingCalibratedCompass;
    double  fLastAccelerometerNotificationTimestamp;
    double  fLastAmbientPressureNotificationTimestamp;
    double  fLastCompensatedAmbientPressureNotificationTimestamp;
    double  fLastDeviceMotionNotificationTimestamp;
    double  fLastGyroNotificationTimestamp;
    double  fLastMagnetometerNotificationTimestamp;
    struct Sample { 
        double timestamp; 
        struct { 
            float x; 
            float y; 
            float z; 
        } acceleration; 
    }  fLatestAccelerometerSample;
    struct Sample { 
        double timestamp; 
        struct { 
            float pressure; 
            float temperature; 
        } pressureData; 
    }  fLatestAmbientPressureSample;
    struct Sample { 
        double timestamp; 
        struct { 
            float pressure; 
            float temperature; 
        } pressureData; 
    }  fLatestCompensatedAmbientPressureSample;
    struct Sample { 
        double timestamp; 
        struct { 
            float x; 
            float y; 
            float z; 
        } rotationRate; 
        unsigned short sampleNum; 
        bool fsync; 
    }  fLatestGyroSample;
    struct Sample { 
        double timestamp; 
        struct { 
            float x; 
            float y; 
            float z; 
        } magneticField; 
    }  fLatestMagnetometerSample;
    struct Dispatcher { int (**x1)(); id x2; } * fMagnetometerDispatcher;
    id /* block */  fMagnetometerHandler;
    NSOperationQueue * fMagnetometerQueue;
    double  fMagnetometerUpdateInterval;
    int (* fPrivateAccelerometerDataCallback;
    void * fPrivateAccelerometerDataCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } * fPrivateAccelerometerDataDispatcher;
    int (* fPrivateDeviceMotionCallback;
    void * fPrivateDeviceMotionCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } * fPrivateDeviceMotionDispatcher;
    struct Dispatcher { int (**x1)(); id x2; } * fPrivateDeviceMotionSensorStatusDispatcher;
    bool  fPrivateDeviceMotionUse9Axis;
    int (* fPrivateGyroDataCallback;
    void * fPrivateGyroDataCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } * fPrivateGyroDataDispatcher;
    int (* fPrivateMagnetometerDataCallback;
    void * fPrivateMagnetometerDataCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } * fPrivateMagnetometerDataDispatcher;
    int (* fPrivateNotificationCallback;
    void * fPrivateNotificationCallbackInfo;
    int  fPrivatePowerConservationMode;
    bool  fPrivateUseAccelerometer;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  fSampleLock;
    bool  fShowsDeviceMovementDisplay;
    bool  fSidebandSensorFusionEnabled;
    bool  fSidebandSensorFusionLatency;
    bool  fSidebandSensorFusionSnoop;
    struct unique_ptr<CLIspDataVisitor, std::__1::default_delete<CLIspDataVisitor> > { 
        struct __compressed_pair<CLIspDataVisitor *, std::__1::default_delete<CLIspDataVisitor> > { 
            struct CLIspDataVisitor {} *__value_; 
        } __ptr_; 
    }  fSidebandVisitor;
    struct __CFRunLoopTimer { } * fWatchdogTimer;
}

@property (nonatomic, retain) NSOperationQueue *fDeviceMotionLiteClientQueue;
@property (nonatomic, copy) id /* block */ fDeviceMotionLiteFusedHandler;
@property (nonatomic, retain) NSString *fDeviceMotionLitePhysicalDeviceID;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)fDeviceMotionLiteClientQueue;
- (id /* block */)fDeviceMotionLiteFusedHandler;
- (id)fDeviceMotionLitePhysicalDeviceID;
- (id)init;
- (void)setFDeviceMotionLiteClientQueue:(id)arg1;
- (void)setFDeviceMotionLiteFusedHandler:(id /* block */)arg1;
- (void)setFDeviceMotionLitePhysicalDeviceID:(id)arg1;
- (void)teardownPrivate;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
