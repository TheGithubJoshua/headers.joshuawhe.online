<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKCalendar.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKit.framework/EKCalendar.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKit.framework/EventKit (1.0)
 */

@interface EKCalendar : EKObject {
    unsigned long long  _cachedJunkStatus;
}

@property (nonatomic) struct CGColor { }*CGColor;
@property (nonatomic, readonly) unsigned long long allowedEntityTypes;
@property (nonatomic, readonly) bool allowsContentModifications;
@property (nonatomic) unsigned long long cachedJunkStatus;
@property (nonatomic, readonly) NSString *calendarIdentifier;
@property (getter=isImmutable, nonatomic, readonly) bool immutable;
@property (nonatomic, retain) EKSource *source;
@property (getter=isSubscribed, nonatomic, readonly) bool subscribed;
@property (nonatomic, readonly) unsigned long long supportedEventAvailabilities;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, readonly) long long type;

// Image: /System/Library/Frameworks/EventKit.framework/EventKit

+ (id)calendarForEntityType:(unsigned long long)arg1 eventStore:(id)arg2;
+ (id)calendarForEntityTypes:(unsigned long long)arg1 eventStore:(id)arg2;
+ (id)calendarWithEventStore:(id)arg1;
+ (Class)frozenClass;
+ (bool)isWeakRelationship;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownRelationshipSingleValueKeys;
+ (id)rowIDsForCalendars:(id)arg1;
+ (id)typeDescription:(long long)arg1;

- (struct CGColor { }*)CGColor;
- (int)_allowedEntities;
- (void)_clearCGColorCache;
- (bool)_flagValueWithMask:(unsigned int)arg1;
- (void)_setAllowedEntities:(int)arg1;
- (void)_setFlagValue:(bool)arg1 withMask:(unsigned int)arg2;
- (void)_setSource:(id)arg1;
- (void)addAlarms:(id)arg1;
- (void)addSharee:(id)arg1;
- (id)alarms;
- (id)allAlarms;
- (bool)allowEvents;
- (bool)allowReminders;
- (unsigned long long)allowedEntityTypes;
- (bool)allowsContentModifications;
- (bool)allowsIgnoringSharedEventChangeNotifications;
- (bool)allowsScheduling;
- (bool)automaticEventLocationGeocodingAllowed;
- (id)bulkRequests;
- (unsigned long long)cachedJunkStatus;
- (id)calendarIdentifier;
- (bool)canBePublished;
- (bool)canBeShared;
- (void)clearInvitationStatus;
- (id)colorString;
- (bool)commit:(id*)arg1;
- (bool)couldBeJunk;
- (id)description;
- (id)digest;
- (int)displayOrder;
- (int)entityType;
- (id)externalID;
- (id)externalIDTag;
- (id)externalModificationTag;
- (id)externalRepresentation;
- (id)externalURI;
- (id)findOriginalAlarmStartingWith:(id)arg1;
- (unsigned int)flags;
- (bool)getColorRed:(int*)arg1 green:(int*)arg2 blue:(int*)arg3;
- (bool)hasEvents;
- (bool)hasTasks;
- (id)init;
- (unsigned long long)invitationStatus;
- (bool)isAlarmAcknowledgedPropertyDirty;
- (bool)isDefaultSchedulingCalendar;
- (bool)isFacebookBirthdayCalendar;
- (bool)isFamilyCalendar;
- (bool)isHidden;
- (bool)isHolidaySubscribedCalendar;
- (bool)isIgnoringEventAlerts;
- (bool)isIgnoringSharedCalendarNotifications;
- (bool)isImmutable;
- (bool)isInbox;
- (bool)isManaged;
- (bool)isMarkedImmutableSharees;
- (bool)isMarkedUndeletable;
- (bool)isMutableNaturalLanguageSuggestionsCalendar;
- (bool)isMutableSuggestionsCalendar;
- (bool)isNaturalLanguageSuggestedEventCalendar;
- (bool)isNotificationsCollection;
- (bool)isPublished;
- (bool)isSharingInvitation;
- (bool)isSubscribed;
- (bool)isSubscribedHolidayCalendar;
- (bool)isSuggestedEventCalendar;
- (bool)isSuggestionsCalendar;
- (id)notes;
- (id)ownerIdentityAddress;
- (id)ownerIdentityDisplayName;
- (id)ownerIdentityEmail;
- (id)ownerIdentityFirstName;
- (id)ownerIdentityLastName;
- (id)ownerIdentityPhoneNumber;
- (bool)prohibitsScheduling;
- (id)publishURL;
- (id)pushKey;
- (bool)refresh;
- (bool)remove:(id*)arg1;
- (void)removeAcknowledgedSnoozedAlarms;
- (void)removeAlarms:(id)arg1;
- (void)removeAllSnoozedAlarms;
- (void)removeSharee:(id)arg1;
- (void)reset;
- (id)selfIdentityAddress;
- (id)selfIdentityDisplayName;
- (id)selfIdentityEmail;
- (id)selfIdentityFirstName;
- (id)selfIdentityLastName;
- (id)selfIdentityPhoneNumber;
- (id)sendersEmail;
- (id)sendersPhoneNumber;
- (void)setAlarms:(id)arg1;
- (void)setAllAlarms:(id)arg1;
- (void)setAllowReminders:(bool)arg1;
- (void)setAllowedEntityTypes:(unsigned long long)arg1;
- (void)setAllowsContentModifications:(bool)arg1;
- (void)setAllowsEvents:(bool)arg1;
- (void)setAllowsScheduling:(bool)arg1;
- (void)setBulkRequests:(id)arg1;
- (void)setCGColor:(struct CGColor { }*)arg1;
- (void)setCachedJunkStatus:(unsigned long long)arg1;
- (void)setCalendarIdentifier:(id)arg1;
- (void)setCanBePublished:(bool)arg1;
- (void)setCanBeShared:(bool)arg1;
- (void)setColorString:(id)arg1;
- (void)setDigest:(id)arg1;
- (void)setDisplayOrder:(int)arg1;
- (void)setExternalID:(id)arg1;
- (void)setExternalIDTag:(id)arg1;
- (void)setExternalModificationTag:(id)arg1;
- (void)setExternalRepresentation:(id)arg1;
- (void)setFacebookBirthdayCalendar:(bool)arg1;
- (void)setFamilyCalendar:(bool)arg1;
- (void)setFlags:(unsigned int)arg1;
- (void)setHidden:(bool)arg1;
- (void)setImmutable:(bool)arg1;
- (void)setInbox:(bool)arg1;
- (void)setInvitationStatus:(unsigned long long)arg1;
- (void)setIsDefaultSchedulingCalendar:(bool)arg1;
- (void)setIsIgnoringEventAlerts:(bool)arg1;
- (void)setIsIgnoringSharedCalendarNotifications:(bool)arg1;
- (void)setIsJunk:(bool)arg1;
- (void)setIsPublished:(bool)arg1;
- (void)setNotes:(id)arg1;
- (void)setNotificationsCollection:(bool)arg1;
- (void)setOwnerIdentityAddress:(id)arg1;
- (void)setOwnerIdentityDisplayName:(id)arg1;
- (void)setOwnerIdentityEmail:(id)arg1;
- (void)setOwnerIdentityFirstName:(id)arg1;
- (void)setOwnerIdentityLastName:(id)arg1;
- (void)setOwnerIdentityPhoneNumber:(id)arg1;
- (void)setProhibitsScheduling:(bool)arg1;
- (void)setPublishURL:(id)arg1;
- (void)setPushKey:(id)arg1;
- (void)setSelfIdentityAddress:(id)arg1;
- (void)setSelfIdentityDisplayName:(id)arg1;
- (void)setSelfIdentityEmail:(id)arg1;
- (void)setSelfIdentityFirstName:(id)arg1;
- (void)setSelfIdentityLastName:(id)arg1;
- (void)setSelfIdentityPhoneNumber:(id)arg1;
- (void)setSharedOwnerAddress:(id)arg1;
- (void)setSharedOwnerName:(id)arg1;
- (void)setSharees:(id)arg1;
- (void)setSharingInvitation:(bool)arg1;
- (void)setSharingInvitationResponse:(unsigned long long)arg1;
- (void)setSharingStatus:(unsigned long long)arg1;
- (void)setSource:(id)arg1;
- (void)setSubcalAccountID:(id)arg1;
- (void)setSubscribed:(bool)arg1;
- (void)setSubscribedHolidayCalendar:(bool)arg1;
- (void)setSymbolicColorName:(id)arg1;
- (void)setSyncToken:(id)arg1;
- (void)setTitle:(id)arg1;
- (id)sharedOwnerAddress;
- (id)sharedOwnerEmail;
- (id)sharedOwnerName;
- (id)sharedOwnerPhoneNumber;
- (id)sharedOwnerURL;
- (id)sharees;
- (unsigned long long)sharingInvitationResponse;
- (unsigned long long)sharingStatus;
- (void)snoozeAlarm:(id)arg1 withLocation:(id)arg2 proximity:(long long)arg3;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (id)source;
- (id)subcalAccountID;
- (unsigned long long)supportedEventAvailabilities;
- (bool)supportsJunkReporting;
- (id)symbolicColorName;
- (id)syncHash;
- (id)syncToken;
- (id)title;
- (long long)type;
- (id)unlocalizedTitle;
- (bool)validate:(id*)arg1;

// Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI

- (id)uiColor;

// Image: /System/Library/PrivateFrameworks/PhotoAnalysis.framework/Frameworks/PhotosGraph.framework/Frameworks/MediaMiningKit.framework/MediaMiningKit

- (bool)hasSharees;
- (id)shareesAndOwner;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
