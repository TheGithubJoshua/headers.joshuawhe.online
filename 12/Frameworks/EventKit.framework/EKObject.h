<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKObject.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKit.framework/EKObject.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKit.framework/EventKit (1.0)
 */

@interface EKObject : NSObject <EKFrozenMeltedPair, EKProtocolMutableObject> {
    NSMutableDictionary * __cachedMeltedObjects;
    NSMutableDictionary * __cachedValues;
    EKObjectValidationContext * __validationContext;
    NSDictionary * _additionalFrozenProperties;
    EKChangeSet * _changeSet;
    EKPersistentObject * _persistentObject;
}

@property (nonatomic, retain) NSMutableDictionary *_cachedMeltedObjects;
@property (nonatomic, retain) NSMutableDictionary *_cachedValues;
@property (nonatomic, retain) EKObjectValidationContext *_validationContext;
@property (nonatomic, retain) NSDictionary *additionalFrozenProperties;
@property (nonatomic, readonly) bool canBeConvertedToFullObject;
@property (nonatomic, retain) EKChangeSet *changeSet;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) EKEventStore *eventStore;
@property (nonatomic, readonly) bool hasChanges;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isFrozen;
@property (nonatomic, readonly) bool isPartialObject;
@property (getter=isNew, nonatomic, readonly) bool new;
@property (nonatomic, readonly) NSDictionary *preFrozenRelationshipObjects;
@property (nonatomic, readonly) NSString *semanticIdentifier;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *uniqueIdentifier;

+ (bool)_isWeakRelationMeltedObject:(id)arg1 forKey:(id)arg2;
+ (unsigned long long)_numberOfSharedLocksForUnitTesting;
+ (Class)frozenClass;
+ (bool)isDerivedRelationship;
+ (bool)isMeltedAndNotWeakRelationshipObject:(id)arg1 forKey:(id)arg2;
+ (bool)isWeakRelationship;
+ (id)knownDerivedAndSingleValueRelationshipKeys;
+ (id)knownDerivedRelationshipKeys;
+ (id)knownImmutableKeys;
+ (id)knownRelationshipMultiValueKeys;
+ (id)knownRelationshipSingleValueKeys;
+ (id)knownRelationshipWeakKeys;
+ (Class)meltedClass;
+ (id)propertiesUnavailableForPartialObjects;

- (void).cxx_destruct;
- (void)_addCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (void)_addChangesFromObject:(id)arg1 except:(id)arg2 keep:(id)arg3;
- (void)_applyDefinedAfterFirstSaveFrom:(id)arg1;
- (void)_applyKnownImmutableValuesFrom:(id)arg1;
- (bool)_areOnlyChangedKeys:(id)arg1;
- (id)_cachedMeltedObjects;
- (unsigned long long)_cachedMeltedObjectsCount;
- (id)_cachedValues;
- (void)_emptyMeltedCacheForKey:(id)arg1;
- (bool)_hasChangeHelperInKeys:(id)arg1 ignoreKeys:(id)arg2 checkUnsaved:(bool)arg3;
- (bool)_hasChanges;
- (bool)_hasChangesForKey:(id)arg1;
- (bool)_hasChangesForKey:(id)arg1 checkUnsaved:(bool)arg2;
- (bool)_hasUnsavedChangesInKeys:(id)arg1 ignoreKeys:(id)arg2;
- (void)_initChangeSetIfNone;
- (bool)_isNew;
- (bool)_isOnlyChangedKey:(id)arg1;
- (bool)_isPropertyUnavailable:(id)arg1 convertToFullObjectIfUnavailable:(bool)arg2;
- (void)_markAsCommittedCommon;
- (void)_markAsDeletedCommon;
- (void)_markAsNewCommon;
- (void)_markAsNotNewCommon;
- (void)_markAsSavedCommon;
- (void)_markAsUndeletedCommon;
- (id)_multiRelationshipKeysToCheckForChanges;
- (void)_performBlockOnOwnedCachedRelatedObjects:(id /* block */)arg1;
- (void)_performWithReadLock:(id /* block */)arg1;
- (void)_performWithWriteLock:(id /* block */)arg1;
- (id)_previousValueForKey:(id)arg1;
- (id)_propertyValueForKey:(id)arg1;
- (id)_readWriteLock;
- (bool)_refreshCommon;
- (bool)_refreshable;
- (void)_removeCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (bool)_reset;
- (bool)_resetCommon;
- (void)_resetMeltedCache;
- (void)_resetWithFrozenObject:(struct EKPersistentObject { Class x1; }*)arg1;
- (void)_rollbackCommon;
- (void)_sharedInit;
- (id)_singleRelationshipKeysToCheckForChanges;
- (void)_updateCachedMeltedObjectSetForMultiValueKey:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)_updatePersistentValueForKey:(id)arg1;
- (id)_validationContext;
- (void)addCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (void)addChanges:(id)arg1;
- (void)addChangesFromObject:(id)arg1;
- (void)addChangesFromObject:(id)arg1 except:(id)arg2;
- (void)addChangesFromObject:(id)arg1 keep:(id)arg2;
- (void)addMultiChangedObjectValue:(id)arg1 forKey:(id)arg2;
- (void)addMultiChangedObjectValues:(id)arg1 forKey:(id)arg2;
- (id)additionalFrozenProperties;
- (void)applyChanges:(id)arg1;
- (id)backingObject;
- (id)cachedMeltedObjectForSingleValueKey:(id)arg1;
- (id)cachedMeltedObjectsForMultiValueKey:(id)arg1;
- (id)cachedValueForKey:(id)arg1;
- (id)cachedValueForKey:(id)arg1 expectingCachedValue:(id)arg2 forMasterKey:(id)arg3 relatedKeys:(id)arg4 populateBlock:(id /* block */)arg5;
- (id)cachedValueForKey:(id)arg1 populateBlock:(id /* block */)arg2;
- (bool)canBeConvertedToFullObject;
- (id)changeSet;
- (id)changedKeys;
- (void)clearCachedValueForKey:(id)arg1;
- (void)clearCachedValuesForKeys:(id)arg1;
- (id)committedValueForKey:(id)arg1;
- (void)dealloc;
- (void)deletePersistentObject;
- (void)didCommit;
- (void)emptyMeltedCache;
- (void)emptyMeltedCacheForKeys:(id)arg1;
- (id)eventStore;
- (id)existingMeltedObject;
- (bool)existsInStore;
- (struct EKPersistentObject { Class x1; }*)frozenObject;
- (id)frozenOrMeltedCachedSingleRelationObjectForKey:(id)arg1;
- (bool)hasChanges;
- (bool)hasUnsavedChanges;
- (bool)hasUnsavedChangesIgnoreKeys:(id)arg1;
- (bool)hasUnsavedChangesInKeys:(id)arg1;
- (unsigned long long)hash;
- (id)init;
- (id)initWithObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (void)insertPersistentObjectIfNeeded;
- (bool)isCompletelyEqual:(id)arg1;
- (bool)isDeleted;
- (bool)isEqual:(id)arg1;
- (bool)isEqual:(id)arg1 ignoringProperties:(id)arg2;
- (bool)isFrozen;
- (bool)isNew;
- (bool)isPartialObject;
- (bool)isPropertyUnavailable:(id)arg1;
- (bool)isSaved;
- (bool)isUndeleted;
- (void)markAsCommitted;
- (void)markAsDeleted;
- (void)markAsNew;
- (void)markAsNotNew;
- (void)markAsSaved;
- (void)markAsUndeleted;
- (unsigned long long)meltedAndCachedMultiRelationCountForKey:(id)arg1;
- (id)meltedAndCachedMultiRelationObjectsForKey:(id)arg1;
- (id)meltedAndCachedSingleRelationObjectForKey:(id)arg1;
- (id)meltedObjectInStore:(id)arg1;
- (id)multiChangedObjectValuesForKey:(id)arg1;
- (id)objectID;
- (id)persistentObject;
- (id)preFrozenRelationshipObjects;
- (id)privacyDescription;
- (void)rebase;
- (void)rebaseSkippingRelationProperties:(id)arg1;
- (void)refetch;
- (bool)refresh;
- (void)removeCachedMeltedObject:(id)arg1 forMultiValueKey:(id)arg2;
- (void)removeMultiChangedObjectValue:(id)arg1 forKey:(id)arg2;
- (void)removeMultiChangedObjectValues:(id)arg1 forKey:(id)arg2;
- (void)replaceMultiChangedObjectValuesWithObjectValues:(id)arg1 forKey:(id)arg2;
- (void)reset;
- (bool)revert;
- (void)rollback;
- (int)rowID;
- (id)semanticIdentifier;
- (void)setAdditionalFrozenProperties:(id)arg1;
- (void)setBackingObject:(id)arg1;
- (void)setCachedMeltedObject:(id)arg1 forSingleValueKey:(id)arg2;
- (void)setCachedMeltedObjects:(id)arg1 forMultiValueKey:(id)arg2;
- (void)setCachedValue:(id)arg1 forKey:(id)arg2;
- (void)setChangeSet:(id)arg1;
- (void)setEventStore:(id)arg1;
- (void)setPersistentObject:(id)arg1;
- (void)setSingleChangedValue:(id)arg1 forKey:(id)arg2;
- (void)set_cachedMeltedObjects:(id)arg1;
- (void)set_cachedValues:(id)arg1;
- (void)set_validationContext:(id)arg1;
- (id)singleChangedValueForKey:(id)arg1;
- (id)uniqueIdentifier;
- (void)updateMeltedAndCachedMultiRelationObjects:(id)arg1 forKey:(id)arg2;
- (void)updateMeltedAndCachedSingleRelationObject:(id)arg1 forKey:(id)arg2 frozenClass:(Class)arg3;
- (void)updatePersistentObject;
- (void)updatePersistentObjectSkippingProperties:(id)arg1;
- (void)updatePersistentValueForKeyIfNeeded:(id)arg1;
- (void)updatedMeltedCacheForChangeSet:(id)arg1;
- (bool)validate:(id*)arg1;
- (bool)validateWithOwner:(id)arg1 error:(id*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
