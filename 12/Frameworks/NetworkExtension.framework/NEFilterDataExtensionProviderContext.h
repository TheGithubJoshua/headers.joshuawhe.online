<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NEFilterDataExtensionProviderContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/NetworkExtension.framework/NEFilterDataExtensionProviderContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension (1)
 */

@interface NEFilterDataExtensionProviderContext : NEFilterExtensionProviderContext <NEFilterDataExtensionProviderHostProtocol, NEFilterDataExtensionProviderProtocol> {
    NSDictionary * _URLAppendStringMap;
    NSMutableDictionary * _browserFlows;
    NSMutableDictionary * _channelFlows;
    NSObject<OS_xpc_object> * _clientListener;
    bool  _controlProviderExists;
    NSXPCListenerEndpoint * _listenerEndpoint;
    NSMutableArray * _pendingConnections;
    NSDictionary * _remediationMap;
    NSMutableArray * _socketExceptions;
    NSMutableDictionary * _socketFlows;
    NSObject<OS_dispatch_source> * _source;
}

@property (retain) NSDictionary *URLAppendStringMap;
@property (retain) NSMutableDictionary *browserFlows;
@property (retain) NSMutableDictionary *channelFlows;
@property (retain) NSObject<OS_xpc_object> *clientListener;
@property bool controlProviderExists;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (retain) NSXPCListenerEndpoint *listenerEndpoint;
@property (retain) NSMutableArray *pendingConnections;
@property (retain) NSDictionary *remediationMap;
@property (nonatomic, retain) NSMutableArray *socketExceptions;
@property (retain) NSMutableDictionary *socketFlows;
@property (retain) NSObject<OS_dispatch_source> *source;
@property (readonly) Class superclass;

+ (id)_extensionAuxiliaryHostProtocol;
+ (id)_extensionAuxiliaryVendorProtocol;

- (void).cxx_destruct;
- (id)URLAppendStringMap;
- (void)acceptNewClientConnection:(id)arg1;
- (bool)blessClient:(id)arg1;
- (id)browserFlows;
- (void)channelContentFilterWriteMessageForFlowUUID:(id)arg1 client_connection:(id)arg2 xpc_object_t:(id)arg3 drop:(bool)arg4 inboundPassOffset:(unsigned long long)arg5 inboundPeekOffset:(unsigned long long)arg6 outboundPassOffset:(unsigned long long)arg7 outboundPeekOffset:(unsigned long long)arg8;
- (id)channelFlows;
- (id)cleanRemediationURL:(id)arg1 flow:(id)arg2 providerConfiguration:(id)arg3;
- (id)clientListener;
- (void)closeBrowserFilterFlow:(id)arg1 forUUID:(id)arg2;
- (void)closeChannelFlow:(id)arg1 flowUUID:(id)arg2;
- (void)closePendingConnections;
- (void)closeSocketFlow:(id)arg1 socketID:(unsigned long long)arg2;
- (bool)controlProviderExists;
- (void)dispose;
- (void)fetchCurrentRulesForFlow:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchProviderConnectionWithCompletionHandler:(id /* block */)arg1;
- (void)getSourceAppInfo:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)handleAddDataMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleChannelMessageFlowFinish:(id)arg1 forConnection:(id)arg2;
- (void)handleChannelMessageMoreData:(id)arg1 forConnection:(id)arg2;
- (void)handleChannelSourceEventAttachComplete:(id)arg1 flowUUID:(id)arg2 sendNewFlowReply:(id /* block */)arg3;
- (void)handleClientMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleDataCompleteMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleNewChannelFlowMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleNewFlowMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleNewFlowMessageComplete:(id)arg1 forConnection:(id)arg2 flow:(id)arg3 flowUUID:(const char *)arg4 direction:(long long)arg5;
- (void)handleRemediationMessage:(id)arg1 forConnection:(id)arg2;
- (void)handleRulesChanged;
- (void)handleSocketSourceEventAttachComplete:(id)arg1 socketID:(unsigned long long)arg2 sendNewFlowReply:(id /* block */)arg3;
- (void)handleSocketSourceEventWithSocket:(int)arg1;
- (id)listenerEndpoint;
- (id)pendingConnections;
- (void)provideRemediationMap:(id)arg1;
- (void)provideURLAppendStringMap:(id)arg1;
- (void)providerControlSocketFileHandle:(id)arg1;
- (void)purgeData:(int)arg1 size:(int)arg2 buf:(char *)arg3 bufSize:(int)arg4;
- (id)remediationMap;
- (void)report:(id)arg1;
- (void)reportFlow:(id)arg1 forVerdict:(id)arg2;
- (void)reportFlow:(id)arg1 forVerdict:(id)arg2 absoluteVerdict:(id)arg3;
- (id)sanitizeRemediationButtonText:(id)arg1;
- (void)sendBrowserContentFilterServerRequest;
- (void)sendSocketContentFilterRequest;
- (void)setBrowserFlows:(id)arg1;
- (void)setChannelFlows:(id)arg1;
- (void)setClientListener:(id)arg1;
- (void)setControlProviderExists:(bool)arg1;
- (void)setListenerEndpoint:(id)arg1;
- (void)setPendingConnections:(id)arg1;
- (void)setRemediationMap:(id)arg1;
- (void)setSocketExceptions:(id)arg1;
- (void)setSocketFlows:(id)arg1;
- (void)setSource:(id)arg1;
- (void)setURLAppendStringMap:(id)arg1;
- (void)setupSocketContentFilterWithControlSocket:(int)arg1;
- (void)setupSocketSourceWithControlSocket:(int)arg1;
- (bool)socketContentFilterWriteMessageWithControlSocket:(int)arg1 socketID:(unsigned long long)arg2 drop:(bool)arg3 inboundPassOffset:(unsigned long long)arg4 inboundPeekOffset:(unsigned long long)arg5 outboundPassOffset:(unsigned long long)arg6 outboundPeekOffset:(unsigned long long)arg7;
- (id)socketExceptions;
- (id)socketFlows;
- (id)source;
- (void)startFilterWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)stopWithReason:(int)arg1;
- (void)teardownSocketSource;
- (id)trimURLFromFlow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
