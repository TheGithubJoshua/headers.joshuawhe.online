<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NEIPSecSA.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/NetworkExtension.framework/NEIPSecSA.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension (1)
 */

@interface NEIPSecSA : NSObject <NSCopying> {
    int  _authenticationAlgorithm;
    NSData * _authenticationKey;
    NWInterface * _boundInterface;
    int  _direction;
    int  _encryptionAlgorithm;
    NSData * _encryptionKey;
    unsigned int  _internalSAID;
    unsigned long long  _lifetimeSeconds;
    NWAddressEndpoint * _localAddress;
    int  _mode;
    bool  _natDetectedOnPeer;
    bool  _natKeepaliveEnabled;
    unsigned long long  _natKeepaliveIntervalSeconds;
    bool  _natKeepaliveOffloadEnabled;
    unsigned long long  _natKeepaliveOffloadIntervalSeconds;
    bool  _natTraversalEnabled;
    unsigned short  _natTraversalPort;
    int  _protocol;
    NWAddressEndpoint * _remoteAddress;
    unsigned int  _replayWindowSize;
    unsigned int  _spi;
    NSString * _tunnelInterfaceName;
}

@property int authenticationAlgorithm;
@property (retain) NSData *authenticationKey;
@property (retain) NWInterface *boundInterface;
@property (readonly) int direction;
@property int encryptionAlgorithm;
@property (retain) NSData *encryptionKey;
@property unsigned int internalSAID;
@property unsigned long long lifetimeSeconds;
@property (retain) NWAddressEndpoint *localAddress;
@property int mode;
@property bool natDetectedOnPeer;
@property bool natKeepaliveEnabled;
@property unsigned long long natKeepaliveIntervalSeconds;
@property bool natKeepaliveOffloadEnabled;
@property unsigned long long natKeepaliveOffloadIntervalSeconds;
@property bool natTraversalEnabled;
@property unsigned short natTraversalPort;
@property int protocol;
@property (retain) NWAddressEndpoint *remoteAddress;
@property unsigned int replayWindowSize;
@property unsigned int spi;
@property (retain) NSString *tunnelInterfaceName;

- (void).cxx_destruct;
- (int)authenticationAlgorithm;
- (id)authenticationKey;
- (id)boundInterface;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)createDictionary;
- (void)dealloc;
- (int)direction;
- (int)encryptionAlgorithm;
- (id)encryptionKey;
- (unsigned long long)hash;
- (id)initInboundSA;
- (id)initOutboundSAWithSPI:(unsigned int)arg1;
- (unsigned int)internalSAID;
- (void)invalidate;
- (bool)isEqual:(id)arg1;
- (unsigned long long)lifetimeSeconds;
- (id)localAddress;
- (int)mode;
- (bool)natDetectedOnPeer;
- (bool)natKeepaliveEnabled;
- (unsigned long long)natKeepaliveIntervalSeconds;
- (bool)natKeepaliveOffloadEnabled;
- (unsigned long long)natKeepaliveOffloadIntervalSeconds;
- (bool)natTraversalEnabled;
- (unsigned short)natTraversalPort;
- (int)protocol;
- (id)remoteAddress;
- (unsigned int)replayWindowSize;
- (void)setAuthenticationAlgorithm:(int)arg1;
- (void)setAuthenticationKey:(id)arg1;
- (void)setBoundInterface:(id)arg1;
- (void)setEncryptionAlgorithm:(int)arg1;
- (void)setEncryptionKey:(id)arg1;
- (void)setInternalSAID:(unsigned int)arg1;
- (void)setLifetimeSeconds:(unsigned long long)arg1;
- (void)setLocalAddress:(id)arg1;
- (void)setMode:(int)arg1;
- (void)setNatDetectedOnPeer:(bool)arg1;
- (void)setNatKeepaliveEnabled:(bool)arg1;
- (void)setNatKeepaliveIntervalSeconds:(unsigned long long)arg1;
- (void)setNatKeepaliveOffloadEnabled:(bool)arg1;
- (void)setNatKeepaliveOffloadIntervalSeconds:(unsigned long long)arg1;
- (void)setNatTraversalEnabled:(bool)arg1;
- (void)setNatTraversalPort:(unsigned short)arg1;
- (void)setProtocol:(int)arg1;
- (void)setRemoteAddress:(id)arg1;
- (void)setReplayWindowSize:(unsigned int)arg1;
- (void)setSpi:(unsigned int)arg1;
- (void)setTunnelInterfaceName:(id)arg1;
- (unsigned int)spi;
- (id)tunnelInterfaceName;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
