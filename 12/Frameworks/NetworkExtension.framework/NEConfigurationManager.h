<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NEConfigurationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/NetworkExtension.framework/NEConfigurationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension (1)
 */

@interface NEConfigurationManager : NSObject {
    NSData * _SCPreferencesSignature;
    id /* block */  _changedHandler;
    int  _changedNotifyToken;
    NSObject<OS_dispatch_queue> * _changedQueue;
    long long  _configurationChangeSource;
    NSDictionary * _currentIndex;
    NSKeyedUnarchiver * _decoder;
    <NEConfigurationManagerDelegate> * _delegate;
    NSString * _description;
    long long  _generation;
    bool  _hasReadPermission;
    bool  _hasVPNAPIEntitlement;
    NEHelper * _helper;
    bool  _isNEHelper;
    bool  _isVPNPrivateAPI;
    bool  _isVPNPublicAPI;
    NSMutableDictionary * _loadedConfigurations;
    NSMutableDictionary * _loadedIndex;
    NSString * _pluginType;
    NSObject<OS_dispatch_queue> * _queue;
    NSUUID * _userUUID;
}

@property (retain) NSData *SCPreferencesSignature;
@property (copy) id /* block */ changedHandler;
@property int changedNotifyToken;
@property (retain) NSObject<OS_dispatch_queue> *changedQueue;
@property long long configurationChangeSource;
@property (retain) NSDictionary *currentIndex;
@property (retain) NSKeyedUnarchiver *decoder;
@property (retain) <NEConfigurationManagerDelegate> *delegate;
@property long long generation;
@property bool hasReadPermission;
@property bool hasVPNAPIEntitlement;
@property (readonly) NEHelper *helper;
@property (copy) id /* block */ incomingMessageHandler;
@property bool isNEHelper;
@property bool isVPNPrivateAPI;
@property bool isVPNPublicAPI;
@property (retain) NSMutableDictionary *loadedConfigurations;
@property (retain) NSMutableDictionary *loadedIndex;
@property (readonly) NSString *pluginType;
@property (readonly) NSObject<OS_dispatch_queue> *queue;
@property (readonly) NSUUID *userUUID;

+ (long long)configuration:(id)arg1 overlapsWithOtherConfiguration:(id)arg2;
+ (bool)configurationIsEnabled:(id)arg1;
+ (void)disableConfiguration:(id)arg1 onDemandOnly:(bool)arg2;
+ (id)sharedManager;
+ (id)sharedManagerForAllUsers;
+ (void)updateFlags:(unsigned long long*)arg1 withConfiguration:(id)arg2;

- (void).cxx_destruct;
- (id)SCPreferencesSignature;
- (id /* block */)changedHandler;
- (int)changedNotifyToken;
- (id)changedQueue;
- (void)clearLoadedConfigurationsWithIDs:(id)arg1;
- (long long)configurationChangeSource;
- (bool)configurationHasChanged:(id)arg1;
- (id)copyChangedConfigurationIDs:(id)arg1;
- (void)copyIdentities:(id)arg1 fromDomain:(long long)arg2 withCompletionQueue:(id)arg3 handler:(id /* block */)arg4;
- (id)currentIndex;
- (void)dealloc;
- (id)decodeConfigurationWithIdentifier:(id)arg1;
- (id)decoder;
- (id)delegate;
- (id)description;
- (void)didLoadConfiguration:(id)arg1;
- (void)didLoadConfiguration:(id)arg1 withSignature:(id)arg2;
- (id)errorWithCode:(long long)arg1 specifics:(id)arg2;
- (void)fetchCarrierBundleNATKeepAliveIntervalOverCell:(id)arg1 handler:(id /* block */)arg2;
- (void)fetchClientListenerWithBundleID:(id)arg1 completionQueue:(id)arg2 handler:(id /* block */)arg3;
- (void)fetchUpgradeInfoForPluginType:(id)arg1 completionQueue:(id)arg2 handler:(id /* block */)arg3;
- (id)filterIndexWithFilter:(id)arg1;
- (long long)generation;
- (void)getCurrentIndexWithCompletionHandler:(id /* block */)arg1;
- (void)handleApplicationsRemoved:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)handleFileRemovedWithCompletionHandler:(id /* block */)arg1;
- (void)handlePluginTypesRemoved:(id)arg1 configuration:(id)arg2 vpn:(id)arg3 updateSCPreferences:(struct __SCPreferences { }*)arg4;
- (bool)hasReadPermission;
- (bool)hasVPNAPIEntitlement;
- (id)helper;
- (id /* block */)incomingMessageHandler;
- (id)init;
- (id)initForAllUsers;
- (id)initWithPluginType:(id)arg1;
- (id)initWithUserUUID:(id)arg1;
- (bool)isNEHelper;
- (bool)isVPNPrivateAPI;
- (bool)isVPNPublicAPI;
- (void)loadConfigurationWithID:(id)arg1 withCompletionQueue:(id)arg2 handler:(id /* block */)arg3;
- (void)loadConfigurations:(id)arg1 withFilter:(id)arg2 completionQueue:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)loadConfigurationsInternal:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)loadConfigurationsWithCompletionQueue:(id)arg1 handler:(id /* block */)arg2;
- (void)loadIndexWithFilter:(id)arg1 completionQueue:(id)arg2 handler:(id /* block */)arg3;
- (id)loadedConfigurations;
- (id)loadedIndex;
- (id)makeMutableCopyOfIndex:(id)arg1;
- (void)notifyChanges;
- (id)pluginType;
- (void)postChangeNotification;
- (void)postChangeNotificationWithGeneration:(long long)arg1 andFlags:(unsigned long long)arg2;
- (void)postGeneration;
- (id)queue;
- (id)readIndexFromDiskWithError:(id*)arg1;
- (void)registerForChangeNotifications;
- (bool)reloadFromDisk;
- (void)removeConfiguration:(id)arg1 withCompletionQueue:(id)arg2 handler:(id /* block */)arg3;
- (void)removeConfigurationFromDisk:(id)arg1 completionQueue:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)removeConfigurationFromDisk:(id)arg1 updateSCPreferences:(struct __SCPreferences { }*)arg2;
- (bool)resetKeychainItemsAfterProtocolChange:(id)arg1 newConfiguration:(id)arg2;
- (void)saveConfiguration:(id)arg1 withCompletionQueue:(id)arg2 handler:(id /* block */)arg3;
- (void)saveConfigurationToDisk:(id)arg1 currentSignature:(id)arg2 userUUID:(id)arg3 isUpgrade:(bool)arg4 completionQueue:(id)arg5 completionHandler:(id /* block */)arg6;
- (id)saveConfigurationToDisk:(id)arg1 updateSCPreferences:(struct __SCPreferences { }*)arg2 currentSignature:(id)arg3 userUUID:(id)arg4 notifyNow:(bool)arg5 isUpgrade:(bool)arg6;
- (void)sendRequest:(id)arg1 responseHandler:(id /* block */)arg2;
- (void)setChangedHandler:(id /* block */)arg1;
- (void)setChangedNotifyToken:(int)arg1;
- (void)setChangedQueue:(id)arg1;
- (void)setChangedQueue:(id)arg1 andHandler:(id /* block */)arg2;
- (void)setConfigurationChangeSource:(long long)arg1;
- (void)setCurrentIndex:(id)arg1;
- (void)setDecoder:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGeneration:(long long)arg1;
- (void)setHasReadPermission:(bool)arg1;
- (void)setHasVPNAPIEntitlement:(bool)arg1;
- (void)setIncomingMessageHandler:(id /* block */)arg1;
- (void)setIsNEHelper:(bool)arg1;
- (void)setIsVPNPrivateAPI:(bool)arg1;
- (void)setIsVPNPublicAPI:(bool)arg1;
- (void)setLoadedConfigurations:(id)arg1;
- (void)setLoadedIndex:(id)arg1;
- (void)setSCPreferencesSignature:(id)arg1;
- (void)showObsoleteAppAlert;
- (void)syncWithSystemConfigurationWithAppNameCallback:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (void)triggerLocalAuthenticationForConfigurationWithID:(id)arg1 withCompletionQueue:(id)arg2 handler:(id /* block */)arg3;
- (void)updateSCPreferencesSignatureOnDisk;
- (void)upgradeLegacyPluginConfigurationsWithUpgradeInfo:(id)arg1 completionQueue:(id)arg2 handler:(id /* block */)arg3;
- (id)userUUID;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
