<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NEIKEv2PacketTunnelProvider.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/NetworkExtension.framework/NEIKEv2PacketTunnelProvider.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension (1)
 */

@interface NEIKEv2PacketTunnelProvider : NEPacketTunnelProvider {
    NSDictionary * _childConfig;
    id /* block */  _dnsResolverCompletionHandler;
    unsigned int  _flags;
    NSObject<OS_dispatch_semaphore> * _getSocketSemaphore;
    bool  _hasNAT;
    unsigned long long  _ifIndex;
    unsigned int  _ikeChildID;
    NSArray * _ikeConfig;
    struct NEIPSecIKE_s { } * _ikeRef;
    bool  _isIfCellular;
    NEIKEv2MOBIKE * _mobikeHandle;
    NSDictionary * _options;
    long long  _pathStatus;
    NSObject<OS_dispatch_queue> * _queue;
    NEIKEv2Rekey * _rekey;
    NWResolver * _resolver;
    NWPathEvaluator * _scopedPathEvaluator;
    NEIKEv2Server * _serverAddresses;
    id /* block */  _startTunnelCompletionHandler;
    bool  _stopped;
    struct NEVirtualInterface_s { } * _virtualInterface;
}

@property (retain) NSDictionary *childConfig;
@property (copy) id /* block */ dnsResolverCompletionHandler;
@property unsigned int flags;
@property (retain) NSObject<OS_dispatch_semaphore> *getSocketSemaphore;
@property bool hasNAT;
@property unsigned long long ifIndex;
@property unsigned int ikeChildID;
@property (retain) NSArray *ikeConfig;
@property struct NEIPSecIKE_s { }*ikeRef;
@property bool isIfCellular;
@property (retain) NEIKEv2MOBIKE *mobikeHandle;
@property (retain) NSDictionary *options;
@property long long pathStatus;
@property (retain) NSObject<OS_dispatch_queue> *queue;
@property (retain) NEIKEv2Rekey *rekey;
@property (retain) NWResolver *resolver;
@property (retain) NWPathEvaluator *scopedPathEvaluator;
@property (retain) NEIKEv2Server *serverAddresses;
@property (copy) id /* block */ startTunnelCompletionHandler;
@property bool stopped;
@property struct NEVirtualInterface_s { }*virtualInterface;

- (void).cxx_destruct;
- (id)childConfig;
- (id)createPacketTunnelNetworkSettings;
- (void)dealloc;
- (id /* block */)dnsResolverCompletionHandler;
- (unsigned int)flags;
- (id)getSocketSemaphore;
- (void)handleAdditionalServerAddressesNotification:(id)arg1;
- (void)handleConfigChange;
- (void)handleDNSResolution;
- (void)handleDefaultPathChange;
- (void)handleInterfaceChange:(bool)arg1;
- (void)handleInterfaceDown;
- (long long)handleRedirectNotification:(id)arg1;
- (void)handleScopedPathChange;
- (bool)hasNAT;
- (unsigned long long)ifIndex;
- (void)ignoreSigPipe;
- (unsigned int)ikeChildID;
- (id)ikeConfig;
- (struct NEIPSecIKE_s { }*)ikeRef;
- (id)init;
- (bool)invokeStartTunnelCompletionHandler:(id)arg1;
- (bool)isIfCellular;
- (id)mobikeHandle;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)observerHelperHandler:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)options;
- (long long)pathStatus;
- (id)queue;
- (id)rekey;
- (void)reset:(bool)arg1;
- (void)resolveServerAddressIfNeeded:(id /* block */)arg1;
- (id)resolver;
- (bool)saveChildTunnelConfig:(void*)arg1;
- (bool)saveIKETunnelConfig:(void*)arg1;
- (id)scopedPathEvaluator;
- (id)serverAddresses;
- (void)setChildConfig:(id)arg1;
- (void)setDnsResolverCompletionHandler:(id /* block */)arg1;
- (void)setFlags:(unsigned int)arg1;
- (void)setGetSocketSemaphore:(id)arg1;
- (void)setHasNAT:(bool)arg1;
- (void)setIfIndex:(unsigned long long)arg1;
- (void)setIkeChildID:(unsigned int)arg1;
- (void)setIkeConfig:(id)arg1;
- (void)setIkeRef:(struct NEIPSecIKE_s { }*)arg1;
- (void)setIsIfCellular:(bool)arg1;
- (void)setMobikeHandle:(id)arg1;
- (void)setOptions:(id)arg1;
- (void)setPathStatus:(long long)arg1;
- (void)setQueue:(id)arg1;
- (void)setRekey:(id)arg1;
- (void)setResolver:(id)arg1;
- (void)setScopedPathEvaluator:(id)arg1;
- (void)setServerAddresses:(id)arg1;
- (void)setStartTunnelCompletionHandler:(id /* block */)arg1;
- (void)setStopped:(bool)arg1;
- (void)setTunnelNetworkSettings:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)setVirtualInterface:(struct NEVirtualInterface_s { }*)arg1;
- (void)startCompleteOrCancelTunnelWithError:(id)arg1;
- (void)startIKEv2TunnelWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)startRekeyTimer:(bool)arg1;
- (id /* block */)startTunnelCompletionHandler;
- (void)startTunnelWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)stopIKEv2TunnelWithReason:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)stopTunnelWithReason:(long long)arg1 completionHandler:(id /* block */)arg2;
- (bool)stopped;
- (bool)tryAlternateServerAddresses;
- (long long)tunnelBringup;
- (long long)tunnelTeardown;
- (struct NEVirtualInterface_s { }*)virtualInterface;
- (void)wake;
- (void)wakeIKEv2;
- (void)watchIKESocketChange;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
