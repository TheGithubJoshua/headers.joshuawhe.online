<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>BurstFaceStat.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Vision.framework/BurstFaceStat.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Vision.framework/Vision (2.0.70)
 */

@interface BurstFaceStat : NSObject <NSCopying> {
    int  FCRBlinkFeaturesSize;
    int  FCRLeftEyeFeaturesOffset;
    int  FCRRightEyeFeaturesOffset;
    NSMutableArray * FCRSmileAndBlinkFeatures;
    int  FCRSmileFeaturesOffset;
    int  FCRSmileFeaturesSize;
    bool  _hasPitchAngle;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _hwFaceRect;
    bool  _isSyncedWithImage;
    float  _pitchAngle;
    int  faceId;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  faceRect;
    float  faceScore;
    float  focusScore;
    bool  foundByFaceCore;
    int  framesSinceLast;
    bool  hasLeftEye;
    bool  hasRightEye;
    bool  hasRollAngle;
    bool  hasYawAngle;
    int  hwFaceId;
    float  leftEyeBlinkScore;
    bool  leftEyeOpen;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  leftEyeRect;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  normalizedFaceRect;
    float  normalizedFocusScore;
    float  normalizedSigma;
    float  rightEyeBlinkScore;
    bool  rightEyeOpen;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  rightEyeRect;
    float  rollAngle;
    bool  smallFace;
    float  smileScore;
    bool  smiling;
    double  timestamp;
    float  yawAngle;
}

@property int FCRBlinkFeaturesSize;
@property int FCRLeftEyeFeaturesOffset;
@property int FCRRightEyeFeaturesOffset;
@property (retain) NSMutableArray *FCRSmileAndBlinkFeatures;
@property int FCRSmileFeaturesOffset;
@property int FCRSmileFeaturesSize;
@property int faceId;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } faceRect;
@property float faceScore;
@property float focusScore;
@property bool foundByFaceCore;
@property int framesSinceLast;
@property bool hasLeftEye;
@property bool hasPitchAngle;
@property bool hasRightEye;
@property bool hasRollAngle;
@property bool hasYawAngle;
@property int hwFaceId;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } hwFaceRect;
@property bool isSyncedWithImage;
@property float leftEyeBlinkScore;
@property bool leftEyeOpen;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } leftEyeRect;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } normalizedFaceRect;
@property float normalizedFocusScore;
@property float normalizedSigma;
@property float pitchAngle;
@property float rightEyeBlinkScore;
@property bool rightEyeOpen;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } rightEyeRect;
@property float rollAngle;
@property bool smallFace;
@property float smileScore;
@property bool smiling;
@property double timestamp;
@property float yawAngle;

- (void).cxx_destruct;
- (int)FCRBlinkFeaturesSize;
- (int)FCRLeftEyeFeaturesOffset;
- (int)FCRRightEyeFeaturesOffset;
- (id)FCRSmileAndBlinkFeatures;
- (int)FCRSmileFeaturesOffset;
- (int)FCRSmileFeaturesSize;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (int)faceId;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })faceRect;
- (float)faceScore;
- (float)focusScore;
- (bool)foundByFaceCore;
- (int)framesSinceLast;
- (bool)hasLeftEye;
- (bool)hasPitchAngle;
- (bool)hasRightEye;
- (bool)hasRollAngle;
- (bool)hasYawAngle;
- (int)hwFaceId;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hwFaceRect;
- (id)initWithFaceStat:(id)arg1;
- (bool)isSyncedWithImage;
- (float)leftEyeBlinkScore;
- (bool)leftEyeOpen;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })leftEyeRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedFaceRect;
- (float)normalizedFocusScore;
- (float)normalizedSigma;
- (float)pitchAngle;
- (float)rightEyeBlinkScore;
- (bool)rightEyeOpen;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rightEyeRect;
- (float)rollAngle;
- (void)setFCRBlinkFeaturesSize:(int)arg1;
- (void)setFCRLeftEyeFeaturesOffset:(int)arg1;
- (void)setFCRRightEyeFeaturesOffset:(int)arg1;
- (void)setFCRSmileAndBlinkFeatures:(id)arg1;
- (void)setFCRSmileFeaturesOffset:(int)arg1;
- (void)setFCRSmileFeaturesSize:(int)arg1;
- (void)setFaceId:(int)arg1;
- (void)setFaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFaceScore:(float)arg1;
- (void)setFocusScore:(float)arg1;
- (void)setFoundByFaceCore:(bool)arg1;
- (void)setFramesSinceLast:(int)arg1;
- (void)setHasLeftEye:(bool)arg1;
- (void)setHasPitchAngle:(bool)arg1;
- (void)setHasRightEye:(bool)arg1;
- (void)setHasRollAngle:(bool)arg1;
- (void)setHasYawAngle:(bool)arg1;
- (void)setHwFaceId:(int)arg1;
- (void)setHwFaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIsSyncedWithImage:(bool)arg1;
- (void)setLeftEyeBlinkScore:(float)arg1;
- (void)setLeftEyeOpen:(bool)arg1;
- (void)setLeftEyeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNormalizedFaceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNormalizedFocusScore:(float)arg1;
- (void)setNormalizedSigma:(float)arg1;
- (void)setPitchAngle:(float)arg1;
- (void)setRightEyeBlinkScore:(float)arg1;
- (void)setRightEyeOpen:(bool)arg1;
- (void)setRightEyeRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRollAngle:(float)arg1;
- (void)setSmallFace:(bool)arg1;
- (void)setSmileScore:(float)arg1;
- (void)setSmiling:(bool)arg1;
- (void)setTimestamp:(double)arg1;
- (void)setYawAngle:(float)arg1;
- (bool)smallFace;
- (float)smileScore;
- (bool)smiling;
- (double)timestamp;
- (float)yawAngle;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
