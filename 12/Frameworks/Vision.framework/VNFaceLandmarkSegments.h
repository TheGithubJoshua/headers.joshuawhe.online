<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>VNFaceLandmarkSegments.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Vision.framework/VNFaceLandmarkSegments.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Vision.framework/Vision (2.0.70)
 */

@interface VNFaceLandmarkSegments : NSObject <NSCopying, NSSecureCoding, VNRequestRevisionProviding> {
    unsigned long long  _espressoOutputBufferChannels;
    NSData * _espressoOutputBufferData;
    unsigned long long  _espressoOutputBufferHeight;
    unsigned long long  _espressoOutputBufferWidth;
    unsigned long long  _requestRevision;
}

@property (nonatomic) unsigned long long espressoOutputBufferChannels;
@property (nonatomic, retain) NSData *espressoOutputBufferData;
@property (nonatomic) unsigned long long espressoOutputBufferHeight;
@property (nonatomic) unsigned long long espressoOutputBufferWidth;
@property (nonatomic, readonly) unsigned long long requestRevision;

+ (int)_argmax3:(const float*)arg1 index:(int)arg2 segmentedImageSize:(struct CGSize { double x1; double x2; })arg3 numberOfSegments:(unsigned long long)arg4;
+ (struct map<int, int, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, int> > > { struct __tree<std::__1::__value_type<int, int>, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, int> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_1_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, int>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, int>, std::__1::less<int>, true> > { unsigned long long x_3_2_1; } x_1_1_3; } x1; })_faceLandmarkIndexToFlagMap;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (struct __CVBuffer { }*)createImageOfFaceLandmarkSegments:(unsigned long long)arg1 error:(id*)arg2;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)espressoOutputBufferChannels;
- (id)espressoOutputBufferData;
- (unsigned long long)espressoOutputBufferHeight;
- (unsigned long long)espressoOutputBufferWidth;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithRequestRevision:(unsigned long long)arg1 espressoOutputBufferWidth:(unsigned long long)arg2 espressoOutputBufferHeight:(unsigned long long)arg3 espressoOutputBufferChannels:(unsigned long long)arg4 espressoOutputBufferData:(id)arg5;
- (bool)isEqual:(id)arg1;
- (unsigned long long)requestRevision;
- (void)setEspressoOutputBufferChannels:(unsigned long long)arg1;
- (void)setEspressoOutputBufferData:(id)arg1;
- (void)setEspressoOutputBufferHeight:(unsigned long long)arg1;
- (void)setEspressoOutputBufferWidth:(unsigned long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
