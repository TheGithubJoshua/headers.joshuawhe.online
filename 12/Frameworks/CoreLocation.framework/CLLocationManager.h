<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CLLocationManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreLocation.framework/CLLocationManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreLocation.framework/CoreLocation (2245.16.14)
 */

@interface CLLocationManager : NSObject {
    id  _internal;
}

@property (nonatomic) long long activityType;
@property (nonatomic) bool allowsAlteredAccessoryLocations;
@property (nonatomic) bool allowsBackgroundLocationUpdates;
@property (nonatomic) <CLLocationManagerDelegate> *delegate;
@property (nonatomic) double desiredAccuracy;
@property (nonatomic) double distanceFilter;
@property (getter=isDynamicAccuracyReductionEnabled, nonatomic) bool dynamicAccuracyReductionEnabled;
@property (nonatomic, readonly) double expectedGpsUpdateInterval;
@property (nonatomic, readonly, copy) CLHeading *heading;
@property (nonatomic, readonly) bool headingAvailable;
@property (nonatomic) double headingFilter;
@property (nonatomic) int headingOrientation;
@property (nonatomic, readonly) struct __CLClient { }*internalClient;
@property (nonatomic, readonly, copy) CLLocation *location;
@property (nonatomic, readonly) bool locationServicesApproved;
@property (nonatomic, readonly) bool locationServicesAvailable;
@property (nonatomic, readonly) bool locationServicesEnabled;
@property (getter=isLocationServicesPreferencesDialogEnabled, nonatomic) bool locationServicesPreferencesDialogEnabled;
@property (getter=isMatchInfoEnabled, nonatomic) bool matchInfoEnabled;
@property (nonatomic, readonly) double maximumRegionMonitoringDistance;
@property (nonatomic, readonly, copy) NSSet *monitoredRegions;
@property (nonatomic) bool pausesLocationUpdatesAutomatically;
@property (getter=isPersistentMonitoringEnabled, nonatomic) bool persistentMonitoringEnabled;
@property (nonatomic) bool privateMode;
@property (nonatomic, copy) NSString *purpose;
@property (nonatomic, readonly, copy) NSSet *rangedRegions;
@property (nonatomic) bool showsBackgroundLocationIndicator;
@property (nonatomic) bool supportInfo;

// Image: /System/Library/Frameworks/CoreLocation.framework/CoreLocation

+ (int)_authorizationStatus;
+ (int)_authorizationStatusForBundleIdentifier:(id)arg1 bundle:(id)arg2;
+ (int)_regionMonitoringAuthorizationStatusForBundleIdentifier:(id)arg1 bundle:(id)arg2;
+ (unsigned long long)activeLocationServiceTypesForLocationDictionary:(id)arg1;
+ (bool)advertiseAsBeacon:(id)arg1 withPower:(id)arg2;
+ (unsigned long long)allowableAuthorizationForLocationDictionary:(id)arg1;
+ (int)authorizationStatus;
+ (int)authorizationStatusForBundle:(id)arg1;
+ (int)authorizationStatusForBundleIdentifier:(id)arg1;
+ (bool)backgroundIndicatorEnabledForLocationDictionary:(id)arg1;
+ (bool)bundleSupported:(id)arg1;
+ (id)dateLocationLastUsedForLocationDictionary:(id)arg1;
+ (bool)deferredLocationUpdatesAvailable;
+ (void)dumpDiagnosticFilesWithHandler:(id /* block */)arg1;
+ (bool)dumpLogsWithMessage:(id)arg1;
+ (unsigned long long)entityAuthorizationForLocationDictionary:(id)arg1;
+ (unsigned long long)entityClassesForLocationDictionary:(id)arg1;
+ (bool)hasUsedBackgroundLocationServices:(id)arg1;
+ (bool)headingAvailable;
+ (bool)isEntityAuthorizedForLocationDictionary:(id)arg1;
+ (bool)isLocationActiveForLocationDictionary:(id)arg1;
+ (bool)isMicroLocationAvailable;
+ (bool)isMonitoringAvailableForClass:(Class)arg1;
+ (bool)isPeerRangingAvailable;
+ (bool)isRangingAvailable;
+ (bool)isStatusBarIconEnabledForLocationEntityClass:(unsigned long long)arg1;
+ (bool)locationServicesEnabled;
+ (bool)locationServicesEnabled:(bool)arg1;
+ (bool)mapCorrectionAvailable;
+ (unsigned long long)primaryEntityClassForLocationDictionary:(id)arg1;
+ (int)regionMonitoringAuthorizationStatusForBundle:(id)arg1;
+ (int)regionMonitoringAuthorizationStatusForBundleIdentifier:(id)arg1;
+ (bool)regionMonitoringAvailable;
+ (bool)regionMonitoringEnabled;
+ (void)setAuthorizationStatus:(bool)arg1 forBundle:(id)arg2;
+ (void)setAuthorizationStatus:(bool)arg1 forBundleIdentifier:(id)arg2;
+ (void)setAuthorizationStatusByType:(int)arg1 forBundle:(id)arg2;
+ (void)setAuthorizationStatusByType:(int)arg1 forBundleIdentifier:(id)arg2;
+ (void)setBackgroundIndicatorEnabled:(bool)arg1 forBundle:(id)arg2;
+ (void)setBackgroundIndicatorEnabled:(bool)arg1 forBundleIdentifier:(id)arg2;
+ (void)setBackgroundIndicatorEnabled:(bool)arg1 forLocationDictionary:(id)arg2;
+ (void)setDefaultEffectiveBundle:(id)arg1;
+ (void)setDefaultEffectiveBundleIdentifier:(id)arg1;
+ (void)setEntityAuthorization:(unsigned long long)arg1 forLocationDictionary:(id)arg2;
+ (void)setEntityAuthorized:(bool)arg1 forLocationDictionary:(id)arg2;
+ (void)setLocationServicesEnabled:(bool)arg1;
+ (void)setStatusBarIconEnabled:(bool)arg1 forLocationEntityClass:(unsigned long long)arg2;
+ (id)sharedManager;
+ (bool)shutdownDaemon;
+ (bool)significantLocationChangeMonitoringAvailable;

- (void)_startLeechingVisits;
- (void)_startMonitoringSignificantLocationChangesOfDistance:(double)arg1 withPowerBudget:(int)arg2;
- (long long)activityType;
- (void)allowDeferredLocationUpdatesUntilTraveled:(double)arg1 timeout:(double)arg2;
- (bool)allowsAlteredAccessoryLocations;
- (bool)allowsBackgroundLocationUpdates;
- (id)appsUsingLocation;
- (id)appsUsingLocationWithDetails;
- (void)dealloc;
- (id)delegate;
- (double)desiredAccuracy;
- (void)disallowDeferredLocationUpdates;
- (void)dismissHeadingCalibrationDisplay;
- (double)distanceFilter;
- (double)expectedGpsUpdateInterval;
- (id)heading;
- (bool)headingAvailable;
- (double)headingFilter;
- (int)headingOrientation;
- (id)init;
- (id)initWithEffectiveBundle:(id)arg1;
- (id)initWithEffectiveBundleIdentifier:(id)arg1;
- (id)initWithEffectiveBundleIdentifier:(id)arg1 bundle:(id)arg2;
- (struct __CLClient { }*)internalClient;
- (bool)isDynamicAccuracyReductionEnabled;
- (bool)isLocationServicesPreferencesDialogEnabled;
- (bool)isMatchInfoEnabled;
- (bool)isPersistentMonitoringEnabled;
- (id)location;
- (bool)locationServicesApproved;
- (bool)locationServicesAvailable;
- (bool)locationServicesEnabled;
- (void)markAsHavingReceivedLocation;
- (double)maximumRegionMonitoringDistance;
- (id)monitoredRegions;
- (void)onClientEvent:(int)arg1 supportInfo:(id)arg2;
- (void)onClientEventAuthStatus:(id)arg1;
- (void)onClientEventAutopauseStatus:(id)arg1;
- (void)onClientEventBatch:(id)arg1;
- (void)onClientEventError:(id)arg1;
- (void)onClientEventHeading:(id)arg1;
- (void)onClientEventHeadingCalibration:(id)arg1;
- (void)onClientEventInterrupted:(id)arg1;
- (void)onClientEventLocation:(id)arg1 forceMapMatching:(bool)arg2 type:(id)arg3;
- (void)onClientEventLocationUnavailable:(id)arg1;
- (void)onClientEventMicroLocation:(id)arg1;
- (void)onClientEventPeerRanging:(id)arg1;
- (void)onClientEventPeerRangingError:(id)arg1;
- (void)onClientEventPeerRangingRequestProcessed:(id)arg1;
- (void)onClientEventRanging:(id)arg1;
- (void)onClientEventRangingError:(id)arg1;
- (void)onClientEventRegion:(id)arg1;
- (void)onClientEventRegionError:(id)arg1;
- (void)onClientEventRegionResponseDelayed:(id)arg1;
- (void)onClientEventRegionSetupCompleted:(id)arg1;
- (void)onClientEventRegionState:(id)arg1;
- (void)onClientEventSignificantLocationVisit:(id)arg1;
- (void)onClientEventVehicleHeading:(id)arg1;
- (void)onClientEventVehicleSpeed:(id)arg1;
- (void)onDidBecomeActive:(id)arg1;
- (void)onLocationRequestTimeout;
- (void)onRangingRequestTimeout;
- (void)pauseLocationUpdates:(bool)arg1;
- (bool)pausesLocationUpdatesAutomatically;
- (bool)privateMode;
- (id)purpose;
- (id)rangedRegions;
- (void)registerAsLocationClient;
- (void)requestAlwaysAuthorization;
- (void)requestCurrentMicroLocation;
- (void)requestLocation;
- (void)requestRangingToPeers:(id)arg1 timeoutSeconds:(double)arg2;
- (void)requestStateForRegion:(id)arg1;
- (void)requestWhenInUseAuthorization;
- (void)requestWhenInUseAuthorizationWithPrompt;
- (void)resetApps;
- (void)respondToRangingFromPeers:(id)arg1 timeoutSeconds:(double)arg2;
- (void)resumeLocationUpdates;
- (void)setActivityType:(long long)arg1;
- (void)setAllowsAlteredAccessoryLocations:(bool)arg1;
- (void)setAllowsBackgroundLocationUpdates:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDesiredAccuracy:(double)arg1;
- (void)setDistanceFilter:(double)arg1;
- (void)setDynamicAccuracyReductionEnabled:(bool)arg1;
- (void)setHeadingFilter:(double)arg1;
- (void)setHeadingOrientation:(int)arg1;
- (void)setIsActuallyAWatchKitExtension:(bool)arg1;
- (void)setLocationServicesPreferencesDialogEnabled:(bool)arg1;
- (void)setMatchInfoEnabled:(bool)arg1;
- (void)setPausesLocationUpdatesAutomatically:(bool)arg1;
- (void)setPersistentMonitoringEnabled:(bool)arg1;
- (void)setPrivateMode:(bool)arg1;
- (void)setPurpose:(id)arg1;
- (void)setShowsBackgroundLocationIndicator:(bool)arg1;
- (void)setSupportInfo:(bool)arg1;
- (bool)showsBackgroundLocationIndicator;
- (void)startAppStatusUpdates;
- (void)startMonitoringForRegion:(id)arg1;
- (void)startMonitoringForRegion:(id)arg1 desiredAccuracy:(double)arg2;
- (void)startMonitoringSignificantLocationChanges;
- (void)startMonitoringVisits;
- (void)startRangingBeaconsInRegion:(id)arg1;
- (void)startRangingFromPeers:(id)arg1;
- (void)startRangingToPeers:(id)arg1 intervalSeconds:(unsigned long long)arg2;
- (void)startTechStatusUpdates;
- (void)startUpdatingHeading;
- (void)startUpdatingLocation;
- (void)startUpdatingLocationWithPrompt;
- (void)startUpdatingMicroLocation;
- (void)startUpdatingMicroLocationForLocationOfInterest:(id)arg1;
- (void)startUpdatingVehicleHeading;
- (void)startUpdatingVehicleSpeed;
- (void)stopAppStatusUpdates;
- (void)stopMonitoringForRegion:(id)arg1;
- (void)stopMonitoringSignificantLocationChanges;
- (void)stopMonitoringVisits;
- (void)stopRangingBeaconsInRegion:(id)arg1;
- (void)stopRangingFromPeers:(id)arg1;
- (void)stopRangingToPeers:(id)arg1;
- (void)stopTechStatusUpdates;
- (void)stopUpdatingHeading;
- (void)stopUpdatingLocation;
- (void)stopUpdatingMicroLocation;
- (void)stopUpdatingVehicleHeading;
- (void)stopUpdatingVehicleSpeed;
- (bool)supportInfo;
- (id)technologiesInUse;

// Image: /System/Library/Frameworks/HomeKit.framework/HomeKit

+ (bool)convertAuthStatusToBool:(int)arg1;
+ (int)convertToHMDLocationAuthorization:(int)arg1;
+ (int)convertToHMDRegionState:(long long)arg1;
+ (id)hmdLocationAuthorizationAsString:(int)arg1;
+ (id)hmdRegionStateAsString:(int)arg1;
+ (id)locationAuthorizationDescription:(int)arg1;
+ (id)referenceFrameDescription:(int)arg1;
+ (id)regionDescription:(id)arg1;
+ (id)regionStateDescription:(long long)arg1;

// Image: /System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices

+ (id)_af_createSiriLocationManagerWithSetupBlock:(id /* block */)arg1;

// Image: /System/Library/PrivateFrameworks/HomeKitDaemon.framework/HomeKitDaemon

+ (bool)convertAuthStatusToBool:(int)arg1;
+ (int)convertToHMDLocationAuthorization:(int)arg1;
+ (int)convertToHMDRegionState:(long long)arg1;
+ (id)hmdLocationAuthorizationAsString:(int)arg1;
+ (id)hmdRegionStateAsString:(int)arg1;
+ (id)locationAuthorizationDescription:(int)arg1;
+ (id)referenceFrameDescription:(int)arg1;
+ (id)regionDescription:(id)arg1;
+ (id)regionStateDescription:(long long)arg1;

// Image: /System/Library/PrivateFrameworks/Stocks/StocksUI.framework/StocksUI

+ (void)su_enableIAdCoreLocationAuthorizationOnMac;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
