<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_MTLFunctionInternal.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Metal.framework/_MTLFunctionInternal.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Metal.framework/Metal (161.6.2)
 */

@interface _MTLFunctionInternal : _MTLFunction {
    NSString * _filePath;
    struct MTLFunctionData { 
        unsigned long long bitCodeOffset; 
        unsigned long long bitCodeFileSize; 
        unsigned long long publicArgumentsOffset; 
        unsigned long long privateArgumentsOffset; 
        unsigned long long sourceArchiveOffset; 
        unsigned short airMajorVersion; 
        unsigned short airMinorVersion; 
        unsigned short languageMajorVersion; 
        unsigned short languageMinorVersion; 
        struct { 
            unsigned char key[32]; 
        } bitcodeHash; 
        unsigned char bitcodeType; 
        unsigned char renderTargetArrayIndexType; 
        unsigned int patchType : 2; 
        unsigned int controlPointCount : 6; 
        NSObject<OS_dispatch_data> *functionInputs; 
    }  _functionData;
    long long  _lineNumber;
    unsigned char  _privateMetadataInitialized;
    struct MTLProgramObject { struct VariantList<4> { struct Chunk { struct VariantEntry { char *x_1_3_1; unsigned long long x_1_3_2; unsigned long long x_1_3_3; unsigned long long x_1_3_4; id x_1_3_5; id x_1_3_6; unsigned long long x_1_3_7; id x_1_3_8; } x_1_2_1[4]; struct Chunk {} *x_1_2_2; } x_1_1_1; struct Chunk {} *x_1_1_2; unsigned int x_1_1_3; struct VariantEntry { char *x_4_2_1; unsigned long long x_4_2_2; unsigned long long x_4_2_3; unsigned long long x_4_2_4; id x_4_2_5; id x_4_2_6; unsigned long long x_4_2_7; id x_4_2_8; } x_1_1_4; } x1; id x2; id x3; id x4; id x5; } * _programObject;
    unsigned char  _publicMetadataInitialized;
    unsigned char  _sourceArchiveMetadataInitialized;
}

- (id).cxx_construct;
- (id)arguments;
- (unsigned long long)bitCodeFileSize;
- (const struct { unsigned char x1[32]; }*)bitCodeHash;
- (unsigned long long)bitCodeOffset;
- (unsigned char)bitcodeType;
- (void)dealloc;
- (id)filePath;
- (id)functionConstants;
- (id)functionConstantsDictionary;
- (const struct MTLFunctionData { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; struct { unsigned char x_10_1_1[32]; } x10; unsigned char x11; unsigned char x12; unsigned int x13 : 2; unsigned int x14 : 6; id x15; }*)functionData;
- (id)functionInputs;
- (id)initWithName:(id)arg1 type:(unsigned long long)arg2 libraryData:(struct MTLLibraryData { int (**x1)(); int x2; id x3; id x4; }*)arg3 functionData:(struct MTLFunctionData { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; unsigned short x6; unsigned short x7; unsigned short x8; unsigned short x9; struct { unsigned char x_10_1_1[32]; } x10; unsigned char x11; unsigned char x12; unsigned int x13 : 2; unsigned int x14 : 6; id x15; }*)arg4 device:(id)arg5;
- (void)initializePrivateMetadata;
- (void)initializePublicMetadata;
- (void)initializeSourceArchive;
- (long long)lineNumber;
- (bool)needsFunctionConstantValues;
- (id)newSpecializedFunctionWithRequestType:(int)arg1 llvmTargetVersion:(unsigned int)arg2 constants:(id)arg3 functionCache:(id)arg4 error:(id*)arg5;
- (void)newSpecializedFunctionWithRequestType:(int)arg1 llvmTargetVersion:(unsigned int)arg2 constants:(id)arg3 functionCache:(id)arg4 sync:(bool)arg5 completionHandler:(id /* block */)arg6;
- (long long)patchControlPointCount;
- (unsigned long long)patchType;
- (struct MTLProgramObject { struct VariantList<4> { struct Chunk { struct VariantEntry { char *x_1_3_1; unsigned long long x_1_3_2; unsigned long long x_1_3_3; unsigned long long x_1_3_4; id x_1_3_5; id x_1_3_6; unsigned long long x_1_3_7; id x_1_3_8; } x_1_2_1[4]; struct Chunk {} *x_1_2_2; } x_1_1_1; struct Chunk {} *x_1_1_2; unsigned int x_1_1_3; struct VariantEntry { char *x_4_2_1; unsigned long long x_4_2_2; unsigned long long x_4_2_3; unsigned long long x_4_2_4; id x_4_2_5; id x_4_2_6; unsigned long long x_4_2_7; id x_4_2_8; } x_1_1_4; } x1; id x2; id x3; id x4; id x5; }*)programObject;
- (unsigned long long)renderTargetArrayIndexType;
- (id)returnType;
- (void)setArguments:(id)arg1;
- (void)setFilePath:(id)arg1;
- (void)setFunctionConstants:(id)arg1;
- (void)setLineNumber:(long long)arg1;
- (void)setReturnType:(id)arg1;
- (void)setSourceArchiveOffset:(unsigned long long)arg1;
- (void)setStageInputAttributes:(id)arg1;
- (void)setUnpackedFilePath:(id)arg1;
- (void)setVertexAttributes:(id)arg1;
- (unsigned long long)sourceArchiveOffset;
- (id)stageInputAttributes;
- (id)unpackedFilePath;
- (id)vertexAttributes;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
