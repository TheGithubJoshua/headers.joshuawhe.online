<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MTLRenderPassDescriptorInternal.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Metal.framework/MTLRenderPassDescriptorInternal.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Metal.framework/Metal (161.6.2)
 */

@interface MTLRenderPassDescriptorInternal : MTLRenderPassDescriptor {
    struct MTLRenderPassDescriptorPrivate { 
        MTLRenderPassColorAttachmentDescriptorArrayInternal *attachments; 
        <MTLBuffer> *visibilityResultBuffer; 
        unsigned long long renderTargetWidth; 
        unsigned long long renderTargetHeight; 
        unsigned long long defaultColorSampleCount; 
        bool fineGrainedBackgroundVisibilityEnabled; 
        bool ditherEnabled; 
        bool openGLModeEnabled; 
        unsigned long long renderTargetArrayLength; 
        unsigned long long tileWidth; 
        unsigned long long tileHeight; 
        union { 
            unsigned long long defaultSampleCount; 
            unsigned long long defaultRasterSampleCount; 
        } ; 
        unsigned long long imageBlockSampleLength; 
        unsigned long long threadgroupMemoryLength; 
        struct { 
            float x; 
            float y; 
        } customSamplePositions[4]; 
        unsigned long long numCustomSamplePositions; 
    }  _private;
}

+ (id)renderPassDescriptor;

- (const struct MTLRenderPassDescriptorPrivate { id x1; id x2; unsigned long long x3; unsigned long long x4; unsigned long long x5; bool x6; bool x7; bool x8; unsigned long long x9; unsigned long long x10; unsigned long long x11; union { unsigned long long x_12_1_1; unsigned long long x_12_1_2; } x12; unsigned long long x13; unsigned long long x14; struct { float x_15_1_1; float x_15_1_2; } x15[4]; unsigned long long x16; }*)_descriptorPrivate;
- (id)colorAttachments;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (unsigned long long)defaultColorSampleCount;
- (unsigned long long)defaultRasterSampleCount;
- (id)depthAttachment;
- (id)description;
- (bool)fineGrainedBackgroundVisibilityEnabled;
- (id)formattedDescription:(unsigned long long)arg1;
- (unsigned long long)getSamplePositions:(struct { float x1; float x2; }*)arg1 count:(unsigned long long)arg2;
- (unsigned long long)hash;
- (unsigned long long)imageblockSampleLength;
- (id)init;
- (bool)isDitherEnabled;
- (bool)isEqual:(id)arg1;
- (bool)openGLModeEnabled;
- (unsigned long long)renderTargetArrayLength;
- (unsigned long long)renderTargetHeight;
- (unsigned long long)renderTargetWidth;
- (void)setDefaultColorSampleCount:(unsigned long long)arg1;
- (void)setDefaultRasterSampleCount:(unsigned long long)arg1;
- (void)setDepthAttachment:(id)arg1;
- (void)setDitherEnabled:(bool)arg1;
- (void)setFineGrainedBackgroundVisibilityEnabled:(bool)arg1;
- (void)setImageblockSampleLength:(unsigned long long)arg1;
- (void)setOpenGLModeEnabled:(bool)arg1;
- (void)setRenderTargetArrayLength:(unsigned long long)arg1;
- (void)setRenderTargetHeight:(unsigned long long)arg1;
- (void)setRenderTargetWidth:(unsigned long long)arg1;
- (void)setSamplePositions:(const struct { float x1; float x2; }*)arg1 count:(unsigned long long)arg2;
- (void)setStencilAttachment:(id)arg1;
- (void)setThreadgroupMemoryLength:(unsigned long long)arg1;
- (void)setTileHeight:(unsigned long long)arg1;
- (void)setTileWidth:(unsigned long long)arg1;
- (void)setVisibilityResultBuffer:(id)arg1;
- (id)stencilAttachment;
- (unsigned long long)threadgroupMemoryLength;
- (unsigned long long)tileHeight;
- (unsigned long long)tileWidth;
- (bool)validate:(id)arg1 width:(unsigned long long*)arg2 height:(unsigned long long*)arg3;
- (id)visibilityResultBuffer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
