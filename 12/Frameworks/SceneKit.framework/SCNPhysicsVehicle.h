<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCNPhysicsVehicle.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SceneKit.framework/SCNPhysicsVehicle.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit (470.10)
 */

@interface SCNPhysicsVehicle : SCNPhysicsBehavior {
    SCNPhysicsBody * _chassisBody;
    double  _speedKmHour;
    struct btRaycastVehicle { int (**x1)(); struct btAlignedObjectArray<btVector3> { struct btAlignedAllocator<btVector3, 16> { } x_2_1_1; int x_2_1_2; int x_2_1_3; struct btVector3 {} *x_2_1_4; bool x_2_1_5; } x2; struct btAlignedObjectArray<btVector3> { struct btAlignedAllocator<btVector3, 16> { } x_3_1_1; int x_3_1_2; int x_3_1_3; struct btVector3 {} *x_3_1_4; bool x_3_1_5; } x3; struct btAlignedObjectArray<float> { struct btAlignedAllocator<float, 16> { } x_4_1_1; int x_4_1_2; int x_4_1_3; float *x_4_1_4; bool x_4_1_5; } x4; struct btAlignedObjectArray<float> { struct btAlignedAllocator<float, 16> { } x_5_1_1; int x_5_1_2; int x_5_1_3; float *x_5_1_4; bool x_5_1_5; } x5; int x6; int x7; float x8; float x9; struct btVehicleRaycaster {} *x10; float x11; float x12; float x13; struct btRigidBody {} *x14; int x15; int x16; int x17; struct btAlignedObjectArray<btWheelInfo> { struct btAlignedAllocator<btWheelInfo, 16> { } x_18_1_1; int x_18_1_2; int x_18_1_3; struct btWheelInfo {} *x_18_1_4; bool x_18_1_5; } x18; } * _vehicle;
    NSArray * _wheels;
    SCNPhysicsWorld * _world;
}

@property (nonatomic, readonly) SCNPhysicsBody *chassisBody;
@property (nonatomic, readonly) double speedInKilometersPerHour;
@property (nonatomic, readonly) NSArray *wheels;

+ (bool)supportsSecureCoding;
+ (id)vehicleWithChassisBody:(id)arg1 wheels:(id)arg2;

- (void)_addToPhysicsWorld:(id)arg1;
- (void)_createWheel:(id)arg1;
- (void)_customDecodingOfSCNPhysicsVehicle:(id)arg1;
- (void)_handleCreateIfNeeded:(bool)arg1;
- (void)_initializeWheelsArray;
- (void)_update;
- (void)_willRemoveFromPhysicsWorld:(id)arg1;
- (void)applyBrakingForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)applyEngineForce:(double)arg1 forWheelAtIndex:(long long)arg2;
- (struct btRaycastVehicle { int (**x1)(); struct btAlignedObjectArray<btVector3> { struct btAlignedAllocator<btVector3, 16> { } x_2_1_1; int x_2_1_2; int x_2_1_3; struct btVector3 {} *x_2_1_4; bool x_2_1_5; } x2; struct btAlignedObjectArray<btVector3> { struct btAlignedAllocator<btVector3, 16> { } x_3_1_1; int x_3_1_2; int x_3_1_3; struct btVector3 {} *x_3_1_4; bool x_3_1_5; } x3; struct btAlignedObjectArray<float> { struct btAlignedAllocator<float, 16> { } x_4_1_1; int x_4_1_2; int x_4_1_3; float *x_4_1_4; bool x_4_1_5; } x4; struct btAlignedObjectArray<float> { struct btAlignedAllocator<float, 16> { } x_5_1_1; int x_5_1_2; int x_5_1_3; float *x_5_1_4; bool x_5_1_5; } x5; int x6; int x7; float x8; float x9; struct btVehicleRaycaster {} *x10; float x11; float x12; float x13; struct btRigidBody {} *x14; int x15; int x16; int x17; struct btAlignedObjectArray<btWheelInfo> { struct btAlignedAllocator<btWheelInfo, 16> { } x_18_1_1; int x_18_1_2; int x_18_1_3; struct btWheelInfo {} *x_18_1_4; bool x_18_1_5; } x18; }*)btVehicle;
- (id)chassisBody;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (bool)hasReferenceToPhysicsBody:(id)arg1;
- (id)initWithChassisBody:(id)arg1 wheels:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)physicsWorld;
- (void)setSteeringAngle:(double)arg1 forWheelAtIndex:(long long)arg2;
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;
- (double)speedInKilometersPerHour;
- (id)valueForKeyPath:(id)arg1;
- (id)wheelAtIndex:(unsigned long long)arg1;
- (id)wheels;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
