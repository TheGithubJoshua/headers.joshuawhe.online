<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCNAnimationPlayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SceneKit.framework/SCNAnimationPlayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit (470.10)
 */

@interface SCNAnimationPlayer : NSObject <NSCopying, NSSecureCoding, SCNAnimatable> {
    SCNAnimation * _animation;
    SCNOrderedDictionary * _animations;
    NSMutableDictionary * _bindings;
    bool  _paused;
    struct __C3DAnimationPlayer { } * _playerRef;
    float  _speed;
    float  _weight;
}

@property (nonatomic, readonly) SCNAnimation *animation;
@property (readonly) NSArray *animationKeys;
@property (nonatomic) double blendFactor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool paused;
@property (nonatomic) double speed;
@property (readonly) Class superclass;

+ (id)animationPlayerWithAnimation:(id)arg1;
+ (id)animationPlayerWithAnimationPlayerRef:(struct __C3DAnimationPlayer { }*)arg1;
+ (id)animationPlayerWithSCNAnimation:(id)arg1;
+ (bool)supportsSecureCoding;

- (const void*)__CFObject;
- (bool)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (void)_copyAnimationsFrom:(id)arg1;
- (void)_pauseAnimation:(bool)arg1 forKey:(id)arg2 pausedByNode:(bool)arg3;
- (id)_scnAnimationForKey:(id)arg1;
- (id)_scnBindings;
- (void)_setAnimation:(id)arg1;
- (void)_syncObjCAnimations;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)addAnimationPlayer:(id)arg1 forKey:(id)arg2;
- (id)animation;
- (id)animationForKey:(id)arg1;
- (id)animationKeys;
- (struct __C3DAnimationManager { }*)animationManager;
- (id)animationPlayerForKey:(id)arg1;
- (struct __C3DAnimationPlayer { }*)animationPlayerRef;
- (void)bindAnimatablePath:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (double)blendFactor;
- (void)commonInit;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithAnimationPlayerRef:(struct __C3DAnimationPlayer { }*)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithSCNAnimation:(id)arg1;
- (bool)isAnimationForKeyPaused:(id)arg1;
- (void)pauseAnimationForKey:(id)arg1;
- (bool)paused;
- (void)play;
- (void)prepareWithTarget:(id)arg1 implicitDuration:(double)arg2;
- (void)removeAllAnimations;
- (void)removeAllBindings;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 blendOutDuration:(double)arg2;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (id)scene;
- (struct __C3DScene { }*)sceneRef;
- (void)setBlendFactor:(double)arg1;
- (void)setPaused:(bool)arg1;
- (void)setSpeed:(double)arg1;
- (void)setSpeed:(double)arg1 forAnimationKey:(id)arg2;
- (void)setWeight:(float)arg1;
- (double)speed;
- (void)stop;
- (void)stopWithBlendOutDuration:(double)arg1;
- (void)stopWithFadeOutDuration:(double)arg1;
- (void)unbindAnimatablePath:(id)arg1;
- (float)weight;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
