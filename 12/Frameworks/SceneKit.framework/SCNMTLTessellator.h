<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCNMTLTessellator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SceneKit.framework/SCNMTLTessellator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit (470.10)
 */

@interface SCNMTLTessellator : NSObject {
    struct { 
        unsigned char type; 
        float tessellationFactorScale; 
        unsigned int tessellationPartitionMode; 
        unsigned char tessellationSmoothingMode; 
        union { 
            struct { 
                float edgeTessellationFactor; 
                float insideTessellationFactor; 
            } uniform; 
            struct { 
                float projectedEdgeLength; 
            } screenSpaceAdaptive; 
            struct { 
                float maximumEdgeLength; 
            } constrainedEdgeLength; 
            struct { 
                unsigned char tessellationLevel; 
                unsigned int wantsSingleCreasePatch : 1; 
                unsigned int useScreenSpaceTessellation : 1; 
            } subdivisionSurface; 
        } parameters; 
    }  _cachedTessellator;
    struct __C3DGeometry { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x_1_2_1; _Atomic unsigned long long x_1_2_2; } x_1_1_1; void *x_1_1_2; struct __CFString {} *x_1_1_3; struct __CFString {} *x_1_1_4; struct __CFDictionary {} *x_1_1_5; struct __C3DScene {} *x_1_1_6; long long x_1_1_7; } x1; struct __C3DMesh {} *x2; struct __C3DMaterial {} *x3; struct __CFArray {} *x4; struct __CFSet {} *x5; struct __CFArray {} *x6; struct { /* ? */ } *x7; unsigned int x8 : 1; int (*x9)(); struct { unsigned char x_10_1_1; bool x_10_1_2; struct { bool x_3_2_1; unsigned char x_3_2_2; unsigned char x_3_2_3; unsigned char x_3_2_4; } x_10_1_3; struct __C3DMeshElement {} *x_10_1_4; struct __C3DMeshSource {} *x_10_1_5; struct __C3DMesh {} *x_10_1_6; void *x_10_1_7; void *x_10_1_8; } x10; struct { unsigned char x_11_1_1; float x_11_1_2; unsigned int x_11_1_3; unsigned char x_11_1_4; union { struct { float x_1_3_1; float x_1_3_2; } x_5_2_1; struct { float x_2_3_1; } x_5_2_2; struct { float x_3_3_1; } x_5_2_3; struct { unsigned char x_4_3_1; unsigned int x_4_3_2 : 1; unsigned int x_4_3_3 : 1; } x_5_2_4; } x_11_1_5; } x11; } * _geometry;
    SCNMTLResourceManager * _resourceManager;
    <MTLBuffer> * _tessellationFactorBuffer;
}

- (struct { unsigned int x1 : 2; unsigned int x2 : 2; unsigned int x3 : 2; unsigned int x4 : 1; })_pipelineStateHashForMeshElement:(id)arg1 patchType:(unsigned char)arg2;
- (void)constrainedEdgeLengthTessellationDrawMeshElement:(id)arg1 forMesh:(id)arg2 instanceCount:(unsigned long long)arg3 renderCommandEncoder:(id)arg4 renderContext:(id)arg5;
- (void)dealloc;
- (void)draw:(struct { id x1; id x2; unsigned int x3; id x4; id x5; id x6; id x7; id x8; unsigned char x9; })arg1;
- (id)initWithGeometry:(struct __C3DGeometry { struct __C3DEntity { struct __CFRuntimeBase { unsigned long long x_1_2_1; _Atomic unsigned long long x_1_2_2; } x_1_1_1; void *x_1_1_2; struct __CFString {} *x_1_1_3; struct __CFString {} *x_1_1_4; struct __CFDictionary {} *x_1_1_5; struct __C3DScene {} *x_1_1_6; long long x_1_1_7; } x1; struct __C3DMesh {} *x2; struct __C3DMaterial {} *x3; struct __CFArray {} *x4; struct __CFSet {} *x5; struct __CFArray {} *x6; struct { /* ? */ } *x7; unsigned int x8 : 1; int (*x9)(); struct { unsigned char x_10_1_1; bool x_10_1_2; struct { bool x_3_2_1; unsigned char x_3_2_2; unsigned char x_3_2_3; unsigned char x_3_2_4; } x_10_1_3; struct __C3DMeshElement {} *x_10_1_4; struct __C3DMeshSource {} *x_10_1_5; struct __C3DMesh {} *x_10_1_6; void *x_10_1_7; void *x_10_1_8; } x10; struct { unsigned char x_11_1_1; float x_11_1_2; unsigned int x_11_1_3; unsigned char x_11_1_4; union { struct { float x_1_3_1; float x_1_3_2; } x_5_2_1; struct { float x_2_3_1; } x_5_2_2; struct { float x_3_3_1; } x_5_2_3; struct { unsigned char x_4_3_1; unsigned int x_4_3_2 : 1; unsigned int x_4_3_3 : 1; } x_5_2_4; } x_11_1_5; } x11; }*)arg1 resourceManager:(id)arg2;
- (id /* block */)newPipelineStateConfiguratorForMeshElement:(id)arg1 patchType:(unsigned char)arg2 device:(id)arg3;
- (unsigned char)pipelineStateHashForMeshElement:(id)arg1 patchType:(unsigned char)arg2;
- (void)screenSpaceAdaptiveTessellationDrawMeshElement:(id)arg1 forMesh:(id)arg2 instanceCount:(unsigned long long)arg3 renderCommandEncoder:(id)arg4 renderContext:(id)arg5;
- (void)subdivisionSurfaceTessellationDraw:(struct { id x1; id x2; unsigned int x3; id x4; id x5; id x6; id x7; id x8; unsigned char x9; })arg1;
- (void)uniformTessellationDrawMeshElement:(id)arg1 forMesh:(id)arg2 instanceCount:(unsigned long long)arg3 renderCommandEncoder:(id)arg4 renderContext:(id)arg5;
- (void)update:(struct { id x1; id x2; id x3; id x4; struct { /* ? */ } *x5; unsigned int x6; bool x7; })arg1;
- (void)updateConstrainedEdgeLengthTessellator:(struct { unsigned char x1; float x2; unsigned int x3; unsigned char x4; union { struct { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct { float x_2_2_1; } x_5_1_2; struct { float x_3_2_1; } x_5_1_3; struct { unsigned char x_4_2_1; unsigned int x_4_2_2 : 1; unsigned int x_4_2_3 : 1; } x_5_1_4; } x5; })arg1 withMesh:(id)arg2 computeCommandEncoder:(id)arg3;
- (void)updateScreenSpaceAdaptiveTessellator:(struct { unsigned char x1; float x2; unsigned int x3; unsigned char x4; union { struct { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct { float x_2_2_1; } x_5_1_2; struct { float x_3_2_1; } x_5_1_3; struct { unsigned char x_4_2_1; unsigned int x_4_2_2 : 1; unsigned int x_4_2_3 : 1; } x_5_1_4; } x5; })arg1 parameters:(struct { id x1; id x2; id x3; id x4; struct { /* ? */ } *x5; unsigned int x6; bool x7; })arg2;
- (void)updateSubdivisionSurfaceTessellator:(struct { unsigned char x1; float x2; unsigned int x3; unsigned char x4; union { struct { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct { float x_2_2_1; } x_5_1_2; struct { float x_3_2_1; } x_5_1_3; struct { unsigned char x_4_2_1; unsigned int x_4_2_2 : 1; unsigned int x_4_2_3 : 1; } x_5_1_4; } x5; })arg1 parameters:(struct { id x1; id x2; id x3; id x4; struct { /* ? */ } *x5; unsigned int x6; bool x7; })arg2;
- (void)updateUniformTessellator:(struct { unsigned char x1; float x2; unsigned int x3; unsigned char x4; union { struct { float x_1_2_1; float x_1_2_2; } x_5_1_1; struct { float x_2_2_1; } x_5_1_2; struct { float x_3_2_1; } x_5_1_3; struct { unsigned char x_4_2_1; unsigned int x_4_2_2 : 1; unsigned int x_4_2_3 : 1; } x_5_1_4; } x5; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
