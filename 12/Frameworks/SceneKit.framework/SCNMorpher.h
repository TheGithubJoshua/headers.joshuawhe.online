<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SCNMorpher.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SceneKit.framework/SCNMorpher.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit (470.10)
 */

@interface SCNMorpher : NSObject <NSSecureCoding, SCNAnimatable> {
    SCNOrderedDictionary * _animations;
    NSMutableDictionary * _bindings;
    long long  _calculationMode;
    NSArray * _inBetweenCounts;
    NSArray * _inBetweenInfluenceWeights;
    unsigned int  _isPresentationInstance;
    struct __C3DMorph { } * _morpher;
    NSString * _name;
    NSDictionary * _targetNameToIndexes;
    NSArray * _targets;
    NSArray * _topLevelAndInBetweenTargets;
    bool  _unifyNormal;
    bool  _useSparseTargets;
    NSMutableArray * _weights;
}

@property (readonly) NSArray *animationKeys;
@property (nonatomic) long long calculationMode;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSArray *targets;
@property bool unifiesNormals;
@property (nonatomic, retain) NSArray *weights;

+ (Class)SCNUID_classForElementOfArray:(id)arg1;
+ (id)morpher;
+ (id)morpherWithMorphRef:(struct __C3DMorph { }*)arg1;
+ (bool)supportsSecureCoding;
+ (id)weightIndexStringForIndex:(long long)arg1;

- (const void*)__CFObject;
- (bool)__removeAnimation:(id)arg1 forKey:(id)arg2;
- (void)_copyAnimationsFrom:(id)arg1;
- (void)_customDecodingOfSCNMorpher:(id)arg1;
- (void)_customEncodingOfSCNMorpher:(id)arg1;
- (void)_didDecodeSCNMorpher:(id)arg1;
- (bool)_isUsingSparseTargets;
- (void)_pauseAnimation:(bool)arg1 forKey:(id)arg2 pausedByNode:(bool)arg3;
- (id)_scnAnimationForKey:(id)arg1;
- (id)_scnBindings;
- (void)_syncEntityObjCModel;
- (void)_syncObjCAnimations;
- (void)_syncObjCModel;
- (void)_updateTargetsAndInBetween:(id)arg1;
- (long long)_weightIndexForTargetNamed:(id)arg1;
- (void)addAnimation:(id)arg1;
- (void)addAnimation:(id)arg1 forKey:(id)arg2;
- (void)addAnimationPlayer:(id)arg1 forKey:(id)arg2;
- (id)animationForKey:(id)arg1;
- (id)animationKeys;
- (struct __C3DAnimationManager { }*)animationManager;
- (id)animationPlayerForKey:(id)arg1;
- (void)bindAnimatablePath:(id)arg1 toObject:(id)arg2 withKeyPath:(id)arg3 options:(id)arg4;
- (long long)calculationMode;
- (id)channelTargetCounts;
- (id)channelTargetWeights;
- (void)clearInBetweens;
- (void)convertToAdditiveWithBaseGeometry:(id)arg1;
- (void)convertToSparseWithBaseGeometry:(id)arg1;
- (id)copy;
- (id)copyAnimationChannelForKeyPath:(id)arg1 animation:(id)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (id)identifier;
- (id)inBetweenTargetsForTargetAtIndex:(unsigned long long)arg1;
- (id)inBetweenWeightsForTargetAtIndex:(unsigned long long)arg1;
- (id)init;
- (id)initPresentationMorpherWithMorphRef:(struct __C3DMorph { }*)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMorphRef:(struct __C3DMorph { }*)arg1;
- (bool)isAnimationForKeyPaused:(id)arg1;
- (bool)isPausedOrPausedByInheritance;
- (struct __C3DMorph { }*)morphRef;
- (id)name;
- (void)pauseAnimationForKey:(id)arg1;
- (id)presentationInstance;
- (id)presentationMorpher;
- (void)removeAllAnimations;
- (void)removeAllBindings;
- (void)removeAnimationForKey:(id)arg1;
- (void)removeAnimationForKey:(id)arg1 blendOutDuration:(double)arg2;
- (void)removeAnimationForKey:(id)arg1 fadeOutDuration:(double)arg2;
- (void)resumeAnimationForKey:(id)arg1;
- (id)scene;
- (struct __C3DScene { }*)sceneRef;
- (void)setCalculationMode:(long long)arg1;
- (void)setChannelTargetCounts:(id)arg1;
- (void)setChannelTargetWeights:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setName:(id)arg1;
- (void)setShouldMorphNormals:(bool)arg1;
- (void)setSpeed:(double)arg1 forAnimationKey:(id)arg2;
- (void)setTargets:(id)arg1;
- (void)setTargets:(id)arg1 withInBetweenTargetCounts:(id)arg2 inBetweenWeights:(id)arg3;
- (void)setUnifiesNormals:(bool)arg1;
- (void)setWantsCPUMorphing:(bool)arg1;
- (void)setWeight:(double)arg1 forTargetAtIndex:(unsigned long long)arg2;
- (void)setWeight:(double)arg1 forTargetNamed:(id)arg2;
- (void)setWeights:(id)arg1;
- (bool)shouldMorphNormals;
- (id)targets;
- (id)targetsAndInBetween;
- (void)unbindAnimatablePath:(id)arg1;
- (bool)unifiesNormals;
- (bool)wantsCPUMorphing;
- (double)weightForTargetAtIndex:(unsigned long long)arg1;
- (double)weightForTargetNamed:(id)arg1;
- (id)weights;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
