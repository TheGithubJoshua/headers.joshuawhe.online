<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CNPropertyDescription.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Contacts.framework/CNPropertyDescription.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Contacts.framework/Contacts (2413)
 */

@interface CNPropertyDescription : NSObject <NSCopying, NSSecureCoding> {
    bool  _isNonnull;
    NSString * _key;
    SEL  _readSelector;
    id /* block */  _valueForKeyTransform;
    SEL  _writeSelector;
}

@property (nonatomic, readonly) NSArray *equivalentLabelSets;
@property (nonatomic, readonly) bool isMultiValue;
@property (nonatomic, readonly) bool isNonnull;
@property (nonatomic, readonly) bool isSingleValue;
@property (nonatomic, readonly) bool isWritable;
@property (nonatomic, readonly, copy) NSString *key;
@property (nonatomic, readonly) id nilValue;
@property (nonatomic, readonly) SEL readSelector;
@property (nonatomic, readonly) Class valueClass;
@property (nonatomic, readonly, copy) id /* block */ valueForKeyTransform;
@property (nonatomic, readonly) SEL writeSelector;

// Image: /System/Library/Frameworks/Contacts.framework/Contacts

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void*)ABValueForABPerson:(void*)arg1;
- (void*)ABValueFromCNValue:(id)arg1;
- (id)CNMutableValueForABMultivalue;
- (id)CNValueForContact:(id)arg1;
- (id)CNValueFromABBytes:(char *)arg1 length:(unsigned long long)arg2;
- (id)CNValueFromABValue:(void*)arg1;
- (bool)abPropertyID:(int*)arg1;
- (bool)applyABMultivalueValueBytes:(char *)arg1 length:(unsigned long long)arg2 identifier:(id)arg3 legacyIdentifier:(int)arg4 label:(id)arg5 toCNMultivalueRepresentation:(id)arg6;
- (bool)applyDictionary:(id)arg1 identifier:(id)arg2 legacyIdentifier:(int)arg3 label:(id)arg4 toCNMultivalueRepresentation:(id)arg5;
- (void)assertValueType:(id)arg1;
- (bool)canUnifyValue:(id)arg1 withValue:(id)arg2;
- (void)copyFromABPerson:(void*)arg1 toContact:(id)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)decodeUsingCoder:(id)arg1 contact:(id)arg2;
- (void)encodeUsingCoder:(id)arg1 contact:(id)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)equivalentLabelSets;
- (id)initWithCoder:(id)arg1;
- (id)initWithKey:(id)arg1 readSelector:(SEL)arg2 writeSelector:(SEL)arg3;
- (bool)isEqualIgnoringIdentifiersForContact:(id)arg1 other:(id)arg2;
- (bool)isMultiValue;
- (bool)isNonnull;
- (bool)isSingleValue;
- (bool)isValidValue:(id)arg1 error:(id*)arg2;
- (bool)isValue:(id)arg1 equalToEmptyEquivalentOrValue:(id)arg2;
- (bool)isValue:(id)arg1 preferredToUnifiedValue:(id)arg2;
- (bool)isWritable;
- (id)key;
- (id)nilValue;
- (SEL)readSelector;
- (bool)setABValue:(void*)arg1 onABPerson:(void*)arg2 error:(struct __CFError {}**)arg3;
- (bool)setCNValue:(id)arg1 onABPerson:(void*)arg2 withDependentPropertiesContext:(id)arg3 error:(id*)arg4;
- (void)setCNValue:(id)arg1 onContact:(id)arg2;
- (id)stringForIndexingForContact:(id)arg1;
- (bool)supportsABLazyLoading;
- (id)unifiableLabelsForLabel:(id)arg1;
- (Class)valueClass;
- (id /* block */)valueForKeyTransform;
- (id)valueWithResetIdentifiers:(id)arg1;
- (SEL)writeSelector;

// Image: /System/Library/Frameworks/AddressBook.framework/AddressBook

- (const void*)ABSValueFromCNValue:(id)arg1;
- (id)CNValueFromABSValue:(void*)arg1;
- (bool)absPropertyID:(int*)arg1;
- (unsigned int)absPropertyType;
- (bool)isValidABSValue:(void*)arg1 error:(struct __CFError {}**)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
