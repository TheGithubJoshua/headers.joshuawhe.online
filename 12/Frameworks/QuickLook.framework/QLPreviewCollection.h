<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>QLPreviewCollection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/QuickLook.framework/QLPreviewCollection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/QuickLook.framework/QuickLook (1)
 */

@interface QLPreviewCollection : UIViewController <QLPageViewControllerDataSource, QLPageViewControllerDelegate, QLPreviewCollectionProtocol, QLPreviewItemViewControllerDelegate, QLTransitionControllerProtocol, UIGestureRecognizerDelegate> {
    bool  _allowInteractiveTransitions;
    QLAppearance * _appearance;
    unsigned long long  _appearanceActions;
    long long  _currentItemIndex;
    bool  _fullScreen;
    bool  _hasTriggeredInteractiveTransitionAnimation;
    bool  _isAvailable;
    bool  _isEditing;
    bool  _isTransitioningPage;
    QLPreviewItemStore * _itemStore;
    NSString * _loadingString;
    UIView * _localAccessoryViewContainer;
    UIPanGestureRecognizer * _pagePanGesture;
    UISwipeGestureRecognizer * _pageSwipeGesture;
    QLPageViewController * _pageViewController;
    UIPinchGestureRecognizer * _pinchGesture;
    QLPinchRotationTracker * _pinchRotationTracker;
    id /* block */  _prepareForInvalidationCompletionHandler;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _previewItemRange;
    UIView * _remoteAccessoryViewContainer;
    UIRotationGestureRecognizer * _rotationGesture;
    UIPanGestureRecognizer * _slideGesture;
    <QLPreviewControllerStateProtocol> * _stateManager;
    QLSwipeDownTracker * _swipeDownTracker;
    UITapGestureRecognizer * _tapGesture;
    QLTransitionContext * _transitionContext;
    <QLTransitionControllerProtocol> * _transitionController;
    QLTransitionDriver * _transitionDriver;
    UIPanGestureRecognizer * _verticalPanGesture;
    unsigned long long  _visibilityState;
}

@property (nonatomic) bool allowInteractiveTransitions;
@property (readonly) QLItemViewController *currentPreviewItemViewController;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool fullScreen;
@property bool hasTriggeredInteractiveTransitionAnimation;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isAvailable;
@property (nonatomic) bool isEditing;
@property (nonatomic) bool isTransitioningPage;
@property (retain) QLPageViewController *pageViewController;
@property (retain) UIPinchGestureRecognizer *pinchGesture;
@property (retain) QLPinchRotationTracker *pinchRotationTracker;
@property (nonatomic, copy) id /* block */ prepareForInvalidationCompletionHandler;
@property (retain) UIRotationGestureRecognizer *rotationGesture;
@property (retain) UIPanGestureRecognizer *slideGesture;
@property (retain) <QLPreviewControllerStateProtocol> *stateManager;
@property (readonly) Class superclass;
@property (retain) QLSwipeDownTracker *swipeDownTracker;
@property (retain) QLTransitionContext *transitionContext;
@property (retain) <QLTransitionControllerProtocol> *transitionController;
@property (retain) QLTransitionDriver *transitionDriver;

+ (void)previewCollectionUsingRemoteViewController:(bool)arg1 completionHandler:(id /* block */)arg2;
+ (id)quickLookExtension;
+ (void)remotePreviewCollectionWithCompletionHandler:(id /* block */)arg1;

- (void).cxx_destruct;
- (void)_cleanAccessoryViewContainer;
- (void)_installGestures;
- (bool)_isBeingDismissed;
- (bool)_isVisible;
- (void)_notifyHostPreviewCollectionIsReadyForInvalidationIfNeeded;
- (void)_setUpTransitionDriverForPresenting:(bool)arg1 duration:(double)arg2;
- (void)_tapGestureRecognized;
- (void)_tearDownTransition:(bool)arg1;
- (void)_updateAccessoryViewWithPreviewItemViewController:(id)arg1;
- (void)_updateCanChangeCurrentPage;
- (void)_updateFullscreen;
- (void)_updateFullscreenBackgroundColor;
- (void)_updateOverlayVisibility;
- (void)_updatePreferredContentSize;
- (void)_updatePreviewVisibility:(bool)arg1;
- (void)_updatePrinter;
- (void)_updateTitleFromController;
- (void)_updateWhitePointAdaptivityStyle;
- (id)accessoryView;
- (bool)allowInteractiveTransitions;
- (void)completeTransition:(bool)arg1 withDuration:(double)arg2;
- (void)configureWithNumberOfItems:(long long)arg1 currentPreviewItemIndex:(unsigned long long)arg2 itemProvider:(id)arg3 stateManager:(id)arg4;
- (id)currentPreviewItemViewController;
- (long long)dragDataOwnerForPreviewItemViewController:(id)arg1;
- (void)expandContentOfPreviewItemViewController:(id)arg1;
- (bool)fullScreen;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)gestureTracker;
- (bool)hasTriggeredInteractiveTransitionAnimation;
- (void)hostApplicationDidBecomeActive;
- (void)hostApplicationDidEnterBackground:(bool)arg1;
- (void)hostViewControlerTransitionToState:(unsigned long long)arg1 animated:(bool)arg2;
- (id)init;
- (void)invalidateService;
- (bool)isAvailable;
- (bool)isEditing;
- (bool)isRemote;
- (bool)isTransitioningPage;
- (void)keyCommandWasPerformed:(id)arg1;
- (void)keyCommandsWithCompletionHandler:(id /* block */)arg1;
- (void)loadView;
- (id)loadingTextForPreviewItemViewController:(id)arg1;
- (void)notifyFirstTimeAppearanceWithActions:(unsigned long long)arg1;
- (id)pageViewController;
- (void)pageViewController:(id)arg1 didCancelTransitionFromPage:(id)arg2 withIndex:(unsigned long long)arg3 toPage:(id)arg4 withIndex:(unsigned long long)arg5 animated:(bool)arg6;
- (void)pageViewController:(id)arg1 didTransitionFromPage:(id)arg2 withIndex:(unsigned long long)arg3 toPage:(id)arg4 withIndex:(unsigned long long)arg5 animated:(bool)arg6;
- (void)pageViewController:(id)arg1 isTransitioningFromPage:(id)arg2 withIndex:(unsigned long long)arg3 toPage:(id)arg4 withIndex:(unsigned long long)arg5 withProgress:(double)arg6;
- (id)pageViewController:(id)arg1 parallaxViewInPage:(id)arg2 withIndex:(unsigned long long)arg3;
- (id)pageViewController:(id)arg1 viewControllerAtIndex:(unsigned long long)arg2;
- (void)pageViewController:(id)arg1 willBeginInteractiveTransitionFromPage:(id)arg2 withIndex:(unsigned long long)arg3 toPage:(id)arg4 withIndex:(unsigned long long)arg5;
- (void)pageViewController:(id)arg1 willCancelTransitionFromPage:(id)arg2 withIndex:(unsigned long long)arg3 toPage:(id)arg4 withIndex:(unsigned long long)arg5 animated:(bool)arg6;
- (void)pageViewController:(id)arg1 willTransitionFromPage:(id)arg2 withIndex:(unsigned long long)arg3 toPage:(id)arg4 withIndex:(unsigned long long)arg5 animated:(bool)arg6;
- (bool)pinchDismissGestureInProgress;
- (id)pinchGesture;
- (id)pinchRotationTracker;
- (void)prepareForActionSheetPresentationWithCompletionHandler:(id /* block */)arg1;
- (id /* block */)prepareForInvalidationCompletionHandler;
- (void)preparePreviewCollectionForInvalidationWithCompletionHandler:(id /* block */)arg1;
- (void)previewItemViewController:(id)arg1 didEnableEditMode:(bool)arg2;
- (void)previewItemViewController:(id)arg1 didFailWithError:(id)arg2;
- (void)previewItemViewController:(id)arg1 hasUnsavedEdits:(bool)arg2;
- (void)previewItemViewController:(id)arg1 wantsFullScreen:(bool)arg2;
- (void)previewItemViewController:(id)arg1 wantsToOpenURL:(id)arg2;
- (void)previewItemViewController:(id)arg1 wantsToShowShareSheetWithPopoverTracker:(id)arg2 dismissCompletion:(id /* block */)arg3;
- (void)previewItemViewControllerDidEditPreview:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)previewItemViewControllerDidUpdatePreferredContentSize:(id)arg1;
- (void)previewItemViewControllerDidUpdateTitle:(id)arg1;
- (void)previewItemViewControllerWantsToDismissQuickLook:(id)arg1;
- (void)previewItemViewControllerWantsToShowNoInternetConnectivityAlert:(id)arg1;
- (void)previewItemViewControllerWantsToShowShareSheet:(id)arg1;
- (void)previewItemViewControllerWantsUpdateKeyCommands:(id)arg1;
- (void)previewItemViewControllerWantsUpdateOverlay:(id)arg1 animated:(bool)arg2;
- (void)previewItemViewControllerWantsUpdatePrinter:(id)arg1;
- (id)rotationGesture;
- (void)rotationOrPinchGestureRecognized:(id)arg1;
- (void)setAllowInteractiveTransitions:(bool)arg1;
- (void)setAppearance:(id)arg1 animated:(bool)arg2;
- (void)setCurrentPreviewItemIndex:(long long)arg1 animated:(bool)arg2;
- (void)setFullScreen:(bool)arg1;
- (void)setHasTriggeredInteractiveTransitionAnimation:(bool)arg1;
- (void)setIsAvailable:(bool)arg1;
- (void)setIsEditing:(bool)arg1;
- (void)setIsTransitioningPage:(bool)arg1;
- (void)setLoadingString:(id)arg1;
- (void)setPageViewController:(id)arg1;
- (void)setPinchGesture:(id)arg1;
- (void)setPinchRotationTracker:(id)arg1;
- (void)setPrepareForInvalidationCompletionHandler:(id /* block */)arg1;
- (void)setRemoteAccessoryContainer:(id)arg1;
- (void)setRotationGesture:(id)arg1;
- (void)setSlideGesture:(id)arg1;
- (void)setSourceIsManaged:(bool)arg1;
- (void)setStateManager:(id)arg1;
- (void)setSwipeDownTracker:(id)arg1;
- (void)setTransitionContext:(id)arg1;
- (void)setTransitionController:(id)arg1;
- (void)setTransitionDriver:(id)arg1;
- (id)slideGesture;
- (void)slideToDismissGestureRecognized:(id)arg1;
- (void)startNonInteractiveTransitionPresenting:(bool)arg1;
- (void)startTransitionWithSourceViewProvider:(id)arg1 transitionController:(id)arg2 presenting:(bool)arg3 useInteractiveTransition:(bool)arg4 completionHandler:(id /* block */)arg5;
- (id)stateManager;
- (id)swipeDownTracker;
- (void)tearDownTransition:(bool)arg1;
- (void)toolbarButtonPressedWithIdentifier:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)toolbarButtonsForTraitCollection:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (id)transitionContext;
- (id)transitionController;
- (id)transitionDriver;
- (bool)transitionInProgress;
- (void)triggerInteractiveTransitionAnimationIfNeeded;
- (void)updateCurrentPreviewConfiguration;
- (void)updateTransitionWithProgress:(double)arg1;
- (void)viewDidAppear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
