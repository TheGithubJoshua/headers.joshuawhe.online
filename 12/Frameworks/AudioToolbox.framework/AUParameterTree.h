<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AUParameterTree.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AudioToolbox.framework/AUParameterTree.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (1.8)
 */

@interface AUParameterTree : AUParameterGroup <NSSecureCoding> {
    AUAudioUnit_XH * __auXH;
    bool  __autoCreatedForV2AU;
    bool  __suppressObserverCallbacks;
    struct vector<AddressToParameter, std::__1::allocator<AddressToParameter> > { 
        struct AddressToParameter {} *__begin_; 
        struct AddressToParameter {} *__end_; 
        struct __compressed_pair<AddressToParameter *, std::__1::allocator<AddressToParameter> > { 
            struct AddressToParameter {} *__value_; 
        } __end_cap_; 
    }  _addrToParamIndex;
    int  _numRecorders;
    NSObject<OS_dispatch_queue> * _observationQueue;
    struct AUObserverController { id x1; id x2; id x3; bool x4; struct set<AUObserverController::AddressOriginator, std::__1::less<AUObserverController::AddressOriginator>, std::__1::allocator<AUObserverController::AddressOriginator> > { struct __tree<AUObserverController::AddressOriginator, std::__1::less<AUObserverController::AddressOriginator>, std::__1::allocator<AUObserverController::AddressOriginator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<AUObserverController::AddressOriginator, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<AUObserverController::AddressOriginator> > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct vector<ParameterAutomationEvent, std::__1::allocator<ParameterAutomationEvent> > { struct ParameterAutomationEvent {} *x_6_1_1; struct ParameterAutomationEvent {} *x_6_1_2; struct __compressed_pair<ParameterAutomationEvent *, std::__1::allocator<ParameterAutomationEvent> > { struct ParameterAutomationEvent {} *x_3_2_1; } x_6_1_3; } x6; } * _observerController;
    struct AURemoteParameterObserver { } * _remoteObserverToken;
    NSXPCConnection * _remoteParameterSynchronizerXPCConnection;
    struct AURemoteParameterObserver { } * _remoteRecorderToken;
    NSObject<OS_dispatch_queue> * _valueAccessQueue;
}

@property (nonatomic) AUAudioUnit_XH *_auXH;
@property (nonatomic) bool _autoCreatedForV2AU;
@property (nonatomic) bool _suppressObserverCallbacks;
@property (nonatomic) /* Warning: unhandled struct encoding: '{vector<AddressToParameter' */ struct  addrToParamIndex; /* unknown property attribute:  std::__1::allocator<AddressToParameter> >=^{AddressToParameter}}} */
@property (nonatomic) int numRecorders;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *observationQueue;
@property (nonatomic) /* Warning: unhandled struct encoding: '{AUObserverController=@@@B{set<AUObserverController::AddressOriginator' */ struct *observerController; /* unknown property attribute:  std::__1::allocator<ParameterAutomationEvent> >=^{ParameterAutomationEvent}}}} */
@property (nonatomic) struct AURemoteParameterObserver { }*remoteObserverToken;
@property (nonatomic) NSXPCConnection *remoteParameterSynchronizerXPCConnection;
@property (nonatomic) struct AURemoteParameterObserver { }*remoteRecorderToken;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *valueAccessQueue;

+ (id)createGroupFromTemplate:(id)arg1 identifier:(id)arg2 name:(id)arg3 addressOffset:(unsigned long long)arg4;
+ (id)createGroupTemplate:(id)arg1;
+ (id)createGroupWithIdentifier:(id)arg1 name:(id)arg2 children:(id)arg3;
+ (id)createParameterWithIdentifier:(id)arg1 name:(id)arg2 address:(unsigned long long)arg3 min:(float)arg4 max:(float)arg5 unit:(unsigned int)arg6 unitName:(id)arg7 flags:(unsigned int)arg8 valueStrings:(id)arg9 dependentParameters:(id)arg10;
+ (id)createTreeWithChildren:(id)arg1;
+ (bool)supportsSecureCoding;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_auXH;
- (bool)_autoCreatedForV2AU;
- (void)_checkInitTreeObservation;
- (void)_init2;
- (bool)_suppressObserverCallbacks;
- (struct vector<AddressToParameter, std::__1::allocator<AddressToParameter> > { struct AddressToParameter {} *x1; struct AddressToParameter {} *x2; struct __compressed_pair<AddressToParameter *, std::__1::allocator<AddressToParameter> > { struct AddressToParameter {} *x_3_1_1; } x3; })addrToParamIndex;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithChildren:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (int)numRecorders;
- (id)observationQueue;
- (struct AUObserverController { id x1; id x2; id x3; bool x4; struct set<AUObserverController::AddressOriginator, std::__1::less<AUObserverController::AddressOriginator>, std::__1::allocator<AUObserverController::AddressOriginator> > { struct __tree<AUObserverController::AddressOriginator, std::__1::less<AUObserverController::AddressOriginator>, std::__1::allocator<AUObserverController::AddressOriginator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<AUObserverController::AddressOriginator, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<AUObserverController::AddressOriginator> > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct vector<ParameterAutomationEvent, std::__1::allocator<ParameterAutomationEvent> > { struct ParameterAutomationEvent {} *x_6_1_1; struct ParameterAutomationEvent {} *x_6_1_2; struct __compressed_pair<ParameterAutomationEvent *, std::__1::allocator<ParameterAutomationEvent> > { struct ParameterAutomationEvent {} *x_3_2_1; } x_6_1_3; } x6; }*)observerController;
- (id)parameterWithAddress:(unsigned long long)arg1;
- (id)parameterWithID:(unsigned int)arg1 scope:(unsigned int)arg2 element:(unsigned int)arg3;
- (struct AURemoteParameterObserver { }*)remoteObserverToken;
- (id)remoteParameterSynchronizerXPCConnection;
- (struct AURemoteParameterObserver { }*)remoteRecorderToken;
- (void)remoteSyncParameter:(unsigned long long)arg1 value:(float)arg2 extOriginator:(unsigned long long)arg3 hostTime:(unsigned long long)arg4 eventType:(unsigned int)arg5;
- (void)setAddrToParamIndex:(struct vector<AddressToParameter, std::__1::allocator<AddressToParameter> > { struct AddressToParameter {} *x1; struct AddressToParameter {} *x2; struct __compressed_pair<AddressToParameter *, std::__1::allocator<AddressToParameter> > { struct AddressToParameter {} *x_3_1_1; } x3; })arg1;
- (void)setNumRecorders:(int)arg1;
- (void)setObserverController:(struct AUObserverController { id x1; id x2; id x3; bool x4; struct set<AUObserverController::AddressOriginator, std::__1::less<AUObserverController::AddressOriginator>, std::__1::allocator<AUObserverController::AddressOriginator> > { struct __tree<AUObserverController::AddressOriginator, std::__1::less<AUObserverController::AddressOriginator>, std::__1::allocator<AUObserverController::AddressOriginator> > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<AUObserverController::AddressOriginator, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<AUObserverController::AddressOriginator> > { unsigned long long x_3_3_1; } x_1_2_3; } x_5_1_1; } x5; struct vector<ParameterAutomationEvent, std::__1::allocator<ParameterAutomationEvent> > { struct ParameterAutomationEvent {} *x_6_1_1; struct ParameterAutomationEvent {} *x_6_1_2; struct __compressed_pair<ParameterAutomationEvent *, std::__1::allocator<ParameterAutomationEvent> > { struct ParameterAutomationEvent {} *x_3_2_1; } x_6_1_3; } x6; }*)arg1;
- (void)setRemoteObserverToken:(struct AURemoteParameterObserver { }*)arg1;
- (void)setRemoteParameterSynchronizerXPCConnection:(id)arg1;
- (void)setRemoteRecorderToken:(struct AURemoteParameterObserver { }*)arg1;
- (void)set_auXH:(id)arg1;
- (void)set_autoCreatedForV2AU:(bool)arg1;
- (void)set_suppressObserverCallbacks:(bool)arg1;
- (id)valueAccessQueue;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
