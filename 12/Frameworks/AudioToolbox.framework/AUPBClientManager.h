<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AUPBClientManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AudioToolbox.framework/AUPBClientManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (1.8)
 */

@interface AUPBClientManager : NSObject <AUPBInspecting, AUPBRegistrarListening> {
    struct vector<NewServerListener, std::__1::allocator<NewServerListener> > { 
        struct NewServerListener {} *__begin_; 
        struct NewServerListener {} *__end_; 
        struct __compressed_pair<NewServerListener *, std::__1::allocator<NewServerListener> > { 
            struct NewServerListener {} *__value_; 
        } __end_cap_; 
    }  mNewServerListeners;
    int  mNotifyToken;
    struct vector<PropertyListener, std::__1::allocator<PropertyListener> > { 
        struct PropertyListener {} *__begin_; 
        struct PropertyListener {} *__end_; 
        struct __compressed_pair<PropertyListener *, std::__1::allocator<PropertyListener> > { 
            struct PropertyListener {} *__value_; 
        } __end_cap_; 
    }  mPropertyListeners;
    <AUPBRegistrarHosting> * mProxyInterface;
    NSXPCConnection * mRegistrarConnection;
    NSMutableArray * mRemoteServers;
    unsigned int  mServerRefCounter;
    NSObject<OS_dispatch_queue> * mTouchServersQueue;
    bool  mValidToken;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)sharedInstance;

- (id).cxx_construct;
- (void).cxx_destruct;
- (int)addNewServerListener:(int (*)arg1 withUserData:(void*)arg2;
- (int)addPropertyListener:(int (*)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 block:(struct OpaqueAUPB { }*)arg3 property:(unsigned int)arg4 withUserData:(void*)arg5;
- (unsigned int)auHandleFromRef:(struct OpaqueRemoteAudioUnit { }*)arg1;
- (struct OpaqueRemoteAudioUnit { }*)auRefFromHandle:(unsigned int)arg1;
- (struct OpaqueAUPB { }*)aupbRefFromHandle:(unsigned int)arg1;
- (id)autorelease;
- (int)copyPBProperty:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 block:(struct OpaqueAUPB { }*)arg3 intoValue:(const void**)arg4;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (int)getAUParameter:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 audioUnit:(struct OpaqueRemoteAudioUnit { }*)arg3 scope:(unsigned int)arg4 element:(unsigned int)arg5 copiedIntoValue:(float*)arg6;
- (int)getAUProperty:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 audioUnit:(struct OpaqueRemoteAudioUnit { }*)arg3 scope:(unsigned int)arg4 element:(unsigned int)arg5 copiedIntoBufer:(void**)arg6 withSize:(unsigned int*)arg7;
- (int)getAUPropertyInfo:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 audioUnit:(struct OpaqueRemoteAudioUnit { }*)arg3 scope:(unsigned int)arg4 element:(unsigned int)arg5 intoDataSize:(unsigned int*)arg6 writeable:(char *)arg7;
- (int)getSerialAUProperty:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 audioUnit:(struct OpaqueRemoteAudioUnit { }*)arg3 scope:(unsigned int)arg4 element:(unsigned int)arg5 inData:(id*)arg6;
- (void)handleRegistrarCrash;
- (id)init;
- (void)newServerAdded:(id)arg1;
- (void)processingBlock:(unsigned int)arg1 propertiesChanged:(id)arg2 withQualifierData:(id)arg3;
- (void)processingBlock:(unsigned int)arg1 propertyChanged:(unsigned int)arg2;
- (oneway void)release;
- (int)removePropertyListener:(int (*)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 block:(struct OpaqueAUPB { }*)arg3 property:(unsigned int)arg4 withUserData:(void*)arg5;
- (int)removePropertyListenersForServer:(struct OpaqueAUPBServer { }*)arg1;
- (int)removeServerListener:(int (*)arg1 withUserData:(void*)arg2;
- (id)retain;
- (unsigned long long)retainCount;
- (id)serverFromRef:(struct OpaqueAUPBServer { }*)arg1;
- (int)setAUParameter:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 audioUnit:(struct OpaqueRemoteAudioUnit { }*)arg3 scope:(unsigned int)arg4 element:(unsigned int)arg5 value:(float)arg6;
- (int)setAUProperty:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 audioUnit:(struct OpaqueRemoteAudioUnit { }*)arg3 scope:(unsigned int)arg4 element:(unsigned int)arg5 withValue:(const void*)arg6 size:(unsigned int)arg7;
- (int)setPBProperty:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 block:(struct OpaqueAUPB { }*)arg3 value:(void*)arg4;
- (int)setSerialAUProperty:(unsigned int)arg1 onServer:(struct OpaqueAUPBServer { }*)arg2 audioUnit:(struct OpaqueRemoteAudioUnit { }*)arg3 scope:(unsigned int)arg4 element:(unsigned int)arg5 toData:(id)arg6;
- (void)startRegistarConnection;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
