<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AURemoteExtensionContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AudioToolbox.framework/AURemoteExtensionContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (1.8)
 */

@interface AURemoteExtensionContext : NSExtensionContext <AUAudioUnitXPCProtocol> {
    AUAudioUnit * _audioUnit;
    AUParameterTree * _cachedParameterTree;
    struct AudioComponentDescription { 
        unsigned int componentType; 
        unsigned int componentSubType; 
        unsigned int componentManufacturer; 
        unsigned int componentFlags; 
        unsigned int componentFlagsMask; 
    }  _componentDescription;
    int  _deferPropertyChangeNotifications;
    NSObject<OS_voucher> * _initializationVoucher;
    bool  _isUIExtension;
    NSMutableArray * _pendingChangedProperties;
    NSObject<OS_dispatch_queue> * _propertyObserverQueue;
    NSXPCConnection * _remoteHostXPCConnection;
    struct AUExtRenderingServer { int (**x1)(); unsigned int x2; struct XMachPortSendRight { unsigned int x_3_1_1; } x3; int x4; struct IOThread {} *x5; bool x6; unsigned int x7; int x8; int x9; struct IPCAUSharedMemory { int (**x_10_1_1)(); bool x_10_1_2; bool x_10_1_3; unsigned long long x_10_1_4; void *x_10_1_5; unsigned int x_10_1_6; int x_10_1_7; int x_10_1_8; id x_10_1_9; unsigned int x_10_1_10; struct vector<IPCAUSharedMemoryBase::Element, std::__1::allocator<IPCAUSharedMemoryBase::Element> > { struct Element {} *x_11_2_1; struct Element {} *x_11_2_2; struct __compressed_pair<IPCAUSharedMemoryBase::Element *, std::__1::allocator<IPCAUSharedMemoryBase::Element> > { struct Element {} *x_3_3_1; } x_11_2_3; } x_10_1_11; unsigned int x_10_1_12; bool x_10_1_13; unsigned int x_10_1_14; } x10; struct unique_ptr<SemaphoreIOMessenger_Receiver, std::__1::default_delete<SemaphoreIOMessenger_Receiver> > { struct __compressed_pair<SemaphoreIOMessenger_Receiver *, std::__1::default_delete<SemaphoreIOMessenger_Receiver> > { struct SemaphoreIOMessenger_Receiver {} *x_1_2_1; } x_11_1_1; } x11; } * _renderServer;
    struct reply_watchdog_factory { 
        bool mDebugging; 
        int mDefaultTimeoutMS; 
        struct function<void ()>="__buf_"{type="__lx"[24C] {} mTimeoutHandler; 
        struct __base<void ()> {} *__f_; 
    }  _replyWatchdogFactory;
    AUAudioUnitViewService * _viewService;
}

@property (nonatomic) AUAudioUnitViewService *viewService;

+ (id)_extensionAuxiliaryHostProtocol;
+ (id)_extensionAuxiliaryVendorProtocol;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_fetchAndClearPendingChangedProperties;
- (id)_getBus:(unsigned int)arg1 scope:(unsigned int)arg2 error:(id*)arg3;
- (bool)_identifyBus:(id)arg1 scope:(unsigned int*)arg2 element:(unsigned int*)arg3;
- (void)addPropertyObserver:(id)arg1 context:(unsigned long long)arg2 reply:(id /* block */)arg3;
- (void)close:(id /* block */)arg1;
- (id)currentParameterTree;
- (void)dealloc;
- (void)disableProfile:(id)arg1 cable:(unsigned char)arg2 onChannel:(unsigned char)arg3 reply:(id /* block */)arg4;
- (void)enableProfile:(id)arg1 cable:(unsigned char)arg2 onChannel:(unsigned char)arg3 reply:(id /* block */)arg4;
- (void)getBusses:(unsigned int)arg1 reply:(id /* block */)arg2;
- (void)getParameter:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)getParameterTree:(id /* block */)arg1;
- (id)iOSViewController;
- (id)initWithInputItems:(id)arg1 listenerEndpoint:(id)arg2 contextUUID:(id)arg3;
- (void)initialize2:(int)arg1 formats:(id)arg2 maxFrames:(unsigned long long)arg3 buffer:(id)arg4 bufferSize:(unsigned int)arg5 beginSem:(id)arg6 endSem:(id)arg7 reply:(id /* block */)arg8;
- (void)initialize:(unsigned long long)arg1 reply:(id /* block */)arg2;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)open:(id /* block */)arg1;
- (void)parameterNode:(id)arg1 displayNameWithLength:(long long)arg2 reply:(id /* block */)arg3;
- (void)parameterStringFromValue:(float)arg1 currentValue:(bool)arg2 address:(unsigned long long)arg3 reply:(id /* block */)arg4;
- (void)parameterValueFromString:(id)arg1 address:(unsigned long long)arg2 reply:(id /* block */)arg3;
- (void)parametersForOverviewWithCount:(long long)arg1 reply:(id /* block */)arg2;
- (void)profileStateForCable:(unsigned char)arg1 channel:(unsigned char)arg2 reply:(id /* block */)arg3;
- (void)removePropertyObserver:(id)arg1 context:(unsigned long long)arg2 reply:(id /* block */)arg3;
- (void)requestViewControllerWithCompletionHandler:(id /* block */)arg1;
- (void)reset:(id /* block */)arg1;
- (void)selectViewConfiguration:(id)arg1 reply:(id /* block */)arg2;
- (void)setBusCount:(unsigned long long)arg1 scope:(unsigned int)arg2 reply:(id /* block */)arg3;
- (void)setBusFormat:(unsigned int)arg1 scope:(unsigned int)arg2 format:(id)arg3 reply:(id /* block */)arg4;
- (void)setBusName:(unsigned int)arg1 scope:(unsigned int)arg2 name:(id)arg3 reply:(id /* block */)arg4;
- (void)setValue:(id)arg1 forKey:(id)arg2 reply:(id /* block */)arg3;
- (void)setValue:(id)arg1 forProperty:(id)arg2 reply:(id /* block */)arg3;
- (void)setViewService:(id)arg1;
- (void)setWorkIntervalPort:(id)arg1 reply:(id /* block */)arg2;
- (void)supportedViewConfigurations:(id)arg1 reply:(id /* block */)arg2;
- (void)syncParameter:(unsigned long long)arg1 value:(float)arg2 extOriginator:(unsigned long long)arg3 hostTime:(unsigned long long)arg4 eventType:(unsigned int)arg5;
- (void)uninitialize:(id /* block */)arg1;
- (void)valueForKey:(id)arg1 reply:(id /* block */)arg2;
- (void)valueForProperty:(id)arg1 reply:(id /* block */)arg2;
- (id)viewService;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
