<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HapticClient.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AudioToolbox.framework/HapticClient.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AudioToolbox.framework/AudioToolbox (1.8)
 */

@interface HapticClient : NSObject <NSXPCListenerDelegate> {
    NSArray * _channelKeys;
    unsigned long long  _clientID;
    bool  _connected;
    NSXPCConnection * _connection;
    id /* block */  _connectionCallback;
    bool  _prewarmed;
    bool  _running;
    <ServerInterface> * _serverDelegate;
    int  _serverProcessID;
    int  _serverTimeout;
    struct HapticSharedMemory { 
        int (**_vptr$SharableMemoryBase)(); 
        bool mIsOwner; 
        bool mWasMapped; 
        unsigned long long mSize; 
        void *mBuffer; 
        unsigned int mPort; 
        int mFileDesc; 
        int mSerial; 
        NSObject<OS_xpc_object> *mXPCObject; 
    }  _sharedBuffer;
    struct unique_ptr<ClientSyncCaller, std::__1::default_delete<ClientSyncCaller> > { 
        struct __compressed_pair<ClientSyncCaller *, std::__1::default_delete<ClientSyncCaller> > { 
            struct ClientSyncCaller {} *__value_; 
        } __ptr_; 
    }  _syncCaller;
    unsigned long long  _uniqueID;
}

@property (readonly) NSArray *channelKeys;
@property (readonly) unsigned long long clientID;
@property bool connected;
@property (copy) id /* block */ connectionCallback;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) double hapticLatency;
@property (readonly) unsigned long long hash;
@property (readonly) bool prewarmed;
@property (readonly) bool running;
@property (retain) <ServerInterface> *serverDelegate;
@property int serverProcessID;
@property (readonly) Class superclass;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)allocateResources:(id /* block */)arg1;
- (id)channelKeys;
- (bool)clearEventsFromTime:(double)arg1 channel:(unsigned long long)arg2;
- (unsigned long long)clientID;
- (bool)connected;
- (id /* block */)connectionCallback;
- (void)dealloc;
- (void)destroySharedMemory;
- (bool)detachHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;
- (void)disconnect;
- (void)doInit;
- (bool)enableSequenceLooping:(unsigned long long)arg1 enable:(bool)arg2 error:(id*)arg3;
- (bool)finish:(id /* block */)arg1;
- (id)getAsyncDelegateForMethod:(SEL)arg1 errorHandler:(id /* block */)arg2;
- (void)handleServerConnectionInterruption;
- (void)handleServerConnectionInvalidation;
- (double)hapticLatency;
- (id)initAndReturnError:(id*)arg1;
- (bool)loadHapticEvent:(id)arg1 reply:(id /* block */)arg2;
- (bool)loadHapticPattern:(id)arg1 reply:(id /* block */)arg2;
- (bool)loadHapticSequence:(id)arg1 reply:(id /* block */)arg2;
- (bool)prepareHapticSequence:(unsigned long long)arg1 error:(id*)arg2;
- (void)prewarm:(id /* block */)arg1;
- (bool)prewarmed;
- (void)releaseResources;
- (bool)running;
- (bool)sendEvents:(id)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3 outToken:(unsigned long long*)arg4 error:(id*)arg5;
- (id)serverDelegate;
- (int)serverProcessID;
- (bool)setChannelEventBehavior:(unsigned long long)arg1 channel:(unsigned long long)arg2;
- (void)setChannelKeys:(id)arg1;
- (void)setConnected:(bool)arg1;
- (void)setConnectionCallback:(id /* block */)arg1;
- (bool)setNumberOfChannels:(unsigned long long)arg1 error:(id*)arg2;
- (bool)setParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 channel:(unsigned long long)arg4;
- (bool)setPlayerBehavior:(unsigned long long)arg1 error:(id*)arg2;
- (bool)setSequenceParameter:(unsigned long long)arg1 atTime:(double)arg2 value:(float)arg3 sequenceID:(unsigned long long)arg4 channel:(unsigned long long)arg5;
- (void)setServerDelegate:(id)arg1;
- (void)setServerProcessID:(int)arg1;
- (bool)setupConnectionAndReturnError:(id*)arg1;
- (int)setupSharedMemory:(id)arg1 size:(unsigned int)arg2;
- (bool)startEventAndReturnToken:(unsigned long long)arg1 type:(unsigned long long)arg2 atTime:(double)arg3 channel:(unsigned long long)arg4 eventToken:(unsigned long long*)arg5;
- (bool)startHapticSequence:(unsigned long long)arg1 atTime:(double)arg2 withOffset:(double)arg3;
- (void)startRunning:(id /* block */)arg1;
- (bool)stopEventWithToken:(unsigned long long)arg1 atTime:(double)arg2 channel:(unsigned long long)arg3;
- (bool)stopHapticSequence:(unsigned long long)arg1 atTime:(double)arg2;
- (void)stopPrewarm;
- (void)stopRunning;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
