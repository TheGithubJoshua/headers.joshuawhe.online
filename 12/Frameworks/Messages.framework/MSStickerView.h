<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MSStickerView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Messages.framework/MSStickerView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Messages.framework/Messages (1)
 */

@interface MSStickerView : UIView <CKAnimationTimerObserver, UIGestureRecognizerDelegate> {
    bool  _animating;
    double  _animationDuration;
    NSArray * _frames;
    CKAnimatedImage * _image;
    CKImageData * _imageData;
    UIImageView * _imageView;
    bool  _initialLayoutComplete;
    bool  _isPeeled;
    UILongPressGestureRecognizer * _longPressRecognizer;
    MSSticker * _sticker;
    NSError * _stickerError;
    UIImage * _stickerImage;
    UITapGestureRecognizer * _tapRecognizer;
}

@property (nonatomic) bool animating;
@property (nonatomic) double animationDuration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSArray *frames;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) CKAnimatedImage *image;
@property (nonatomic, retain) CKImageData *imageData;
@property (nonatomic, retain) UIImageView *imageView;
@property (nonatomic) bool initialLayoutComplete;
@property (nonatomic, readonly) bool isAnimated;
@property (nonatomic) bool isPeeled;
@property (nonatomic, readonly) UILongPressGestureRecognizer *longPressRecognizer;
@property (nonatomic, retain) MSSticker *sticker;
@property (nonatomic, retain) NSError *stickerError;
@property (nonatomic, retain) UIImage *stickerImage;
@property (readonly) Class superclass;
@property (nonatomic, readonly) UITapGestureRecognizer *tapRecognizer;

- (void).cxx_destruct;
- (void)_configureStickerView;
- (void)_loadAnimatedStickerfIfNecessary;
- (void)_loadSticker;
- (void)_prepareForReuse;
- (void)_resetPeel:(bool)arg1;
- (void)_setImage:(id)arg1;
- (void)_stickerPreviewCachePreviewDidChange:(id)arg1;
- (void)_swapWithOutlineImage;
- (void)_updateStickerView;
- (id)accessibilityLabel;
- (bool)animating;
- (double)animationDuration;
- (void)animationTimerFired:(unsigned long long)arg1;
- (void)dealloc;
- (void)didMoveToWindow;
- (id)frames;
- (void)handleLongPress:(id)arg1;
- (void)handleTap:(id)arg1;
- (id)image;
- (id)imageData;
- (id)imageView;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 sticker:(id)arg2;
- (bool)initialLayoutComplete;
- (bool)isAnimated;
- (bool)isAnimating;
- (bool)isPeeled;
- (void)layoutSubviews;
- (id)longPressRecognizer;
- (void)prepareForSnapshotting;
- (void)setAnimating:(bool)arg1;
- (void)setAnimationDuration:(double)arg1;
- (void)setFrames:(id)arg1;
- (void)setImage:(id)arg1;
- (void)setImageData:(id)arg1;
- (void)setImageView:(id)arg1;
- (void)setInitialLayoutComplete:(bool)arg1;
- (void)setIsPeeled:(bool)arg1;
- (void)setSticker:(id)arg1;
- (void)setStickerError:(id)arg1;
- (void)setStickerImage:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)startAnimating;
- (id)sticker;
- (id)stickerError;
- (id)stickerImage;
- (void)stopAnimating;
- (id)tapRecognizer;
- (void)updateAnimationTimerObserving;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
