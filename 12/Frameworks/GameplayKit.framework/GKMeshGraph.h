<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GKMeshGraph.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/GameplayKit.framework/GKMeshGraph.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/GameplayKit.framework/GameplayKit (1)
 */

@interface GKMeshGraph : GKGraph {
    struct GKCMeshGraph { int (**x1)(); struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_2_1_1; struct GKCGraphNode {} **x_2_1_2; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_3_2_1; } x_2_1_3; } x2; id x3; struct Clipper { int (**x_4_1_1)(); struct vector<ClipperLib::OutRec *, std::__1::allocator<ClipperLib::OutRec *> > { struct OutRec {} **x_2_2_1; struct OutRec {} **x_2_2_2; struct __compressed_pair<ClipperLib::OutRec **, std::__1::allocator<ClipperLib::OutRec *> > { struct OutRec {} **x_3_3_1; } x_2_2_3; } x_4_1_2; struct vector<ClipperLib::Join *, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_3_2_1; struct Join {} **x_3_2_2; struct __compressed_pair<ClipperLib::Join **, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_3_3_1; } x_3_2_3; } x_4_1_3; struct vector<ClipperLib::Join *, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_4_2_1; struct Join {} **x_4_2_2; struct __compressed_pair<ClipperLib::Join **, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_3_3_1; } x_4_2_3; } x_4_1_4; struct vector<ClipperLib::IntersectNode *, std::__1::allocator<ClipperLib::IntersectNode *> > { struct IntersectNode {} **x_5_2_1; struct IntersectNode {} **x_5_2_2; struct __compressed_pair<ClipperLib::IntersectNode **, std::__1::allocator<ClipperLib::IntersectNode *> > { struct IntersectNode {} **x_3_3_1; } x_5_2_3; } x_4_1_5; } x4; } * _cMeshGraph;
    Class  _nodeClass;
    NSMutableArray * _sourceObstacles;
}

@property (nonatomic, readonly) float bufferRadius;
@property (nonatomic, readonly) NSArray *obstacles;
@property (nonatomic, readonly) unsigned long long triangleCount;
@property (nonatomic) unsigned long long triangulationMode;

+ (id)graphWithBufferRadius:(void *)arg1 minCoordinate:(void *)arg2 maxCoordinate:(void *)arg3; // needs 3 arg types, found 1: float
+ (id)graphWithBufferRadius:(void *)arg1 minCoordinate:(void *)arg2 maxCoordinate:(void *)arg3 nodeClass:(void *)arg4; // needs 4 arg types, found 2: float, Class
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)addObstacles:(id)arg1;
- (float)bufferRadius;
- (struct GKCMeshGraph { int (**x1)(); struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_2_1_1; struct GKCGraphNode {} **x_2_1_2; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_3_2_1; } x_2_1_3; } x2; id x3; struct Clipper { int (**x_4_1_1)(); struct vector<ClipperLib::OutRec *, std::__1::allocator<ClipperLib::OutRec *> > { struct OutRec {} **x_2_2_1; struct OutRec {} **x_2_2_2; struct __compressed_pair<ClipperLib::OutRec **, std::__1::allocator<ClipperLib::OutRec *> > { struct OutRec {} **x_3_3_1; } x_2_2_3; } x_4_1_2; struct vector<ClipperLib::Join *, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_3_2_1; struct Join {} **x_3_2_2; struct __compressed_pair<ClipperLib::Join **, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_3_3_1; } x_3_2_3; } x_4_1_3; struct vector<ClipperLib::Join *, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_4_2_1; struct Join {} **x_4_2_2; struct __compressed_pair<ClipperLib::Join **, std::__1::allocator<ClipperLib::Join *> > { struct Join {} **x_3_3_1; } x_4_2_3; } x_4_1_4; struct vector<ClipperLib::IntersectNode *, std::__1::allocator<ClipperLib::IntersectNode *> > { struct IntersectNode {} **x_5_2_1; struct IntersectNode {} **x_5_2_2; struct __compressed_pair<ClipperLib::IntersectNode **, std::__1::allocator<ClipperLib::IntersectNode *> > { struct IntersectNode {} **x_3_3_1; } x_5_2_3; } x_4_1_5; } x4; }*)cMeshGraph;
- (Class)classForGenericArgumentAtIndex:(unsigned long long)arg1;
- (void)connectNodeUsingObstacles:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithBufferRadius:(void *)arg1 minCoordinate:(void *)arg2 maxCoordinate:(void *)arg3; // needs 3 arg types, found 1: float
- (id)initWithBufferRadius:(void *)arg1 minCoordinate:(void *)arg2 maxCoordinate:(void *)arg3 nodeClass:(void *)arg4; // needs 4 arg types, found 2: float, Class
- (id)initWithCoder:(id)arg1;
- (struct GKCGraph { int (**x1)(); struct vector<GKCGraphNode *, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_2_1_1; struct GKCGraphNode {} **x_2_1_2; struct __compressed_pair<GKCGraphNode **, std::__1::allocator<GKCGraphNode *> > { struct GKCGraphNode {} **x_3_2_1; } x_2_1_3; } x2; id x3; }*)makeCGraph;
- (bool)makeNodesFromTriangleCenters;
- (bool)makeNodesFromTriangleEdgeMidpoints;
- (bool)makeNodesFromTriangleVertices;
- (Class)nodeClass;
- (id)obstacles;
- (void)removeObstacles:(id)arg1;
- (void)setMakeNodesFromTriangleCenters:(bool)arg1;
- (void)setMakeNodesFromTriangleEdgeMidpoints:(bool)arg1;
- (void)setMakeNodesFromTriangleVertices:(bool)arg1;
- (void)setTriangulationMode:(unsigned long long)arg1;
- (struct GKTriangle { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })triangleAtIndex:(unsigned long long)arg1;
- (unsigned long long)triangleCount;
- (void)triangulate;
- (unsigned long long)triangulationMode;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
