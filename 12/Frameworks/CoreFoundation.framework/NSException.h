<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSException.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreFoundation.framework/NSException.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation (1575.23)
 */

@interface NSException : NSObject <NSCoding, NSCopying> {
    NSString * name;
    NSString * reason;
    id  reserved;
    NSDictionary * userInfo;
}

@property (readonly, copy) NSArray *callStackReturnAddresses;
@property (readonly, copy) NSArray *callStackSymbols;
@property (readonly, copy) NSString *name;
@property (readonly, copy) NSString *reason;
@property (readonly, copy) NSDictionary *userInfo;
@property (readonly, copy) NSString *xct_formattedDescription;

// Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation

+ (id)exceptionWithName:(id)arg1 reason:(id)arg2 userInfo:(id)arg3;
+ (void)raise:(id)arg1 format:(id)arg2;
+ (void)raise:(id)arg1 format:(id)arg2 arguments:(char *)arg3;

- (bool)_installStackTraceKeyIfNeeded;
- (id)callStackReturnAddresses;
- (id)callStackSymbols;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (unsigned long long)hash;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithName:(id)arg1 reason:(id)arg2 userInfo:(id)arg3;
- (bool)isEqual:(id)arg1;
- (id)name;
- (void)raise;
- (id)reason;
- (id)redactedDescription;
- (id)userInfo;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

- (id)debugDescription;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;

// Image: /System/Library/Frameworks/ModelIO.framework/ModelIO

+ (bool)mdltsu_catchExceptionsInBlock:(id /* block */)arg1 error:(id*)arg2;
+ (void)mdltsu_raiseWithError:(id)arg1;

- (id)mdltsu_error;

// Image: /System/Library/PrivateFrameworks/IMSharedUtilities.framework/Frameworks/XCTest.framework/XCTest

- (id)xct_formattedDescription;

// Image: /System/Library/PrivateFrameworks/Memories.framework/Memories

+ (void)errnoRaise:(id)arg1 format:(id)arg2;

- (int)localErrno;

// Image: /System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry

- (id)nr_safeDescription;

// Image: /System/Library/PrivateFrameworks/News/AppAnalytics.framework/AppAnalytics

+ (bool)aa_tryCatch:(id /* block */)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/News/TeaFoundation.framework/TeaFoundation

+ (void)tf_throw:(id)arg1;
+ (bool)tf_tryCatch:(id /* block */)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport

+ (void)sfu_errnoRaise:(id)arg1 format:(id)arg2;
+ (void)tsu_raiseWithError:(id)arg1;

- (id)gsu_descriptionWithStacktrace;
- (int)sfu_localErrno;
- (id)tsu_error;

// Image: /System/Library/PrivateFrameworks/PairedSync.framework/PairedSync

- (id)psy_safeDescription;

// Image: /System/Library/PrivateFrameworks/Stocks/AppAnalytics.framework/AppAnalytics

+ (bool)aa_tryCatch:(id /* block */)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/Stocks/TeaFoundation.framework/TeaFoundation

+ (bool)tf_tryCatch:(id /* block */)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/TSUtility.framework/TSUtility

+ (void)errnoRaise:(id)arg1 format:(id)arg2;
+ (void)tsu_raiseWithError:(id)arg1;

- (int)localErrno;
- (id)tsu_error;

// Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport

+ (void)sfu_errnoRaise:(id)arg1 format:(id)arg2;
+ (bool)tsu_catchExceptionsInBlock:(id /* block */)arg1 error:(id*)arg2;
+ (void)tsu_raiseWithError:(id)arg1;

- (int)sfu_localErrno;
- (id)tsu_error;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
