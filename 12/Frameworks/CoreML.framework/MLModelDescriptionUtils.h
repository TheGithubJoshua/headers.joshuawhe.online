<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MLModelDescriptionUtils.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreML.framework/MLModelDescriptionUtils.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreML.framework/CoreML (1)
 */

@interface MLModelDescriptionUtils : NSObject

+ (void)copyFeatureDescriptionFrom:(id)arg1 to:(struct FeatureDescription { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_3_1_1; } x3; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_4_1_1; } x4; struct FeatureType {} *x5; int x6; }*)arg2 error:(id*)arg3;
+ (struct FeatureType { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; bool x3; union TypeUnion { struct Int64FeatureType {} *x_4_1_1; struct DoubleFeatureType {} *x_4_1_2; struct StringFeatureType {} *x_4_1_3; struct ImageFeatureType {} *x_4_1_4; struct ArrayFeatureType {} *x_4_1_5; struct DictionaryFeatureType {} *x_4_1_6; struct SequenceFeatureType {} *x_4_1_7; } x4; int x5; unsigned int x6[1]; }*)createFeatureTypeFromFeatureDescription:(id)arg1 error:(id*)arg2;
+ (struct Metadata { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; struct MapFieldLite<google::protobuf::internal::MapEntryLite<std::__1::basic_string<char>, std::__1::basic_string<char>, google::protobuf::internal::WireFormatLite::TYPE_STRING, google::protobuf::internal::WireFormatLite::TYPE_STRING, 0>, std::__1::basic_string<char>, std::__1::basic_string<char>, google::protobuf::internal::WireFormatLite::TYPE_STRING, google::protobuf::internal::WireFormatLite::TYPE_STRING, 0> { struct Arena {} *x_3_1_1; struct Map<std::__1::basic_string<char>, std::__1::basic_string<char> > { struct Arena {} *x_2_2_1; int x_2_2_2; struct InnerMap {} *x_2_2_3; } x_3_1_2; } x3; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_4_1_1; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; }*)createMetaData:(id)arg1;
+ (struct ModelDescription { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; struct RepeatedPtrField<CoreML::Specification::FeatureDescription> { struct Arena {} *x_3_1_1; int x_3_1_2; int x_3_1_3; struct Rep {} *x_3_1_4; } x3; struct RepeatedPtrField<CoreML::Specification::FeatureDescription> { struct Arena {} *x_4_1_1; int x_4_1_2; int x_4_1_3; struct Rep {} *x_4_1_4; } x4; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_5_1_1; } x5; struct ArenaStringPtr { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x_6_1_1; } x6; struct Metadata {} *x7; int x8; }*)createModelDescription:(id)arg1 error:(id*)arg2;
+ (struct ArrayFeatureType { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; struct RepeatedField<long long> { int x_3_1_1; int x_3_1_2; struct Rep {} *x_3_1_3; } x3; int x4; int x5; union ShapeFlexibilityUnion { struct ArrayFeatureType_EnumeratedShapes {} *x_6_1_1; struct ArrayFeatureType_ShapeRange {} *x_6_1_2; } x6; int x7; unsigned int x8[1]; }*)getArrayFeatureTypeFromConstraint:(id)arg1;
+ (struct DictionaryFeatureType { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; union KeyTypeUnion { struct Int64FeatureType {} *x_3_1_1; struct StringFeatureType {} *x_3_1_2; } x3; int x4; unsigned int x5[1]; }*)getDictionaryFeatureTypeFromConstraint:(id)arg1 error:(id*)arg2;
+ (struct ImageFeatureType { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; long long x3; long long x4; int x5; union SizeFlexibilityUnion { struct ImageFeatureType_EnumeratedImageSizes {} *x_6_1_1; struct ImageFeatureType_ImageSizeRange {} *x_6_1_2; } x6; int x7; unsigned int x8[1]; }*)getImageFeatureTypeFromConstraint:(id)arg1;
+ (struct SequenceFeatureType { int (**x1)(); struct InternalMetadataWithArenaLite { void *x_2_1_1; } x2; struct SizeRange {} *x3; union TypeUnion { struct Int64FeatureType {} *x_4_1_1; struct StringFeatureType {} *x_4_1_2; } x4; int x5; unsigned int x6[1]; }*)getSequenceFeatureTypeFromConstraint:(id)arg1 error:(id*)arg2;
+ (bool)saveModelDescription:(id)arg1 toSpecification:(struct _MLModelSpecification { struct shared_ptr<CoreML::Specification::Model> { struct Model {} *x_1_1_1; struct __shared_weak_count {} *x_1_1_2; } x1; }*)arg2 error:(id*)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
