<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MLMultiArray.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreML.framework/MLMultiArray.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreML.framework/CoreML (1)
 */

@interface MLMultiArray : NSObject {
    id /* block */  _deallocator;
    bool  _managingData;
    struct MultiArrayBuffer { int (**x1)(); struct shared_ptr<unsigned char> { char *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; unsigned long long *x_3_1_2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_2_1; } x_3_1_3; } x3; struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x_4_1_1; unsigned long long *x_4_1_2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_2_1; } x_4_1_3; } x4; int x5; unsigned long long x6; unsigned short x7; } * _pArray;
    NSArray * _shape;
    NSArray * _strides;
}

@property (getter=isContiguous, nonatomic, readonly) bool contiguous;
@property (nonatomic, readonly) long long count;
@property (nonatomic, readonly) void*dataPointer;
@property (nonatomic, readonly) long long dataType;
@property (getter=isManagingData, nonatomic, readonly) bool managingData;
@property (nonatomic, readonly) unsigned long long numberOfBytesPerElement;
@property (nonatomic, readonly) NSArray *shape;
@property (nonatomic, readonly) NSArray *strides;

// Image: /System/Library/Frameworks/CoreML.framework/CoreML

+ (id)arrayFromIndexVector:(const struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; }*)arg1;
+ (int)cppStorageOrder:(long long)arg1;
+ (id)doubleMatrixWithValues:(id)arg1 error:(id*)arg2;
+ (id)doubleMultiArrayWithCopyOfMultiArray:(id)arg1;
+ (id)doubleMultiArrayWithShape:(id)arg1 valueArray:(id)arg2 error:(id*)arg3;
+ (id)doubleVectorWithValues:(id)arg1;
+ (struct vector<unsigned long, std::__1::allocator<unsigned long> > { unsigned long long *x1; unsigned long long *x2; struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { unsigned long long *x_3_1_1; } x3; })indexVectorFromArray:(id)arg1;
+ (struct __CVBuffer { }*)pixelBufferBGRA8FromMultiArrayCHW:(id)arg1 channelOrderIsBGR:(bool)arg2 error:(id*)arg3;
+ (struct __CVBuffer { }*)pixelBufferGray8FromMultiArrayHW:(id)arg1 error:(id*)arg2;
+ (id)stringForDataType:(long long)arg1;

- (void).cxx_destruct;
- (bool)copyIntoMultiArray:(id)arg1 error:(id*)arg2;
- (long long)count;
- (void*)dataPointer;
- (long long)dataType;
- (void)dealloc;
- (id)debugQuickLookObject;
- (id)description;
- (double*)doublePointer;
- (bool)fillWithNumber:(id)arg1;
- (id)initWithDataPointer:(void*)arg1 shape:(id)arg2 dataType:(long long)arg3 strides:(id)arg4 deallocator:(id /* block */)arg5 error:(id*)arg6;
- (id)initWithShape:(id)arg1 dataType:(long long)arg2 error:(id*)arg3;
- (id)initWithShape:(id)arg1 dataType:(long long)arg2 storageOrder:(long long)arg3 error:(id*)arg4;
- (bool)isContiguous;
- (bool)isContiguousInOrder:(long long)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToMultiArray:(id)arg1;
- (bool)isManagingData;
- (void*)multiArrayBuffer;
- (id)numberArray;
- (id)numberAtOffset:(unsigned long long)arg1;
- (unsigned long long)numberOfBytesPerElement;
- (id)objectAtIndexedSubscript:(long long)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (unsigned long long)offsetForKeyedSubscript:(id)arg1;
- (id)sequeeze;
- (id)sequeezeDimensions:(id)arg1 error:(id*)arg2;
- (void)setNumber:(id)arg1 atOffset:(unsigned long long)arg2;
- (void)setObject:(id)arg1 atIndexedSubscript:(long long)arg2;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (bool)setRangeWithRawData:(id)arg1 destIndex:(unsigned long long)arg2 error:(id*)arg3;
- (id)shape;
- (id)sliceAtOrigin:(id)arg1 shape:(id)arg2 squeeze:(bool)arg3 error:(id*)arg4;
- (id)strides;
- (bool)vectorizeIntoMultiArray:(id)arg1 storageOrder:(long long)arg2 error:(id*)arg3;

// Image: /System/Library/PrivateFrameworks/SpotlightServices.framework/SpotlightServices

- (double*)doublePointer;
- (float*)floatPointer;
- (id)initForDoubleTypeWithShape:(id)arg1;
- (id)initForFloat32TypeWithShape:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
