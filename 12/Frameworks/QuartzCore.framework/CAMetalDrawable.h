<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CAMetalDrawable.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/QuartzCore.framework/CAMetalDrawable.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/QuartzCore.framework/QuartzCore (701.14)
 */

@interface CAMetalDrawable : NSObject <CAMetalDrawable, MTLDrawableSPI> {
    <MTLTexture> * _cachedTexture;
    unsigned long long  _drawableID;
    unsigned int  _insertSeed;
    CAMetalLayer * _layer;
    NSMutableArray * _presentScheduledHandlers;
    unsigned int  _presentScheduledInsertSeed;
    bool  _presentScheduledInsertSeedValid;
    NSMutableArray * _presentedHandlers;
    double  _presentedTime;
    struct _CAMetalDrawablePrivate { struct Atomic { struct { int x_1_2_1; } x_1_1_1; } x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned long long x5; unsigned long long x6; struct _CAMetalLayerPrivate {} *x7; struct __IOSurface {} *x8; id x9; id x10; struct CGColorSpace {} *x11; unsigned int x12; unsigned int x13 : 1; unsigned int x14 : 1; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; } * _priv;
    unsigned long long  _status;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long drawableID;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned int insertSeed;
@property (readonly) CAMetalLayer *layer;
@property (nonatomic) unsigned int presentScheduledInsertSeed;
@property (nonatomic) bool presentScheduledInsertSeedValid;
@property (nonatomic) double presentedTime;
@property (nonatomic) unsigned long long status;
@property (readonly) Class superclass;
@property (readonly) <MTLTexture> *texture;

- (void).cxx_destruct;
- (void)addPresentScheduledHandler:(id /* block */)arg1;
- (void)addPresentedHandler:(id /* block */)arg1;
- (id)cachedTexture;
- (void)dealloc;
- (void)didPresentAtTime:(double)arg1;
- (void)didScheduledPresent;
- (unsigned long long)drawableID;
- (bool)hasPresentedHandlers;
- (id)initWithDrawablePrivate:(struct _CAMetalDrawablePrivate { struct Atomic { struct { int x_1_2_1; } x_1_1_1; } x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned long long x5; unsigned long long x6; struct _CAMetalLayerPrivate {} *x7; struct __IOSurface {} *x8; id x9; id x10; struct CGColorSpace {} *x11; unsigned int x12; unsigned int x13 : 1; unsigned int x14 : 1; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; }*)arg1 layer:(id)arg2;
- (unsigned int)insertSeed;
- (id)layer;
- (void)present;
- (void)presentAfterMinimumDuration:(double)arg1;
- (void)presentAtTime:(double)arg1;
- (unsigned int)presentScheduledInsertSeed;
- (bool)presentScheduledInsertSeedValid;
- (double)presentedTime;
- (struct _CAMetalDrawablePrivate { struct Atomic { struct { int x_1_2_1; } x_1_1_1; } x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned long long x5; unsigned long long x6; struct _CAMetalLayerPrivate {} *x7; struct __IOSurface {} *x8; id x9; id x10; struct CGColorSpace {} *x11; unsigned int x12; unsigned int x13 : 1; unsigned int x14 : 1; unsigned int x15 : 1; unsigned int x16 : 1; unsigned int x17 : 1; }*)priv;
- (void)releasePrivateReferences:(struct _CAMetalLayerPrivate { struct Atomic { struct { int x_1_2_1; } x_1_1_1; } x1; struct Atomic { struct { int x_1_2_1; } x_2_1_1; } x2; struct SpinLock { struct { int x_1_2_1; } x_3_1_1; } x3; struct _CAImageQueue {} *x4; id x5; double x6; double x7; struct List<_CAMetalDrawablePrivate *> {} *x8; unsigned int x9; id x10; unsigned long long x11; struct CGSize { double x_12_1_1; double x_12_1_2; } x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; struct Atomic { struct { int x_1_2_1; } x_17_1_1; } x17; id x18; struct Atomic { struct { int x_1_2_1; } x_19_1_1; } x19; struct SpinLock { struct { int x_1_2_1; } x_20_1_1; } x20; id x21; unsigned long long x22; struct SpinLock { struct { int x_1_2_1; } x_23_1_1; } x23; id x24; struct Atomic { struct { int x_1_2_1; } x_25_1_1; } x25; struct CGColorSpace {} *x26; unsigned long long x27; unsigned int x28 : 1; unsigned int x29 : 1; unsigned int x30 : 1; unsigned int x31 : 1; unsigned int x32 : 1; unsigned int x33 : 1; unsigned int x34 : 1; unsigned int x35 : 1; }*)arg1;
- (void)setDrawableID:(unsigned long long)arg1;
- (void)setInsertSeed:(unsigned int)arg1;
- (void)setPresentScheduledInsertSeed:(unsigned int)arg1;
- (void)setPresentScheduledInsertSeedValid:(bool)arg1;
- (void)setPresentedTime:(double)arg1;
- (void)setStatus:(unsigned long long)arg1;
- (unsigned long long)status;
- (id)texture;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
