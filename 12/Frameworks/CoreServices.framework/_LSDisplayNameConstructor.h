<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_LSDisplayNameConstructor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreServices.framework/_LSDisplayNameConstructor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreServices.framework/CoreServices (947)
 */

@interface _LSDisplayNameConstructor : NSObject {
    NSString * _baseName;
    NSString * _extension;
    unsigned int  _hadBiDiControlCharacter;
    unsigned int  _hadColonInFSName;
    unsigned int  _hadForbiddenCharacter;
    unsigned int  _hadNonASCIICharacter;
    unsigned int  _isFolder;
    NSString * _originalName;
    NSString * _secondaryExtension;
    unsigned int  _wantsHiddenExtension;
}

+ (id)concatenateBaseName:(id)arg1 andExtension:(id)arg2;
+ (id)displayNameConstructorWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1 node:(id)arg2 error:(id*)arg3;
+ (id)displayNameConstructorsWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1 node:(id)arg2 error:(id*)arg3;
+ (void)getExtensionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg1 secondaryExtensionRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg2 fromFileName:(id)arg3 considerConfusables:(bool)arg4;
+ (void)setShowAllExtensions:(bool)arg1;
+ (void)setSuffixForRemoteXCTests:(id)arg1;
+ (bool)showAllExtensions;
+ (id)suffixForRemoteXCTests;
+ (id)visuallyOrderCharactersInString:(id)arg1 error:(id*)arg2;

- (void).cxx_destruct;
- (id)balanceBiDiControlCharacter:(unsigned short)arg1 inString:(id)arg2 imbalanceAmount:(long long)arg3;
- (id)balanceBiDiControlCharacters:(id)arg1;
- (bool)canSetExtensionHiddenWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1;
- (id)cleanSecondaryExtension:(id)arg1;
- (id)combineBaseName:(id)arg1 extension:(id)arg2;
- (void)getTransformedBaseName:(id*)arg1 extension:(id*)arg2 needsBiDiControlCharacters:(bool)arg3;
- (void)getUnlocalizedBaseName:(id*)arg1 extension:(id*)arg2 requiresAdditionalBiDiControlCharacters:(bool*)arg3;
- (id)init;
- (void)initContentBitsWithDisplayName:(id)arg1 treatAsFSName:(bool)arg2;
- (void)initNamePartsWithDisplayName:(id)arg1;
- (void)initNodeBitsWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1 node:(id)arg2 bundleClass:(const unsigned int*)arg3;
- (id)initWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1 node:(id)arg2 bundleClass:(const unsigned int*)arg3 desiredDisplayName:(id)arg4 treatAsFSName:(bool)arg5;
- (id)insertCompleteNameBiDiControlCharacters:(id)arg1;
- (id)insertNameComponentBiDiControlCharacters:(id)arg1;
- (bool)isStringNaturallyRTL:(id)arg1;
- (bool)mayHideExtensionWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1;
- (id)replaceForbiddenCharacters:(id)arg1;
- (bool)showExtensionWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1 asIfShowingAllExtensions:(id)arg2;
- (id)transformBeforeCombining:(id)arg1 needsBiDiControlCharacters:(bool*)arg2;
- (id)unlocalizedNameWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1;
- (id)unlocalizedNameWithContext:(struct LSContext { struct LSDatabase {} *x1; }*)arg1 asIfShowingAllExtensions:(id)arg2;
- (bool)wantsHiddenExtension;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
