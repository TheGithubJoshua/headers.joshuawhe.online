<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>FSNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreServices.framework/FSNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreServices.framework/CoreServices (947)
 */

@interface FSNode : NSObject <NSCopying, NSSecureCoding> {
    unsigned long long  _cacheExpiration;
    unsigned int  _canUseFileCache;
    unsigned int  _hasReferringAliasNode;
    unsigned int  _isDirectory;
    unsigned int  _isInitialized;
    NSURL * _url;
}

@property (nonatomic, readonly) NSURL *URL;
@property (getter=isAliasFile, nonatomic, readonly) bool aliasFile;
@property (getter=isBusyDirectory, nonatomic, readonly) bool busyDirectory;
@property (getter=isDirectory, nonatomic, readonly) bool directory;
@property (getter=isExecutable, nonatomic, readonly) bool executable;
@property (nonatomic, readonly) bool hasHiddenExtension;
@property (nonatomic, readonly) bool hasPackageBit;
@property (getter=isHidden, nonatomic, readonly) bool hidden;
@property (getter=isMountTrigger, readonly) bool mountTrigger;
@property (getter=isOnDiskImage, readonly) bool onDiskImage;
@property (getter=isOnLocalVolume, readonly) bool onLocalVolume;
@property (nonatomic, copy) FSNode *referringAliasNode;
@property (getter=isRegularFile, nonatomic, readonly) bool regularFile;
@property (getter=isResolvable, nonatomic, readonly) bool resolvable;
@property (getter=isSymbolicLink, nonatomic, readonly) bool symbolicLink;
@property (getter=isVolume, readonly) bool volume;

+ (id)_resolvedNodeFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
+ (id)_resolvedURLFromAliasFile:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
+ (bool)canAccessURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2 operation:(const char *)arg3;
+ (bool)canReadMetadataOfURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2;
+ (bool)canReadURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2;
+ (bool)canWriteURL:(id)arg1 fromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg2;
+ (unsigned int)compareBookmarkData:(id)arg1 toBookmarkData:(id)arg2;
+ (bool)getFileSystemRepresentation:(BOOL)arg1 forBookmarkData:(id)arg2;
+ (bool)getVolumeIdentifier:(unsigned long long*)arg1 forBookmarkData:(id)arg2 error:(id*)arg3;
+ (id)nameForBookmarkData:(id)arg1 error:(id*)arg2;
+ (id)pathForBookmarkData:(id)arg1 error:(id*)arg2;
+ (id)rootVolumeNode;
+ (bool)supportsSecureCoding;

- (struct __CFBundle { }*)CFBundleWithError:(id*)arg1;
- (id)URL;
- (id)bookmarkDataWithOptions:(unsigned long long)arg1 relativeToNode:(id)arg2 error:(id*)arg3;
- (id)bundleInfoDictionaryWithError:(id*)arg1;
- (bool)canReadFromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg1;
- (bool)canReadMetadataFromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg1;
- (bool)canWriteFromSandboxWithAuditToken:(const struct { unsigned int x1[8]; }*)arg1;
- (id)canonical:(bool)arg1 pathWithError:(id*)arg2;
- (id)canonicalPathWithError:(id*)arg1;
- (id)childNodeWithRelativePath:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
- (void)clearURLPropertyCacheIfStale;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)diskImageURLWithFlags:(unsigned int)arg1 error:(id*)arg2;
- (void)encodeWithCoder:(id)arg1;
- (id)extendedAttributeWithName:(id)arg1 options:(int)arg2 error:(id*)arg3;
- (id)extensionWithError:(id*)arg1;
- (bool)getContentModificationDate:(double*)arg1 error:(id*)arg2;
- (bool)getCreationDate:(double*)arg1 error:(id*)arg2;
- (bool)getDate:(double*)arg1 forKey:(id)arg2 error:(id*)arg3;
- (bool)getDeviceNumber:(int*)arg1 error:(id*)arg2;
- (bool)getFileIdentifier:(unsigned long long*)arg1 error:(id*)arg2;
- (bool)getFileSystemRepresentation:(BOOL)arg1 error:(id*)arg2;
- (bool)getFinderInfo:(union { unsigned char x1[32]; struct { struct FileInfo { unsigned int x_1_2_1; unsigned int x_1_2_2; unsigned short x_1_2_3; struct Point { short x_4_3_1; short x_4_3_2; } x_1_2_4; unsigned short x_1_2_5; } x_2_1_1; unsigned char x_2_1_2[16]; } x2; struct { struct FolderInfo { struct Rect { short x_1_3_1; short x_1_3_2; short x_1_3_3; short x_1_3_4; } x_1_2_1; unsigned short x_1_2_2; struct Point { short x_3_3_1; short x_3_3_2; } x_1_2_3; unsigned short x_1_2_4; } x_3_1_1; unsigned char x_3_1_2[16]; } x3; }*)arg1 error:(id*)arg2;
- (bool)getHFSType:(unsigned int*)arg1 creator:(unsigned int*)arg2 error:(id*)arg3;
- (bool)getInodeNumber:(unsigned long long*)arg1 error:(id*)arg2;
- (bool)getIsDirectory_NoIO:(bool*)arg1;
- (bool)getLength:(unsigned long long*)arg1 error:(id*)arg2;
- (bool)getOwnerUID:(unsigned int*)arg1 GID:(unsigned int*)arg2 error:(id*)arg3;
- (bool)getResourceValue:(id*)arg1 forKey:(id)arg2 options:(unsigned int)arg3 error:(id*)arg4;
- (bool)getTemporaryResourceValue:(id*)arg1 forKey:(id)arg2;
- (bool)getValue:(id*)arg1 forResourcePropertyKeyAndDirectoryFlag:(id)arg2;
- (bool)getVolumeIdentifier:(unsigned long long*)arg1 error:(id*)arg2;
- (bool)getWriterBundleIdentifier:(id*)arg1 error:(id*)arg2;
- (bool)hasHiddenExtension;
- (bool)hasPackageBit;
- (unsigned long long)hash;
- (id)initByResolvingBookmarkData:(id)arg1 options:(unsigned long long)arg2 relativeToNode:(id)arg3 bookmarkDataIsStale:(bool*)arg4 error:(id*)arg5;
- (id)initTemporaryNodeOnVolume:(id)arg1 flags:(unsigned int)arg2 fileDescriptor:(int*)arg3 error:(id*)arg4;
- (id)initWithCoder:(id)arg1;
- (id)initWithConfigurationString:(int)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
- (id)initWithDirectory:(unsigned long long)arg1 inDomain:(unsigned long long)arg2 lastPathComponent:(id)arg3 createIntermediateDirectories:(bool)arg4 flags:(unsigned int)arg5 error:(id*)arg6;
- (id)initWithFileSystemRepresentation:(const char *)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
- (id)initWithURL:(id)arg1 flags:(unsigned int)arg2 error:(id*)arg3;
- (bool)isAliasFile;
- (bool)isBusyDirectory;
- (bool)isDirectory;
- (bool)isEqual:(id)arg1;
- (bool)isExecutable;
- (bool)isHidden;
- (bool)isMountTrigger;
- (bool)isOnDiskImage;
- (bool)isOnLocalVolume;
- (bool)isRegularFile;
- (bool)isResolvable;
- (bool)isSymbolicLink;
- (bool)isVolume;
- (id)nameWithError:(id*)arg1;
- (id)pathWithError:(id*)arg1;
- (void)prepareForReuse;
- (id)referringAliasNode;
- (id)resolvedNodeWithFlags:(unsigned int)arg1 error:(id*)arg2;
- (void)setDirectoryFlagForResourcePropertyKey:(id)arg1 value:(id)arg2;
- (bool)setExtendedAttribute:(id)arg1 name:(id)arg2 options:(int)arg3 error:(id*)arg4;
- (void)setReferringAliasNode:(id)arg1;
- (bool)setResourceValue:(id)arg1 forKey:(id)arg2 options:(unsigned int)arg3 error:(id*)arg4;
- (void)setTemporaryResourceValue:(id)arg1 forKey:(id)arg2;
- (id)temporaryDirectoryNodeWithFlags:(unsigned int)arg1 error:(id*)arg2;
- (id)volumeNodeWithFlags:(unsigned int)arg1 error:(id*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
