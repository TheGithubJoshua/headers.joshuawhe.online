<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ARImageData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ARKit.framework/ARImageData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ARKit.framework/ARKit (91.5)
 */

@interface ARImageData : NSObject <ARDictionaryCoding, ARSensorData, NSCopying, NSSecureCoding> {
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[3]; 
    }  _cameraIntrinsics;
    long long  _cameraPosition;
    NSDate * _captureDate;
    long long  _captureFramesPerSecond;
    double  _currentCaptureTimestamp;
    AVDepthData * _depthData;
    double  _depthDataTimestamp;
    double  _exposureDuration;
    float  _exposureTargetOffset;
    ARFaceData * _faceData;
    struct CGSize { 
        double width; 
        double height; 
    }  _imageResolution;
    unsigned long long  _lensType;
    bool  _mirrored;
    struct __CVBuffer { } * _pixelBuffer;
    void _radialDistortion;
    void _tangentialDistortion;
    float  _temperature;
    double  _timestamp;
    struct __CVBuffer { } * _visionData;
}

@property (nonatomic) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; } cameraIntrinsics;
@property (nonatomic) long long cameraPosition;
@property (nonatomic, copy) NSDate *captureDate;
@property (nonatomic) long long captureFramesPerSecond;
@property (nonatomic) double currentCaptureTimestamp;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) AVDepthData *depthData;
@property (nonatomic) double depthDataTimestamp;
@property (readonly, copy) NSString *description;
@property (nonatomic) double exposureDuration;
@property (nonatomic) float exposureTargetOffset;
@property (nonatomic, retain) ARFaceData *faceData;
@property (readonly) unsigned long long hash;
@property (nonatomic) struct CGSize { double x1; double x2; } imageResolution;
@property (nonatomic) unsigned long long lensType;
@property (getter=isMirrored, nonatomic) bool mirrored;
@property (nonatomic, readonly) ARImageData *originalImage;
@property (nonatomic) struct __CVBuffer { }*pixelBuffer;
@property (nonatomic) void radialDistortion;
@property (readonly) Class superclass;
@property (nonatomic) void tangentialDistortion;
@property (nonatomic) float temperature;
@property (nonatomic) double timestamp;
@property (nonatomic) struct __CVBuffer { }*visionData;

+ (id)captureDateFromPresentationTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 session:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })cameraIntrinsics;
- (long long)cameraPosition;
- (id)captureDate;
- (long long)captureFramesPerSecond;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)currentCaptureTimestamp;
- (void)dealloc;
- (id)depthData;
- (double)depthDataTimestamp;
- (id)encodeToDictionary;
- (void)encodeWithCoder:(id)arg1;
- (double)exposureDuration;
- (float)exposureTargetOffset;
- (id)faceData;
- (struct CGSize { double x1; double x2; })imageResolution;
- (id)initWithCoder:(id)arg1;
- (id)initWithDictionary:(id)arg1;
- (id)initWithImageData:(id)arg1;
- (id)initWithSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 captureFramePerSecond:(long long)arg2 captureDevice:(id)arg3 captureSession:(id)arg4;
- (bool)isEqual:(id)arg1;
- (bool)isMirrored;
- (unsigned long long)lensType;
- (id)originalImage;
- (struct __CVBuffer { }*)pixelBuffer;
- (void)radialDistortion;
- (void)setCameraIntrinsics:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[3]; })arg1;
- (void)setCameraPosition:(long long)arg1;
- (void)setCaptureDate:(id)arg1;
- (void)setCaptureFramesPerSecond:(long long)arg1;
- (void)setCurrentCaptureTimestamp:(double)arg1;
- (void)setDepthData:(id)arg1;
- (void)setDepthDataTimestamp:(double)arg1;
- (void)setExposureDuration:(double)arg1;
- (void)setExposureTargetOffset:(float)arg1;
- (void)setFaceData:(id)arg1;
- (void)setImageResolution:(struct CGSize { double x1; double x2; })arg1;
- (void)setLensType:(unsigned long long)arg1;
- (void)setMirrored:(bool)arg1;
- (void)setPixelBuffer:(struct __CVBuffer { }*)arg1;
- (void)setRadialDistortion;
- (void)setTangentialDistortion;
- (void)setTemperature:(float)arg1;
- (void)setTimestamp:(double)arg1;
- (void)setVisionData:(struct __CVBuffer { }*)arg1;
- (void)tangentialDistortion;
- (float)temperature;
- (double)timestamp;
- (struct __CVBuffer { }*)visionData;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
