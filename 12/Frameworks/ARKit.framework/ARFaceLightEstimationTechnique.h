<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ARFaceLightEstimationTechnique.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ARKit.framework/ARFaceLightEstimationTechnique.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ARKit.framework/ARKit (91.5)
 */

@interface ARFaceLightEstimationTechnique : ARTechnique {
    bool  _cameraTransformAvailable;
    NSObject<OS_dispatch_semaphore> * _estimatingSemaphore;
    struct FLEOptions { 
        float smoothingAlpha; 
        float lightIntensityMinimumConstraint; 
        bool ransacEnabled; 
        bool chromaEnabled; 
        int ransacMinSampleSet; 
        float ransacErrorThreshold; 
        bool darkBehindHead; 
    }  _faceLightEstimationOptions;
    struct FacialLightEstimation { 
        struct Matrix<float, 0, 1> { 
            float *m_data; 
            unsigned long long m_capacity; 
            unsigned int m_rows; 
        } m_validSampleIntensities; 
        struct vector<int, std::__1::allocator<int> > { 
            int *__begin_; 
            int *__end_; 
            struct __compressed_pair<int *, std::__1::allocator<int> > { 
                int *__value_; 
            } __end_cap_; 
        } m_validChromaSampleIDS; 
        struct vector<int, std::__1::allocator<int> > { 
            int *__begin_; 
            int *__end_; 
            struct __compressed_pair<int *, std::__1::allocator<int> > { 
                int *__value_; 
            } __end_cap_; 
        } m_sampleIndices_all; 
        struct Matrix<float, 0, 0> { 
            float *m_data; 
            unsigned long long m_capacity; 
            unsigned int m_rows; 
            unsigned int m_cols; 
        } m_validRtfs; 
        struct shared_ptr<arkit::PrecomputedFaceData> { 
            struct PrecomputedFaceData {} *__ptr_; 
            struct __shared_weak_count {} *__cntrl_; 
        } m_precomputedFaceData; 
        struct ExponentialSmoother<cva::Matrix<float, 9, 1> > { 
            struct optional<cva::Matrix<float, 9, 1> > { 
                bool m_initialized; 
                struct aligned_storage<cva::Matrix<float, 9, 1> > { 
                    union dummy_u { 
                        BOOL data[36]; 
                        struct a4 { } aligner_; 
                    } dummy_; 
                } m_storage; 
            } state; 
        } m_smoother; 
        struct vector<unsigned long, std::__1::allocator<unsigned long> > { 
            unsigned long long *__begin_; 
            unsigned long long *__end_; 
            struct __compressed_pair<unsigned long *, std::__1::allocator<unsigned long> > { 
                unsigned long long *__value_; 
            } __end_cap_; 
        } m_inliers; 
    }  _faceLightEstimator;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _lastCameraTransform;
    ARFaceTrackingData * _lastFaceData;
    ARDirectionalLightEstimate * _lastLightEstimate;
    NSObject<OS_dispatch_queue> * _lightEstimationQueue;
    float  _lightIntensity;
    struct __CVBuffer { } * _pixelBufferRef;
    NSObject<OS_dispatch_semaphore> * _resultSemaphore;
    float  _shSmoothingAlpha;
    struct ExponentialSmoother<float> { 
        struct optional<float> { 
            bool m_initialized; 
            struct aligned_storage<float> { 
                union dummy_u { 
                    BOOL data[4]; 
                    struct a4 { } aligner_; 
                } dummy_; 
            } m_storage; 
        } state; 
    }  _smoother;
    float  _temperature;
}

+ (float)_computeShSmoothingAlpha:(double)arg1;
+ (struct shared_ptr<arkit::FaceTrackingData> { struct FaceTrackingData {} *x1; struct __shared_weak_count {} *x2; })_transformFaceTrackingData:(id)arg1;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;
- (id)processData:(id)arg1;
- (void)requestResultDataAtTimestamp:(double)arg1 context:(id)arg2;
- (unsigned long long)requiredSensorDataTypes;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
