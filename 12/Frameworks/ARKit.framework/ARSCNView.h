<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ARSCNView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ARKit.framework/ARSCNView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ARKit.framework/ARKit (91.5)
 */

@interface ARSCNView : SCNView <ARInternalSessionObserver, _SCNSceneRendererDelegate> {
    NSMutableArray * _addedAnchors;
    NSObject<OS_dispatch_semaphore> * _anchorsSemaphore;
    unsigned long long  _arDebugOptions;
    bool  _automaticallyUpdatesLighting;
    SCNNode * _cameraNode;
    <SCNCaptureDeviceOutputConsumer> * _captureDeviceOutputConsumer;
    double  _contentsScale;
    ARPointCloud * _currentlyVisibleDebugPointerCloud;
    long long  _developerPreferredFramesPerSecond;
    bool  _drawsCameraImage;
    NSMutableArray * _environmentProbeNodes;
    NSMutableArray * _environmentProbeNodesToRemove;
    SCNNode * _featurePointNode;
    long long  _frameToRemoveRotationSnapshotOn;
    long long  _interfaceOrientation;
    double  _lastFrameTimestamp;
    long long  _lastInterfaceOrientation;
    SCNNode * _lightNode;
    NSMutableDictionary * _nodesByAnchorIdentifier;
    NSObject<OS_dispatch_semaphore> * _nodesSemaphore;
    NSMutableDictionary * _occlusionGeometryNodesByAnchorIdentifier;
    id  _originalBackgroundContents;
    bool  _providesOcclusionGeometry;
    NSMutableArray * _removedAnchors;
    bool  _renderThreadFixed;
    UIView * _rotationSnapshot;
    long long  _rotationSnapshotState;
    ARSession * _session;
    bool  _shouldRestrictFrameRate;
    long long  _targetFramesPerSecond;
    NSMutableArray * _updatedAnchors;
    struct CGSize { 
        double width; 
        double height; 
    }  _viewportSize;
    CIWarpKernel * _warpKernel;
    unsigned long long  _warpKernelLensType;
    SCNNode * _worldOriginNode;
}

@property (nonatomic) long long actualPreferredFramesPerSecond;
@property (nonatomic) bool automaticallyUpdatesLighting;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <ARSCNViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property long long developerPreferredFramesPerSecond;
@property bool drawsCameraImage;
@property long long frameToRemoveRotationSnapshotOn;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool providesOcclusionGeometry;
@property long long rotationSnapshotState;
@property (nonatomic, retain) SCNScene *scene;
@property (nonatomic, retain) ARSession *session;
@property bool shouldRestrictFrameRate;
@property (readonly) Class superclass;
@property long long targetFramesPerSecond;

- (void).cxx_destruct;
- (void)_addAnchors:(id)arg1;
- (void)_addOcclusionGeometryForAnchor:(id)arg1;
- (id)_anchorForNode:(id)arg1 inFrame:(id)arg2;
- (void)_commonInit;
- (void)_forceUpdateCamera;
- (id)_hitTest:(struct CGPoint { double x1; double x2; })arg1 frame:(id)arg2 types:(unsigned long long)arg3;
- (void)_loadWarpKernalForLensType:(unsigned long long)arg1;
- (void)_removeAnchors:(id)arg1;
- (void)_renderCapturedPixelBuffer:(struct __CVBuffer { }*)arg1;
- (void)_renderer:(id)arg1 updateAtTime:(double)arg2;
- (void)_updateAnchors:(id)arg1 frame:(id)arg2;
- (void)_updateBackingSize;
- (void)_updateCamera:(id)arg1;
- (void)_updateDebugVisualization:(id)arg1;
- (void)_updateFramesPerSecondWithTarget:(long long)arg1 shouldRestrictFrameRate:(bool)arg2;
- (void)_updateLighting:(id)arg1;
- (void)_updateNode:(id)arg1 forAnchor:(id)arg2 frame:(id)arg3;
- (void)_updatePreferredFramesPerSecond;
- (void)_updateProbesWithFrame:(id)arg1;
- (struct __CVBuffer { }*)_warpPixelBuffer:(struct __CVBuffer { }*)arg1 withCamera:(id)arg2;
- (long long)actualPreferredFramesPerSecond;
- (id)anchorForNode:(id)arg1;
- (bool)automaticallyUpdatesLighting;
- (void)cleanupLingeringRotationState;
- (unsigned long long)debugOptions;
- (id)description;
- (long long)developerPreferredFramesPerSecond;
- (void)didMoveToWindow;
- (bool)drawsCameraImage;
- (void)encodeWithCoder:(id)arg1;
- (long long)frameToRemoveRotationSnapshotOn;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 types:(unsigned long long)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 options:(id)arg2;
- (void)layoutSubviews;
- (id)nodeForAnchor:(id)arg1;
- (id)occlusionGeometryNodeForAnchor:(id)arg1;
- (long long)preferredFramesPerSecond;
- (bool)providesOcclusionGeometry;
- (long long)rotationSnapshotState;
- (id)session;
- (void)session:(id)arg1 cameraDidChangeTrackingState:(id)arg2;
- (void)session:(id)arg1 didAddAnchors:(id)arg2;
- (void)session:(id)arg1 didChangeState:(unsigned long long)arg2;
- (void)session:(id)arg1 didFailWithError:(id)arg2;
- (void)session:(id)arg1 didOutputAudioSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)session:(id)arg1 didRemoveAnchors:(id)arg2;
- (void)session:(id)arg1 didUpdateAnchors:(id)arg2;
- (void)session:(id)arg1 didUpdateFrame:(id)arg2;
- (void)session:(id)arg1 willRunWithConfiguration:(id)arg2;
- (void)sessionInterruptionEnded:(id)arg1;
- (void)sessionShouldAttemptRelocalization:(id)arg1 completion:(id /* block */)arg2;
- (void)sessionWasInterrupted:(id)arg1;
- (void)setActualPreferredFramesPerSecond:(long long)arg1;
- (void)setAutomaticallyUpdatesLighting:(bool)arg1;
- (void)setDebugOptions:(unsigned long long)arg1;
- (void)setDeveloperPreferredFramesPerSecond:(long long)arg1;
- (void)setDrawsCameraImage:(bool)arg1;
- (void)setFrameToRemoveRotationSnapshotOn:(long long)arg1;
- (void)setPointOfView:(id)arg1;
- (void)setPreferredFramesPerSecond:(long long)arg1;
- (void)setProvidesOcclusionGeometry:(bool)arg1;
- (void)setRotationSnapshotState:(long long)arg1;
- (void)setScene:(id)arg1;
- (void)setSession:(id)arg1;
- (void)setShouldRestrictFrameRate:(bool)arg1;
- (void)setTargetFramesPerSecond:(long long)arg1;
- (bool)shouldRestrictFrameRate;
- (long long)targetFramesPerSecond;
- (void)unprojectPoint:(struct CGPoint { double x1; double x2; })arg1 ontoPlaneWithTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg2;
- (void)windowDidRotateNotification:(id)arg1;
- (void)windowWillAnimateRotateNotification:(id)arg1;
- (void)windowWillRotateNotification:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
