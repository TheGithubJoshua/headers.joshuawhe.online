<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ARSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ARKit.framework/ARSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ARKit.framework/ARKit (91.5)
 */

@interface ARSession : NSObject <ARSensorDelegate, ARTechniqueDelegate> {
    NSArray * _availableSensors;
    ARConfiguration * _configurationInternal;
    bool  _configuredForWorldTracking;
    double  _currentTrackingStartingTimestamp;
    double  _defaultRelocalizationDuration;
    <ARSessionDelegate> * _delegate;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    ARParentTechnique * _dontUseDirectlyTechnique;
    long long  _featurePointAccumulationCount;
    ARImageSensor * _imageSensor;
    ARFrame * _lastProcessedFrame;
    NSObject<OS_dispatch_semaphore> * _lastProcessedFrameSemaphore;
    ARSessionMetrics * _metrics;
    CMMotionManager * _motionManger;
    ARFrameContext * _nextFrameContext;
    NSObject<OS_dispatch_semaphore> * _nextFrameContextSemaphore;
    NSHashTable * _observers;
    NSObject<OS_dispatch_semaphore> * _observersSemaphore;
    unsigned long long  _pausedSensors;
    unsigned int  _peakPowerPressureLevel;
    int  _peakPowerPressureToken;
    unsigned long long  _powerUsage;
    NSObject<OS_dispatch_queue> * _prepareTechniquesQueue;
    bool  _relocalizationRequested;
    NSDate * _relocalizationTimeoutDate;
    bool  _relocalizing;
    ARTechnique * _renderingTechnique;
    ARRenderSyncScheduler * _resultRequestScheduler;
    unsigned long long  _runningSensors;
    unsigned long long  _state;
    NSObject<OS_dispatch_queue> * _stateQueue;
    long long  _thermalState;
    id  _thermalStateObserver;
    ARQATracer * _tracer;
    ARWorldTrackingTechnique * _worldTrackingTechnique;
}

@property (nonatomic, retain) NSArray *availableSensors;
@property (nonatomic, readonly, copy) ARConfiguration *configuration;
@property (retain) ARConfiguration *configurationInternal;
@property (nonatomic, readonly, copy) ARFrame *currentFrame;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <ARSessionDelegate> *delegate;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long pausedSensors;
@property unsigned long long powerUsage;
@property bool relocalizing;
@property (nonatomic) unsigned long long runningSensors;
@property (nonatomic) unsigned long long state;
@property (readonly) Class superclass;
@property (retain) ARParentTechnique *technique;
@property (nonatomic, retain) ARQATracer *tracer;

+ (void)_applySessionOverrides:(id)arg1;
+ (void)initialize;

- (void).cxx_destruct;
- (void)_addObserver:(id)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })_cameraTransformForResultData:(id)arg1 previousFrame:(id)arg2;
- (void)_changePowerUsage:(unsigned long long)arg1;
- (id)_currentFrameContext;
- (void)_endInterruption;
- (id)_getObservers;
- (id)_imageSensorForConfiguration:(id)arg1 existingSensor:(id)arg2;
- (void)_interruptSession;
- (void)_removeObserver:(id)arg1;
- (void)_replaceOrAddSensor:(id)arg1;
- (void)_sessionCameraDidChangeTrackingState:(id)arg1;
- (void)_sessionDidAddAnchors:(id)arg1;
- (void)_sessionDidFailWithError:(id)arg1;
- (void)_sessionDidOutputAudioData:(id)arg1;
- (void)_sessionDidRemoveAnchors:(id)arg1;
- (void)_sessionDidUpdateAnchors:(id)arg1;
- (void)_sessionDidUpdateFrame:(id)arg1;
- (void)_sessionShouldAttemptRelocalization;
- (void)_sessionWillRunWithConfiguration:(id)arg1;
- (void)_setTechnique:(id)arg1;
- (void)_startSensorsWithDataTypes:(unsigned long long)arg1;
- (id)_stateQueue;
- (void)_stopAllSensors;
- (void)_stopSensorsWithDataTypes:(unsigned long long)arg1 keepingDataTypes:(unsigned long long)arg2;
- (void)_updateAnchorsForFrame:(id)arg1 resultDatas:(id)arg2 context:(id)arg3 addedAnchors:(id)arg4 updatedAnchors:(id)arg5 removedAnchors:(id)arg6;
- (void)_updateFeaturePointsForFrame:(id)arg1 previousFrame:(id)arg2 trackingStateChanged:(bool)arg3 context:(id)arg4;
- (void)_updateOriginTransformForFrame:(id)arg1 previousFrame:(id)arg2 modifiers:(unsigned long long)arg3 context:(id)arg4;
- (void)_updatePowerPressureLevelWithToken:(int)arg1;
- (void)_updatePowerUsage;
- (void)_updateSensorsWithConfiguration:(id)arg1;
- (void)_updateSessionStateWithConfiguration:(id)arg1 options:(unsigned long long)arg2;
- (void)_updateSessionWithConfiguration:(id)arg1 options:(unsigned long long)arg2;
- (void)_updateThermalState:(id)arg1;
- (void)addAnchor:(id)arg1;
- (id)availableSensors;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })cameraTransformAtTimestamp:(double)arg1;
- (id)configuration;
- (id)configurationInternal;
- (void)createReferenceObjectWithTransform:(void *)arg1 center:(void *)arg2 extent:(void *)arg3 completionHandler:(void *)arg4; // needs 4 arg types, found 2: struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; }, id /* block */
- (id)currentFrame;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (id)description;
- (void)getCurrentWorldMapWithCompletionHandler:(id /* block */)arg1;
- (id)init;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })originTransform;
- (void)pause;
- (unsigned long long)pausedSensors;
- (unsigned long long)powerUsage;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })predictedDeviceTransformAtTimestamp:(double)arg1;
- (bool)relocalizing;
- (void)removeAnchor:(id)arg1;
- (void)runWithConfiguration:(id)arg1;
- (void)runWithConfiguration:(id)arg1 options:(unsigned long long)arg2;
- (unsigned long long)runningSensors;
- (void)sensor:(id)arg1 didFailWithError:(id)arg2;
- (void)sensor:(id)arg1 didOutputSensorData:(id)arg2;
- (void)sensorDidPause:(id)arg1;
- (void)sensorDidRestart:(id)arg1;
- (void)setAvailableSensors:(id)arg1;
- (void)setConfigurationInternal:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setOriginTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (void)setPausedSensors:(unsigned long long)arg1;
- (void)setPowerUsage:(unsigned long long)arg1;
- (void)setRelocalizing:(bool)arg1;
- (void)setRunningSensors:(unsigned long long)arg1;
- (void)setState:(unsigned long long)arg1;
- (void)setTechnique:(id)arg1;
- (void)setTracer:(id)arg1;
- (void)setWorldOrigin:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1;
- (unsigned long long)state;
- (id)technique;
- (void)technique:(id)arg1 didFailWithError:(id)arg2;
- (void)technique:(id)arg1 didOutputResultData:(id)arg2 timestamp:(double)arg3 context:(id)arg4;
- (id)tracer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
