<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AREnvironmentProbeManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ARKit.framework/AREnvironmentProbeManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ARKit.framework/ARKit (91.5)
 */

@interface AREnvironmentProbeManager : NSObject {
    NSMutableArray * _anchorsToRemove;
    ARCubemapGenerator * _cubemapGenerator;
    AREnvironmentProbeUpdate * _currentProbeUpdate;
    NSMutableArray * _initialProbeIdentifiers;
    bool  _isReady;
    struct { 
        /* Warning: Unrecognized filer type: ']' using 'void*' */ void*columns[4]; 
    }  _lastCameraTransform;
    ARImageData * _lastImageData;
    struct vector<ARTexturedPlane, std::__1::allocator<ARTexturedPlane> > { 
        struct { /* ? */ } *__begin_; 
        struct { /* ? */ } *__end_; 
        struct __compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> > { 
            struct { /* ? */ } *__value_; 
        } __end_cap_; 
    }  _lastPlanes;
    double  _lastProbeUpdateTime;
    double  _minimumProbeUpdateInterval;
    long long  _mode;
    NSMutableDictionary * _probeIdentifiersByPlaneIdentifier;
    NSMutableArray * _probeUpdateQueue;
    NSMutableDictionary * _probesByIdentifier;
    NSMutableArray * _requestedProbeIdentifiers;
    NSObject<OS_dispatch_semaphore> * _semaphore;
    NSObject<OS_dispatch_semaphore> * _textureDataSemaphore;
    NSUUID * _universeProbeIdentifier;
    NSMutableArray * _updatedProbeIdentifiers;
}

@property (nonatomic, readonly) long long mode;

- (id).cxx_construct;
- (void).cxx_destruct;
- (bool)addProbeWithAnchor:(id)arg1 timestamp:(double)arg2 textureImmediately:(bool)arg3;
- (id)initWithMode:(long long)arg1;
- (void)insertIntoQueue:(id)arg1;
- (long long)mode;
- (id)probeWithIdentifier:(id)arg1 onPlane:(const struct { struct array<unsigned char, 16> { unsigned char x_1_1_1[16]; } x1; unsigned long long x2; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_3_1_1[4]; } x3; struct set<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > { struct __tree<std::__1::array<unsigned char, 16>, std::__1::less<std::__1::array<unsigned char, 16> >, std::__1::allocator<std::__1::array<unsigned char, 16> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::array<unsigned char, 16>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::less<std::__1::array<unsigned char, 16> > > { unsigned long long x_3_3_1; } x_1_2_3; } x_4_1_1; } x4; }*)arg2 planeIdentifier:(id)arg3;
- (void)requestTextureForProbe:(id)arg1;
- (id)updateProbesForTimestamp:(double)arg1 planes:(struct vector<ARTexturedPlane, std::__1::allocator<ARTexturedPlane> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<ARTexturedPlane *, std::__1::allocator<ARTexturedPlane> > { struct { /* ? */ } *x_3_1_1; } x3; })arg2 imageData:(id)arg3 pose:(id)arg4 addedAnchors:(id)arg5 removedAnchors:(id)arg6;
- (void)updateProbesFromExistingAnchors:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
