<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>ARPlaneData.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ARKit.framework/ARPlaneData.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ARKit.framework/ARKit (91.5)
 */

@interface ARPlaneData : NSObject <ARResultData> {
    struct CV3DSurfaceDetectionResult { struct CV3DSurfaceDetectionPlane {} *x1; unsigned long long x2; } * _detectionResult;
    unsigned long long  _detectionTypeMask;
    NSArray * _planeIdentifiers;
    bool  _sceneUnderstandingEnabled;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct CV3DSurfaceDetectionResult { struct CV3DSurfaceDetectionPlane {} *x1; unsigned long long x2; }*detectionResult;
@property (nonatomic, readonly) unsigned long long detectionTypeMask;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool sceneUnderstandingEnabled;
@property (readonly) Class superclass;

+ (void)setSemanticsFromCV3D:(struct CV3DSurfaceSemantics { double x1[6]; int x2; }*)arg1 sceneUnderstandingEnabled:(bool)arg2 onPlane:(id)arg3;

- (void).cxx_destruct;
- (id)_anchorForPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg1 identifier:(id)arg2 referenceOriginTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg3;
- (struct { })_boundsForPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg1 surfaceOrientedPivot:(float)arg2 alignmentRotation:(long long)arg3;
- (id)_geometryForPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg1 surfaceOrientedPivot:(float)arg2 alignmentRotation:(long long)arg3 planeBounds:(struct { })arg4;
- (id)_gridExtentForPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg1 surfaceOrientedPivot:(float)arg2 alignmentRotation:(long long)arg3;
- (struct { })_orientedBoundsForPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg1 surfaceOrientedPivot:(float)arg2 alignmentRotation:(long long)arg3;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })_planeToWorldTransformForPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg1 pivot:(float)arg2;
- (float)_surfaceOrientedPivotForPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg1;
- (void)_updateExtentsForPlaneAnchor:(id)arg1 plane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg2 pivot:(float)arg3;
- (id)_updatedAnchor:(id)arg1 forPlane:(struct CV3DSurfaceDetectionPlane { struct CV3DSurfaceDetectionPoint3D { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2[3]; double x3[16]; int x4; struct CV3DSurfaceDetectionAlignedBoundingBox {} *x5; struct CV3DSurfaceDetectionRect {} *x6; struct CV3DSurfaceDetectionPoints2D {} *x7; struct CV3DSurfaceDetectionExtentGrid {} *x8; struct __CFUUID {} *x9; unsigned long long x10; struct __CFUUID {} **x11; unsigned long long x12; double x13; struct CV3DSurfaceSemantics {} *x14; }*)arg2 referenceOriginTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg3;
- (long long)_worldAlignmentRotationForReferenceTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 planeAlignment:(long long)arg2;
- (id)anchorsForCameraWithTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg1 referenceOriginTransform:(struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })arg2 existingAnchors:(id)arg3 anchorsToRemove:(id)arg4;
- (struct { })boundsForPlaneWithIdentifier:(id)arg1;
- (void)dealloc;
- (struct CV3DSurfaceDetectionResult { struct CV3DSurfaceDetectionPlane {} *x1; unsigned long long x2; }*)detectionResult;
- (unsigned long long)detectionTypeMask;
- (id)hitTestFromOrigin:(void *)arg1 withDirection:(void *)arg2 referenceOriginTransform:(void *)arg3 planeAlignment:(void *)arg4; // needs 4 arg types, found 2: struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; }, long long
- (id)initWithDetectionResult:(struct CV3DSurfaceDetectionResult { struct CV3DSurfaceDetectionPlane {} *x1; unsigned long long x2; }*)arg1 detectionTypeMask:(unsigned long long)arg2 sceneUnderstandingEnabled:(bool)arg3;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })referenceTransformForPlaneWithIdentifier:(id)arg1;
- (bool)sceneUnderstandingEnabled;
- (id)trackedPlaneIdentifiers;
- (id)updatedPlaneIdentifiers;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
