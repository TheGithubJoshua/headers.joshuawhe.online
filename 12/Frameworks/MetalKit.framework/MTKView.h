<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MTKView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MetalKit.framework/MTKView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MetalKit.framework/MetalKit (113)
 */

@interface MTKView : UIView <CALayerDelegate, NSCoding> {
    bool  _autoResizeDrawable;
    struct { 
        double red; 
        double green; 
        double blue; 
        double alpha; 
    }  _clearColor;
    double  _clearDepth;
    unsigned int  _clearStencil;
    unsigned long long  _colorPixelFormats;
    <MTLTexture> * _colorTextures;
    <CAMetalDrawable> * _currentDrawable;
    <MTKViewDelegate> * _delegate;
    unsigned long long  _depthStencilPixelFormat;
    <MTLTexture> * _depthStencilTexture;
    <MTLDevice> * _device;
    bool  _deviceReset;
    CADisplayLink * _displayLink;
    bool  _drawOffscreen;
    int (* _drawRectSubIMP;
    unsigned long long  _drawableAttachmentIndex;
    unsigned long long  _drawableIdx;
    struct CGSize { 
        double width; 
        double height; 
    }  _drawableScaleFactor;
    struct CGSize { 
        double width; 
        double height; 
    }  _drawableSize;
    bool  _dumpFirstFrame;
    unsigned long long  _dumpFrameAtFrame;
    unsigned long long  _dumpFrameAtSeconds;
    NSString * _dumpPath;
    bool  _enableSetNeedsDisplay;
    long long  _forceOrientation;
    unsigned int  _frameNum;
    bool  _framebufferOnly;
    long long  _maxValidAttachmentIndex;
    unsigned long long  _measureAfterFrame;
    unsigned long long  _measureAfterSeconds;
    CAMetalLayer * _metalLayer;
    <MTLTexture> * _multisampleColorTexture;
    <MTLTexture> * _multisampleColorTextures;
    long long  _nominalFramesPerSecond;
    MTKOffscreenDrawable * _offscreenSwapChain;
    bool  _paused;
    bool  _pausedOnBackgrounding;
    long long  _preferredFramesPerSecond;
    int  _renderAttachmentDirtyState;
    unsigned long long  _sampleCount;
    bool  _sizeDirty;
    double  _startTime;
    bool  _subClassOverridesDrawRect;
    unsigned long long  _terminateAfterFrame;
    unsigned long long  _terminateAfterSeconds;
}

@property (nonatomic) bool autoResizeDrawable;
@property (nonatomic) struct { double x1; double x2; double x3; double x4; } clearColor;
@property (nonatomic) double clearDepth;
@property (nonatomic) unsigned int clearStencil;
@property (nonatomic) unsigned long long colorPixelFormat;
@property (nonatomic) struct CGColorSpace { }*colorspace;
@property (nonatomic, readonly) <CAMetalDrawable> *currentDrawable;
@property (nonatomic, readonly) MTLRenderPassDescriptor *currentRenderPassDescriptor;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MTKViewDelegate> *delegate;
@property (nonatomic) unsigned long long depthStencilPixelFormat;
@property (nonatomic, readonly) <MTLTexture> *depthStencilTexture;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) <MTLDevice> *device;
@property (nonatomic) struct CGSize { double x1; double x2; } drawableSize;
@property (nonatomic) bool enableSetNeedsDisplay;
@property (nonatomic) bool framebufferOnly;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) <MTLTexture> *multisampleColorTexture;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic) bool presentsWithTransaction;
@property (nonatomic) unsigned long long sampleCount;
@property (readonly) Class superclass;

+ (Class)layerClass;

- (void).cxx_destruct;
- (void)__initCommon;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (long long)_calculateRefeshesPerSecond;
- (bool)_canDrawContent;
- (bool)_controlsOwnScaleFactor;
- (void)_createDisplayLinkForScreen:(id)arg1;
- (void)_dumpFrameImageWithFilename:(id)arg1;
- (void)_dumpFramerate:(double)arg1 withFilename:(id)arg2;
- (struct CGSize { double x1; double x2; })_pixelSizeFromPointSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_resizeDrawable;
- (void)_resizeMetalLayerDrawable;
- (void)_updateToNativeScale;
- (bool)autoResizeDrawable;
- (struct { double x1; double x2; double x3; double x4; })clearColor;
- (double)clearDepth;
- (unsigned int)clearStencil;
- (unsigned long long)colorPixelFormat;
- (const id*)colorTextures;
- (struct CGColorSpace { }*)colorspace;
- (id)currentDrawable;
- (id)currentRenderPassDescriptor;
- (void)dealloc;
- (id)delegate;
- (unsigned long long)depthStencilPixelFormat;
- (id)depthStencilTexture;
- (id)device;
- (void)didMoveToWindow;
- (void)displayLayer:(id)arg1;
- (void)draw;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (unsigned long long)drawableAttachmentIndex;
- (struct CGSize { double x1; double x2; })drawableSize;
- (bool)enableSetNeedsDisplay;
- (void)encodeWithCoder:(id)arg1;
- (bool)exportToTargaAtLocation:(id)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 size:(unsigned long long)arg4 bytes:(void*)arg5;
- (bool)framebufferOnly;
- (void)getEnvironmentSettings;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 device:(id)arg2;
- (bool)isPaused;
- (void)layoutSubviews;
- (id)multisampleColorTexture;
- (const id*)multisampleColorTextures;
- (long long)nominalFramesPerSecond;
- (long long)preferredFramesPerSecond;
- (bool)presentsWithTransaction;
- (void)releaseDrawables;
- (unsigned long long)sampleCount;
- (void)setAutoResizeDrawable:(bool)arg1;
- (void)setClearColor:(struct { double x1; double x2; double x3; double x4; })arg1;
- (void)setClearDepth:(double)arg1;
- (void)setClearStencil:(unsigned int)arg1;
- (void)setColorPixelFormat:(unsigned long long)arg1;
- (void)setColorPixelFormat:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;
- (void)setColorspace:(struct CGColorSpace { }*)arg1;
- (void)setContentScaleFactor:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDepthStencilPixelFormat:(unsigned long long)arg1;
- (void)setDevice:(id)arg1;
- (void)setDrawableAttachmentIndex:(unsigned long long)arg1;
- (void)setDrawableSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setEnableSetNeedsDisplay:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFramebufferOnly:(bool)arg1;
- (void)setNominalFramesPerSecond:(long long)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPreferredFramesPerSecond:(long long)arg1;
- (void)setPresentsWithTransaction:(bool)arg1;
- (void)setSampleCount:(unsigned long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
