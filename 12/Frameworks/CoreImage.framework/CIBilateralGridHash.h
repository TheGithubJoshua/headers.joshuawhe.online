<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CIBilateralGridHash.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreImage.framework/CIBilateralGridHash.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreImage.framework/CoreImage (740.0.130)
 */

@interface CIBilateralGridHash : NSObject {
    unsigned int * _blur_indices;
    unsigned int * _coord_indices;
    unsigned int * _coord_indices_off;
    unsigned int * _coord_table;
    struct BGHashMapContext { } * _hash_map;
    unsigned int * _hash_matrix_data;
    struct { union { unsigned long long x_1_1_1; unsigned char x_1_1_2[8]; } x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; } * _hash_table;
    unsigned int  _hash_table_size;
    int  _height;
    unsigned int * _interp_indices;
    char * _interp_pad;
    unsigned int * _interp_table;
    unsigned long long  _max_hash_table_size;
    int  _n_dims;
    int  _sigma_r_chroma;
    int  _sigma_r_luma;
    int  _sigma_s;
    int  _width;
}

- (int)_addHashKeyAtX:(int)arg1 Y:(int)arg2 key:(unsigned long long)arg3 isKeyExist:(bool*)arg4;
- (int)_computeBilateralSpaceYCC444:(struct __IOSurface { }*)arg1 region:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 sigma_s:(int)arg4 sigma_r_luma:(int)arg5 sigma_r_chroma:(int)arg6;
- (void)_computeBlurIndices;
- (void)_computeCoordIndices;
- (void)_computeInterpIndices;
- (int)_createWithSurface:(struct __IOSurface { }*)arg1 region:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 sigma_s:(int)arg4 sigma_r_luma:(int)arg5 sigma_r_chroma:(int)arg6;
- (void)_hashMapAddKey:(unsigned long long)arg1 andValue:(unsigned int)arg2;
- (bool)_hashMapFindKey:(unsigned long long)arg1 to:(unsigned int*)arg2;
- (void)blur:(const float*)arg1 pout:(float*)arg2;
- (const unsigned int*)blur_indices:(int)arg1 n_blur_indices:(int*)arg2;
- (void)blur_n:(float*)arg1;
- (void)blur_ones:(float*)arg1;
- (const unsigned int*)blur_table;
- (void)clear;
- (const unsigned int*)coord_indices;
- (const unsigned int*)coord_table;
- (int)countDims;
- (int)countVertices;
- (int)createWithSurface:(struct __IOSurface { }*)arg1 region:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 sigma_s:(int)arg4 sigma_r_luma:(int)arg5 sigma_r_chroma:(int)arg6;
- (void)dealloc;
- (const unsigned int*)hash_matrix;
- (const void*)hash_table;
- (int)height;
- (id)initWithWidth:(int)arg1 height:(int)arg2 maxHashTableSize:(unsigned long long)arg3;
- (const unsigned int*)interp_indices;
- (const char *)interp_pad;
- (const unsigned int*)interp_table;
- (void)normalize:(const float*)arg1 pout:(float*)arg2;
- (void)normalize_blur:(const float*)arg1 pout:(float*)arg2;
- (int)sigma_r_chroma;
- (int)sigma_r_luma;
- (int)sigma_s;
- (void)slice:(const float*)arg1 outPixelBuffer:(struct __CVBuffer { }*)arg2;
- (void)slice_trilinear:(struct __IOSurface { }*)arg1 pin:(const float*)arg2 pout:(struct __CVBuffer { }*)arg3;
- (void)splat:(struct __CVBuffer { }*)arg1 pout:(float*)arg2;
- (void)splat_ones:(float*)arg1;
- (void)splat_w_mul_x:(struct __CVBuffer { }*)arg1 inPixelBuffer:(struct __CVBuffer { }*)arg2 pout:(float*)arg3;
- (int)width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
