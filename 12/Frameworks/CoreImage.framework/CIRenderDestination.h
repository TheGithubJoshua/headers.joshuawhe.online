<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CIRenderDestination.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreImage.framework/CIRenderDestination.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreImage.framework/CoreImage (740.0.130)
 */

@interface CIRenderDestination : NSObject {
    void * _priv;
}

@property unsigned long long alphaMode;
@property (nonatomic, retain) CIBlendKernel *blendKernel;
@property bool blendsInDestinationColorSpace;
@property (getter=isClamped) bool clamped;
@property (nonatomic) struct CGColorSpace { }*colorSpace;
@property (getter=isDithered) bool dithered;
@property (getter=isFlipped) bool flipped;
@property (readonly) unsigned long long height;
@property (readonly) unsigned long long width;

- (id)_initWithInternalRenderDestination:(struct RenderDestination { int (**x1)(); struct atomic<unsigned int> { _Atomic unsigned int x_2_1_1; } x2; struct __CFString {} *x3; }*)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 format:(int)arg4 colorspace:(struct CGColorSpace { }*)arg5;
- (struct RenderDestination { int (**x1)(); struct atomic<unsigned int> { _Atomic unsigned int x_2_1_1; } x2; struct __CFString {} *x3; }*)_internalRenderDestination;
- (struct CIRenderDestinationInternal { struct RenderDestination {} *x1; unsigned long long x2; unsigned long long x3; int x4; struct CGColorSpace {} *x5; unsigned long long x6; bool x7; bool x8; int x9; bool x10; bool x11; id x12; }*)_internalRepresentation;
- (struct RenderTask { int (**x1)(); struct atomic<unsigned int> { _Atomic unsigned int x_2_1_1; } x2; char *x3; char *x4; int x5; BOOL x6[64]; unsigned long long x7; struct Node {} *x8; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_9_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_9_1_2; } x9; int x10; unsigned long long x11; struct __CFString {} *x12; struct __CFString {} *x13; struct vector<std::__1::unique_ptr<CI::TileTask, CI::ObjectDeleter<CI::TileTask> >, std::__1::allocator<std::__1::unique_ptr<CI::TileTask, CI::ObjectDeleter<CI::TileTask> > > > { struct unique_ptr<CI::TileTask, CI::ObjectDeleter<CI::TileTask> > {} *x_14_1_1; struct unique_ptr<CI::TileTask, CI::ObjectDeleter<CI::TileTask> > {} *x_14_1_2; struct __compressed_pair<std::__1::unique_ptr<CI::TileTask, CI::ObjectDeleter<CI::TileTask> > *, std::__1::allocator<std::__1::unique_ptr<CI::TileTask, CI::ObjectDeleter<CI::TileTask> > > > { struct unique_ptr<CI::TileTask, CI::ObjectDeleter<CI::TileTask> > {} *x_3_2_1; } x_14_1_3; } x14; double x15; }*)_render:(struct Image { int (**x1)(); struct atomic<unsigned int> { _Atomic unsigned int x_2_1_1; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct __CFURL {} *x4; void *x5; void *x6; unsigned int x7; }*)arg1 withContext:(struct Context { int (**x1)(); struct atomic<unsigned int> { _Atomic unsigned int x_2_1_1; } x2; struct CGColorSpace {} *x3; struct CGColorSpace {} *x4; int x5; bool x6; bool x7; bool x8; bool x9; bool x10; struct CGContext {} *x11; float x12; bool x13; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_14_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_14_1_2; } x14; struct CGAffineTransform { double x_15_1_1; double x_15_1_2; double x_15_1_3; double x_15_1_4; double x_15_1_5; double x_15_1_6; } x15; unsigned int x16; unsigned long long x17; unsigned long long x18; int x19; BOOL x20[64]; bool x21; struct ObjectCache<CI::MainProgram, false> {} *x22; struct ObjectCache<CI::Node, false> {} *x23; struct ObjectCache<CI::Node, false> {} *x24; double x25; double x26; struct RenderTask {} *x27; int x28; int x29; struct Context {} *x30; unsigned long long x31; }*)arg2;
- (unsigned long long)alphaMode;
- (id)blendKernel;
- (bool)blendsInDestinationColorSpace;
- (struct CGColorSpace { }*)colorSpace;
- (void)dealloc;
- (id)debugDescription;
- (id)description;
- (int)ditherDepth;
- (int)format;
- (unsigned long long)height;
- (id)imageRepresentation;
- (id)init;
- (id)initWithBitmapData:(void*)arg1 width:(unsigned long long)arg2 height:(unsigned long long)arg3 bytesPerRow:(unsigned long long)arg4 format:(int)arg5;
- (id)initWithGLTexture:(unsigned int)arg1 target:(unsigned int)arg2 width:(unsigned long long)arg3 height:(unsigned long long)arg4;
- (id)initWithIOSurface:(id)arg1;
- (id)initWithMTLTexture:(id)arg1 commandBuffer:(id)arg2;
- (id)initWithPixelBuffer:(struct __CVBuffer { }*)arg1;
- (id)initWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 pixelFormat:(unsigned int)arg3 colorSpace:(struct CGColorSpace { }*)arg4 pixelBufferProvider:(id /* block */)arg5;
- (id)initWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 pixelFormat:(unsigned int)arg3 colorSpace:(struct CGColorSpace { }*)arg4 surfaceProvider:(id /* block */)arg5;
- (id)initWithWidth:(unsigned long long)arg1 height:(unsigned long long)arg2 pixelFormat:(unsigned long long)arg3 commandBuffer:(id)arg4 mtlTextureProvider:(id /* block */)arg5;
- (bool)isClamped;
- (bool)isDithered;
- (bool)isFlipped;
- (id)label;
- (void)setAlphaMode:(unsigned long long)arg1;
- (void)setBlendKernel:(id)arg1;
- (void)setBlendsInDestinationColorSpace:(bool)arg1;
- (void)setClamped:(bool)arg1;
- (void)setColorSpace:(struct CGColorSpace { }*)arg1;
- (void)setDithered:(bool)arg1;
- (void)setFlipped:(bool)arg1;
- (void)setLabel:(id)arg1;
- (unsigned long long)width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
