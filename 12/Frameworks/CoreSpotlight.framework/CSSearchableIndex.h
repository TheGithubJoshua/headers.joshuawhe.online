<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CSSearchableIndex.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreSpotlight.framework/CSSearchableIndex.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreSpotlight.framework/CoreSpotlight (231.49)
 */

@interface CSSearchableIndex : NSObject {
    CSIndexingQueue * _activityQueue;
    int  _awakeNotifyToken;
    bool  _batchOpen;
    NSMutableArray * _batchedItemIdentifiersToDelete;
    NSMutableArray * _batchedItemsToIndex;
    NSString * _bundleIdentifier;
    NSObject<OS_dispatch_queue> * _delegateQueue;
    <CSSearchableIndexDelegate> * _indexDelegate;
    int  _indexID;
    NSString * _name;
    long long  _options;
    NSString * _protectionClass;
}

@property (nonatomic, readonly) CSIndexingQueue *activityQueue;
@property (nonatomic) int awakeNotifyToken;
@property (nonatomic) bool batchOpen;
@property (nonatomic, retain) NSMutableArray *batchedItemIdentifiersToDelete;
@property (nonatomic, retain) NSMutableArray *batchedItemsToIndex;
@property (nonatomic, copy) NSString *bundleIdentifier;
@property (readonly) CSIndexConnection *connection;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *delegateQueue;
@property <CSSearchableIndexDelegate> *indexDelegate;
@property (nonatomic, readonly) int indexID;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) long long options;
@property (nonatomic, copy) NSString *protectionClass;

+ (id)_requestQueueAttribute;
+ (void)_setLastUpdateTime;
+ (bool)activityShouldBeIndexed:(id)arg1 bundleID:(id)arg2;
+ (id)codedIdentifiers:(id)arg1;
+ (id)codedNSUAPersistentIdentifiers:(id)arg1;
+ (id)codedUniqueIdentifiers:(id)arg1;
+ (id)defaultSearchableIndex;
+ (void)initialize;
+ (bool)isIndexingAvailable;
+ (double)lastUpdateTime;
+ (id)mainBundleID;
+ (id)mainBundleLocalizedString;
+ (void)notifyIndexDelegates;

- (void).cxx_destruct;
- (void)_cancelAwakeNotifyToken;
- (void)_changeStateOfSearchableItemsWithUIDs:(id)arg1 toState:(long long)arg2 forUser:(unsigned int)arg3 forBundleID:(id)arg4 forUTIType:(id)arg5;
- (void)_checkInWithIndexDelegate:(id)arg1 reason:(id)arg2;
- (void)_commonInit;
- (void)_deleleActionsWithIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_deleteActionsBeforeTime:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)_indexActivities:(id)arg1 flush:(bool)arg2;
- (id)_initWithName:(id)arg1 protectionClass:(id)arg2 bundleIdentifier:(id)arg3 options:(long long)arg4;
- (void)_issueCommand:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_itemsBySanitizingItemsForSpotlight:(id)arg1;
- (void)_makeActivityQueueIfNecessary;
- (void)_performIndexJob:(id)arg1 acknowledgementHandler:(id /* block */)arg2;
- (void)_registerAwakeNotifyToken;
- (void)_setMailMessageAttributes:(id)arg1;
- (void)_slowFetchAttributes:(id)arg1 protectionClass:(id)arg2 bundleID:(id)arg3 identifiers:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_standardizeItems:(id)arg1;
- (bool)_supportsBatching;
- (id)_validateClientState:(id)arg1;
- (id)_validateOperation;
- (id)_validateOperationWithIdentifiers:(id)arg1;
- (id)_validateOperationWithItems:(id)arg1;
- (id)_validateOperationWithItems:(id)arg1 identifiers:(id)arg2;
- (id)activityQueue;
- (void)addInteraction:(id)arg1 bundleID:(id)arg2 protectionClass:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)addInteraction:(id)arg1 completionHandler:(id /* block */)arg2;
- (int)awakeNotifyToken;
- (bool)batchOpen;
- (id)batchedItemIdentifiersToDelete;
- (id)batchedItemsToIndex;
- (void)beginIndexBatch;
- (id)bundleIdentifier;
- (void)changeStateOfSearchableItemsWithUIDs:(id)arg1 toState:(long long)arg2;
- (id)connection;
- (void)dealloc;
- (id)delegateQueue;
- (void)deleteAllInteractionsWithBundleID:(id)arg1 protectionClass:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)deleteAllInteractionsWithCompletionHandler:(id /* block */)arg1;
- (void)deleteAllSearchableItemsForBundleID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteAllSearchableItemsWithCompletionHandler:(id /* block */)arg1;
- (void)deleteAllSearchableItemsWithProtectionClass:(id)arg1 forBundleID:(id)arg2 options:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)deleteAllUserActivities:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteInteractionsWithGroupIdentifiers:(id)arg1 bundleID:(id)arg2 protectionClass:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)deleteInteractionsWithGroupIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteInteractionsWithIdentifiers:(id)arg1 bundleID:(id)arg2 protectionClass:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)deleteInteractionsWithIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteSearchableItemsSinceDate:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteSearchableItemsSinceDate:(id)arg1 protectionClass:(id)arg2 forBundleID:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)deleteSearchableItemsWithDomainIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteSearchableItemsWithDomainIdentifiers:(id)arg1 protectionClass:(id)arg2 forBundleID:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)deleteSearchableItemsWithIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)deleteUserActivitiesWithPersistentIdentifiers:(id)arg1 bundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (id)description;
- (void)donateRelevantActions:(id)arg1 bundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)donateRelevantShortcuts:(id)arg1 bundleID:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)endIndexBatchWithClientState:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)fetchLastClientStateWithCompletionHandler:(id /* block */)arg1;
- (void)fetchLastClientStateWithProtectionClass:(id)arg1 forBundleID:(id)arg2 clientStateName:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)flushUserActivities;
- (id)indexDelegate;
- (int)indexID;
- (void)indexSearchableItems:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)indexSearchableItems:(id)arg1 deleteSearchableItemsWithIdentifiers:(id)arg2 clientState:(id)arg3 clientStateName:(id)arg4 protectionClass:(id)arg5 forBundleID:(id)arg6 options:(long long)arg7 completionHandler:(id /* block */)arg8;
- (void)indexSearchableItems:(id)arg1 deleteSearchableItemsWithIdentifiers:(id)arg2 clientState:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)indexSearchableItems:(id)arg1 deleteSearchableItemsWithIdentifiers:(id)arg2 clientState:(id)arg3 protectionClass:(id)arg4 forBundleID:(id)arg5 options:(long long)arg6 completionHandler:(id /* block */)arg7;
- (void)indexSearchableItems:(id)arg1 returningItemsSanitizedForSpotlightTo:(id /* block */)arg2;
- (void)indexUserActivity:(id)arg1;
- (id)init;
- (id)initWithName:(id)arg1;
- (id)initWithName:(id)arg1 bundleIdentifier:(id)arg2;
- (id)initWithName:(id)arg1 options:(long long)arg2;
- (id)initWithName:(id)arg1 protectionClass:(id)arg2;
- (id)initWithName:(id)arg1 protectionClass:(id)arg2 bundleIdentifier:(id)arg3;
- (id)name;
- (long long)options;
- (void)performDataMigrationWithTimeout:(double)arg1 completionHandler:(id /* block */)arg2;
- (void)performIndexJob:(id)arg1;
- (void)performIndexJob:(id)arg1 acknowledgementHandler:(id /* block */)arg2;
- (id)protectionClass;
- (void)provideDataForBundle:(id)arg1 identifier:(id)arg2 type:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)provideFileURLForBundle:(id)arg1 identifier:(id)arg2 type:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)requestQueue;
- (void)setAwakeNotifyToken:(int)arg1;
- (void)setBatchOpen:(bool)arg1;
- (void)setBatchedItemIdentifiersToDelete:(id)arg1;
- (void)setBatchedItemsToIndex:(id)arg1;
- (void)setBundleIdentifier:(id)arg1;
- (void)setDelegateQueue:(id)arg1;
- (void)setIndexDelegate:(id)arg1;
- (void)setName:(id)arg1;
- (void)setOptions:(long long)arg1;
- (void)setProtectionClass:(id)arg1;
- (void)slowFetchAttributes:(id)arg1 protectionClass:(id)arg2 bundleID:(id)arg3 identifiers:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)throttle;
- (id)throttleQueue;
- (void)unthrottle;
- (void)willModifySearchableItemsWithIdentifiers:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)willModifySearchableItemsWithIdentifiers:(id)arg1 protectionClass:(id)arg2 forBundleID:(id)arg3 options:(long long)arg4 completionHandler:(id /* block */)arg5;
- (id)xpc_dictionary_for_command:(const char *)arg1 requiresInitialization:(bool)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
