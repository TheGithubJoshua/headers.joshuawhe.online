<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WKInterfaceController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/WatchKit.framework/WKInterfaceController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/WatchKit.framework/WatchKit (1)
 */

@interface WKInterfaceController : NSObject {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _contentFrame;
    WKCrownSequencer * _crownSequencer;
    NSMutableDictionary * _gestureRecognizers;
    NSMutableArray * _pendingGestureInstallationFinishedBlocks;
    NSArray * _properties;
    NSArray * _topLevelObjects;
    NSMutableArray * _uninstalledGestureIDs;
    NSString * _viewControllerID;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrame;
@property (nonatomic, readonly) WKCrownSequencer *crownSequencer;
@property (nonatomic, retain) NSMutableDictionary *gestureRecognizers;
@property (nonatomic, retain) NSMutableArray *pendingGestureInstallationFinishedBlocks;
@property (nonatomic, copy) NSArray *properties;
@property (nonatomic, retain) NSArray *topLevelObjects;
@property (nonatomic, retain) NSMutableArray *uninstalledGestureIDs;
@property (nonatomic, retain) NSString *viewControllerID;

+ (void)_insertPageControllersAtIndexes:(id)arg1 withNames:(id)arg2 contexts:(id)arg3;
+ (void)_movePageControllerAtIndex:(long long)arg1 toIndex:(long long)arg2;
+ (void)_removePageControllersAtIndexes:(id)arg1;
+ (bool)openParentApplication:(id)arg1 reply:(id /* block */)arg2;
+ (void)reloadRootControllersWithNames:(id)arg1 contexts:(id)arg2;
+ (void)reloadRootPageControllersWithNames:(id)arg1 contexts:(id)arg2 orientation:(long long)arg3 pageIndex:(long long)arg4;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })screenBounds;
+ (double)screenScale;

- (void).cxx_destruct;
- (void)_handleActionWithIdentifier:(id)arg1 forNotification:(id)arg2 remoteNotification:(id)arg3 localNotification:(id)arg4;
- (void)addMenuItemWithImage:(id)arg1 title:(id)arg2 action:(SEL)arg3;
- (void)addMenuItemWithImageNamed:(id)arg1 title:(id)arg2 action:(SEL)arg3;
- (void)addMenuItemWithItemIcon:(long long)arg1 title:(id)arg2 action:(SEL)arg3;
- (void)animateWithDuration:(double)arg1 animations:(id /* block */)arg2;
- (void)awakeWithContext:(id)arg1;
- (void)becomeCurrentPage;
- (void)beginGlanceUpdates;
- (void)clearAllMenuItems;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrame;
- (id)contextForSegueWithIdentifier:(id)arg1;
- (id)contextForSegueWithIdentifier:(id)arg1 inTable:(id)arg2 rowIndex:(long long)arg3;
- (id)contextsForSegueWithIdentifier:(id)arg1;
- (id)contextsForSegueWithIdentifier:(id)arg1 inTable:(id)arg2 rowIndex:(long long)arg3;
- (id)crownSequencer;
- (void)didAppear;
- (void)didDeactivate;
- (void)didRegisterWithRemoteInterface;
- (void)dismissAddPassesController;
- (void)dismissAudioRecorderController;
- (void)dismissController;
- (void)dismissMediaPlayerController;
- (void)dismissTextInputController;
- (void)endGlanceUpdates;
- (id)gestureRecognizers;
- (void)handleActionWithIdentifier:(id)arg1 forLocalNotification:(id)arg2;
- (void)handleActionWithIdentifier:(id)arg1 forNotification:(id)arg2;
- (void)handleActionWithIdentifier:(id)arg1 forRemoteNotification:(id)arg2;
- (void)handleUserActivity:(id)arg1;
- (id)init;
- (id)initWithContext:(id)arg1;
- (void)interfaceDidScrollToTop;
- (void)interfaceOffsetDidScrollToBottom;
- (void)interfaceOffsetDidScrollToTop;
- (void)invalidateUserActivity;
- (id)pendingGestureInstallationFinishedBlocks;
- (void)pickerDidFocus:(id)arg1;
- (void)pickerDidResignFocus:(id)arg1;
- (void)pickerDidSettle:(id)arg1;
- (void)popController;
- (void)popToRootController;
- (void)presentAddPassesControllerWithPasses:(id)arg1 completion:(id /* block */)arg2;
- (void)presentAudioRecorderControllerWithOutputURL:(id)arg1 preset:(long long)arg2 options:(id)arg3 completion:(id /* block */)arg4;
- (void)presentControllerWithName:(id)arg1 context:(id)arg2;
- (void)presentControllerWithNames:(id)arg1 contexts:(id)arg2;
- (void)presentMediaPlayerControllerWithURL:(id)arg1 options:(id)arg2 completion:(id /* block */)arg3;
- (void)presentTextInputControllerWithSuggestions:(id)arg1 allowedInputMode:(long long)arg2 completion:(id /* block */)arg3;
- (void)presentTextInputControllerWithSuggestionsForLanguage:(id /* block */)arg1 allowedInputMode:(long long)arg2 completion:(id /* block */)arg3;
- (id)properties;
- (void)pushControllerWithName:(id)arg1 context:(id)arg2;
- (void)scrollToObject:(id)arg1 atScrollPosition:(long long)arg2 animated:(bool)arg3;
- (void)setContentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGestureRecognizers:(id)arg1;
- (void)setPendingGestureInstallationFinishedBlocks:(id)arg1;
- (void)setProperties:(id)arg1;
- (void)setTitle:(id)arg1;
- (void)setTopLevelObjects:(id)arg1;
- (void)setUninstalledGestureIDs:(id)arg1;
- (void)setViewControllerID:(id)arg1;
- (void)table:(id)arg1 didSelectRowAtIndex:(long long)arg2;
- (id)topLevelObjects;
- (id)uninstalledGestureIDs;
- (void)updateUserActivity:(id)arg1 userInfo:(id)arg2;
- (void)updateUserActivity:(id)arg1 userInfo:(id)arg2 webpageURL:(id)arg3;
- (id)viewControllerID;
- (void)willActivate;
- (void)willDisappear;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
