<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EAAccessory.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ExternalAccessory.framework/EAAccessory.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ExternalAccessory.framework/ExternalAccessory (1.0)
 */

@interface EAAccessory : NSObject {
    EAAccessoryInternal * _internal;
}

@property (getter=isConnected, nonatomic, readonly) bool connected;
@property (nonatomic, readonly) unsigned long long connectionID;
@property (nonatomic) <EAAccessoryDelegate> *delegate;
@property (nonatomic, readonly) NSString *dockType;
@property (nonatomic, readonly) NSString *firmwareRevision;
@property (nonatomic, readonly) NSString *hardwareRevision;
@property (nonatomic, readonly) NSString *manufacturer;
@property (nonatomic, readonly) NSString *modelNumber;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) NSArray *protocolStrings;
@property (nonatomic, readonly) NSString *serialNumber;

- (void)_OOBBTPairingCompletedWithStatus:(unsigned char)arg1 forAccessoryWithMACAddress:(id)arg2;
- (void)_addSession:(id)arg1;
- (id)_createWakeToken;
- (void)_endSession:(unsigned int)arg1;
- (id)_initWithAccessory:(id)arg1;
- (unsigned int)_internalConnectionID;
- (bool)_internalNotPresentInIAPAccessoriesArray;
- (void)_openCompleteForSession:(unsigned int)arg1;
- (id)_protocolIDForProtocolString:(id)arg1;
- (void)_removeSession:(id)arg1;
- (void)_setConnected:(bool)arg1;
- (void)_setNotPresentInIAPAccessoriesArray:(bool)arg1;
- (id)_shortDescription;
- (void)_updateAccessoryInfo:(id)arg1;
- (unsigned int)accessoryCapabilities;
- (bool)accessoryHasNMEASentencesAvailable;
- (void)addNMEASentence:(id)arg1;
- (id)allPublicProtocolStrings;
- (id)audioPorts;
- (void)beginOOBBTPairingWithCompletionBlock:(id /* block */)arg1;
- (id)bonjourName;
- (id)cameraComponents;
- (int)captureStillImage:(unsigned int)arg1 forCameraIds:(id)arg2;
- (id)certData;
- (id)certSerial;
- (int)classType;
- (unsigned long long)connectionID;
- (bool)containsSameProtocolsAsiAPAccessoryProtocols:(id)arg1;
- (id)coreAccessoriesPrimaryUUID;
- (bool)createdByCoreAccessories;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (unsigned long long)destinationSharingOptions;
- (id)dictionaryWithLowercaseKeys:(id)arg1;
- (id)dockType;
- (unsigned int)eqIndex;
- (id)eqNames;
- (id)firmwareRevision;
- (id)firmwareRevisionActive;
- (id)firmwareRevisionPending;
- (bool)getEphemerisExpirationInterval:(double*)arg1;
- (bool)getEphemerisRecommendRefreshInterval:(double*)arg1;
- (bool)getEphemerisURL:(id*)arg1;
- (void)getIAPTimeSyncInfo:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)getNMEASentence:(id*)arg1;
- (id)getVehicleInfoData;
- (id)hardwareRevision;
- (bool)hasIPConnection;
- (id)init;
- (bool)isAvailableOverBonjour;
- (bool)isConnected;
- (int)locationSentenceTypesMask;
- (id)macAddress;
- (id)manufacturer;
- (id)modelNumber;
- (id)name;
- (bool)pointOfInterestHandoffEnabled;
- (id)ppid;
- (id)preferredApp;
- (id)protocolStrings;
- (void)requestIAPAccessoryWiFiCredentials;
- (void)resetIAPTimeSyncKalmanFilter;
- (bool)sendDestinationInformation:(id)arg1 identifier:(id)arg2;
- (void)sendDeviceIdentifierNotification:(id)arg1 usbIdentifier:(id)arg2;
- (bool)sendEphemeris:(id)arg1;
- (bool)sendEphemerisPointDataGpsWeek:(unsigned long long)arg1 gpsTOW:(double)arg2 latitude:(double)arg3 longitude:(double)arg4 accuracy:(unsigned short)arg5;
- (bool)sendGPRMCDataStatusValueA:(bool)arg1 ValueV:(bool)arg2 ValueX:(bool)arg3;
- (bool)sendGpsWeek:(unsigned long long)arg1 gpsTOW:(double)arg2;
- (bool)sendPointOfInterestInformation:(id)arg1 identifier:(unsigned short)arg2;
- (id)serialNumber;
- (void)setCameraComponents:(id)arg1;
- (int)setCameraProperties:(unsigned int)arg1 forCameraId:(unsigned short)arg2 withProperties:(id)arg3;
- (void)setDelegate:(id)arg1;
- (void)setDestinationSharingOptions:(unsigned long long)arg1;
- (void)setEqIndex:(unsigned int)arg1;
- (void)setEqNames:(id)arg1;
- (void)setIAPTimeSyncParams:(id)arg1;
- (void)setLocationSentenceTypesMask:(int)arg1;
- (bool)setNMEASentencesToFilter:(id)arg1;
- (void)setPointOfInterestHandoffEnabled:(bool)arg1;
- (void)setVehicleInfoSupportedTypes:(id)arg1;
- (void)setVehicleInfovehicleInfoInitialData:(id)arg1;
- (bool)shouldBeHiddenFromUI;
- (int)startCameraInfo:(unsigned int)arg1 forCameraIds:(id)arg2;
- (int)startCameraUpdates:(unsigned int)arg1 forCameraIds:(id)arg2 withProperties:(id)arg3 withCapabilities:(id)arg4;
- (int)startLivePreview:(unsigned int)arg1 forCameraIds:(id)arg2;
- (int)stopCameraInfo:(unsigned int)arg1 forCameraIds:(id)arg2;
- (int)stopCameraUpdates:(unsigned int)arg1 forCameraIds:(id)arg2;
- (int)stopLivePreview:(unsigned int)arg1 forCameraIds:(id)arg2;
- (bool)supportsAccessibility;
- (bool)supportsCamera;
- (bool)supportsCarPlay;
- (bool)supportsLocation;
- (bool)supportsOOBBTPairing;
- (bool)supportsPointOfInterest;
- (bool)supportsPublicIap;
- (bool)supportsUSBCarPlay;
- (bool)supportsWirelessCarPlay;
- (void)updateItemProperty:(int)arg1 withValue:(id)arg2;
- (void)updateSystemProperty:(int)arg1 withValue:(id)arg2;
- (id)vehicleInfoInitialData;
- (id)vehicleInfoSupportedTypes;
- (id)wakeToken;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
