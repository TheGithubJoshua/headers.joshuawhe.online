<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EAAccessoryManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ExternalAccessory.framework/EAAccessoryManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ExternalAccessory.framework/ExternalAccessory (1.0)
 */

@interface EAAccessoryManager : NSObject <ACCExternalAccessoryProviderProtocol, EABluetoothAccessoryPickerDelegate> {
    NSMutableArray * _connectedAccessories;
    NSObject<OS_dispatch_queue> * _connectionQueue;
    EABluetoothAccessoryPicker * _picker;
    id /* block */  _pickerCompletion;
    NSRecursiveLock * _pickerLock;
    NSTimer * _pickerTimer;
    NSString * _selectedBluetoothAddress;
    bool  _sequesterNewAccessories;
    NSMutableArray * _sequesteredAccessories;
}

@property (nonatomic, readonly) NSArray *connectedAccessories;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)accessibilityStartListening;
+ (void)accessibilityStopListening;
+ (id)accessoryDictionaryForLogging:(id)arg1;
+ (bool)isLoggingEnabled;
+ (void)registerCapabilities:(unsigned int)arg1;
+ (id)sharedAccessoryManager;

- (void)EAAccessoryArrived:(id)arg1;
- (void)EAAccessoryLeft:(id)arg1;
- (void)_OOBBTPairingCompletionStatusReceived:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_cameraInfoUpdated:(id)arg1;
- (void)_checkForConnectedAccessories:(bool)arg1 backgroundTaskIdentifier:(unsigned long long)arg2;
- (void)_cleanUpForTaskSuspendWithTaskIdentifier:(unsigned long long)arg1;
- (id)_connectedAccessories;
- (void)_ephemerisURLAvailable:(id)arg1;
- (void)_externalAccessoryConnected:(id)arg1;
- (void)_externalAccessoryConnectedNotificationHandler:(id)arg1;
- (void)_externalAccessoryDisconnected:(id)arg1;
- (void)_externalAccessoryReconnected:(id)arg1;
- (void)_externalAccessoryUpdated:(id)arg1;
- (id)_findExtraAccessoriesContainedOnlyInEA:(id)arg1;
- (id)_findExtraAccessoriesContainedOnlyIniAP:(id)arg1;
- (void)_gpsTimeRequested:(id)arg1;
- (void)_handleAccessoryNotificationTimeout:(id)arg1;
- (void)_iapServerDied:(id)arg1;
- (id)_initFromSingletonCreationMethod;
- (void)_integrateSequesteredAccessories;
- (void)_locationNmeaDataAvailable:(id)arg1;
- (void)_locationPointDataAvailable:(id)arg1;
- (void)_nmeaFilteringSupportChanged:(id)arg1;
- (void)_notifyObserversThatAccessoryDisconnectedWithUserInfo:(id)arg1;
- (void)_pointOfInterestStatusReceived:(id)arg1;
- (void)_removeAlliAPAccessoriesFromArray:(id)arg1 notifyClients:(bool)arg2;
- (void)_timeSyncInfoUpdated:(id)arg1;
- (void)_vehicleDataUpdated:(id)arg1;
- (void)accessibilityAction:(id)arg1;
- (void)accessibilityContextChange:(id)arg1;
- (void)accessibilityItemPropertyRequest:(id)arg1;
- (void)accessibilitySystemPropertyChange:(id)arg1;
- (void)accessibilitySystemPropertyRequest:(id)arg1;
- (void)accessoryClosedEASession:(id)arg1;
- (bool)appDeclaresProtocol:(id)arg1;
- (bool)areLocationAccessoriesEnabled;
- (id)authCertForLegacyConnectionID:(unsigned int)arg1;
- (id)authCertSerialNumberForLegacyConnectionID:(unsigned int)arg1;
- (id)availableAccessories;
- (void)closeEASessionForEASessionUUID:(id)arg1;
- (void)closeInputStreamForEASessionUUID:(id)arg1;
- (id)connectedAccessories;
- (void)createEASessionForProtocol:(id)arg1 accessoryUUID:(id)arg2 withReply:(id /* block */)arg3;
- (id)currentVehicleInformation:(id)arg1;
- (void)dealloc;
- (bool)destinationInformation:(id)arg1 forAccessoryUUID:(id)arg2;
- (void)destinationSharingStatus:(bool)arg1 forDestinationUUID:(id)arg2 supportedParams:(id)arg3 forUUID:(id)arg4;
- (void)devicePicker:(id)arg1 didSelectAddress:(id)arg2 errorCode:(long long)arg3;
- (void)disconnectIPAccessory:(id)arg1;
- (void)endSession:(unsigned int)arg1 forConnectionID:(unsigned int)arg2;
- (void)handleIncomingExternalAccessoryData:(id)arg1 forEASessionIdentifier:(id)arg2 withReply:(id /* block */)arg3;
- (id)init;
- (void)initialEAAccessoriesAttachedAfterClientConnection:(id)arg1;
- (void)initiateConnectionToIPAccessory:(id)arg1;
- (void)nmeaSentenceArrived:(id)arg1 forAccessoryUUID:(id)arg2;
- (void)openCompleteForSession:(unsigned int)arg1 connectionID:(unsigned int)arg2;
- (void)openSessionFromAccessoryToApp:(id)arg1;
- (void)openSessionFromAppToAccessory:(id)arg1;
- (void)pointOfInterestSelection:(id)arg1;
- (bool)processIDIsUsingAccessory:(struct __CFString { }*)arg1;
- (void)registerForLocalNotifications;
- (void)requestIAPAccessoryWiFiCredentials:(id)arg1;
- (void)resumeEASessionData:(id)arg1;
- (void)saveEASession:(id)arg1 forEASessionUUID:(id)arg2;
- (void)sendDeviceIdentifierNotification:(id)arg1 usbIdentifier:(id)arg2 forUUID:(id)arg3;
- (void)sendGPRMCDataStatus:(bool)arg1 ValueV:(bool)arg2 ValueX:(bool)arg3 forUUID:(id)arg4;
- (void)sendNMEAFilterList:(id)arg1 forUUID:(id)arg2;
- (void)sendOutgoingEAData:(id)arg1 forSessionUUID:(id)arg2;
- (void)setAreLocationAccessoriesEnabled:(bool)arg1;
- (void)setShouldAllowCppRuntime:(bool)arg1;
- (void)setShouldAllowInternalProtocols:(bool)arg1;
- (bool)shouldAllowCppRuntime;
- (bool)shouldAllowInternalProtocols;
- (void)showBluetoothAccessoryPickerWithNameFilter:(id)arg1 completion:(id /* block */)arg2;
- (void)startDestinationSharingForUUID:(id)arg1 options:(unsigned long long)arg2;
- (void)startIPAccessoryDiscovery;
- (void)startLocationForConnectedAccessories;
- (void)stopDestinationSharingForUUID:(id)arg1;
- (void)stopIPAccessoryDiscovery;
- (void)stopLocationForConnectedAccessories;
- (void)unregisterForLocalNotifications;
- (void)updateAccessoryInfo:(id)arg1;
- (void)vehicleStatusUpdate:(id)arg1 forAccessoryUUID:(id)arg2;
- (void)wakeAccessoryWithToken:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
