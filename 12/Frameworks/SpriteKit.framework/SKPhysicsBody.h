<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SKPhysicsBody.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SpriteKit.framework/SKPhysicsBody.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit (1)
 */

@interface SKPhysicsBody : NSObject <NSCopying, NSSecureCoding> {
    bool  _affectedByGravity;
    bool  _allowsRotation;
    double  _angularDamping;
    double  _angularVelocity;
    double  _area;
    unsigned int  _categoryBitMask;
    double  _charge;
    unsigned int  _collisionBitMask;
    unsigned int  _contactTestBitMask;
    double  _density;
    bool  _dynamic;
    unsigned int  _fieldBitMask;
    double  _friction;
    NSArray * _joints;
    double  _linearDamping;
    double  _mass;
    SKNode * _node;
    bool  _pinned;
    bool  _resting;
    double  _restitution;
    bool  _usesPreciseCollisionDetection;
    struct CGVector { 
        double dx; 
        double dy; 
    }  _velocity;
}

@property (nonatomic) bool affectedByGravity;
@property (nonatomic) bool allowsRotation;
@property (nonatomic) double angularDamping;
@property (nonatomic) double angularVelocity;
@property (nonatomic, readonly) double area;
@property (nonatomic) unsigned int categoryBitMask;
@property (nonatomic) double charge;
@property (nonatomic) unsigned int collisionBitMask;
@property (nonatomic) unsigned int contactTestBitMask;
@property (nonatomic) double density;
@property (getter=isDynamic, nonatomic) bool dynamic;
@property (nonatomic) unsigned int fieldBitMask;
@property (nonatomic) double friction;
@property (nonatomic, readonly) NSArray *joints;
@property (nonatomic) double linearDamping;
@property (nonatomic) double mass;
@property (nonatomic, readonly) SKNode *node;
@property (nonatomic) bool pinned;
@property (getter=isResting, nonatomic) bool resting;
@property (nonatomic) double restitution;
@property (nonatomic) bool usesPreciseCollisionDetection;
@property (nonatomic) struct CGVector { double x1; double x2; } velocity;

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)bodyWithBodies:(id)arg1;
+ (id)bodyWithCircleOfRadius:(double)arg1;
+ (id)bodyWithCircleOfRadius:(double)arg1 center:(struct CGPoint { double x1; double x2; })arg2;
+ (id)bodyWithEdgeChainFromPath:(struct CGPath { }*)arg1;
+ (id)bodyWithEdgeFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
+ (id)bodyWithEdgeLoopFromPath:(struct CGPath { }*)arg1;
+ (id)bodyWithEdgeLoopFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
+ (id)bodyWithPolygonFromPath:(struct CGPath { }*)arg1;
+ (id)bodyWithRectangleOfSize:(struct CGSize { double x1; double x2; })arg1;
+ (id)bodyWithRectangleOfSize:(struct CGSize { double x1; double x2; })arg1 center:(struct CGPoint { double x1; double x2; })arg2;
+ (id)bodyWithTexture:(id)arg1 alphaThreshold:(float)arg2 size:(struct CGSize { double x1; double x2; })arg3;
+ (id)bodyWithTexture:(id)arg1 alphaThreshold:(float)arg2 size:(struct CGSize { double x1; double x2; })arg3 accuracy:(float)arg4;
+ (id)bodyWithTexture:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2;
+ (id)copyWithZone:(struct _NSZone { }*)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (bool)affectedByGravity;
- (id)allContactedBodies;
- (bool)allowsRotation;
- (double)angularDamping;
- (double)angularVelocity;
- (void)applyAngularImpulse:(double)arg1;
- (void)applyForce:(struct CGVector { double x1; double x2; })arg1;
- (void)applyForce:(struct CGVector { double x1; double x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)applyImpulse:(struct CGVector { double x1; double x2; })arg1;
- (void)applyImpulse:(struct CGVector { double x1; double x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)applyTorque:(double)arg1;
- (double)area;
- (unsigned int)categoryBitMask;
- (double)charge;
- (unsigned int)collisionBitMask;
- (unsigned int)contactTestBitMask;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (double)density;
- (void)encodeWithCoder:(id)arg1;
- (unsigned int)fieldBitMask;
- (double)friction;
- (id)initWithCoder:(id)arg1;
- (bool)isDynamic;
- (bool)isResting;
- (id)joints;
- (double)linearDamping;
- (double)mass;
- (id)node;
- (bool)pinned;
- (double)restitution;
- (void)setAffectedByGravity:(bool)arg1;
- (void)setAllowsRotation:(bool)arg1;
- (void)setAngularDamping:(double)arg1;
- (void)setAngularVelocity:(double)arg1;
- (void)setCategoryBitMask:(unsigned int)arg1;
- (void)setCharge:(double)arg1;
- (void)setCollisionBitMask:(unsigned int)arg1;
- (void)setContactTestBitMask:(unsigned int)arg1;
- (void)setDensity:(double)arg1;
- (void)setDynamic:(bool)arg1;
- (void)setFieldBitMask:(unsigned int)arg1;
- (void)setFriction:(double)arg1;
- (void)setLinearDamping:(double)arg1;
- (void)setMass:(double)arg1;
- (void)setPinned:(bool)arg1;
- (void)setResting:(bool)arg1;
- (void)setRestitution:(double)arg1;
- (void)setUsesPreciseCollisionDetection:(bool)arg1;
- (void)setVelocity:(struct CGVector { double x1; double x2; })arg1;
- (bool)usesPreciseCollisionDetection;
- (struct CGVector { double x1; double x2; })velocity;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
