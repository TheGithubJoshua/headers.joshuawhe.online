<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SKAction.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SpriteKit.framework/SKAction.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit (1)
 */

@interface SKAction : NSObject <NSCopying, NSSecureCoding> {
    struct SKCAction { int (**x1)(); unsigned int x2; float x3; id /* block */ x4; id x5; bool x6; double x7; double x8; float x9; float x10; double x11; bool x12; bool x13; id /* block */ x14; long long x15; float x16; float x17; float x18; float x19; } * _caction;
}

@property (nonatomic) double duration;
@property (nonatomic) bool finished;
@property (nonatomic) double speed;
@property (nonatomic, copy) id /* block */ timingFunction;
@property (nonatomic) long long timingMode;

+ (id)actionNamed:(id)arg1;
+ (id)actionNamed:(id)arg1 duration:(double)arg2;
+ (id)actionNamed:(id)arg1 fromURL:(id)arg2;
+ (id)actionNamed:(id)arg1 fromURL:(id)arg2 duration:(double)arg3;
+ (void)addActionsToCachedActionTable:(id)arg1;
+ (id)animateWithNormalTextures:(id)arg1 timePerFrame:(double)arg2;
+ (id)animateWithNormalTextures:(id)arg1 timePerFrame:(double)arg2 resize:(bool)arg3 restore:(bool)arg4;
+ (id)animateWithTextures:(id)arg1 timePerFrame:(double)arg2;
+ (id)animateWithTextures:(id)arg1 timePerFrame:(double)arg2 resize:(bool)arg3 restore:(bool)arg4;
+ (id)animateWithWarps:(id)arg1 times:(id)arg2;
+ (id)animateWithWarps:(id)arg1 times:(id)arg2 restore:(bool)arg3;
+ (id)applyAngularImpulse:(double)arg1 duration:(double)arg2;
+ (id)applyForce:(struct CGVector { double x1; double x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 duration:(double)arg3;
+ (id)applyForce:(struct CGVector { double x1; double x2; })arg1 duration:(double)arg2;
+ (id)applyImpulse:(struct CGVector { double x1; double x2; })arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 duration:(double)arg3;
+ (id)applyImpulse:(struct CGVector { double x1; double x2; })arg1 duration:(double)arg2;
+ (id)applyTorque:(double)arg1 duration:(double)arg2;
+ (id)changeChargeBy:(float)arg1 duration:(double)arg2;
+ (id)changeChargeTo:(float)arg1 duration:(double)arg2;
+ (id)changeMassBy:(float)arg1 duration:(double)arg2;
+ (id)changeMassTo:(float)arg1 duration:(double)arg2;
+ (id)changeObstructionBy:(float)arg1 duration:(double)arg2;
+ (id)changeObstructionTo:(float)arg1 duration:(double)arg2;
+ (id)changeOcclusionBy:(float)arg1 duration:(double)arg2;
+ (id)changeOcclusionTo:(float)arg1 duration:(double)arg2;
+ (id)changePlaybackRateBy:(float)arg1 duration:(double)arg2;
+ (id)changePlaybackRateTo:(float)arg1 duration:(double)arg2;
+ (id)changeReverbBy:(float)arg1 duration:(double)arg2;
+ (id)changeReverbTo:(float)arg1 duration:(double)arg2;
+ (id)changeVolumeBy:(float)arg1 duration:(double)arg2;
+ (id)changeVolumeTo:(float)arg1 duration:(double)arg2;
+ (void)clearActionTableCache;
+ (id)colorizeWithColor:(id)arg1 colorBlendFactor:(double)arg2 duration:(double)arg3;
+ (id)colorizeWithColorBlendFactor:(double)arg1 duration:(double)arg2;
+ (void)convertAction:(id)arg1 toDuration:(double)arg2;
+ (id)customActionWithDuration:(double)arg1 actionBlock:(id /* block */)arg2;
+ (id)fadeAlphaBy:(double)arg1 duration:(double)arg2;
+ (id)fadeAlphaTo:(double)arg1 duration:(double)arg2;
+ (id)fadeInWithDuration:(double)arg1;
+ (id)fadeOutWithDuration:(double)arg1;
+ (id)falloffBy:(float)arg1 duration:(double)arg2;
+ (id)falloffTo:(float)arg1 duration:(double)arg2;
+ (id)findNamedActionInBundle:(id)arg1;
+ (id)followPath:(struct CGPath { }*)arg1 asOffset:(bool)arg2 orientToPath:(bool)arg3 duration:(double)arg4;
+ (id)followPath:(struct CGPath { }*)arg1 asOffset:(bool)arg2 orientToPath:(bool)arg3 speed:(double)arg4;
+ (id)followPath:(struct CGPath { }*)arg1 duration:(double)arg2;
+ (id)followPath:(struct CGPath { }*)arg1 speed:(double)arg2;
+ (id)group:(id)arg1;
+ (id)hide;
+ (id)javaScriptActionWithDuration:(double)arg1 script:(id)arg2;
+ (id)moveBY:(struct CGVector { double x1; double x2; })arg1 duration:(double)arg2;
+ (id)moveBy:(struct CGVector { double x1; double x2; })arg1 duration:(double)arg2;
+ (id)moveByX:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)moveTo:(struct CGPoint { double x1; double x2; })arg1 duration:(double)arg2;
+ (id)moveToX:(double)arg1 duration:(double)arg2;
+ (id)moveToY:(double)arg1 duration:(double)arg2;
+ (id)pause;
+ (id)performSelector:(SEL)arg1 onTarget:(id)arg2;
+ (id)play;
+ (id)playSoundFileNamed:(id)arg1;
+ (id)playSoundFileNamed:(id)arg1 atPosition:(struct CGPoint { double x1; double x2; })arg2 waitForCompletion:(bool)arg3;
+ (id)playSoundFileNamed:(id)arg1 waitForCompletion:(bool)arg2;
+ (id)reachTo:(struct CGPoint { double x1; double x2; })arg1 rootNode:(id)arg2 duration:(double)arg3;
+ (id)reachTo:(struct CGPoint { double x1; double x2; })arg1 rootNode:(id)arg2 velocity:(double)arg3;
+ (id)reachToNode:(id)arg1 rootNode:(id)arg2 duration:(double)arg3;
+ (id)reachToNode:(id)arg1 rootNode:(id)arg2 velocity:(double)arg3;
+ (id)recursivePathsForResourcesOfType:(id)arg1 inDirectory:(id)arg2;
+ (id)removeFromParent;
+ (id)repeatAction:(id)arg1 count:(unsigned long long)arg2;
+ (id)repeatActionForever:(id)arg1;
+ (id)resizeByWidth:(double)arg1 height:(double)arg2 duration:(double)arg3;
+ (id)resizeToHeight:(double)arg1 duration:(double)arg2;
+ (id)resizeToWidth:(double)arg1 duration:(double)arg2;
+ (id)resizeToWidth:(double)arg1 height:(double)arg2 duration:(double)arg3;
+ (id)rotateByAngle:(double)arg1 duration:(double)arg2;
+ (id)rotateToAngle:(double)arg1 duration:(double)arg2;
+ (id)rotateToAngle:(double)arg1 duration:(double)arg2 shortestUnitArc:(bool)arg3;
+ (id)runAction:(id)arg1 onChildWithName:(id)arg2;
+ (id)runBlock:(id /* block */)arg1;
+ (id)runBlock:(id /* block */)arg1 queue:(id)arg2;
+ (id)scaleBy:(double)arg1 duration:(double)arg2;
+ (id)scaleTo:(double)arg1 duration:(double)arg2;
+ (id)scaleToSize:(struct CGSize { double x1; double x2; })arg1 duration:(double)arg2;
+ (id)scaleXBy:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)scaleXTo:(double)arg1 duration:(double)arg2;
+ (id)scaleXTo:(double)arg1 y:(double)arg2 duration:(double)arg3;
+ (id)scaleYTo:(double)arg1 duration:(double)arg2;
+ (id)sequence:(id)arg1;
+ (id)setNormalTexture:(id)arg1;
+ (id)setNormalTexture:(id)arg1 resize:(bool)arg2;
+ (id)setTexture:(id)arg1;
+ (id)setTexture:(id)arg1 resize:(bool)arg2;
+ (id)speedBy:(double)arg1 duration:(double)arg2;
+ (id)speedTo:(double)arg1 duration:(double)arg2;
+ (id)stereoPanBy:(float)arg1 duration:(double)arg2;
+ (id)stereoPanTo:(float)arg1 duration:(double)arg2;
+ (id)stop;
+ (id)strengthBy:(float)arg1 duration:(double)arg2;
+ (id)strengthTo:(float)arg1 duration:(double)arg2;
+ (bool)supportsSecureCoding;
+ (Class)unarchiver:(id)arg1 cannotDecodeObjectOfClassName:(id)arg2 originalClasses:(id)arg3;
+ (id)unhide;
+ (id)waitForDuration:(double)arg1;
+ (id)waitForDuration:(double)arg1 withRange:(double)arg2;
+ (id)warpTo:(id)arg1 duration:(double)arg2;

- (struct SKCAction { int (**x1)(); unsigned int x2; float x3; id /* block */ x4; id x5; bool x6; double x7; double x8; float x9; float x10; double x11; bool x12; bool x13; id /* block */ x14; long long x15; float x16; float x17; float x18; float x19; }*)caction;
- (void)commonInit;
- (id)copy;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (double)duration;
- (void)encodeWithCoder:(id)arg1;
- (bool)finished;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (bool)isEqualToAction:(id)arg1;
- (double)ratioForTime:(double)arg1;
- (id)reversedAction;
- (void)setCppAction:(void*)arg1;
- (void)setDuration:(double)arg1;
- (void)setFinished:(bool)arg1;
- (void)setSpeed:(double)arg1;
- (void)setTimingFunction:(id /* block */)arg1;
- (void)setTimingMode:(long long)arg1;
- (double)speed;
- (id)subactions;
- (id /* block */)timingFunction;
- (long long)timingMode;
- (void)updateWithTarget:(id)arg1 forTime:(double)arg2;
- (void)wasAddedToTarget:(id)arg1 atTime:(double)arg2;
- (void)wasPausedWithTarget:(id)arg1 atTime:(double)arg2;
- (void)wasRemovedFromTarget:(id)arg1 atTime:(double)arg2;
- (void)willResumeWithTarget:(id)arg1 atTime:(double)arg2;
- (void)willStartWithTarget:(id)arg1 atTime:(double)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
