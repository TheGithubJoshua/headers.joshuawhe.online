<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKDayTimeView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKitUI.framework/EKDayTimeView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI (1.0)
 */

@interface EKDayTimeView : UIView <EKCurrentTimeMarkerViewUpdating, EKUITintColorUpdateDelegate> {
    NSMutableArray * _contentViews;
    <EKDayTimeViewDelegate> * _delegate;
    double  _designatorSize;
    double  _highlightedHour;
    double  _hourHeight;
    double  _hourHeightScale;
    double  _hourSize;
    double  _hoursToPad;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _hoursToRender;
    unsigned int  _leftBorder;
    long long  _orientation;
    unsigned int  _rightBorder;
    bool  _showsTimeMarker;
    bool  _showsTimeMarkerExtension;
    UIColor * _timeColor;
    EKCurrentTimeMarkerView * _timeMarker;
    UIView * _timeMarkerExtension;
    double  _timeWidth;
    bool  _usesLightText;
    UIVisualEffect * _visualEffect;
    NSMutableDictionary * _visualEffectViews;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) double defaultHeight;
@property (nonatomic) <EKDayTimeViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) double highlightedHour;
@property (nonatomic, readonly) double hourHeight;
@property (nonatomic) double hourHeightScale;
@property (nonatomic) double hoursToPad;
@property (nonatomic) struct _NSRange { unsigned long long x1; unsigned long long x2; } hoursToRender;
@property (nonatomic) bool showsLeftBorder;
@property (nonatomic) bool showsRightBorder;
@property (nonatomic) bool showsTimeMarker;
@property (nonatomic) bool showsTimeMarkerExtension;
@property (readonly) Class superclass;
@property (nonatomic, retain) UIColor *timeColor;
@property (nonatomic, readonly) EKCurrentTimeMarkerView *timeMarker;
@property (nonatomic) bool usesLightText;
@property (nonatomic, retain) UIVisualEffect *visualEffect;

+ (id)_boldFontForOrientation:(long long)arg1;
+ (void)_calculateWidthForOrientation:(long long)arg1 excludeCurrentTime:(bool)arg2;
+ (double)_dynamicFontSizeForOrientation:(long long)arg1;
+ (id)_hourFontForOrientation:(long long)arg1;
+ (void)_invalidateCachedValues;
+ (void)_invalidateWidth;
+ (id)_noonLocalizedString;
+ (double)_noonLocalizedWidthForOrientation:(long long)arg1;
+ (id)_normalFontForOrientation:(long long)arg1;
+ (void)_registerForInvalidation;
+ (double)_timeTextWidthForOrientation:(long long)arg1;
+ (id)allDayLabelBoldFont;
+ (id)allDayLabelFont;
+ (double)defaultHeightForOrientation:(long long)arg1;
+ (double)defaultHeightForOrientation:(long long)arg1 withHourScale:(double)arg2;
+ (double)defaultHourScale;
+ (double)designatorSizeForOrientation:(long long)arg1;
+ (double)heightOfHourTextForHour:(long long)arg1 orientation:(long long)arg2;
+ (double)hourHeightForOrientation:(long long)arg1;
+ (double)hourSizeForOrientation:(long long)arg1;
+ (double)hourWidthForOrientation:(long long)arg1;
+ (void)setVerticalPadding:(double)arg1;
+ (double)timeInsetForOrientation:(long long)arg1;
+ (double)timeVerticalInsetForOrientation:(long long)arg1;
+ (double)timeWidthForOrientation:(long long)arg1;
+ (id)unscaledAllDayLabelFont;
+ (double)verticalPadding;

- (void).cxx_destruct;
- (void)_fontSizeChanged;
- (void)_invalidateTimeWidth;
- (void)_localeChanged;
- (double)_positionOfSecond:(int)arg1;
- (void)_sizeClassChanged;
- (double)_timeWidth;
- (void)dealloc;
- (double)defaultHeight;
- (id)delegate;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forContentView:(id)arg2 withHourRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (double)highlightedHour;
- (double)hourHeight;
- (double)hourHeightScale;
- (double)hoursToPad;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })hoursToRender;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)layoutFrames;
- (void)layoutSubviews;
- (double)scaledHourHeight;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlightedHour:(double)arg1;
- (void)setHourHeightScale:(double)arg1;
- (void)setHoursToPad:(double)arg1;
- (void)setHoursToRender:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setNeedsDisplay;
- (void)setOpaque:(bool)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setSemanticContentAttribute:(long long)arg1;
- (void)setShowsLeftBorder:(bool)arg1;
- (void)setShowsRightBorder:(bool)arg1;
- (void)setShowsTimeMarker:(bool)arg1;
- (void)setShowsTimeMarkerExtension:(bool)arg1;
- (void)setTimeColor:(id)arg1;
- (void)setUsesLightText:(bool)arg1;
- (void)setVisualEffect:(id)arg1;
- (bool)showsLeftBorder;
- (bool)showsRightBorder;
- (bool)showsTimeMarker;
- (bool)showsTimeMarkerExtension;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)timeColor;
- (id)timeMarker;
- (void)tintColorDidChange;
- (double)topPadding;
- (void)updateMarkerPosition;
- (bool)usesLightText;
- (void)viewTintColorDidChangeForView:(id)arg1 toColor:(id)arg2;
- (id)visualEffect;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
