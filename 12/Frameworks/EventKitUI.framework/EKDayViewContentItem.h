<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKDayViewContentItem.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKitUI.framework/EKDayViewContentItem.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI (1.0)
 */

@interface EKDayViewContentItem : NSObject <CUIKSingleDayTimelineViewItem> {
    double  _bottomPinningProximity;
    EKCalendarDate * _endDate;
    EKEvent * _event;
    unsigned long long  _eventIndex;
    bool  _isLoadingAsync;
    bool  _isProposedTime;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _stagedFrame;
    EKCalendarDate * _startDate;
    double  _topPinningProximity;
    double  _travelTime;
    double  _travelTimeHeight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _unPinnedViewFrame;
    bool  _usesSmallText;
    EKDayOccurrenceView * _view;
    double  _visibleHeight;
    bool  _visibleHeightLocked;
}

@property (nonatomic) double bottomPinningProximity;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSDate *end;
@property (nonatomic, copy) EKCalendarDate *endDate;
@property (nonatomic, readonly) double enoughHeightForOneLine;
@property (nonatomic, retain) EKEvent *event;
@property (nonatomic, readonly) unsigned long long eventIndex;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool hideTravelTime;
@property (nonatomic) bool isLoadingAsync;
@property (nonatomic) bool isProposedTime;
@property (nonatomic, readonly) NSDate *start;
@property (nonatomic, copy) EKCalendarDate *startDate;
@property (nonatomic, readonly, copy) EKCalendarDate *startDateIncludingTravelTime;
@property (nonatomic, readonly) NSDate *startWithTravelTime;
@property (readonly) Class superclass;
@property (nonatomic) double topPinningProximity;
@property (nonatomic) double travelTime;
@property struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } unPinnedViewFrame;
@property (nonatomic) bool usesSmallText;
@property (nonatomic, retain) EKDayOccurrenceView *view;
@property (nonatomic, readonly) double viewMaxNaturalTextHeight;
@property (readonly) bool visibleHeightLocked;

+ (double)barToBarHorizontalDistanceIncludingBarWidth;

- (void).cxx_destruct;
- (double)bottomPinningProximity;
- (id)description;
- (id)end;
- (id)endDate;
- (double)enoughHeightForOneLine;
- (id)event;
- (unsigned long long)eventIndex;
- (bool)hideTravelTime;
- (id)initWithEventIndex:(unsigned long long)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isLoadingAsync;
- (bool)isPinned;
- (bool)isProposedTime;
- (void)resetVisibleHeight;
- (void)setBottomPinningProximity:(double)arg1;
- (void)setEndDate:(id)arg1;
- (void)setEvent:(id)arg1;
- (void)setIsLoadingAsync:(bool)arg1;
- (void)setIsProposedTime:(bool)arg1;
- (void)setStagedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setStartDate:(id)arg1;
- (void)setTopPinningProximity:(double)arg1;
- (void)setTravelTime:(double)arg1;
- (void)setTravelTimeHeight:(double)arg1;
- (void)setUnPinnedViewFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setUsesSmallText:(bool)arg1;
- (void)setView:(id)arg1;
- (void)setVisibleHeight:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })stagedFrame;
- (id)start;
- (id)startDate;
- (id)startDateIncludingTravelTime;
- (id)startWithTravelTime;
- (double)topPinningProximity;
- (double)travelTime;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unPinnedViewFrame;
- (bool)usesSmallText;
- (id)view;
- (double)viewMaxNaturalTextHeight;
- (bool)visibleHeightLocked;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
