<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CalendarModel.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKitUI.framework/CalendarModel.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI (1.0)
 */

@interface CalendarModel : NSObject <CalendarEventLoaderDelegate> {
    bool  _autoStartNotificationMonitor;
    long long  _cachedFakeTodayIndex;
    NSCalendar * _calendar;
    long long  _displayableAccountErrorsCount;
    CalendarEventLoader * _eventLoader;
    EKEventStore * _eventStore;
    NSLock * _filterLock;
    unsigned long long  _firstVisibleSecond;
    long long  _invitationBearingStoresExist;
    _EKNotificationMonitor * _notificationMonitor;
    <OccurrenceCacheDataSourceProtocol> * _occurrenceCacheDataSource;
    <OccurrenceCacheDataSourceProtocol> * _occurrenceCacheFilteredDataSource;
    long long  _readWriteCalendarCount;
    NSString * _searchString;
    NSSet * _selectedCalendars;
    EKCalendarDate * _selectedDate;
    EKEvent * _selectedOccurrence;
    NSArray * _visibleCalendars;
}

@property (nonatomic) bool allowEventLocationPrediction;
@property (nonatomic) bool autoStartNotificationMonitor;
@property (nonatomic, copy) NSCalendar *calendar;
@property (nonatomic, readonly) long long displayableAccountErrorsCount;
@property (nonatomic, readonly) EKEventStore *eventStore;
@property (nonatomic) unsigned long long firstVisibleSecond;
@property (nonatomic, readonly) long long readWriteCalendarCount;
@property (nonatomic, retain) NSString *searchString;
@property (nonatomic, retain) NSSet *selectedCalendars;
@property (nonatomic, copy) EKCalendarDate *selectedDate;
@property (nonatomic, readonly) EKCalendarDate *selectedDay;
@property (nonatomic, retain) EKEvent *selectedOccurrence;
@property (nonatomic, readonly) long long visibleCalendarCount;

+ (id)calendarModelWithDataPath:(id)arg1;

- (void).cxx_destruct;
- (void)_createOccurrenceCacheDataSources;
- (id)_dataSourceUsingFilter:(bool)arg1;
- (void)_eventStoreChanged:(id)arg1;
- (void)_finishedFirstLoad;
- (void)_invalidateCachedOccurrences;
- (void)_invalidateOccurrenceCacheDataSources;
- (void)_localeChanged:(id)arg1;
- (void)_notificationCountExpired:(id)arg1;
- (id)_notificationMonitor;
- (void)_notificationsExpired:(id)arg1;
- (void)_occurrenceCacheChanged;
- (void)_processReloadForCacheOnly:(bool)arg1 includingCalendars:(bool)arg2 checkCalendarsValid:(bool)arg3 checkSources:(bool)arg4;
- (void)_recreateOccurrenceCacheDataSources;
- (void)_reloadIfTodayDetermined;
- (void)_searchResultsAvailable:(id)arg1;
- (void)_significantTimeChange:(id)arg1;
- (void)_systemWake;
- (void)_timeZoneChanged:(id)arg1;
- (double)_tomorrow;
- (void)_tzSupportTodayRolledOver;
- (void)addOccurrenceAwaitingDeletion:(id)arg1;
- (void)addOccurrenceAwaitingRefresh:(id)arg1;
- (bool)allowEventLocationPrediction;
- (bool)autoStartNotificationMonitor;
- (long long)cachedFakeTodayIndex;
- (id)cachedOccurrenceAtIndexPath:(id)arg1;
- (id)cachedOccurrenceAtIndexPath:(id)arg1 usingFilter:(bool)arg2;
- (bool)cachedOccurrencesAreBeingGenerated;
- (bool)cachedOccurrencesAreLoaded;
- (id)calendar;
- (void)calendarEventLoader:(id)arg1 occurrencesDidUpdateBetweenStart:(double)arg2 end:(double)arg3 wasEmptyLoad:(bool)arg4;
- (id)closestOccurrenceToTomorrowForEventUID:(int)arg1;
- (long long)countSourcesWithErrors;
- (id)dateForCachedOccurrencesInSection:(long long)arg1;
- (id)dateForCachedOccurrencesInSection:(long long)arg1 usingFilter:(bool)arg2;
- (void)dealloc;
- (id)defaultCalendarForNewEvents;
- (long long)displayableAccountErrorsCount;
- (void)ensureCalendarVisibleWithId:(id)arg1;
- (id)eventNotificationReferences;
- (unsigned long long)eventNotificationsCount;
- (id)eventStore;
- (void)fetchCachedDaysInBackgroundStartingFromSection:(long long)arg1;
- (void)fetchCachedDaysInBackgroundStartingFromSection:(long long)arg1 usingFilter:(bool)arg2;
- (unsigned long long)firstVisibleSecond;
- (id)init;
- (id)initWithDataPath:(id)arg1;
- (bool)invitationBearingStoresExistForEvents;
- (bool)isCalendarVisibleWithID:(id)arg1;
- (long long)numberOfCachedOccurrencesInSection:(long long)arg1;
- (long long)numberOfCachedOccurrencesInSection:(long long)arg1 usingFilter:(bool)arg2;
- (long long)numberOfDaysWithCachedOccurrences;
- (long long)numberOfDaysWithCachedOccurrencesUsingFilter:(bool)arg1;
- (id)occurrencesForDay:(id)arg1 waitForLoad:(bool)arg2;
- (id)occurrencesForStartDate:(id)arg1 endDate:(id)arg2 preSorted:(bool)arg3 waitForLoad:(bool)arg4;
- (id)occurrencesForStartDay:(id)arg1 endDay:(id)arg2 preSorted:(bool)arg3 waitForLoad:(bool)arg4;
- (void)prepareForAppSuspend;
- (long long)readWriteCalendarCount;
- (id)refreshAccountListIfNeeded:(bool)arg1;
- (id)refreshCalendarDataIfNeeded:(bool)arg1;
- (bool)removeEvent:(id)arg1 withSpan:(long long)arg2 error:(id*)arg3;
- (id)searchString;
- (bool)searchingOccurrences;
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1;
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1 sectionExistsForDay:(bool*)arg2;
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1 sectionExistsForDay:(bool*)arg2 usingFilter:(bool)arg3;
- (long long)sectionForCachedOccurrencesOnDate:(id)arg1 usingFilter:(bool)arg2;
- (id)selectedCalendars;
- (id)selectedDate;
- (id)selectedDateOccurrences:(bool)arg1 loadIsComplete:(bool*)arg2;
- (id)selectedDay;
- (id)selectedOccurrence;
- (bool)selectedOccurrenceIsSearchMatch;
- (void)setAllowEventLocationPrediction:(bool)arg1;
- (void)setAutoStartNotificationMonitor:(bool)arg1;
- (void)setCalendar:(id)arg1;
- (void)setComponentForExpandingPadding:(unsigned long long)arg1;
- (void)setComponentForExpandingRequests:(unsigned long long)arg1;
- (void)setDesiredPaddingDays:(unsigned int)arg1;
- (void)setFirstVisibleSecond:(unsigned long long)arg1;
- (void)setMaxCachedDays:(unsigned int)arg1;
- (void)setPreferredReloadStartDate:(id)arg1 endDate:(id)arg2;
- (void)setSearchString:(id)arg1;
- (void)setSelectedCalendars:(id)arg1;
- (void)setSelectedDate:(id)arg1;
- (void)setSelectedOccurrence:(id)arg1;
- (void)simulateFirstLoadFinished;
- (void)startNotificationMonitor;
- (void)updateAfterAppResume;
- (void)updateSelectedDateTimeZone;
- (long long)visibleCalendarCount;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
