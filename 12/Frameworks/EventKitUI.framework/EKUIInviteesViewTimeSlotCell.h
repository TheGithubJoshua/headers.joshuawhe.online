<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKUIInviteesViewTimeSlotCell.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKitUI.framework/EKUIInviteesViewTimeSlotCell.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI (1.0)
 */

@interface EKUIInviteesViewTimeSlotCell : UITableViewCell {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _andMoreBoundingRect;
    UIView * _andMoreDebugOverlay;
    NSDictionary * _andMoreStringCache;
    UILabel * _bottomTimeLabel;
    NSLayoutConstraint * _bottomTimeLabelHeightConstraint;
    NSLayoutConstraint * _bottomTimeLabelToTopTimeLabelConstraint;
    NSArray * _busyParticipants;
    bool  _checked;
    UIImageView * _checkmarkImageView;
    NSMutableDictionary * _colorToBusyImageAttributedString;
    NSDate * _endDate;
    UILabel * _labelForTextSizeTesting;
    UITextView * _participantsTextView;
    NSLayoutConstraint * _participantsViewToBottomTimeLabelConstraint;
    NSLayoutConstraint * _participantsViewToContentViewConstraint;
    NSArray * _persistentConstraints;
    NSArray * _proposedBy;
    UILabel * _proposedByLabel;
    NSLayoutConstraint * _proposedByMaxHeightConstraint;
    NSLayoutConstraint * _proposedByMinHeightConstraint;
    NSLayoutConstraint * _proposedTimeLabelToBottomTimeLabelConstraint;
    bool  _searchInProgress;
    id /* block */  _showAllConflictedParticipantsTapped;
    bool  _showAllParticipants;
    UIButton * _showPreviewButton;
    id /* block */  _showPreviewOfEventAtTime;
    NSDate * _startDate;
    UITapGestureRecognizer * _tappedMoreRecognizer;
    UITextView * _textViewForTextSizeTesting;
    NSTimeZone * _timeZone;
    UILabel * _timeZoneTimeLabel;
    NSLayoutConstraint * _timeZoneTimeLabelHeightConstraint;
    NSLayoutConstraint * _timeZoneTimeLabelToBottomTimeLabelConstraint;
    UILabel * _topTimeLabel;
    NSLayoutConstraint * _topTimeLabelHeightConstraint;
    NSLayoutConstraint * _topTimeLabelToTopContentViewConstraint;
    bool  _updateFontBasedConstraints;
    bool  _updateParticipantsText;
    bool  _updateTimeText;
}

@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } andMoreBoundingRect;
@property (nonatomic, retain) UIView *andMoreDebugOverlay;
@property (nonatomic, retain) NSDictionary *andMoreStringCache;
@property (nonatomic, retain) UILabel *bottomTimeLabel;
@property (nonatomic, retain) NSLayoutConstraint *bottomTimeLabelHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *bottomTimeLabelToTopTimeLabelConstraint;
@property (nonatomic, retain) NSArray *busyParticipants;
@property (nonatomic) bool checked;
@property (nonatomic, retain) UIImageView *checkmarkImageView;
@property (nonatomic, retain) NSMutableDictionary *colorToBusyImageAttributedString;
@property (nonatomic, retain) NSDate *endDate;
@property (nonatomic, retain) UILabel *labelForTextSizeTesting;
@property (nonatomic, readonly) UIColor *participantsTextColor;
@property (nonatomic, retain) UITextView *participantsTextView;
@property (nonatomic, retain) NSLayoutConstraint *participantsViewToBottomTimeLabelConstraint;
@property (nonatomic, retain) NSLayoutConstraint *participantsViewToContentViewConstraint;
@property (nonatomic, retain) NSArray *persistentConstraints;
@property (nonatomic, retain) NSArray *proposedBy;
@property (nonatomic, retain) UILabel *proposedByLabel;
@property (nonatomic, retain) NSLayoutConstraint *proposedByMaxHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *proposedByMinHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *proposedTimeLabelToBottomTimeLabelConstraint;
@property (nonatomic) bool searchInProgress;
@property (nonatomic, copy) id /* block */ showAllConflictedParticipantsTapped;
@property (nonatomic) bool showAllParticipants;
@property (nonatomic, retain) UIButton *showPreviewButton;
@property (nonatomic, copy) id /* block */ showPreviewOfEventAtTime;
@property (nonatomic, retain) NSDate *startDate;
@property (nonatomic, retain) UITapGestureRecognizer *tappedMoreRecognizer;
@property (nonatomic, retain) UITextView *textViewForTextSizeTesting;
@property (nonatomic, readonly) UIColor *timeTextColor;
@property (nonatomic, retain) NSTimeZone *timeZone;
@property (nonatomic, retain) UILabel *timeZoneTimeLabel;
@property (nonatomic, retain) NSLayoutConstraint *timeZoneTimeLabelHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *timeZoneTimeLabelToBottomTimeLabelConstraint;
@property (nonatomic, retain) UILabel *topTimeLabel;
@property (nonatomic, retain) NSLayoutConstraint *topTimeLabelHeightConstraint;
@property (nonatomic, retain) NSLayoutConstraint *topTimeLabelToTopContentViewConstraint;
@property (nonatomic) bool updateFontBasedConstraints;
@property (nonatomic) bool updateParticipantsText;
@property (nonatomic) bool updateTimeText;

+ (id)_andMoreLeftSpacing;
+ (id)_generateAndMoreStringWithCount:(unsigned long long)arg1 attributes:(id)arg2;
+ (id)_generateParticipantTextView;
+ (id)_interParticipantSpacing;
+ (bool)_layoutManagerReportsExcessLines:(id)arg1;
+ (double)_leftBuffer;
+ (id)_nonBreakingSpace;
+ (id)_participantsTextViewFont;
+ (id)_proposedByFont;
+ (id)_replaceSpacesWithNonBreakingSpaces:(id)arg1;
+ (double)_rightBuffer;
+ (void)_setRequiredHuggingAndCompression:(id)arg1;
+ (id)_timeLabelFont;

- (void).cxx_destruct;
- (void)_andMoreTapped:(id)arg1;
- (id)_busyImageAttributedStringForColor:(id)arg1;
- (bool)_everyoneCanAttend;
- (id)_generateStringForAllParticipants:(id)arg1;
- (id)_generateStringForSomeParticipantsAndStampMoreBoundingRect:(id)arg1;
- (double)_preferredMaxLayoutWidth;
- (void)_resetFonts;
- (void)_resetParticipantsTextIfNeeded;
- (void)_resetPreferredMaxLayoutWidths;
- (void)_resetTimeTextIfNeeded;
- (bool)_shouldDisplayTimeZone;
- (void)_showPreviewButtonTapped:(id)arg1;
- (id)_textForParticipant:(id)arg1 color:(id)arg2;
- (bool)_textWillFit:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })andMoreBoundingRect;
- (id)andMoreDebugOverlay;
- (id)andMoreStringCache;
- (id)bottomTimeLabel;
- (id)bottomTimeLabelHeightConstraint;
- (id)bottomTimeLabelToTopTimeLabelConstraint;
- (id)busyParticipants;
- (bool)checked;
- (id)checkmarkImageView;
- (id)colorToBusyImageAttributedString;
- (void)dealloc;
- (id)endDate;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)initWithStyle:(long long)arg1 reuseIdentifier:(id)arg2;
- (id)labelForTextSizeTesting;
- (id)participantsTextColor;
- (id)participantsTextView;
- (id)participantsViewToBottomTimeLabelConstraint;
- (id)participantsViewToContentViewConstraint;
- (id)persistentConstraints;
- (id)proposedBy;
- (id)proposedByLabel;
- (id)proposedByMaxHeightConstraint;
- (id)proposedByMinHeightConstraint;
- (id)proposedTimeLabelToBottomTimeLabelConstraint;
- (bool)searchInProgress;
- (void)setAndMoreBoundingRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setAndMoreDebugOverlay:(id)arg1;
- (void)setAndMoreStringCache:(id)arg1;
- (void)setBottomTimeLabel:(id)arg1;
- (void)setBottomTimeLabelHeightConstraint:(id)arg1;
- (void)setBottomTimeLabelToTopTimeLabelConstraint:(id)arg1;
- (void)setBusyParticipants:(id)arg1;
- (void)setChecked:(bool)arg1;
- (void)setCheckmarkImageView:(id)arg1;
- (void)setColorToBusyImageAttributedString:(id)arg1;
- (void)setEndDate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setLabelForTextSizeTesting:(id)arg1;
- (void)setParticipantsTextView:(id)arg1;
- (void)setParticipantsViewToBottomTimeLabelConstraint:(id)arg1;
- (void)setParticipantsViewToContentViewConstraint:(id)arg1;
- (void)setPersistentConstraints:(id)arg1;
- (void)setProposedBy:(id)arg1;
- (void)setProposedByLabel:(id)arg1;
- (void)setProposedByMaxHeightConstraint:(id)arg1;
- (void)setProposedByMinHeightConstraint:(id)arg1;
- (void)setProposedTimeLabelToBottomTimeLabelConstraint:(id)arg1;
- (void)setSearchInProgress:(bool)arg1;
- (void)setShowAllConflictedParticipantsTapped:(id /* block */)arg1;
- (void)setShowAllParticipants:(bool)arg1;
- (void)setShowPreviewButton:(id)arg1;
- (void)setShowPreviewOfEventAtTime:(id /* block */)arg1;
- (void)setStartDate:(id)arg1;
- (void)setTappedMoreRecognizer:(id)arg1;
- (void)setTextViewForTextSizeTesting:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setTimeZoneTimeLabel:(id)arg1;
- (void)setTimeZoneTimeLabelHeightConstraint:(id)arg1;
- (void)setTimeZoneTimeLabelToBottomTimeLabelConstraint:(id)arg1;
- (void)setTopTimeLabel:(id)arg1;
- (void)setTopTimeLabelHeightConstraint:(id)arg1;
- (void)setTopTimeLabelToTopContentViewConstraint:(id)arg1;
- (void)setUpdateFontBasedConstraints:(bool)arg1;
- (void)setUpdateParticipantsText:(bool)arg1;
- (void)setUpdateTimeText:(bool)arg1;
- (id /* block */)showAllConflictedParticipantsTapped;
- (bool)showAllParticipants;
- (id)showPreviewButton;
- (id /* block */)showPreviewOfEventAtTime;
- (id)startDate;
- (id)tappedMoreRecognizer;
- (id)textViewForTextSizeTesting;
- (id)timeTextColor;
- (id)timeZone;
- (id)timeZoneTimeLabel;
- (id)timeZoneTimeLabelHeightConstraint;
- (id)timeZoneTimeLabelToBottomTimeLabelConstraint;
- (id)topTimeLabel;
- (id)topTimeLabelHeightConstraint;
- (id)topTimeLabelToTopContentViewConstraint;
- (void)updateConstraints;
- (bool)updateFontBasedConstraints;
- (bool)updateParticipantsText;
- (bool)updateTimeText;
- (void)updateWithStartDate:(id)arg1 endDate:(id)arg2 timeZone:(id)arg3 busyParticipants:(id)arg4 showAllParticipants:(bool)arg5 checked:(bool)arg6;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
