<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKDayViewContent.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKitUI.framework/EKDayViewContent.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI (1.0)
 */

@interface EKDayViewContent : UIView <CUIKSingleDayTimelineLayoutScreenUtils, EKDayOccurrenceViewDelegate, UIGestureRecognizerDelegate> {
    bool  _allowsOccurrenceSelection;
    NSCalendar * _calendar;
    bool  _darkensWeekends;
    bool  _dataLoaded;
    NSMutableArray * _dayStarts;
    unsigned long long  _daysToDisplay;
    <EKDayViewContentDelegate> * _delegate;
    EKEvent * _dimmedOccurrence;
    EKCalendarDate * _endDate;
    bool  _eventsFillGrid;
    double  _fixedDayWidth;
    EKDayViewContentGeometryDelegate * _geometryDelegate;
    EKDayGridView * _grid;
    bool  _hasCustomOccurrenceMargin;
    bool  _hasCustomOccurrencePadding;
    NSMutableArray * _itemsByDay;
    NSMutableArray * _itemsByDayByEndDate;
    NSMutableArray * _itemsForPreloadByDay;
    NSMutableArray * _itemsForPreloadByDayByEndDate;
    NSMutableArray * _lastLayoutWidthForDay;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _latestVisibleRect;
    bool  _loadingOccurrences;
    int  _occurrenceBackgroundStyle;
    UIColor * _occurrenceLocationColor;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _occurrenceMargin;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _occurrencePadding;
    UIColor * _occurrenceTextBackgroundColor;
    UIColor * _occurrenceTimeColor;
    UIColor * _occurrenceTitleColor;
    bool  _offscreenOccurrencePinningEnabled;
    bool  _putSelectionOnTop;
    bool  _reduceLayoutProcessingForAnimation;
    NSMutableArray * _reusableViews;
    UIView * _saturdayDarkeningView;
    EKEvent * _selectedEvent;
    EKCalendarDate * _startDate;
    UIView * _sundayDarkeningView;
    bool  _usesSmallText;
    double * _visiblePinnedStackHeightAbove;
    double * _visiblePinnedStackHeightBelow;
}

@property (nonatomic) bool allowsOccurrenceSelection;
@property (nonatomic, copy) NSCalendar *calendar;
@property (nonatomic) bool darkensWeekends;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <EKDayViewContentDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) EKEvent *dimmedOccurrence;
@property (nonatomic, readonly) EKCalendarDate *endDate;
@property (nonatomic) bool eventsFillGrid;
@property (nonatomic, readonly) double firstEventSecond;
@property (nonatomic) double fixedDayWidth;
@property (readonly) unsigned long long hash;
@property (nonatomic) int occurrenceBackgroundStyle;
@property (nonatomic, retain) UIColor *occurrenceLocationColor;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } occurrenceMargin;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } occurrencePadding;
@property (nonatomic, retain) UIColor *occurrenceTextBackgroundColor;
@property (nonatomic, retain) UIColor *occurrenceTimeColor;
@property (nonatomic, retain) UIColor *occurrenceTitleColor;
@property (nonatomic) bool offscreenOccurrencePinningEnabled;
@property (nonatomic) bool reduceLayoutProcessingForAnimation;
@property (setter=selectEvent:, nonatomic, retain) EKEvent *selectedEvent;
@property (nonatomic) bool showsLeftBorder;
@property (nonatomic, copy) EKCalendarDate *startDate;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSTimeZone *timeZone;
@property (nonatomic) bool usesSmallText;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })RoundRectToScreenScaleForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)RoundToScreenScale:(double)arg1;
- (double)RoundToScreenScaleForFloat:(double)arg1;
- (void)_adjustViewsForPinning;
- (void)_computeDayStartsAndEnds;
- (void)_configureOccurrenceViewMarginAndPadding:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_dayRangeForEvent:(id)arg1 useProposedTime:(bool)arg2;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_dayRangeForEventWithStartDate:(id)arg1 endDate:(id)arg2;
- (double)_dayWidth;
- (bool)_doOffscreenOccurrences;
- (bool)_getBottomPinRegion:(double*)arg1 dayIndex:(unsigned long long*)arg2 forPoint:(struct CGPoint { double x1; double x2; })arg3;
- (void)_layoutDay:(unsigned long long)arg1 isLoadingAsync:(bool)arg2;
- (void)_layoutDaysIfVisible;
- (void)_tapRecognized:(id)arg1;
- (id)allVisibleItems;
- (bool)allowsOccurrenceSelection;
- (void)applyContentItem:(id)arg1 toView:(id)arg2;
- (void)applyLoadedOccurrenceBatchStartingAtIndex:(long long)arg1 batchSize:(long long)arg2 fromArray:(id)arg3 animated:(bool)arg4 reverse:(bool)arg5 completion:(id /* block */)arg6;
- (void)applyLoadedOccurrencesWithBatching:(bool)arg1 animated:(bool)arg2 reverse:(bool)arg3 completion:(id /* block */)arg4;
- (id)calendar;
- (void)configureOccurrenceViewForGestureController:(id)arg1;
- (bool)darkensWeekends;
- (double)dateForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)dayOccurrenceViewSelected:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 wasTapped:(bool)arg3;
- (id)dayStarts;
- (void)dealloc;
- (id)delegate;
- (id)dimmedOccurrence;
- (id)endDate;
- (bool)eventsFillGrid;
- (bool)eventsIntersectRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)firstEventSecond;
- (double)fixedDayWidth;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (id)grid;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 orientation:(long long)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 orientation:(long long)arg2 backgroundColor:(id)arg3 opaque:(bool)arg4 numberOfDaysToDisplay:(unsigned long long)arg5;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })insetsForInterfaceLayout:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)itemsForPreloadByDay;
- (id)lastDisplayedSecond;
- (void)layoutSubviews;
- (void)loadAndLayoutOccurrences:(id)arg1;
- (void)loadOccurrences:(id)arg1;
- (void)movePreloadedItemsToVisible;
- (int)occurrenceBackgroundStyle;
- (id)occurrenceLocationColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })occurrenceMargin;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })occurrencePadding;
- (id)occurrenceTextBackgroundColor;
- (id)occurrenceTimeColor;
- (id)occurrenceTitleColor;
- (id)occurrenceViewForEvent:(id)arg1;
- (id)occurrenceViewForEvent:(id)arg1 onDate:(double)arg2;
- (id)occurrenceViews;
- (bool)offscreenOccurrencePinningEnabled;
- (struct CGPoint { double x1; double x2; })pointForDate:(double)arg1;
- (void)prepareForReuse;
- (void)rectBecameVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)reduceLayoutProcessingForAnimation;
- (void)selectEvent:(id)arg1;
- (id)selectedEvent;
- (void)setAllowsOccurrenceSelection:(bool)arg1;
- (void)setCalendar:(id)arg1;
- (void)setDarkensWeekends:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDimmedOccurrence:(id)arg1;
- (void)setEventsFillGrid:(bool)arg1;
- (void)setFixedDayWidth:(double)arg1;
- (void)setHoursToPadTop:(double)arg1;
- (void)setNeedsLayout;
- (void)setOccurrenceBackgroundStyle:(int)arg1;
- (void)setOccurrenceLocationColor:(id)arg1;
- (void)setOccurrenceMargin:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setOccurrencePadding:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setOccurrenceTextBackgroundColor:(id)arg1;
- (void)setOccurrenceTimeColor:(id)arg1;
- (void)setOccurrenceTitleColor:(id)arg1;
- (void)setOccurrences:(id)arg1;
- (void)setOffscreenOccurrencePinningEnabled:(bool)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setReduceLayoutProcessingForAnimation:(bool)arg1;
- (void)setShowsLeftBorder:(bool)arg1;
- (void)setStartDate:(id)arg1;
- (void)setStartDateWithDateComponents:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setUsesSmallText:(bool)arg1;
- (void)setViewsDimmed:(bool)arg1 forEvent:(id)arg2;
- (bool)showsLeftBorder;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)startDate;
- (id)timeZone;
- (bool)usesSmallText;
- (id)visibleItemsByDay;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
