<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>EKUIInviteesViewAlternativeTimeSection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/EventKitUI.framework/EKUIInviteesViewAlternativeTimeSection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI (1.0)
 */

@interface EKUIInviteesViewAlternativeTimeSection : NSObject <EKUIInviteesViewConflictResolutionSection> {
    NSArray * _alternativeTimes;
    bool  _availabilityRequestInProgress;
    EKInviteeAlternativeTimeSearcher * _availabilitySearcher;
    NSString * _cachedConflictSearchCellReuseIdentifier;
    NSString * _cachedTimeCellReuseIdentifier;
    bool  _hasCheckedRow;
    bool  _initialSearchInProgress;
    long long  _lastCheckedRow;
    unsigned long long  _maximumNumberOfTimeSlotsToShow;
    id /* block */  _newTimeChosen;
    unsigned long long  _reuseIdentifierVersion;
    NSMutableSet * _rowsShowingAllParticipants;
    bool  _searchExhausted;
    id /* block */  _showMoreAlternativeTimesTapped;
    id /* block */  _showPreviewOfEventAtTime;
    id /* block */  _tableViewCellHook;
    NSTimeZone * _timeZone;
}

@property (nonatomic, retain) NSArray *alternativeTimes;
@property (nonatomic) bool availabilityRequestInProgress;
@property (nonatomic, retain) EKInviteeAlternativeTimeSearcher *availabilitySearcher;
@property (nonatomic, retain) NSString *cachedConflictSearchCellReuseIdentifier;
@property (nonatomic, retain) NSString *cachedTimeCellReuseIdentifier;
@property (nonatomic, readonly) Class customTimeCellClass;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool hasCheckedRow;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) unsigned long long initialNumberOfTimeSlotsToShow;
@property (nonatomic) bool initialSearchInProgress;
@property (nonatomic) long long lastCheckedRow;
@property (nonatomic) unsigned long long maximumNumberOfTimeSlotsToShow;
@property (nonatomic, copy) id /* block */ newTimeChosen;
@property (nonatomic) unsigned long long reuseIdentifierVersion;
@property (nonatomic, retain) NSMutableSet *rowsShowingAllParticipants;
@property (nonatomic) bool searchExhausted;
@property (nonatomic, readonly) NSArray *searcherTimeSlots;
@property (nonatomic, readonly) bool searchingForMoreTimes;
@property (nonatomic, copy) id /* block */ showMoreAlternativeTimesTapped;
@property (nonatomic, copy) id /* block */ showPreviewOfEventAtTime;
@property (readonly) Class superclass;
@property (nonatomic, copy) id /* block */ tableViewCellHook;
@property (nonatomic, retain) NSTimeZone *timeZone;

- (void).cxx_destruct;
- (id)_alternativeTimeAtIndex:(long long)arg1;
- (bool)_isConflictSearchRow:(long long)arg1;
- (bool)_isValidRow:(long long)arg1;
- (unsigned long long)_numberOfTimeSlotsShown;
- (id)alternativeTimes;
- (bool)availabilityRequestInProgress;
- (id)availabilitySearcher;
- (void)availabilitySearcherChangedState:(long long)arg1;
- (id)cachedConflictSearchCellReuseIdentifier;
- (id)cachedTimeCellReuseIdentifier;
- (bool)canEditRow:(id)arg1;
- (bool)canSelectRow:(id)arg1;
- (void)cancelOutstandingOperations;
- (id)cellForIndexPath:(id)arg1 inTableView:(id)arg2;
- (void)clearCheckmark;
- (void)commitEditingStyle:(long long)arg1 forRow:(id)arg2;
- (Class)customTimeCellClass;
- (id)debugTitle;
- (long long)editingStyleForRow:(id)arg1;
- (double)estimatedHeightForRow:(id)arg1;
- (bool)hasCheckedRow;
- (id)headerTitle;
- (id)init;
- (unsigned long long)initialNumberOfTimeSlotsToShow;
- (bool)initialSearchInProgress;
- (bool)injectNewRowsBeforeLastExistingRow;
- (long long)lastCheckedRow;
- (unsigned long long)maximumNumberOfTimeSlotsToShow;
- (id /* block */)newTimeChosen;
- (unsigned long long)numberOfRows;
- (void)refreshCellsAfterStateChange;
- (void)reloadAndRegisterReusableCellsWithTableView:(id)arg1;
- (unsigned long long)reuseIdentifierVersion;
- (id)rowsShowingAllParticipants;
- (bool)searchExhausted;
- (void)searchForMoreTimes;
- (id)searcherTimeSlots;
- (bool)searchingForMoreTimes;
- (bool)sectionShouldBeShown;
- (void)selectRow:(id)arg1;
- (void)setAlternativeTimes:(id)arg1;
- (void)setAvailabilityRequestInProgress:(bool)arg1;
- (void)setAvailabilitySearcher:(id)arg1;
- (void)setCachedConflictSearchCellReuseIdentifier:(id)arg1;
- (void)setCachedTimeCellReuseIdentifier:(id)arg1;
- (void)setHasCheckedRow:(bool)arg1;
- (void)setInitialSearchInProgress:(bool)arg1;
- (void)setLastCheckedRow:(long long)arg1;
- (void)setMaximumNumberOfTimeSlotsToShow:(unsigned long long)arg1;
- (void)setNewTimeChosen:(id /* block */)arg1;
- (void)setReuseIdentifierVersion:(unsigned long long)arg1;
- (void)setRowsShowingAllParticipants:(id)arg1;
- (void)setSearchExhausted:(bool)arg1;
- (void)setShowMoreAlternativeTimesTapped:(id /* block */)arg1;
- (void)setShowPreviewOfEventAtTime:(id /* block */)arg1;
- (void)setTableViewCellHook:(id /* block */)arg1;
- (void)setTimeZone:(id)arg1;
- (id /* block */)showMoreAlternativeTimesTapped;
- (id /* block */)showPreviewOfEventAtTime;
- (id /* block */)tableViewCellHook;
- (id)timeZone;
- (id)titleForDeleteConfirmationButtonForRow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
