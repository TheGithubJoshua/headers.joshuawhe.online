<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CNAvatarView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ContactsUI.framework/CNAvatarView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI (492)
 */

@interface CNAvatarView : UIView <CNAvatarCardControllerDelegate, CNCardTransitioning, CNContactChangesObserver> {
    bool  _allowsAnimation;
    bool  _asynchronousRendering;
    bool  _autoUpdateContact;
    CNAvatarCardController * _cardController;
    CNContactStore * _contactStore;
    UINavigationController * _contactViewNavigationController;
    NSArray * _contacts;
    <CNAvatarViewDelegate> * _delegate;
    bool  _disableCornerRadiusForAvatar;
    long long  _displayedImageState;
    UIView * _forcePressView;
    <CNUILikenessRendering> * _imageRenderer;
    UIImageView * _imageView;
    NSString * _message;
    long long  _monogrammerStyle;
    NSString * _name;
    UIImage * _overrideImage;
    PRPersonaStore * _personaStore;
    bool  _prohibitsPersonaFetch;
    bool  _registeredContactAction;
    bool  _registeredInNotifier;
    <CNCancelable> * _rendererToken;
    <CNSchedulerProvider> * _schedulerProvider;
    bool  _showsActionsOnForcePress;
    bool  _showsActionsOnTap;
    bool  _showsContactOnTap;
    unsigned long long  _style;
    bool  _threeDTouchEnabled;
}

@property (nonatomic, copy) NSArray *actionCategories;
@property (nonatomic) bool allowsAnimation;
@property (nonatomic) bool asynchronousRendering;
@property (nonatomic) bool autoUpdateContact;
@property (nonatomic) bool bypassActionValidation;
@property (nonatomic, retain) CNAvatarCardController *cardController;
@property (nonatomic, retain) CNContact *contact;
@property (nonatomic, readonly) CNContactStore *contactStore;
@property (nonatomic, retain) UINavigationController *contactViewNavigationController;
@property (nonatomic, retain) NSArray *contacts;
@property (nonatomic, readonly) UIImage *contentImage;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentImageFrame;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CNAvatarViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disableCornerRadiusForAvatar;
@property (nonatomic) long long displayedImageState;
@property (nonatomic) UIView *forcePressView;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) <CNUILikenessRendering> *imageRenderer;
@property (nonatomic, copy) UIImageView *imageView;
@property (nonatomic, copy) NSString *message;
@property (nonatomic) long long monogrammerStyle;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, retain) UIImage *overrideImage;
@property (nonatomic, readonly) PRPersonaStore *personaStore;
@property (nonatomic) bool prohibitsPersonaFetch;
@property bool registeredContactAction;
@property bool registeredInNotifier;
@property (nonatomic, retain) <CNCancelable> *rendererToken;
@property (nonatomic, retain) <CNSchedulerProvider> *schedulerProvider;
@property (nonatomic) bool showsActionsOnForcePress;
@property (nonatomic) bool showsActionsOnTap;
@property (nonatomic) bool showsContactOnTap;
@property (nonatomic) unsigned long long style;
@property (readonly) Class superclass;
@property (getter=isThreeDTouchEnabled, nonatomic) bool threeDTouchEnabled;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } transitioningContentFrame;
@property (nonatomic, readonly) UIView *transitioningContentView;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } transitioningFrame;
@property (nonatomic, readonly) UIImage *transitioningImage;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } transitioningImageFrame;
@property bool transitioningImageVisible;
@property (nonatomic, readonly) UIView *transitioningView;

+ (bool)defaultThreeDTouchSupport;
+ (id)descriptorForRequiredKeys;
+ (id)descriptorForRequiredKeysWithThreeDTouchEnabled:(bool)arg1;
+ (id)descriptorForRequiredKeysWithThreeDTouchEnabled:(bool)arg1 shouldUseCachingRenderer:(bool)arg2 description:(id)arg3;
+ (id)makeDescriptorForRequiredKeysWithThreeDTouchEnabled:(bool)arg1 shouldUseCachingRenderer:(bool)arg2;

- (void).cxx_destruct;
- (double)_diameter;
- (void)_renderContactsImage;
- (void)_updateCardActions;
- (void)_updateRegistration;
- (id)actionCategories;
- (bool)allowsAnimation;
- (bool)asynchronousRendering;
- (bool)autoUpdateContact;
- (id)avatarCardController:(id)arg1 orderedPropertiesForProperties:(id)arg2 category:(id)arg3;
- (long long)avatarCardController:(id)arg1 presentationResultForLocation:(struct CGPoint { double x1; double x2; })arg2;
- (bool)avatarCardController:(id)arg1 shouldShowContact:(id)arg2;
- (void)avatarCardControllerDidDismiss:(id)arg1;
- (void)avatarCardControllerWillBeginPreviewInteraction:(id)arg1;
- (void)avatarCardControllerWillDismiss:(id)arg1;
- (bool)bypassActionValidation;
- (id)cardController;
- (void)clearImage;
- (id)contact;
- (void)contactDidChange;
- (void)contactDidChange:(id)arg1;
- (id)contactStore;
- (id)contactViewNavigationController;
- (id)contacts;
- (id)contentImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentImageFrame;
- (id)currentLikenessScope;
- (void)dealloc;
- (id)delegate;
- (id)descriptorForRequiredKeys;
- (void)didMoveToWindow;
- (bool)disableCornerRadiusForAvatar;
- (void)dismissContactViewController:(id)arg1;
- (long long)displayedImageState;
- (bool)enabled;
- (id)forcePressView;
- (id)imageForTransitioningToFullScreen;
- (id)imageRenderer;
- (id)imageView;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithContact:(id)arg1;
- (id)initWithContactStore:(id)arg1 personaStore:(id)arg2 threeDTouchEnabled:(bool)arg3;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithImageRenderer:(id)arg1 threeDTouchEnabled:(bool)arg2;
- (id)initWithImageRenderer:(id)arg1 threeDTouchEnabled:(bool)arg2 style:(unsigned long long)arg3 schedulerProvider:(id)arg4;
- (id)initWithSettings:(id)arg1;
- (bool)isThreeDTouchEnabled;
- (void)layoutSubviews;
- (id)message;
- (long long)monogrammerStyle;
- (id)name;
- (id)overrideImage;
- (id)personaStore;
- (id)presentingViewControllerForAvatarCardController:(id)arg1;
- (bool)prohibitsPersonaFetch;
- (bool)registeredContactAction;
- (bool)registeredInNotifier;
- (id)rendererToken;
- (id)schedulerProvider;
- (void)setActionCategories:(id)arg1;
- (void)setAllowsAnimation:(bool)arg1;
- (void)setAsynchronousRendering:(bool)arg1;
- (void)setAutoUpdateContact:(bool)arg1;
- (void)setBypassActionValidation:(bool)arg1;
- (void)setCardController:(id)arg1;
- (void)setContact:(id)arg1;
- (void)setContactViewNavigationController:(id)arg1;
- (void)setContacts:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableCornerRadiusForAvatar:(bool)arg1;
- (void)setDisplayedImageState:(long long)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setForcePressView:(id)arg1;
- (void)setImage:(id)arg1 state:(long long)arg2;
- (void)setImageRenderer:(id)arg1;
- (void)setImageView:(id)arg1;
- (void)setMessage:(id)arg1;
- (void)setMonogrammerStyle:(long long)arg1;
- (void)setName:(id)arg1;
- (void)setOverrideImage:(id)arg1;
- (void)setProhibitsPersonaFetch:(bool)arg1;
- (void)setRegisteredContactAction:(bool)arg1;
- (void)setRegisteredInNotifier:(bool)arg1;
- (void)setRendererToken:(id)arg1;
- (void)setSchedulerProvider:(id)arg1;
- (void)setShowsActionsOnForcePress:(bool)arg1;
- (void)setShowsActionsOnTap:(bool)arg1;
- (void)setShowsContactOnTap:(bool)arg1;
- (void)setStyle:(unsigned long long)arg1;
- (void)setThreeDTouchEnabled:(bool)arg1;
- (void)setTransitioningImageVisible:(bool)arg1;
- (void)setupAvatarCardControllerIfNeeded;
- (void)showContact:(id)arg1;
- (bool)showsActionsOnForcePress;
- (bool)showsActionsOnTap;
- (bool)showsContactOnTap;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (unsigned long long)style;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitioningContentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitioningFrame;
- (id)transitioningImage;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })transitioningImageFrame;
- (bool)transitioningImageVisible;
- (id)transitioningView;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
