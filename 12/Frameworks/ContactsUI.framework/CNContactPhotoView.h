<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CNContactPhotoView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ContactsUI.framework/CNContactPhotoView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI (492)
 */

@interface CNContactPhotoView : UIControl <CNAvatarViewDelegate, QLPreviewControllerDataSource, QLPreviewControllerDelegate, UIDropInteractionDelegate, UIImagePickerControllerDelegate, UINavigationControllerDelegate> {
    bool  _acceptsImageDrop;
    UIButton * _addPhotoButton;
    UIImageView * _attributionImageView;
    CNAvatarView * _avatarView;
    NSArray * _contacts;
    PRLikeness * _currentLikeness;
    <CNContactPhotoViewDelegate> * _delegate;
    UIDropInteraction * _dropInteraction;
    UIButton * _editPhotoButton;
    bool  _editing;
    bool  _isAnimatingBounce;
    UILongPressGestureRecognizer * _longPressGestureRecognizer;
    bool  _modified;
    PRLikeness * _originalLikeness;
    CNMutableContact * _pendingEditContact;
    <CNPresenterDelegate> * _presenterDelegate;
    bool  _prohibitsPersonaFetch;
    bool  _shouldAllowTakePhotoAction;
    UITapGestureRecognizer * _tapGestureRecognizer;
    NSArray * _variableConstraints;
}

@property (nonatomic) bool acceptsImageDrop;
@property (nonatomic, retain) UIButton *addPhotoButton;
@property (nonatomic, retain) UIImageView *attributionImageView;
@property (nonatomic, retain) CNAvatarView *avatarView;
@property (nonatomic, retain) NSArray *contacts;
@property (nonatomic, retain) PRLikeness *currentLikeness;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CNContactPhotoViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIDropInteraction *dropInteraction;
@property (nonatomic, retain) UIButton *editPhotoButton;
@property (getter=isEditing, nonatomic) bool editing;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isAnimatingBounce;
@property (nonatomic, retain) UILongPressGestureRecognizer *longPressGestureRecognizer;
@property (nonatomic) bool modified;
@property (nonatomic, readonly) CNMutableContact *mutableContact;
@property (nonatomic, retain) PRLikeness *originalLikeness;
@property (nonatomic, retain) CNMutableContact *pendingEditContact;
@property (nonatomic) <CNPresenterDelegate> *presenterDelegate;
@property (nonatomic) bool prohibitsPersonaFetch;
@property (nonatomic, readonly) bool shouldAllowTakePhotoAction;
@property (readonly) Class superclass;
@property (nonatomic, retain) UITapGestureRecognizer *tapGestureRecognizer;
@property (nonatomic, retain) NSArray *variableConstraints;

+ (struct CGSize { double x1; double x2; })defaultSize;
+ (bool)requiresConstraintBasedLayout;
+ (id)supportedPasteboardTypes;

- (void).cxx_destruct;
- (id)_api_dropInteraction:(id)arg1 sessionDidUpdate:(id)arg2;
- (void)_bounceSmallPhoto;
- (id)_createImagePicker;
- (id)_createImagePickerForEditingImageData:(id)arg1 withCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)_isUsingCuratedPhoto;
- (id)_localizedStringForProfileAction:(id)arg1 type:(unsigned long long)arg2;
- (void)_presentFullScreenPhoto:(id)arg1;
- (void)_presentPhotoEditingSheet;
- (void)_zoomContactPhoto;
- (bool)acceptsImageDrop;
- (id)addPhotoButton;
- (id)attributionImageView;
- (void)avatarTapped:(id)arg1;
- (id)avatarView;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)contact;
- (id)contacts;
- (void)copy:(id)arg1;
- (id)currentImageData;
- (id)currentImageDataAndCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (id)currentLikeness;
- (void)dealloc;
- (id)delegate;
- (void)disablePhotoTapGesture;
- (id)dropInteraction;
- (bool)dropInteraction:(id)arg1 canHandleSession:(id)arg2;
- (void)dropInteraction:(id)arg1 performDrop:(id)arg2;
- (id)editPhotoButton;
- (bool)hasPhoto;
- (void)imagePickerController:(id)arg1 didFinishPickingMediaWithInfo:(id)arg2;
- (void)imagePickerControllerDidCancel:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 monogrammerStyle:(long long)arg2 shouldAllowTakePhotoAction:(bool)arg3 threeDTouchEnabled:(bool)arg4 allowsImageDrops:(bool)arg5 imageRenderer:(id)arg6;
- (bool)isAnimatingBounce;
- (bool)isEditing;
- (bool)isMeContact;
- (void)longPressGesture:(id)arg1;
- (id)longPressGestureRecognizer;
- (void)menuWillHide:(id)arg1;
- (bool)modified;
- (id)mutableContact;
- (long long)numberOfPreviewItemsInPreviewController:(id)arg1;
- (id)originalLikeness;
- (void)paste:(id)arg1;
- (id)pendingEditContact;
- (void)presentImagePicker:(id)arg1 withStyle:(long long)arg2;
- (id)presenterDelegate;
- (id)presentingViewControllerForAvatarView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })previewController:(id)arg1 frameForPreviewItem:(id)arg2 inSourceView:(id*)arg3;
- (id)previewController:(id)arg1 previewItemAtIndex:(long long)arg2;
- (id)previewController:(id)arg1 transitionImageForPreviewItem:(id)arg2 contentRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3;
- (id)previewController:(id)arg1 transitionViewForPreviewItem:(id)arg2;
- (void)previewControllerDidDismiss:(id)arg1;
- (id)previewPath;
- (bool)prohibitsPersonaFetch;
- (void)resetPhoto;
- (void)saveEdits;
- (void)saveEditsWithPendingContact:(id)arg1;
- (void)saveImagePickerMediaFromInfo:(id)arg1 toContact:(id)arg2 saveToCameraRoll:(bool)arg3;
- (void)setAcceptsImageDrop:(bool)arg1;
- (void)setAddPhotoButton:(id)arg1;
- (void)setAttributionImageView:(id)arg1;
- (void)setAvatarView:(id)arg1;
- (void)setContacts:(id)arg1;
- (void)setCurrentLikeness:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDropInteraction:(id)arg1;
- (void)setEditPhotoButton:(id)arg1;
- (void)setEditing:(bool)arg1;
- (void)setHighlightedFrame:(bool)arg1;
- (void)setIsAnimatingBounce:(bool)arg1;
- (void)setLongPressGestureRecognizer:(id)arg1;
- (void)setModified:(bool)arg1;
- (void)setOriginalLikeness:(id)arg1;
- (void)setPendingEditContact:(id)arg1;
- (void)setPresenterDelegate:(id)arg1;
- (void)setProhibitsPersonaFetch:(bool)arg1;
- (void)setTapGestureRecognizer:(id)arg1;
- (void)setVariableConstraints:(id)arg1;
- (bool)shouldAllowTakePhotoAction;
- (id)tapGestureRecognizer;
- (void)updateAttributionBadge;
- (void)updateConstraints;
- (void)updateFontSizes;
- (void)updatePhoto;
- (void)updatePhotoAndNotifyDelegate:(bool)arg1;
- (id)variableConstraints;
- (void)willBeginPreviewInteractionForAvatarView:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
