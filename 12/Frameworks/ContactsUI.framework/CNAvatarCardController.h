<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CNAvatarCardController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ContactsUI.framework/CNAvatarCardController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ContactsUI.framework/ContactsUI (492)
 */

@interface CNAvatarCardController : NSObject <CNAvatarCardControllerOrbTransitionDelegate, CNAvatarCardViewControllerDelegate, UIPreviewInteractionDelegatePrivate> {
    NSArray * _actionCategories;
    bool  _actionsNeedRefresh;
    UIAlertController * _alertController;
    CNAvatarView * _avatarView;
    bool  _bypassActionValidation;
    NSArray * _cardControllerConstraints;
    CNAvatarCardViewController * _cardViewController;
    NSArray * _contacts;
    <CNAvatarCardControllerDelegate> * _delegate;
    CNContactOrbHeaderView * _headerView;
    UIView * _highlightView;
    long long  _presentationResult;
    UIPreviewInteraction * _previewInteraction;
    UIGestureRecognizer * _rolloverGestureRecognizer;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sourceRect;
    UIView * _sourceView;
    UITapGestureRecognizer * _tapGestureRecognizer;
    bool  _visible;
}

@property (nonatomic, copy) NSArray *actionCategories;
@property (nonatomic) bool actionsNeedRefresh;
@property (nonatomic, retain) UIAlertController *alertController;
@property (nonatomic) CNAvatarView *avatarView;
@property (nonatomic) bool bypassActionValidation;
@property (nonatomic, retain) NSArray *cardControllerConstraints;
@property (nonatomic, retain) CNAvatarCardViewController *cardViewController;
@property (nonatomic, retain) CNContact *contact;
@property (nonatomic, retain) NSArray *contacts;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CNAvatarCardControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) CNContactOrbHeaderView *headerView;
@property (nonatomic, retain) UIView *highlightView;
@property (nonatomic, copy) NSString *message;
@property (nonatomic, copy) NSString *name;
@property (nonatomic) long long presentationResult;
@property (nonatomic, readonly) UIViewController *presentingViewController;
@property (nonatomic, retain) UIPreviewInteraction *previewInteraction;
@property (nonatomic, retain) UIGestureRecognizer *rolloverGestureRecognizer;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } sourceRect;
@property (nonatomic, retain) UIView *sourceView;
@property (readonly) Class superclass;
@property (nonatomic, retain) UITapGestureRecognizer *tapGestureRecognizer;
@property (getter=isVisible, nonatomic, readonly) bool visible;

+ (bool)avatarCardEnabled;
+ (id)descriptorForRequiredKeys;
+ (id)descriptorForRequiredKeysIncludingAvatarViewDescriptors:(bool)arg1;
+ (bool)showsWithTapAndHold;

- (void).cxx_destruct;
- (id)_previewInteraction:(id)arg1 viewControllerPresentationForPresentingViewController:(id)arg2;
- (id)_previewInteractionHighlighterForPreviewTransition:(id)arg1;
- (bool)_previewInteractionShouldFinishTransitionToPreview:(id)arg1;
- (void)_setupAlertController;
- (void)_setupCardViewControllerWithContacts:(id)arg1;
- (void)_setupForCardControllerPresentation;
- (void)_updateCard;
- (void)_updateHeaderViewFrame;
- (id)actionCategories;
- (bool)actionsNeedRefresh;
- (id)alertController;
- (id)avatarView;
- (bool)bypassActionValidation;
- (id)cardControllerConstraints;
- (id)cardViewController;
- (id)cardViewController:(id)arg1 orderedPropertiesForProperties:(id)arg2 category:(id)arg3;
- (void)cardViewControllerDidDismiss:(id)arg1;
- (void)cardViewControllerWillDismiss:(id)arg1;
- (void)configurePreviewInteraction;
- (id)contact;
- (id)contacts;
- (id)delegate;
- (void)dismissAnimated:(bool)arg1;
- (void)dismissAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (id)headerView;
- (id)highlightView;
- (bool)isVisible;
- (id)message;
- (id)name;
- (void)orbTransitionDidEndTransition:(id)arg1;
- (void)orbTransitionDidPrepareTransition:(id)arg1 withContainerView:(id)arg2;
- (id)preparedViewControllerForPresentationWithGestureRecognizer:(id)arg1;
- (void)presentAnimated:(bool)arg1;
- (void)presentAnimated:(bool)arg1 completionHandler:(id /* block */)arg2;
- (long long)presentationResult;
- (id)presentingViewController;
- (id)previewInteraction;
- (void)previewInteraction:(id)arg1 didUpdatePreviewTransition:(double)arg2 ended:(bool)arg3;
- (void)previewInteractionDidCancel:(id)arg1;
- (bool)previewInteractionShouldBegin:(id)arg1;
- (id)rolloverGestureRecognizer;
- (void)setActionCategories:(id)arg1;
- (void)setActionsNeedRefresh:(bool)arg1;
- (void)setAlertController:(id)arg1;
- (void)setAvatarView:(id)arg1;
- (void)setBypassActionValidation:(bool)arg1;
- (void)setCardControllerConstraints:(id)arg1;
- (void)setCardViewController:(id)arg1;
- (void)setContact:(id)arg1;
- (void)setContacts:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHeaderView:(id)arg1;
- (void)setHighlightView:(id)arg1;
- (void)setMessage:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPresentationResult:(long long)arg1;
- (void)setPreviewInteraction:(id)arg1;
- (void)setRolloverGestureRecognizer:(id)arg1;
- (void)setSourceRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setSourceView:(id)arg1;
- (void)setTapGestureRecognizer:(id)arg1;
- (void)showContact;
- (void)showContact:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sourceRect;
- (id)sourceView;
- (id)tapGestureRecognizer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
