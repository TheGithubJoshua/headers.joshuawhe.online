<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>LAContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/LocalAuthentication.framework/LAContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/LocalAuthentication.framework/LocalAuthentication (425.270.3)
 */

@interface LAContext : NSObject {
    long long  _biometryType;
    bool  _cancelButtonVisible;
    LAClient * _client;
    NSData * _evaluatedPolicyDomainState;
    NSData * _externalizedContext;
    bool  _fallbackButtonVisible;
    NSNumber * _maxBiometryFailures;
    <LAPrearmContextXPC> * _prearmContext;
}

@property (nonatomic) long long biometryType;
@property (getter=isCancelButtonVisible, nonatomic) bool cancelButtonVisible;
@property (nonatomic, retain) NSData *evaluatedPolicyDomainState;
@property (nonatomic, retain) NSData *externalizedContext;
@property (getter=isFallbackButtonVisible, nonatomic) bool fallbackButtonVisible;
@property (nonatomic) bool interactionNotAllowed;
@property (nonatomic, copy) NSString *localizedCancelTitle;
@property (nonatomic, copy) NSString *localizedFallbackTitle;
@property (nonatomic, copy) NSString *localizedReason;
@property (nonatomic, retain) NSNumber *maxBiometryFailures;
@property (nonatomic) double touchIDAuthenticationAllowableReuseDuration;
@property (nonatomic, retain) NSNumber *touchIDAuthenticationRetryLimit;
@property (nonatomic) <LAUIDelegate> *uiDelegate;

+ (id)currentContext;
+ (void)notifyEvent:(long long)arg1;

- (void).cxx_destruct;
- (void)_evaluateAccessControl:(struct __SecAccessControl { }*)arg1 operation:(id)arg2 options:(id)arg3 reply:(id /* block */)arg4;
- (id)_evaluationMechanismsFromReturnedError:(id)arg1 error:(id*)arg2;
- (id)_hashWithBundleIdentifier:(id)arg1;
- (id)_publicErrorFromInternalError:(id)arg1 options:(id)arg2;
- (id)_serverPropertyValueForOption:(long long)arg1;
- (void)_setServerPropertyForOption:(long long)arg1 value:(id)arg2;
- (void)authMethodWithReply:(id /* block */)arg1;
- (long long)biometryType;
- (bool)canEvaluatePolicy:(long long)arg1 error:(id*)arg2;
- (void)dealloc;
- (void)enterPassword:(id)arg1 reply:(id /* block */)arg2;
- (void)evaluateAccessControl:(struct __SecAccessControl { }*)arg1 aksOperation:(void*)arg2 options:(id)arg3 reply:(id /* block */)arg4;
- (void)evaluateAccessControl:(struct __SecAccessControl { }*)arg1 operation:(long long)arg2 localizedReason:(id)arg3 reply:(id /* block */)arg4;
- (id)evaluateAccessControl:(struct __SecAccessControl { }*)arg1 operation:(long long)arg2 options:(id)arg3 error:(id*)arg4;
- (void)evaluateAccessControl:(struct __SecAccessControl { }*)arg1 operation:(long long)arg2 options:(id)arg3 reply:(id /* block */)arg4;
- (void)evaluatePolicy:(long long)arg1 localizedReason:(id)arg2 reply:(id /* block */)arg3;
- (id)evaluatePolicy:(long long)arg1 options:(id)arg2 error:(id*)arg3;
- (void)evaluatePolicy:(long long)arg1 options:(id)arg2 reply:(id /* block */)arg3;
- (id)evaluatedPolicyDomainState;
- (id)evaluationMechanismsForAccessControl:(struct __SecAccessControl { }*)arg1 operation:(long long)arg2 error:(id*)arg3;
- (id)evaluationMechanismsForPolicy:(long long)arg1 error:(id*)arg2;
- (id)externalizedContext;
- (void)failProcessedEvent:(long long)arg1 failureError:(id)arg2 reply:(id /* block */)arg3;
- (unsigned long long)hash;
- (id)init;
- (id)initWithExternalizedContext:(id)arg1;
- (id)initWithExternalizedContext:(id)arg1 uiDelegate:(id)arg2;
- (id)initWithUIDelegate:(id)arg1;
- (bool)interactionNotAllowed;
- (void)invalidate;
- (bool)isCancelButtonVisible;
- (bool)isCredentialSet:(long long)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isFallbackButtonVisible;
- (id)localizedCancelTitle;
- (id)localizedFallbackTitle;
- (id)localizedReason;
- (id)maxBiometryFailures;
- (id)optionAuthenticationReason;
- (id)optionAuthenticationTitle;
- (id)optionBiometryLockoutRecovery;
- (id)optionCallerAuditToken;
- (id)optionCallerName;
- (id)optionCallerPID;
- (id)optionCancelVisible;
- (id)optionFaceDetectLength;
- (id)optionFallbackVisible;
- (id)optionFingerMustBeOff;
- (id)optionMaxBiometryFailures;
- (id)optionNoFailureUI;
- (id)optionNotInteractive;
- (id)optionPINFirst;
- (id)optionPINLength;
- (id)optionPINTitle;
- (id)optionPasscodeScreenBlur;
- (id)optionPasscodeScreenStyle;
- (id)optionPasscodeTitle;
- (id)optionPasswordAuthenticationReason;
- (id)optionPhysicalButtonTitle;
- (id)optionPresentationStyle;
- (id)optionReturnBiometryDatabaseHash;
- (id)optionSharedValidity;
- (id)optionSoftwareUpdateManifest;
- (id)optionSoftwareUpdateStashMode;
- (id)optionTimeout;
- (id)optionTintColor;
- (id)optionTransitionStyle;
- (id)optionUserCancel;
- (id)optionUserFallback;
- (void)prearmTouchIDWithReply:(id /* block */)arg1;
- (void)resetProcessedEvent:(long long)arg1 reply:(id /* block */)arg2;
- (void)resetWithReply:(id /* block */)arg1;
- (void)retryProcessedEvent:(long long)arg1 reply:(id /* block */)arg2;
- (void)setBiometryType:(long long)arg1;
- (void)setCancelButtonVisible:(bool)arg1;
- (void)setCredential:(id)arg1 forProcessedEvent:(long long)arg2 credentialType:(long long)arg3 reply:(id /* block */)arg4;
- (bool)setCredential:(id)arg1 type:(long long)arg2;
- (bool)setCredential:(id)arg1 type:(long long)arg2 error:(id*)arg3;
- (void)setCredential:(id)arg1 type:(long long)arg2 reply:(id /* block */)arg3;
- (void)setEvaluatedPolicyDomainState:(id)arg1;
- (void)setExternalizedContext:(id)arg1;
- (void)setFallbackButtonVisible:(bool)arg1;
- (void)setInteractionNotAllowed:(bool)arg1;
- (void)setLocalizedCancelTitle:(id)arg1;
- (void)setLocalizedFallbackTitle:(id)arg1;
- (void)setLocalizedReason:(id)arg1;
- (void)setMaxBiometryFailures:(id)arg1;
- (void)setOptionAuthenticationReason:(id)arg1;
- (void)setOptionAuthenticationTitle:(id)arg1;
- (void)setOptionBiometryLockoutRecovery:(id)arg1;
- (void)setOptionCallerAuditToken:(id)arg1;
- (void)setOptionCallerName:(id)arg1;
- (void)setOptionCallerPID:(id)arg1;
- (void)setOptionCancelVisible:(id)arg1;
- (void)setOptionFaceDetectLength:(id)arg1;
- (void)setOptionFallbackVisible:(id)arg1;
- (void)setOptionFingerMustBeOff:(id)arg1;
- (void)setOptionMaxBiometryFailures:(id)arg1;
- (void)setOptionNoFailureUI:(id)arg1;
- (void)setOptionNotInteractive:(id)arg1;
- (void)setOptionPINFirst:(id)arg1;
- (void)setOptionPINLength:(id)arg1;
- (void)setOptionPINTitle:(id)arg1;
- (void)setOptionPasscodeScreenBlur:(id)arg1;
- (void)setOptionPasscodeScreenStyle:(id)arg1;
- (void)setOptionPasscodeTitle:(id)arg1;
- (void)setOptionPasswordAuthenticationReason:(id)arg1;
- (void)setOptionPhysicalButtonTitle:(id)arg1;
- (void)setOptionPresentationStyle:(id)arg1;
- (void)setOptionReturnBiometryDatabaseHash:(id)arg1;
- (void)setOptionSharedValidity:(id)arg1;
- (void)setOptionSoftwareUpdateManifest:(id)arg1;
- (void)setOptionSoftwareUpdateStashMode:(id)arg1;
- (void)setOptionTimeout:(id)arg1;
- (void)setOptionTintColor:(id)arg1;
- (void)setOptionTransitionStyle:(id)arg1;
- (void)setOptionUserCancel:(id)arg1;
- (void)setOptionUserFallback:(id)arg1;
- (void)setShowingCoachingHint:(bool)arg1 event:(long long)arg2 reply:(id /* block */)arg3;
- (void)setTouchIDAuthenticationAllowableReuseDuration:(double)arg1;
- (void)setTouchIDAuthenticationRetryLimit:(id)arg1;
- (void)setUiDelegate:(id)arg1;
- (double)touchIDAuthenticationAllowableReuseDuration;
- (id)touchIDAuthenticationRetryLimit;
- (id)uiDelegate;
- (void)withCurrentContextExecute:(id /* block */)arg1 queue:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
