<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVContentKeySession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVContentKeySession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVContentKeySession : NSObject {
    AVContentKeySessionInternal * _session;
}

@property (readonly) NSData *contentProtectionSessionIdentifier;
@property (readonly) <AVContentKeySessionDelegate> *delegate;
@property (readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (getter=isInternal, nonatomic, readonly) bool internal;
@property (readonly) NSString *keySystem;
@property (readonly) NSURL *storageURL;

+ (id)_uniqueIDForCyptorUUID:(id)arg1 cryptorKeyRequestID:(unsigned long long)arg2;
+ (id)contentKeySessionWithKeySystem:(id)arg1;
+ (id)contentKeySessionWithKeySystem:(id)arg1 storageDirectoryAtURL:(id)arg2;
+ (struct OpaqueFigSecureStopManager { }*)copyDefaultSecureStopManagerForAppIdentifier:(id)arg1 storageDirectoryAtURL:(id)arg2;
+ (void)initialize;
+ (id)pendingExpiredSessionReportsWithAppIdentifier:(id)arg1 storageDirectoryAtURL:(id)arg2;
+ (void)removePendingExpiredSessionReports:(id)arg1 withAppIdentifier:(id)arg2 storageDirectoryAtURL:(id)arg3;

- (id)_contentKeyRequestForCryptorUUID:(id)arg1 cryptorKeyRequestID:(unsigned long long)arg2;
- (const struct OpaqueFigContentKeySession { }*)_figContentKeySession;
- (void)_handleKeyResponseError:(id)arg1 forCryptorUUID:(id)arg2 andCryptorKeyRequestID:(unsigned long long)arg3;
- (void)_handleKeyResponseSuccessfullyProcessedForCryptorUUID:(id)arg1 andCryptorKeyRequestID:(unsigned long long)arg2;
- (void)_handleRequest:(struct __CFDictionary { }*)arg1 withRequestID:(unsigned long long)arg2 fromHandler:(struct OpaqueFigCustomURLHandler { }*)arg3 willHandleRequest:(bool*)arg4;
- (void)_handleSecureStopDidFinalizeRecordCallback;
- (void)_handleUpdateToPersistentKey:(id)arg1 forKeyIdentifier:(id)arg2;
- (id)_internalQueue;
- (void)_invokeDelegateCallbackWithBlock:(id /* block */)arg1 synchronouslyWhenDelegateQueueIsNULL:(bool)arg2;
- (void)_removeContentKeyRequestForCryptorUUID:(id)arg1 cryptorKeyRequestID:(unsigned long long)arg2;
- (void)_sendFinishLoadingForPreloadedKeyRequest:(struct __CFDictionary { }*)arg1 withRequestID:(unsigned long long)arg2 fromHandler:(struct OpaqueFigCustomURLHandler { }*)arg3;
- (void)_setContentKeyRequest:(id)arg1 forCryptorUUID:(id)arg2 cryptorKeyRequestID:(unsigned long long)arg3;
- (id)_weakReference;
- (void)_willDeallocOrFinalize;
- (void)addContentKeyRecipient:(id)arg1;
- (bool)clientCanReceivePersistableContentKeyRequest;
- (id)contentKeyRecipients;
- (id)contentProtectionSessionIdentifier;
- (const struct OpaqueFigCPECryptor { }*)copyDecryptorForIdentifier:(id)arg1 initializationData:(id)arg2;
- (int)createAndInstallCustomURLHandlerForAsset:(id)arg1 outHandler:(struct OpaqueFigCustomURLHandler {}**)arg2;
- (id)createCryptorOptionsForIdentifier:(id)arg1 initializationData:(id)arg2 formatDescription:(struct opaqueCMFormatDescription { }*)arg3 hlsMethod:(id)arg4;
- (const struct OpaqueFigCPECryptor { }*)createDecryptorIfNecessaryForIdentifier:(id)arg1 initializationData:(id)arg2 formatDescription:(struct opaqueCMFormatDescription { }*)arg3 hlsMethod:(id)arg4 error:(id*)arg5;
- (void)createProtectorSessionIdentifierIfNecessary;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (void)expire;
- (void)finalize;
- (bool)hasProtector;
- (id)init;
- (id)initWithKeySystem:(id)arg1 storageDirectoryAtURL:(id)arg2;
- (id)initWithKeySystem:(id)arg1 storageDirectoryAtURL:(id)arg2 internal:(bool)arg3;
- (id)initWithStorageDirectoryAtURL:(id)arg1;
- (void)invalidateAllPersistableContentKeysForApp:(id)arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (void)invalidatePersistableContentKey:(id)arg1 options:(id)arg2 completionHandler:(id /* block */)arg3;
- (bool)isInternal;
- (void)issueContentKeyRequest:(id)arg1 forKeyRenewal:(bool)arg2;
- (id)issueContentKeyRequestForInitializationData:(id)arg1;
- (void)issueContentKeyRequestWithCustomURLHandler:(struct OpaqueFigCustomURLHandler { }*)arg1 identifier:(id)arg2 requestInfo:(struct __CFDictionary { }*)arg3 requestID:(unsigned long long)arg4 providesPersistableKey:(bool)arg5;
- (void)issueContentKeyRequestWithCustomURLProviderContext:(id)arg1 identifier:(id)arg2 initializationData:(id)arg3 providesPersistableKey:(bool)arg4;
- (void)issueContentKeyRequestWithPreloadingRequestOptions:(id)arg1 identifier:(id)arg2 initializationData:(id)arg3 providesPersistableKey:(bool)arg4;
- (id)keySystem;
- (void)makeSecureTokenForExpirationDateOfPersistableContentKey:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)processContentKeyRequestWithIdentifier:(id)arg1 initializationData:(id)arg2 options:(id)arg3;
- (void)removeContentKeyRecipient:(id)arg1;
- (void)renewExpiringResponseDataForContentKeyRequest:(id)arg1;
- (int)setAppIdentifier:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (id)storageURL;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
