<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVAssetWriterInputConfigurationState.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVAssetWriterInputConfigurationState.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVAssetWriterInputConfigurationState : NSObject {
    short  _alternateGroupID;
    long long  _chunkAlignment;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _chunkDuration;
    long long  _chunkSize;
    bool  _expectsMediaDataInRealTime;
    NSString * _extendedLanguageTag;
    NSString * _languageCode;
    long long  _layer;
    bool  _marksOutputTrackAsEnabled;
    bool  _maximizePowerEfficiency;
    NSString * _mediaDataLocation;
    int  _mediaTimeScale;
    NSString * _mediaType;
    NSArray * _metadataItems;
    struct CGSize { 
        double width; 
        double height; 
    }  _naturalSize;
    AVOutputSettings * _outputSettings;
    bool  _performsMultiPassEncodingIfSupported;
    float  _preferredVolume;
    short  _provisionalAlternateGroupID;
    NSURL * _sampleReferenceBaseURL;
    struct opaqueCMFormatDescription { } * _sourceFormatHint;
    NSDictionary * _sourcePixelBufferAttributes;
    int  _trackID;
    NSDictionary * _trackReferences;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    }  _transform;
}

@property (nonatomic) short alternateGroupID;
@property (nonatomic) bool expectsMediaDataInRealTime;
@property (nonatomic, copy) NSString *extendedLanguageTag;
@property (nonatomic, copy) NSString *languageCode;
@property (nonatomic) long long layer;
@property (nonatomic) bool marksOutputTrackAsEnabled;
@property (nonatomic) bool maximizePowerEfficiency;
@property (nonatomic, copy) NSString *mediaDataLocation;
@property (nonatomic) int mediaTimeScale;
@property (nonatomic, copy) NSString *mediaType;
@property (nonatomic, copy) NSArray *metadataItems;
@property (nonatomic) struct CGSize { double x1; double x2; } naturalSize;
@property (nonatomic, copy) AVOutputSettings *outputSettings;
@property (nonatomic) bool performsMultiPassEncodingIfSupported;
@property (nonatomic) long long preferredMediaChunkAlignment;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } preferredMediaChunkDuration;
@property (nonatomic) long long preferredMediaChunkSize;
@property (nonatomic) float preferredVolume;
@property (nonatomic) short provisionalAlternateGroupID;
@property (nonatomic, copy) NSURL *sampleReferenceBaseURL;
@property (nonatomic, retain) struct opaqueCMFormatDescription { }*sourceFormatHint;
@property (nonatomic, copy) NSDictionary *sourcePixelBufferAttributes;
@property (nonatomic) int trackID;
@property (nonatomic, copy) NSDictionary *trackReferences;
@property (nonatomic) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transform;

- (short)alternateGroupID;
- (void)dealloc;
- (bool)expectsMediaDataInRealTime;
- (id)extendedLanguageTag;
- (id)languageCode;
- (long long)layer;
- (bool)marksOutputTrackAsEnabled;
- (bool)maximizePowerEfficiency;
- (id)mediaDataLocation;
- (int)mediaTimeScale;
- (id)mediaType;
- (id)metadataItems;
- (struct CGSize { double x1; double x2; })naturalSize;
- (id)outputSettings;
- (bool)performsMultiPassEncodingIfSupported;
- (long long)preferredMediaChunkAlignment;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })preferredMediaChunkDuration;
- (long long)preferredMediaChunkSize;
- (float)preferredVolume;
- (short)provisionalAlternateGroupID;
- (id)sampleReferenceBaseURL;
- (void)setAlternateGroupID:(short)arg1;
- (void)setExpectsMediaDataInRealTime:(bool)arg1;
- (void)setExtendedLanguageTag:(id)arg1;
- (void)setLanguageCode:(id)arg1;
- (void)setLayer:(long long)arg1;
- (void)setMarksOutputTrackAsEnabled:(bool)arg1;
- (void)setMaximizePowerEfficiency:(bool)arg1;
- (void)setMediaDataLocation:(id)arg1;
- (void)setMediaTimeScale:(int)arg1;
- (void)setMediaType:(id)arg1;
- (void)setMetadataItems:(id)arg1;
- (void)setNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setOutputSettings:(id)arg1;
- (void)setPerformsMultiPassEncodingIfSupported:(bool)arg1;
- (void)setPreferredMediaChunkAlignment:(long long)arg1;
- (void)setPreferredMediaChunkDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPreferredMediaChunkSize:(long long)arg1;
- (void)setPreferredVolume:(float)arg1;
- (void)setProvisionalAlternateGroupID:(short)arg1;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (void)setSourceFormatHint:(struct opaqueCMFormatDescription { }*)arg1;
- (void)setSourcePixelBufferAttributes:(id)arg1;
- (void)setTrackID:(int)arg1;
- (void)setTrackReferences:(id)arg1;
- (void)setTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (struct opaqueCMFormatDescription { }*)sourceFormatHint;
- (id)sourcePixelBufferAttributes;
- (int)trackID;
- (id)trackReferences;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
