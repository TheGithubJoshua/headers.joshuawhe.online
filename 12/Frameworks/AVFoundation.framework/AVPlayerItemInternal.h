<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVPlayerItemInternal.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVPlayerItemInternal.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVPlayerItemInternal : NSObject {
    <NSObject><NSCopying> * AVKitData;
    struct CGSize { 
        double width; 
        double height; 
    }  IFramePrefetchTargetDimensions;
    unsigned int  RTCReportingFlags;
    NSURL * URL;
    bool  aggressivelyCachesVideoFrames;
    bool  aggressivelyCachesVideoFramesWasSet;
    bool  allowProgressiveResume;
    bool  allowProgressiveStartup;
    bool  allowProgressiveSwitchUp;
    AVAsset * asset;
    AVAsset * assetWithFigPlaybackItem;
    NSDictionary * audibleDRMInfo;
    AVAudioMix * audioMix;
    NSArray * automaticallyLoadedAssetKeys;
    bool  blendsVideoFrames;
    bool  blendsVideoFramesWasSet;
    NSArray * cachedTracks;
    bool  canPlayFastForward;
    bool  canPlayFastReverse;
    bool  canPlayReverse;
    bool  canPlaySlowForward;
    bool  canPlaySlowReverse;
    bool  canStepBackward;
    bool  canStepForward;
    bool  canUseNetworkResourcesForLiveStreamingWhilePaused;
    AVWeakReference * clientsOriginalVideoComposition;
    AVCustomVideoCompositorSession * customVideoCompositorSession;
    bool  decodesAllFramesDuringOrdinaryPlayback;
    bool  decodesAllFramesDuringOrdinaryPlaybackWasSet;
    <AVPlayerItemDelegate> * delegate;
    bool  didBecomeReadyForBasicInspection;
    bool  didBecomeReadyForInspectionOfDuration;
    bool  didBecomeReadyForInspectionOfMediaSelectionOptions;
    bool  didBecomeReadyForInspectionOfPresentationSize;
    bool  didBecomeReadyForInspectionOfTracks;
    bool  didFireKVOForAssetForNonStreamingItem;
    bool  didInformObserversAboutAvailabilityOfTracks;
    bool  didSetAssetToAssetWithFigPlaybackItem;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  duration;
    int  eqPreset;
    NSError * error;
    bool  externalProtectionRequested;
    struct OpaqueFigCPEProtector { } * figCPEProtector;
    NSObject<OS_dispatch_queue> * figConfigurationQueue;
    struct OpaqueFigPlaybackItem { } * figPlaybackItem;
    NSObject<OS_dispatch_queue> * figPlaybackItemAccessorQueue;
    struct OpaqueCMTimebase { } * figTimebase;
    void * figVideoCompositor;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  forwardPlaybackEndTime;
    NSDictionary * gaplessInfo;
    NSMutableArray * handlersToCallWhenReadyForEnqueueing;
    bool  hasEnabledAudio;
    bool  hasEnabledVideo;
    bool  hasEnqueuedVideoFrame;
    bool  hasVideo;
    bool  haveCPEProtector;
    bool  haveInitialSamples;
    NSArray * imageQueueInterpolationCurve;
    bool  imageQueueInterpolationCurveWasSet;
    bool  initialAlwaysMonitorsPlayability;
    bool  initialContinuesPlayingDuringPrerollForRateChange;
    bool  initialContinuesPlayingDuringPrerollForSeek;
    NSDate * initialDate;
    NSDate * initialEstimatedDate;
    struct __CFString { } * initialFigTimePitchAlgorithm;
    bool  initialLimitReadAhead;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  initialMaxSnapTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  initialMinSnapTime;
    long long  initialPlaybackLikelyToKeepUpTrigger;
    unsigned int  initialSetTimeFlags;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  initialTime;
    long long  initialVariantIndex;
    bool  initialWillNeverSeekBackwardsHint;
    NSArray * itemCollectors;
    NSMutableDictionary * itemLegibleOutputsForKeys;
    NSMutableArray * itemMetadataCollectors;
    NSMutableDictionary * itemMetadataOutputsForKeys;
    NSArray * itemOutputs;
    NSMutableArray * itemVideoOutputs;
    NSObject<OS_dispatch_queue> * ivarAccessQueue;
    NSArray * loadedTimeRanges;
    <AVLoggingIdentifier> * loggingIdentifier;
    struct { 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } start; 
        struct { 
            long long value; 
            int timescale; 
            unsigned int flags; 
            long long epoch; 
        } duration; 
    }  loopTimeRange;
    struct OpaqueCMTimebase { } * loopingTimebase;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  maximumForwardBufferDuration;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  maximumTrailingBufferDuration;
    NSString * mediaKind;
    NSMutableDictionary * mediaOptionsSelectedByClient;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  minimumIntervalForIFrameOnlyPlayback;
    bool  minimumIntervalForIFrameOnlyPlaybackWasSet;
    AVAudioMix * mostRecentlyAppliedAudioMix;
    bool  needTimedMetadataNotification;
    bool  needToSeekAfterCreatingFigPlaybackItem;
    bool  networkUsuallyExceedsMaxBitRate;
    AVPlayerItem * nextItem;
    unsigned int  nextSeekIDToGenerate;
    bool  nonForcedSubtitlesEnabled;
    int  pendingSeekID;
    struct OpaqueVTPixelBufferAttributesMediator { } * pixelBufferAttributeMediator;
    bool  playHapticTracks;
    bool  playbackBufferEmpty;
    bool  playbackBufferFull;
    bool  playbackLikelyToKeepUp;
    AVPlayerConnection * playerConnection;
    AVWeakReference * playerReference;
    struct CGSize { 
        double width; 
        double height; 
    }  preferredMaximumResolution;
    double  preferredPeakBitRate;
    struct CGSize { 
        double width; 
        double height; 
    }  presentationSize;
    AVPlayerItem * previousItem;
    AVPropertyStorage * propertyStorage;
    struct OpaqueCMTimebase { } * proxyTimebase;
    NSDictionary * rampInOutInfo;
    bool  requiresAccessLog;
    unsigned long long  restrictions;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  reversePlaybackEndTime;
    bool  reversesMoreVideoFramesInMemory;
    bool  reversesMoreVideoFramesInMemoryWasSet;
    bool  savesDownloadedDataToDiskWhenDone;
    id /* block */  seekCompletionHandler;
    struct OpaqueFigSimpleMutex { } * seekIDMutex;
    NSObject<OS_dispatch_queue> * seekQueue;
    NSArray * seekableTimeRanges;
    double  seekableTimeRangesLastModifiedTime;
    bool  seekingWaitsForVideoCompositionRendering;
    NSString * serviceIdentifier;
    float  soundCheckVolumeNormalization;
    float  speedThresholdForIFrameOnlyPlayback;
    bool  speedThresholdForIFrameOnlyPlaybackWasSet;
    NSObject<OS_dispatch_queue> * stateDispatchQueue;
    long long  status;
    bool  suppressesAudioOnlyVariants;
    bool  suppressesVideoLayers;
    NSMutableArray * syncLayers;
    NSArray * textStyleRules;
    NSArray * timedMetadata;
    NSArray * trackIDsForAssetWithFigPlaybackItem;
    NSArray * tracks;
    bool  usesIFrameOnlyPlaybackForHighRateScaledEdits;
    bool  usesIFrameOnlyPlaybackForHighRateScaledEditsWasSet;
    bool  usesMinimalLatencyForVideoCompositionRendering;
    NSString * videoApertureMode;
    AVVideoComposition * videoComposition;
    NSString * videoEnhancementMode;
    float  volumeAdjustment;
    bool  wasInitializedWithURL;
    AVWeakReference * weakReference;
}

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
