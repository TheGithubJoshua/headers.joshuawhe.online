<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVAssetWriterInput.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVAssetWriterInput.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVAssetWriterInput : NSObject <AVKeyPathDependencyHost, AVWeakObservable> {
    AVAssetWriterInputInternal * _internal;
}

@property (getter=_alternateGroupID, setter=_setAlternateGroupID:, nonatomic) short alternateGroupID;
@property (getter=_isAttachedToAdaptor, nonatomic, readonly) bool attachedToAdaptor;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool expectsMediaDataInRealTime;
@property (readonly) unsigned long long hash;
@property (getter=_helper, setter=_setHelper:, nonatomic, retain) AVAssetWriterInputHelper *helper;
@property (nonatomic, readonly) NSString *mediaType;
@property (nonatomic, copy) NSArray *metadata;
@property (readonly) long long numberOfAppendFailures;
@property (nonatomic, readonly) NSDictionary *outputSettings;
@property (getter=_outputSettingsObject, nonatomic, readonly) AVOutputSettings *outputSettingsObject;
@property (getter=_pixelBufferPool, nonatomic, readonly) struct __CVPixelBufferPool { }*pixelBufferPool;
@property (getter=_provisionalAlternateGroupID, setter=_setProvisionalAlternateGroupID:, nonatomic) short provisionalAlternateGroupID;
@property (getter=isReadyForMoreMediaData, nonatomic, readonly) bool readyForMoreMediaData;
@property (nonatomic, readonly) const struct opaqueCMFormatDescription { }*sourceFormatHint;
@property (getter=_sourcePixelBufferAttributes, setter=_setSourcePixelBufferAttributes:, nonatomic, copy) NSDictionary *sourcePixelBufferAttributes;
@property (getter=_status, nonatomic, readonly) long long status;
@property (readonly) Class superclass;
@property (getter=_trackReferences, nonatomic, readonly) NSDictionary *trackReferences;
@property (getter=_weakReferenceToAssetWriter, setter=_setWeakReferenceToAssetWriter:, nonatomic, retain) AVWeakReference *weakReferenceToAssetWriter;

+ (id)assetWriterInputWithMediaType:(id)arg1 outputSettings:(id)arg2;
+ (id)assetWriterInputWithMediaType:(id)arg1 outputSettings:(id)arg2 sourceFormatHint:(struct opaqueCMFormatDescription { }*)arg3;
+ (void)initialize;

- (short)_alternateGroupID;
- (bool)_appendPixelBuffer:(struct __CVBuffer { }*)arg1 withPresentationTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (long long)_appendSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 error:(id*)arg2;
- (id)_attachedAdaptor;
- (void)_didStartInitialSession;
- (id)_helper;
- (bool)_isAttachedToAdaptor;
- (id)_outputSettingsObject;
- (struct __CVPixelBufferPool { }*)_pixelBufferPool;
- (bool)_prepareForWritingWithFigAssetWriter:(struct OpaqueFigAssetWriter { }*)arg1 mediaFileType:(id)arg2 error:(id*)arg3;
- (void)_prepareToEndSession;
- (bool)_prepareToFinishWritingReturningError:(id*)arg1;
- (short)_provisionalAlternateGroupID;
- (void)_setAlternateGroupID:(short)arg1;
- (void)_setAttachedAdaptor:(id)arg1;
- (void)_setHelper:(id)arg1;
- (void)_setProvisionalAlternateGroupID:(short)arg1;
- (void)_setSourcePixelBufferAttributes:(id)arg1;
- (void)_setWeakReferenceToAssetWriter:(id)arg1;
- (id)_sourcePixelBufferAttributes;
- (long long)_status;
- (void)_tellAssetWriterToTransitionToFailedStatusWithError:(id)arg1;
- (id)_trackReferences;
- (void)_transitionToTerminalStatus:(long long)arg1;
- (id)_weakReferenceToAssetWriter;
- (void)addCallbackToCancelDuringDeallocation:(id)arg1;
- (void)addTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (bool)appendSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1;
- (id)associatedInputsWithTrackAssociationType:(id)arg1;
- (id)availableTrackAssociationTypes;
- (bool)canAddTrackAssociationWithTrackOfInput:(id)arg1 type:(id)arg2;
- (bool)canPerformMultiplePasses;
- (id)currentPassDescription;
- (void)dealloc;
- (void)declareKeyPathDependenciesWithRegistry:(id)arg1;
- (id)description;
- (bool)expectsMediaDataInRealTime;
- (id)extendedLanguageTag;
- (void)finalize;
- (id)init;
- (id)initWithMediaType:(id)arg1 outputSettings:(id)arg2;
- (id)initWithMediaType:(id)arg1 outputSettings:(id)arg2 sourceFormatHint:(struct opaqueCMFormatDescription { }*)arg3;
- (bool)isReadyForMoreMediaData;
- (id)languageCode;
- (long long)layer;
- (void)markAsFinished;
- (void)markCurrentPassAsFinished;
- (bool)marksOutputTrackAsEnabled;
- (bool)maximizePowerEfficiency;
- (id)mediaDataLocation;
- (int)mediaTimeScale;
- (id)mediaType;
- (id)metadata;
- (struct CGSize { double x1; double x2; })naturalSize;
- (long long)numberOfAppendFailures;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)outputSettings;
- (int)outputTrackID;
- (bool)performsMultiPassEncodingIfSupported;
- (long long)preferredMediaChunkAlignment;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })preferredMediaChunkDuration;
- (long long)preferredMediaChunkSize;
- (float)preferredVolume;
- (void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)respondToEachPassDescriptionOnQueue:(id)arg1 usingBlock:(id /* block */)arg2;
- (id)sampleReferenceBaseURL;
- (void)setExpectsMediaDataInRealTime:(bool)arg1;
- (void)setExtendedLanguageTag:(id)arg1;
- (void)setLanguageCode:(id)arg1;
- (void)setLayer:(long long)arg1;
- (void)setMarksOutputTrackAsEnabled:(bool)arg1;
- (void)setMaximizePowerEfficiency:(bool)arg1;
- (void)setMediaDataLocation:(id)arg1;
- (void)setMediaTimeScale:(int)arg1;
- (void)setMetadata:(id)arg1;
- (void)setNaturalSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPerformsMultiPassEncodingIfSupported:(bool)arg1;
- (void)setPreferredMediaChunkAlignment:(long long)arg1;
- (void)setPreferredMediaChunkDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPreferredMediaChunkSize:(long long)arg1;
- (void)setPreferredVolume:(float)arg1;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (void)setTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setWritesMediaDataToBeginningOfFile:(bool)arg1;
- (const struct opaqueCMFormatDescription { }*)sourceFormatHint;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transform;
- (bool)writesMediaDataToBeginningOfFile;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
