<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVCaptureConnection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVCaptureConnection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVCaptureConnection : NSObject {
    AVCaptureConnectionInternal * _internal;
    bool  _supportsVideoFieldMode;
    long long  _videoFieldMode;
}

@property (getter=isActive, nonatomic, readonly) bool active;
@property (nonatomic, readonly) long long activeVideoStabilizationMode;
@property (nonatomic, readonly) NSArray *audioChannels;
@property (nonatomic) bool automaticallyAdjustsVideoMirroring;
@property (getter=isCameraIntrinsicMatrixDeliveryEnabled, nonatomic) bool cameraIntrinsicMatrixDeliveryEnabled;
@property (getter=isCameraIntrinsicMatrixDeliverySupported, nonatomic, readonly) bool cameraIntrinsicMatrixDeliverySupported;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (nonatomic) bool enablesVideoStabilizationWhenAvailable;
@property (nonatomic, readonly) NSArray *inputPorts;
@property (nonatomic, readonly) AVCaptureOutput *output;
@property (nonatomic) long long preferredVideoStabilizationMode;
@property (getter=isVideoFieldModeSupported, nonatomic, readonly) bool supportsVideoFieldMode;
@property (getter=isVideoMaxFrameDurationSupported, nonatomic, readonly) bool supportsVideoMaxFrameDuration;
@property (getter=isVideoMinFrameDurationSupported, nonatomic, readonly) bool supportsVideoMinFrameDuration;
@property (getter=isVideoMirroringSupported, nonatomic, readonly) bool supportsVideoMirroring;
@property (getter=isVideoOrientationSupported, nonatomic, readonly) bool supportsVideoOrientation;
@property (getter=isVideoStabilizationSupported, nonatomic, readonly) bool supportsVideoStabilization;
@property (nonatomic) long long videoFieldMode;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } videoMaxFrameDuration;
@property (nonatomic, readonly) double videoMaxScaleAndCropFactor;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } videoMinFrameDuration;
@property (getter=isVideoMirrored, nonatomic) bool videoMirrored;
@property (nonatomic) long long videoOrientation;
@property (nonatomic, readonly) AVCaptureVideoPreviewLayer *videoPreviewLayer;
@property (nonatomic) double videoScaleAndCropFactor;
@property (getter=isVideoStabilizationEnabled, nonatomic, readonly) bool videoStabilizationEnabled;

+ (id)connectionWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
+ (id)connectionWithInputPorts:(id)arg1 output:(id)arg2;
+ (void)initialize;

- (long long)_resolveActiveVideoStabilizationMode:(long long)arg1 format:(id)arg2;
- (void)_setActive:(bool)arg1;
- (void)_setVideoMinFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setVideoMirrored:(bool)arg1;
- (void)_updateActiveVideoStabilizationMode:(long long)arg1 bumpChangeSeed:(bool)arg2;
- (void)_updateCameraIntrinsicMatrixDeliverySupported;
- (void)_updateMaxScaleAndCropFactorForFormat:(id)arg1;
- (void)_updatePropertiesForFormat:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_videoMaxFrameDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_videoMinFrameDuration;
- (long long)activeVideoStabilizationMode;
- (id)audioChannels;
- (bool)automaticallyAdjustsVideoMirroring;
- (void)bumpChangeSeed;
- (int)changeSeed;
- (void)dealloc;
- (id)description;
- (bool)enablesVideoStabilizationWhenAvailable;
- (id)figCaptureConnectionConfigurationForSessionPreset:(id)arg1;
- (float)getAvgAudioLevelForChannel:(id)arg1;
- (float)getPeakAudioLevelForChannel:(id)arg1;
- (id)initWithInputPort:(id)arg1 videoPreviewLayer:(id)arg2;
- (id)initWithInputPorts:(id)arg1 output:(id)arg2;
- (void)inputPortFormatDescriptionChanged:(id)arg1;
- (id)inputPorts;
- (bool)isActive;
- (bool)isCameraIntrinsicMatrixDeliveryEnabled;
- (bool)isCameraIntrinsicMatrixDeliverySupported;
- (bool)isDebugMetadataSidecarFileEnabled;
- (bool)isEnabled;
- (bool)isLive;
- (bool)isVideoFieldModeSupported;
- (bool)isVideoMaxFrameDurationSet;
- (bool)isVideoMaxFrameDurationSupported;
- (bool)isVideoMinFrameDurationSet;
- (bool)isVideoMinFrameDurationSupported;
- (bool)isVideoMirrored;
- (bool)isVideoMirroringSupported;
- (bool)isVideoOrientationSupported;
- (bool)isVideoRetainedBufferCountHintSupported;
- (bool)isVideoStabilizationEnabled;
- (bool)isVideoStabilizationSupported;
- (id)mediaType;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)output;
- (long long)preferredVideoStabilizationMode;
- (id)session;
- (void)setAutomaticallyAdjustsVideoMirroring:(bool)arg1;
- (void)setCameraIntrinsicMatrixDeliveryEnabled:(bool)arg1;
- (void)setDebugMetadataSidecarFileEnabled:(bool)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setEnablesVideoStabilizationWhenAvailable:(bool)arg1;
- (void)setPreferredVideoStabilizationMode:(long long)arg1;
- (void)setVideoFieldMode:(long long)arg1;
- (void)setVideoMaxFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoMinFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoMirrored:(bool)arg1;
- (void)setVideoOrientation:(long long)arg1;
- (void)setVideoRetainedBufferCountHint:(int)arg1;
- (void)setVideoScaleAndCropFactor:(double)arg1;
- (void)setupInternalStorage;
- (void)setupObservers;
- (id)sourceDevice;
- (bool)sourcesFromFrontFacingCamera;
- (void)teardownObservers;
- (void)updateAudioChannelsArray;
- (void)updateAudioLevelsArray;
- (long long)videoFieldMode;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })videoMaxFrameDuration;
- (double)videoMaxScaleAndCropFactor;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })videoMinFrameDuration;
- (long long)videoOrientation;
- (id)videoPreviewLayer;
- (int)videoRetainedBufferCountHint;
- (double)videoScaleAndCropFactor;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
