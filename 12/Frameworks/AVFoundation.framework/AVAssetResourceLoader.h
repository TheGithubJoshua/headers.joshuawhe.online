<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVAssetResourceLoader.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVAssetResourceLoader.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVAssetResourceLoader : NSObject <NSURLAuthenticationChallengeSender> {
    AVAssetResourceLoaderInternal * _resourceLoader;
}

@property (nonatomic, retain) NSURLSession *URLSession;
@property (nonatomic, readonly) <NSURLSessionDataDelegate> *URLSessionDataDelegate;
@property (nonatomic, readonly) NSOperationQueue *URLSessionDataDelegateQueue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, readonly) <AVAssetResourceLoaderDelegate> *delegate;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *delegateQueue;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool preloadsEligibleContentKeys;
@property (readonly) Class superclass;

- (id)URLRequestHelper;
- (id)URLSession;
- (id)URLSessionDataDelegate;
- (id)URLSessionDataDelegateQueue;
- (struct OpaqueFigCustomURLHandler { }*)_authHandler;
- (void)_cancelRequest:(struct __CFDictionary { }*)arg1 requestID:(unsigned long long)arg2;
- (void)_cancelRequestWithKey:(id)arg1 fallbackHandler:(id /* block */)arg2;
- (void)_cancelRequestWithKey:(id)arg1 requestDictionary:(id)arg2 fallbackHandler:(id /* block */)arg3;
- (struct OpaqueFigCustomURLHandler { }*)_contentKeySessionCustomURLHandler;
- (struct OpaqueFigCustomURLHandler { }*)_customURLHandler;
- (struct OpaqueFigCustomURLLoader { }*)_customURLLoader;
- (id)_getDelegateOnStateQueue;
- (void)_handleRequest:(struct __CFDictionary { }*)arg1 requestID:(unsigned long long)arg2 willHandleRequest:(bool*)arg3;
- (void)_issueLoadingRequestWithKey:(id)arg1 loadingRequest:(id)arg2 isRenewalRequest:(bool)arg3 fallbackHandler:(id /* block */)arg4;
- (void)_issueLoadingRequestWithKey:(id)arg1 requestDictionary:(id)arg2 fallbackHandler:(id /* block */)arg3;
- (void)_noteFinishingOfRequest:(id)arg1;
- (void)_performDelegateCallbackSynchronouslyIfCurrentDelegateQueueIsQueue:(id)arg1 delegateCallbackBlock:(id /* block */)arg2;
- (void)_performDelegateSelector:(SEL)arg1 withObject:(id)arg2 representingNewRequest:(bool)arg3 key:(id)arg4 fallbackHandler:(id /* block */)arg5;
- (void)_poseAuthenticationChallengeWithKey:(id)arg1 challenge:(id)arg2 fallbackHandler:(id /* block */)arg3;
- (void)_poseAuthenticationChallengeWithKey:(id)arg1 data:(id)arg2 requestDictionary:(id)arg3 fallbackHandler:(id /* block */)arg4;
- (void)_poseAuthenticationChallengeWithRequestInfo:(struct __CFDictionary { }*)arg1 requestID:(unsigned long long)arg2 challenge:(id)arg3;
- (void)_sendAuthResponseForChallenge:(id)arg1 disposition:(long long)arg2 credential:(id)arg3 error:(id)arg4;
- (void)_setContentKeySessionCustomURLHandler:(struct OpaqueFigCustomURLHandler { }*)arg1;
- (void)_setDelegateOnStateQueue:(id)arg1;
- (id)asset;
- (void)cacheContentInformation:(id)arg1 forURL:(id)arg2;
- (id)cachedContentInformationForURL:(id)arg1;
- (void)cancelAuthenticationChallenge:(id)arg1;
- (void)cancelLoading;
- (void)continueWithoutCredentialForAuthenticationChallenge:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)delegateQueue;
- (void)finalize;
- (id)init;
- (id)initWithURLRequestHelper:(id)arg1 asset:(id)arg2;
- (void)performDefaultHandlingForAuthenticationChallenge:(id)arg1;
- (bool)preloadsEligibleContentKeys;
- (void)rejectProtectionSpaceAndContinueWithChallenge:(id)arg1;
- (void)setDelegate:(id)arg1 queue:(id)arg2;
- (void)setPreloadsEligibleContentKeys:(bool)arg1;
- (void)setURLSession:(id)arg1;
- (id)stateQueue;
- (void)useCredential:(id)arg1 forAuthenticationChallenge:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
