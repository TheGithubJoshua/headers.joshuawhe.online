<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVExternalDevice.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVExternalDevice.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVExternalDevice : NSObject {
    AVExternalDeviceInternal * _externalDevice;
}

@property (nonatomic, readonly) NSString *ID;
@property (nonatomic, readonly) NSData *MFiCertificateSerialNumber;
@property (nonatomic, readonly) NSData *OEMIcon;
@property (nonatomic, readonly) NSString *OEMIconLabel;
@property (nonatomic, readonly) bool OEMIconVisible;
@property (nonatomic, readonly) NSArray *OEMIcons;
@property (nonatomic) <AVExternalDeviceDelegate> *delegate;
@property (nonatomic, readonly) long long electronicTollCollection;
@property (nonatomic, readonly) NSArray *externalDeviceHIDs;
@property (nonatomic, readonly) bool limitedUI;
@property (nonatomic, readonly) NSArray *limitedUIElements;
@property (nonatomic, readonly) NSString *modelName;
@property (nonatomic, readonly) NSString *name;
@property (nonatomic, readonly) long long navigationAidedDriving;
@property (nonatomic, readonly) bool nightMode;
@property (nonatomic, readonly) bool nightModeSupported;
@property (nonatomic, readonly) bool ownsScreen;
@property (nonatomic, readonly) bool ownsTurnByTurnNavigation;
@property (nonatomic, readonly) bool recognizingSpeech;
@property (nonatomic, readonly) bool rightHandDrive;
@property (nonatomic, readonly) NSArray *screenIDs;
@property (nonatomic, readonly) NSDictionary *screenInputCapabilities;
@property (nonatomic, readonly) NSDictionary *screenPrimaryInputDevices;
@property (nonatomic, readonly) NSDictionary *screenSafeAreas;
@property (nonatomic, readonly) NSDictionary *screenViewAreas;
@property (nonatomic, readonly) NSArray *supportedFeatures;
@property (nonatomic, readonly) long long transportType;

// Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation

+ (id)currentCarPlayExternalDevice;
+ (id)currentExternalDevice;
+ (id)sharedLocalDevice;

- (id)ID;
- (id)MFiCertificateSerialNumber;
- (id)OEMIcon;
- (id)OEMIconLabel;
- (bool)OEMIconVisible;
- (id)OEMIcons;
- (id)_figEndpointPropertyValueForKey:(struct __CFString { }*)arg1;
- (id)_screenInfo;
- (void)_triggerFakeNotificationNamed:(id)arg1 withPayload:(id)arg2;
- (id)_weakReference;
- (id)borrowScreenForClient:(id)arg1 reason:(id)arg2;
- (void)dealloc;
- (id)delegate;
- (long long)electronicTollCollection;
- (id)externalDeviceHIDWithUUID:(id)arg1;
- (id)externalDeviceHIDs;
- (struct OpaqueFigEndpoint { }*)figEndpoint;
- (void)finalize;
- (id)init;
- (id)initWithFigEndpoint:(struct OpaqueFigEndpoint { }*)arg1;
- (bool)limitedUI;
- (id)limitedUIElements;
- (id)modelName;
- (id)name;
- (long long)navigationAidedDriving;
- (bool)nightMode;
- (bool)nightModeSupported;
- (bool)ownsScreen;
- (bool)ownsTurnByTurnNavigation;
- (bool)recognizingSpeech;
- (void)requestCarUI;
- (void)requestCarUIForURL:(id)arg1;
- (void)requestCarUIForURL:(id)arg1 withUUID:(id)arg2;
- (id)requestTurnByTurnNavigationOwnership;
- (void)requestViewArea:(long long)arg1 forScreenID:(id)arg2;
- (bool)rightHandDrive;
- (id)screenIDs;
- (id)screenInputCapabilities;
- (id)screenPrimaryInputDevices;
- (id)screenSafeAreas;
- (id)screenViewAreas;
- (void)sendCommand:(id)arg1 withParameters:(id)arg2;
- (void)setDelegate:(id)arg1;
- (id)supportedFeatures;
- (void)takeScreenForClient:(id)arg1 reason:(id)arg2;
- (void)takeScreenForConnection;
- (long long)transportType;

// Image: /System/Library/PrivateFrameworks/WiFiKit.framework/WiFiKit

+ (bool)isCarPlaySessionActive;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
