<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVPlayerInternal.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVPlayerInternal.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVPlayerInternal : NSObject {
    void * IAPDCallbackToken;
    bool  IOwnTheFigPlayer;
    bool  PIPModePossible;
    long long  actionAtItemEnd;
    bool  airPlayVideoActive;
    bool  allowsExternalPlayback;
    bool  allowsOutOfBandTextTrackRendering;
    bool  allowsPixelBufferPoolSharing;
    NSString * ancillaryPerformanceInformationForDisplay;
    bool  appliesMediaSelectionCriteriaAutomatically;
    NSString * audioOutputDeviceUniqueID;
    AVAudioSession * audioSession;
    AVAudioSessionMediaPlayerOnly * audioSessionMediaPlayerOnly;
    bool  autoSwitchStreamVariants;
    bool  automaticallyWaitsToMinimizeStalling;
    NSHashTable * avPlayerLayers;
    NSDictionary * cachedFigMediaSelectionCriteriaProperty;
    NSString * captionPipelineStrategy;
    NSString * captionRenderingStrategy;
    NSString * clientName;
    long long  clientPriority;
    bool  closedCaptionDisplayEnabled;
    NSMutableArray * closedCaptionLayers;
    NSObject<OS_dispatch_queue> * configurationQueue;
    AVPlayerItem * currentItem;
    bool  currentItemNonForcedSubtitlesEnabled;
    <AVCallbackCancellation><AVKVOIntrospection> * currentItemPreferredPixelBufferAttributesCallbackInvoker;
    struct CGSize { 
        double width; 
        double height; 
    }  currentItemPresentationSize;
    NSObject<OS_dispatch_queue> * currentItemPropertyUpdateQueue;
    <AVCallbackCancellation><AVKVOIntrospection> * currentItemSuppressesVideoLayersCallbackInvoker;
    struct CGSize { 
        double width; 
        double height; 
    }  dimensionsOfReservedVideoMemory;
    bool  disallowsAMRAudio;
    bool  disallowsAutoPauseOnRouteRemovalIfNoAudio;
    bool  disallowsHardwareAcceleratedVideoDecoder;
    bool  disallowsVideoLayerDisplayCompositing;
    NSArray * displaysUsedForPlayback;
    bool  dynamicallyChoosesInitialVariant;
    NSError * error;
    NSArray * expectedAssetTypes;
    bool  externalPlaybackActive;
    NSString * externalPlaybackVideoGravity;
    NSObject<OS_dispatch_queue> * figConfigurationQueue;
    struct OpaqueCMClock { } * figMasterClock;
    struct OpaqueFigPlaybackItem { } * figPlaybackItemToIdentifyNextCurrentItem;
    struct OpaqueFigPlayer { } * figPlayer;
    bool  hadAssociatedOnscreenPlayerLayerWhenSuspended;
    NSMutableArray * handlersToCallWhenReadyToPlay;
    bool  hostApplicationInForeground;
    bool  isConnectedToPhysicalSecondScreen;
    bool  isDisplayingClosedCaptions;
    NSMutableSet * items;
    NSArray * itemsInFigPlayQueue;
    NSObject<OS_dispatch_queue> * ivarAccessQueue;
    AVPlayerItem * lastItem;
    bool  layerDestinationIsTVOut;
    NSObject<OS_dispatch_queue> * layerInteractionQueue;
    NSObject<OS_dispatch_queue> * layersQ;
    bool  limitsBandwidthForCellularAccess;
    bool  logPerformanceData;
    <AVLoggingIdentifier> * loggingIdentifier;
    float  maxRateForAudioPlayback;
    float  minRateForAudioPlayback;
    NSString * multichannelAudioStrategy;
    bool  muted;
    bool  needsToCreateFigPlayer;
    int  nextPrerollIDToGenerate;
    AVOutputContext * outputContext;
    bool  outputObscuredDueToInsufficientExternalProtection;
    NSMutableDictionary * pendingFigPlayerProperties;
    int  pendingPrerollID;
    AVPixelBufferAttributeMediator * pixelBufferAttributeMediator;
    NSString * playerRole;
    unsigned long long  preferredVideoDecoderGPURegistryID;
    bool  preparesItemsForPlaybackAsynchronously;
    id /* block */  prerollCompletionHandler;
    struct OpaqueFigSimpleMutex { } * prerollIDMutex;
    bool  preventsDisplaySleepDuringVideoPlayback;
    AVPropertyStorage * propertyStorage;
    struct OpaqueCMTimebase { } * proxyTimebase;
    NSArray * queueModifications;
    float  rate;
    NSString * reasonForWaitingToPlay;
    bool  reevaluateBackgroundPlayback;
    bool  shouldReduceResourceUsage;
    NSObject<OS_dispatch_queue> * stateDispatchQueue;
    long long  status;
    NSMutableArray * subtitleLayers;
    bool  suspensionExpected;
    long long  timeControlStatus;
    float  userVolume;
    bool  usesAudioOnlyModeForExternalPlayback;
    bool  usesDedicatedNotificationQueueForMediaServices;
    bool  usesExternalPlaybackWhileExternalScreenIsActive;
    bool  usesLegacyAutomaticWaitingBehavior;
    NSDictionary * vibrationPattern;
    struct __CFDictionary { } * videoLayers;
    float  volume;
    AVWeakReference * weakReference;
}

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
