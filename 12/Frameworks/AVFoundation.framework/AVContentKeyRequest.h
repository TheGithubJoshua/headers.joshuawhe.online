<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVContentKeyRequest.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVContentKeyRequest.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVContentKeyRequest : NSObject {
    AVContentKeyRequestInternal * _contentKeyRequest;
}

@property (readonly) bool canProvidePersistableContentKey;
@property (readonly) NSError *error;
@property (readonly) id identifier;
@property (nonatomic, readonly) NSData *initializationData;
@property (readonly, copy) NSDictionary *options;
@property (readonly) long long status;

+ (id)_createKeyRequestDictionaryForApp:(id)arg1 persistentKey:(id)arg2 serverChallenge:(id)arg3 cryptorKeyRequestID:(unsigned long long)arg4 purpose:(int)arg5;
+ (id)_ensureProtocolVersionList:(id)arg1;
+ (id)_mergePreloadingRequestOptions:(id)arg1 withCreateKeyRequestOptions:(id)arg2;
+ (int)_prepareCryptor:(struct OpaqueFigCPECryptor { }*)arg1 forRenewal:(bool)arg2 andReturnKeyRequestID:(unsigned long long*)arg3;
+ (void)_validateHLSEncryptionMethod:(id)arg1;
+ (void)_validateProtocolVersionList:(id)arg1;
+ (void)_validateServerChallenge:(id)arg1;

- (bool)_canRespondByRequestingPersistableContentKeyRequest;
- (void)_clearContext;
- (void)_copyAndStoreCryptorUUID;
- (int)_extractAndStoreDefualtKeyIDFromInitializationData:(id)arg1;
- (void)_finishLoadingCustomURLRequestWithError:(id)arg1;
- (void)_finishLoadingCustomURLRequestWithResponseData:(id)arg1 renewalDate:(id)arg2;
- (id)_getRetryReasonForError:(int)arg1;
- (void)_handleKeyResponseError:(id)arg1;
- (void)_handleKeyResponseSuccess;
- (id)_keySystem;
- (int)_prepareForKeyRenewal;
- (void)_sendDictionaryForURLRequest:(id)arg1;
- (void)_sendResponseInfoToCustomURLHandlerWithRenewalDate:(id)arg1;
- (struct OpaqueFigCPECryptor { }*)_setCryptorWithFormatDescription:(struct opaqueCMFormatDescription { }*)arg1 error:(id*)arg2;
- (void)_setError:(id)arg1;
- (void)_setStatus:(long long)arg1;
- (bool)canProvidePersistableContentKey;
- (id)contentKeyRequestDataForApp:(id)arg1 contentIdentifier:(id)arg2 options:(id)arg3 error:(id*)arg4;
- (void)dealloc;
- (id)error;
- (struct OpaqueFigCPECryptor { }*)figCryptor;
- (id)identifier;
- (id)initWithContentKeySession:(id)arg1 customURLHandler:(struct OpaqueFigCustomURLHandler { }*)arg2 identifier:(id)arg3 requestInfo:(struct __CFDictionary { }*)arg4 requestID:(unsigned long long)arg5 providesPersistableKey:(bool)arg6;
- (id)initWithContentKeySession:(id)arg1 customURLProviderContext:(id)arg2 identifier:(id)arg3 initializationData:(id)arg4 providesPersistableKey:(bool)arg5;
- (id)initWithContentKeySession:(id)arg1 identifier:(id)arg2 initializationData:(id)arg3 preloadingRequestOptions:(id)arg4 providesPersistableKey:(bool)arg5;
- (id)initializationData;
- (void)makeStreamingContentKeyRequestDataForApp:(id)arg1 contentIdentifier:(id)arg2 options:(id)arg3 completionHandler:(id /* block */)arg4;
- (id)options;
- (void)processContentKeyResponse:(id)arg1;
- (void)processContentKeyResponseData:(id)arg1;
- (void)processContentKeyResponseData:(id)arg1 renewalDate:(id)arg2;
- (void)processContentKeyResponseError:(id)arg1;
- (void)renewExpiringContentKeyResponseData;
- (void)respondByRequestingPersistableContentKeyRequest;
- (bool)respondByRequestingPersistableContentKeyRequestAndReturnError:(id*)arg1;
- (long long)status;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
