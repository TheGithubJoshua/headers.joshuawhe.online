<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVFigAssetWriterTrack.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVFigAssetWriterTrack.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVFigAssetWriterTrack : NSObject {
    bool  _aboveHighWaterLevel;
    NSObject<OS_dispatch_queue> * _aboveHighWaterLevelQueue;
    struct OpaqueFigAssetWriter { } * _figAssetWriter;
    AVMediaFileType * _mediaFileType;
    NSString * _mediaType;
    NSOperationQueue * _operationQueue;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _sampleBufferCoalescingInterval;
    int  _trackID;
    AVWeakReference * _weakReference;
}

@property (getter=isAboveHighWaterLevel, readonly) bool aboveHighWaterLevel;
@property (nonatomic, readonly) bool encoderSupportsMultiPass;
@property (nonatomic, readonly) struct OpaqueFigAssetWriter { }*figAssetWriter;
@property (nonatomic, readonly) AVMediaFileType *mediaFileType;
@property (nonatomic, readonly) NSString *mediaType;
@property (nonatomic, readonly) struct __CVPixelBufferPool { }*pixelBufferPool;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } sampleBufferCoalescingInterval;
@property (nonatomic, readonly) int trackID;

+ (id)assetWriterTrackWithFigAssetWriter:(struct OpaqueFigAssetWriter { }*)arg1 mediaType:(id)arg2 mediaFileType:(id)arg3 formatSpecification:(id)arg4 sourcePixelBufferAttributes:(id)arg5 multiPass:(bool)arg6 attachedAdaptor:(id)arg7 error:(id*)arg8;

- (int)_attachToFigAssetWriterUsingFormatSpecification:(id)arg1 sourcePixelBufferAttributes:(id)arg2 multiPass:(bool)arg3 error:(id*)arg4;
- (void)_figAssetWriterDidDropBelowLowWaterLevelForTrackID:(int)arg1;
- (void)_refreshAboveHighWaterLevel;
- (bool)addPixelBuffer:(struct __CVBuffer { }*)arg1 atPresentationTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 error:(id*)arg3;
- (bool)addSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg1 error:(id*)arg2;
- (bool)beginPassReturningError:(id*)arg1;
- (void)dealloc;
- (bool)encoderSupportsMultiPass;
- (void)endPassWithCompletionHandler:(id /* block */)arg1;
- (struct OpaqueFigAssetWriter { }*)figAssetWriter;
- (void)finalize;
- (id)init;
- (id)initWithFigAssetWriter:(struct OpaqueFigAssetWriter { }*)arg1 mediaType:(id)arg2 mediaFileType:(id)arg3 formatSpecification:(id)arg4 sourcePixelBufferAttributes:(id)arg5 multiPass:(bool)arg6 error:(id*)arg7;
- (bool)isAboveHighWaterLevel;
- (bool)markEndOfDataReturningError:(id*)arg1;
- (id)mediaFileType;
- (id)mediaType;
- (struct __CVPixelBufferPool { }*)pixelBufferPool;
- (void)prepareToEndSession;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })sampleBufferCoalescingInterval;
- (void)setAlternateGroupID:(short)arg1;
- (void)setExcludeFromAutoSelection:(bool)arg1;
- (void)setExtendedLanguageTag:(id)arg1;
- (void)setFigDimensions:(id)arg1;
- (void)setFigMetadata:(id)arg1;
- (void)setFigTrackMatrix:(id)arg1;
- (void)setFormatDescriptions:(id)arg1;
- (void)setLanguageCode:(id)arg1;
- (void)setLayer:(long long)arg1;
- (void)setMarksOutputTrackAsEnabled:(bool)arg1;
- (void)setMediaDataLocation:(id)arg1;
- (void)setMediaTimeScale:(int)arg1;
- (void)setPreferredChunkAlignment:(long long)arg1;
- (void)setPreferredChunkDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPreferredChunkSize:(long long)arg1;
- (void)setProvisionalAlternateGroupID:(short)arg1;
- (void)setSampleBufferCoalescingInterval:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setSampleReferenceBaseURL:(id)arg1;
- (void)setTrackVolume:(float)arg1;
- (int)trackID;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
