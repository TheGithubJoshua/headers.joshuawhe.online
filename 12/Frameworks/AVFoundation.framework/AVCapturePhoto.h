<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVCapturePhoto.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVCapturePhoto.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVCapturePhoto : NSObject {
    AVCapturePhotoInternal * _internal;
}

@property (readonly) AVCameraCalibrationData *cameraCalibrationData;
@property (readonly) AVDepthData *depthData;
@property (readonly) NSDictionary *embeddedThumbnailPhotoFormat;
@property (readonly) NSDictionary *metadata;
@property (readonly) long long photoCount;
@property (readonly) struct __CVBuffer { }*pixelBuffer;
@property (readonly) AVPortraitEffectsMatte *portraitEffectsMatte;
@property (readonly) struct __CVBuffer { }*previewPixelBuffer;
@property (getter=isRawPhoto, readonly) bool rawPhoto;
@property (readonly) AVCaptureResolvedPhotoSettings *resolvedSettings;
@property (readonly) NSString *sourceDeviceType;
@property (readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } timestamp;

- (struct CGImage { }*)CGImageRepresentation;
- (struct __CVBuffer { }*)_embeddedThumbnailSourcePixelBuffer;
- (id)_fileDataRepresentationWithReplacementMetadata:(id)arg1 replacementEmbeddedThumbnailPhotoFormat:(id)arg2 replacementEmbeddedThumbnailPixelBuffer:(struct __CVBuffer { }*)arg3 replacementDepthData:(id)arg4 replacementPortraitEffectsMatte:(id)arg5 exceptionReason:(id*)arg6;
- (unsigned int)_orientation;
- (unsigned int)actualPhotoProcessingFlags;
- (id)bracketSettings;
- (id)cameraCalibrationData;
- (void)dealloc;
- (id)debugDescription;
- (id)depthData;
- (id)description;
- (id)embeddedThumbnailPhotoFormat;
- (unsigned int)expectedPhotoProcessingFlags;
- (id)fileDataRepresentation;
- (id)fileDataRepresentationWithCustomizer:(id)arg1;
- (id)fileDataRepresentationWithReplacementMetadata:(id)arg1 replacementEmbeddedThumbnailPhotoFormat:(id)arg2 replacementEmbeddedThumbnailPixelBuffer:(struct __CVBuffer { }*)arg3 replacementDepthData:(id)arg4;
- (id)initWithTimestamp:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 photoSurface:(struct __IOSurface { }*)arg2 photoSurfaceSize:(unsigned long long)arg3 previewPhotoSurface:(struct __IOSurface { }*)arg4 embeddedThumbnailSourceSurface:(struct __IOSurface { }*)arg5 metadata:(id)arg6 depthDataSurface:(struct __IOSurface { }*)arg7 depthMetadataDictionary:(id)arg8 portraitEffectsMatteSurface:(struct __IOSurface { }*)arg9 portraitEffectsMatteMetadataDictionary:(id)arg10 captureRequest:(id)arg11 bracketSettings:(id)arg12 sequenceCount:(unsigned long long)arg13 photoCount:(unsigned long long)arg14 expectedPhotoProcessingFlags:(unsigned int)arg15 sourceDeviceType:(id)arg16;
- (bool)isRawPhoto;
- (long long)lensStabilizationStatus;
- (id)livePhotoMovieFileURL;
- (id)metadata;
- (long long)photoCount;
- (unsigned int)photoProcessingFlags;
- (struct __CVBuffer { }*)pixelBuffer;
- (id)portraitEffectsMatte;
- (id)portraitMetadata;
- (struct CGImage { }*)previewCGImageRepresentation;
- (struct __CVBuffer { }*)previewPixelBuffer;
- (id)resolvedSettings;
- (long long)sequenceCount;
- (id)sourceDeviceType;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })timestamp;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
