<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVCaptureVideoPreviewLayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVCaptureVideoPreviewLayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVCaptureVideoPreviewLayer : CALayer {
    AVCaptureVideoPreviewLayerInternal * _internal;
}

@property (nonatomic) bool automaticallyAdjustsMirroring;
@property (nonatomic, readonly) AVCaptureConnection *connection;
@property (getter=isMirrored, nonatomic) bool mirrored;
@property (getter=isMirroringSupported, nonatomic, readonly) bool mirroringSupported;
@property (nonatomic) long long orientation;
@property (getter=isOrientationSupported, nonatomic, readonly) bool orientationSupported;
@property (nonatomic, retain) AVCaptureSession *session;
@property (copy) NSString *videoGravity;

+ (void)initialize;
+ (id)layerWithSession:(id)arg1;
+ (id)layerWithSessionWithNoConnection:(id)arg1;

- (bool)_automaticallyAdjustsMirroring;
- (bool)_filtersAreOptimized:(id)arg1 exceptionReason:(id*)arg2;
- (void)_handleNotification:(id)arg1 payload:(id)arg2;
- (id)_initWithSession:(id)arg1 makeConnection:(bool)arg2;
- (id)_input;
- (bool)_isMirrored;
- (long long)_orientation;
- (void)_setSensorAndEstimatedPreviewSizes;
- (bool)_setVideoPreviewFilters:(id)arg1 checkForExceptionalInput:(bool)arg2 exceptionReason:(id*)arg3;
- (void)_updateCaptureDeviceTransform;
- (void)_updateDepthDataDeliverySupported;
- (void)_updatePreviewTransforms;
- (id)addConnection:(id)arg1 error:(id*)arg2;
- (void)attachToFigCaptureSession:(struct OpaqueFigCaptureSession { }*)arg1;
- (bool)automaticallyAdjustsMirroring;
- (void)bumpChangeSeed;
- (bool)canAddConnectionForMediaType:(id)arg1;
- (struct CGPoint { double x1; double x2; })captureDevicePointOfInterestForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)centerSublayer:(long long)arg1;
- (int)changeSeed;
- (id)connection;
- (id)connectionMediaTypes;
- (void)dealloc;
- (void)detachFromFigCaptureSession:(struct OpaqueFigCaptureSession { }*)arg1;
- (unsigned int)imageQueueSlot;
- (id)init;
- (id)initWithLayer:(id)arg1;
- (id)initWithSession:(id)arg1;
- (id)initWithSessionWithNoConnection:(id)arg1;
- (bool)isChromaNoiseReductionEnabled;
- (bool)isChromaNoiseReductionSupported;
- (bool)isDepthDataDeliveryEnabled;
- (bool)isDepthDataDeliverySupported;
- (bool)isFilterRenderingEnabled;
- (bool)isMirrored;
- (bool)isMirroringSupported;
- (bool)isOrientationSupported;
- (bool)isPaused;
- (bool)isUnoptimizedFilterRenderingEnabled;
- (void)layerDidBecomeVisible:(bool)arg1;
- (void)layoutSublayers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })metadataOutputRectOfInterestForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)orientation;
- (struct CGPoint { double x1; double x2; })pointForCaptureDevicePointOfInterest:(struct CGPoint { double x1; double x2; })arg1;
- (double)previewRotationDegrees;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForMetadataOutputRectOfInterest:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)removeConnection:(id)arg1;
- (id)session;
- (void)setAutomaticallyAdjustsMirroring:(bool)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setChromaNoiseReductionEnabled:(bool)arg1;
- (void)setDepthDataDeliveryEnabled:(bool)arg1;
- (void)setFilterRenderingEnabled:(bool)arg1;
- (void)setMirrored:(bool)arg1;
- (void)setOrientation:(long long)arg1;
- (void)setPaused:(bool)arg1;
- (void)setSession:(id)arg1;
- (void)setSessionWithNoConnection:(id)arg1;
- (void)setSinkID:(id)arg1;
- (void)setUnoptimizedFilterRenderingEnabled:(bool)arg1;
- (void)setVideoGravity:(id)arg1;
- (void)setVideoPreviewFilters:(id)arg1;
- (id)sinkID;
- (id)transformedMetadataObjectForMetadataObject:(id)arg1;
- (id)videoGravity;
- (id)videoPreviewFilters;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
