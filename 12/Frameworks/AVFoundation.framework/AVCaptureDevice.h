<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVCaptureDevice.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVFoundation.framework/AVCaptureDevice.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation (1550.4)
 */

@interface AVCaptureDevice : NSObject {
    AVCaptureDeviceInputSource * _activeInputSource;
    NSArray * _inputSources;
    AVCaptureDeviceInternal * _internal;
    NSArray * _linkedDevices;
    NSString * _manufacturer;
    bool  _suspended;
    int  _transportType;
}

@property (nonatomic, retain) AVCaptureDeviceFormat *activeFormat;
@property (nonatomic, retain) AVCaptureDeviceInputSource *activeInputSource;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } activeVideoMaxFrameDuration;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } activeVideoMinFrameDuration;
@property (getter=isConnected, nonatomic, readonly) bool connected;
@property (nonatomic, readonly) NSArray *formats;
@property (getter=isInUseByAnotherApplication, nonatomic, readonly) bool inUseByAnotherApplication;
@property (nonatomic, readonly) NSArray *inputSources;
@property (nonatomic, readonly) NSArray *linkedDevices;
@property (nonatomic, readonly) NSString *localizedName;
@property (nonatomic, readonly) NSString *manufacturer;
@property (nonatomic, readonly) NSString *modelID;
@property (getter=isSuspended, nonatomic, readonly) bool suspended;
@property (nonatomic, readonly) int transportType;
@property (nonatomic, readonly) NSString *uniqueID;

// Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation

+ (id)_devices;
+ (id)_devicesWithDeviceTypes:(id)arg1 mediaType:(id)arg2 position:(long long)arg3;
+ (void)_filterConnectedDevices:(id)arg1 withDeviceTypes:(id)arg2 mediaType:(id)arg3 position:(long long)arg4;
+ (void)_filterConnectedLegacyDevices:(id)arg1;
+ (id)_legacyDevicesWithMediaType:(id)arg1;
+ (void)_reconnectDevices:(id)arg1;
+ (void)_registerOnceForServerConnectionDiedNotification;
+ (long long)authorizationStatusForMediaType:(id)arg1;
+ (id)defaultDeviceWithDeviceType:(id)arg1 mediaType:(id)arg2 position:(long long)arg3;
+ (id)defaultDeviceWithMediaType:(id)arg1;
+ (id)deviceWithUniqueID:(id)arg1;
+ (id)devices;
+ (id)devicesWithMediaType:(id)arg1;
+ (void)initialize;
+ (void)requestAccessForMediaType:(id)arg1 completionHandler:(id /* block */)arg2;

- (id)AVVideoSettingsForSessionPreset:(id)arg1;
- (float)ISO;
- (float)ISODigitalThreshold;
- (void)_checkTCCAccess;
- (bool)_isDepthDataDeliveryEnabled;
- (bool)_isFlashScene;
- (bool)_isHighDynamicRangeScene;
- (void)_setActiveVideoMaxFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setActiveVideoMinFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setDepthDataDeliveryEnabled:(bool)arg1;
- (void)_setPhotoSettingsForSceneMonitoring:(id)arg1;
- (void)_setStillImageStabilizationAutomaticallyEnabled:(bool)arg1;
- (void)_setVideoHDREnabled:(bool)arg1;
- (bool)_startUsingDevice:(id*)arg1;
- (void)_stopUsingDevice;
- (long long)activeColorSpace;
- (id)activeDepthDataFormat;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })activeDepthDataMinFrameDuration;
- (id)activeFormat;
- (id)activeInputSource;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })activeMaxExposureDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })activeMaxExposureDurationClientOverride;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })activeVideoMaxFrameDuration;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })activeVideoMinFrameDuration;
- (bool)appliesSessionPresetMaxIntegrationTimeOverrideToActiveFormat;
- (long long)autoFocusRangeRestriction;
- (bool)automaticallyAdjustsImageControlMode;
- (bool)automaticallyAdjustsVideoHDREnabled;
- (bool)automaticallyEnablesLowLightBoostWhenAvailable;
- (id)availableBoxedMetadataFormatDescriptions;
- (id)bravoCameraSelectionBehavior;
- (bool)cachesFigCaptureSourceConfigurationChanges;
- (void)cancelVideoZoomRamp;
- (struct { float x1; float x2; })chromaticityValuesForDeviceWhiteBalanceGains:(struct { float x1; float x2; float x3; })arg1;
- (void)close;
- (void)dealloc;
- (id)description;
- (struct OpaqueCMClock { }*)deviceClock;
- (long long)deviceSourceOrigin;
- (id)deviceType;
- (struct { float x1; float x2; float x3; })deviceWhiteBalanceGains;
- (struct { float x1; float x2; float x3; })deviceWhiteBalanceGainsForChromaticityValues:(struct { float x1; float x2; })arg1;
- (struct { float x1; float x2; float x3; })deviceWhiteBalanceGainsForTemperatureAndTintValues:(struct { float x1; float x2; })arg1;
- (double)dualCameraSwitchOverVideoZoomFactor;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })exposureDuration;
- (long long)exposureMode;
- (struct CGPoint { double x1; double x2; })exposurePointOfInterest;
- (float)exposureTargetBias;
- (float)exposureTargetOffset;
- (bool)eyeClosedDetectionEnabled;
- (bool)eyeDetectionEnabled;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })faceRectangle;
- (int)faceRectangleAngle;
- (long long)flashMode;
- (float)focalLength;
- (long long)focusMode;
- (struct CGPoint { double x1; double x2; })focusPointOfInterest;
- (id)formats;
- (struct { float x1; float x2; float x3; })grayWorldDeviceWhiteBalanceGains;
- (bool)hasFlash;
- (bool)hasMediaType:(id)arg1;
- (bool)hasTorch;
- (bool)hevcAllowBFramesForHighCTUCount;
- (int)hevcTurboModeVersion;
- (long long)imageControlMode;
- (id)initSubclass;
- (id)inputSources;
- (bool)isActiveVideoMaxFrameDurationSet;
- (bool)isActiveVideoMinFrameDurationSet;
- (bool)isAdjustingExposure;
- (bool)isAdjustingFocus;
- (bool)isAdjustingWhiteBalance;
- (bool)isAutoFocusRangeRestrictionSupported;
- (bool)isAutoRedEyeReductionSupported;
- (bool)isBuiltInStereoAudioCaptureSupported;
- (bool)isCameraIntrinsicMatrixDeliverySupported;
- (bool)isConnected;
- (bool)isExposureModeSupported:(long long)arg1;
- (bool)isExposurePointOfInterestSupported;
- (bool)isEyeClosedDetectionSupported;
- (bool)isEyeDetectionSupported;
- (bool)isFaceDetectionDrivenImageProcessingEnabled;
- (bool)isFaceDetectionDuringVideoPreviewSupported;
- (bool)isFaceDetectionSupported;
- (bool)isFlashActive;
- (bool)isFlashAvailable;
- (bool)isFlashModeSupported:(long long)arg1;
- (bool)isFlashSceneDetectedForPhotoOutput;
- (bool)isFocusModeSupported:(long long)arg1;
- (bool)isFocusPointOfInterestSupported;
- (bool)isHDRSupported;
- (bool)isHEIFSupported;
- (bool)isHEVCPreferred;
- (bool)isHEVCRelaxedAverageBitRateTargetSupported;
- (bool)isHEVCSupported;
- (bool)isHighDynamicRangeScene;
- (bool)isHighDynamicRangeSceneDetectionEnabled;
- (bool)isHighDynamicRangeSceneDetectionSupported;
- (bool)isImageControlModeSupported:(long long)arg1;
- (bool)isInUseByAnotherApplication;
- (bool)isLensStabilizationSupported;
- (bool)isLockedForConfiguration;
- (bool)isLockingFocusWithCustomLensPositionSupported;
- (bool)isLockingWhiteBalanceWithCustomDeviceGainsSupported;
- (bool)isLowLightBoostEnabled;
- (bool)isLowLightBoostSupported;
- (bool)isLowLightVideoCaptureEnabled;
- (bool)isMachineReadableCodeDetectionSupported;
- (bool)isOpen;
- (bool)isRampingVideoZoom;
- (bool)isRawStillImageCaptureSupported;
- (bool)isSmileDetectionSupported;
- (bool)isSmoothAutoFocusEnabled;
- (bool)isSmoothAutoFocusSupported;
- (bool)isSubjectAreaChangeMonitoringEnabled;
- (bool)isSuspended;
- (bool)isTorchActive;
- (bool)isTorchAvailable;
- (bool)isTorchModeSupported:(long long)arg1;
- (bool)isVideoHDREnabled;
- (bool)isVideoHDRSuspended;
- (bool)isVideoStabilizationSupported;
- (bool)isWhiteBalanceModeSupported:(long long)arg1;
- (bool)isWideColorSupported;
- (float)lensAperture;
- (float)lensPosition;
- (id)linkedDevices;
- (id)localizedName;
- (bool)lockForConfiguration:(id*)arg1;
- (id)manufacturer;
- (double)maxAvailableVideoZoomFactor;
- (float)maxExposureTargetBias;
- (struct { int x1; int x2; })maxH264PhotoDimensions;
- (struct { int x1; int x2; })maxH264VideoDimensions;
- (float)maxWhiteBalanceGain;
- (double)minAvailableVideoZoomFactor;
- (float)minExposureTargetBias;
- (int)minMacroblocksForHighProfileAbove30fps;
- (int)minMacroblocksForHighProfileUpTo30fps;
- (id)modelID;
- (bool)open:(id*)arg1;
- (long long)position;
- (bool)providesStortorgetMetadata;
- (void)rampExponentiallyToVideoZoomFactor:(float)arg1 withDuration:(double)arg2;
- (void)rampToVideoZoomFactor:(double)arg1 withRate:(float)arg2;
- (void)setActiveColorSpace:(long long)arg1;
- (void)setActiveDepthDataFormat:(id)arg1;
- (void)setActiveDepthDataMinFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setActiveFormat:(id)arg1;
- (void)setActiveInputSource:(id)arg1;
- (void)setActiveMaxExposureDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setActiveVideoMaxFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setActiveVideoMinFrameDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setAutoFocusRangeRestriction:(long long)arg1;
- (void)setAutomaticallyAdjustsImageControlMode:(bool)arg1;
- (void)setAutomaticallyAdjustsVideoHDREnabled:(bool)arg1;
- (void)setAutomaticallyEnablesLowLightBoostWhenAvailable:(bool)arg1;
- (void)setBravoCameraSelectionBehavior:(id)arg1;
- (void)setCachesFigCaptureSourceConfigurationChanges:(bool)arg1;
- (void)setExposureMode:(long long)arg1;
- (void)setExposureModeCustomWithDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 ISO:(float)arg2 completionHandler:(id /* block */)arg3;
- (void)setExposurePointOfInterest:(struct CGPoint { double x1; double x2; })arg1;
- (void)setExposureTargetBias:(float)arg1 completionHandler:(id /* block */)arg2;
- (void)setEyeClosedDetectionEnabled:(bool)arg1;
- (void)setEyeDetectionEnabled:(bool)arg1;
- (void)setFaceDetectionDrivenImageProcessingEnabled:(bool)arg1;
- (void)setFlashMode:(long long)arg1;
- (void)setFocusMode:(long long)arg1;
- (void)setFocusModeLockedWithLensPosition:(float)arg1 completionHandler:(id /* block */)arg2;
- (void)setFocusPointOfInterest:(struct CGPoint { double x1; double x2; })arg1;
- (void)setHighDynamicRangeSceneDetectionEnabled:(bool)arg1;
- (void)setImageControlMode:(long long)arg1;
- (void)setLowLightVideoCaptureEnabled:(bool)arg1;
- (void)setProvidesStortorgetMetadata:(bool)arg1;
- (void)setSmileDetectionEnabled:(bool)arg1;
- (void)setSmoothAutoFocusEnabled:(bool)arg1;
- (void)setSubjectAreaChangeMonitoringEnabled:(bool)arg1;
- (void)setTorchMode:(long long)arg1;
- (bool)setTorchModeOnWithLevel:(float)arg1 error:(id*)arg2;
- (void)setVideoHDREnabled:(bool)arg1;
- (void)setVideoHDRSuspended:(bool)arg1;
- (void)setVideoZoomFactor:(double)arg1;
- (void)setWhiteBalanceMode:(long long)arg1;
- (void)setWhiteBalanceModeLockedWithDeviceWhiteBalanceGains:(struct { float x1; float x2; float x3; })arg1 completionHandler:(id /* block */)arg2;
- (long long)shallowDepthOfFieldEffectStatus;
- (bool)smileDetectionEnabled;
- (bool)startUsingDevice:(id*)arg1;
- (void)stopUsingDevice;
- (id)supportedMetadataObjectIdentifiers;
- (bool)supportsAVCaptureSessionPreset:(id)arg1;
- (id)systemPressureState;
- (struct { float x1; float x2; })temperatureAndTintValuesForDeviceWhiteBalanceGains:(struct { float x1; float x2; float x3; })arg1;
- (float)torchLevel;
- (long long)torchMode;
- (int)transportType;
- (id)uniqueID;
- (void)unlockForConfiguration;
- (bool)usesQuantizationScalingMatrix_H264_Steep_16_48;
- (double)videoZoomFactor;
- (long long)whiteBalanceMode;

// Image: /System/Library/PrivateFrameworks/CameraUI.framework/CameraUI

- (void)cam_debugExposureState;
- (void)cam_debugFocusAndExposureState;
- (void)cam_debugFocusState;
- (id)cam_highestQualityFormatForConfiguration:(long long)arg1 colorSpace:(long long)arg2;
- (id)cameraPanoramaFormatForConfiguration:(id)arg1;
- (id)cameraStillImageFormat;
- (id)cameraVideoFormatForVideoConfiguration:(long long)arg1 videoEncodingBehavior:(long long)arg2;
- (id)cameraVideoPresetForVideoConfiguration:(long long)arg1 videoEncodingBehavior:(long long)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
