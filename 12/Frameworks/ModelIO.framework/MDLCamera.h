<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MDLCamera.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ModelIO.framework/MDLCamera.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ModelIO.framework/ModelIO (1)
 */

@interface MDLCamera : MDLObject {
    CAAnimation * _apertureAnimation;
    CAAnimation * _apertureAspectAnimation;
    unsigned long long  _apertureBladeCount;
    float  _barrelDistortion;
    struct RTCamera { int (**x1)(); unsigned long long x2; unsigned long long x3; float x4; float x5; int x6; float *x7; id **x8; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_9_1_1[4]; } x9; struct RTRaySegment {} *x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; } * _camera;
    float  _chromaticAberration;
    float  _fStop;
    CAAnimation * _fStopAnimation;
    float  _fisheyeDistortion;
    void _flash;
    CAAnimation * _focalDistanceAnimation;
    CAAnimation * _focalLengthAnimation;
    float  _maximumCircleOfConfusion;
    float  _opticalVignetting;
    unsigned long long  _projection;
    double  _shutterOpenInterval;
    float  _worldToMetersConversionScale;
}

@property (nonatomic, copy) CAAnimation *apertureAnimation;
@property (nonatomic, copy) CAAnimation *apertureAspectAnimation;
@property (nonatomic) unsigned long long apertureBladeCount;
@property (nonatomic) float barrelDistortion;
@property (nonatomic) float chromaticAberration;
@property (nonatomic) void exposure;
@property (nonatomic) void exposureCompression;
@property (nonatomic) float fStop;
@property (nonatomic, copy) CAAnimation *fStopAnimation;
@property (nonatomic) float farVisibilityDistance;
@property (nonatomic) float fieldOfView;
@property (nonatomic) float fisheyeDistortion;
@property (nonatomic) void flash;
@property (nonatomic, copy) CAAnimation *focalDistanceAnimation;
@property (nonatomic) float focalLength;
@property (nonatomic, copy) CAAnimation *focalLengthAnimation;
@property (nonatomic) float focusDistance;
@property (nonatomic) float maximumCircleOfConfusion;
@property (nonatomic) float nearVisibilityDistance;
@property (nonatomic) float opticalVignetting;
@property (nonatomic) unsigned long long projection;
@property (nonatomic, readonly) struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; } projectionMatrix;
@property (nonatomic) float sensorAspect;
@property (nonatomic) void sensorEnlargement;
@property (nonatomic) void sensorShift;
@property (nonatomic) float sensorVerticalAperture;
@property (nonatomic) double shutterOpenInterval;
@property (nonatomic) float worldToMetersConversionScale;

// Image: /System/Library/Frameworks/ModelIO.framework/ModelIO

- (void).cxx_destruct;
- (float)aperture;
- (id)apertureAnimation;
- (id)apertureAspectAnimation;
- (unsigned long long)apertureBladeCount;
- (float)aspect;
- (float)barrelDistortion;
- (id)bokehKernelWithSize;
- (float)chromaticAberration;
- (float)circleOfConfusionForDistance:(float)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)exposure;
- (void)exposureCompression;
- (float)fStop;
- (id)fStopAnimation;
- (float)farVisibilityDistance;
- (float)fieldOfView;
- (float)fisheyeDistortion;
- (void)flash;
- (id)focalDistanceAnimation;
- (float)focalLength;
- (id)focalLengthAnimation;
- (float)focusDistance;
- (float)fov;
- (void)frameBoundingBox:(struct { })arg1 setNearAndFar:(bool)arg2;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })getProjectionMatrixAtTime:(double)arg1;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })getViewMatrixAtTime:(double)arg1;
- (id)init;
- (void)lookAt;
- (void)lookAtfrom;
- (float)maximumCircleOfConfusion;
- (float)nearVisibilityDistance;
- (float)opticalVignetting;
- (unsigned long long)projection;
- (struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x1[4]; })projectionMatrix;
- (void)rayToforViewPort;
- (struct RTCamera { int (**x1)(); unsigned long long x2; unsigned long long x3; float x4; float x5; int x6; float *x7; id **x8; struct { /* Warning: Unrecognized filer type: ']' using 'void*' */ void*x_9_1_1[4]; } x9; struct RTRaySegment {} *x10; float x11; float x12; float x13; float x14; float x15; float x16; float x17; float x18; float x19; float x20; }*)rtCamera;
- (float)sensorAspect;
- (void)sensorEnlargement;
- (void)sensorShift;
- (float)sensorVerticalAperture;
- (void)setAperture:(float)arg1;
- (void)setApertureAnimation:(id)arg1;
- (void)setApertureAspectAnimation:(id)arg1;
- (void)setApertureBladeCount:(unsigned long long)arg1;
- (void)setAspect:(float)arg1;
- (void)setBarrelDistortion:(float)arg1;
- (void)setChromaticAberration:(float)arg1;
- (void)setExposure;
- (void)setExposureCompression;
- (void)setFStop:(float)arg1;
- (void)setFStopAnimation:(id)arg1;
- (void)setFarVisibilityDistance:(float)arg1;
- (void)setFieldOfView:(float)arg1;
- (void)setFisheyeDistortion:(float)arg1;
- (void)setFlash;
- (void)setFocalDistanceAnimation:(id)arg1;
- (void)setFocalLength:(float)arg1;
- (void)setFocalLengthAnimation:(id)arg1;
- (void)setFocusDistance:(float)arg1;
- (void)setFov:(float)arg1;
- (void)setMaximumCircleOfConfusion:(float)arg1;
- (void)setNearVisibilityDistance:(float)arg1;
- (void)setOpticalVignetting:(float)arg1;
- (void)setProjection:(unsigned long long)arg1;
- (void)setSensorAspect:(float)arg1;
- (void)setSensorEnlargement;
- (void)setSensorShift;
- (void)setSensorVerticalAperture:(float)arg1;
- (void)setShutterOpenInterval:(double)arg1;
- (void)setWorldToMetersConversionScale:(float)arg1;
- (void)setZFar:(float)arg1;
- (void)setZNear:(float)arg1;
- (double)shutterOpenInterval;
- (long long)version;
- (float)worldToMetersConversionScale;
- (float)zFar;
- (float)zNear;

// Image: /System/Library/Frameworks/SceneKit.framework/SceneKit

+ (id)cameraWithSCNCamera:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
