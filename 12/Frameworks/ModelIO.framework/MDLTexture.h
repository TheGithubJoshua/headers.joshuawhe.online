<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MDLTexture.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ModelIO.framework/MDLTexture.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ModelIO.framework/ModelIO (1)
 */

@interface MDLTexture : NSObject <MDLNamed> {
    bool  _alphaValuesSet;
    NSData * _bottomLeftOriginData;
    long long  _channelEncoding;
    bool  _hasAlphaValues;
    NSString * _name;
    bool  _selfCreating;
    struct MDLTextureData { 
        char *topLeftBytesForMip[16]; 
        char *bottomLeftBytesForMip[16]; 
        int channelCount; 
        /* Warning: Unrecognized filer type: '"' using 'void*' */ void*dimensions; 
    }  _textureData;
    NSData * _topLeftOriginData;
}

@property (nonatomic, readonly) unsigned long long channelCount;
@property (nonatomic, readonly) long long channelEncoding;
@property (nonatomic, readonly) void dimensions;
@property (nonatomic) bool hasAlphaValues;
@property (nonatomic) bool isCube;
@property (nonatomic, readonly) unsigned long long mipLevelCount;
@property (nonatomic, copy) NSString *name;
@property (nonatomic, readonly) long long rowStride;

+ (id)_textureCubeWithSingleImageNamed:(id)arg1 bundle:(id)arg2;
+ (id)irradianceTextureCubeWithTexture:(void *)arg1 name:(void *)arg2 dimensions:(void *)arg3; // needs 3 arg types, found 2: id, id
+ (id)irradianceTextureCubeWithTexture:(void *)arg1 name:(void *)arg2 dimensions:(void *)arg3 roughness:(void *)arg4; // needs 4 arg types, found 3: id, id, float
+ (id)textureCubeWithImagesNamed:(id)arg1;
+ (id)textureCubeWithImagesNamed:(id)arg1 bundle:(id)arg2;
+ (id)textureFromResource:(id)arg1;
+ (id)textureNamed:(id)arg1;
+ (id)textureNamed:(id)arg1 assetResolver:(id)arg2;
+ (id)textureNamed:(id)arg1 bundle:(id)arg2;
+ (id)textureResourceNamed:(id)arg1 assetResolver:(id)arg2;
+ (id)textureWithURL:(id)arg1;
+ (id)textureWithURL:(id)arg1 offset:(unsigned long long)arg2 size:(unsigned long long)arg3;

- (void).cxx_destruct;
- (id)allocateDataAtLevel:(long long)arg1;
- (unsigned long long)channelCount;
- (long long)channelEncoding;
- (void)clearTexelData;
- (void)dimensions;
- (id)generateDataAtLevel:(long long)arg1;
- (bool)hasAlphaValues;
- (struct CGImage { }*)imageFromTexture;
- (struct CGImage { }*)imageFromTextureAtLevel:(unsigned long long)arg1;
- (id)init;
- (id)initWithData:(void *)arg1 topLeftOrigin:(void *)arg2 name:(void *)arg3 dimensions:(void *)arg4 rowStride:(void *)arg5 channelCount:(void *)arg6 channelEncoding:(void *)arg7 isCube:(void *)arg8; // needs 8 arg types, found 7: id, bool, id, long long, unsigned long long, long long, bool
- (bool)isCube;
- (void)loadDataWithBottomLeftOriginAtMipLevel:(long long)arg1 create:(bool)arg2;
- (void)loadDataWithTopLeftOriginAtMipLevel:(long long)arg1 create:(bool)arg2;
- (unsigned long long)mipLevelCount;
- (id)name;
- (long long)rowStride;
- (void)setHasAlphaValues:(bool)arg1;
- (void)setIsCube:(bool)arg1;
- (void)setName:(id)arg1;
- (void)setTexelDataWithBottomLeftOrigin:(id)arg1 atMipLevel:(long long)arg2;
- (void)setTexelDataWithTopLeftOrigin:(id)arg1 atMipLevel:(long long)arg2;
- (id)texelDataWithBottomLeftOrigin;
- (id)texelDataWithBottomLeftOriginAtMipLevel:(long long)arg1 create:(bool)arg2;
- (id)texelDataWithTopLeftOrigin;
- (id)texelDataWithTopLeftOrigin:(unsigned long long)arg1;
- (id)texelDataWithTopLeftOriginAtMipLevel:(long long)arg1 create:(bool)arg2;
- (struct MDLTextureData { char *x1[16]; char *x2[16]; int x3; unsigned long long x4; bool x5; }*)textureData;
- (bool)writeToURL:(id)arg1;
- (bool)writeToURL:(id)arg1 level:(unsigned long long)arg2;
- (bool)writeToURL:(id)arg1 type:(struct __CFString { }*)arg2;
- (bool)writeToURL:(id)arg1 type:(struct __CFString { }*)arg2 level:(unsigned long long)arg3;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
