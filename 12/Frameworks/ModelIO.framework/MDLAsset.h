<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MDLAsset.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/ModelIO.framework/MDLAsset.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/ModelIO.framework/ModelIO (1)
 */

@interface MDLAsset : NSObject <NSCopying, NSFastEnumeration> {
    NSURL * _URL;
    double  __timeCodesPerSecond;
    <MDLObjectContainerComponent> * _animations;
    <MDLMeshBufferAllocator> * _bufferAllocator;
    NSMapTable * _components;
    double  _endTime;
    double  _frameInterval;
    bool  _isSceneKitBridged;
    <MDLObjectContainerComponent> * _masters;
    NSMutableArray * _objects;
    <MDLAssetResolver> * _resolver;
    double  _startTime;
    NSURL * _temporaryFolderURL;
    NSUnitLength * _unitLength;
    void _upAxis;
    MDLVertexDescriptor * _vertexDescriptor;
}

@property (nonatomic, readonly, retain) NSURL *URL;
@property (nonatomic, readonly) struct MDLAABB { } _bounds;
@property (nonatomic, retain) NSURL *_temporaryFolderURL;
@property (nonatomic) double _timeCodesPerSecond;
@property (nonatomic, retain) <MDLObjectContainerComponent> *animations;
@property (nonatomic, readonly) struct { } boundingBox;
@property (nonatomic, readonly, retain) <MDLMeshBufferAllocator> *bufferAllocator;
@property (nonatomic, readonly) unsigned long long count;
@property (nonatomic) double endTime;
@property (nonatomic) double frameInterval;
@property (nonatomic, retain) <MDLObjectContainerComponent> *masters;
@property (nonatomic, retain) <MDLAssetResolver> *resolver;
@property (nonatomic) double startTime;
@property (nonatomic, retain) NSUnitLength *unitLength;
@property (nonatomic) void upAxis;
@property (nonatomic, readonly, retain) MDLVertexDescriptor *vertexDescriptor;

// Image: /System/Library/Frameworks/ModelIO.framework/ModelIO

+ (bool)canExportFileExtension:(id)arg1;
+ (bool)canImportFileExtension:(id)arg1;
+ (id)placeLightProbesWithDensity:(float)arg1 heuristic:(long long)arg2 usingIrradianceDataSource:(id)arg3;

- (void).cxx_destruct;
- (id)URL;
- (struct MDLAABB { })_bounds;
- (void)_commonInit;
- (void)_conformVertexBuffers:(id)arg1 error:(id*)arg2;
- (id)_temporaryFolderURL;
- (double)_timeCodesPerSecond;
- (void)addObject:(id)arg1;
- (id)animations;
- (struct { })boundingBox;
- (struct { })boundingBoxAtTime:(double)arg1;
- (id)bufferAllocator;
- (id)childObjectsOfClass:(Class)arg1;
- (id)componentConformingToProtocol:(id)arg1;
- (id)components;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)count;
- (unsigned long long)countByEnumeratingWithState:(struct { unsigned long long x1; id *x2; unsigned long long *x3; unsigned long long x4[5]; }*)arg1 objects:(id*)arg2 count:(unsigned long long)arg3;
- (void)dealloc;
- (id)description;
- (double)endTime;
- (void)enumerateChildObjectsOfClass:(Class)arg1 usingBlock:(id /* block */)arg2 stopPointer:(bool*)arg3;
- (bool)exportAssetToURL:(id)arg1;
- (bool)exportAssetToURL:(id)arg1 error:(id*)arg2;
- (double)frameInterval;
- (id)init;
- (id)initThroughSCNKitBridgeWithURL:(id)arg1 preserveTopology:(bool)arg2 error:(id)arg3;
- (id)initWithBufferAllocator:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)initWithURL:(id)arg1 bufferAllocator:(id)arg2 preserveIndexing:(bool)arg3 error:(id*)arg4;
- (id)initWithURL:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (id)initWithURL:(id)arg1 vertexDescriptor:(id)arg2 bufferAllocator:(id)arg3;
- (id)initWithURL:(id)arg1 vertexDescriptor:(id)arg2 bufferAllocator:(id)arg3 preserveTopology:(bool)arg4 error:(id*)arg5;
- (void)loadTextures;
- (id)masters;
- (id)objectAtIndex:(unsigned long long)arg1;
- (id)objectAtIndexedSubscript:(unsigned long long)arg1;
- (id)objectAtPath:(id)arg1;
- (id)objectForKeyedSubscript:(id)arg1;
- (id)objects;
- (void)removeObject:(id)arg1;
- (void)resolveTextures;
- (id)resolver;
- (void)setAnimations:(id)arg1;
- (void)setComponent:(id)arg1 forProtocol:(id)arg2;
- (void)setEndTime:(double)arg1;
- (void)setFrameInterval:(double)arg1;
- (void)setMasters:(id)arg1;
- (void)setObject:(id)arg1 forKeyedSubscript:(id)arg2;
- (void)setResolver:(id)arg1;
- (void)setStartTime:(double)arg1;
- (void)setUnitLength:(id)arg1;
- (void)setUpAxis;
- (void)set_temporaryFolderURL:(id)arg1;
- (void)set_timeCodesPerSecond:(double)arg1;
- (double)startTime;
- (id)unitLength;
- (void)upAxis;
- (id)vertexDescriptor;

// Image: /System/Library/Frameworks/SceneKit.framework/SceneKit

+ (id)assetWithSCNNode:(id)arg1;
+ (id)assetWithSCNNode:(id)arg1 bufferAllocator:(id)arg2;
+ (id)assetWithSCNScene:(id)arg1;
+ (id)assetWithSCNScene:(id)arg1 bufferAllocator:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
