<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVTransportControlsView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVKit.framework/AVTransportControlsView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVKit.framework/AVKit (448.1.20)
 */

@interface AVTransportControlsView : AVView <AVScrubberDelegate> {
    AVBackdropView * _backdropView;
    bool  _backdropViewNeedsLayout;
    _UIVisualEffectBackdropView * _captureView;
    bool  _collapsed;
    NSArray * _customButtons;
    UIView * _customContentTransitioningInfoPanel;
    <AVTransportControlsViewDelegate> * _delegate;
    AVBackdropView * _detachedExtraContentBackdropView;
    NSArray * _doubleRowLayoutConstraints;
    bool  _doubleRowLayoutEnabled;
    AVLabel * _elapsedTimeLabel;
    AVTouchIgnoringView * _embeddedExtraContentContainer;
    struct CGSize { 
        double width; 
        double height; 
    }  _extrinsicContentSize;
    bool  _hasAlternateAppearance;
    bool  _hasFullScreenAppearance;
    bool  _included;
    AVLabel * _liveBroadcastLabel;
    AVLabel * _liveBroadcastScrubberLabel;
    bool  _liveStreamingControlsIncludeScrubber;
    AVButton * _mediaSelectionButton;
    double  _minimumRequiredWidth;
    AVPlaybackControlsRoutePickerView * _routePickerView;
    UILabel * _scrubInstructionsBackdropLabel;
    UILabel * _scrubInstructionsLabel;
    NSTimer * _scrubInstructionsTimer;
    AVScrubber * _scrubber;
    NSLayoutConstraint * _scrubberInstructionsDoubleRowActiveConstraint;
    float  _scrubberValueWhenScrubInstructionsTimerBegan;
    bool  _showsLiveStreamingControls;
    bool  _showsLoadingIndicator;
    AVButton * _skipBackButton;
    AVButton * _skipForwardButton;
    AVButton * _standardPlayPauseButton;
    AVButton * _startLeftwardContentTransitionButton;
    AVButton * _startRightwardContentTransitionButton;
    AVStyleSheet * _styleSheet;
    AVLabel * _timeRemainingLabel;
}

@property (nonatomic, readonly) AVBackdropView *backdropView;
@property (nonatomic) bool backdropViewNeedsLayout;
@property (nonatomic, readonly) _UIVisualEffectBackdropView *captureView;
@property (getter=isCollapsed, nonatomic) bool collapsed;
@property (getter=isCollapsedOrExcluded, nonatomic, readonly) bool collapsedOrExcluded;
@property (nonatomic, copy) NSArray *customButtons;
@property (nonatomic, retain) UIView *customContentTransitioningInfoPanel;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AVTransportControlsViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) AVBackdropView *detachedExtraContentBackdropView;
@property (nonatomic, readonly) NSArray *doubleRowLayoutConstraints;
@property (getter=isDoubleRowLayoutEnabled, nonatomic) bool doubleRowLayoutEnabled;
@property (nonatomic, readonly) AVLabel *elapsedTimeLabel;
@property (nonatomic, readonly) AVTouchIgnoringView *embeddedExtraContentContainer;
@property (nonatomic) struct CGSize { double x1; double x2; } extrinsicContentSize;
@property (nonatomic) bool hasAlternateAppearance;
@property (nonatomic) bool hasFullScreenAppearance;
@property (readonly) unsigned long long hash;
@property (getter=isIncluded, nonatomic) bool included;
@property (nonatomic, readonly) AVLabel *liveBroadcastLabel;
@property (nonatomic, readonly) AVLabel *liveBroadcastScrubberLabel;
@property (nonatomic) bool liveStreamingControlsIncludeScrubber;
@property (nonatomic, readonly) AVButton *mediaSelectionButton;
@property (nonatomic, readonly) double minimumRequiredWidth;
@property (nonatomic, readonly) AVPlaybackControlsRoutePickerView *routePickerView;
@property (nonatomic, readonly) UILabel *scrubInstructionsBackdropLabel;
@property (nonatomic, readonly) UILabel *scrubInstructionsLabel;
@property (nonatomic) NSTimer *scrubInstructionsTimer;
@property (nonatomic, readonly) AVScrubber *scrubber;
@property (nonatomic, readonly) NSLayoutConstraint *scrubberInstructionsDoubleRowActiveConstraint;
@property (nonatomic) float scrubberValueWhenScrubInstructionsTimerBegan;
@property (nonatomic) bool showsLiveStreamingControls;
@property (nonatomic) bool showsLoadingIndicator;
@property (nonatomic, readonly) NSArray *singleRowViews;
@property (nonatomic, readonly) AVButton *skipBackButton;
@property (nonatomic, readonly) AVButton *skipForwardButton;
@property (nonatomic, readonly) AVButton *standardPlayPauseButton;
@property (nonatomic, readonly) AVButton *startLeftwardContentTransitionButton;
@property (nonatomic, readonly) AVButton *startRightwardContentTransitionButton;
@property (nonatomic, retain) AVStyleSheet *styleSheet;
@property (readonly) Class superclass;
@property (nonatomic, readonly) AVLabel *timeRemainingLabel;

+ (bool)requiresConstraintBasedLayout;

- (void).cxx_destruct;
- (void)_ensureLayoutConstraints;
- (id)_scrubInstructionsAttributedText;
- (void)_showScrubInstructions;
- (void)_updateCustomContentTransitioningInfoPanelLayout;
- (void)_updateFontSizes;
- (void)_updateScrubInstructionsLabelsText;
- (id)backdropView;
- (bool)backdropViewNeedsLayout;
- (void)beginScrubbing:(id)arg1;
- (id)captureView;
- (id)customButtons;
- (id)customContentTransitioningInfoPanel;
- (id)delegate;
- (id)detachedExtraContentBackdropView;
- (id)doubleRowLayoutConstraints;
- (id)elapsedTimeLabel;
- (id)embeddedExtraContentContainer;
- (void)endScrubbing:(id)arg1;
- (struct CGSize { double x1; double x2; })extrinsicContentSize;
- (bool)hasAlternateAppearance;
- (bool)hasFullScreenAppearance;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 styleSheet:(id)arg2 captureView:(id)arg3;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isCollapsed;
- (bool)isCollapsedOrExcluded;
- (bool)isDoubleRowLayoutEnabled;
- (bool)isIncluded;
- (void)layoutSubviews;
- (id)liveBroadcastLabel;
- (id)liveBroadcastScrubberLabel;
- (bool)liveStreamingControlsIncludeScrubber;
- (id)mediaSelectionButton;
- (double)minimumRequiredWidth;
- (id)routePickerView;
- (id)scrubInstructionsBackdropLabel;
- (id)scrubInstructionsLabel;
- (id)scrubInstructionsTimer;
- (id)scrubber;
- (id)scrubberInstructionsDoubleRowActiveConstraint;
- (void)scrubberSlowKnobMovementDetected:(id)arg1;
- (void)scrubberValueChanged:(id)arg1;
- (float)scrubberValueWhenScrubInstructionsTimerBegan;
- (void)setBackdropViewNeedsLayout:(bool)arg1;
- (void)setCollapsed:(bool)arg1;
- (void)setCustomButtons:(id)arg1;
- (void)setCustomContentTransitioningInfoPanel:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDetachedExtraContentBackdropView:(id)arg1;
- (void)setDoubleRowLayoutEnabled:(bool)arg1;
- (void)setExtrinsicContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHasAlternateAppearance:(bool)arg1;
- (void)setHasFullScreenAppearance:(bool)arg1;
- (void)setIncluded:(bool)arg1;
- (void)setLiveStreamingControlsIncludeScrubber:(bool)arg1;
- (void)setScrubInstructionsTimer:(id)arg1;
- (void)setScrubberValueWhenScrubInstructionsTimerBegan:(float)arg1;
- (void)setShowsLiveStreamingControls:(bool)arg1;
- (void)setShowsLoadingIndicator:(bool)arg1;
- (void)setStyleSheet:(id)arg1;
- (bool)showsLiveStreamingControls;
- (bool)showsLoadingIndicator;
- (id)singleRowViews;
- (id)skipBackButton;
- (id)skipForwardButton;
- (id)standardPlayPauseButton;
- (id)startLeftwardContentTransitionButton;
- (id)startRightwardContentTransitionButton;
- (id)styleSheet;
- (id)timeRemainingLabel;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateConstraints;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
