<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVPictureInPictureController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVKit.framework/AVPictureInPictureController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVKit.framework/AVKit (448.1.20)
 */

@interface AVPictureInPictureController : NSObject <AVPictureInPictureViewControllerDelegate, PGPictureInPictureProxyDelegate> {
    bool  _allowsPictureInPictureFromInlineWhenEnteringBackground;
    bool  _allowsPictureInPicturePlayback;
    <AVPictureInPictureControllerDelegate> * _delegate;
    struct { 
        bool pictureInPictureControllerWillStartPictureInPicture; 
        bool pictureInPictureControllerDidStartPictureInPicture; 
        bool pictureInPictureController_failedToStartPictureInPictureWithError; 
        bool pictureInPictureControllerWillStopPictureInPicture; 
        bool pictureInPictureControllerDidStopPictureInPicture; 
        bool pictureInPictureController_restoreUserInterfaceForPictureInPictureStopWithCompletionHandler; 
    }  _delegateRespondsTo;
    NSObject<OS_dispatch_source> * _fullScreenCheckTimer;
    bool  _isFullScreen;
    bool  _isPlaying;
    bool  _isRedirectingVideoForPIP;
    AVObservationController * _keyValueObservationController;
    PGPictureInPictureProxy * _pictureInPictureProxy;
    AVPictureInPictureViewController * _pictureInPictureViewController;
    AVPlayerController * _playerController;
    AVPlayerLayer * _playerLayer;
    __AVPlayerLayerView * _playerLayerView;
    AVSecondScreenConnection * _secondScreenConnection;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _viewFrameForInteractiveTransitionAnimationWhenEnteringBackground;
}

@property (nonatomic) bool allowsPictureInPictureFromInlineWhenEnteringBackground;
@property (nonatomic) bool allowsPictureInPicturePlayback;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AVPictureInPictureControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (getter=isPictureInPictureActive, nonatomic, readonly) bool pictureInPictureActive;
@property (getter=isPictureInPicturePossible, nonatomic, readonly) bool pictureInPicturePossible;
@property (getter=isPictureInPictureSuspended, nonatomic, readonly) bool pictureInPictureSuspended;
@property (nonatomic, readonly) bool pictureInPictureWasStartedWhenEnteringBackground;
@property (nonatomic, retain) AVPlayerController *playerController;
@property (nonatomic, readonly) AVPlayerLayer *playerLayer;
@property (nonatomic, readonly) __AVPlayerLayerView *playerLayerView;
@property (readonly) Class superclass;

+ (bool)isPictureInPictureSupported;
+ (id)keyPathsForValuesAffectingPictureInPictureActive;
+ (id)keyPathsForValuesAffectingPictureInPicturePossible;
+ (id)keyPathsForValuesAffectingPictureInPictureSuspended;
+ (id)keyPathsForValuesAffectingPictureInPictureWasStartedWhenEnteringBackground;
+ (id)pictureInPictureButtonStartImageCompatibleWithTraitCollection:(id)arg1;
+ (id)pictureInPictureButtonStopImageCompatibleWithTraitCollection:(id)arg1;

- (void).cxx_destruct;
- (void)_checkIsFullScreenAndUpdatePictureInPictureShouldStartWhenEnteringBackground;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_playerLayerVideoRectInScreen;
- (void)_startRedirectingLayerForPictureInPicture;
- (void)_stopRedirectingLayerForPictureInPicture;
- (void)_updatePictureInPictureShouldStartWhenEnteringBackground;
- (void)_updatePlaybackProgress;
- (id)_window;
- (bool)allowsPictureInPictureFromInlineWhenEnteringBackground;
- (bool)allowsPictureInPicturePlayback;
- (void)dealloc;
- (id)delegate;
- (id)init;
- (id)initWithPlayerLayer:(id)arg1;
- (id)initWithPlayerLayerView:(id)arg1;
- (bool)isPictureInPictureActive;
- (bool)isPictureInPicturePossible;
- (bool)isPictureInPictureSuspended;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)pictureInPictureProxy:(id)arg1 didStartPictureInPictureWithAnimationType:(long long)arg2;
- (void)pictureInPictureProxy:(id)arg1 didStopPictureInPictureWithAnimationType:(long long)arg2 reason:(long long)arg3;
- (void)pictureInPictureProxy:(id)arg1 failedToStartPictureInPictureWithAnimationType:(long long)arg2 error:(id)arg3;
- (void)pictureInPictureProxy:(id)arg1 restoreUserInterfaceForPictureInPictureStopWithCompletionHandler:(id /* block */)arg2;
- (void)pictureInPictureProxy:(id)arg1 willStartPictureInPictureWithAnimationType:(long long)arg2;
- (void)pictureInPictureProxy:(id)arg1 willStopPictureInPictureWithAnimationType:(long long)arg2 reason:(long long)arg3;
- (long long)pictureInPictureProxyInterfaceOrientationForTransitionAnimation:(id)arg1;
- (void)pictureInPictureProxyPictureInPictureInterruptionBegan:(id)arg1;
- (void)pictureInPictureProxyPictureInPictureInterruptionEnded:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pictureInPictureProxyViewFrameForTransitionAnimation:(id)arg1;
- (void)pictureInPictureViewControllerViewDidAppear:(id)arg1;
- (void)pictureInPictureViewControllerViewWillDisappear:(id)arg1;
- (bool)pictureInPictureWasStartedWhenEnteringBackground;
- (id)playerController;
- (id)playerLayer;
- (void)playerLayerLayoutDidChange;
- (id)playerLayerView;
- (void)setAllowsPictureInPictureFromInlineWhenEnteringBackground:(bool)arg1;
- (void)setAllowsPictureInPicturePlayback:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setPlayerController:(id)arg1;
- (void)startPictureInPicture;
- (void)stopPictureInPicture;
- (void)stopPictureInPictureEvenWhenInBackground;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
