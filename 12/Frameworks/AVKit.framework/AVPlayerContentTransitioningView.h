<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVPlayerContentTransitioningView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVKit.framework/AVPlayerContentTransitioningView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVKit.framework/AVKit (448.1.20)
 */

@interface AVPlayerContentTransitioningView : UIScrollView <AVContentTransitioning, UIScrollViewDelegate> {
    AVPlayerLayerAndContentOverlayContainerView * _activeContentView;
    long long  _boundsOrContentSizeAdjustmentCount;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentMargins;
    <AVContentTransitioningDelegate> * _contentTransitioningDelegate;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frameForActiveContentView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _frameForTransitioningContentView;
    bool  _playingOnSecondScreen;
    NSString * _stateDescription;
    NSValue * _targetContentOffset;
    long long  _transitionDirection;
    bool  _transitionInteractive;
    double  _transitionProgress;
    long long  _transitionState;
    AVPlayerLayerAndContentOverlayContainerView * _transitioningContentView;
}

@property (nonatomic, readonly) AVPlayerLayerAndContentOverlayContainerView *activeContentView;
@property (nonatomic) long long boundsOrContentSizeAdjustmentCount;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentMargins;
@property (nonatomic) <AVContentTransitioningDelegate> *contentTransitioningDelegate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameForActiveContentView;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } frameForTransitioningContentView;
@property (readonly) unsigned long long hash;
@property (getter=isPlayingOnSecondScreen, nonatomic) bool playingOnSecondScreen;
@property (nonatomic, copy) NSString *stateDescription;
@property (readonly) Class superclass;
@property (nonatomic, retain) NSValue *targetContentOffset;
@property (nonatomic, readonly) long long transitionDirection;
@property (getter=isTransitionInteractive, nonatomic) bool transitionInteractive;
@property (nonatomic, readonly) double transitionProgress;
@property (nonatomic, readonly) long long transitionState;
@property (nonatomic, readonly) AVPlayerLayerAndContentOverlayContainerView *transitioningContentView;

- (void).cxx_destruct;
- (bool)_canTransitionFromState:(long long)arg1 toState:(long long)arg2;
- (id)_descriptionForState:(long long)arg1;
- (void)_ensureContentViews;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameExcludingActiveContent;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameExcludingTransitioningContent;
- (bool)_isAdjustingBoundsOrContentSize;
- (id)_makeStateDescription;
- (void)_performBoundsOrContentSizeAdjustment:(id /* block */)arg1;
- (void)_setTransitionState:(id)arg1 transitionDirection:(id)arg2 transitionProgress:(id)arg3;
- (void)_updateSizeAndContentFrame;
- (void)_updateTransitionStateIfPossible;
- (id)activeContentView;
- (long long)boundsOrContentSizeAdjustmentCount;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentMargins;
- (id)contentTransitioningDelegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForActiveContentView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForTransitioningContentView;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 playerLayerView:(id)arg2;
- (bool)isPlayingOnSecondScreen;
- (bool)isTransitionInteractive;
- (void)performTransition:(long long)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)setBoundsOrContentSizeAdjustmentCount:(long long)arg1;
- (void)setContentMargins:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentTransitioningDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrameForActiveContentView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrameForTransitioningContentView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setPlayingOnSecondScreen:(bool)arg1;
- (void)setStateDescription:(id)arg1;
- (void)setTargetContentOffset:(id)arg1;
- (void)setTransitionInteractive:(bool)arg1;
- (id)stateDescription;
- (id)targetContentOffset;
- (long long)transitionDirection;
- (double)transitionProgress;
- (long long)transitionState;
- (id)transitioningContentView;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
