<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVPlayerViewControllerContentView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVKit.framework/AVPlayerViewControllerContentView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVKit.framework/AVKit (448.1.20)
 */

@interface AVPlayerViewControllerContentView : UIView <AVCaptureViewConfiguring, AVContentTransitioning> {
    UIImageView * _audioOnlyIndicatorView;
    NSString * _automaticVideoGravity;
    bool  _backdropCaptureViewHidden;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _boundsForLastLayoutSubviews;
    bool  _canAutomaticallyZoomLetterboxVideos;
    NSString * _captureGroupName;
    _UIVisualEffectBackdropView * _captureView;
    AVPlayerContentTransitioningView * _contentTransitioningView;
    <AVPlayerViewControllerContentViewDelegate> * _delegate;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _edgeInsetsForLetterboxedContent;
    NSString * _externalPlaybackIndicatorSubtitle;
    NSString * _externalPlaybackIndicatorTitle;
    AVExternalPlaybackIndicatorView * _externalPlaybackIndicatorView;
    UIView * _iAdPreRollView;
    UIView * _interactiveContentOverlayView;
    bool  _needsInitialLayout;
    AVPlaybackControlsView * _playbackControlsView;
    __AVPlayerLayerView * _playerLayerView;
    AVStyleSheet * _styleSheet;
    bool  _styleSheetShouldUseCompactFullScreenItemSize;
    NSMutableDictionary * _targetVideoGravities;
    AVTurboModePlaybackControlsPlaceholderView * _turboModePlaybackControlsPlaceholderView;
    UIImageView * _unsupportedContentIndicatorView;
}

@property (nonatomic, readonly) AVPlayerLayerAndContentOverlayContainerView *activeContentView;
@property (nonatomic, readonly) UIImageView *audioOnlyIndicatorView;
@property (nonatomic, readonly) UIImageView *audioOnlyIndicatorViewIfLoaded;
@property (nonatomic, copy) NSString *automaticVideoGravity;
@property (nonatomic) bool backdropCaptureViewHidden;
@property (nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } boundsForLastLayoutSubviews;
@property (nonatomic) bool canAutomaticallyZoomLetterboxVideos;
@property (nonatomic, readonly) NSString *captureGroupName;
@property (nonatomic, readonly) _UIVisualEffectBackdropView *captureView;
@property (nonatomic) <AVContentTransitioningDelegate> *contentTransitioningDelegate;
@property (nonatomic, readonly) AVPlayerContentTransitioningView *contentTransitioningView;
@property (nonatomic, readonly) UIPanGestureRecognizer *contentTransitioningViewGestureRecognizer;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <AVPlayerViewControllerContentViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } edgeInsetsForLetterboxedContent;
@property (nonatomic, copy) NSString *externalPlaybackIndicatorSubtitle;
@property (nonatomic, copy) NSString *externalPlaybackIndicatorTitle;
@property (nonatomic, readonly) AVExternalPlaybackIndicatorView *externalPlaybackIndicatorView;
@property (nonatomic, readonly) AVExternalPlaybackIndicatorView *externalPlaybackIndicatorViewIfLoaded;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIView *iAdPreRollView;
@property (nonatomic, readonly) UIView *iAdPreRollViewIfLoaded;
@property (nonatomic, readonly) UIView *interactiveContentOverlayView;
@property (nonatomic, readonly) bool isCoveringWindow;
@property (nonatomic, readonly) bool isDescendantOfNonPagingScrollView;
@property (nonatomic, readonly) unsigned long long layoutClass;
@property (nonatomic) bool needsInitialLayout;
@property (nonatomic, readonly) AVPlaybackControlsView *playbackControlsView;
@property (nonatomic, readonly) UIView *playerLayerAndContentOverlayContainerView;
@property (nonatomic, retain) __AVPlayerLayerView *playerLayerView;
@property (nonatomic, retain) AVStyleSheet *styleSheet;
@property (nonatomic) bool styleSheetShouldUseCompactFullScreenItemSize;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSMutableDictionary *targetVideoGravities;
@property (nonatomic, readonly) long long transitionDirection;
@property (getter=isTransitionInteractive, nonatomic, readonly) bool transitionInteractive;
@property (nonatomic, readonly) double transitionProgress;
@property (nonatomic, readonly) long long transitionState;
@property (nonatomic, readonly) AVPlayerLayerAndContentOverlayContainerView *transitioningContentView;
@property (nonatomic, readonly) AVTurboModePlaybackControlsPlaceholderView *turboModePlaybackControlsPlaceholderView;
@property (nonatomic, readonly) UIImageView *unsupportedContentIndicatorView;
@property (nonatomic, readonly) UIImageView *unsupportedContentIndicatorViewIfLoaded;

- (void).cxx_destruct;
- (void)_applyVideoGravityIfNeeded:(long long)arg1;
- (void)_insertPlaybackControlsOrPlaceholderView:(id)arg1;
- (bool)_isBeingTransitionedToOrFromFullScreen;
- (void)_loadTurboModePlaybackControlsPlaceholderViewIfNeeded;
- (id)_mediaTimingFunctionForCurrentAnimationCurve;
- (void)_updatePlayerLayerAndContentOverlayContainerViewLayoutMarginsForVideoGravity:(long long)arg1;
- (void)_updateStyleSheet;
- (void)_updateVideoGravityDuringLayoutSubviewsAndAssertThatIfYouBreakThisMethodYouOwnThisMethod;
- (id)activeContentView;
- (void)addPlayerLayerAndContentOverlayContainerViewIfNeeded;
- (id)audioOnlyIndicatorView;
- (id)audioOnlyIndicatorViewIfLoaded;
- (id)automaticVideoGravity;
- (bool)backdropCaptureViewHidden;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForLastLayoutSubviews;
- (bool)canAutomaticallyZoomLetterboxVideos;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (id)captureGroupName;
- (id)captureView;
- (void)configureBackdropView:(id)arg1;
- (id)contentTransitioningDelegate;
- (id)contentTransitioningView;
- (id)contentTransitioningViewGestureRecognizer;
- (void)dealloc;
- (id)delegate;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })edgeInsetsForLetterboxedContent;
- (id)externalPlaybackIndicatorSubtitle;
- (id)externalPlaybackIndicatorTitle;
- (id)externalPlaybackIndicatorView;
- (id)externalPlaybackIndicatorViewIfLoaded;
- (id)iAdPreRollView;
- (id)iAdPreRollViewIfLoaded;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 playerLayerView:(id)arg2 targetVideoGravities:(id)arg3;
- (id)interactiveContentOverlayView;
- (bool)isCoveringWindow;
- (bool)isDescendantOfNonPagingScrollView;
- (bool)isTransitionInteractive;
- (bool)isViewDescendantOfPlaybackControlsSubview:(id)arg1;
- (unsigned long long)layoutClass;
- (void)layoutSubviews;
- (void)loadPlaybackControlsViewIfNeeded;
- (bool)needsInitialLayout;
- (void)performTransition:(long long)arg1;
- (id)playbackControlsView;
- (id)playerLayerAndContentOverlayContainerView;
- (id)playerLayerView;
- (void)playerLayerViewDidChange;
- (void)setAutomaticVideoGravity:(id)arg1;
- (void)setBackdropCaptureViewHidden:(bool)arg1;
- (void)setBoundsForLastLayoutSubviews:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCanAutomaticallyZoomLetterboxVideos:(bool)arg1;
- (void)setContentTransitioningDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEdgeInsetsForLetterboxedContent:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setExternalPlaybackIndicatorSubtitle:(id)arg1;
- (void)setExternalPlaybackIndicatorTitle:(id)arg1;
- (void)setExternalPlaybackIndicatorTitle:(id)arg1 subtitle:(id)arg2;
- (void)setNeedsInitialLayout:(bool)arg1;
- (void)setPlayerLayerView:(id)arg1;
- (void)setShowsAudioOnlyIndicator:(bool)arg1;
- (void)setShowsExternalPlaybackIndicator:(bool)arg1;
- (void)setShowsUnsupportedContentIndicator:(bool)arg1;
- (void)setStyleSheet:(id)arg1;
- (void)setStyleSheetShouldUseCompactFullScreenItemSize:(bool)arg1;
- (void)setTargetVideoGravity:(id)arg1 forLayoutClass:(unsigned long long)arg2;
- (void)setVideoGravityForTransitioningContent:(id)arg1;
- (id)styleSheet;
- (bool)styleSheetShouldUseCompactFullScreenItemSize;
- (id)targetVideoGravities;
- (long long)transitionDirection;
- (double)transitionProgress;
- (long long)transitionState;
- (id)transitioningContentView;
- (id)turboModePlaybackControlsPlaceholderView;
- (id)unsupportedContentIndicatorView;
- (id)unsupportedContentIndicatorViewIfLoaded;
- (void)updateBackdropCaptureViewHidden;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
