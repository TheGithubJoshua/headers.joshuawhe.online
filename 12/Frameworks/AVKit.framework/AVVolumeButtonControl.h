<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>AVVolumeButtonControl.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/AVKit.framework/AVVolumeButtonControl.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/AVKit.framework/AVKit (448.1.20)
 */

@interface AVVolumeButtonControl : UIControl <AVExternalGestureRecognizerPreventing, AVPlaybackControlsViewItem> {
    bool  _collapsed;
    struct CGPoint { 
        double x; 
        double y; 
    }  _cumulativeTranslationSincePanningBegan;
    struct CGSize { 
        double width; 
        double height; 
    }  _extrinsicContentSize;
    UISelectionFeedbackGenerator * _feedbackGenerator;
    bool  _hasAlternateAppearance;
    bool  _hasFullScreenAppearance;
    UIViewPropertyAnimator * _highlightAnimator;
    struct NSDirectionalEdgeInsets { 
        double top; 
        double leading; 
        double bottom; 
        double trailing; 
    }  _hitRectInsets;
    bool  _included;
    struct CGPoint { 
        double x; 
        double y; 
    }  _initialPreciseLocationOfTouch;
    struct CGPoint { 
        double x; 
        double y; 
    }  _locationOfTouchInWindow;
    bool  _longPressEnabled;
    NSTimer * _longPressTimer;
    AVMicaPackage * _micaPackage;
    NSString * _micaPackageStateName;
    bool  _showsHighlightedAppearance;
    long long  _trackingState;
    struct CGPoint { 
        double x; 
        double y; 
    }  _translationOfPanFromPreviousTouch;
}

@property (getter=isCollapsed, nonatomic) bool collapsed;
@property (getter=isCollapsedOrExcluded, nonatomic, readonly) bool collapsedOrExcluded;
@property (nonatomic) struct CGPoint { double x1; double x2; } cumulativeTranslationSincePanningBegan;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) struct CGSize { double x1; double x2; } extrinsicContentSize;
@property (nonatomic, readonly) UISelectionFeedbackGenerator *feedbackGenerator;
@property (nonatomic) bool hasAlternateAppearance;
@property (nonatomic) bool hasFullScreenAppearance;
@property (readonly) unsigned long long hash;
@property (nonatomic) UIViewPropertyAnimator *highlightAnimator;
@property (nonatomic) struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; } hitRectInsets;
@property (getter=isIncluded, nonatomic) bool included;
@property (nonatomic) struct CGPoint { double x1; double x2; } initialPreciseLocationOfTouch;
@property (nonatomic) struct CGPoint { double x1; double x2; } locationOfTouchInWindow;
@property (getter=isLongPressEnabled, nonatomic) bool longPressEnabled;
@property (nonatomic) NSTimer *longPressTimer;
@property (nonatomic, retain) AVMicaPackage *micaPackage;
@property (nonatomic, retain) NSString *micaPackageStateName;
@property (nonatomic) bool showsHighlightedAppearance;
@property (readonly) Class superclass;
@property (nonatomic) long long trackingState;
@property (nonatomic) struct CGPoint { double x1; double x2; } translationOfPanFromPreviousTouch;

- (void).cxx_destruct;
- (void)_updateIsHiddenAndAlpha;
- (void)_updateMicaPackage:(id)arg1;
- (bool)avkit_shouldPreventExternalGestureRecognizerAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)beginTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (void)cancelTrackingWithEvent:(id)arg1;
- (bool)continueTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (struct CGPoint { double x1; double x2; })cumulativeTranslationSincePanningBegan;
- (void)endTrackingWithTouch:(id)arg1 withEvent:(id)arg2;
- (struct CGSize { double x1; double x2; })extrinsicContentSize;
- (id)feedbackGenerator;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)hasAlternateAppearance;
- (bool)hasFullScreenAppearance;
- (id)highlightAnimator;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hitRect;
- (struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })hitRectInsets;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })initialPreciseLocationOfTouch;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isCollapsed;
- (bool)isCollapsedOrExcluded;
- (bool)isIncluded;
- (bool)isLongPressEnabled;
- (struct CGPoint { double x1; double x2; })locationOfTouchInWindow;
- (id)longPressTimer;
- (id)micaPackage;
- (id)micaPackageStateName;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCollapsed:(bool)arg1;
- (void)setCumulativeTranslationSincePanningBegan:(struct CGPoint { double x1; double x2; })arg1;
- (void)setExtrinsicContentSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setHasAlternateAppearance:(bool)arg1;
- (void)setHasFullScreenAppearance:(bool)arg1;
- (void)setHighlightAnimator:(id)arg1;
- (void)setHitRectInsets:(struct NSDirectionalEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setIncluded:(bool)arg1;
- (void)setInitialPreciseLocationOfTouch:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLocationOfTouchInWindow:(struct CGPoint { double x1; double x2; })arg1;
- (void)setLongPressEnabled:(bool)arg1;
- (void)setLongPressTimer:(id)arg1;
- (void)setMicaPackage:(id)arg1;
- (void)setMicaPackageStateName:(id)arg1;
- (void)setShowsHighlightedAppearance:(bool)arg1;
- (void)setTrackingState:(long long)arg1;
- (void)setTranslationOfPanFromPreviousTouch:(struct CGPoint { double x1; double x2; })arg1;
- (bool)showsHighlightedAppearance;
- (long long)trackingState;
- (struct CGPoint { double x1; double x2; })translationOfPanFromPreviousTouch;
- (void)triggerSelectionChangedFeedback;
- (void)willMoveToWindow:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
