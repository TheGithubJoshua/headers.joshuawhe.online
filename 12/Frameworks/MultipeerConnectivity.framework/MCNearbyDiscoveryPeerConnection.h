<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MCNearbyDiscoveryPeerConnection.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MultipeerConnectivity.framework/MCNearbyDiscoveryPeerConnection.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MultipeerConnectivity.framework/MultipeerConnectivity (155.2)
 */

@interface MCNearbyDiscoveryPeerConnection : NSObject <NSStreamDelegate> {
    bool  _connected;
    id /* block */  _connectedHandler;
    unsigned int  _currentSequenceNumber;
    NSMutableData * _dataReceived;
    NSMutableData * _dataToSend;
    NSMutableData * _dataToSendHoldingQueue;
    NSInputStream * _inputStream;
    NSString * _localServiceName;
    NSMutableArray * _messageReceiptHandlerHoldingQueue;
    NSMutableArray * _messageReceiptHandlerList;
    NSOutputStream * _outputStream;
    bool  _readyToWrite;
    id /* block */  _receiveDataHandler;
    NSMutableArray * _receivedDataHoldingQueue;
    NSString * _remoteServiceName;
    bool  _shouldSendHello;
    NSObject<OS_dispatch_queue> * _syncQueue;
    NSObject<OS_dispatch_queue> * _targetQueue;
}

@property (nonatomic, copy) id /* block */ connectedHandler;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSInputStream *inputStream;
@property (nonatomic, copy) NSString *localServiceName;
@property (nonatomic, retain) NSOutputStream *outputStream;
@property (nonatomic, copy) id /* block */ receiveDataHandler;
@property (nonatomic, copy) NSString *remoteServiceName;
@property (readonly) Class superclass;
@property (nonatomic) NSObject<OS_dispatch_queue> *syncQueue;
@property (nonatomic) NSObject<OS_dispatch_queue> *targetQueue;

- (void)attachInputStream:(id)arg1 outputStream:(id)arg2;
- (void)connectToNetService:(id)arg1;
- (id /* block */)connectedHandler;
- (void)dealloc;
- (id)initWithLocalServiceName:(id)arg1;
- (id)inputStream;
- (void)invalidate;
- (id)localServiceName;
- (id)outputStream;
- (id /* block */)receiveDataHandler;
- (id)remoteServiceName;
- (void)sendData:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)setConnectedHandler:(id /* block */)arg1;
- (void)setInputStream:(id)arg1;
- (void)setLocalServiceName:(id)arg1;
- (void)setOutputStream:(id)arg1;
- (void)setReceiveDataHandler:(id /* block */)arg1;
- (void)setRemoteServiceName:(id)arg1;
- (void)setSyncQueue:(id)arg1;
- (void)setTargetQueue:(id)arg1;
- (void)setupInputStream:(id)arg1 outputStream:(id)arg2;
- (bool)shouldDecideAboutConnection;
- (int)socketForStream:(id)arg1;
- (void)stream:(id)arg1 handleEvent:(unsigned long long)arg2;
- (id)stringForStreamEventCode:(unsigned long long)arg1;
- (void)syncAcceptedConnection;
- (void)syncAppendDataToSend:(id)arg1;
- (void)syncCloseConnectionNow;
- (void)syncHandleInputStreamEvent:(unsigned long long)arg1;
- (void)syncHandleOutputStreamEvent:(unsigned long long)arg1;
- (void)syncHandleStreamEventOpenCompleted:(id)arg1;
- (void)syncProcessMessage:(int)arg1 data:(id)arg2 sequenceNumber:(unsigned int)arg3;
- (id)syncQueue;
- (void)syncReadFromInputStream;
- (void)syncReceivedData:(id)arg1 error:(id)arg2;
- (void)syncSendAccept;
- (void)syncSendData;
- (void)syncSendHello;
- (void)syncSendMessage:(int)arg1 data:(id)arg2 withCompletionHandler:(id /* block */)arg3;
- (void)syncSendMessageReceipt:(int)arg1 sequenceNumber:(unsigned int)arg2;
- (id)targetQueue;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
