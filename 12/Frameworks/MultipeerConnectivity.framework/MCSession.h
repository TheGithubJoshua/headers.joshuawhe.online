<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MCSession.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MultipeerConnectivity.framework/MCSession.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MultipeerConnectivity.framework/MultipeerConnectivity (155.2)
 */

@interface MCSession : NSObject {
    bool  _AWDLDisabled;
    struct OpaqueAGPSession { } * _agpSession;
    NSObject<OS_dispatch_queue> * _callbackQueue;
    NSMutableDictionary * _connectionPendingPeerEvents;
    <MCSessionDelegate> * _delegate;
    long long  _encryptionPreference;
    unsigned int  _gckPID;
    struct OpaqueGCKSession { } * _gckSession;
    unsigned long long  _maxPeers;
    MCPeerID * _myPeerID;
    NSMutableDictionary * _peerIDMap;
    NSMutableDictionary * _peerStates;
    bool  _preferNCMOverEthernet;
    <MCSessionPrivateDelegate> * _privateDelegate;
    NSArray * _securityIdentity;
    NSString * _sessionID;
    unsigned long long  _stateHandle;
    NSObject<OS_dispatch_queue> * _syncQueue;
}

@property (getter=isAWDLDisabled, nonatomic) bool AWDLDisabled;
@property (nonatomic) struct OpaqueAGPSession { }*agpSession;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *callbackQueue;
@property (nonatomic, readonly) NSArray *connectedPeers;
@property (nonatomic, retain) NSMutableDictionary *connectionPendingPeerEvents;
@property (nonatomic) <MCSessionDelegate> *delegate;
@property (nonatomic, readonly) long long encryptionPreference;
@property (nonatomic) unsigned int gckPID;
@property (nonatomic) struct OpaqueGCKSession { }*gckSession;
@property (nonatomic) unsigned long long maxPeers;
@property (nonatomic, readonly) MCPeerID *myPeerID;
@property (nonatomic, retain) NSMutableDictionary *peerIDMap;
@property (nonatomic, retain) NSMutableDictionary *peerStates;
@property (nonatomic) bool preferNCMOverEthernet;
@property (nonatomic) <MCSessionPrivateDelegate> *privateDelegate;
@property (nonatomic, readonly) NSArray *securityIdentity;
@property (nonatomic, retain) NSString *sessionID;
@property (nonatomic) unsigned long long stateHandle;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *syncQueue;

+ (id)stringForMCSessionSendDataMode:(long long)arg1;
+ (id)stringForSessionState:(long long)arg1;

- (struct OpaqueAGPSession { }*)agpSession;
- (id)callbackQueue;
- (void)cancelConnectPeer:(id)arg1;
- (void)cancelIncomingStream:(id)arg1 fromPeer:(id)arg2;
- (void)cancelOutgoingStream:(id)arg1 toPeer:(id)arg2;
- (void)closeDirectConnectionsWithPeer:(id)arg1;
- (void)connectPeer:(id)arg1 withNearbyConnectionData:(id)arg2;
- (long long)connectedInterfacesForPeer:(id)arg1;
- (id)connectedPeers;
- (id)connectionPendingPeerEvents;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)disconnect;
- (long long)encryptionPreference;
- (unsigned int)gckPID;
- (struct OpaqueGCKSession { }*)gckSession;
- (id)init;
- (id)initWithPeer:(id)arg1;
- (id)initWithPeer:(id)arg1 securityIdentity:(id)arg2 encryptionPreference:(long long)arg3;
- (bool)isAWDLDisabled;
- (bool)isEncryptionPreferenceCompatible:(long long)arg1;
- (void)logSessionInfo;
- (unsigned long long)maxPeers;
- (id)myPeerID;
- (void)nearbyConnectionDataForPeer:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)peerDidDeclineInvitation:(id)arg1;
- (id)peerIDMap;
- (id)peerStates;
- (bool)preferNCMOverEthernet;
- (id)privateDelegate;
- (id)securityIdentity;
- (bool)sendData:(id)arg1 toPeers:(id)arg2 withMode:(long long)arg3 error:(id*)arg4;
- (id)sendResourceAtURL:(id)arg1 withName:(id)arg2 toPeer:(id)arg3 withCompletionHandler:(id /* block */)arg4;
- (id)sessionID;
- (void)setAWDLDisabled:(bool)arg1;
- (void)setAgpSession:(struct OpaqueAGPSession { }*)arg1;
- (void)setCallbackQueue:(id)arg1;
- (void)setConnectionPendingPeerEvents:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGckPID:(unsigned int)arg1;
- (void)setGckSession:(struct OpaqueGCKSession { }*)arg1;
- (void)setHeartbeatTimeout:(unsigned long long)arg1;
- (void)setICETimeoutForced:(bool)arg1;
- (void)setMaxPeers:(unsigned long long)arg1;
- (void)setPeerIDMap:(id)arg1;
- (void)setPeerStates:(id)arg1;
- (void)setPreferNCMOverEthernet:(bool)arg1;
- (void)setPrivateDelegate:(id)arg1;
- (void)setSessionID:(id)arg1;
- (void)setStateHandle:(unsigned long long)arg1;
- (void)setSyncQueue:(id)arg1;
- (void)startConnectionWithIndirectPID:(unsigned int)arg1;
- (id)startStreamWithName:(id)arg1 toPeer:(id)arg2 error:(id*)arg3;
- (unsigned long long)stateHandle;
- (id)stringForEncryptionPreference:(long long)arg1;
- (void)syncCancelIncomingStream:(id)arg1 fromPeer:(id)arg2;
- (void)syncCancelOutgoingStream:(id)arg1 toPeer:(id)arg2;
- (void)syncCloseIncomingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 reason:(int)arg5 shouldTriggerCancelProgress:(bool)arg6;
- (void)syncCloseOutgoingStream:(id)arg1 forPeer:(id)arg2 state:(id)arg3 error:(id)arg4 shouldTriggerCancelProgress:(bool)arg5;
- (void)syncCloseStreamsForPeer:(id)arg1;
- (void)syncConnectPeer:(id)arg1 withConnectionData:(id)arg2;
- (unsigned long long)syncConnectedPeersCount;
- (id)syncDetailedDescription;
- (void)syncGetConnectionDataForPeerState:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)syncHandleNetworkEvent:(struct { int x1; char *x2; int x3; unsigned int x4; }*)arg1 pid:(unsigned int)arg2 freeEventWhenDone:(bool*)arg3;
- (void)syncHandleXDataDataPacket:(char *)arg1 packetSize:(int)arg2 forPeer:(id)arg3 state:(id)arg4;
- (void)syncLogConnectedPeers;
- (void)syncLogMaxConnectedPeers;
- (void)syncPeer:(id)arg1 changeStateTo:(long long)arg2 shouldForceCallback:(bool)arg3;
- (id)syncQueue;
- (void)syncSendData:(id)arg1 toPeers:(id)arg2 withDataMode:(long long)arg3;
- (void)syncSendXDataConnectionBlobPushToPID:(unsigned int)arg1 connectionBlob:(id)arg2;
- (void)syncSendXDataPeerIDPushToPID:(unsigned int)arg1;
- (void)syncSendXDataStreamCloseFromReceiverToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;
- (void)syncSendXDataStreamCloseFromSenderToPID:(unsigned int)arg1 streamID:(unsigned int)arg2 closeReason:(unsigned short)arg3;
- (void)syncSendXDataStreamOpenResponseToPID:(unsigned int)arg1 withRequestID:(unsigned int)arg2 streamID:(unsigned int)arg3;
- (void)syncStartStreamWithName:(id)arg1 toPeer:(id)arg2 mcFD:(int)arg3 isResource:(bool)arg4;
- (struct os_state_data_s { unsigned int x1; union { unsigned int x_2_1_1 : 32; unsigned int x_2_1_2; } x2; struct os_state_data_decoder_s { BOOL x_3_1_1[64]; BOOL x_3_1_2[64]; } x3; BOOL x4[64]; unsigned char x5[0]; }*)syncStateCapture;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
