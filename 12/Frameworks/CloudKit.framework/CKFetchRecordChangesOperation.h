<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKFetchRecordChangesOperation.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CloudKit.framework/CKFetchRecordChangesOperation.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CloudKit.framework/CloudKit (736.235)
 */

@interface CKFetchRecordChangesOperation : CKDatabaseOperation {
    id /* block */  _changeTokensUpdatedBlock;
    NSArray * _desiredKeys;
    bool  _fetchAllChanges;
    id /* block */  _fetchRecordChangesCompletionBlock;
    CKServerChangeToken * _previousServerChangeToken;
    id /* block */  _recordChangedBlock;
    NSMutableDictionary * _recordErrors;
    id /* block */  _recordWithIDWasDeletedBlock;
    CKRecordZoneID * _recordZoneID;
    NSData * _resultClientChangeTokenData;
    CKServerChangeToken * _resultServerChangeToken;
    unsigned long long  _resultsLimit;
    id /* block */  _serverChangeTokenFetchedBlock;
    bool  _shouldFetchAssetContents;
    long long  _status;
}

@property (nonatomic, copy) id /* block */ changeTokensUpdatedBlock;
@property (nonatomic, copy) NSArray *desiredKeys;
@property (nonatomic) bool fetchAllChanges;
@property (nonatomic, copy) id /* block */ fetchRecordChangesCompletionBlock;
@property (nonatomic, readonly) bool moreComing;
@property (nonatomic, copy) CKServerChangeToken *previousServerChangeToken;
@property (nonatomic, copy) id /* block */ recordChangedBlock;
@property (nonatomic, retain) NSMutableDictionary *recordErrors;
@property (nonatomic, copy) id /* block */ recordWithIDWasDeletedBlock;
@property (nonatomic, copy) CKRecordZoneID *recordZoneID;
@property (nonatomic, retain) NSData *resultClientChangeTokenData;
@property (nonatomic, retain) CKServerChangeToken *resultServerChangeToken;
@property (nonatomic) unsigned long long resultsLimit;
@property (nonatomic, copy) id /* block */ serverChangeTokenFetchedBlock;
@property (nonatomic) bool shouldFetchAssetContents;
@property (nonatomic) long long status;

- (void).cxx_destruct;
- (bool)CKOperationShouldRun:(id*)arg1;
- (void)_finishOnCallbackQueueWithError:(id)arg1;
- (void)_handleCompletionCallback:(id)arg1;
- (void)_handleProgressCallback:(id)arg1;
- (id)activityCreate;
- (id /* block */)changeTokensUpdatedBlock;
- (long long)changeTypesFromSetCallbacks;
- (id)desiredKeys;
- (bool)fetchAllChanges;
- (id /* block */)fetchRecordChangesCompletionBlock;
- (void)fillFromOperationInfo:(id)arg1;
- (void)fillOutOperationInfo:(id)arg1;
- (bool)hasCKOperationCallbacksSet;
- (id)init;
- (id)initWithRecordZoneID:(id)arg1 previousServerChangeToken:(id)arg2;
- (bool)moreComing;
- (Class)operationInfoClass;
- (void)performCKOperation;
- (id)previousServerChangeToken;
- (id /* block */)recordChangedBlock;
- (id)recordErrors;
- (id /* block */)recordWithIDWasDeletedBlock;
- (id)recordZoneID;
- (id)resultClientChangeTokenData;
- (id)resultServerChangeToken;
- (unsigned long long)resultsLimit;
- (id /* block */)serverChangeTokenFetchedBlock;
- (void)setChangeTokensUpdatedBlock:(id /* block */)arg1;
- (void)setDesiredKeys:(id)arg1;
- (void)setFetchAllChanges:(bool)arg1;
- (void)setFetchRecordChangesCompletionBlock:(id /* block */)arg1;
- (void)setPreviousServerChangeToken:(id)arg1;
- (void)setRecordChangedBlock:(id /* block */)arg1;
- (void)setRecordErrors:(id)arg1;
- (void)setRecordWithIDWasDeletedBlock:(id /* block */)arg1;
- (void)setRecordZoneID:(id)arg1;
- (void)setResultClientChangeTokenData:(id)arg1;
- (void)setResultServerChangeToken:(id)arg1;
- (void)setResultsLimit:(unsigned long long)arg1;
- (void)setServerChangeTokenFetchedBlock:(id /* block */)arg1;
- (void)setShouldFetchAssetContents:(bool)arg1;
- (void)setStatus:(long long)arg1;
- (bool)shouldFetchAssetContents;
- (long long)status;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
