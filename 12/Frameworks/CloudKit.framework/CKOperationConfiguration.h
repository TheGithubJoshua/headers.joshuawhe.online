<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKOperationConfiguration.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CloudKit.framework/CKOperationConfiguration.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CloudKit.framework/CloudKit (736.235)
 */

@interface CKOperationConfiguration : NSObject <NSCopying, NSSecureCoding> {
    NSDictionary * _additionalRequestHTTPHeaders;
    bool  _allowsBackgroundNetworking;
    bool  _allowsCellularAccess;
    bool  _automaticallyRetryNetworkFailures;
    CKContainer * _container;
    unsigned long long  _discretionaryNetworkBehavior;
    bool  _hasAdditionalRequestHTTPHeaders;
    bool  _hasAllowsBackgroundNetworking;
    bool  _hasAllowsCellularAccess;
    bool  _hasAutomaticallyRetryNetworkFailures;
    bool  _hasContainer;
    bool  _hasDiscretionaryNetworkBehavior;
    bool  _hasLongLived;
    bool  _hasPreferAnonymousRequests;
    bool  _hasQualityOfService;
    bool  _hasShouldSkipZonePCSUpdate;
    bool  _hasSourceApplicationBundleIdentifier;
    bool  _hasSourceApplicationSecondaryIdentifier;
    bool  _hasTimeoutIntervalForRequest;
    bool  _hasTimeoutIntervalForResource;
    bool  _longLived;
    bool  _preferAnonymousRequests;
    long long  _qualityOfService;
    bool  _shouldSkipZonePCSUpdate;
    NSString * _sourceApplicationBundleIdentifier;
    NSString * _sourceApplicationSecondaryIdentifier;
    double  _timeoutIntervalForRequest;
    double  _timeoutIntervalForResource;
}

@property (nonatomic, retain) NSDictionary *additionalRequestHTTPHeaders;
@property (nonatomic) bool allowsBackgroundNetworking;
@property (nonatomic) bool allowsCellularAccess;
@property (nonatomic) bool automaticallyRetryNetworkFailures;
@property (nonatomic, retain) CKContainer *container;
@property (nonatomic) unsigned long long discretionaryNetworkBehavior;
@property (nonatomic) bool hasAdditionalRequestHTTPHeaders;
@property (nonatomic) bool hasAllowsBackgroundNetworking;
@property (nonatomic) bool hasAllowsCellularAccess;
@property (nonatomic) bool hasAutomaticallyRetryNetworkFailures;
@property (nonatomic) bool hasContainer;
@property (nonatomic) bool hasDiscretionaryNetworkBehavior;
@property (nonatomic) bool hasLongLived;
@property (nonatomic) bool hasPreferAnonymousRequests;
@property (nonatomic) bool hasQualityOfService;
@property (nonatomic) bool hasShouldSkipZonePCSUpdate;
@property (nonatomic) bool hasSourceApplicationBundleIdentifier;
@property (nonatomic) bool hasSourceApplicationSecondaryIdentifier;
@property (nonatomic) bool hasTimeoutIntervalForRequest;
@property (nonatomic) bool hasTimeoutIntervalForResource;
@property (getter=isLongLived, nonatomic) bool longLived;
@property (nonatomic) bool preferAnonymousRequests;
@property (nonatomic) long long qualityOfService;
@property (nonatomic) bool shouldSkipZonePCSUpdate;
@property (nonatomic, retain) NSString *sourceApplicationBundleIdentifier;
@property (nonatomic, retain) NSString *sourceApplicationSecondaryIdentifier;
@property (nonatomic) double timeoutIntervalForRequest;
@property (nonatomic) double timeoutIntervalForResource;

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)additionalRequestHTTPHeaders;
- (bool)allowsBackgroundNetworking;
- (bool)allowsCellularAccess;
- (bool)automaticallyRetryNetworkFailures;
- (id)container;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)discretionaryNetworkBehavior;
- (void)encodeWithCoder:(id)arg1;
- (bool)hasAdditionalRequestHTTPHeaders;
- (bool)hasAllowsBackgroundNetworking;
- (bool)hasAllowsCellularAccess;
- (bool)hasAutomaticallyRetryNetworkFailures;
- (bool)hasContainer;
- (bool)hasDiscretionaryNetworkBehavior;
- (bool)hasLongLived;
- (bool)hasPreferAnonymousRequests;
- (bool)hasQualityOfService;
- (bool)hasShouldSkipZonePCSUpdate;
- (bool)hasSourceApplicationBundleIdentifier;
- (bool)hasSourceApplicationSecondaryIdentifier;
- (bool)hasTimeoutIntervalForRequest;
- (bool)hasTimeoutIntervalForResource;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (bool)isLongLived;
- (bool)preferAnonymousRequests;
- (long long)qualityOfService;
- (id)resolveAgainstGenericConfiguration:(id)arg1;
- (void)setAdditionalRequestHTTPHeaders:(id)arg1;
- (void)setAllowsBackgroundNetworking:(bool)arg1;
- (void)setAllowsCellularAccess:(bool)arg1;
- (void)setAutomaticallyRetryNetworkFailures:(bool)arg1;
- (void)setContainer:(id)arg1;
- (void)setDiscretionaryNetworkBehavior:(unsigned long long)arg1;
- (void)setHasAdditionalRequestHTTPHeaders:(bool)arg1;
- (void)setHasAllowsBackgroundNetworking:(bool)arg1;
- (void)setHasAllowsCellularAccess:(bool)arg1;
- (void)setHasAutomaticallyRetryNetworkFailures:(bool)arg1;
- (void)setHasContainer:(bool)arg1;
- (void)setHasDiscretionaryNetworkBehavior:(bool)arg1;
- (void)setHasLongLived:(bool)arg1;
- (void)setHasPreferAnonymousRequests:(bool)arg1;
- (void)setHasQualityOfService:(bool)arg1;
- (void)setHasShouldSkipZonePCSUpdate:(bool)arg1;
- (void)setHasSourceApplicationBundleIdentifier:(bool)arg1;
- (void)setHasSourceApplicationSecondaryIdentifier:(bool)arg1;
- (void)setHasTimeoutIntervalForRequest:(bool)arg1;
- (void)setHasTimeoutIntervalForResource:(bool)arg1;
- (void)setLongLived:(bool)arg1;
- (void)setPreferAnonymousRequests:(bool)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setQualityOfServiceWithoutQoSChecks:(long long)arg1;
- (void)setShouldSkipZonePCSUpdate:(bool)arg1;
- (void)setSourceApplicationBundleIdentifier:(id)arg1;
- (void)setSourceApplicationSecondaryIdentifier:(id)arg1;
- (void)setTimeoutIntervalForRequest:(double)arg1;
- (void)setTimeoutIntervalForResource:(double)arg1;
- (bool)shouldSkipZonePCSUpdate;
- (id)sourceApplicationBundleIdentifier;
- (id)sourceApplicationSecondaryIdentifier;
- (double)timeoutIntervalForRequest;
- (double)timeoutIntervalForResource;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
