<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CKShare.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CloudKit.framework/CKShare.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CloudKit.framework/CloudKit (736.235)
 */

@interface CKShare : CKRecord <NSCopying, NSSecureCoding> {
    NSMutableSet * _addedParticipantIDs;
    NSMutableArray * _allParticipants;
    bool  _allowsAnonymousPublicAccess;
    bool  _allowsReadOnlyParticipantsToSeeEachOther;
    CKContainerID * _containerID;
    NSArray * _invitedKeysToRemove;
    NSData * _invitedProtectionData;
    NSString * _invitedProtectionEtag;
    NSMutableArray * _lastFetchedParticipants;
    NSString * _previousInvitedProtectionEtag;
    NSString * _previousPublicProtectionEtag;
    long long  _publicPermission;
    NSData * _publicProtectionData;
    NSString * _publicProtectionEtag;
    NSMutableSet * _removedParticipantIDs;
    CKRecordID * _rootRecordID;
    bool  _serializePersonalInfo;
    CKShareID * _shareID;
}

@property (nonatomic, readonly, copy) NSURL *URL;
@property (nonatomic, retain) NSMutableSet *addedParticipantIDs;
@property (nonatomic, retain) NSMutableArray *allParticipants;
@property (nonatomic) bool allowsAnonymousPublicAccess;
@property (nonatomic) bool allowsReadOnlyParticipantsToSeeEachOther;
@property (nonatomic, retain) CKContainerID *containerID;
@property (nonatomic, readonly) CKShareParticipant *currentUserParticipant;
@property (nonatomic, retain) NSArray *invitedKeysToRemove;
@property (nonatomic, retain) NSData *invitedProtectionData;
@property (nonatomic, retain) NSString *invitedProtectionEtag;
@property (nonatomic, retain) NSMutableArray *lastFetchedParticipants;
@property (nonatomic, copy) NSURL *mutableURL;
@property (nonatomic, readonly) CKShareParticipant *owner;
@property (nonatomic, readonly) NSArray *participants;
@property (nonatomic, retain) NSString *previousInvitedProtectionEtag;
@property (nonatomic, retain) NSString *previousPublicProtectionEtag;
@property (nonatomic) long long publicPermission;
@property (nonatomic, retain) NSData *publicProtectionData;
@property (nonatomic, retain) NSString *publicProtectionEtag;
@property (nonatomic, retain) NSData *publicSharingIdentity;
@property (nonatomic, retain) NSMutableSet *removedParticipantIDs;
@property (nonatomic, copy) CKRecordID *rootRecordID;
@property (nonatomic) bool serializePersonalInfo;
@property (nonatomic, copy) CKShareID *shareID;

// Image: /System/Library/Frameworks/CloudKit.framework/CloudKit

+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)CKAssignToContainerWithID:(id)arg1;
- (id)CKDescriptionPropertiesWithPublic:(bool)arg1 private:(bool)arg2 shouldExpand:(bool)arg3;
- (void)_addOwnerParticipant;
- (void)_addParticipantBypassingChecks:(id)arg1;
- (void)_addParticipantEmails:(id)arg1 phoneNumbers:(id)arg2 asReadWrite:(bool)arg3 inContainer:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)_commonCKShareInit;
- (id)_copyWithoutPersonalInfo;
- (void)_getDecryptedShareInContainer:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)_initWithShareRecordID:(id)arg1;
- (id)_knownParticipantEqualToParticipant:(id)arg1;
- (bool)_participantArray:(id)arg1 containsEquivalentWithPermissionsParticipant:(id)arg2;
- (bool)_participantArray:(id)arg1 isEquivalentToArray:(id)arg2;
- (void)_removeAllParticipants;
- (void)_removeParticipantBypassingChecks:(id)arg1;
- (void)_removePendingPrivateAndAdminParticipants;
- (void)_setPublicPermissionNoSideEffects:(long long)arg1;
- (void)_stripPersonalInfo;
- (void)addParticipant:(id)arg1;
- (id)addedParticipantIDs;
- (id)addedParticipants;
- (id)allParticipants;
- (bool)allowsAnonymousPublicAccess;
- (bool)allowsReadOnlyParticipantsToSeeEachOther;
- (void)clearModifiedParticipants;
- (id)containerID;
- (id)copyWithOriginalValues;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currentUserParticipant;
- (id)debugDescription;
- (id)description;
- (void)encodeSystemFieldsWithCoder:(id)arg1;
- (id)encryptedPublicSharingKey;
- (bool)hasEncryptedData;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithRecordType:(id)arg1;
- (id)initWithRecordType:(id)arg1 recordID:(id)arg2;
- (id)initWithRecordType:(id)arg1 zoneID:(id)arg2;
- (id)initWithRootRecord:(id)arg1;
- (id)initWithRootRecord:(id)arg1 shareID:(id)arg2;
- (id)invitedKeysToRemove;
- (id)invitedProtectionData;
- (id)invitedProtectionEtag;
- (id)lastFetchedParticipants;
- (id)owner;
- (id)participants;
- (id)previousInvitedProtectionEtag;
- (id)previousPublicProtectionEtag;
- (id)privateToken;
- (long long)publicPermission;
- (id)publicProtectionData;
- (id)publicProtectionEtag;
- (id)publicSharingIdentity;
- (void)registerFetchedParticipant:(id)arg1;
- (void)removeParticipant:(id)arg1;
- (id)removedParticipantIDs;
- (id)removedParticipants;
- (void)resetFetchedParticipants;
- (id)rootRecordID;
- (bool)serializePersonalInfo;
- (void)setAddedParticipantIDs:(id)arg1;
- (void)setAllParticipants:(id)arg1;
- (void)setAllowsAnonymousPublicAccess:(bool)arg1;
- (void)setAllowsReadOnlyParticipantsToSeeEachOther:(bool)arg1;
- (void)setContainerID:(id)arg1;
- (void)setInvitedKeysToRemove:(id)arg1;
- (void)setInvitedProtectionData:(id)arg1;
- (void)setInvitedProtectionEtag:(id)arg1;
- (void)setLastFetchedParticipants:(id)arg1;
- (void)setPreviousInvitedProtectionEtag:(id)arg1;
- (void)setPreviousPublicProtectionEtag:(id)arg1;
- (void)setPublicPermission:(long long)arg1;
- (void)setPublicProtectionData:(id)arg1;
- (void)setPublicProtectionEtag:(id)arg1;
- (void)setPublicSharingIdentity:(id)arg1;
- (void)setRemovedParticipantIDs:(id)arg1;
- (void)setRootRecordID:(id)arg1;
- (void)setSerializePersonalInfo:(bool)arg1;
- (void)setShareID:(id)arg1;
- (void)setWantsPublicSharingKey:(bool)arg1;
- (id)shareID;
- (id)shareURL;
- (id)updateFromServerShare:(id)arg1;

// Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon

- (bool)_brc_isOwner;
- (bool)deserializeSharingOptions:(unsigned long long*)arg1 error:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon

- (void)_decryptPersonalInfoWithPCSBlob:(struct _OpaquePCSShareProtection { }*)arg1 pcsManager:(id)arg2;
- (void)_encryptPersonalInfoWithPCSBlob:(struct _OpaquePCSShareProtection { }*)arg1 pcsManager:(id)arg2;
- (bool)_prepPCSDataWithContext:(id)arg1 databaseScope:(long long)arg2 error:(id*)arg3;
- (bool)_prepPCSDataWithContext:(id)arg1 databaseScope:(long long)arg2 publicSharingKey:(id)arg3 error:(id*)arg4;
- (bool)_prepPCSDataWithContext:(id)arg1 databaseScope:(long long)arg2 publicSharingKey:(id)arg3 removeServerSpecifiedKeys:(bool)arg4 error:(id*)arg5;
- (bool)hasEncryptedPersonalInfo;
- (struct _OpaquePCSShareProtection { }*)privatePCS;
- (struct _OpaquePCSShareProtection { }*)publicPCS;
- (void)setPrivatePCS:(struct _OpaquePCSShareProtection { }*)arg1;
- (void)setPublicPCS:(struct _OpaquePCSShareProtection { }*)arg1;
- (void)setSharePCSData:(id)arg1;
- (void)setSharePCSData:(id)arg1 isUnitTestAccount:(bool)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
