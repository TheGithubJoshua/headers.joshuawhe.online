<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>WKFullScreenWindowController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/WebKit.framework/WKFullScreenWindowController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/WebKit.framework/WebKit (8607.3.18)
 */

@interface WKFullScreenWindowController : NSObject <UIGestureRecognizerDelegate, UIViewControllerTransitioningDelegate> {
    struct RetainPtr<NSString> { 
        void *m_ptr; 
    }  _EVOrganizationName;
    bool  _EVOrganizationNameIsValid;
    WKWebView * __webView;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _finalFrame;
    long long  _fullScreenState;
    struct RetainPtr<WKFullScreenViewController> { 
        void *m_ptr; 
    }  _fullscreenViewController;
    bool  _inInteractiveDismiss;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _initialFrame;
    struct RetainPtr<WKFullScreenInteractiveTransition> { 
        void *m_ptr; 
    }  _interactiveDismissTransitionCoordinator;
    struct RetainPtr<UIPanGestureRecognizer> { 
        void *m_ptr; 
    }  _interactivePanDismissGestureRecognizer;
    struct RetainPtr<UIPinchGestureRecognizer> { 
        void *m_ptr; 
    }  _interactivePinchDismissGestureRecognizer;
    struct RetainPtr<id> { 
        void *m_ptr; 
    }  _notificationListener;
    struct RefPtr<WebKit::GenericCallback<>, WTF::DumbPtrTraits<WebKit::GenericCallback<> > > { 
        struct GenericCallback<> {} *m_ptr; 
    }  _repaintCallback;
    struct RetainPtr<UIViewController> { 
        void *m_ptr; 
    }  _rootViewController;
    struct RetainPtr<UISwipeGestureRecognizer> { 
        void *m_ptr; 
    }  _startDismissGestureRecognizer;
    struct RetainPtr<UIViewController> { 
        void *m_ptr; 
    }  _viewControllerForPresentation;
    struct WKWebViewState { 
        float _savedTopContentInset; 
        double _savedPageScale; 
        double _savedViewScale; 
        double _savedZoomScale; 
        struct UIEdgeInsets { 
            double top; 
            double left; 
            double bottom; 
            double right; 
        } _savedEdgeInset; 
        struct UIEdgeInsets { 
            double top; 
            double left; 
            double bottom; 
            double right; 
        } _savedObscuredInsets; 
        struct UIEdgeInsets { 
            double top; 
            double left; 
            double bottom; 
            double right; 
        } _savedScrollIndicatorInsets; 
        struct CGPoint { 
            double x; 
            double y; 
        } _savedContentOffset; 
        double _savedMinimumZoomScale; 
        double _savedMaximumZoomScale; 
        bool _savedBouncesZoom; 
        bool _savedForceAlwaysUserScalable; 
    }  _viewState;
    struct RetainPtr<WKFullScreenPlaceholderView> { 
        void *m_ptr; 
    }  _webViewPlaceholder;
    struct RetainPtr<UIWindow> { 
        void *m_ptr; 
    }  _window;
}

@property (nonatomic) WKWebView *_webView;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isFullScreen;
@property (readonly) Class superclass;
@property (nonatomic, readonly, retain) UIView *webViewPlaceholder;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_EVOrganizationName;
- (void)_completedExitFullScreen;
- (void)_dismissFullscreenViewController;
- (void)_exitFullscreenImmediately;
- (void)_interactiveDismissChanged:(id)arg1;
- (void)_interactivePinchDismissChanged:(id)arg1;
- (void)_invalidateEVOrganizationName;
- (bool)_isSecure;
- (struct WebFullScreenManagerProxy { int (**x1)(); struct WebPageProxy {} *x2; struct WebFullScreenManagerProxyClient {} *x3; }*)_manager;
- (struct __SecTrust { }*)_serverTrust;
- (void)_startToDismissFullscreenChanged:(id)arg1;
- (void)_updateLocationInfo;
- (id)_webView;
- (id)animationControllerForDismissedController:(id)arg1;
- (id)animationControllerForPresentedController:(id)arg1 presentingController:(id)arg2 sourceController:(id)arg3;
- (void)beganEnterFullScreenWithInitialFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 finalFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)beganExitFullScreenWithInitialFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 finalFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)close;
- (void)dealloc;
- (void)enterFullScreen;
- (void)exitFullScreen;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)initWithWebView:(id)arg1;
- (id)interactionControllerForDismissal:(id)arg1;
- (bool)isFullScreen;
- (void)placeholderWillMoveToSuperview:(id)arg1;
- (void)requestExitFullScreen;
- (void)set_webView:(id)arg1;
- (void)videoControlsManagerDidChange;
- (void)webViewDidRemoveFromSuperviewWhileInFullscreen;
- (id)webViewPlaceholder;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
