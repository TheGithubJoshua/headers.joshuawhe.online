<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CBPeripheral.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CoreBluetooth.framework/CBPeripheral.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CoreBluetooth.framework/CoreBluetooth (1)
 */

@interface CBPeripheral : CBPeer {
    NSString * _BDAddress;
    long long  _PID;
    NSNumber * _RSSI;
    long long  _VID;
    NSMutableDictionary * _attributes;
    bool  _canSendWriteWithoutResponse;
    bool  _connectedToSystem;
    <CBPeripheralDelegate> * _delegate;
    struct { 
        unsigned int didUpdateName : 1; 
        unsigned int didModifyServices : 1; 
        unsigned int didReadRSSI : 1; 
        unsigned int didUpdateRSSI : 1; 
        unsigned int didDiscoverServices : 1; 
        unsigned int didDiscoverIncludedServices : 1; 
        unsigned int didDiscoverCharacteristics : 1; 
        unsigned int didUpdateCharacteristicValue : 1; 
        unsigned int didWriteCharacteristicValue : 1; 
        unsigned int didNotifyCharacteristicValue : 1; 
        unsigned int didDiscoverDescriptors : 1; 
        unsigned int didUpdateDescriptorValue : 1; 
        unsigned int didWriteDescriptorValue : 1; 
        unsigned int didReceiveTimeSync : 1; 
        unsigned int didOpenL2CAPChannel : 1; 
    }  _delegateFlags;
    bool  _isConnectedToSystem;
    NSHashTable * _l2capChannels;
    NSString * _name;
    NSArray * _services;
    long long  _state;
    unsigned int  _writesPending;
}

@property (retain) NSString *BDAddress;
@property long long PID;
@property (retain) NSNumber *RSSI;
@property long long VID;
@property bool canSendWriteWithoutResponse;
@property (getter=isConnectedToSystem, nonatomic, readonly) bool connectedToSystem;
@property (nonatomic) <CBPeripheralDelegate> *delegate;
@property (nonatomic, readonly) bool isConnectedToSystem;
@property (nonatomic, readonly, retain) NSHashTable *l2capChannels;
@property (retain) NSString *name;
@property (retain) NSArray *services;
@property long long state;
@property unsigned int writesPending;

- (void).cxx_destruct;
- (id)BDAddress;
- (long long)PID;
- (id)RSSI;
- (long long)VID;
- (id)attributeForHandle:(id)arg1;
- (bool)canSendWriteWithoutResponse;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (void)discoverCharacteristics:(id)arg1 forService:(id)arg2;
- (void)discoverDescriptorsForCharacteristic:(id)arg1;
- (void)discoverIncludedServices:(id)arg1 forService:(id)arg2;
- (void)discoverServices:(id)arg1;
- (void)getTimeSyncData;
- (void)handleAttributeEvent:(id)arg1 args:(id)arg2 attributeSelector:(SEL)arg3 delegateSelector:(SEL)arg4 delegateFlag:(bool)arg5;
- (void)handleCharacteristicDescriptorsDiscovered:(id)arg1;
- (void)handleCharacteristicEvent:(id)arg1 characteristicSelector:(SEL)arg2 delegateSelector:(SEL)arg3 delegateFlag:(bool)arg4;
- (void)handleCharacteristicValueNotifying:(id)arg1;
- (void)handleCharacteristicValueUpdated:(id)arg1;
- (void)handleCharacteristicValueWritten:(id)arg1;
- (void)handleConnectionStateUpdated:(bool)arg1;
- (void)handleDescriptorEvent:(id)arg1 descriptorSelector:(SEL)arg2 delegateSelector:(SEL)arg3 delegateFlag:(bool)arg4;
- (void)handleDescriptorValueUpdated:(id)arg1;
- (void)handleDescriptorValueWritten:(id)arg1;
- (void)handleDisconnection;
- (void)handleFailedConnection;
- (void)handleL2CAPChannelClosed:(id)arg1;
- (void)handleL2CAPChannelOpened:(id)arg1;
- (void)handleMsg:(int)arg1 args:(id)arg2;
- (void)handleNameUpdated:(id)arg1;
- (void)handleRSSIUpdated:(id)arg1;
- (void)handleServiceCharacteristicsDiscovered:(id)arg1;
- (void)handleServiceEvent:(id)arg1 serviceSelector:(SEL)arg2 delegateSelector:(SEL)arg3 delegateFlag:(bool)arg4;
- (void)handleServiceIncludedServicesDiscovered:(id)arg1;
- (void)handleServicesChanged:(id)arg1;
- (void)handleServicesDiscovered:(id)arg1;
- (void)handleSuccessfulConnection:(id)arg1;
- (void)handleTimeSyncResponse:(id)arg1;
- (bool)hasTag:(id)arg1;
- (id)initWithCentralManager:(id)arg1 info:(id)arg2;
- (void)invalidateAllAttributes;
- (bool)isConnected;
- (bool)isConnectedToSystem;
- (bool)isConnectedToSystem;
- (void)isReadyForUpdates;
- (id)l2capChannelForPeer:(id)arg1 withPsm:(unsigned short)arg2;
- (id)l2capChannels;
- (unsigned long long)maximumWriteValueLengthForType:(long long)arg1;
- (id)name;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)openL2CAPChannel:(unsigned short)arg1;
- (void)openL2CAPChannel:(unsigned short)arg1 options:(id)arg2;
- (void)readRSSI;
- (void)readValueForCharacteristic:(id)arg1;
- (void)readValueForDescriptor:(id)arg1;
- (void)removeAllL2CAPChannels;
- (void)removeAttributeForHandle:(id)arg1;
- (void)sendMsg:(int)arg1 args:(id)arg2;
- (void)sendMsg:(int)arg1 requiresConnected:(bool)arg2 args:(id)arg3;
- (id)sendSyncMsg:(int)arg1 args:(id)arg2;
- (id)services;
- (void)setAttribute:(id)arg1 forHandle:(id)arg2;
- (void)setBDAddress:(id)arg1;
- (void)setBroadcastValue:(bool)arg1 forCharacteristic:(id)arg2;
- (void)setCanSendWriteWithoutResponse:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHighPriorityStream:(bool)arg1 duration:(id)arg2;
- (void)setName:(id)arg1;
- (void)setNotifyValue:(bool)arg1 forCharacteristic:(id)arg2;
- (void)setOrphan;
- (void)setPID:(long long)arg1;
- (void)setPeripheralName:(id)arg1;
- (void)setRSSI:(id)arg1;
- (void)setServices:(id)arg1;
- (void)setState:(long long)arg1;
- (void)setVID:(long long)arg1;
- (void)setWritesPending:(unsigned int)arg1;
- (long long)state;
- (void)tag:(id)arg1;
- (void)untag:(id)arg1;
- (void)writeValue:(id)arg1 forCharacteristic:(id)arg2 type:(long long)arg3;
- (void)writeValue:(id)arg1 forDescriptor:(id)arg2;
- (unsigned int)writesPending;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
