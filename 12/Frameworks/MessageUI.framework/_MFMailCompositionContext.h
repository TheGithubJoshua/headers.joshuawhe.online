<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_MFMailCompositionContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MessageUI.framework/_MFMailCompositionContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MessageUI.framework/MessageUI (3445.120.0.1.2)
 */

@interface _MFMailCompositionContext : NSObject <MFMailCompositionAdditionalDonating> {
    NSArray * _UTITypes;
    MFAttachmentCompositionContext * _attachmentContext;
    NSString * _attachmentToMarkupContentID;
    NSString * _autosaveIdentifier;
    NSArray * _bccRecipients;
    UIView<MFComposeBodyField> * _bodyField;
    unsigned long long  _caretPosition;
    NSArray * _ccRecipients;
    NSArray * _cloudPhotoIDs;
    int  _composeType;
    NSArray * _contentText;
    NSArray * _contentURLs;
    NSMutableArray * _deferredAttachments;
    bool  _includeAttachments;
    bool  _loadRest;
    MFMessageLoadingContext * _loadingContext;
    NSString * _messageBody;
    id  _originalContent;
    MFMailMessage * _originalMessage;
    NSString * _originatingBundleID;
    NSArray * _photoIDs;
    bool  _prefersFirstLineSelection;
    bool  _registeredForDraw;
    NSString * _sendingAddress;
    bool  _showContentImmediately;
    bool  _showKeyboardImmediately;
    int  _sourceAccountManagement;
    NSString * _subject;
    NSArray * _toRecipients;
    bool  _usingDefaultAccount;
}

@property (nonatomic, copy) NSArray *UTITypes;
@property (nonatomic, readonly) MFAttachmentCompositionContext *attachmentContext;
@property (nonatomic, retain) NSString *attachmentToMarkupContentID;
@property (nonatomic, readonly) NSString *autosaveIdentifier;
@property (nonatomic, copy) NSArray *bccRecipients;
@property UIView<MFComposeBodyField> *bodyField;
@property (nonatomic) unsigned long long caretPosition;
@property (nonatomic, copy) NSArray *ccRecipients;
@property (nonatomic, copy) NSArray *cloudPhotoIDs;
@property (nonatomic, readonly) int composeType;
@property (nonatomic, copy) NSArray *contentText;
@property (nonatomic, copy) NSArray *contentURLs;
@property (nonatomic, readonly) NSString *contextID;
@property (nonatomic) bool includeAttachments;
@property (nonatomic) bool loadRest;
@property (nonatomic, retain) MFMessageLoadingContext *loadingContext;
@property (nonatomic, retain) id originalContent;
@property (nonatomic, readonly) MFMailMessage *originalMessage;
@property (nonatomic, copy) NSString *originatingBundleID;
@property (nonatomic, copy) NSArray *photoIDs;
@property (nonatomic) bool prefersFirstLineSelection;
@property (nonatomic, copy) NSString *sendingAddress;
@property (nonatomic) bool showContentImmediately;
@property (nonatomic) bool showKeyboardImmediately;
@property (nonatomic) int sourceAccountManagement;
@property (nonatomic, copy) NSString *subject;
@property (nonatomic, copy) NSArray *toRecipients;
@property (nonatomic) bool usingDefaultAccount;

- (id)UTITypes;
- (void)_contextRegisterForDrawNotification;
- (void)_contextUnregisterForDrawNotification;
- (id)addAttachmentData:(id)arg1 mimeType:(id)arg2 fileName:(id)arg3;
- (id)addAttachmentData:(id)arg1 mimeType:(id)arg2 fileName:(id)arg3 contentID:(id)arg4;
- (id)attachmentContext;
- (id)attachmentToMarkupContentID;
- (id)attachments;
- (id)autosaveIdentifier;
- (id)bccRecipients;
- (id)bodyField;
- (unsigned long long)caretPosition;
- (id)ccRecipients;
- (id)cloudPhotoIDs;
- (int)composeType;
- (id)contentText;
- (id)contentURLs;
- (void)contextDidDraw:(id)arg1;
- (id)contextID;
- (void)dealloc;
- (bool)hasDuetDonationContext;
- (bool)includeAttachments;
- (id)init;
- (id)initDraftRestoreOfMessage:(id)arg1;
- (id)initForwardOfMessage:(id)arg1;
- (id)initOutboxRestoreOfMessage:(id)arg1;
- (id)initRecoveredAutosavedMessageWithIdentifier:(id)arg1;
- (id)initReplyAllToMessage:(id)arg1;
- (id)initReplyToMessage:(id)arg1;
- (id)initSendAgainDraftOfMessage:(id)arg1;
- (id)initWithComposeType:(int)arg1;
- (id)initWithComposeType:(int)arg1 RFC822Data:(id)arg2;
- (id)initWithComposeType:(int)arg1 originalMessage:(id)arg2;
- (id)initWithHandoffActivityPayload:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)initWithURL:(id)arg1 composeType:(int)arg2 originalMessage:(id)arg3;
- (void)insertAttachmentWithData:(id)arg1 fileName:(id)arg2 mimeType:(id)arg3 contentID:(id)arg4;
- (void)insertAttachmentWithURL:(id)arg1;
- (bool)loadRest;
- (id)loadingContext;
- (id)messageBody;
- (id)originalContent;
- (id)originalMessage;
- (id)originatingBundleID;
- (id)photoIDs;
- (bool)prefersFirstLineSelection;
- (void)recordPasteboardAttachmentsForURLs:(id)arg1;
- (void)recordUndoAttachmentsForURLs:(id)arg1;
- (void)removeAttachment:(id)arg1;
- (id)sendingAddress;
- (void)setAttachmentToMarkupContentID:(id)arg1;
- (void)setBccRecipients:(id)arg1;
- (void)setBodyField:(id)arg1;
- (void)setCaretPosition:(unsigned long long)arg1;
- (void)setCcRecipients:(id)arg1;
- (void)setCloudPhotoIDs:(id)arg1;
- (void)setContentText:(id)arg1;
- (void)setContentURLs:(id)arg1;
- (void)setIncludeAttachments:(bool)arg1;
- (void)setLoadRest:(bool)arg1;
- (void)setLoadingContext:(id)arg1;
- (void)setMessageBody:(id)arg1 isHTML:(bool)arg2;
- (void)setOriginalContent:(id)arg1;
- (void)setOriginatingBundleID:(id)arg1;
- (void)setPhotoIDs:(id)arg1;
- (void)setPrefersFirstLineSelection:(bool)arg1;
- (void)setSendingAddress:(id)arg1;
- (void)setShowContentImmediately:(bool)arg1;
- (void)setShowKeyboardImmediately:(bool)arg1;
- (void)setSourceAccountManagement:(int)arg1;
- (void)setSubject:(id)arg1;
- (void)setToRecipients:(id)arg1;
- (void)setUTITypes:(id)arg1;
- (void)setUsingDefaultAccount:(bool)arg1;
- (bool)showContentImmediately;
- (bool)showKeyboardImmediately;
- (int)sourceAccountManagement;
- (id)subject;
- (void)switchToReplyAllWithDelegate:(id)arg1;
- (id)toRecipients;
- (bool)usingDefaultAccount;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
