<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MFComposeRecipientView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MessageUI.framework/MFComposeRecipientView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MessageUI.framework/MessageUI (3445.120.0.1.2)
 */

@interface MFComposeRecipientView : MFComposeHeaderView <MFComposeRecipientAtomDelegate, MFCorecipientsIndicatorAtomDelegate, UIGestureRecognizerDelegate, UITextFieldDelegate> {
    UIButton * _addButton;
    bool  _allowsDragAndDrop;
    struct __CFDictionary { } * _atomPresentationOptionsByRecipient;
    NSMutableDictionary * _atoms;
    UIFont * _baseFont;
    bool  _clearSelectionUIAfterFirstResponder;
    MFCorecipientsIndicatorAtom * _corecipientsIndicatorAtom;
    unsigned long long  _defaultAtomPresentationOptions;
    NSTimer * _delayTimer;
    <MFComposeRecipientViewDelegate> * _delegate;
    bool  _deselectOnNextKeyboardInput;
    bool  _didIgnoreFirstResponderResign;
    long long  _dragSourceOriginalIndex;
    bool  _editable;
    bool  _expanded;
    int  _hideLastAtomComma;
    double  _inputDelay;
    long long  _maxRecipients;
    bool  _needsLayoutConstraintUpdate;
    bool  _needsReflow;
    bool  _parentIsClosing;
    bool  _picking;
    MFComposeRecipient * _placeholderRecipient;
    NSArray * _properties;
    NSMutableArray * _recipients;
    MFModernComposeRecipientAtom * _selectedAtom;
    bool  _separatorHidden;
    UITapGestureRecognizer * _tapGestureRecognizer;
    _MFMailRecipientTextField * _textField;
    NSArray * _textFieldConstraints;
    NSCountedSet * _uncommentedAddresses;
}

@property (nonatomic, readonly) UIView *addButton;
@property (nonatomic, copy) NSArray *addresses;
@property (nonatomic) bool allowsDragAndDrop;
@property (nonatomic, retain) UIFont *baseFont;
@property (nonatomic, readonly) MFCorecipientsIndicatorAtom *corecipientsIndicator;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) unsigned long long defaultAtomPresentationOptions;
@property (nonatomic) <MFComposeRecipientViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool didIgnoreFirstResponderResign;
@property (nonatomic) bool editable;
@property (nonatomic) bool expanded;
@property (readonly) unsigned long long hash;
@property (nonatomic) int hideLastAtomComma;
@property (nonatomic) double inputDelay;
@property (nonatomic) long long maxRecipients;
@property (nonatomic, readonly) long long numberOfRowsOfTextInField;
@property (nonatomic, readonly) double offsetForRowWithTextField;
@property (nonatomic, retain) MFComposeRecipient *placeholderRecipient;
@property (nonatomic, readonly) NSArray *recipients;
@property (getter=isSeparatorHidden, nonatomic) bool separatorHidden;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *text;
@property (nonatomic, readonly) UITextField *textField;

- (void)_addRecord:(void*)arg1 identifier:(int)arg2;
- (void)_addUncommentedAddress:(id)arg1;
- (bool)_addable;
- (unsigned long long)_addressAtomPresentationOptionsForRecipient:(id)arg1;
- (void)_cancelDelayTimer;
- (void)_delayTimerFired:(id)arg1;
- (void)_deleteSelectedAtom;
- (void)_deselectAtom;
- (void)_reflowAnimated:(bool)arg1;
- (void)_removeAddressAtomPresentationOptionsForRecipient:(id)arg1;
- (void)_removeAllRecipients;
- (void)_removeUncommentedAddress:(id)arg1;
- (void)_setNeedsLayoutConstraintUpdate;
- (void)_setNeedsReflow;
- (bool)_shouldShowCorecipientsIndicatorAtom;
- (void)_tapGestureRecognized:(id)arg1;
- (double)_topRowTextWidth;
- (void)_updateLayoutConstraintsAndGetNumberOfRows:(out unsigned long long*)arg1 textFieldWillBeLastRow:(out bool*)arg2;
- (void)addAddress:(id)arg1;
- (id)addButton;
- (void)addButtonClicked:(id)arg1;
- (void)addRecipient:(id)arg1;
- (void)addRecipient:(id)arg1 index:(unsigned long long)arg2 animate:(bool)arg3;
- (void)addRecord:(void*)arg1 property:(int)arg2 identifier:(int)arg3;
- (id)addresses;
- (bool)allowsDragAndDrop;
- (id)baseFont;
- (bool)becomeFirstResponder;
- (void)clearAllAddressAtomPresentationOptions;
- (void)clearText;
- (void)composeRecipientAtomSelectNext:(id)arg1;
- (void)composeRecipientAtomSelectPrevious:(id)arg1;
- (void)composeRecipientAtomShowPersonCard:(id)arg1;
- (bool)containsAddress:(id)arg1;
- (id)corecipientsIndicator;
- (void)dealloc;
- (unsigned long long)defaultAtomPresentationOptions;
- (id)delegate;
- (void)deselectComposeRecipientAtom:(id)arg1;
- (bool)didIgnoreFirstResponderResign;
- (void)didMoveToSuperview;
- (void)didTapShowCorecipientsForIndicatorAtom:(id)arg1 recipients:(id)arg2;
- (bool)editable;
- (bool)expanded;
- (bool)finishEnteringRecipient;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (bool)hasContent;
- (int)hideLastAtomComma;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)inputDelay;
- (bool)isSeparatorHidden;
- (bool)keyboardInput:(id)arg1 shouldInsertText:(id)arg2 isMarkedText:(bool)arg3;
- (void)keyboardInputChangedSelection:(id)arg1;
- (bool)keyboardInputShouldDelete:(id)arg1;
- (long long)maxRecipients;
- (bool)mf_chooseSelectedSearchResultForTextField:(id)arg1;
- (void)mf_dismissSearchResults:(id)arg1;
- (bool)mf_presentSearchResultsForTextField:(id)arg1;
- (void)mf_recipientTextField:(id)arg1 didAddRecipientAddress:(id)arg2;
- (void)mf_selectNextSearchResultForTextField:(id)arg1;
- (void)mf_selectPreviousSearchResultForTextField:(id)arg1;
- (bool)mf_textFieldShowingSearchResults:(id)arg1;
- (long long)numberOfRowsOfTextInField;
- (double)offsetForRowWithTextField;
- (void)parentDidClose;
- (void)parentWillClose;
- (id)placeholderRecipient;
- (id)recipients;
- (void)reflow;
- (void)refreshPreferredContentSize;
- (void)removeRecipient:(id)arg1;
- (void)selectComposeRecipientAtom:(id)arg1;
- (void)setAddressAtomPresentationOptions:(unsigned long long)arg1 forRecipient:(id)arg2;
- (void)setAddresses:(id)arg1;
- (void)setAllowsDragAndDrop:(bool)arg1;
- (void)setBaseFont:(id)arg1;
- (void)setDefaultAtomPresentationOptions:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDidIgnoreFirstResponderResign:(bool)arg1;
- (void)setEditable:(bool)arg1;
- (void)setExpanded:(bool)arg1;
- (void)setHideLastAtomComma:(int)arg1;
- (void)setInputDelay:(double)arg1;
- (void)setLabel:(id)arg1;
- (void)setMaxRecipients:(long long)arg1;
- (void)setPlaceholderRecipient:(id)arg1;
- (void)setProperties:(id)arg1;
- (void)setProperty:(int)arg1;
- (void)setSeparatorHidden:(bool)arg1;
- (void)showCorecipientIndicator:(bool)arg1 withCorecipients:(id)arg2 animated:(bool)arg3;
- (id)text;
- (void)textChanged:(id)arg1;
- (id)textField;
- (void)textFieldDidBecomeFirstResponder:(id)arg1;
- (void)textFieldDidResignFirstResponder:(id)arg1;
- (double)textFieldOffsetForNumberOfRowsToScroll:(unsigned long long)arg1 numberOfRowsAboveField:(long long)arg2;
- (bool)textFieldShouldReturn:(id)arg1;
- (id)uncommentedAddresses;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
