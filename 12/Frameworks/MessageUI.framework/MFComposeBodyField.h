<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MFComposeBodyField.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MessageUI.framework/MFComposeBodyField.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MessageUI.framework/MessageUI (3445.120.0.1.2)
 */

@interface MFComposeBodyField : UIWebDocumentView <MFComposeBodyField, MFComposeBodyFieldInternal, UIWebDraggingDelegate, WebResourceLoadDelegate> {
    NSDictionary * _attachmentDragPreviews;
    unsigned long long  _attachmentSequenceNumber;
    NSArray * _attachmentURLsToReplaceWithFilenames;
    DOMHTMLElement * _blockquote;
    DOMHTMLElement * _body;
    NSString * _compositionContextID;
    bool  _createAttachmentsForUnknownDataTypes;
    DOMHTMLDocument * _document;
    NSMutableSet * _drawingAttachmentNames;
    NSMutableDictionary * _dropProgressObservationsByPlaceholderId;
    NSMutableDictionary * _droppedAttachments;
    unsigned int  _forwardingNotification;
    unsigned long long  _imageCount;
    UIView * _imageDropSnapshot;
    UIBarButtonItemGroup * _inputAssistantItemGroup;
    unsigned int  _isDirty;
    unsigned int  _isLoading;
    struct CGSize { 
        double width; 
        double height; 
    }  _layoutSize;
    NSString * _localDragSessionID;
    <MFMailComposeViewDelegate> * _mailComposeViewDelegate;
    unsigned int  _needsReplaceImages;
    struct CGSize { 
        double width; 
        double height; 
    }  _originalSize;
    bool  _prefersFirstLineSelection;
    int  _preventLayout;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _previousLayoutMargins;
    struct _NSRange { 
        unsigned long long location; 
        unsigned long long length; 
    }  _rangeToSelect;
    bool  _shouldShowStandardButtons;
}

@property (setter=_setInputAssistantItemGroup:, nonatomic, retain) UIBarButtonItemGroup *_inputAssistantItemGroup;
@property (nonatomic, readonly, retain) UIBarButtonItemGroup *_mailComposeEditingInputAssistantGroup;
@property (nonatomic, retain) NSDictionary *attachmentDragPreviews;
@property (nonatomic, readonly) bool canPaste;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (getter=isDirty, nonatomic) bool dirty;
@property (nonatomic, retain) NSMutableDictionary *dropProgressObservationsByPlaceholderId;
@property (nonatomic, retain) NSMutableDictionary *droppedAttachments;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIView *imageDropSnapshot;
@property (nonatomic, copy) NSString *localDragSessionID;
@property (nonatomic) <MFMailComposeViewDelegate> *mailComposeViewDelegate;
@property (nonatomic, readonly) bool shouldShowInsertPhotosButton;
@property (nonatomic, readonly) bool shouldShowMarkupButton;
@property bool shouldShowStandardButtons;
@property (readonly) Class superclass;

- (id)_addInlineAttachmentWithData:(id)arg1 fileName:(id)arg2 type:(id)arg3;
- (id)_addInlineAttachmentWithData:(id)arg1 fileName:(id)arg2 type:(id)arg3 contentID:(id)arg4;
- (void)_applyLayoutMarginsToBodyStyle;
- (id)_attachmentNameForDataType:(id)arg1 fileName:(id)arg2;
- (void)_captureAttachmentsFromPasteboard:(id)arg1;
- (void)_completeDropForAttachmentData:(id)arg1 dragItem:(id)arg2 dataType:(id)arg3 fileName:(id)arg4;
- (void)_decreaseQuoteLevelKeyCommandInvoked:(id)arg1;
- (void)_deleteContentInContainer:(id)arg1 startParent:(id)arg2 startNextSibling:(id)arg3 endParent:(id)arg4 endNextSibling:(id)arg5;
- (void)_didTapInsertPhotoInputAssistantButton:(id)arg1;
- (id)_dragPreviewInfoForAttachment:(id)arg1;
- (void)_ensureQuotedImagesHaveAttachmentStyleForElement:(id)arg1;
- (void)_finishedLoadingDroppedAttachments:(id)arg1;
- (void)_finishedLoadingURLRequest:(id)arg1 name:(id)arg2;
- (id)_imageDropPlaceholderNodeWithId:(id)arg1 size:(struct CGSize { double x1; double x2; })arg2 hasFinalSize:(bool)arg3;
- (void)_increaseQuoteLevelKeyCommandInvoked:(id)arg1;
- (id)_inputAssistantItemGroup;
- (void)_insertMapItem:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)_insertNodeIntoCurrentSelection:(id)arg1;
- (bool)_isLocalItemProvider:(id)arg1;
- (bool)_isPreviewableImageType:(id)arg1;
- (id)_mailComposeEditingInputAssistantGroup;
- (id)_nodeForAttachmentData:(id)arg1 text:(id)arg2 type:(id)arg3;
- (id)_nodeForAttachmentData:(id)arg1 text:(id)arg2 type:(id)arg3 contentID:(id)arg4;
- (id)_nodeForAttachmentFileURL:(id)arg1 text:(id)arg2 type:(id)arg3 contentID:(id)arg4;
- (void)_nts_AddDOMNode:(id)arg1 quote:(bool)arg2 emptyFirst:(bool)arg3 prepended:(bool)arg4;
- (void)_pasteAsQuotationKeyCommandInvoked:(id)arg1;
- (void)_performAttachmentDropWithItem:(id)arg1 dataType:(id)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3;
- (id)_preferredDataTypeForItemProvider:(id)arg1;
- (id)_previewImageForDataType:(id)arg1 attachmentName:(id)arg2;
- (void)_removeInlineAttachment:(id)arg1;
- (void)_replaceImages;
- (id)_selectedAttachmentURLForMarkup;
- (id)_selectedAttachmentsByURL;
- (void)_setInputAssistantItemGroup:(id)arg1;
- (void)_showQuoteLevelOptionsPopover:(id)arg1;
- (struct CGSize { double x1; double x2; })_sizeScaledToFitContentArea:(struct CGSize { double x1; double x2; })arg1;
- (bool)_sourceIsManaged;
- (void)_swapPlaceholder:(id)arg1 withImageNode:(id)arg2 forceResize:(bool)arg3;
- (id)_teamDataDictionaryForItemProvider:(id)arg1;
- (void)_unhideDOMElementsForDragItems:(id)arg1;
- (id)_webView:(id)arg1 adjustedItemProviders:(id)arg2;
- (bool)_webView:(id)arg1 allowsSelectingContentAfterDropForSession:(id)arg2;
- (long long)_webView:(id)arg1 dataOwnerForDragSession:(id)arg2;
- (long long)_webView:(id)arg1 dataOwnerForDropSession:(id)arg2;
- (void)_webView:(id)arg1 dropInteraction:(id)arg2 item:(id)arg3 willAnimateDropWithAnimator:(id)arg4;
- (void)_webView:(id)arg1 dropWasHandled:(bool)arg2 forSession:(id)arg3 itemProviders:(id)arg4;
- (id)_webView:(id)arg1 previewForCancellingItem:(id)arg2 withDefault:(id)arg3;
- (id)_webView:(id)arg1 previewForDroppingItem:(id)arg2 withDefault:(id)arg3;
- (id)_webView:(id)arg1 previewForLiftingItem:(id)arg2 session:(id)arg3;
- (id)_webView:(id)arg1 previewItem:(id)arg2;
- (id)_webView:(id)arg1 willPerformDropWithSession:(id)arg2;
- (id)_webView:(id)arg1 willUpdateDropProposalToProposal:(id)arg2 forSession:(id)arg3;
- (void)_webthread_webView:(id)arg1 tileDidDraw:(id)arg2;
- (void)addAdditionalItemsToCalloutBar;
- (void)addDOMNode:(id)arg1 quote:(bool)arg2 emptyFirst:(bool)arg3 prepended:(bool)arg4;
- (void)addMailAttributesBeforeDisplayHidingTrailingEmptyQuotes:(bool)arg1;
- (void)addMarkupString:(id)arg1 quote:(bool)arg2 emptyFirst:(bool)arg3 prepended:(bool)arg4;
- (void)appendMarkupString:(id)arg1 quote:(bool)arg2;
- (void)appendOrReplace:(id)arg1 withMarkupString:(id)arg2 quote:(bool)arg3;
- (id)attachmentDragPreviews;
- (void)beginPreventingLayout;
- (bool)canPaste;
- (void)changeQuoteLevel:(long long)arg1;
- (void)changeQuoteLevel:(long long)arg1 forDOMRange:(id)arg2;
- (id)compositionContextID;
- (id)containsRichText;
- (double)contentWidth;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)deferredBecomeFirstResponder;
- (void)deleteNode:(id)arg1;
- (void)deleteRange:(id)arg1;
- (void)deleteTemporarySelectionMarkersFromDocument:(id)arg1;
- (void)didUndoOrRedo:(id)arg1;
- (id)documentFragmentForPasteboardItemAtIndex:(long long)arg1;
- (void)dragInteraction:(id)arg1 session:(id)arg2 didEndWithOperation:(unsigned long long)arg3;
- (id)dropProgressObservationsByPlaceholderId;
- (id)droppedAttachments;
- (void)endPreventingLayout;
- (void)ensureSelection;
- (void)getHTMLStringsAttachmentsCharsetsAndPlainTextAlternative:(id /* block */)arg1;
- (id)htmlString;
- (id)imageDropSnapshot;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)insertDocumentWithData:(id)arg1 fileName:(id)arg2 mimeType:(id)arg3 contentID:(id)arg4;
- (void)insertDocumentWithURL:(id)arg1 isDrawingFile:(bool)arg2;
- (void)insertNode:(id)arg1 parent:(id)arg2 nextSibling:(id)arg3;
- (void)insertNode:(id)arg1 parent:(id)arg2 offset:(int)arg3;
- (void)insertPhotoOrVideoWithInfoDictionary:(id)arg1;
- (id)insertTemporarySelectionMarkersForRange:(id)arg1;
- (void)invalidate;
- (bool)isDirty;
- (bool)isForwardingNotification;
- (id)keyCommands;
- (void)layoutMarginsDidChange;
- (void)layoutWithMinimumSize;
- (id)localDragSessionID;
- (id)mailComposeViewDelegate;
- (void)markupSelectedAttachment;
- (id)nextAttachmentName;
- (void)paste:(id)arg1;
- (id)plainTextAlternative;
- (id)plainTextContent;
- (id)plainTextContentFromDOMDocument:(id)arg1;
- (void)prependMarkupString:(id)arg1 quote:(bool)arg2;
- (void)prependMarkupString:(id)arg1 quote:(bool)arg2 emptyFirst:(bool)arg3;
- (void)prependPreamble:(id)arg1;
- (void)prependString:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectOfElementWithID:(id)arg1;
- (void)removeBlockQuoteFromTree:(id)arg1;
- (void)removeDropPlaceholders;
- (void)replaceAttachment:(id)arg1 withDocumentAtURL:(id)arg2 completion:(id /* block */)arg3;
- (void)replaceAttachment:(id)arg1 withDocumentData:(id)arg2 fileName:(id)arg3 mimeType:(id)arg4;
- (void)replaceImagesIfNecessary;
- (void)replaceNode:(id)arg1 oldNode:(id)arg2;
- (void)restoreSelectionFromTemporaryMarkers;
- (void)restoreSelectionFromTemporaryMarkers:(bool)arg1;
- (void)saveSelectionForUndo;
- (void)scaleImagesToScale:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectedRange;
- (void)setAttachmentDragPreviews:(id)arg1;
- (void)setAttachmentURLsToBeReplacedWithFilename:(id)arg1;
- (void)setCaretPosition:(unsigned long long)arg1;
- (void)setCompositionContextID:(id)arg1;
- (void)setDirty:(bool)arg1;
- (void)setDropProgressObservationsByPlaceholderId:(id)arg1;
- (void)setDroppedAttachments:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setImageDropSnapshot:(id)arg1;
- (void)setLayoutInterval:(int)arg1;
- (void)setLoading:(bool)arg1;
- (void)setLocalDragSessionID:(id)arg1;
- (void)setMailComposeViewDelegate:(id)arg1;
- (void)setMarkupString:(id)arg1;
- (void)setMarkupString:(id)arg1 quote:(bool)arg2;
- (void)setPinHeight:(double)arg1;
- (void)setPrefersFirstLineSelection;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(bool)arg2;
- (void)setSelectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setSelectionStart:(id)arg1 offset:(int)arg2 end:(id)arg3 offset:(int)arg4 affinity:(int)arg5;
- (void)setShouldShowStandardButtons:(bool)arg1;
- (bool)shouldShowInsertPhotosButton;
- (bool)shouldShowMarkupButton;
- (bool)shouldShowStandardButtons;
- (void)splitUpBlockQuotesOverlappingEndOfRange:(id)arg1;
- (void)splitUpBlockQuotesOverlappingStartOfRange:(id)arg1;
- (id)temporaryEndingSelectionMarker;
- (void)unscaleImages;
- (void)updateInputAssistantItem;
- (void)updateQuoteLevelMenu;
- (id)webThreadWebView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3;
- (id)webThreadWebView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5;
- (void)webView:(id)arg1 didFirstVisuallyNonEmptyLayoutInFrame:(id)arg2;
- (void)webView:(id)arg1 resource:(id)arg2 didFailLoadingWithError:(id)arg3 fromDataSource:(id)arg4;
- (void)webView:(id)arg1 resource:(id)arg2 didFinishLoadingFromDataSource:(id)arg3;
- (bool)webView:(id)arg1 shouldDeleteDOMRange:(id)arg2;
- (bool)webView:(id)arg1 shouldInsertText:(id)arg2 replacingDOMRange:(id)arg3 givenAction:(long long)arg4;
- (void)webViewDidChange:(id)arg1;
- (void)webViewDidDraw:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
