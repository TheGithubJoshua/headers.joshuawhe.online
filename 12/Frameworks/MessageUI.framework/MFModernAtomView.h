<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MFModernAtomView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MessageUI.framework/MFModernAtomView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MessageUI.framework/MessageUI (3445.120.0.1.2)
 */

@interface MFModernAtomView : UIDefaultKeyboardInput <MFModernAtomViewResembling> {
    MFModernAtomIconView * _accessoryIconView;
    UIActivityIndicatorView * _activityIndicator;
    MFModernAtomBackgroundView * _background;
    MFModernAtomIconView * _badgeIconView;
    UIView * _baselineView;
    bool  _cachedIsWrappingEnabled;
    UIView * _compositingView;
    unsigned long long  _disabledPresentationOptions;
    UIColor * _effectiveTintColor;
    double  _firstLineIndent;
    bool  _isPrimaryAddressAtom;
    UILabel * _label;
    unsigned long long  _presentationOptions;
    double  _scalingFactor;
    bool  _selected;
    bool  _separatorHidden;
    bool  _separatorIsLeftAligned;
    NSString * _title;
    UIFont * _titleFont;
    UIView * _titleLabelFillView;
    bool  _wrappingSupported;
}

@property (nonatomic, readonly) MFModernAtomIconView *accessoryIconView;
@property (nonatomic, readonly) UIActivityIndicatorView *activityIndicator;
@property (nonatomic, readonly) MFModernAtomBackgroundView *backgroundView;
@property (nonatomic, readonly) MFModernAtomIconView *badgeIconView;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } baselinePoint;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } edgeInsets;
@property (nonatomic, readonly) unsigned long long effectivePresentationOptions;
@property (nonatomic, readonly) UIColor *effectiveTintColor;
@property (nonatomic) double firstLineIndent;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool hidesVIPIndicator;
@property (nonatomic) bool isPrimaryAddressAtom;
@property (nonatomic) unsigned long long presentationOptions;
@property (nonatomic) double scale;
@property (getter=isSelected, nonatomic) bool selected;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } selectionFrame;
@property (nonatomic) bool separatorHidden;
@property (nonatomic) bool separatorIsLeftAligned;
@property (nonatomic) int separatorStyle;
@property (readonly) Class superclass;
@property (nonatomic, copy) NSString *title;
@property (nonatomic, retain) UIFont *titleFont;
@property (nonatomic, readonly) UILabel *titleLabel;

+ (id)_SMSTintColor;
+ (id)_badgeImagesForPresentationOptions:(unsigned long long)arg1 iconOrder:(const unsigned long long*)arg2 orderingLength:(unsigned long long)arg3 tintColor:(id)arg4 large:(bool)arg5 variant:(int)arg6;
+ (id)_defaultLabelAttributesWithFont:(id)arg1 wrappingEnabled:(bool)arg2;
+ (id)_defaultLabelAttributesWithWrappingEnabled:(bool)arg1;
+ (id)_defaultTintColor;
+ (id)_failureTintColor;
+ (struct CGPoint { double x1; double x2; })defaultBaselinePoint;
+ (id)defaultFont;
+ (double)defaultHeight;
+ (double)horizontalPadding;
+ (bool)presentationOptions:(unsigned long long*)arg1 encodedIntoAddress:(id)arg2;
+ (id)primaryAtomFont;

- (id)_centeredTextAttachmentWithImage:(id)arg1;
- (id)_chevronTextAttachment;
- (void)_invalidatePresentationOptions;
- (double)_leftInset;
- (double)_leftPadding;
- (int)_preferredIconVariant;
- (double)_rightInset;
- (double)_rightPadding;
- (void)_setEffectiveTintColor:(id)arg1;
- (void)_setPresentationOption:(unsigned long long)arg1 enabled:(bool)arg2;
- (void)_updateActivityIndicator;
- (void)_updateCompositingFilters;
- (void)_updateFontIfNecessary;
- (void)_updateLabelAttributes;
- (void)_updateSubviewsForWrapping;
- (id)accessoryIconView;
- (id)activityIndicator;
- (void)appendPresentationOption:(unsigned long long)arg1;
- (id)backgroundView;
- (id)badgeIconView;
- (struct CGPoint { double x1; double x2; })baselinePoint;
- (void)clearPresentationOption:(unsigned long long)arg1;
- (void)dealloc;
- (id)description;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })edgeInsets;
- (unsigned long long)effectivePresentationOptions;
- (id)effectiveTintColor;
- (double)firstLineIndent;
- (bool)hidesVIPIndicator;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 presentationOptions:(unsigned long long)arg2 separatorStyle:(int)arg3 wrappingSupported:(bool)arg4;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (bool)isPrimaryAddressAtom;
- (bool)isSelected;
- (bool)isWrappingEnabled;
- (void)layoutSubviews;
- (void)performBuildInAnimationFromTextColor:(id)arg1 withDuration:(double)arg2;
- (double)preferredWidth;
- (double)preferredWidthWithSizeConstraints:(struct CGSize { double x1; double x2; })arg1;
- (unsigned long long)presentationOptions;
- (double)scale;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })selectionFrame;
- (bool)separatorHidden;
- (bool)separatorIsLeftAligned;
- (int)separatorStyle;
- (void)setFirstLineIndent:(double)arg1;
- (void)setHidesVIPIndicator:(bool)arg1;
- (void)setIsPrimaryAddressAtom:(bool)arg1;
- (void)setPresentationOptions:(unsigned long long)arg1;
- (void)setScale:(double)arg1;
- (void)setSelected:(bool)arg1;
- (void)setSelected:(bool)arg1 animated:(bool)arg2;
- (void)setSelected:(bool)arg1 animated:(bool)arg2 style:(unsigned long long)arg3;
- (void)setSeparatorHidden:(bool)arg1;
- (void)setSeparatorIsLeftAligned:(bool)arg1;
- (void)setSeparatorStyle:(int)arg1;
- (void)setTitle:(id)arg1;
- (void)setTitleFont:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (void)tintColorDidChange;
- (id)title;
- (id)titleFont;
- (id)titleLabel;
- (id)viewForLastBaselineLayout;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
