<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PDFHostViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PDFKit.framework/PDFHostViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PDFKit.framework/PDFKit (745.3)
 */

@interface PDFHostViewController : _UIRemoteViewController <UIDocumentPasswordViewDelegate, UIGestureRecognizerDelegate> {
    PDFHostViewControllerPrivate * _private;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (void)createHostView:(id /* block */)arg1 forExtensionIdentifier:(id)arg2;
+ (id)exportedInterface;
+ (id)loadExtension:(id)arg1;
+ (id)serviceViewControllerInterface;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_boundsInDocument;
- (struct CGSize { double x1; double x2; })_documentViewSize;
- (void)_endPDFViewRotationAnimated:(bool)arg1 withUpdate:(bool)arg2;
- (void)_gestureInit;
- (bool)_hasDraggableSelectionAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (double)_hostScrollViewZoomScale;
- (bool)_isTouchingLollipopAtLocationOfFirstTouch:(struct CGPoint { double x1; double x2; })arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_pdfViewInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_pdfViewSafeAreaInsets;
- (void)_resetPDFHostViewControllerViews;
- (void)_setMaximumZoomScale:(double)arg1;
- (void)_setMinimumZoomScale:(double)arg1;
- (void)_setupExtensionInterruptionBlock;
- (unsigned long long)_typeForGestureRecognizer:(id)arg1;
- (void)appendPasswordUI;
- (void)beginPDFViewRotation;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (void)cancelFindString;
- (void)cancelFindStringWithHighlightsCleared:(bool)arg1;
- (void)clearSearchHighlights;
- (void)copy:(id)arg1;
- (long long)currentPageIndex;
- (void)dealloc;
- (void)didCopyData:(id)arg1;
- (void)didCopyString:(id)arg1;
- (void)didLongPressPageIndex:(long long)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 withAnnotationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)didLongPressURL:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2 withAnnotationRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)documentIsLocked:(bool)arg1;
- (void)endPDFViewRotation;
- (void)endPDFViewRotationWithContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)findString:(id)arg1 withOptions:(unsigned long long)arg2;
- (void)findStringUpdate:(unsigned long long)arg1 done:(bool)arg2;
- (void)focusOnSearchResultAtIndex:(unsigned long long)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)goToDestination:(long long)arg1 point:(struct CGPoint { double x1; double x2; })arg2;
- (void)goToPageIndex:(long long)arg1;
- (void)goToPageIndex:(long long)arg1 pageFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)goToPageIndex:(long long)arg1 withViewFrustum:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)goToURL:(id)arg1 atLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)handleGesture:(id)arg1;
- (void)killExtensionProcess;
- (double)maximumZoomScale;
- (double)minimumZoomScale;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)pageCount;
- (id)pageNumberIndicator;
- (void)selectAll:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDocumentData:(id)arg1 withScrollView:(id)arg2;
- (void)setHasSelection:(bool)arg1;
- (void)setSelectionRects:(id)arg1;
- (void)setTextSelectionPoints:(struct CGPoint { double x1; double x2; })arg1 right:(struct CGPoint { double x1; double x2; })arg2;
- (void)setTextSelectionState:(int)arg1;
- (void)setup;
- (void)setupDocumentViewSize:(struct CGSize { double x1; double x2; })arg1;
- (void)showTextSelectionMenu:(bool)arg1 selectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)updateAutoScaleFactor;
- (void)updateCurrentPageIndex:(long long)arg1;
- (void)updateDocumentIsLocked:(bool)arg1;
- (void)updateDocumentViewSize;
- (void)updatePDFViewLayout;
- (void)updatePageCount:(long long)arg1;
- (void)userDidEnterPassword:(id)arg1 forPasswordView:(id)arg2;
- (void)viewDidLayoutSubviews;
- (void)zoomToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
