<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PDFPage.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PDFKit.framework/PDFPage.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PDFKit.framework/PDFKit (745.3)
 */

@interface PDFPage : NSObject <NSCopying> {
    PDFPagePrivate * _private;
}

@property (nonatomic, readonly) NSArray *annotations;
@property (nonatomic, readonly) NSAttributedString *attributedString;
@property (nonatomic, readonly) NSData *dataRepresentation;
@property (nonatomic) bool displaysAnnotations;
@property (nonatomic, readonly) PDFDocument *document;
@property (nonatomic, readonly) NSString *label;
@property (nonatomic, readonly) unsigned long long numberOfCharacters;
@property (nonatomic, readonly) struct CGPDFPage { }*pageRef;
@property (nonatomic) long long rotation;
@property (nonatomic, readonly) NSString *string;

// Image: /System/Library/Frameworks/PDFKit.framework/PDFKit

+ (id)fontWithPDFFont:(struct CGPDFFont { }*)arg1 size:(float)arg2;
+ (bool)isExcludingAKAnnotationRenderingForThisThread;
+ (bool)isNativeRotationDrawingEnabledForThisThread;
+ (void)setExcludingAKAnnotationRenderingForThisThread:(bool)arg1;
+ (void)setNativeRotationDrawingEnabledForThisThread:(bool)arg1;
+ (void)setShouldHideAnnotationsForThisThread:(bool)arg1;
+ (bool)shouldHideAnnotationsForThisThread;

- (void).cxx_destruct;
- (void)_addBox:(int)arg1 toDictionary:(struct __CFDictionary { }*)arg2 offset:(struct CGPoint { double x1; double x2; })arg3;
- (void)_addWidgetAnnotationToLookupDictionary:(id)arg1;
- (void)_commonInit;
- (unsigned long long)_documentIndex;
- (void)_drawAnnotationsWithBox:(long long)arg1 inContext:(struct CGContext { }*)arg2;
- (void)_drawPageCGImageInContext:(struct CGContext { }*)arg1 withDisplayBox:(long long)arg2;
- (void)_drawPageImageInContext:(struct CGContext { }*)arg1 withRotation:(bool)arg2 withDisplayBox:(long long)arg3;
- (void)_drawWithBox:(long long)arg1 inContext:(struct CGContext { }*)arg2 withRotation:(bool)arg3 withAntialiasing:(bool)arg4 isThumbnail:(bool)arg5 withAnnotations:(bool)arg6 withBookmark:(bool)arg7 withDelegate:(id)arg8;
- (struct CGImage { }*)_newCGImageWithBox:(long long)arg1 bitmapSize:(struct CGSize { double x1; double x2; })arg2 scale:(double)arg3 offset:(struct CGPoint { double x1; double x2; })arg4 fillBackground:(bool)arg5 withRotation:(bool)arg6 withAntialiasing:(bool)arg7 withAnnotations:(bool)arg8 withBookmark:(bool)arg9 withDelegate:(id)arg10;
- (void)_postAnnotationsChangedNotificationCoalesced;
- (void)_removeWidgetAnnotationFromLookupDictionary:(id)arg1;
- (void)addAnnotation:(id)arg1;
- (void)addAnnotationFormField:(id)arg1;
- (void)addScannedAnnotation:(id)arg1;
- (bool)akDidSetupRealPageModelController;
- (id)akPageAdaptor;
- (id)allAnnotations;
- (id)annotationAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)annotationAtRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)annotationChanges;
- (id)annotationWithUUID:(id)arg1;
- (id)annotations;
- (id)annotationsForFieldName:(id)arg1;
- (id)attributedString;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForBox:(long long)arg1;
- (void)changedAnnotation:(id)arg1;
- (id)changedAnnotations;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })characterBoundsAtIndex:(long long)arg1;
- (long long)characterIndexAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)clearAnnotationChanges;
- (bool)colorWidgetBackgrounds;
- (bool)columnAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)columnAtPointIfAvailable:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })columnFrameAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)createAttributedStringCP;
- (id)dataRepresentation;
- (void)dealloc;
- (id)debugQuickLookObject;
- (id)description;
- (bool)didChangeBounds;
- (bool)disableUndoManagerForAK;
- (bool)displaysAnnotations;
- (id)document;
- (void)drawBurnedInAnnotationsWithBox:(long long)arg1 inContext:(struct CGContext { }*)arg2;
- (void)drawPopupAnnotationsWithBox:(long long)arg1;
- (void)drawWithBox:(long long)arg1 inContext:(struct CGContext { }*)arg2;
- (void)drawWithBox:(long long)arg1 inContext:(struct CGContext { }*)arg2 isThumbnail:(bool)arg3;
- (void)drawWithBox:(long long)arg1 toContext:(struct CGContext { }*)arg2;
- (void)enableUndoManagerForAK:(bool)arg1;
- (bool)enqueuedForDataDetection;
- (bool)enqueuedForLayout;
- (void)fetchPageLayoutOnThread:(id)arg1;
- (struct __CFDictionary { }*)gcCreateBoxDictionary;
- (void)getAnnotations;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })getDrawingTransformForBox:(long long)arg1;
- (bool)hasArtBox;
- (bool)hasBleedBox;
- (bool)hasCropBox;
- (bool)hasOpenPopups;
- (bool)hasPopups;
- (bool)hasRunDataDetectors;
- (bool)hasTrimBox;
- (id)image;
- (id)imageOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2 withRotation:(bool)arg3 withAntialiasing:(bool)arg4;
- (id)imageOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2 withRotation:(bool)arg3 withAntialiasing:(bool)arg4 withAnnotations:(bool)arg5;
- (id)imageOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2 withRotation:(bool)arg3 withAntialiasing:(bool)arg4 withAnnotations:(bool)arg5 withBookmark:(bool)arg6;
- (id)imageOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2 withRotation:(bool)arg3 withAntialiasing:(bool)arg4 withAnnotations:(bool)arg5 withBookmark:(bool)arg6 withDelegate:(id)arg7;
- (id)init;
- (id)initWithImage:(id)arg1;
- (id)initWithImageSource:(struct CGImageSource { }*)arg1;
- (id)initWithPageRef:(struct CGPDFPage { }*)arg1;
- (void)insertAnnotation:(id)arg1 atIndex:(long long)arg2;
- (bool)isBookmarked;
- (id)label;
- (void)lazilyLoadAnnotations;
- (void)lazilyLoadAnnotationsWithView:(id)arg1;
- (void)loadTextChars;
- (id)noFillthumbnailOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2;
- (id)noFillthumbnailOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2 withBookmark:(bool)arg3;
- (void)noteUnsupportedFeature:(id)arg1;
- (unsigned long long)numberOfCharacters;
- (struct CGPDFLayout { }*)pageLayout;
- (struct CGPDFLayout { }*)pageLayoutIfAvail;
- (void)pageLayoutInvokation;
- (struct CGPDFPage { }*)pageRef;
- (void)postAnnotationsChangedNotification;
- (void)printActivePageAnnotations;
- (void)purgeAll;
- (void)purgePageLayout;
- (void)removeAnnotation:(id)arg1;
- (void)removeAnnotation:(id)arg1 atIndex:(long long)arg2;
- (void)resetChangedAnnotations;
- (long long)rotation;
- (void)scanAddedAnnotations;
- (void)scanData:(id)arg1;
- (id)scannedAnnotationAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)scannedAnnotations;
- (id)selectionForAll;
- (id)selectionForCodeRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)selectionForLineAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)selectionForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)selectionForRangeCommon:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 isCodeRange:(bool)arg2;
- (id)selectionForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)selectionForWordAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)selectionFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2;
- (id)selectionFromPoint:(struct CGPoint { double x1; double x2; })arg1 toPoint:(struct CGPoint { double x1; double x2; })arg2 type:(int)arg3;
- (id)selectionFromPointToBottom:(struct CGPoint { double x1; double x2; })arg1 type:(int)arg2;
- (id)selectionFromTopToPoint:(struct CGPoint { double x1; double x2; })arg1 type:(int)arg2;
- (void)setAKDidSetupRealPageModelController:(bool)arg1;
- (void)setBookmarked:(bool)arg1;
- (void)setBookmarked:(bool)arg1 updateBookmarks:(bool)arg2;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forBox:(long long)arg2;
- (void)setColorWidgetBackgrounds:(bool)arg1;
- (void)setDisplaysAnnotations:(bool)arg1;
- (void)setDisplaysMarkupAnnotations:(bool)arg1;
- (void)setDocument:(id)arg1;
- (void)setEnqueuedForDataDetection:(bool)arg1;
- (void)setEnqueuedForLayout:(bool)arg1;
- (void)setImage:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setPageLayout:(struct CGPDFLayout { }*)arg1;
- (bool)setPageRef:(struct CGPDFPage { }*)arg1;
- (void)setRotation:(long long)arg1;
- (void)setThreadFetchingLayout:(struct _opaque_pthread_t { long long x1; struct __darwin_pthread_handler_rec {} *x2; BOOL x3[8176]; }*)arg1;
- (void)setView:(id)arg1;
- (void)setupAKPageAdaptorIfNecessary;
- (id)string;
- (id)thumbnailOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2;
- (id)thumbnailOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2 withBookmark:(bool)arg3;
- (id)thumbnailOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2 withBookmark:(bool)arg3 withAnnotations:(bool)arg4;
- (void)transformContext:(struct CGContext { }*)arg1 forBox:(long long)arg2;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformForBox:(long long)arg1;
- (id)unsupportedFeatures;
- (id)view;
- (bool)writeToConsumer:(struct CGDataConsumer { }*)arg1;

// Image: /System/Library/PrivateFrameworks/News/NewsArticles.framework/NewsArticles

- (id)na_thumbnailOfSize:(struct CGSize { double x1; double x2; })arg1 forBox:(long long)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
