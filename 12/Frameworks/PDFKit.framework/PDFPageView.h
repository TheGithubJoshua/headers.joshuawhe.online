<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PDFPageView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PDFKit.framework/PDFPageView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PDFKit.framework/PDFKit (745.3)
 */

@interface PDFPageView : UIView <PDFPageLayerInterface, UITextViewDelegate> {
    PDFPageViewPrivate * _private;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_addPDFAnnotation:(id)arg1;
- (void)_addPDFAnnotationChoiceWidget:(id)arg1;
- (void)_addPDFAnnotationStampSignature:(id)arg1;
- (void)_addPDFAnnotationTextWidget:(id)arg1;
- (bool)_allowsFormFieldEntry;
- (void)_choiceWidgetDone;
- (void)_didRotatePageNotification:(id)arg1;
- (void)_formChanged:(id)arg1;
- (void)_rotateActiveWidgetAnnotation;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })_rotationTransformForPageView;
- (void)_setAttributedStringForAnnotation:(id)arg1 stringValue:(id)arg2 textView:(id)arg3;
- (void)_setPageLayerEffectForID:(id)arg1 hidden:(bool)arg2;
- (void)_setupBookmarkLayer;
- (void)_setuppageAnnotationEffects;
- (bool)_shouldReplaceStringOnAnnotation:(id)arg1 withTextView:(id)arg2;
- (void)_updateAnnotationVisibility:(id)arg1;
- (void)_updateWidgetControl:(id)arg1 forBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)addAnnotation:(id)arg1;
- (void)addBookmark;
- (void)addControlForWidgetAnnotation:(id)arg1;
- (void)addPageLayerEffect:(id)arg1;
- (void)addSearchSelection:(id)arg1;
- (void)applyTileLayoutScale:(double)arg1;
- (id)backgroundImage;
- (int)backgroundImageQuality;
- (void)clearLollipopMagnifier;
- (void)clearTextSelectionHandles;
- (void)clearTextSelectionMagnifier;
- (void)clearTiles;
- (void)colorWidgetBackgrounds:(bool)arg1;
- (struct CGPoint { double x1; double x2; })convertPointToPageView:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectToPageView:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)dealloc;
- (long long)displayBox;
- (void)enableTextSelectionHandles;
- (bool)enablesTileUpdates;
- (void)forceTileUpdate;
- (id)geometryInterface;
- (bool)hasBackgroundImage;
- (void)hideTileLayer:(bool)arg1;
- (id)initWithPage:(id)arg1 geometryInterface:(id)arg2 andRenderingProperties:(id)arg3;
- (bool)isVisible;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })layerEffectTransform;
- (long long)numberOfComponentsInPickerView:(id)arg1;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)page;
- (id)pageLayer;
- (id)pageLayerEffectForID:(id)arg1;
- (void)pickerView:(id)arg1 didSelectRow:(long long)arg2 inComponent:(long long)arg3;
- (long long)pickerView:(id)arg1 numberOfRowsInComponent:(long long)arg2;
- (id)pickerView:(id)arg1 viewForRow:(long long)arg2 forComponent:(long long)arg3 reusingView:(id)arg4;
- (void)previewRotatePage:(double)arg1;
- (void)removeActiveWidgetAnnotation;
- (void)removeAnnotation:(id)arg1;
- (void)removeBookmark;
- (void)removePageLayerEffectForID:(id)arg1;
- (void)restoreOriginalTileLayout;
- (void)saveOriginalTileLayout;
- (void)scalePageLayerEffects:(double)arg1;
- (id)selection;
- (void)setAnnotation:(id)arg1 isSelected:(bool)arg2;
- (void)setBackgroundImage:(id)arg1 atBackgroundQuality:(int)arg2;
- (void)setEnableSelectionDrawing:(bool)arg1;
- (void)setEnableTileUpdates:(bool)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHidden:(bool)arg1;
- (void)setLollipopMagnifierPagePoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setNeedsTilesUpdate;
- (void)setSearchSelection:(id)arg1;
- (void)setSelection:(id)arg1;
- (void)setState:(long long)arg1 onButtonWidgetAnnotation:(id)arg2;
- (void)setStringValue:(id)arg1 onChoiceWidgetAnnotation:(id)arg2 withTableView:(id)arg3;
- (void)setStringValue:(id)arg1 onChoiceWidgetAnnotation:(id)arg2 withTextField:(id)arg3;
- (void)setStringValue:(id)arg1 onTextWidgetAnnotation:(id)arg2 withTextView:(id)arg3;
- (void)setTextSelectionMagnifierPagePoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setVisibilityDelegateIndex:(unsigned long long)arg1;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)updateAnnotation:(id)arg1;
- (void)updateBookmark;
- (void)updatePageLayerEffectForID:(id)arg1;
- (void)updatePageLayerEffects;
- (unsigned long long)visibilityDelegateIndex;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
