<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HKElectrocardiogram.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/HealthKit.framework/HKElectrocardiogram.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/HealthKit.framework/HealthKit (1)
 */

@interface HKElectrocardiogram : HKSample <_HKBinarySample> {
    struct Electrocardiogram { 
        int (**_vptr$Base)(); 
        double _frequency; 
        struct PtrVector<binarysample::ElectrocardiogramLead> { 
            struct vector<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> >, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > { 
                struct unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > {} *__begin_; 
                struct unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > {} *__end_; 
                struct __compressed_pair<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > *, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > { 
                    struct unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > {} *__value_; 
                } __end_cap_; 
            } _v; 
        } _leads; 
        struct { 
            unsigned int frequency : 1; 
        } _has; 
    }  _reading;
}

@property (getter=_averageHeartRate, nonatomic, readonly) HKQuantity *averageHeartRate;
@property (getter=_classification, nonatomic, readonly) unsigned long long classification;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) HKQuantity *frequency;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) UIColor *hk_BPMTextColor;
@property (nonatomic, readonly) UIColor *hk_cardBackgroundColor;
@property (nonatomic, readonly) UIColor *hk_cardHeaderColor;
@property (nonatomic, readonly) UIColor *hk_classificationTextColor;
@property (nonatomic, readonly) bool hk_hasPositiveSymptoms;
@property (nonatomic, readonly) bool hk_isBPMTextBold;
@property (nonatomic, readonly) bool hk_isClassificationSupported;
@property (nonatomic, readonly) bool hk_isPossibleAtrialFibrillation;
@property (nonatomic, readonly) bool hk_isSymptomsNoSymptoms;
@property (nonatomic, readonly) bool hk_isSymptomsNotSet;
@property (nonatomic, readonly) NSString *hk_localizedAverageBPM;
@property (nonatomic, readonly) NSString *hk_localizedDuration;
@property (nonatomic, readonly) NSString *hk_localizedNumSymptoms;
@property (nonatomic, readonly) NSString *hk_localizedUppercaseNumSymptoms;
@property (nonatomic, readonly) UIColor *hk_numSymptomsTextColor;
@property (nonatomic, readonly) NSString *hk_timeStampCompositingFilter;
@property (nonatomic, readonly) UIColor *hk_timeStampTextColor;
@property (nonatomic, readonly) NSString *hrui_regulatedClassificationShortBodyText;
@property (nonatomic, readonly) NSArray *leadNames;
@property (getter=_localizedClassification, nonatomic, readonly) NSString *localizedClassification;
@property (getter=_localizedSymptoms, nonatomic, readonly) NSArray *localizedSymptoms;
@property (nonatomic, readonly) long long numberOfValues;
@property (readonly) Class superclass;
@property (getter=_symptoms, nonatomic, readonly) unsigned long long symptoms;

// Image: /System/Library/Frameworks/HealthKit.framework/HealthKit

+ (id)_electrocardiogramWithStartDate:(id)arg1 device:(id)arg2 metadata:(id)arg3;
+ (bool)_isConcreteObjectClass;
+ (bool)supportsSecureCoding;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)_averageHeartRate;
- (unsigned long long)_classification;
- (id)_localizedClassification;
- (id)_localizedSymptoms;
- (void)_setPayload:(id)arg1;
- (unsigned long long)_symptoms;
- (id)_validateConfiguration;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateDataForLead:(unsigned long long)arg1 block:(id /* block */)arg2;
- (id)frequency;
- (id)initWithCoder:(id)arg1;
- (bool)isEqual:(id)arg1;
- (id)leadNames;
- (long long)numberOfValues;
- (id)payload;
- (bool)prepareForSaving:(id*)arg1;
- (void)setReading:(struct Electrocardiogram { int (**x1)(); double x2; struct PtrVector<binarysample::ElectrocardiogramLead> { struct vector<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> >, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > { struct unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > {} *x_1_2_1; struct unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > {} *x_1_2_2; struct __compressed_pair<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > *, std::__1::allocator<std::__1::unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > > > { struct unique_ptr<binarysample::ElectrocardiogramLead, std::__1::default_delete<binarysample::ElectrocardiogramLead> > {} *x_3_3_1; } x_1_2_3; } x_3_1_1; } x3; })arg1;

// Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon

+ (Class)hd_dataEntityClass;

- (id)codableRepresentationForSync;

// Image: /System/Library/PrivateFrameworks/HealthUI.framework/HealthUI

+ (id)hk_abnormalBPMTextColor;
+ (id)hk_abnormalCardHeaderColor;
+ (id)hk_abnormalTimeStampCompositingFilter;
+ (id)hk_defaultBPMTextColor;
+ (id)hk_defaultCardBackgroundColor;
+ (id)hk_defaultCardHeaderColor;
+ (id)hk_defaultClassificationTextColor;
+ (id)hk_defaultNumSymptomsTextColor;
+ (id)hk_defaultTimeStampCompositingFilter;
+ (id)hk_defaultTimeStampTextColor;
+ (id)hk_onboardingCardBackgroundColor;
+ (id)hk_onboardingCardHeaderColor;
+ (id)hk_positiveNumSymptomsTextColor;

- (bool)_hk_classificationHasAbnormalBPMFontColorAndStyle;
- (bool)_hk_classificationHasAbnormalHeaderColorAndStyle;
- (id)_hk_waveformPathsWithNumberOfValues:(long long)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 maximumNumberOfValuesPerPath:(long long)arg3 shouldResetXValues:(bool)arg4 initialValuesToOmit:(long long)arg5 minimumValueInMicrovolts:(float)arg6 maximumValueInMicrovolts:(float)arg7;
- (id)_hk_waveformPathsWithPointsPerSecond:(double)arg1 pointsPerMillivolt:(double)arg2 maximumNumberOfValuesPerPath:(long long)arg3 shouldResetXValues:(bool)arg4 initialValuesToOmit:(long long)arg5 minimumValueInMicrovolts:(float)arg6 maximumValueInMicrovolts:(float)arg7;
- (id)hk_BPMTextColor;
- (id)hk_cardBackgroundColor;
- (id)hk_cardHeaderColor;
- (id)hk_classificationTextColor;
- (bool)hk_hasPositiveSymptoms;
- (bool)hk_isBPMTextBold;
- (bool)hk_isClassificationSupported;
- (bool)hk_isPossibleAtrialFibrillation;
- (bool)hk_isSymptomsNoSymptoms;
- (bool)hk_isSymptomsNotSet;
- (id)hk_localizedAverageBPM;
- (id)hk_localizedDuration;
- (id)hk_localizedNumSymptoms;
- (id)hk_localizedUppercaseNumSymptoms;
- (id)hk_numSymptomsTextColor;
- (id)hk_timeStampCompositingFilter;
- (id)hk_timeStampTextColor;
- (id)hk_waveformPathsWithNumberOfValues:(long long)arg1 fitToWidth:(double)arg2 pointsPerMillivolt:(double)arg3 minimumValueInMillivolts:(float)arg4 maximumValueInMillivolts:(float)arg5;
- (id)hk_waveformPathsWithPointsPerSecond:(double)arg1 pointsPerMillivolt:(double)arg2 minimumValueInMillivolts:(float)arg3 maximumValueInMillivolts:(float)arg4;
- (id)hk_waveformPathsWithPointsPerSecond:(double)arg1 pointsPerMillivolt:(double)arg2 wrappingDuration:(double)arg3 omittingInitialDuration:(double)arg4;
- (id)hk_waveformPathsWithPointsPerSecond:(double)arg1 pointsPerMillivolt:(double)arg2 wrappingDuration:(double)arg3 omittingInitialDuration:(double)arg4 minimumValueInMillivolts:(float)arg5 maximumValueInMillivolts:(float)arg6;

// Image: /System/Library/PrivateFrameworks/HeartRhythmUI.framework/HeartRhythmUI

- (id)hrui_regulatedClassificationShortBodyText;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
