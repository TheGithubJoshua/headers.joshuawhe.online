<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>HKHeartRhythmAvailability.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/HealthKit.framework/HKHeartRhythmAvailability.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/HealthKit.framework/HealthKit (1)
 */

@interface HKHeartRhythmAvailability : NSObject {
    HKActiveWatchFeatureAvailabilityDataSource * _availabilityDataSource;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _cacheLock;
    int  _featureAvailabilityConditionsDidUpdateNotificationToken;
    HKHealthStore * _healthStore;
    HKObserverSet * _heartRhythmAvailabilityObservers;
    NSUserDefaults * _heartRhythmUserDefaults;
    NSNumber * _isAtrialFibrillationDetectionDisabledCache;
    NSNumber * _isElectrocardiogramDisabledCache;
    HKKeyValueDomain * _keyValueDomain;
    HKMobileCountryCodeManager * _mobileCountryCodeManager;
    int  _onboardingStateDidChangeNotificationToken;
    NPSManager * _syncManager;
}

@property (getter=isAtrialFibrillationDetectionDisabled, nonatomic, readonly) bool atrialFibrillationDetectionDisabled;
@property (getter=isAtrialFibrillationDetectionOnboardingCompleted, nonatomic, readonly) bool atrialFibrillationDetectionOnboardingCompleted;
@property (nonatomic, retain) HKActiveWatchFeatureAvailabilityDataSource *availabilityDataSource;
@property (nonatomic, readonly) NSDate *electrocardiogramFirstOnboardingCompletedDate;
@property (getter=isElectrocardiogramFirstRecordingCompleted, nonatomic) bool electrocardiogramFirstRecordingCompleted;
@property (getter=isElectrocardiogramOnboardingCompleted, nonatomic, readonly) bool electrocardiogramOnboardingCompleted;
@property (getter=isElectrocardiogramRecordingDisabled, nonatomic, readonly) bool electrocardiogramRecordingDisabled;
@property (nonatomic) int featureAvailabilityConditionsDidUpdateNotificationToken;
@property (nonatomic, retain) HKHealthStore *healthStore;
@property (nonatomic, retain) HKObserverSet *heartRhythmAvailabilityObservers;
@property (nonatomic, retain) NSUserDefaults *heartRhythmUserDefaults;
@property (nonatomic, retain) HKKeyValueDomain *keyValueDomain;
@property (nonatomic, retain) HKMobileCountryCodeManager *mobileCountryCodeManager;
@property (nonatomic) int onboardingStateDidChangeNotificationToken;
@property (nonatomic, retain) NPSManager *syncManager;

+ (unsigned long long)_atrialFibrillationDetectionSupportedStateForDeviceRegion:(id)arg1;
+ (bool)_isAtrialFibrillationDetectionDisabledWithDataSource:(id)arg1;
+ (bool)_isAtrialFibrillationDetectionStateSupportedOrNeedsGeolocationOnWatch:(id)arg1;
+ (bool)_isAtrialFibrillationDetectionSupportedOnPhone:(id)arg1;
+ (bool)_isDeviceRunningSeed:(id)arg1;
+ (bool)_isElectrocardiogramDisabledWithDataSource:(id)arg1;
+ (bool)_isElectrocardiogramSupportedOnPhone:(id)arg1;
+ (bool)_isRunningSeed;
+ (id)activePairedDevice;
+ (bool)atrialFibrillationDetectionSupportedForDevice:(id)arg1;
+ (unsigned long long)atrialFibrillationDetectionSupportedState;
+ (unsigned long long)atrialFibrillationDetectionSupportedStateForActiveWatch;
+ (unsigned long long)atrialFibrillationDetectionSupportedStateForWatch:(id)arg1;
+ (long long)currentAtrialFibrillationDetectionOnboardingVersion;
+ (long long)currentElectrocardiogramOnboardingVersion;
+ (bool)electrocardiogramSupportedForDevice:(id)arg1;
+ (unsigned long long)electrocardiogramSupportedState;
+ (unsigned long long)electrocardiogramSupportedStateForActiveWatch;
+ (unsigned long long)electrocardiogramSupportedStateForWatch:(id)arg1;
+ (id)featureAvailabilityUserDefaults;
+ (bool)isAtrialFibrillationDetectionDisabledForOnboardingCountryCode:(id)arg1;
+ (bool)isAtrialFibrillationDetectionSettingEnabled;
+ (bool)isAtrialFibrillationDetectionStateSupportedOrNeedsGeolocationOnActiveWatch;
+ (bool)isAtrialFibrillationDetectionStateSupportedOrNeedsGeolocationOnAllWatches;
+ (bool)isAtrialFibrillationDetectionStateSupportedOrNeedsGeolocationOnAnyWatch;
+ (bool)isAtrialFibrillationDetectionSupportedOnPairedPhone;
+ (bool)isDeviceSeries3OrOlder:(id)arg1;
+ (bool)isElectrocardiogramSupportedOnActiveWatch;
+ (bool)isElectrocardiogramSupportedOnAllWatches;
+ (bool)isElectrocardiogramSupportedOnAnyWatch;
+ (bool)isElectrocardiogramSupportedOnPairedPhone;
+ (bool)isElectrocardiogramSupportedOnWatch:(id)arg1;
+ (bool)isHeartRateEnabledInPrivacy;
+ (id)pairedDevices;
+ (bool)shouldAdvertiseAtrialFibrillationDetectionForActiveWatch;
+ (bool)shouldAdvertiseAtrialFibrillationDetectionForWatch:(id)arg1;
+ (bool)shouldAdvertiseElectrocardiogramForActiveWatch;
+ (bool)shouldAdvertiseElectrocardiogramForWatch:(id)arg1;
+ (bool)shouldInstallWatchApp;

- (void).cxx_destruct;
- (id)_electrocardiogramFirstOnboardingCompletedDate;
- (void)_featureAvailabilityConditionsDidUpdate;
- (bool)_isOnboardingCompletedForKey:(id)arg1 version:(long long)arg2;
- (void)_localeDidChange;
- (void)_pairedOrActiveDevicesDidChange:(id)arg1;
- (void)_registerForNotifications;
- (void)_resetIsAtrialFibrillationDetectionDisabledCacheWithLock:(bool)arg1;
- (void)_resetIsElectrocardiogramDisabledCacheWithLock:(bool)arg1;
- (void)_setAtrialFibrillationDetectionOnboardingCompletedForVersion:(long long)arg1 inCountryCode:(id)arg2;
- (void)_setElectrocardiogramOnboardingCompletedForVersion:(long long)arg1 inCountryCode:(id)arg2;
- (void)_setFirstOnboardingCompletedDate:(id)arg1 forKey:(id)arg2 completion:(id /* block */)arg3;
- (void)_setOnboardingVersionCompleted:(long long)arg1 forKey:(id)arg2 additionalValues:(id)arg3 completion:(id /* block */)arg4;
- (void)_triggerFeatureAvailabilityUpdateOnPhoneAndWatchWithDelay:(long long)arg1;
- (void)_unregisterForNotifications;
- (void)addHeartRhythmAvailabilityObserver:(id)arg1;
- (id)atrialFibrillationDetectionOnboardingCountryCode;
- (id)availabilityDataSource;
- (void)dealloc;
- (id)electrocardiogramFirstOnboardingCompletedDate;
- (id)electrocardiogramOnboardingCountryCode;
- (int)featureAvailabilityConditionsDidUpdateNotificationToken;
- (id)healthStore;
- (id)heartRhythmAvailabilityObservers;
- (id)heartRhythmUserDefaults;
- (id)initWithHealthStore:(id)arg1;
- (bool)isAtrialFibrillationDetectionDisabled;
- (void)isAtrialFibrillationDetectionOnboardingAvailableInCurrentLocation:(id /* block */)arg1;
- (void)isAtrialFibrillationDetectionOnboardingAvailableInCurrentLocationForActiveWatch:(id /* block */)arg1;
- (void)isAtrialFibrillationDetectionOnboardingAvailableInCurrentLocationForWatch:(id)arg1 completion:(id /* block */)arg2;
- (bool)isAtrialFibrillationDetectionOnboardingCompleted;
- (bool)isElectrocardiogramFirstRecordingCompleted;
- (void)isElectrocardiogramOnboardingAvailableInCurrentLocation:(id /* block */)arg1;
- (void)isElectrocardiogramOnboardingAvailableInCurrentLocationForActiveWatch:(id /* block */)arg1;
- (void)isElectrocardiogramOnboardingAvailableInCurrentLocationForWatch:(id)arg1 completion:(id /* block */)arg2;
- (bool)isElectrocardiogramOnboardingCompleted;
- (bool)isElectrocardiogramRecordingDisabled;
- (id)keyValueDomain;
- (id)mobileCountryCodeManager;
- (void)notifyHeartRhythmAvailabilityDidUpdate;
- (int)onboardingStateDidChangeNotificationToken;
- (void)removeHeartRhythmAvailabilityObserver:(id)arg1;
- (void)resetAtrialFibrillationDetectionOnboarding;
- (void)resetElectrocardiogramOnboarding;
- (void)setAtrialFibrillationDetectionOnboardingCompletedForCountryCode:(id)arg1;
- (void)setAvailabilityDataSource:(id)arg1;
- (void)setElectrocardiogramFirstOnboardingCompletedDate:(id)arg1;
- (void)setElectrocardiogramFirstRecordingCompleted:(bool)arg1;
- (void)setElectrocardiogramOnboardingCompleted;
- (void)setElectrocardiogramOnboardingCompletedForCountryCode:(id)arg1;
- (void)setFeatureAvailabilityConditionsDidUpdateNotificationToken:(int)arg1;
- (void)setHealthStore:(id)arg1;
- (void)setHeartRhythmAvailabilityObservers:(id)arg1;
- (void)setHeartRhythmUserDefaults:(id)arg1;
- (void)setKeyValueDomain:(id)arg1;
- (void)setMobileCountryCodeManager:(id)arg1;
- (void)setOnboardingStateDidChangeNotificationToken:(int)arg1;
- (void)setSyncManager:(id)arg1;
- (id)syncManager;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
