<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SFSafariViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SafariServices.framework/SFSafariViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SafariServices.framework/SafariServices (604.1)
 */

@interface SFSafariViewController : UIViewController <SFBrowserRemoteViewControllerDelegate, SFInteractiveDismissControllerDelegate, SFQueueingServiceViewControllerProxyDelegate> {
    _WKActivatedElementInfo * _activatedElementInfo;
    NSMutableDictionary * _activitiesMap;
    NSArray * _activityItemsForCustomActivities;
    _UIAsyncInvocation * _cancelViewServiceRequest;
    SFSafariViewControllerConfiguration * _configuration;
    NSArray * _customActivities;
    bool  _defersAddingRemoteViewController;
    <SFSafariViewControllerDelegate> * _delegate;
    long long  _dismissButtonStyle;
    long long  _displayMode;
    bool  _hasBeenDisplayedAtLeastOnce;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _horizontalScrollIndicatorBaseInsets;
    NSURL * _initialURL;
    SFInteractiveDismissController * _interactiveDismissController;
    SFSafariLaunchPlaceholderView * _launchPlaceholderView;
    UIColor * _preferredBarTintColor;
    UIColor * _preferredControlTintColor;
    NSArray * _previewActions;
    SFBrowserRemoteViewController * _remoteViewController;
    SFQueueingServiceViewControllerProxy<SFServiceViewControllerProtocol> * _serviceProxy;
    bool  _swipeGestureEnabled;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _verticalScrollIndicatorBaseInsets;
    bool  _viewSizeIsTransitioning;
}

@property (setter=_setActivatedElementInfo:, nonatomic, retain) _WKActivatedElementInfo *_activatedElementInfo;
@property (setter=_setPreviewActions:, nonatomic, retain) NSArray *_previewActions;
@property (setter=_setShowingLinkPreview:, nonatomic) bool _showingLinkPreview;
@property (setter=_setShowingLinkPreviewWithMinimalUI:, nonatomic) bool _showingLinkPreviewWithMinimalUI;
@property (nonatomic, readonly, copy) SFSafariViewControllerConfiguration *configuration;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool defersAddingRemoteViewController;
@property (nonatomic) <SFSafariViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) long long dismissButtonStyle;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) NSURL *initialURL;
@property (nonatomic, retain) UIColor *preferredBarTintColor;
@property (nonatomic, retain) UIColor *preferredControlTintColor;
@property (nonatomic, readonly) SFQueueingServiceViewControllerProxy<SFServiceViewControllerProtocol> *serviceProxy;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_activatedElementInfo;
- (void)_addRemoteView;
- (void)_addRemoteViewControllerIfNeeded;
- (void)_boundingPathMayHaveChangedForView:(id)arg1 relativeToBoundsOriginOnly:(bool)arg2;
- (void)_connectToService;
- (id)_defaultPreviewActionItems;
- (id)_fetchCustomActivitiesForURL:(id)arg1 title:(id)arg2;
- (id)_fetchExcludedActivityTypesForURL:(id)arg1 title:(id)arg2;
- (void)_forwardNotificationToViewService:(id)arg1;
- (id)_previewActions;
- (void)_removeRemoteView;
- (void)_restartServiceViewController;
- (void)_setActivatedElementInfo:(id)arg1;
- (void)_setEdgeSwipeDismissalEnabled:(bool)arg1;
- (void)_setPreviewActions:(id)arg1;
- (void)_setShowingLinkPreview:(bool)arg1;
- (void)_setShowingLinkPreviewWithMinimalUI:(bool)arg1;
- (void)_setUpWithURL:(id)arg1 configuration:(id)arg2;
- (bool)_showingLinkPreview;
- (bool)_showingLinkPreviewWithMinimalUI;
- (void)_updateScrollViewIndicatorInsets;
- (id)childViewControllerForHomeIndicatorAutoHidden;
- (id)childViewControllerForStatusBarStyle;
- (id)configuration;
- (void)dealloc;
- (bool)defersAddingRemoteViewController;
- (id)delegate;
- (long long)dismissButtonStyle;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithURL:(id)arg1;
- (id)initWithURL:(id)arg1 configuration:(id)arg2;
- (id)initWithURL:(id)arg1 entersReaderIfAvailable:(bool)arg2;
- (id)initialURL;
- (void)interactiveDismissControllerDidBegin:(id)arg1;
- (void)interactiveDismissControllerDidCancel:(id)arg1;
- (void)interactiveDismissControllerDidEnd:(id)arg1;
- (void)loadView;
- (id)preferredBarTintColor;
- (id)preferredControlTintColor;
- (id)previewActionItems;
- (void)remoteViewController:(id)arg1 didFinishInitialLoad:(bool)arg2;
- (void)remoteViewController:(id)arg1 executeCustomActivityProxyID:(id)arg2;
- (void)remoteViewController:(id)arg1 fetchActivityViewControllerInfoForURL:(id)arg2 title:(id)arg3;
- (void)remoteViewController:(id)arg1 hostApplicationOpenURL:(id)arg2;
- (void)remoteViewController:(id)arg1 initialLoadDidRedirectToURL:(id)arg2;
- (void)remoteViewController:(id)arg1 setSwipeGestureEnabled:(bool)arg2;
- (void)remoteViewController:(id)arg1 viewServiceDidTerminateWithError:(id)arg2;
- (void)remoteViewControllerDidLoadWebView:(id)arg1;
- (void)remoteViewControllerWillDismiss:(id)arg1;
- (id)serviceProxy;
- (void)serviceProxyWillQueueInvocation:(id)arg1;
- (void)setDefersAddingRemoteViewController:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDismissButtonStyle:(long long)arg1;
- (void)setModalPresentationStyle:(long long)arg1;
- (void)setPreferredBarTintColor:(id)arg1;
- (void)setPreferredControlTintColor:(id)arg1;
- (void)setTransitioningDelegate:(id)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillLayoutSubviews;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
