<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>SFFormAutocompleteState.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/SafariServices.framework/SFFormAutocompleteState.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/SafariServices.framework/SafariServices (604.1)
 */

@interface SFFormAutocompleteState : NSObject <CNContactPickerDelegate, SFContactAutoFillViewControllerFiller, WBSOneTimeCodeMonitorObserver, _ASCredentialListViewControllerDelegate, _ASPasswordCredentialAuthenticationViewControllerDelegate, _SFCreditCardCaptureViewControllerDelegate> {
    bool  _URLIsAllowedByWhiteList;
    long long  _action;
    _SFFormAutoFillController * _autoFillController;
    NSArray * _cachedExternalCredentialIdentities;
    NSArray * _credentialMatches;
    id /* block */  _creditCardCaptureCompletionHandler;
    id /* block */  _customAutoFillContactCompletionHandler;
    _SFFormDataController * _dataController;
    id /* block */  _displayOtherContactsCompletionHandler;
    UIView * _emptyInputView;
    id /* block */  _externalCredentialListCompletionHandler;
    _ASPasswordCredentialAuthenticationViewController * _externalCredentialViewController;
    bool  _fetchingLoginCredentialSuggestions;
    WBSFormMetadata * _formMetadata;
    unsigned long long  _formType;
    NSDictionary * _formValues;
    SFFormAutoFillFrameHandle * _frame;
    bool  _gatheringFormValues;
    bool  _hasDeterminedIfURLIsAllowedByWhiteList;
    bool  _hasNotedThatTextDidChangeInPasswordField;
    _SFFormAutoFillInputSession * _inputSession;
    bool  _invalidated;
    WBSFormAutoFillMetadataCorrector * _metadataCorrector;
    WBSMultiRoundAutoFillManager * _multiRoundAutoFillManager;
    NSString * _prefixForSuggestions;
    NSArray * _relatedCredentialMatches;
    bool  _submitExternalCredential;
    WBSFormControlMetadata * _textFieldMetadata;
}

@property (nonatomic, readonly) long long action;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) _SFFormAutoFillInputSession *inputSession;
@property (nonatomic, readonly) bool shouldOfferToAutoFillCreditCardData;
@property (readonly) Class superclass;
@property (nonatomic, readonly) NSString *titleOfAutoFillButton;

+ (void)_getMatchesFromFormProtectionSpace:(id)arg1 matchesFromOtherProtectionSpaces:(id)arg2 withFormURL:(id)arg3 credentialMatches:(id)arg4 lastGeneratedPassword:(id)arg5 currentUser:(id)arg6 currentPassword:(id)arg7 forUserNamesOnly:(bool)arg8;
+ (bool)_shouldSaveCredentialsInProtectionSpace:(id)arg1;

- (void).cxx_destruct;
- (long long)_actionForLoginForm;
- (id)_actionForPresentingPasswordManagerExtension:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_autoFillCreditCardData;
- (void)_autoFillDisplayData:(id)arg1 setAutoFilled:(bool)arg2;
- (void)_autoFillSingleCreditCardData:(long long)arg1;
- (void)_autoFillWithSet:(id)arg1;
- (id)_bestTextFieldMetadataForMetadata:(id)arg1;
- (bool)_canAutoFillCreditCardData;
- (void)_captureCreditCardDataWithCameraAndFill;
- (id)_correctedFormMetadata:(id)arg1;
- (id)_displayTextForCreditCardNumber:(id)arg1;
- (void)_fillASPasswordCredential:(id)arg1 needsAuthentication:(bool)arg2 setAutoFilled:(bool)arg3 submitForm:(bool)arg4;
- (void)_fillCredential:(id)arg1 setAutoFilled:(bool)arg2 setAsDefaultCredential:(bool)arg3 focusFieldAfterFilling:(bool)arg4 submitForm:(bool)arg5;
- (void)_fillCredentialAfterAuthenticationIfNeeded:(id)arg1 setAsDefaultCredential:(bool)arg2 submitForm:(bool)arg3;
- (void)_fillCreditCardData:(id)arg1;
- (void)_fillCreditCardDataAfterAuthenticationIfNeeded:(id)arg1;
- (void)_fillPasswordCredentialIdentity:(id)arg1 submitForm:(bool)arg2;
- (void)_fillSingleCreditCardDataValue:(id)arg1 creditCardDataType:(long long)arg2;
- (void)_gatherAndShowAddressBookAutoFillSuggestions;
- (void)_gatherFormValuesWithCompletionHandler:(id /* block */)arg1;
- (void)_generateAndSuggestPasswordWithCompletionHandler:(id /* block */)arg1;
- (void)_getLoginFormUser:(id*)arg1 password:(id*)arg2 userIsAutoFilled:(bool*)arg3 passwordIsAutoFilled:(bool*)arg4;
- (void)_getShouldOfferForgetPassword:(bool*)arg1 savePassword:(bool*)arg2;
- (bool)_hasMatchWithUser:(id)arg1 password:(id)arg2;
- (bool)_hasPotentialLoginCredentialsForLoginForm;
- (id)_matchingKeychainCredentialsIncludingCredentialsWithEmptyUsernames:(bool)arg1;
- (void)_offerToAutoFillContact;
- (void)_offerToAutoFillFromPotentialCredentialMatches;
- (void)_offerToForgetSavedPassword:(id)arg1 completionHandler:(id /* block */)arg2;
- (long long)_passwordGenerationAssistanceAction;
- (bool)_passwordGenerationAssistanceAutoFillButtonEnabled;
- (void)_performAutoFill;
- (id)_potentialCredentialMatches;
- (void)_presentCredentialListForExtension:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_presentViewController:(id)arg1 presentingViewController:(id)arg2 animated:(bool)arg3 completion:(id /* block */)arg4;
- (void)_setShowingKeyboardInputView:(bool)arg1;
- (void)_setUpMultiRoundAutoFillManagerIfNecessary;
- (void)_setUserAndPasswordFieldsAutoFilled:(bool)arg1 clearPasswordField:(bool)arg2;
- (bool)_shouldAllowExternalPasswordAutoFillOnURL:(id)arg1;
- (bool)_shouldAllowGeneratedPassword;
- (bool)_shouldOfferCreditCardDataAfterUserHasFilledCreditCardData:(id)arg1;
- (bool)_shouldShowPasswordsListOption;
- (bool)_shouldUsePasswordGenerationAssistanceForTextField;
- (void)_showCreditCardDataSuggestionsAfterUserHasFilledCreditCardData;
- (void)_showOtherContactOptions;
- (id)_sortedSingleCreditCardDataArray:(id)arg1;
- (void)_suggestLoginCredentialsShowingQuickTypeKey:(bool)arg1;
- (void)_suggestPasswordForNewAccountOrChangePasswordForm;
- (bool)_suggestUsernamesForRegistrationIfPossible:(unsigned long long)arg1;
- (id)_suggestionsForAutoFillDisplayData:(id)arg1;
- (void)_switchToCustomInputViewWithMatches:(id)arg1 contact:(id)arg2;
- (void)_textDidChangeInForm:(id)arg1 textField:(id)arg2;
- (bool)_textFieldIsEmptyPasswordField;
- (bool)_textFieldLooksLikeCardSecurityCodeFieldButNotCardNumberOrCardholderField:(id)arg1;
- (id)_textSuggestionForCredentialDisplayData:(id)arg1 submitForm:(bool)arg2;
- (id)_textSuggestionForExternalCredentialIdentity:(id)arg1 submitForm:(bool)arg2;
- (void)_updateAutoFillActionToCaptureCreditCardAndFill;
- (void)_updateAutoFillButton;
- (void)_updateCreditCardAutoFillAction;
- (void)_updateCreditCardSuggestionsWithHandler:(id /* block */)arg1;
- (void)_updateSuggestions:(unsigned long long)arg1;
- (id)_viewControllerToPresentFrom;
- (long long)action;
- (void)autoFill;
- (void)codesUpdatedForOneTimeCodeMonitor:(id)arg1;
- (void)contactPicker:(id)arg1 didSelectContact:(id)arg2;
- (void)contactPickerDidCancel:(id)arg1;
- (void)credentialListViewController:(id)arg1 didFinishWithCredential:(id)arg2 completion:(id /* block */)arg3;
- (void)creditCardCaptureViewController:(id)arg1 didCaptureCreditCard:(id)arg2;
- (void)creditCardCaptureViewControllerDidCancel:(id)arg1;
- (void)dealloc;
- (void)dismissCustomAutoFill;
- (id)externalCredentialIdentities;
- (id)initWithFrame:(id)arg1 form:(id)arg2 textField:(id)arg3 inputSession:(id)arg4 autoFillController:(id)arg5;
- (id)inputSession;
- (void)invalidate;
- (void)passwordCredentialAuthenticationViewController:(id)arg1 didFinishWithCredential:(id)arg2 completion:(id /* block */)arg3;
- (void)performAutoFillWithMatchSelections:(id)arg1 doNotFill:(id)arg2 contact:(id)arg3;
- (void)presentUIForPasswordCredentialAuthenticationViewController:(id)arg1;
- (bool)shouldOfferToAutoFillCreditCardData;
- (void)showAllPasswordsButtonTapped;
- (void)textDidChangeInFrame:(id)arg1 form:(id)arg2 textField:(id)arg3;
- (id)textSuggestionForStreamlinedAutoFillWithCredentialIdentity:(id)arg1;
- (id)titleOfAutoFillButton;
- (void)updateCachedFormMetadataAfterFilling:(id)arg1;
- (void)updateSuggestions;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
