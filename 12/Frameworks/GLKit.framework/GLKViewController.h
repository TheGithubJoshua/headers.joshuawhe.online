<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GLKViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/GLKit.framework/GLKViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/GLKit.framework/GLKit (101)
 */

@interface GLKViewController : UIViewController <GLKViewDelegate, NSCoding> {
    <GLKViewControllerDelegate> * _delegate;
    CADisplayLink * _displayLink;
    GLKDisplayLinkMessenger * _displayLinkMessenger;
    bool  _displayLinkPaused;
    bool  _firstResumeOccurred;
    long long  _framesDisplayed;
    long long  _framesPerSecond;
    bool  _lastDrawOccurred;
    bool  _lastResumeOccurred;
    bool  _lastUpdateOccurred;
    bool  _pauseOnWillResignActive;
    long long  _preferredFramesPerSecond;
    bool  _resumeOnDidBecomeActive;
    UIScreen * _screen;
    long long  _screenFramesPerSecond;
    double  _timeSinceFirstResume;
    double  _timeSinceFirstResumeStartTime;
    double  _timeSinceLastDraw;
    double  _timeSinceLastDrawPreviousTime;
    double  _timeSinceLastResume;
    double  _timeSinceLastResumeStartTime;
    double  _timeSinceLastUpdate;
    double  _timeSinceLastUpdatePreviousTime;
    int (* _updateIMP;
    bool  _viewIsVisible;
}

@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <GLKViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) CADisplayLink *displayLink;
@property (nonatomic, retain) GLKDisplayLinkMessenger *displayLinkMessenger;
@property (nonatomic) bool displayLinkPaused;
@property (nonatomic) bool firstResumeOccurred;
@property (nonatomic, readonly) long long framesDisplayed;
@property (nonatomic, readonly) long long framesPerSecond;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool lastDrawOccurred;
@property (nonatomic) bool lastResumeOccurred;
@property (nonatomic) bool lastUpdateOccurred;
@property (nonatomic) bool pauseOnWillResignActive;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic) long long preferredFramesPerSecond;
@property (nonatomic) bool resumeOnDidBecomeActive;
@property (nonatomic, retain) UIScreen *screen;
@property (nonatomic) long long screenFramesPerSecond;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double timeSinceFirstResume;
@property (nonatomic) double timeSinceFirstResumeStartTime;
@property (nonatomic, readonly) double timeSinceLastDraw;
@property (nonatomic) double timeSinceLastDrawPreviousTime;
@property (nonatomic, readonly) double timeSinceLastResume;
@property (nonatomic) double timeSinceLastResumeStartTime;
@property (nonatomic, readonly) double timeSinceLastUpdate;
@property (nonatomic) double timeSinceLastUpdatePreviousTime;
@property (nonatomic) int (*updateIMP;
@property (nonatomic) bool viewIsVisible;

- (long long)_calculateScreenFramesPerSecond:(id)arg1;
- (void)_configureNotifications;
- (void)_createDisplayLinkForScreen:(id)arg1;
- (void)_initCommon;
- (void)_pauseByNotification;
- (void)_resumeByNotification;
- (void)_updateAndDraw;
- (void)_updateScreenIfChanged;
- (void)dealloc;
- (id)delegate;
- (id)displayLink;
- (id)displayLinkMessenger;
- (bool)displayLinkPaused;
- (void)encodeWithCoder:(id)arg1;
- (bool)firstResumeOccurred;
- (long long)framesDisplayed;
- (long long)framesPerSecond;
- (void)glkView:(id)arg1 drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isPaused;
- (bool)lastDrawOccurred;
- (bool)lastResumeOccurred;
- (bool)lastUpdateOccurred;
- (void)loadView;
- (bool)pauseOnWillResignActive;
- (long long)preferredFramesPerSecond;
- (bool)resumeOnDidBecomeActive;
- (id)screen;
- (long long)screenFramesPerSecond;
- (void)setDelegate:(id)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setDisplayLinkMessenger:(id)arg1;
- (void)setDisplayLinkPaused:(bool)arg1;
- (void)setFirstResumeOccurred:(bool)arg1;
- (void)setLastDrawOccurred:(bool)arg1;
- (void)setLastResumeOccurred:(bool)arg1;
- (void)setLastUpdateOccurred:(bool)arg1;
- (void)setPauseOnWillResignActive:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPreferredFramesPerSecond:(long long)arg1;
- (void)setResumeOnDidBecomeActive:(bool)arg1;
- (void)setScreen:(id)arg1;
- (void)setScreenFramesPerSecond:(long long)arg1;
- (void)setTimeSinceFirstResumeStartTime:(double)arg1;
- (void)setTimeSinceLastDrawPreviousTime:(double)arg1;
- (void)setTimeSinceLastResumeStartTime:(double)arg1;
- (void)setTimeSinceLastUpdatePreviousTime:(double)arg1;
- (void)setUpdateIMP:(int (*)arg1;
- (void)setView:(id)arg1;
- (void)setViewIsVisible:(bool)arg1;
- (double)timeSinceFirstResume;
- (double)timeSinceFirstResumeStartTime;
- (double)timeSinceLastDraw;
- (double)timeSinceLastDrawPreviousTime;
- (double)timeSinceLastResume;
- (double)timeSinceLastResumeStartTime;
- (double)timeSinceLastUpdate;
- (double)timeSinceLastUpdatePreviousTime;
- (int (*)updateIMP;
- (void)viewDidLoad;
- (void)viewDidMoveToWindow:(id)arg1 shouldAppearOrDisappear:(bool)arg2;
- (void)viewDidUnload;
- (bool)viewIsVisible;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
