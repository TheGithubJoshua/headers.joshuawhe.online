<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GLKShaderBlockNode.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/GLKit.framework/GLKShaderBlockNode.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/GLKit.framework/GLKit (101)
 */

@interface GLKShaderBlockNode : NSObject <NSCopying, NSXMLParserDelegate> {
    NSMutableString * _blockText;
    GLKShaderBlockNode * _children;
    unsigned int  _index;
    bool  _indexedMask;
    NSString * _label;
    NSString * _loopVar;
    struct GLKBigInt_s { 
        unsigned long long n0; 
        unsigned long long n1; 
    }  _mask;
    GLKShaderBlockNode * _next;
    GLKShaderBlockNode * _parent;
    int  _propertyClass;
    int  _type;
    int  _unrollCt;
}

@property (nonatomic, retain) NSMutableString *blockText;
@property (nonatomic) GLKShaderBlockNode *children;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned int index;
@property (nonatomic) bool indexedMask;
@property (nonatomic, copy) NSString *label;
@property (nonatomic, copy) NSString *loopVar;
@property (nonatomic) struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; } mask;
@property (nonatomic) GLKShaderBlockNode *next;
@property (nonatomic) GLKShaderBlockNode *parent;
@property (nonatomic) int propertyClass;
@property (readonly) Class superclass;
@property (nonatomic) int type;
@property (nonatomic) int unrollCt;

+ (void)buildUnrollNodeArray:(id)arg1 array:(id)arg2;
+ (id)copyTreeWithRoot:(id)arg1 parent:(id)arg2;
+ (id)copyTreeWithRootButNotSiblings:(id)arg1 parent:(id)arg2;
+ (void)insertNode:(id)arg1 afterSibling:(id)arg2;
+ (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })maskForLabel:(id)arg1 root:(id)arg2 index:(int)arg3;
+ (unsigned int)nodeCt:(id)arg1 nodeCt:(unsigned int*)arg2;
+ (void)printTree:(id)arg1;
+ (void)printTreeVerbose:(id)arg1;
+ (void)setIndicesForRoot:(id)arg1 andReplaceLoopVar:(id)arg2 baseLabel:(id)arg3 basePropertyClass:(int)arg4 usingIndex:(unsigned int)arg5 indexString:(id)arg6;
+ (void)setMasksWithRoot:(id)arg1 treeRoot:(id)arg2 mask:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*)arg3;

- (id)blockText;
- (id)children;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (unsigned int)index;
- (bool)indexedMask;
- (id)init;
- (id)label;
- (id)loopVar;
- (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })mask;
- (id)next;
- (id)parent;
- (void)parser:(id)arg1 didEndElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4;
- (void)parser:(id)arg1 didStartElement:(id)arg2 namespaceURI:(id)arg3 qualifiedName:(id)arg4 attributes:(id)arg5;
- (void)parser:(id)arg1 foundCharacters:(id)arg2;
- (int)propertyClass;
- (void)setBlockText:(id)arg1;
- (void)setChildren:(id)arg1;
- (void)setIndex:(unsigned int)arg1;
- (void)setIndexedMask:(bool)arg1;
- (void)setLabel:(id)arg1;
- (void)setLoopVar:(id)arg1;
- (void)setMask:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setNext:(id)arg1;
- (void)setParent:(id)arg1;
- (void)setPropertyClass:(int)arg1;
- (void)setType:(int)arg1;
- (void)setUnrollCt:(int)arg1;
- (int)type;
- (int)unrollCt;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
