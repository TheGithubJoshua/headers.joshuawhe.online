<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GLKEffect.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/GLKit.framework/GLKEffect.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/GLKit.framework/GLKit (101)
 */

@interface GLKEffect : NSObject {
    int  _aColorLoc;
    union _GLKVector4 { 
        struct { 
            float x; 
            float y; 
            float z; 
            float w; 
        } ; 
        struct { 
            float r; 
            float g; 
            float b; 
            float a; 
        } ; 
        struct { 
            float s; 
            float t; 
            float p; 
            float q; 
        } ; 
        float v[4]; 
    }  _baseLightingColor;
    int  _baseLightingColorLoc;
    unsigned char  _colorMaterialEnabled;
    unsigned long long  _dirtyUniforms;
    id * _effectShaderArray;
    struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; } * _fshMask;
    unsigned int  _fshName;
    GLKShaderBlockNode * _fshRootNode;
    char ** _fshStrings;
    NSString * _label;
    union _GLKVector4 { 
        struct { 
            float x; 
            float y; 
            float z; 
            float w; 
        } ; 
        struct { 
            float r; 
            float g; 
            float b; 
            float a; 
        } ; 
        struct { 
            float s; 
            float t; 
            float p; 
            float q; 
        } ; 
        float v[4]; 
    }  _lightModelAmbientColor;
    int  _lightModelAmbientColorLoc;
    unsigned char  _lightModelTwoSided;
    NSMutableArray * _lightProperties;
    unsigned char  _masksInitialized;
    float * _materialAmbientColor;
    float * _materialDiffuseColor;
    unsigned int  _numFshStrings;
    unsigned int  _numLights;
    unsigned int  _numTextures;
    unsigned int  _numVshStrings;
    unsigned char  _perPixelLightingEnabled;
    unsigned char  _perVertexLightingEnabled;
    struct GLKBigInt_s { 
        unsigned long long n0; 
        unsigned long long n1; 
    }  _prevFshMask;
    struct GLKBigInt_s { 
        unsigned long long n0; 
        unsigned long long n1; 
    }  _prevVshMask;
    NSMutableDictionary * _programHash;
    unsigned int  _programName;
    NSMutableArray * _properties;
    NSArray * _textureOrder;
    bool  _textureOrderStale;
    unsigned char  _texturingEnabled;
    struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; } * _vshMask;
    unsigned int  _vshName;
    GLKShaderBlockNode * _vshRootNode;
    char ** _vshStrings;
}

@property (nonatomic) int aColorLoc;
@property (nonatomic) union _GLKVector4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; float x4[4]; } baseLightingColor;
@property (nonatomic) int baseLightingColorLoc;
@property (nonatomic) unsigned char colorMaterialEnabled;
@property (nonatomic) unsigned long long dirtyUniforms;
@property (nonatomic) id*effectShaderArray;
@property (nonatomic) struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*fshMask;
@property (nonatomic) unsigned int fshName;
@property (nonatomic, readonly) GLKShaderBlockNode *fshRootNode;
@property (nonatomic) char **fshStrings;
@property (nonatomic, copy) NSString *label;
@property (nonatomic) union _GLKVector4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; float x4[4]; } lightModelAmbientColor;
@property (nonatomic) int lightModelAmbientColorLoc;
@property (nonatomic) unsigned char lightModelTwoSided;
@property (nonatomic, retain) NSMutableArray *lightProperties;
@property (nonatomic) unsigned char masksInitialized;
@property (nonatomic, readonly) float*materialAmbientColor;
@property (nonatomic, readonly) float*materialDiffuseColor;
@property (nonatomic) unsigned int numFshStrings;
@property (nonatomic) unsigned int numLights;
@property (nonatomic) unsigned int numTextures;
@property (nonatomic) unsigned int numVshStrings;
@property (nonatomic) unsigned char perPixelLightingEnabled;
@property (nonatomic) unsigned char perVertexLightingEnabled;
@property (nonatomic) struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; } prevFshMask;
@property (nonatomic) struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; } prevVshMask;
@property (nonatomic, readonly) NSMutableDictionary *programHash;
@property (nonatomic) unsigned int programName;
@property (nonatomic, retain) NSMutableArray *properties;
@property (nonatomic, copy) NSArray *textureOrder;
@property (nonatomic) bool textureOrderStale;
@property (nonatomic) unsigned char texturingEnabled;
@property (nonatomic) struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*vshMask;
@property (nonatomic) unsigned int vshName;
@property (nonatomic, readonly) GLKShaderBlockNode *vshRootNode;
@property (nonatomic) char **vshStrings;

+ (void)initialize;
+ (void)initializeStaticMasks;
+ (bool)parseXMLFile:(id)arg1 rootNode:(id)arg2;
+ (id)programInfoLogForName:(unsigned int)arg1 effectLabel:(id)arg2 msg:(const char *)arg3;
+ (void)setStaticMasksWithVshRoot:(id)arg1 fshRoot:(id)arg2;
+ (id)shaderInfoLogForName:(unsigned int)arg1 effectLabel:(id)arg2 msg:(const char *)arg3;
+ (void)unrollLoopNodesForStaticTreeWithRoot:(id)arg1;

- (int)aColorLoc;
- (void)addTransformProperty;
- (union _GLKVector4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; float x4[4]; })baseLightingColor;
- (int)baseLightingColorLoc;
- (void)bind;
- (unsigned char)colorMaterialEnabled;
- (void)createAndUseProgramWithShadingHash:(id)arg1;
- (void)dealloc;
- (id)description;
- (void)dirtyAllUniforms;
- (unsigned long long)dirtyUniforms;
- (id*)effectShaderArray;
- (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*)fshMask;
- (unsigned int)fshMaskCt;
- (char **)fshMaskStr;
- (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*)fshMasks;
- (unsigned int)fshName;
- (id)fshRootNode;
- (char **)fshStrings;
- (bool)includeFshShaderTextForRootNode:(id)arg1;
- (bool)includeShaderTextForRootNode:(id)arg1;
- (bool)includeVshShaderTextForRootNode:(id)arg1;
- (id)init;
- (id)initWithPropertyArray:(id)arg1;
- (void)initializeMasks;
- (id)label;
- (union _GLKVector4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; float x4[4]; })lightModelAmbientColor;
- (int)lightModelAmbientColorLoc;
- (unsigned char)lightModelTwoSided;
- (id)lightProperties;
- (unsigned char)masksInitialized;
- (float*)materialAmbientColor;
- (float*)materialDiffuseColor;
- (unsigned int)numFshStrings;
- (unsigned int)numLights;
- (unsigned int)numTextures;
- (unsigned int)numVshStrings;
- (unsigned char)perPixelLightingEnabled;
- (unsigned char)perVertexLightingEnabled;
- (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })prevFshMask;
- (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })prevVshMask;
- (id)programHash;
- (unsigned int)programName;
- (id)properties;
- (void)setAColorLoc:(int)arg1;
- (void)setBaseLightingColor:(union _GLKVector4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; float x4[4]; })arg1;
- (void)setBaseLightingColorLoc:(int)arg1;
- (void)setColorMaterialEnabled:(unsigned char)arg1;
- (void)setDirtyUniforms:(unsigned long long)arg1;
- (void)setEffectShaderArray:(id*)arg1;
- (void)setFshMask:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*)arg1;
- (void)setFshName:(unsigned int)arg1;
- (void)setFshStrings:(char **)arg1;
- (void)setLabel:(id)arg1;
- (void)setLightModelAmbientColor:(union _GLKVector4 { struct { float x_1_1_1; float x_1_1_2; float x_1_1_3; float x_1_1_4; } x1; struct { float x_2_1_1; float x_2_1_2; float x_2_1_3; float x_2_1_4; } x2; struct { float x_3_1_1; float x_3_1_2; float x_3_1_3; float x_3_1_4; } x3; float x4[4]; })arg1;
- (void)setLightModelAmbientColorLoc:(int)arg1;
- (void)setLightModelTwoSided:(unsigned char)arg1;
- (void)setLightProperties:(id)arg1;
- (void)setMasksInitialized:(unsigned char)arg1;
- (void)setNumFshStrings:(unsigned int)arg1;
- (void)setNumLights:(unsigned int)arg1;
- (void)setNumTextures:(unsigned int)arg1;
- (void)setNumVshStrings:(unsigned int)arg1;
- (void)setPerPixelLightingEnabled:(unsigned char)arg1;
- (void)setPerVertexLightingEnabled:(unsigned char)arg1;
- (void)setPrevFshMask:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setPrevVshMask:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setProgramName:(unsigned int)arg1;
- (void)setProperties:(id)arg1;
- (void)setShaderBindings;
- (void)setTextureIndices;
- (void)setTextureOrder:(id)arg1;
- (void)setTextureOrderStale:(bool)arg1;
- (void)setTexturingEnabled:(unsigned char)arg1;
- (void)setVshMask:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*)arg1;
- (void)setVshName:(unsigned int)arg1;
- (void)setVshStrings:(char **)arg1;
- (id)textureOrder;
- (bool)textureOrderStale;
- (unsigned char)texturingEnabled;
- (void)updateFshStringsWithRoot:(id)arg1 enabled:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })arg2;
- (void)updateVshStringsWithRoot:(id)arg1 enabled:(struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)useColorAttrib;
- (bool)useTexCoordAttrib;
- (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*)vshMask;
- (unsigned int)vshMaskCt;
- (char **)vshMaskStr;
- (struct GLKBigInt_s { unsigned long long x1; unsigned long long x2; }*)vshMasks;
- (unsigned int)vshName;
- (id)vshRootNode;
- (char **)vshStrings;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
