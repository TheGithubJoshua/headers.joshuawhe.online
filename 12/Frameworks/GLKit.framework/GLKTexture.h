<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GLKTexture.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/GLKit.framework/GLKTexture.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/GLKit.framework/GLKit (101)
 */

@interface GLKTexture : NSObject {
    unsigned int  _GLTextureName;
    unsigned int  _bindTarget;
    unsigned int  _bitsPerPixel;
    struct CGImageBlockSet { } * _blockSet;
    struct __CFData { } * _cfData;
    int  _dataCategory;
    unsigned int  _format;
    bool  _hasAlpha;
    bool  _hasPremultipliedAlpha;
    unsigned int  _height;
    NSData * _imageData;
    unsigned int  _index;
    unsigned int  _internalFormat;
    bool  _isCubeMap;
    bool  _isMipmapped;
    bool  _isPowerOfTwo;
    bool  _isVerticalFlipped;
    NSString * _label;
    int  _loadMode;
    unsigned int  _nComponents;
    unsigned int  _nPrimarySurfaces;
    unsigned int  _nSurfaces;
    unsigned int  _numMipMapLevels;
    unsigned int  _orientation;
    unsigned int  _primarySurfaceLength;
    bool  _reOrient;
    bool  _requestIssuedForAlphaPremultiplication;
    bool  _requestIssuedForMipmapGeneration;
    bool  _requestIssuedForSRGB;
    bool  _requestIssuedToInterpretGrayAsAlpha;
    bool  _requestIssuedToReorientToGL;
    unsigned int  _rowBytes;
    int  _texelFormat;
    unsigned int  _textureTarget;
    unsigned int  _type;
    int  _unpackAlignment;
    unsigned int  _width;
}

@property (nonatomic) unsigned int GLTextureName;
@property (nonatomic) unsigned int bindTarget;
@property (nonatomic) unsigned int bitsPerPixel;
@property (nonatomic) int dataCategory;
@property (nonatomic) unsigned int format;
@property (nonatomic) bool hasAlpha;
@property (readonly) bool hasPremultipliedAlpha;
@property (nonatomic) unsigned int height;
@property (readonly) NSData *imageData;
@property (nonatomic) unsigned int index;
@property (nonatomic) unsigned int internalFormat;
@property (nonatomic) bool isCubeMap;
@property (nonatomic) bool isMipmapped;
@property (nonatomic) bool isPowerOfTwo;
@property (nonatomic) bool isVerticalFlipped;
@property (nonatomic, copy) NSString *label;
@property (nonatomic) int loadMode;
@property (nonatomic) unsigned int nComponents;
@property (nonatomic) unsigned int nPrimarySurfaces;
@property (nonatomic) unsigned int nSurfaces;
@property (nonatomic) unsigned int numMipMapLevels;
@property (nonatomic) unsigned int orientation;
@property (nonatomic) bool reOrient;
@property (readonly) bool requestIssuedForMipmapGeneration;
@property (nonatomic) unsigned int rowBytes;
@property (nonatomic) int texelFormat;
@property (nonatomic) unsigned int textureTarget;
@property (nonatomic) unsigned int type;
@property (nonatomic) unsigned int width;

- (unsigned int)GLTextureName;
- (bool)_uploadToGLTexture:(unsigned int)arg1 data:(id)arg2 width:(int)arg3 height:(int)arg4 dataCategory:(int)arg5 cubeMapIndex:(int)arg6 mipMapIndex:(int)arg7 error:(id*)arg8;
- (void*)alignmentFix:(unsigned int)arg1 data:(const void*)arg2;
- (unsigned int)bindTarget;
- (unsigned int)bitsPerPixel;
- (bool)canHonorSRGBrequest;
- (int)dataCategory;
- (void)dealloc;
- (bool)decodeCGImage:(struct CGImage { }*)arg1;
- (bool)decodeCGImageDataProvider:(struct CGImage { }*)arg1;
- (bool)decodeCGImageImageProvider:(struct CGImage { }*)arg1 CGImageProvider:(struct CGImageProvider { }*)arg2;
- (bool)determineCGImageBlockFormatWithComponentType:(int)arg1 andPixelSize:(unsigned long long)arg2 andColorModel:(int)arg3;
- (bool)determinePVRFormat:(unsigned int)arg1;
- (unsigned int)format;
- (bool)hasAlpha;
- (bool)hasPremultipliedAlpha;
- (unsigned int)height;
- (id)imageData;
- (unsigned int)index;
- (id)init;
- (id)initWithCGImage:(struct CGImage { }*)arg1 forceCubeMap:(bool)arg2 wasCubeMap:(bool*)arg3 cubeMapIndex:(int)arg4 options:(id)arg5 error:(id*)arg6;
- (id)initWithData:(id)arg1 forceCubeMap:(bool)arg2 wasCubeMap:(bool*)arg3 cubeMapIndex:(int)arg4 options:(id)arg5 error:(id*)arg6;
- (id)initWithDecodedData:(id)arg1 width:(unsigned int)arg2 height:(unsigned int)arg3 rowBytes:(unsigned int)arg4 texture:(id)arg5 cubeMapIndex:(int)arg6 options:(id)arg7 error:(id*)arg8;
- (unsigned int)internalFormat;
- (bool)isCubeMap;
- (bool)isMipmapped;
- (bool)isPowerOfTwo;
- (bool)isVerticalFlipped;
- (id)label;
- (bool)loadCGImage:(struct CGImage { }*)arg1 options:(id)arg2 error:(id*)arg3;
- (int)loadMode;
- (bool)loadPVRTCData:(id)arg1 error:(id*)arg2;
- (bool)loadWithData:(id)arg1 options:(id)arg2 error:(id*)arg3;
- (unsigned int)nComponents;
- (unsigned int)nPrimarySurfaces;
- (unsigned int)nSurfaces;
- (unsigned int)numMipMapLevels;
- (unsigned int)orientation;
- (bool)premultiplyWithAlpha:(void*)arg1 source:(void*)arg2 withWidth:(unsigned int)arg3 withHeight:(unsigned int)arg4 withRowBytes:(unsigned int)arg5 error:(id*)arg6;
- (bool)reOrient;
- (bool)reorientToGL:(void*)arg1 source:(void*)arg2 withWidth:(unsigned int)arg3 withHeight:(unsigned int)arg4 withRowBytes:(unsigned int)arg5 error:(id*)arg6;
- (bool)requestIssuedForMipmapGeneration;
- (unsigned int)rowBytes;
- (void)setBindTarget:(unsigned int)arg1;
- (void)setBitsPerPixel:(unsigned int)arg1;
- (void)setDataCategory:(int)arg1;
- (void)setFormat:(unsigned int)arg1;
- (void)setGLTextureName:(unsigned int)arg1;
- (void)setHasAlpha:(bool)arg1;
- (void)setHeight:(unsigned int)arg1;
- (void)setIndex:(unsigned int)arg1;
- (void)setInternalFormat:(unsigned int)arg1;
- (void)setIsCubeMap:(bool)arg1;
- (void)setIsMipmapped:(bool)arg1;
- (void)setIsPowerOfTwo:(bool)arg1;
- (void)setIsVerticalFlipped:(bool)arg1;
- (void)setLabel:(id)arg1;
- (void)setLoadMode:(int)arg1;
- (void)setNComponents:(unsigned int)arg1;
- (void)setNPrimarySurfaces:(unsigned int)arg1;
- (void)setNSurfaces:(unsigned int)arg1;
- (void)setNumMipMapLevels:(unsigned int)arg1;
- (void)setOrientation:(unsigned int)arg1;
- (void)setReOrient:(bool)arg1;
- (void)setRowBytes:(unsigned int)arg1;
- (void)setTexelFormat:(int)arg1;
- (void)setTextureTarget:(unsigned int)arg1;
- (void)setType:(unsigned int)arg1;
- (void)setWidth:(unsigned int)arg1;
- (bool)shouldApplyPremultiplication;
- (bool)shouldApplyReorientToGL;
- (int)texelFormat;
- (unsigned int)textureTarget;
- (unsigned int)type;
- (void)updateRequestedOperationsFromOptions:(id)arg1;
- (bool)uploadToGLTexture:(unsigned int)arg1 error:(id*)arg2;
- (unsigned int)width;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
