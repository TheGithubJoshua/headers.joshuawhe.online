<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MKMarkerAnnotationView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MapKit.framework/MKMarkerAnnotationView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MapKit.framework/MapKit (1.0)
 */

@interface MKMarkerAnnotationView : MKAnnotationView {
    bool  _animatesWhenAdded;
    UIView * _contentMaskView;
    GEOFeatureStyleAttributes * _customStyleAttributes;
    UIImage * _glyphImage;
    UIImageView * _glyphImageView;
    UILabel * _glyphLabel;
    NSString * _glyphText;
    UIColor * _glyphTintColor;
    UIColor * _markerStrokeTintColor;
    double  _markerStrokeWidth;
    UIColor * _markerTintColor;
    _MKBezierPathView * _markerView;
    _MKBezierPathView * _selectedDotView;
    UIImage * _selectedGlyphImage;
    UIImageView * _selectedGlyphImageView;
    UILabel * _selectedGlyphLabel;
    _MKBezierPathView * _selectedMarkerView;
    UIImageView * _shadowView;
    long long  _subtitleVisibility;
    long long  _titleVisibility;
    MKWalletMerchantStylingInfo * _walletMerchantStylingInfo;
}

@property (nonatomic) bool animatesWhenAdded;
@property (nonatomic, copy) UIImage *glyphImage;
@property (nonatomic, copy) NSString *glyphText;
@property (nonatomic, copy) UIColor *glyphTintColor;
@property (nonatomic, copy) UIColor *markerStrokeTintColor;
@property (nonatomic) double markerStrokeWidth;
@property (nonatomic, copy) UIColor *markerTintColor;
@property (nonatomic, retain) UIView *selectedContentView;
@property (nonatomic, copy) UIImage *selectedGlyphImage;
@property (getter=_styleAttributes, setter=_setStyleAttributes:, nonatomic, retain) GEOFeatureStyleAttributes *styleAttributes;
@property (nonatomic) long long subtitleVisibility;
@property (nonatomic) long long titleVisibility;
@property (getter=_walletMerchantStylingInfo, setter=_setWalletMerchantStylingInfo:, nonatomic, retain) MKWalletMerchantStylingInfo *walletMerchantStylingInfo;

+ (float)_defaultDisplayPriority;

- (void).cxx_destruct;
- (void)_configureAnimated:(bool)arg1 fromState:(long long)arg2 toState:(long long)arg3;
- (void)_configureViewsForState:(long long)arg1 usesCallout:(bool)arg2;
- (long long)_currentMarkerState;
- (void)_didDragWithVelocity:(struct CGPoint { double x1; double x2; })arg1;
- (id)_effectiveGlyphImageForState:(long long)arg1 isSystemProvided:(bool*)arg2;
- (id)_effectiveGlyphText;
- (id)_effectiveGlyphTintColorForState:(long long)arg1;
- (id)_effectiveMarkerStrokeTintColorForState:(long long)arg1;
- (double)_effectiveMarkerStrokeWidthForState:(long long)arg1;
- (id)_effectiveMarkerTintColorForState:(long long)arg1;
- (double)_effectiveShadowAlphaForState:(long long)arg1;
- (id)_effectiveSubtitlesIsCollidable:(bool*)arg1;
- (id)_effectiveTitleIsCollidable:(bool*)arg1;
- (bool)_hasDataRequiringCallout;
- (void)_setSelected:(bool)arg1 animated:(bool)arg2;
- (void)_setStyleAttributes:(id)arg1;
- (void)_setWalletMerchantStylingInfo:(id)arg1;
- (void)_setupNormalViewsIfNeeded;
- (void)_setupSelectedViewsIfNeededUsesCallout:(bool)arg1;
- (bool)_shouldDeselectWhenDragged;
- (long long)_stateForIsSelected:(bool)arg1;
- (id)_styleAttributes;
- (void)_unhideForDisplay;
- (void)_updateContentForState:(long long)arg1;
- (void)_updateContentForState:(long long)arg1 forceUpdate:(bool)arg2;
- (id)_walletMerchantStylingInfo;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)animatesWhenAdded;
- (bool)canShowCallout;
- (void)configureCustomFeature:(id)arg1;
- (id)glyphImage;
- (id)glyphText;
- (id)glyphTintColor;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2;
- (bool)isProvidingCustomFeature;
- (void)layoutSublayersOfLayer:(id)arg1;
- (void)layoutSubviews;
- (id)markerStrokeTintColor;
- (double)markerStrokeWidth;
- (id)markerTintColor;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)prepareForDisplay;
- (void)prepareForReuse;
- (void)prepareForSnapshotting;
- (id)selectedContentView;
- (id)selectedGlyphImage;
- (void)setAnimatesWhenAdded:(bool)arg1;
- (void)setAnnotation:(id)arg1;
- (void)setDragState:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setGlyphImage:(id)arg1;
- (void)setGlyphText:(id)arg1;
- (void)setGlyphTintColor:(id)arg1;
- (void)setMarkerStrokeTintColor:(id)arg1;
- (void)setMarkerStrokeWidth:(double)arg1;
- (void)setMarkerTintColor:(id)arg1;
- (void)setSelectedContentView:(id)arg1;
- (void)setSelectedGlyphImage:(id)arg1;
- (void)setSubtitleVisibility:(long long)arg1;
- (void)setTitleVisibility:(long long)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)subtitleVisibility;
- (long long)titleVisibility;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
