<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MKPinAnnotationView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MapKit.framework/MKPinAnnotationView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MapKit.framework/MapKit (1.0)
 */

@interface MKPinAnnotationView : MKAnnotationView {
    bool  _animatesDrop;
    <_MKPinAnnotationViewDelegate> * _delegate;
    UIColor * _pinTintColor;
    UIImageView * _shadowView;
    int  _state;
}

@property (setter=_setDelegate:, nonatomic) <_MKPinAnnotationViewDelegate> *_delegate;
@property (nonatomic) bool animatesDrop;
@property (nonatomic) unsigned long long pinColor;
@property (nonatomic, retain) UIColor *pinTintColor;

+ (id)_bounceAnimation;
+ (struct CGPoint { double x1; double x2; })_calloutOffset;
+ (id)_dropBounceAnimation;
+ (id)_imageCache;
+ (id)_imageForLayer:(long long)arg1 state:(long long)arg2 mapType:(unsigned long long)arg3 traits:(id)arg4;
+ (id)_imageForState:(long long)arg1 mapType:(unsigned long long)arg2 displayStyle:(unsigned long long)arg3 pinColor:(id)arg4 traits:(id)arg5;
+ (struct CGPoint { double x1; double x2; })_leftCalloutOffset;
+ (struct CGPoint { double x1; double x2; })_perceivedAnchorPoint;
+ (struct CGSize { double x1; double x2; })_perceivedSize;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pinFrameForPosition:(struct CGPoint { double x1; double x2; })arg1;
+ (id)_pinsWithMapType:(unsigned long long)arg1 mapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg2 pinColor:(id)arg3 traits:(id)arg4;
+ (id)_reuseIdentifier;
+ (struct CGPoint { double x1; double x2; })_rightCalloutOffset;
+ (struct CGPoint { double x1; double x2; })_shadowAnchorPoint;
+ (id)_shadowImage;
+ (id)greenPinColor;
+ (Class)layerClass;
+ (id)purplePinColor;
+ (id)redPinColor;

- (void).cxx_destruct;
- (id)_bounceAnimation:(bool)arg1 withDelay:(double)arg2 addToLayer:(bool)arg3;
- (void)_cleanupAfterPinDropAnimation;
- (id)_delegate;
- (void)_didUpdatePosition;
- (struct CGPoint { double x1; double x2; })_draggingDropOffset;
- (void)_dropAfterDraggingAndRevertPosition:(bool)arg1 animated:(bool)arg2;
- (void)_dropAfterDraggingDidEnd:(id)arg1;
- (void)_dropFromDistance:(double)arg1 maxDistance:(double)arg2 withDelay:(double)arg3;
- (id)_floatingImage;
- (id)_highlightedImage;
- (id)_image;
- (void)_invalidateImage;
- (void)_liftBeforeDropDidEnd:(id)arg1;
- (void)_liftDidEnd:(id)arg1;
- (void)_liftForDraggingAfterBounceAnimated:(bool)arg1;
- (void)_liftForDraggingAnimated:(bool)arg1;
- (id)_pinBounceImages;
- (id)_pinJumpImages;
- (id)_pins;
- (void)_removeAllAnimations;
- (void)_setDelegate:(id)arg1;
- (void)_setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1;
- (void)_setMapType:(unsigned long long)arg1;
- (void)_setRotationRadians:(double)arg1 withAnimation:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_significantBounds;
- (int)_state;
- (void)_stopDrop;
- (void)_stopDropAnimationAndDropToPosition;
- (void)_updateShadowLayer;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (bool)animatesDrop;
- (void)animationDidStart:(id)arg1;
- (void)animationDidStop:(id)arg1 finished:(bool)arg2;
- (id)description;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2;
- (bool)isHighlighted;
- (unsigned long long)pinColor;
- (id)pinTintColor;
- (void)setAnimatesDrop:(bool)arg1;
- (void)setCenter:(struct CGPoint { double x1; double x2; })arg1;
- (void)setDragState:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setHighlighted:(bool)arg1;
- (void)setPinColor:(unsigned long long)arg1;
- (void)setPinTintColor:(id)arg1;
- (void)traitCollectionDidChange:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
