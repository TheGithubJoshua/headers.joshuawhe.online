<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MKLocalSearchCompleter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MapKit.framework/MKLocalSearchCompleter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MapKit.framework/MapKit (1.0)
 */

@interface MKLocalSearchCompleter : NSObject {
    <MKAutocompleteAnalyticsProvider> * _analyticsProvider;
    GEOSearchCategory * _categoryFilter;
    id  _context;
    <MKLocalSearchCompleterDelegate> * _delegate;
    CLLocation * _deviceLocation;
    bool  _dirty;
    long long  _filterType;
    NSString * _identifier;
    double  _lastRequestTime;
    long long  _listType;
    unsigned long long  _mapType;
    NSString * _queryFragment;
    struct { 
        struct CLLocationCoordinate2D { 
            double latitude; 
            double longitude; 
        } center; 
        struct { 
            double latitudeDelta; 
            double longitudeDelta; 
        } span; 
    }  _region;
    NSArray * _results;
    bool  _resultsAreCurrent;
    GEORetainedSearchMetadata * _retainedSearchMetadata;
    bool  _shouldDisplayNoResults;
    bool  _shouldPreloadTransitInfo;
    <MKLocationManagerOperation> * _singleLocationUpdate;
    GEOSortPriorityMapping * _sortPriorityMapping;
    int  _source;
    <GEOMapServiceCompletionTicket> * _ticket;
    double  _timeSinceLastInBoundingRegion;
    NSTimer * _timer;
    GEOMapServiceTraits * _traits;
}

@property (nonatomic, retain) <MKAutocompleteAnalyticsProvider> *analyticsProvider;
@property (nonatomic) struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } boundingRegion;
@property (nonatomic, retain) GEOSearchCategory *categoryFilter;
@property (nonatomic) id context;
@property (nonatomic) <MKLocalSearchCompleterDelegate> *delegate;
@property (nonatomic, retain) CLLocation *deviceLocation;
@property (nonatomic) long long entriesType;
@property (nonatomic) long long filterType;
@property (nonatomic, copy) NSString *fragment;
@property (nonatomic, copy) NSString *identifier;
@property (nonatomic) long long listType;
@property (nonatomic) unsigned long long mapType;
@property (nonatomic, copy) NSString *queryFragment;
@property (nonatomic) struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; } region;
@property (nonatomic, readonly) NSArray *results;
@property (nonatomic, retain) GEORetainedSearchMetadata *retainedSearchMetadata;
@property (getter=isSearching, nonatomic, readonly) bool searching;
@property (getter=_shouldDisplayNoResults, nonatomic, readonly) bool shouldDisplayNoResults;
@property (getter=_shouldPreloadTransitInfo, setter=_setShouldPreloadTransitInfo:, nonatomic) bool shouldPreloadTransitInfo;
@property (getter=_sortPriorityMapping, nonatomic, readonly) GEOSortPriorityMapping *sortPriorityMapping;
@property (nonatomic) double timeSinceLastInBoundingRegion;
@property (nonatomic, retain) GEOMapServiceTraits *traits;

- (void).cxx_destruct;
- (void)_cancelTimer;
- (void)_fireRequest;
- (void)_handleCompletion:(id)arg1 shouldDisplayNoResults:(bool)arg2 forTicket:(id)arg3;
- (void)_handleError:(id)arg1 forTicket:(id)arg2;
- (void)_markDirty;
- (void)_markDirtyAndScheduleRequestWithTimeToNextRequest:(double)arg1;
- (void)_notifyDelegatesWithResults:(id)arg1 shouldDisplayNoResults:(bool)arg2 ticket:(id)arg3;
- (void)_schedulePendingRequest;
- (void)_scheduleRequestWithTimeToNextRequest:(double)arg1;
- (void)_setShouldPreloadTransitInfo:(bool)arg1;
- (bool)_shouldDisplayNoResults;
- (bool)_shouldPreloadTransitInfo;
- (id)_sortPriorityMapping;
- (id)analyticsProvider;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })boundingRegion;
- (void)cancel;
- (id)categoryFilter;
- (id)context;
- (void)dealloc;
- (id)delegate;
- (id)deviceLocation;
- (long long)entriesType;
- (long long)filterType;
- (id)fragment;
- (id)identifier;
- (id)init;
- (bool)isSearching;
- (long long)listType;
- (unsigned long long)mapType;
- (id)queryFragment;
- (struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })region;
- (id)results;
- (bool)resultsAreCurrent;
- (id)retainedSearchMetadata;
- (void)retry;
- (void)setAnalyticsProvider:(id)arg1;
- (void)setBoundingRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCategoryFilter:(id)arg1;
- (void)setContext:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeviceLocation:(id)arg1;
- (void)setEntriesType:(long long)arg1;
- (void)setFilterType:(long long)arg1;
- (void)setFragment:(id)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setListType:(long long)arg1;
- (void)setMapType:(unsigned long long)arg1;
- (void)setQueryFragment:(id)arg1;
- (void)setRegion:(struct { struct CLLocationCoordinate2D { double x_1_1_1; double x_1_1_2; } x1; struct { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setRetainedSearchMetadata:(id)arg1;
- (void)setSource:(int)arg1;
- (void)setTimeSinceLastInBoundingRegion:(double)arg1;
- (void)setTraits:(id)arg1;
- (int)source;
- (double)timeSinceLastInBoundingRegion;
- (double)timeToNextRequest;
- (id)traits;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
