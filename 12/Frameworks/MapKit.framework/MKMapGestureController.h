<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MKMapGestureController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MapKit.framework/MKMapGestureController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MapKit.framework/MapKit (1.0)
 */

@interface MKMapGestureController : NSObject <MKVariableDelayTapRecognizerDelegate, UIGestureRecognizerDelegate, _MKUserInteractionGestureRecognizerTouchObserver> {
    MKCompassView * _compassView;
    <MKMapGestureControllerDelegate> * _delegate;
    bool  _didStartLongPress;
    MKVariableDelayTapRecognizer * _doubleTapGestureRecognizer;
    long long  _gestureCount;
    bool  _isPanning;
    bool  _isPinching;
    double  _lastScale;
    MKBasicMapView * _mapView;
    VKCompoundAnimation * _panDecelerationAnimationGroup;
    UIPanGestureRecognizer * _panGestureRecognizer;
    bool  _panWithMomentum;
    VKDynamicAnimation * _pinchDecelerationAnimation;
    UIPinchGestureRecognizer * _pinchGestureRecognizer;
    VKDynamicAnimation * _rotationDecelerationAnimation;
    MKRotationFilter * _rotationFilter;
    UIRotationGestureRecognizer * _rotationGestureRecognizer;
    bool  _rotationSnappingEnabled;
    MKScaleView * _scaleView;
    VKDynamicAnimation * _tiltDecelerationAnimation;
    MKTiltGestureRecognizer * _tiltGestureRecognizer;
    _MKUserInteractionGestureRecognizer * _touchGestureRecognizer;
    UILongPressGestureRecognizer * _twoFingerLongPressGestureRecognizer;
    MKTwoFingerPanGestureRecognizer * _twoFingerPanGestureRecognizer;
    UITapGestureRecognizer * _twoFingerTapGestureRecognizer;
    UIPanGestureRecognizer * _verticalPanGestureRecognizer;
}

@property (nonatomic, retain) MKCompassView *compassView;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MKMapGestureControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) UITapGestureRecognizer *doubleTapGestureRecognizer;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) MKBasicMapView *mapView;
@property (nonatomic, readonly) UIPanGestureRecognizer *panGestureRecognizer;
@property (nonatomic) bool panWithMomentum;
@property (nonatomic, readonly) UIPinchGestureRecognizer *pinchGestureRecognizer;
@property (getter=isRotationEnabled, nonatomic) bool rotationEnabled;
@property (nonatomic, retain) MKRotationFilter *rotationFilter;
@property (nonatomic, readonly) UIRotationGestureRecognizer *rotationGestureRecognizer;
@property (nonatomic, retain) MKScaleView *scaleView;
@property (getter=isScrollEnabled, nonatomic) bool scrollEnabled;
@property (readonly) Class superclass;
@property (getter=isTiltEnabled, nonatomic) bool tiltEnabled;
@property (nonatomic, readonly) UILongPressGestureRecognizer *twoFingerLongPressGestureRecognizer;
@property (nonatomic, readonly) UIPanGestureRecognizer *twoFingerPanGestureRecognizer;
@property (nonatomic, readonly) UITapGestureRecognizer *twoFingerTapGestureRecognizer;
@property (nonatomic, readonly) UIPanGestureRecognizer *verticalPanGestureRecognizer;
@property (getter=isZoomEnabled, nonatomic) bool zoomEnabled;

- (void).cxx_destruct;
- (void)_clearGesture:(id)arg1;
- (void)_handleStandardPan:(id)arg1;
- (void)_handleStandardTilt:(id)arg1;
- (struct CGPoint { double x1; double x2; })_snapPointToDevicePixels:(struct CGPoint { double x1; double x2; })arg1;
- (void)_updateRotationGestureForState:(long long)arg1 focusPoint:(struct CGPoint { double x1; double x2; })arg2 rotation:(double)arg3 velocity:(double)arg4;
- (void)beginGesturing;
- (void)clearGestureRecognizersInFlight;
- (id)compassView;
- (void)dealloc;
- (id)delegate;
- (id)doubleTapGestureRecognizer;
- (void)endGesturing;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)gestureRecognizerTouchesBegan:(id)arg1;
- (void)gestureRecognizerTouchesCanceled:(id)arg1;
- (void)gestureRecognizerTouchesEnded:(id)arg1;
- (void)handleDoubleTap:(id)arg1;
- (void)handlePan:(id)arg1;
- (void)handlePinch:(id)arg1;
- (void)handleRotation:(id)arg1;
- (void)handleTilt:(id)arg1;
- (void)handleTouch:(id)arg1;
- (void)handleTwoFingerLongPress:(id)arg1;
- (void)handleTwoFingerPan:(id)arg1;
- (void)handleTwoFingerTap:(id)arg1;
- (id)initWithMapView:(id)arg1 gestureTargetView:(id)arg2;
- (id)initWithMapView:(id)arg1 gestureTargetView:(id)arg2 doubleTapTargetView:(id)arg3;
- (bool)isRotationEnabled;
- (bool)isScrollEnabled;
- (bool)isTiltEnabled;
- (bool)isZoomEnabled;
- (id)mapView;
- (id)panGestureRecognizer;
- (bool)panWithMomentum;
- (id)pinchGestureRecognizer;
- (id)rotationFilter;
- (id)rotationGestureRecognizer;
- (id)scaleView;
- (void)setCompassView:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setPanWithMomentum:(bool)arg1;
- (void)setRotationEnabled:(bool)arg1;
- (void)setRotationFilter:(id)arg1;
- (void)setScaleView:(id)arg1;
- (void)setScrollEnabled:(bool)arg1;
- (void)setTiltEnabled:(bool)arg1;
- (void)setZoomEnabled:(bool)arg1;
- (void)startUserInteractionFromExternalGesture;
- (void)stopDynamicAnimations;
- (void)stopUserInteractionFromExternalGesture;
- (id)twoFingerLongPressGestureRecognizer;
- (id)twoFingerPanGestureRecognizer;
- (id)twoFingerTapGestureRecognizer;
- (double)variableDelayTapRecognizer:(id)arg1 shouldWaitForNextTapForDuration:(double)arg2 afterTouch:(id)arg3;
- (id)verticalPanGestureRecognizer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
