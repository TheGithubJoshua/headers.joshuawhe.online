<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MKAnnotationView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MapKit.framework/MKAnnotationView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MapKit.framework/MapKit (1.0)
 */

@interface MKAnnotationView : UIView <MKAnnotationRepresentation, MKLocatableObject, _MKKVOProxyDelegate> {
    _MKAnnotationViewAnchor * _anchor;
    bool  _animatingToCoordinate;
    <MKAnnotation> * _annotation;
    _MKKVOProxy * _annotationObserver;
    struct CGPoint { 
        double x; 
        double y; 
    }  _calloutOffset;
    MKCalloutView * _calloutView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _centerOffset;
    MKAnnotationView * _clusterAnnotationView;
    NSString * _clusteringIdentifier;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _collisionFrame;
    long long  _collisionMode;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _coordinate;
    _MKAnnotationViewCustomFeatureAnnotation * _customFeatureAnnotation;
    UIView * _detailCalloutAccessoryView;
    double  _direction;
    float  _displayPriority;
    unsigned long long  _dragState;
    struct { 
        unsigned int pendingSelectionAnimated : 1; 
        unsigned int disabled : 1; 
        unsigned int selected : 1; 
        unsigned int canShowCallout : 1; 
        unsigned int isHighlighted : 1; 
        unsigned int canDisplayDisclosureInCallout : 1; 
        unsigned int canDisplayPlacemarkInCallout : 1; 
        unsigned int draggable : 1; 
        unsigned int useBalloonCallouts : 1; 
        unsigned int customTransformApplied : 1; 
        unsigned int internalTransformApplied : 1; 
        unsigned int animatingToCoordinate : 1; 
        unsigned int tracking : 1; 
        unsigned int pendingOffsetAnimation : 1; 
        unsigned int pendingHideAnimation : 1; 
        unsigned int setSelectState : 2; 
    }  _flags;
    NSMutableArray * _hiddenCompletionBlocks;
    unsigned long long  _hiddenReasons;
    UIImage * _image;
    CALayer * _imageLayer;
    UIView * _leftCalloutAccessoryView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _leftCalloutOffset;
    struct { 
        unsigned char timePeriod; 
        unsigned char overlayType; 
        unsigned char applicationState; 
        unsigned char searchResultsType; 
        bool mapHasLabels; 
    }  _mapDisplayStyle;
    double  _mapPitchRadians;
    double  _mapRotationRadians;
    unsigned long long  _mapType;
    bool  _pendingSelectionAnimated;
    struct CLLocationCoordinate2D { 
        double latitude; 
        double longitude; 
    }  _presentationCoordinate;
    id /* block */  _presentationCoordinateChangedCallback;
    double  _presentationCourse;
    double  _realAlpha;
    struct CGPoint { 
        double x; 
        double y; 
    }  _realOffset;
    NSString * _reuseIdentifier;
    UIView * _rightCalloutAccessoryView;
    struct CGPoint { 
        double x; 
        double y; 
    }  _rightCalloutOffset;
    double  _rotationRadians;
    GEORouteMatch * _routeMatch;
    float  _selectionPriority;
    bool  _tracking;
    MKUserLocationAnnotationViewProxy * _userLocationProxy;
    unsigned long long  _zIndex;
}

@property (getter=_isAnimatingToCoordinate, setter=_setAnimatingToCoordinate:, nonatomic) bool _animatingToCoordinate;
@property (getter=_calloutView, setter=_setCalloutView:, nonatomic, retain) MKCalloutView *_calloutView;
@property (setter=_setDirection:, nonatomic) double _direction;
@property (setter=_setPresentationCoordinate:, nonatomic) struct CLLocationCoordinate2D { double x1; double x2; } _presentationCoordinate;
@property (setter=_setPresentationCoordinateChangedCallback:, nonatomic, copy) id /* block */ _presentationCoordinateChangedCallback;
@property (setter=_setPresentationCourse:, nonatomic) double _presentationCourse;
@property (setter=_setRouteMatch:, nonatomic, retain) GEORouteMatch *_routeMatch;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _significantFrame;
@property (getter=_isTracking, setter=_setTracking:, nonatomic) bool _tracking;
@property (nonatomic, readonly) MKUserLocationAnnotationViewProxy *_userLocationProxy;
@property (nonatomic, readonly) VKAnchorWrapper *anchor;
@property (nonatomic, retain) <MKAnnotation> *annotation;
@property (nonatomic) struct CGPoint { double x1; double x2; } calloutOffset;
@property (nonatomic) bool canShowCallout;
@property (nonatomic) struct CGPoint { double x1; double x2; } centerOffset;
@property (nonatomic, readonly) MKAnnotationView *clusterAnnotationView;
@property (nonatomic, copy) NSString *clusteringIdentifier;
@property (getter=_collisionFrame, nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } collisionFrame;
@property (nonatomic) long long collisionMode;
@property (nonatomic, readonly) struct CLLocationCoordinate2D { double x1; double x2; } coordinate;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) UIView *detailCalloutAccessoryView;
@property (nonatomic) float displayPriority;
@property (nonatomic) unsigned long long dragState;
@property (getter=isDraggable, nonatomic) bool draggable;
@property (getter=isEnabled, nonatomic) bool enabled;
@property (readonly) unsigned long long hash;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic, retain) UIView *leftCalloutAccessoryView;
@property (nonatomic) struct CGPoint { double x1; double x2; } leftCalloutOffset;
@property (getter=_mapDisplayStyle, setter=_setMapDisplayStyle:, nonatomic) struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; } mapDisplayStyle;
@property (getter=_mapPitchRadians, setter=_setMapPitchRadians:, nonatomic) double mapPitchRadians;
@property (getter=_mapRotationRadians, setter=_setMapRotationRadians:, nonatomic) double mapRotationRadians;
@property (getter=_isPendingSelectionAnimated, setter=_setPendingSelectionAnimated:, nonatomic) bool pendingSelectionAnimated;
@property (nonatomic, readonly) NSString *reuseIdentifier;
@property (nonatomic, retain) UIView *rightCalloutAccessoryView;
@property (nonatomic) struct CGPoint { double x1; double x2; } rightCalloutOffset;
@property (getter=isSelected, nonatomic) bool selected;
@property (getter=_selectionPriority, setter=_setSelectionPriority:, nonatomic) float selectionPriority;
@property (getter=_significantBounds, nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } significantBounds;
@property (readonly) Class superclass;
@property (getter=_useBalloonCallouts, setter=_setUseBalloonCallouts:, nonatomic) bool useBalloonCallouts;

+ (float)_defaultDisplayPriority;
+ (id)_disclosureCalloutButton;
+ (bool)_followsTerrain;
+ (bool)_isInitiallyHiddenWhenAdded;
+ (unsigned long long)_selectedZIndex;
+ (unsigned long long)_zIndex;
+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (Class)calloutViewClass;
+ (id)currentLocationTitle;

- (void).cxx_destruct;
- (void)_addAnnotationObservation;
- (id)_annotationContainer;
- (id)_calloutView;
- (bool)_canChangeOrientation;
- (bool)_canDisplayDisclosureInCallout;
- (bool)_canDisplayPlacemarkInCallout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_collisionFrame;
- (void)_commonInit;
- (id)_containerView;
- (id)_contentLayer;
- (id)_customFeatureAnnotation;
- (void)_didDragWithVelocity:(struct CGPoint { double x1; double x2; })arg1;
- (void)_didUpdatePosition;
- (double)_direction;
- (struct CGPoint { double x1; double x2; })_draggingDropOffset;
- (unsigned long long)_effectiveZIndex;
- (void)_enableRotationForHeadingMode:(double)arg1;
- (id)_getPopover:(id)arg1;
- (bool)_hasAlternateOrientation;
- (void)_invalidateCachedCoordinate;
- (bool)_isAnimatingToCoordinate;
- (bool)_isHiddenForReason:(unsigned long long)arg1;
- (bool)_isPendingSelectionAnimated;
- (bool)_isTracking;
- (struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })_mapDisplayStyle;
- (double)_mapPitchRadians;
- (double)_mapRotationRadians;
- (unsigned long long)_mapType;
- (id)_mapView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_mapkit_visibleRect;
- (void)_mkObserveValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (struct CGPoint { double x1; double x2; })_offsetToAnnotationView:(id)arg1;
- (unsigned long long)_orientationCount;
- (void)_performHideAnimationIfNeeded;
- (void)_performOffsetAnimationIfNeeded;
- (void)_performStateUpdatesIfNeeded;
- (double)_pointsForDistance:(double)arg1;
- (struct CLLocationCoordinate2D { double x1; double x2; })_presentationCoordinate;
- (id /* block */)_presentationCoordinateChangedCallback;
- (double)_presentationCourse;
- (void)_removeAnnotationObservation;
- (void)_removePopover;
- (void)_resetZIndex;
- (void)_resetZIndexNotify:(bool)arg1;
- (id)_routeMatch;
- (float)_selectionPriority;
- (void)_setAnimatingToCoordinate:(bool)arg1;
- (void)_setCalloutView:(id)arg1;
- (void)_setCanDisplayDisclosureInCallout:(bool)arg1;
- (void)_setCanDisplayPlacemarkInCallout:(bool)arg1;
- (void)_setDirection:(double)arg1;
- (void)_setHidden:(bool)arg1 forReason:(unsigned long long)arg2 animated:(bool)arg3;
- (void)_setHidden:(bool)arg1 forReason:(unsigned long long)arg2 animated:(bool)arg3 completion:(id /* block */)arg4;
- (void)_setHiddenForOffscreen:(bool)arg1;
- (void)_setMapDisplayStyle:(struct { unsigned char x1; unsigned char x2; unsigned char x3; unsigned char x4; bool x5; })arg1;
- (void)_setMapPitchRadians:(double)arg1;
- (void)_setMapRotationRadians:(double)arg1;
- (void)_setMapType:(unsigned long long)arg1;
- (void)_setPendingSelectionAnimated:(bool)arg1;
- (void)_setPositionOffset:(struct CGPoint { double x1; double x2; })arg1 animated:(bool)arg2;
- (void)_setPresentationCoordinate:(struct CLLocationCoordinate2D { double x1; double x2; })arg1;
- (void)_setPresentationCoordinateChangedCallback:(id /* block */)arg1;
- (void)_setPresentationCourse:(double)arg1;
- (void)_setRotationRadians:(double)arg1 withAnimation:(id)arg2;
- (void)_setRouteMatch:(id)arg1;
- (void)_setSelected:(bool)arg1 animated:(bool)arg2;
- (void)_setSelectionPriority:(float)arg1;
- (void)_setTracking:(bool)arg1;
- (void)_setUseBalloonCallouts:(bool)arg1;
- (void)_setVKNavigationPuckMarker:(id)arg1;
- (void)_setZIndex:(unsigned long long)arg1;
- (void)_setZIndex:(unsigned long long)arg1 notify:(bool)arg2;
- (bool)_shouldDeselectWhenDragged;
- (bool)_shouldShowCalloutIfSelected;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_significantBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_significantFrame;
- (void)_transitionFrom:(long long)arg1 to:(long long)arg2 duration:(double)arg3;
- (void)_unhideForDisplay;
- (void)_updateAnchorPosition:(struct CGPoint { double x1; double x2; })arg1 alignToPixels:(bool)arg2;
- (void)_updateFromMap;
- (bool)_useBalloonCallouts;
- (id)_userLocationProxy;
- (void)_userTrackingModeDidChange:(id)arg1;
- (id)_vkNavigationPuckMarker;
- (unsigned long long)_zIndex;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })alignmentRectInsets;
- (double)alpha;
- (id)anchor;
- (id)annotation;
- (struct CGPoint { double x1; double x2; })calloutOffset;
- (bool)canShowCallout;
- (struct CGPoint { double x1; double x2; })centerOffset;
- (id)clusterAnnotationView;
- (id)clusteringIdentifier;
- (long long)collisionMode;
- (long long)compareForClustering:(id)arg1;
- (long long)compareForCollision:(id)arg1;
- (void)configureCustomFeature:(id)arg1;
- (struct CLLocationCoordinate2D { double x1; double x2; })coordinate;
- (id)customFeatureAnnotation;
- (void)dealloc;
- (id)detailCalloutAccessoryView;
- (void)didMoveToSuperview;
- (float)displayPriority;
- (unsigned long long)dragState;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)image;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)invalidateCustomFeatureForced:(bool)arg1;
- (bool)isCollidingWithAnnotationView:(id)arg1 previouslyCollided:(bool)arg2;
- (bool)isDraggable;
- (bool)isEnabled;
- (bool)isHidden;
- (bool)isHighlighted;
- (bool)isPersistent;
- (bool)isProvidingCustomFeature;
- (bool)isSelectable;
- (bool)isSelected;
- (void)layoutSubviews;
- (id)leftCalloutAccessoryView;
- (struct CGPoint { double x1; double x2; })leftCalloutOffset;
- (void)prepareForDisplay;
- (void)prepareForReuse;
- (void)prepareForSnapshotting;
- (id)reuseIdentifier;
- (id)rightCalloutAccessoryView;
- (struct CGPoint { double x1; double x2; })rightCalloutOffset;
- (void)setAlpha:(double)arg1;
- (void)setAnnotation:(id)arg1;
- (void)setCalloutOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCanShowCallout:(bool)arg1;
- (void)setCenterOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setClusterAnnotationView:(id)arg1;
- (void)setClusteringIdentifier:(id)arg1;
- (void)setCollisionMode:(long long)arg1;
- (void)setDetailCalloutAccessoryView:(id)arg1;
- (void)setDisplayPriority:(float)arg1;
- (void)setDragState:(unsigned long long)arg1;
- (void)setDragState:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setDraggable:(bool)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setImage:(id)arg1;
- (void)setLeftCalloutAccessoryView:(id)arg1;
- (void)setLeftCalloutOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRightCalloutAccessoryView:(id)arg1;
- (void)setRightCalloutOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setSelected:(bool)arg1;
- (void)setSelected:(bool)arg1 animated:(bool)arg2;
- (bool)shouldShowCallout;
- (id)snapshotViewAfterScreenUpdates:(bool)arg1;
- (bool)updateCalloutViewIfNeededAnimated:(bool)arg1;
- (id)viewRepresentation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
