<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHImportDeviceSource.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Photos.framework/PHImportDeviceSource.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Photos.framework/Photos (1)
 */

@interface PHImportDeviceSource : PHImportSource <ICCameraDeviceDelegate> {
    NSMutableDictionary * _assetByCameraFile;
    NSObject<OS_dispatch_queue> * _assetByCameraFileAccess;
    NSObject<OS_dispatch_queue> * _assetDataRequestQueue;
    NSMutableArray * _assetMetadataRequests;
    NSMutableArray * _assetThumbnailHighPriorityRequests;
    NSMutableArray * _assetThumbnailRequests;
    NSMutableDictionary * _assetsByName;
    NSArray * _avchdAssets;
    ICCameraDevice * _camera;
    NSObject<OS_dispatch_queue> * _deleteEjectQueue;
    NSMutableArray * _deleteJobs;
    NSProgress * _deleteProgress;
    bool  _ejectAfterDelete;
    double  _idleTimeout;
    NSObject<OS_dispatch_source> * _idleTimer;
    bool  _isEjecting;
    id /* block */  _openSessionHandler;
    ICCameraDeviceRemovedItemsCoalescer * _removalCoalescer;
    NSMutableSet * _removedCameraFiles;
    NSObject<OS_dispatch_queue> * _serialHackQueue;
    NSObject<OS_dispatch_queue> * _timeoutSerializer;
    NSDate * _timeoutStart;
    bool  _waitingForAssetMetadataRequest;
    bool  _waitingForAssetThumbnailRequest;
}

@property (nonatomic, retain) NSMutableDictionary *assetByCameraFile;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *assetByCameraFileAccess;
@property (nonatomic, retain) NSArray *avchdAssets;
@property (retain) ICCameraDevice *camera;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *deleteEjectQueue;
@property (nonatomic, retain) NSMutableArray *deleteJobs;
@property (nonatomic, retain) NSProgress *deleteProgress;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool ejectAfterDelete;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isEjecting;
@property (nonatomic, copy) id /* block */ openSessionHandler;
@property (nonatomic, retain) ICCameraDeviceRemovedItemsCoalescer *removalCoalescer;
@property (nonatomic, retain) NSMutableSet *removedCameraFiles;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *serialHackQueue;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)assetByCameraFile;
- (id)assetByCameraFileAccess;
- (id)avchdAssets;
- (void)beginWork;
- (id)camera;
- (void)cameraDevice:(id)arg1 didAddItems:(id)arg2;
- (void)cameraDevice:(id)arg1 didRemoveItems:(id)arg2;
- (id)cameraFilesForAssets:(id)arg1;
- (bool)canDeleteContent;
- (bool)canEject;
- (bool)canUseCachedThumbnailForRequest:(id)arg1;
- (void)cancelAssetLoading;
- (id)deleteEjectQueue;
- (id)deleteImportAssets:(id)arg1 isConfirmed:(bool)arg2 isCancelable:(bool)arg3 atEnd:(id /* block */)arg4;
- (id)deleteJobs;
- (id)deleteProgress;
- (void)device:(id)arg1 didCloseSessionWithError:(id)arg2;
- (void)device:(id)arg1 didEncounterError:(id)arg2;
- (void)device:(id)arg1 didOpenSessionWithError:(id)arg2;
- (void)device:(id)arg1 didReceiveStatusInformation:(id)arg2;
- (void)deviceDidBecomeReady:(id)arg1;
- (void)deviceFinishedEnumeratingItems:(id)arg1;
- (void)deviceTimeoutHandler;
- (void)didRemoveDevice:(id)arg1;
- (void)dispatchAssetDataRequestAsync:(id)arg1 usingBlock:(id /* block */)arg2;
- (void)eject;
- (bool)ejectAfterDelete;
- (void)endWork;
- (void)fetchDataUsingRequest:(id)arg1 withCompletion:(id /* block */)arg2;
- (void)finishMetadataForRequest:(id)arg1 importAsset:(id)arg2 error:(id)arg3 atEnd:(id /* block */)arg4;
- (id)importAssetForCameraFile:(id)arg1 create:(bool)arg2;
- (id)initWithDevice:(id)arg1;
- (bool)isAppleDevice;
- (bool)isAvailable;
- (bool)isEjecting;
- (id)name;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id /* block */)openSessionHandler;
- (id)path;
- (id)processItem:(id)arg1 applyingBlock:(id /* block */)arg2;
- (id)productKind;
- (id)removalCoalescer;
- (void)removeAssetForCameraFile:(id)arg1;
- (id)removedCameraFiles;
- (void)sendNextRequestOfType:(unsigned char)arg1;
- (id)serialHackQueue;
- (void)setAssetByCameraFile:(id)arg1;
- (void)setAssetByCameraFileAccess:(id)arg1;
- (void)setAvchdAssets:(id)arg1;
- (void)setCamera:(id)arg1;
- (void)setDeleteEjectQueue:(id)arg1;
- (void)setDeleteJobs:(id)arg1;
- (void)setDeleteProgress:(id)arg1;
- (void)setEjectAfterDelete:(bool)arg1;
- (void)setIsEjecting:(bool)arg1;
- (void)setOpenSessionHandler:(id /* block */)arg1;
- (void)setRemovalCoalescer:(id)arg1;
- (void)setRemovedCameraFiles:(id)arg1;
- (void)setSerialHackQueue:(id)arg1;
- (void)setupDeviceTimeoutHandler;
- (id)uuid;
- (id)volumePath;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
