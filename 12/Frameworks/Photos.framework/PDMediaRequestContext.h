<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PDMediaRequestContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Photos.framework/PDMediaRequestContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Photos.framework/Photos (1)
 */

@interface PDMediaRequestContext : NSObject <PHAdjustmentDataRequestDelegate, PHImageRequestDelegate, PHRecyclableObject, PHResourceAvailabilityChangeRequestDelegate, PHVideoChoosingAndAvailabilityRequestDelegate, PHVideoRequestDelegate> {
    NSArray * _allProgresses;
    PHAsset * _asset;
    <PHMediaRequestContextDelegate> * _delegate;
    PHImageDisplaySpec * _displaySpec;
    NSError * _error;
    bool  _finalImageReceived;
    bool  _finalVideoReceived;
    PHImageRequestOptions * _imageOptions;
    NSDictionary * _info;
    PHMediaRequest * _initialRequest;
    bool  _isCancelled;
    NSMutableArray * _jobs;
    PHLivePhotoRequestOptions * _livePhotoOptions;
    struct os_unfair_lock_s { 
        unsigned int _os_unfair_lock_opaque; 
    }  _lock;
    unsigned long long  _managerID;
    unsigned long long  _nextID;
    PDVideoRequest * _outboundVideoRequest;
    NSMutableDictionary * _progressByTaskIdentifier;
    int  _requestID;
    NSMutableDictionary * _requestedResourcesByTaskIdentifier;
    NSMutableArray * _requests;
    PHImageResult * _result;
    id /* block */  _resultHandler;
    NSProgress * _totalProgress;
    long long  _type;
    PHVideoRequestOptions * _videoOptions;
}

@property (nonatomic, readonly) PHAsset *asset;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PHMediaRequestContextDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) PHImageDisplaySpec *displaySpec;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) PHImageRequestOptions *imageOptions;
@property (nonatomic, retain) PHLivePhotoRequestOptions *livePhotoOptions;
@property (nonatomic, readonly) unsigned long long managerID;
@property (nonatomic, readonly) int requestID;
@property (readonly) Class superclass;
@property (nonatomic) long long type;
@property (nonatomic, retain) PHVideoRequestOptions *videoOptions;

+ (id)imageRequestContextWithRequestID:(int)arg1 managerID:(unsigned long long)arg2 asset:(id)arg3 imageRequestOptions:(id)arg4 displaySpec:(id)arg5 resultHandler:(id /* block */)arg6;
+ (void)initialize;
+ (id)livePhotoRequestContextWithRequestID:(int)arg1 managerID:(unsigned long long)arg2 asset:(id)arg3 livePhotoRequestOptions:(id)arg4 displaySpec:(id)arg5 resultHandler:(id /* block */)arg6;
+ (id)videoRequestContextWithRequestID:(int)arg1 managerID:(unsigned long long)arg2 asset:(id)arg3 videoRequestOptions:(id)arg4 resultHandler:(id /* block */)arg5;

- (void).cxx_destruct;
- (id)_adjustmentRequest;
- (void)_availabilityRequest:(id)arg1 didReportProgress:(double)arg2 completed:(bool)arg3 error:(id)arg4;
- (long long)_imageDeliveryMode;
- (long long)_imageVersion;
- (id)_initialImageRequest;
- (id)_initialVideoRequest;
- (bool)_isNetworkAccessAllowed;
- (bool)_isSynchronous;
- (void)_makeAvailabilityRequest:(id)arg1 forResource:(id)arg2 mediaRequest:(id)arg3;
- (id /* block */)_progressHandler;
- (id)_requestWithIdentifier:(id)arg1;
- (void)_setupProgressIfNeeded;
- (void)_spawnNewImageRequestWithBehaviorSpec:(id)arg1;
- (void)_startRequest:(id)arg1;
- (void)adjustmentDataRequest:(id)arg1 didFinishWithResultInfo:(id)arg2 error:(id)arg3;
- (void)adjustmentDataRequest:(id)arg1 didReportProgress:(double)arg2 completed:(bool)arg3 error:(id)arg4;
- (id)asset;
- (void)cancel;
- (id)delegate;
- (id)displaySpec;
- (id)imageOptions;
- (void)imageRequest:(id)arg1 didFinishLoadingImageResult:(id)arg2 info:(id)arg3 error:(id)arg4;
- (void)imageRequest:(id)arg1 didProcessHintsWithLocallyAvailable:(bool)arg2 isDegraded:(bool)arg3;
- (void)imageRequest:(id)arg1 isQueryingCacheAndDidWait:(bool*)arg2 didFindImage:(bool*)arg3 resultHandler:(id /* block */)arg4;
- (void)imageRequest:(id)arg1 isRequestingScheduledWorkBlock:(id /* block */)arg2;
- (bool)imageRequestIsInitialRequestOfMultistageRequest:(id)arg1;
- (id)initWithRequestID:(int)arg1 managerID:(unsigned long long)arg2 asset:(id)arg3 displaySpec:(id)arg4 resultHandler:(id /* block */)arg5;
- (id)livePhotoOptions;
- (unsigned long long)managerID;
- (void)mediaRequest:(id)arg1 isRequestingLocalAvailabilityChangeForResource:(id)arg2;
- (void)prepareForReuse;
- (void)recycleRequests;
- (int)requestID;
- (void)resourceAvailabilityChangeRequest:(id)arg1 didFinishWithSuccess:(bool)arg2 url:(id)arg3 data:(id)arg4 info:(id)arg5 error:(id)arg6;
- (void)resourceAvailabilityChangeRequest:(id)arg1 didLoadData:(id)arg2;
- (void)resourceAvailabilityChangeRequest:(id)arg1 didReportProgress:(double)arg2 completed:(bool)arg3 error:(id)arg4;
- (void)setDelegate:(id)arg1;
- (void)setImageOptions:(id)arg1;
- (void)setLivePhotoOptions:(id)arg1;
- (void)setType:(long long)arg1;
- (void)setVideoOptions:(id)arg1;
- (void)start;
- (long long)type;
- (void)videoChoosingAndAvailabilityRequest:(id)arg1 didFinishWithVideoURL:(id)arg2 info:(id)arg3 error:(id)arg4;
- (void)videoChoosingAndAvailabilityRequest:(id)arg1 didReportProgress:(double)arg2 completed:(bool)arg3 error:(id)arg4;
- (id)videoOptions;
- (void)videoRequest:(id)arg1 didFinishLoadingVideoURL:(id)arg2 info:(id)arg3 error:(id)arg4;
- (void)videoRequest:(id)arg1 isRequestingVideoChoosingForSize:(struct CGSize { double x1; double x2; })arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
