<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHImportSource.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Photos.framework/PHImportSource.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Photos.framework/Photos (1)
 */

@interface PHImportSource : PHImportExceptionRecorder {
    long long  _assetLoadOrder;
    NSMutableArray * _assets;
    NSMutableDictionary * _assetsByOriginalName;
    unsigned long long  _batchCount;
    double  _batchInterval;
    NSObject<OS_dispatch_queue> * _batchQueue;
    unsigned long long  _batchSize;
    double  _batchStart;
    bool  _canShowProgress;
    unsigned long long  _completedItems;
    id /* block */  _completion;
    NSObject<OS_dispatch_queue> * _controlQueue;
    unsigned long long  _currentItemIndex;
    <PHImportSourceDelegate> * _delegate;
    bool  _deleteContentAllowed;
    NSObject<OS_dispatch_queue> * _dupPathCollectionQueue;
    NSDateFormatter * _dupeDateFormatter;
    NSMutableArray * _duplicateAssets;
    PHImportDuplicateChecker * _duplicateChecker;
    NSMutableArray * _errors;
    unsigned long long  _inFlight;
    NSObject<OS_dispatch_queue> * _itemProcessingQueue;
    NSObject<OS_dispatch_queue> * _itemQueue;
    NSMutableArray * _items;
    unsigned long long  _nextItemIndex;
    bool  _open;
    PHImportOptions * _options;
    NSMutableArray * _processed;
    unsigned long long  _processingConcurrency;
    NSObject<OS_dispatch_queue> * _processingQueue;
    NSProgress * _progress;
    bool  _rampBatchInterval;
    NSMutableArray * _removedSourceFileIdentifiers;
    NSMutableSet * _renderedAssets;
    unsigned char  _sourceAccessState;
    NSString * _uuid;
}

@property (nonatomic) long long assetLoadOrder;
@property (nonatomic, retain) NSMutableArray *assets;
@property (nonatomic, retain) NSMutableDictionary *assetsByOriginalName;
@property (nonatomic) unsigned long long batchCount;
@property (nonatomic) double batchInterval;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *batchQueue;
@property (nonatomic) unsigned long long batchSize;
@property (nonatomic) double batchStart;
@property (nonatomic, readonly) bool canDeleteContent;
@property (readonly) bool canEject;
@property (readonly) bool canShowProgress;
@property (nonatomic) unsigned long long completedItems;
@property (nonatomic, copy) id /* block */ completion;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *controlQueue;
@property (nonatomic) unsigned long long currentItemIndex;
@property (nonatomic) <PHImportSourceDelegate> *delegate;
@property (nonatomic) bool deleteContentAllowed;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dupPathCollectionQueue;
@property (nonatomic, retain) NSDateFormatter *dupeDateFormatter;
@property (nonatomic, retain) NSMutableArray *duplicateAssets;
@property (nonatomic, retain) PHImportDuplicateChecker *duplicateChecker;
@property (retain) NSMutableArray *errors;
@property (nonatomic) unsigned long long inFlight;
@property (readonly) bool isAppleDevice;
@property (readonly) bool isAvailable;
@property (readonly) bool isCamera;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *itemProcessingQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *itemQueue;
@property (nonatomic, retain) NSMutableArray *items;
@property (readonly) NSString *name;
@property (nonatomic) unsigned long long nextItemIndex;
@property (nonatomic) bool open;
@property (nonatomic, retain) PHImportOptions *options;
@property (readonly) NSString *path;
@property (nonatomic, retain) NSMutableArray *processed;
@property (nonatomic) unsigned long long processingConcurrency;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *processingQueue;
@property (readonly) NSString *productKind;
@property (nonatomic, retain) NSProgress *progress;
@property (nonatomic) bool rampBatchInterval;
@property (nonatomic, readonly) NSMutableArray *removedSourceFileIdentifiers;
@property (nonatomic, retain) NSMutableSet *renderedAssets;
@property (nonatomic) unsigned char sourceAccessState;
@property (nonatomic, readonly) bool stalled;
@property (nonatomic, readonly) NSString *uuid;
@property (readonly) NSString *volumePath;

+ (id)baseFileNameByRemovingRenderMarkerInFileName:(id)arg1;

- (void).cxx_destruct;
- (void)addAsset:(id)arg1 toRemovedAssets:(id)arg2;
- (void)addItems:(id)arg1;
- (void)addSourceFileIdentifiersForRemovedFiles:(id)arg1;
- (id)additionalQueues;
- (long long)assetLoadOrder;
- (id)assets;
- (id)assetsByOriginalName;
- (bool)batchComplete;
- (unsigned long long)batchCount;
- (double)batchInterval;
- (id)batchQueue;
- (unsigned long long)batchSize;
- (double)batchStart;
- (void)beginWork;
- (bool)canDeleteContent;
- (bool)canEject;
- (bool)canShowProgress;
- (void)cancelAssetLoading;
- (id)checkForDuplicate:(id)arg1 considerItemsInTheTrash:(bool)arg2;
- (void)checkForDuplicates:(id)arg1 considerItemsInTrash:(bool)arg2 forEach:(id /* block */)arg3 atEnd:(id /* block */)arg4;
- (unsigned long long)completedItems;
- (id /* block */)completion;
- (id)controlQueue;
- (unsigned long long)currentItemIndex;
- (bool)date:(id)arg1 matchesDate:(id)arg2;
- (void)decrementInFlight;
- (id)delegate;
- (bool)deleteContentAllowed;
- (id)deleteImportAssets:(id)arg1 isConfirmed:(bool)arg2 isCancelable:(bool)arg3 atEnd:(id /* block */)arg4;
- (void)dispatchAssetDataRequestAsync:(id)arg1 usingBlock:(id /* block */)arg2;
- (id)dupPathCollectionQueue;
- (id)dupeDateFormatter;
- (id)duplicateAssets;
- (id)duplicateChecker;
- (void)eject;
- (void)endBatch;
- (void)endWork;
- (id)errors;
- (id)generatePPTData;
- (unsigned long long)inFlight;
- (void)incrementInFlight;
- (id)init;
- (bool)isAppleDevice;
- (bool)isAvailable;
- (bool)isCamera;
- (id)itemProcessingQueue;
- (id)itemQueue;
- (id)items;
- (id)loadAssetsForLibrary:(id)arg1 allowDuplicates:(bool)arg2 order:(long long)arg3 atEnd:(id /* block */)arg4;
- (id)loadAssetsForLibrary:(id)arg1 allowDuplicates:(bool)arg2 order:(long long)arg3 batchInterval:(double)arg4 atEnd:(id /* block */)arg5;
- (id)loadAssetsForLibrary:(id)arg1 allowDuplicates:(bool)arg2 order:(long long)arg3 batchSize:(unsigned long long)arg4 atEnd:(id /* block */)arg5;
- (id)loadAssetsForLibrary:(id)arg1 allowDuplicates:(bool)arg2 order:(long long)arg3 batchSize:(unsigned long long)arg4 batchInterval:(double)arg5 atEnd:(id /* block */)arg6;
- (id)name;
- (unsigned long long)nextItemIndex;
- (bool)open;
- (id)options;
- (id)path;
- (bool)pathForAsset:(id)arg1 matchesAsset:(id)arg2;
- (void)pauseAssetLoading;
- (void)processAsset:(id)arg1 withProcessed:(id)arg2 atEnd:(id /* block */)arg3;
- (id)processItem:(id)arg1 applyingBlock:(id /* block */)arg2;
- (void)processNextItems;
- (bool)processPotentialJpegAsset:(id)arg1 plusRawAsset:(id)arg2;
- (id)processed;
- (unsigned long long)processingConcurrency;
- (id)processingQueue;
- (id)productKind;
- (id)progress;
- (bool)rampBatchInterval;
- (void)removeAssets:(id)arg1;
- (id)removedSourceFileIdentifiers;
- (id)renderedAssets;
- (id)requestDeleteAssetsForRecords:(id)arg1;
- (void)resumeAssetLoading;
- (void)setAssetLoadOrder:(long long)arg1;
- (void)setAssets:(id)arg1;
- (void)setAssetsByOriginalName:(id)arg1;
- (void)setBatchCount:(unsigned long long)arg1;
- (void)setBatchInterval:(double)arg1;
- (void)setBatchQueue:(id)arg1;
- (void)setBatchSize:(unsigned long long)arg1;
- (void)setBatchStart:(double)arg1;
- (void)setCompletedItems:(unsigned long long)arg1;
- (void)setCompletion:(id /* block */)arg1;
- (void)setControlQueue:(id)arg1;
- (void)setCurrentItemIndex:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDeleteContentAllowed:(bool)arg1;
- (void)setDupPathCollectionQueue:(id)arg1;
- (void)setDupeDateFormatter:(id)arg1;
- (void)setDuplicateAssets:(id)arg1;
- (void)setDuplicateChecker:(id)arg1;
- (void)setErrors:(id)arg1;
- (void)setInFlight:(unsigned long long)arg1;
- (void)setItemProcessingQueue:(id)arg1;
- (void)setItemQueue:(id)arg1;
- (void)setItems:(id)arg1;
- (void)setNextItemIndex:(unsigned long long)arg1;
- (void)setOpen:(bool)arg1;
- (void)setOptions:(id)arg1;
- (void)setProcessed:(id)arg1;
- (void)setProcessingConcurrency:(unsigned long long)arg1;
- (void)setProcessingQueue:(id)arg1;
- (void)setProgress:(id)arg1;
- (void)setRampBatchInterval:(bool)arg1;
- (void)setRenderedAssets:(id)arg1;
- (void)setSourceAccessState:(unsigned char)arg1;
- (unsigned char)sourceAccessState;
- (bool)stalled;
- (id)uuid;
- (id)volumePath;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
