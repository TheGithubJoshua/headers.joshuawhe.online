<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHCoreImageManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Photos.framework/PHCoreImageManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Photos.framework/Photos (1)
 */

@interface PHCoreImageManager : NSObject {
    NSObject<OS_dispatch_queue> * _CPLDownloadFireAndForgetRequestQueue;
    NSObject<OS_dispatch_queue> * _CPLDownloadUpdateIsolationQueue;
    PHConcurrentMapTable * _perDomainCloudPreheatItemMapTables;
    PHConcurrentMapTable * _perDomainHighPriorityRequestWaitGroups;
    PHConcurrentMapTable * _perDomainPreheatItemMapTables;
    NSMutableSet * _preheatBlobsToConsiderForCleanup;
    NSMapTable * _requestLookupTable;
    NSObject<OS_dispatch_queue> * _requestLookupTableIsolationQueue;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *CPLDownloadFireAndForgetRequestQueue;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *CPLDownloadUpdateIsolationQueue;
@property (nonatomic, retain) PHConcurrentMapTable *perDomainCloudPreheatItemMapTables;
@property (nonatomic, retain) PHConcurrentMapTable *perDomainHighPriorityRequestWaitGroups;
@property (nonatomic, retain) PHConcurrentMapTable *perDomainPreheatItemMapTables;
@property (nonatomic, retain) NSMutableSet *preheatBlobsToConsiderForCleanup;
@property (nonatomic, retain) NSMapTable *requestLookupTable;
@property (nonatomic, retain) NSObject<OS_dispatch_queue> *requestLookupTableIsolationQueue;

+ (struct CGSize { double x1; double x2; })_aspectedSizeWithSize:(struct CGSize { double x1; double x2; })arg1 maxDimension:(double)arg2;
+ (void)_chooseFormatsForSize:(struct CGSize { double x1; double x2; })arg1 contentMode:(long long)arg2 srcAspectRatio:(double)arg3 options:(id)arg4 hasAdjustmentsHandler:(id /* block */)arg5 desiredImagePixelSize:(struct CGSize { double x1; double x2; }*)arg6 bestFormat:(id*)arg7 degradedFormat:(id*)arg8;
+ (id)_debugFilenameForAsset:(id)arg1;
+ (id)_degradedFormatWithPolicy:(long long)arg1 request:(id)arg2 hasAdjustmentsHandler:(id /* block */)arg3;
+ (id)_descriptionForDomain:(id)arg1;
+ (id)_dictionaryBySettingObject:(id)arg1 forKey:(id)arg2 inDictionary:(id)arg3;
+ (id)_fastestDegradedFormatForRequest:(id)arg1 hasAdjustmentsHandler:(id /* block */)arg2;
+ (struct CGImage { }*)_newResizedImageForImage:(struct CGImage { }*)arg1 withSize:(struct CGSize { double x1; double x2; })arg2 normalizedCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 contentMode:(long long)arg4;
+ (long long)_plImageVersionFromPHImageRequestOptionsVersion:(long long)arg1;
+ (long long)_wantedCloudPlaceholderKindForImageFormat:(id)arg1;
+ (void)runBlockAsPrivilegedAsPhotosApp:(id /* block */)arg1;
+ (id)sharedInstance;

- (void).cxx_destruct;
- (id)CPLDownloadFireAndForgetRequestQueue;
- (id)CPLDownloadUpdateIsolationQueue;
- (void)_asyncGenerateLiveRenderedImageWithRequest:(id)arg1 library:(id)arg2 format:(int)arg3 desiredImagePixelSize:(struct CGSize { double x1; double x2; })arg4 completionHandler:(id /* block */)arg5;
- (void)_cancelAsynchronousRequestWithID:(int)arg1;
- (void)_clearCPLDownloadWaitGroupForRequest:(id)arg1;
- (void)_considerPreheatItemForCleanup:(id)arg1 asset:(id)arg2 domain:(id)arg3;
- (id)_fastFetchAdjustmentDataWithRequest:(id)arg1;
- (void)_fetchAdjustmentDataThruAssetsdAndCPLHandlerWithRequest:(id)arg1 networkAccessAllowed:(bool)arg2 trackCPLDownload:(bool)arg3 completionHandler:(id /* block */)arg4;
- (void)_fetchAnySizeImageAsNon5551BytesPossiblyThruAssetsdAndCPLWithRequest:(id)arg1 library:(id)arg2 format:(int)arg3 optimalSourcePixelSize:(struct CGSize { double x1; double x2; })arg4 wantsProperties:(bool)arg5 networkAccessAllowed:(bool)arg6 networkAccessForced:(bool)arg7 trackCPLDownload:(bool)arg8 sync:(bool)arg9 completionHandler:(id /* block */)arg10;
- (void)_fetchAnySizeImageAsNon5551BytesWithRequest:(id)arg1 library:(id)arg2 format:(int)arg3 bestFormat:(int)arg4 optimalSourcePixelSize:(struct CGSize { double x1; double x2; })arg5 sync:(bool)arg6 fireAndForgetCPLDownload:(bool)arg7 completionHandler:(id /* block */)arg8;
- (void)_fetchPreheatableAnySizeImageAsNon5551BytesWithRequest:(id)arg1 library:(id)arg2 format:(int)arg3 bestFormat:(int)arg4 preheatItem:(id)arg5 optimalSourcePixelSize:(struct CGSize { double x1; double x2; })arg6 sync:(bool)arg7 fireAndForgetCPLDownload:(bool)arg8 completionHandler:(id /* block */)arg9;
- (void)_fireAndForgetCPLDownloadWithRequest:(id)arg1 format:(int)arg2;
- (void)_handleNormalImageRequest:(id)arg1 library:(id)arg2 deliveryMode:(long long)arg3 degradedFormat:(id)arg4 bestFormat:(id)arg5 optimalSourcePixelSize:(struct CGSize { double x1; double x2; })arg6 wantsImageDataOrURL:(bool)arg7 sync:(bool)arg8 isFinalStageOfStagedRequest:(bool)arg9 isResponseToSharedStreamsDownload:(bool)arg10;
- (void)_handleSyncImageRequestForBRGA5551:(id)arg1;
- (id)_highPriorityRequestWaitGroupWithDomain:(id)arg1;
- (void)_inq_main_cleanupPreheatBlobs;
- (id)_originalPreheatItemCreateTransientWithAsset:(id)arg1 optimalSourcePixelSize:(struct CGSize { double x1; double x2; })arg2 options:(unsigned int)arg3 domain:(id)arg4;
- (void)_performPreheatReferenceCountingOperationForAssets:(id)arg1 CPLPrefetching:(bool)arg2 domain:(id)arg3 operation:(long long)arg4 passingTestHandler:(id /* block */)arg5;
- (id)_preheatItemCreateIfNeededWithAsset:(id)arg1 format:(int)arg2 optimalSourcePixelSize:(struct CGSize { double x1; double x2; })arg3 options:(unsigned int)arg4 CPLPrefetching:(bool)arg5 outDidExist:(bool*)arg6 domain:(id)arg7;
- (id)_preheatItemMapTableWithFormat:(int)arg1 CPLPrefetching:(bool)arg2 domain:(id)arg3 createIfNeeded:(bool)arg4;
- (id)_preheatItemSourceWithFormat:(int)arg1;
- (id)_preheatItemWithAsset:(id)arg1 format:(int)arg2 CPLPrefetching:(bool)arg3 domain:(id)arg4;
- (void)_processImageRequest:(id)arg1 sync:(bool)arg2;
- (void)_registerRequest:(id)arg1;
- (id)_resizeUIImage:(id)arg1 withRequest:(id)arg2;
- (id)_setupCPLDownloadWaitGroupForRequest:(id)arg1 withTimeout:(unsigned long long)arg2;
- (void)_unregisterRequest:(id)arg1;
- (void)_updateCPLDownloadStatesOnConnectionLostNotification:(id)arg1;
- (void)_updateCPLDownloadStatesOnStatusDidChangeNotification:(id)arg1;
- (void)asyncEnumeratePendingCPLDownloadRequestsWithBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (void)asyncEnumeratePendingRequestsWithBlock:(id /* block */)arg1 completionHandler:(id /* block */)arg2;
- (void)dealloc;
- (id)description;
- (id)init;
- (id)perDomainCloudPreheatItemMapTables;
- (id)perDomainHighPriorityRequestWaitGroups;
- (id)perDomainPreheatItemMapTables;
- (id)preheatBlobsToConsiderForCleanup;
- (id)requestLookupTable;
- (id)requestLookupTableIsolationQueue;
- (void)setCPLDownloadFireAndForgetRequestQueue:(id)arg1;
- (void)setCPLDownloadUpdateIsolationQueue:(id)arg1;
- (void)setPerDomainCloudPreheatItemMapTables:(id)arg1;
- (void)setPerDomainHighPriorityRequestWaitGroups:(id)arg1;
- (void)setPerDomainPreheatItemMapTables:(id)arg1;
- (void)setPreheatBlobsToConsiderForCleanup:(id)arg1;
- (void)setRequestLookupTable:(id)arg1;
- (void)setRequestLookupTableIsolationQueue:(id)arg1;
- (void)updateRequest:(id)arg1 withDownloadContext:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
