<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHLivePhoto.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Photos.framework/PHLivePhoto.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Photos.framework/Photos (1)
 */

@interface PHLivePhoto : NSObject <NSCopying, NSSecureCoding> {
    PHAsset * _asset;
    NSString * _assetLocalIdentifier;
    float  _audioVolume;
    long long  _contentMode;
    UIImage * _image;
    PHImageManager * _imageManager;
    NSURL * _imageURL;
    PHSandboxExtensionWrapper * _imageURLSandboxExtensionWrapper;
    unsigned long long  _options;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _photoTime;
    struct CGSize { 
        double width; 
        double height; 
    }  _size;
    struct CGSize { 
        double width; 
        double height; 
    }  _targetSize;
    NSString * _uniqueIdentifier;
    AVAsset * _videoAsset;
    AVVideoComposition * _videoComposition;
    NSURL * _videoURL;
    PHSandboxExtensionWrapper * _videoURLSandboxExtensionWrapper;
}

@property (nonatomic) PHAsset *asset;
@property (nonatomic, readonly, copy) NSString *assetLocalIdentifier;
@property (nonatomic) float audioVolume;
@property (nonatomic, readonly) long long contentMode;
@property (nonatomic, readonly) UIImage *image;
@property (nonatomic, readonly) id /* block */ imageFileLoader;
@property (nonatomic) PHImageManager *imageManager;
@property (nonatomic, readonly) NSString *imageTypeIdentifier;
@property (nonatomic, readonly) NSURL *imageURL;
@property (nonatomic, readonly) PHSandboxExtensionWrapper *imageURLSandboxExtensionWrapper;
@property (nonatomic, readonly) unsigned long long options;
@property (nonatomic, readonly) NSString *originalFilename;
@property (nonatomic, readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } photoTime;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } size;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } targetSize;
@property (readonly) NSString *uniqueIdentifier;
@property (nonatomic, readonly) AVAsset *videoAsset;
@property (nonatomic, readonly, copy) AVVideoComposition *videoComposition;
@property (nonatomic, readonly) id /* block */ videoFileLoader;
@property (nonatomic, readonly) NSString *videoTypeIdentifier;
@property (nonatomic, readonly) NSURL *videoURL;
@property (nonatomic, readonly) PHSandboxExtensionWrapper *videoURLSandboxExtensionWrapper;

+ (bool)_canCreateLivePhotoWithURLs:(id)arg1 outError:(id*)arg2;
+ (bool)_canCreateLoopingLivePhotoWithURLs:(id)arg1 outError:(id*)arg2;
+ (bool)_identifyResourceURLs:(id)arg1 outImageURL:(id*)arg2 outVideoURL:(id*)arg3 error:(id*)arg4;
+ (struct { long long x1; int x2; unsigned int x3; long long x4; })_photoTimeForLivePhotoWithImageURL:(id)arg1 videoURL:(id)arg2;
+ (bool)_validateFileURLs:(id)arg1 withValidationOptions:(unsigned long long)arg2 outError:(id*)arg3;
+ (void)cancelLivePhotoRequestWithRequestID:(int)arg1;
+ (id)livePhotoWithResourceFileURLs:(id)arg1 error:(id*)arg2;
+ (id)livePhotoWithResourceFileURLs:(id)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2 contentMode:(long long)arg3 error:(id*)arg4;
+ (id)livePhotoWithResourceFileURLs:(id)arg1 targetSize:(struct CGSize { double x1; double x2; })arg2 contentMode:(long long)arg3 isLooping:(bool)arg4 error:(id*)arg5;
+ (id)loopingLivePhotoWithResourceFileURLs:(id)arg1 error:(id*)arg2;
+ (int)requestLivePhotoWithResourceFileURLs:(id)arg1 placeholderImage:(id)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 contentMode:(long long)arg4 resultHandler:(id /* block */)arg5;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (id)_asset;
- (void)_ensureConstituentData;
- (id)_imageManager;
- (id)_initWithImageURL:(id)arg1 videoURL:(id)arg2 targetSize:(struct CGSize { double x1; double x2; })arg3 contentMode:(long long)arg4;
- (void)_loadConstituentURLsWithNetworkAccessAllowed:(bool)arg1 completionHandler:(id /* block */)arg2;
- (bool)_synchronouslyLoadImageURL:(id*)arg1 videoURL:(id*)arg2 error:(id*)arg3;
- (id)asset;
- (id)assetLocalIdentifier;
- (float)audioVolume;
- (long long)contentMode;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)encodeWithCoder:(id)arg1;
- (bool)hasPhotoColorAdjustments;
- (id)image;
- (id /* block */)imageFileLoader;
- (id)imageManager;
- (id)imageTypeIdentifier;
- (id)imageURL;
- (id)imageURLSandboxExtensionWrapper;
- (id)initWithCoder:(id)arg1;
- (id)initWithImage:(id)arg1 videoAsset:(id)arg2 photoTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 assetLocalIdentifier:(id)arg4;
- (id)initWithImage:(id)arg1 videoAsset:(id)arg2 photoTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 assetLocalIdentifier:(id)arg4 options:(unsigned long long)arg5;
- (id)initWithImage:(id)arg1 videoAsset:(id)arg2 photoTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 assetLocalIdentifier:(id)arg4 options:(unsigned long long)arg5 videoComposition:(id)arg6;
- (unsigned long long)options;
- (id)originalFilename;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })photoTime;
- (void)saveToPhotoLibraryWithCompletionHandler:(id /* block */)arg1;
- (void)setAsset:(id)arg1;
- (void)setAudioVolume:(float)arg1;
- (void)setImageManager:(id)arg1;
- (struct CGSize { double x1; double x2; })size;
- (struct CGSize { double x1; double x2; })targetSize;
- (id)uniqueIdentifier;
- (id)videoAsset;
- (id)videoComplement;
- (id)videoComposition;
- (id /* block */)videoFileLoader;
- (id)videoTypeIdentifier;
- (id)videoURL;
- (id)videoURLSandboxExtensionWrapper;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
