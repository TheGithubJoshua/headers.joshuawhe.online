<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUTileViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUTileViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUTileViewController : PUTileController {
    bool  __edgeAntialiasingEnabled;
    bool  __loadingView;
    UIView * __maskView;
    id /* block */  __onReadyToDisplayBlock;
    NSTimer * __readinessTimer;
    UIView * __tintView;
    UIView * __visibleRectView;
    UIView * _contentView;
    bool  _contentViewEnabled;
    NSArray * _gestureRecognizers;
    bool  _isReadyForDisplay;
    UIView * _loadedView;
    UIView * _view;
}

@property (setter=_setEdgeAntialiasingEnabled:, nonatomic) bool _edgeAntialiasingEnabled;
@property (getter=_isLoadingView, setter=_setLoadingView:, nonatomic) bool _loadingView;
@property (setter=_setMaskView:, nonatomic, retain) UIView *_maskView;
@property (setter=_setOnReadyToDisplayBlock:, nonatomic, copy) id /* block */ _onReadyToDisplayBlock;
@property (setter=_setReadinessTimer:, nonatomic, retain) NSTimer *_readinessTimer;
@property (setter=_setTintView:, nonatomic, retain) UIView *_tintView;
@property (setter=_setVisibleRectView:, nonatomic, retain) UIView *_visibleRectView;
@property (setter=_setContentView:, nonatomic, retain) UIView *contentView;
@property (getter=isContentViewEnabled, nonatomic) bool contentViewEnabled;
@property (setter=_setGestureRecognizers:, nonatomic, retain) NSArray *gestureRecognizers;
@property (setter=_setReadyForDisplay:, nonatomic) bool isReadyForDisplay;
@property (nonatomic, readonly) bool isViewLoaded;
@property (setter=_setLoadedView:, nonatomic, retain) UIView *loadedView;
@property (nonatomic, readonly) UIView *originalView;
@property (setter=_setView:, nonatomic, retain) UIView *view;

- (void).cxx_destruct;
- (bool)_edgeAntialiasingEnabled;
- (void)_handleReadinessForced:(bool)arg1;
- (void)_invalidateTintView;
- (bool)_isLoadingView;
- (id)_maskView;
- (id /* block */)_onReadyToDisplayBlock;
- (id)_readinessTimer;
- (void)_setContentView:(id)arg1;
- (void)_setEdgeAntialiasingEnabled:(bool)arg1;
- (void)_setGestureRecognizers:(id)arg1;
- (void)_setLoadedView:(id)arg1;
- (void)_setLoadingView:(bool)arg1;
- (void)_setMaskView:(id)arg1;
- (void)_setOnReadyToDisplayBlock:(id /* block */)arg1;
- (void)_setReadinessTimer:(id)arg1;
- (void)_setReadyForDisplay:(bool)arg1;
- (void)_setTintView:(id)arg1;
- (void)_setView:(id)arg1;
- (void)_setVisibleRectView:(id)arg1;
- (id)_tintView;
- (void)_updateDynamicStateDebugging;
- (void)_updateTintView;
- (void)_updateVisibleRectView;
- (id)_visibleRectView;
- (void)addToTilingView:(id)arg1;
- (void)applyLayoutInfo:(id)arg1;
- (void)becomeReusable;
- (id)contentView;
- (void)dealloc;
- (void)didChangeVisibleRect;
- (id)gestureRecognizers;
- (bool)isContentViewEnabled;
- (bool)isPresentationActive;
- (bool)isReadyForDisplay;
- (bool)isViewLoaded;
- (id)loadView;
- (id)loadedView;
- (void)notifyWhenReadyForDisplayWithTimeOut:(double)arg1 completionHandler:(id /* block */)arg2;
- (id)originalView;
- (void)prepareForReuse;
- (id)presentationLayoutInfo;
- (void)removeAllAnimations;
- (void)setContentViewEnabled:(bool)arg1;
- (void)setEdgeAntialiasingEnabled:(bool)arg1;
- (id)view;
- (void)viewDidLoad;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;
- (bool)wantsVisibleRectChanges;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
