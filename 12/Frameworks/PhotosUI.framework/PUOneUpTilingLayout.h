<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUOneUpTilingLayout.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUOneUpTilingLayout.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUOneUpTilingLayout : PUSectionedTilingLayout {
    struct CGSize { 
        double width; 
        double height; 
    }  _assetExplorerReviewScreenProgressIndicatorSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _bufferingIndicatorSize;
    bool  _canDisplayLoadingIndicators;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentGuideInsets;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _contentSafeInsets;
    <PUOneUpTilingLayoutDelegate> * _delegate;
    struct { 
        bool respondsToAspectRatioForItemAtIndexPath; 
        bool respondsToShouldScaleToFitSafeInsetsForItemAtIndexPath; 
        bool respondsToBadgeSizeForItemAtIndexPath; 
        bool respondsToActionBadgeSizeForItemAtIndexPath; 
        bool respondsToAssetExplorerReviewScreenBadgeSizeForItemAtIndexPath; 
        bool respondsToShouldShowPlayButtonForItemAtIndexPath; 
        bool respondsToShouldShowProgressIndicatorForItemAtIndexPath; 
        bool respondsToShouldMoveProgressIndicatorForItemAtIndexPath; 
        bool respondsToShouldShowBufferingIndicatorForItemAtIndexPath; 
        bool respondsToLoadingIndicatorSizeForItemAtIndexPath; 
        bool respondsToModelTileTransformForItemAtIndexPath; 
        bool respondsToContentOffsetForItemAtIndexPath; 
        bool respondsToShouldShowAccessoryForItemAtIndexPath; 
        bool respondsToMinimumVisibleContentHeightForItemAtIndexPath; 
        bool respondsToMinimumVisibleAccessoryHeightForItemAtIndexPath; 
        bool respondsToShouldShowVideoPlaceholderForItemAtIndexPath; 
        bool respondsToDisableInitialZoomToFillForItemAtIndexPath; 
        bool respondsToShouldShowReviewScreenScrubberBar; 
        bool respondsToAlphaForReviewScreenBarsInLayout; 
    }  _delegateFlags;
    struct CGSize { 
        double width; 
        double height; 
    }  _displaySizeForInsetMatching;
    NSIndexPath * _inFocusIndexPath;
    struct CGSize { 
        double width; 
        double height; 
    }  _interpageSpacing;
    struct CGSize { 
        double width; 
        double height; 
    }  _itemSize;
    NSMutableDictionary * _layoutInfosByIndexPathByTileKind;
    NSIndexPath * _neighborIndexPath;
    PUParallaxComputer * _parallaxComputer;
    struct CGSize { 
        double width; 
        double height; 
    }  _playButtonSize;
    struct CGSize { 
        double width; 
        double height; 
    }  _progressIndicatorSize;
    bool  _shouldPinContentToTop;
    long long  _tileInitialContentMode;
    UITraitCollection * _traitCollection;
    double  _transitionProgress;
    bool  _useAssetExplorerReviewScreenBadgeTiles;
    bool  _useBackgroundTile;
    bool  _useBadgeTiles;
    bool  _useImportStatusIndicatorTiles;
    bool  _useReviewScreenBars;
    bool  _useSelectionIndicatorTiles;
    bool  _useUserTransformTiles;
    bool  _useVerticalReviewScreenControlBarLayout;
    long long  _windowInterfaceOrientation;
}

@property (nonatomic) struct CGSize { double x1; double x2; } assetExplorerReviewScreenProgressIndicatorSize;
@property (nonatomic) struct CGSize { double x1; double x2; } bufferingIndicatorSize;
@property (nonatomic) bool canDisplayLoadingIndicators;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentGuideInsets;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contentSafeInsets;
@property (nonatomic) <PUOneUpTilingLayoutDelegate> *delegate;
@property (nonatomic) struct CGSize { double x1; double x2; } displaySizeForInsetMatching;
@property (nonatomic, readonly) NSIndexPath *indexPathOfCurrentItem;
@property (nonatomic) struct CGSize { double x1; double x2; } interpageSpacing;
@property (nonatomic, retain) PUParallaxComputer *parallaxComputer;
@property (nonatomic) struct CGSize { double x1; double x2; } playButtonSize;
@property (nonatomic) struct CGSize { double x1; double x2; } progressIndicatorSize;
@property (nonatomic) bool shouldPinContentToTop;
@property (nonatomic) long long tileInitialContentMode;
@property (nonatomic, retain) UITraitCollection *traitCollection;
@property (nonatomic, readonly) double transitionProgress;
@property (nonatomic) bool useAssetExplorerReviewScreenBadgeTiles;
@property (nonatomic) bool useBackgroundTile;
@property (nonatomic) bool useBadgeTiles;
@property (nonatomic) bool useImportStatusIndicatorTiles;
@property (nonatomic) bool useReviewScreenBars;
@property (nonatomic) bool useSelectionIndicatorTiles;
@property (nonatomic) bool useUserTransformTiles;
@property (nonatomic) bool useVerticalReviewScreenControlBarLayout;
@property (nonatomic) long long windowInterfaceOrientation;

+ (id)centerTileKinds;
+ (void)initialize;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })untransformedRectForItemWithAspectRatio:(double)arg1 pageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 safeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg3;

- (void).cxx_destruct;
- (bool)_accessoryViewVisibilityForItemAtIndexPath:(id)arg1;
- (struct CGPoint { double x1; double x2; })_contentOffsetForItemAtIndexPath:(id)arg1;
- (id)_createLayoutInfoForTileWithIndexPath:(id)arg1 kind:(id)arg2;
- (id)_displayTileTransformForItemAtIndexPath:(id)arg1 options:(unsigned long long)arg2;
- (id)_displayTileTransformForItemAtIndexPath:(id)arg1 pageSize:(struct CGSize { double x1; double x2; })arg2 secondaryDisplayTransform:(id)arg3 options:(unsigned long long)arg4;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_frameForTileWithSize:(struct CGSize { double x1; double x2; })arg1 centeredOnItemAtIndexPath:(id)arg2;
- (void)_getLayoutRect:(out struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1 transform:(out struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; }*)arg2 parallaxOffset:(out struct CGPoint { double x1; double x2; }*)arg3 forContentOfItemAtIndexPath:(id)arg4 options:(unsigned long long)arg5;
- (id)_indexPathOfItemClosestToAbscissa:(double)arg1;
- (void)_invalidateContentRelatedTilesWithIndexPath:(id)arg1 inContext:(id)arg2;
- (bool)_isVideoPlacholderVisibleForItemAtIndexPath:(id)arg1;
- (struct CGSize { double x1; double x2; })_itemSize;
- (double)_minimumBottomContentInsetsForItemAtIndexPath:(id)arg1;
- (double)_normalizedTransitionProgressFrom:(id)arg1 withAbscissa:(double)arg2 outNeighbor:(out id*)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_pageRectForItemAtIndexPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_untransformedRectForItemAtIndexPath:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_untransformedRectForItemAtIndexPath:(id)arg1 pageRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)addLayoutInfosForTilesInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 section:(long long)arg2 toSet:(id)arg3;
- (struct CGSize { double x1; double x2; })assetExplorerReviewScreenProgressIndicatorSize;
- (struct CGSize { double x1; double x2; })bufferingIndicatorSize;
- (bool)canDisplayLoadingIndicators;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentGuideInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contentSafeInsets;
- (id)delegate;
- (struct CGSize { double x1; double x2; })displaySizeForInsetMatching;
- (struct CGSize { double x1; double x2; })estimatedSectionSize;
- (id)indexPathOfCurrentItem;
- (id)init;
- (struct CGSize { double x1; double x2; })interpageSpacing;
- (void)invalidateAccessoryForItemAtIndexPath:(id)arg1 withOptions:(unsigned long long)arg2;
- (void)invalidateBadgeSizeForItemAtIndexPath:(id)arg1;
- (void)invalidateContentOffsetForItemAtIndexPath:(id)arg1 withOptions:(unsigned long long)arg2;
- (void)invalidateLayoutWithContext:(id)arg1;
- (void)invalidateLoadingIndicatorForItemAtIndexPath:(id)arg1;
- (void)invalidateModelTileTransformForItemAtIndexPath:(id)arg1;
- (void)invalidateProgressIndicatorForItemAtIndexPath:(id)arg1;
- (void)invalidateVideoPlaceholderForItemAtIndexPath:(id)arg1;
- (id)layoutInfoForTileWithIndexPath:(id)arg1 kind:(id)arg2;
- (id)parallaxComputer;
- (struct CGSize { double x1; double x2; })playButtonSize;
- (id)preferredScrollInfo;
- (void)prepareLayout;
- (struct CGSize { double x1; double x2; })progressIndicatorSize;
- (void)setAssetExplorerReviewScreenProgressIndicatorSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setBufferingIndicatorSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setCanDisplayLoadingIndicators:(bool)arg1;
- (void)setContentGuideInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContentSafeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplaySizeForInsetMatching:(struct CGSize { double x1; double x2; })arg1;
- (void)setInterpageSpacing:(struct CGSize { double x1; double x2; })arg1;
- (void)setParallaxComputer:(id)arg1;
- (void)setPlayButtonSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setProgressIndicatorSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setShouldPinContentToTop:(bool)arg1;
- (void)setTileInitialContentMode:(long long)arg1;
- (void)setTraitCollection:(id)arg1;
- (void)setUseAssetExplorerReviewScreenBadgeTiles:(bool)arg1;
- (void)setUseBackgroundTile:(bool)arg1;
- (void)setUseBadgeTiles:(bool)arg1;
- (void)setUseImportStatusIndicatorTiles:(bool)arg1;
- (void)setUseReviewScreenBars:(bool)arg1;
- (void)setUseSelectionIndicatorTiles:(bool)arg1;
- (void)setUseUserTransformTiles:(bool)arg1;
- (void)setUseVerticalReviewScreenControlBarLayout:(bool)arg1;
- (void)setVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setWindowInterfaceOrientation:(long long)arg1;
- (bool)shouldPinContentToTop;
- (struct CGSize { double x1; double x2; })sizeForSection:(long long)arg1 numberOfItems:(long long)arg2;
- (long long)tileInitialContentMode;
- (id)traitCollection;
- (double)transitionProgress;
- (bool)useAssetExplorerReviewScreenBadgeTiles;
- (bool)useBackgroundTile;
- (bool)useBadgeTiles;
- (bool)useImportStatusIndicatorTiles;
- (bool)useReviewScreenBars;
- (bool)useSelectionIndicatorTiles;
- (bool)useUserTransformTiles;
- (bool)useVerticalReviewScreenControlBarLayout;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectForItemAtIndexPath:(id)arg1 transitionProgress:(double)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRectForScrollingToItemAtIndexPath:(id)arg1 scrollPosition:(long long)arg2;
- (long long)windowInterfaceOrientation;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
