<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUScrubberView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUScrubberView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUScrubberView : UIView <PUBrowsingViewModelChangeObserver, PUPlaybackTimeIndicatorTileViewControllerDelegate, PUScrubberTilingLayoutDelegate, PUTilingViewScrollDelegate, PUTilingViewTileSource, PUTilingViewTileTransitionDelegate, PXVideoScrubberControllerDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate> {
    double  __decelerationDistance;
    NSIndexPath * __decelerationTargetIndexPath;
    struct CGPoint { 
        double x; 
        double y; 
    }  __decelerationTargetOffset;
    long long  __expandedItemType;
    bool  __isHandlingScrollViewWillEndDragging;
    bool  __isHandlingUserScroll;
    bool  __isScrubbingAwayFromContentEdge;
    long long  __layoutTransitionsDisabledCount;
    bool  __scrollViewSettled;
    PUScrubberTilingLayout * __scrubberLayout;
    double  __scrubbingTransitionProgress;
    bool  __snapToExpandedItem;
    UITapGestureRecognizer * __tapGestureRecognizer;
    bool  __thinLoupe;
    PUTilingView * __tilingView;
    bool  __useLoupe;
    bool  __useSmoothingTransitionCoordinator;
    PXVideoScrubberController * __videoScrubberController;
    NSMutableDictionary * _aspectRatioByIndexPath;
    PUBrowsingSession * _browsingSession;
    NSString * _contentScrubbingIdentifier;
    <PUScrubberViewDelegate> * _delegate;
    struct { 
        bool respondsToShouldIgnoreHitTestWithEvent; 
    }  _delegateFlags;
    bool  _isForPreview;
    bool  _loupeEffectIsValid;
    bool  _scrubberLayoutIsValid;
    bool  _scrubberLayoutNeedsTransition;
    NSString * _scrubbingIdentifier;
    bool  _snapToExpandedIsValid;
    PUTouchingGestureRecognizer * _touchingGestureRecognizer;
    NSString * _transitionLayoutIdentifier;
    long long  _type;
}

@property (setter=_setDecelerationDistance:, nonatomic) double _decelerationDistance;
@property (setter=_setDecelerationTargetIndexPath:, nonatomic, retain) NSIndexPath *_decelerationTargetIndexPath;
@property (setter=_setDecelerationTargetOffset:, nonatomic) struct CGPoint { double x1; double x2; } _decelerationTargetOffset;
@property (setter=_setExpandedItemType:, nonatomic) long long _expandedItemType;
@property (setter=_setHandlingScrollViewWillEndDragging:, nonatomic) bool _isHandlingScrollViewWillEndDragging;
@property (setter=_setIsHandlingUserScroll:, nonatomic) bool _isHandlingUserScroll;
@property (setter=_setScrubbingAwayFromContentEdge:, nonatomic) bool _isScrubbingAwayFromContentEdge;
@property (getter=_areLayoutTransitionsDisabled, nonatomic, readonly) bool _layoutTransitionsDisabled;
@property (setter=_setLayoutTransitionsDisabledCount:, nonatomic) long long _layoutTransitionsDisabledCount;
@property (setter=_setScrollViewSettled:, nonatomic) bool _scrollViewSettled;
@property (setter=_setScrubberLayout:, nonatomic, retain) PUScrubberTilingLayout *_scrubberLayout;
@property (setter=_setScrubbingTransitionProgress:, nonatomic) double _scrubbingTransitionProgress;
@property (setter=_setSnapToExpandedItem:, nonatomic) bool _snapToExpandedItem;
@property (nonatomic, readonly) UITapGestureRecognizer *_tapGestureRecognizer;
@property (setter=_setThinLoupe:, nonatomic) bool _thinLoupe;
@property (setter=_setTilingView:, nonatomic, retain) PUTilingView *_tilingView;
@property (setter=_setUseLoupe:, nonatomic) bool _useLoupe;
@property (setter=_setUseSmoothingTransitionCoordinator:, nonatomic) bool _useSmoothingTransitionCoordinator;
@property (setter=_setVideoScrubberController:, nonatomic, retain) PXVideoScrubberController *_videoScrubberController;
@property (nonatomic, retain) PUBrowsingSession *browsingSession;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PUScrubberViewDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) bool isForPreview;
@property (nonatomic, readonly) UIScrollView *scrollViewForPreviewing;
@property (readonly) Class superclass;
@property (nonatomic, readonly) double topOutset;
@property (nonatomic) long long type;

- (void).cxx_destruct;
- (bool)_allowExitFromContentScrubbing;
- (bool)_areLayoutTransitionsDisabled;
- (id)_currentAssetsDataSource;
- (double)_decelerationDistance;
- (id)_decelerationTargetIndexPath;
- (struct CGPoint { double x1; double x2; })_decelerationTargetOffset;
- (void)_disableLayoutTransitionsForDuration:(double)arg1;
- (void)_endScrubbing;
- (id)_expandedAssetReference;
- (long long)_expandedItemType;
- (double)_expandedItemWidth;
- (void)_handleTap:(id)arg1;
- (void)_handleTapOnBrowsingIrisPlayer:(id)arg1;
- (void)_handleTapOnBrowsingVideoPlayer:(id)arg1;
- (void)_handleUserScrollWillBegin:(bool)arg1;
- (void)_invalidateLoupeEffect;
- (void)_invalidateScrubberLayout;
- (void)_invalidateScrubberLayoutEnsureTransition;
- (void)_invalidateSnapToExpandedItem;
- (bool)_isContentScrubbing;
- (bool)_isDrivingPlayheadProgress;
- (bool)_isHandlingScrollViewWillEndDragging;
- (bool)_isHandlingUserScroll;
- (bool)_isLibraryScrubbing;
- (bool)_isScrubbingAwayFromContentEdge;
- (long long)_layoutTransitionsDisabledCount;
- (double)_lengthForDuration:(double)arg1;
- (id)_newScrubberLayout;
- (double)_playheadProgressForIrisAssetReference:(id)arg1;
- (void)_reenableLayoutTransitions;
- (bool)_scrollViewSettled;
- (id)_scrubberLayout;
- (double)_scrubbingTransitionProgress;
- (void)_setDecelerationDistance:(double)arg1;
- (void)_setDecelerationTargetIndexPath:(id)arg1;
- (void)_setDecelerationTargetOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setExpandedItemType:(long long)arg1;
- (void)_setHandlingScrollViewWillEndDragging:(bool)arg1;
- (void)_setIsHandlingUserScroll:(bool)arg1;
- (void)_setLayoutTransitionsDisabledCount:(long long)arg1;
- (void)_setNeedsUpdate;
- (void)_setScrollViewSettled:(bool)arg1;
- (void)_setScrubberLayout:(id)arg1;
- (void)_setScrubbingAwayFromContentEdge:(bool)arg1;
- (void)_setScrubbingTransitionProgress:(double)arg1;
- (void)_setSnapToExpandedItem:(bool)arg1;
- (void)_setThinLoupe:(bool)arg1;
- (void)_setTilingView:(id)arg1;
- (void)_setUseLoupe:(bool)arg1;
- (void)_setUseSmoothingTransitionCoordinator:(bool)arg1;
- (void)_setVideoScrubberController:(id)arg1;
- (bool)_snapToExpandedItem;
- (id)_tapGestureRecognizer;
- (bool)_thinLoupe;
- (id)_tilingView;
- (void)_updateLoupeEffectIfNeeded;
- (void)_updateScrollPositionAnimated:(bool)arg1;
- (void)_updateScrubberLayoutIfNeeded;
- (void)_updateScrubbingAwayFromContentEdgeBeganDragging:(bool)arg1;
- (void)_updateSnapToExpandedItemIfNeeded;
- (void)_updateTilingViewIfNeeded;
- (bool)_useLoupe;
- (bool)_useSmoothingTransitionCoordinator;
- (id)_videoScrubberController;
- (void)beginPreviewing;
- (id)browsingSession;
- (void)dealloc;
- (id)delegate;
- (void)endPreviewing;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (void)handleTouchGesture:(id)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isForPreview;
- (float)layout:(id)arg1 aspectRatioForItemAtIndexPath:(id)arg2;
- (bool)layout:(id)arg1 shouldShowTimeIndicatorForExpandedItemAtIndexPath:(id)arg2;
- (void)layoutSubviews;
- (bool)playbackTimeIndicatorTileViewControllerCanFlashIndicator:(id)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (id)scrollViewForPreviewing;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)setBrowsingSession:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setIsForPreview:(bool)arg1;
- (void)setType:(long long)arg1;
- (id)tilingView:(id)arg1 dataSourceConverterForTransitionFromLayout:(id)arg2 toLayout:(id)arg3;
- (struct CGPoint { double x1; double x2; })tilingView:(id)arg1 initialVisibleOriginWithLayout:(id)arg2;
- (struct CGPoint { double x1; double x2; })tilingView:(id)arg1 targetVisibleOriginForProposedVisibleOrigin:(struct CGPoint { double x1; double x2; })arg2 withLayout:(id)arg3;
- (id)tilingView:(id)arg1 tileControllerWithIndexPath:(id)arg2 kind:(id)arg3 dataSource:(id)arg4;
- (id)tilingView:(id)arg1 tileTransitionCoordinatorForChangeFromFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 toFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 duration:(double)arg4;
- (id)tilingView:(id)arg1 tileTransitionCoordinatorForLayoutInvalidationContext:(id)arg2;
- (id)tilingView:(id)arg1 tileTransitionCoordinatorForTransitionFromLayout:(id)arg2 toLayout:(id)arg3 withContext:(id)arg4;
- (double)topOutset;
- (long long)type;
- (void)updateIfNeeded;
- (void)videoScrubberController:(id)arg1 desiredSeekTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2;
- (double)videoScrubberController:(id)arg1 lengthForDuration:(double)arg2;
- (void)videoScrubberControllerDidUpdate:(id)arg1;
- (void)viewModel:(id)arg1 didChange:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
