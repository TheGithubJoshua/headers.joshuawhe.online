<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUAccessoryTileViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUAccessoryTileViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUAccessoryTileViewController : PUTileViewController <PUAccessoryContentViewControllerDelegate> {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __contentBounds;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  __contentInsets;
    long long  __contentInsetsChangeReason;
    UIView * __contentView;
    UIViewController<PUAccessoryContentViewController> * __contentViewController;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __keyboardFrame;
    UIViewController<PUAccessoryContentViewController> * __loadedContentViewController;
    double  __minimumVisibleHeight;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __untransformedMasterContentFrame;
    bool  __wasActiveOnLastMasterContentOffsetChange;
    PUAssetReference * _assetReference;
    PUAssetViewModel * _assetViewModel;
    <PUAccessoryTileViewControllerDelegate> * _delegate;
    struct { 
        bool respondsToViewHostingGestureRecognizers; 
        bool respondsToWillHideToolbarWhenShowingAccessoryView; 
    }  _delegateFlags;
    bool  _isPerformingChanges;
    bool  _isPerformingUpdates;
    bool  _isUpdateScheduled;
    struct { 
        bool contentViewController; 
        bool loadedContentViewController; 
        bool contentViewMetrics; 
        bool contentBounds; 
        bool masterContentOffset; 
    }  _needsUpdateFlags;
}

@property (setter=_setContentBounds:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _contentBounds;
@property (setter=_setContentInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _contentInsets;
@property (setter=_setContentInsetsChangeReason:, nonatomic) long long _contentInsetsChangeReason;
@property (setter=_setContentView:, nonatomic, retain) UIView *_contentView;
@property (setter=_setContentViewController:, nonatomic, retain) UIViewController<PUAccessoryContentViewController> *_contentViewController;
@property (setter=_setKeyboardFrame:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _keyboardFrame;
@property (setter=_setLoadedContentViewController:, nonatomic, retain) UIViewController<PUAccessoryContentViewController> *_loadedContentViewController;
@property (setter=_setMinimumVisibleHeight:, nonatomic) double _minimumVisibleHeight;
@property (setter=_setUntransformedMasterContentFrame:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _untransformedMasterContentFrame;
@property (setter=_setWasActiveOnLastMasterContentOffsetChange:, nonatomic) bool _wasActiveOnLastMasterContentOffsetChange;
@property (nonatomic, retain) PUAssetReference *assetReference;
@property (nonatomic, retain) PUAssetViewModel *assetViewModel;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PUAccessoryTileViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentBounds;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_contentInsets;
- (long long)_contentInsetsChangeReason;
- (id)_contentView;
- (id)_contentViewController;
- (void)_handleScheduledUpdate;
- (void)_invalidateContentBounds;
- (void)_invalidateContentViewController;
- (void)_invalidateContentViewMetrics;
- (void)_invalidateLoadedContentViewController;
- (void)_invalidateMasterContentOffset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_keyboardFrame;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (id)_loadedContentViewController;
- (double)_minimumVisibleHeight;
- (bool)_needsUpdate;
- (void)_performChanges:(id /* block */)arg1;
- (void)_setContentBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setContentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setContentInsetsChangeReason:(long long)arg1;
- (void)_setContentView:(id)arg1;
- (void)_setContentViewController:(id)arg1;
- (void)_setKeyboardFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setLoadedContentViewController:(id)arg1;
- (void)_setMinimumVisibleHeight:(double)arg1;
- (void)_setNeedsUpdate;
- (void)_setUntransformedMasterContentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setWasActiveOnLastMasterContentOffsetChange:(bool)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_untransformedMasterContentFrame;
- (void)_updateContentBoundsIfNeeded;
- (void)_updateContentViewControllerIfNeeded;
- (void)_updateContentViewMetricsIfNeeded;
- (void)_updateIfNeeded;
- (void)_updateLoadedContentViewControllerIfNeeded;
- (void)_updateMasterContentOffsetIfNeeded;
- (bool)_wasActiveOnLastMasterContentOffsetChange;
- (void)accessoryContentViewControllerContentBoundsDidChange:(id)arg1;
- (id)accessoryContentViewControllerViewHostingGestureRecognizers:(id)arg1;
- (void)applyLayoutInfo:(id)arg1;
- (id)assetReference;
- (id)assetViewModel;
- (void)becomeReusable;
- (void)dealloc;
- (id)delegate;
- (void)didChangeActive;
- (id)initWithReuseIdentifier:(id)arg1;
- (bool)isLocationFromProviderInContentArea:(id)arg1;
- (void)setAssetReference:(id)arg1;
- (void)setAssetViewModel:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)viewDidLoad;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
