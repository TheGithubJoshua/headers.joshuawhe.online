<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUFeedImageCell.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUFeedImageCell.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUFeedImageCell : PUFeedCell {
    UIImageView * __centerOverlayImageView;
    UIButton * __commentButton;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __imageFrame;
    long long  __imageTag;
    UIImageView * __imageView;
    UIView<PXVideoOverlayButton> * __overlayPlayButton;
    PUImageViewExtraction * __overlayPlayButtonBackgroundExtraction;
    UIImageView * __overlayPlayButtonBackgroundImageView;
    PXUIAssetBadgeView * __photoIrisBadgeView;
    bool  __shouldHideCenterOverlayImageView;
    bool  __shouldHideCommentButton;
    bool  __shouldHideOverlayPlayButton;
    bool  __shouldUpdateOverlayPlayButtonBackground;
    ISWrappedAVAudioSession * _audioSession;
    long long  _commentCount;
    double  _cornerRadius;
    UIImage * _image;
    long long  _imageAlignment;
    long long  _imageContentMode;
    bool  _imageHidden;
    UIImageView * _likeBadgeView;
    struct CGSize { 
        double width; 
        double height; 
    }  _maximumImageSize;
    long long  _overlayOptions;
    AVPlayerItem * _playerItem;
    int  _playerItemRequestID;
    PXRoundedCornerOverlayView * _roundedCornerOverlayView;
    bool  _shouldHideLikeBadge;
    ISWrappedAVPlayer * _videoPlayer;
    PXVideoPlayerView * _videoPlayerView;
}

@property (setter=_setCenterOverlayImageView:, nonatomic, retain) UIImageView *_centerOverlayImageView;
@property (setter=_setCommentButton:, nonatomic, retain) UIButton *_commentButton;
@property (setter=_setImageFrame:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _imageFrame;
@property (setter=_setImageTag:, nonatomic) long long _imageTag;
@property (setter=_setImageView:, nonatomic, retain) UIImageView *_imageView;
@property (setter=_setOverlayPlayButton:, nonatomic, retain) UIView<PXVideoOverlayButton> *_overlayPlayButton;
@property (setter=_setOverlayPlayButtonBackgroundExtraction:, nonatomic, retain) PUImageViewExtraction *_overlayPlayButtonBackgroundExtraction;
@property (setter=_setOverlayPlayButtonBackgroundImageView:, nonatomic, retain) UIImageView *_overlayPlayButtonBackgroundImageView;
@property (setter=_setPhotoIrisBadgeView:, nonatomic, retain) PXUIAssetBadgeView *_photoIrisBadgeView;
@property (setter=_setShouldHideCenterOverlayImageView:, nonatomic) bool _shouldHideCenterOverlayImageView;
@property (setter=_setShouldHideCommentButton:, nonatomic) bool _shouldHideCommentButton;
@property (setter=_setShouldHideOverlayPlayButton:, nonatomic) bool _shouldHideOverlayPlayButton;
@property (setter=_setShouldUpdateOverlayPlayButtonBackground:, nonatomic) bool _shouldUpdateOverlayPlayButtonBackground;
@property (nonatomic, readonly) ISWrappedAVAudioSession *audioSession;
@property (nonatomic) long long commentCount;
@property (nonatomic) double cornerRadius;
@property (nonatomic, retain) UIImage *image;
@property (nonatomic) long long imageAlignment;
@property (nonatomic) long long imageContentMode;
@property (getter=isImageHidden, nonatomic) bool imageHidden;
@property (nonatomic, retain) UIImageView *likeBadgeView;
@property (nonatomic) struct CGSize { double x1; double x2; } maximumImageSize;
@property (nonatomic) long long overlayOptions;
@property (nonatomic, retain) AVPlayerItem *playerItem;
@property (nonatomic) int playerItemRequestID;
@property (nonatomic, retain) PXRoundedCornerOverlayView *roundedCornerOverlayView;
@property (setter=setShouldHideLikeBadge:, nonatomic) bool shouldHideLikeBadge;
@property (nonatomic, readonly) ISWrappedAVPlayer *videoPlayer;
@property (nonatomic, readonly) PXVideoPlayerView *videoPlayerView;

+ (bool)_allowHighQualityVideoOverlayButton;
+ (Class)_contentViewClass;
+ (long long)_videoOverlayButtonStyle;
+ (void)preloadResources;

- (void).cxx_destruct;
- (id)_centerOverlayImageView;
- (id)_commentButton;
- (void)_handleCommentButton:(id)arg1;
- (void)_handlePlayButton:(id)arg1;
- (id)_imageCellDelegate;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_imageFrame;
- (long long)_imageTag;
- (id)_imageView;
- (void)_invalidateOverlayPlayButtonBackground;
- (void)_layoutImageView;
- (id)_overlayPlayButton;
- (id)_overlayPlayButtonBackgroundExtraction;
- (id)_overlayPlayButtonBackgroundImageView;
- (id)_photoIrisBadgeView;
- (void)_setCenterOverlayImageView:(id)arg1;
- (void)_setCommentButton:(id)arg1;
- (void)_setImageFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setImageTag:(long long)arg1;
- (void)_setImageView:(id)arg1;
- (void)_setOverlayPlayButton:(id)arg1;
- (void)_setOverlayPlayButtonBackgroundExtraction:(id)arg1;
- (void)_setOverlayPlayButtonBackgroundImageView:(id)arg1;
- (void)_setPhotoIrisBadgeView:(id)arg1;
- (void)_setShouldHideCenterOverlayImageView:(bool)arg1;
- (void)_setShouldHideCommentButton:(bool)arg1;
- (void)_setShouldHideOverlayPlayButton:(bool)arg1;
- (void)_setShouldUpdateOverlayPlayButtonBackground:(bool)arg1;
- (bool)_shouldHideCenterOverlayImageView;
- (bool)_shouldHideCommentButton;
- (bool)_shouldHideOverlayPlayButton;
- (bool)_shouldUpdateOverlayPlayButtonBackground;
- (void)_updateCommentButton;
- (void)_updateOverlays;
- (void)_updateRoundedCornersOverlayView;
- (void)_updateVideoPlayerContents;
- (void)_updateVideoViewContentMode;
- (id)audioSession;
- (long long)commentCount;
- (double)cornerRadius;
- (id)image;
- (long long)imageAlignment;
- (long long)imageContentMode;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isImageHidden;
- (void)layoutSubviews;
- (id)likeBadgeView;
- (struct CGSize { double x1; double x2; })maximumImageSize;
- (long long)overlayOptions;
- (id)playerItem;
- (int)playerItemRequestID;
- (void)prepareForReuse;
- (id)roundedCornerOverlayView;
- (void)setAudioSession:(id)arg1;
- (void)setCommentCount:(long long)arg1;
- (void)setCornerRadius:(double)arg1;
- (void)setImage:(id)arg1;
- (void)setImage:(id)arg1 withTag:(long long)arg2;
- (void)setImageAlignment:(long long)arg1;
- (void)setImageContentMode:(long long)arg1;
- (void)setImageHidden:(bool)arg1;
- (void)setLikeBadgeView:(id)arg1;
- (void)setMaximumImageSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setOverlayOptions:(long long)arg1;
- (void)setParallaxOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setPlayerItem:(id)arg1;
- (void)setPlayerItemRequestID:(int)arg1;
- (void)setRoundedCornerOverlayView:(id)arg1;
- (void)setShouldHideLikeBadge:(bool)arg1;
- (bool)shouldHideLikeBadge;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)videoPlayer;
- (id)videoPlayerView;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
