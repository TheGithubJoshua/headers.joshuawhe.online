<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUAggregateDictionaryBrowsingViewModelTracer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUAggregateDictionaryBrowsingViewModelTracer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUAggregateDictionaryBrowsingViewModelTracer : NSObject <PUBrowsingViewModelChangeObserver> {
    bool  __didScheduleCurrentAssetChange;
    bool  __didScheduleViewUpdate;
    bool  __isApplicationActive;
    bool  __isPerformingChanges;
    bool  __isPerformingUpdate;
    bool  __isPlayingStreamedVideo;
    bool  __isPlayingVideo;
    bool  __isStreamedVideoActuallyPlaying;
    bool  __isStreamedVideoStalled;
    bool  __needsUpdateOneUpSessionActive;
    bool  __needsUpdatePlayingVideo;
    bool  __needsUpdateViewedAsset;
    bool  __needsUpdateViewedAssetLongEnough;
    bool  __oneUpSessionActive;
    double  __oneUpSessionStartTime;
    <PUDisplayAsset> * __viewedAsset;
    bool  __viewedAssetLongEnough;
    double  __viewedAssetStartTime;
    NSHashTable * __viewingContexts;
    PXAssetAnalyzer * _assetAnalyzer;
    PUBrowsingViewModel * _browsingViewModel;
}

@property (setter=_setDidScheduleCurrentAssetChange:, nonatomic) bool _didScheduleCurrentAssetChange;
@property (setter=_setDidScheduleViewUpdate:, nonatomic) bool _didScheduleViewUpdate;
@property (setter=_setApplicationActive:, nonatomic) bool _isApplicationActive;
@property (setter=_setPerformingChanges:, nonatomic) bool _isPerformingChanges;
@property (setter=_setPerformingUpdate:, nonatomic) bool _isPerformingUpdate;
@property (setter=_setPlayingStreamedVideo:, nonatomic) bool _isPlayingStreamedVideo;
@property (setter=_setPlayingVideo:, nonatomic) bool _isPlayingVideo;
@property (setter=_setStreamedVideoActuallyPlaying:, nonatomic) bool _isStreamedVideoActuallyPlaying;
@property (setter=_setStreamedVideoStalled:, nonatomic) bool _isStreamedVideoStalled;
@property (setter=_setNeedsUpdateOneUpSessionActive:, nonatomic) bool _needsUpdateOneUpSessionActive;
@property (setter=_setNeedsUpdatePlayingVideo:, nonatomic) bool _needsUpdatePlayingVideo;
@property (setter=_setNeedsUpdateViewedAsset:, nonatomic) bool _needsUpdateViewedAsset;
@property (setter=_setNeedsUpdateViewedAssetLongEnough:, nonatomic) bool _needsUpdateViewedAssetLongEnough;
@property (setter=_setOneUpSessionActive:, nonatomic) bool _oneUpSessionActive;
@property (setter=_setOneUpSessionStartTime:, nonatomic) double _oneUpSessionStartTime;
@property (setter=_setViewedAsset:, nonatomic, retain) <PUDisplayAsset> *_viewedAsset;
@property (setter=_setViewedAssetLongEnough:, nonatomic) bool _viewedAssetLongEnough;
@property (setter=_setViewedAssetStartTime:, nonatomic) double _viewedAssetStartTime;
@property (nonatomic, readonly) NSHashTable *_viewingContexts;
@property (nonatomic, readonly) PUBrowsingViewModel *browsingViewModel;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_assertInsideChangeBlock;
- (bool)_didScheduleCurrentAssetChange;
- (bool)_didScheduleViewUpdate;
- (void)_handleScheduledCurrentAssetChange;
- (void)_handleScheduledViewUpdate;
- (void)_invalidateOneUpSessionActive;
- (void)_invalidatePlayingVideo;
- (void)_invalidateViewedAsset;
- (void)_invalidateViewedAssetLongEnough;
- (bool)_isApplicationActive;
- (bool)_isPerformingChanges;
- (bool)_isPerformingUpdate;
- (bool)_isPlayingStreamedVideo;
- (bool)_isPlayingVideo;
- (bool)_isStreamedVideoActuallyPlaying;
- (bool)_isStreamedVideoStalled;
- (bool)_needsUpdate;
- (bool)_needsUpdateOneUpSessionActive;
- (bool)_needsUpdatePlayingVideo;
- (bool)_needsUpdateViewedAsset;
- (bool)_needsUpdateViewedAssetLongEnough;
- (bool)_oneUpSessionActive;
- (double)_oneUpSessionStartTime;
- (void)_scheduleCurrentAssetChange;
- (void)_scheduleViewUpdate;
- (void)_setApplicationActive:(bool)arg1;
- (void)_setDidScheduleCurrentAssetChange:(bool)arg1;
- (void)_setDidScheduleViewUpdate:(bool)arg1;
- (void)_setNeedsUpdate;
- (void)_setNeedsUpdateOneUpSessionActive:(bool)arg1;
- (void)_setNeedsUpdatePlayingVideo:(bool)arg1;
- (void)_setNeedsUpdateViewedAsset:(bool)arg1;
- (void)_setNeedsUpdateViewedAssetLongEnough:(bool)arg1;
- (void)_setOneUpSessionActive:(bool)arg1;
- (void)_setOneUpSessionStartTime:(double)arg1;
- (void)_setPerformingChanges:(bool)arg1;
- (void)_setPerformingUpdate:(bool)arg1;
- (void)_setPlayingStreamedVideo:(bool)arg1;
- (void)_setPlayingVideo:(bool)arg1;
- (void)_setStreamedVideoActuallyPlaying:(bool)arg1;
- (void)_setStreamedVideoStalled:(bool)arg1;
- (void)_setViewedAsset:(id)arg1;
- (void)_setViewedAssetLongEnough:(bool)arg1;
- (void)_setViewedAssetStartTime:(double)arg1;
- (void)_updateIfNeeded;
- (void)_updateOneUpSessionActive;
- (void)_updatePlayingVideoIfNeeded;
- (void)_updateViewedAssetIfNeeded;
- (void)_updateViewedAssetLongEnoughIfNeeded;
- (id)_viewedAsset;
- (bool)_viewedAssetLongEnough;
- (double)_viewedAssetStartTime;
- (id)_viewingContexts;
- (void)addViewingContext:(id)arg1;
- (id)browsingViewModel;
- (void)dealloc;
- (id)init;
- (id)initWithBrowsingViewModel:(id)arg1;
- (void)performChanges:(id /* block */)arg1;
- (void)removeViewingContext:(id)arg1;
- (void)viewModel:(id)arg1 didChange:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
