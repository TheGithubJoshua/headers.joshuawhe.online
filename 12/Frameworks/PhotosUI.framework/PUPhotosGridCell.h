<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUPhotosGridCell.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUPhotosGridCell.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUPhotosGridCell : UICollectionViewCell {
    UIImageView * _cloudIconImageView;
    bool  _cloudIconVisible;
    int  _currentImageRequestID;
    long long  _dragState;
    bool  _draggable;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    }  _fillerEdgeInsets;
    UIView * _highlightOverlayView;
    PUPhotoView * _photoContentView;
    NSNumber * _progress;
    PUProgressIndicatorView * _progressIndicatorView;
    NSArray * _progressIndicatorViewConstraints;
    UIImageView * _selectionBadgeImageView;
    bool  _selectionBadgeVisible;
    UIView * _selectionOverlayView;
    PUPhotoView * _temporaryPhotoContentView;
    UIView * _transitionFillerView;
    bool  _transitionFillerViewEnabled;
    bool  _transitionIsAppearing;
}

@property (getter=isCloudIconVisible, nonatomic) bool cloudIconVisible;
@property (nonatomic) int currentImageRequestID;
@property (nonatomic) long long dragState;
@property (getter=isDraggable, nonatomic) bool draggable;
@property (nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } fillerEdgeInsets;
@property (getter=isHighlighted, nonatomic) bool highlighted;
@property (nonatomic, retain) PUPhotoView *photoContentView;
@property (nonatomic, retain) NSNumber *progress;
@property (getter=isSelectionBadgeVisible, nonatomic) bool selectionBadgeVisible;
@property (nonatomic, retain) PUPhotoView *temporaryPhotoContentView;
@property (nonatomic, readonly) UIView *transitionFillerView;
@property (nonatomic) bool transitionFillerViewEnabled;
@property (nonatomic) bool transitionIsAppearing;

+ (Class)_contentViewClass;

- (void).cxx_destruct;
- (bool)_disableRasterizeInAnimations;
- (void)_layoutTransitionFillerView;
- (void)_updateCloudIcon;
- (void)_updateContentViewClipsToBounds;
- (void)_updateHighlight;
- (void)_updateProgressImmediately:(bool)arg1;
- (void)_updateSelectionBadge;
- (void)_updateSubviewOrdering;
- (void)addTemporaryPhotoContentView;
- (void)applyLayoutAttributes:(id)arg1;
- (int)currentImageRequestID;
- (long long)dragState;
- (void)dragStateDidChange:(long long)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })fillerEdgeInsets;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isCloudIconVisible;
- (bool)isDraggable;
- (bool)isSelectionBadgeVisible;
- (void)layoutSubviews;
- (id)photoContentView;
- (void)prepareForReuse;
- (id)progress;
- (void)removeTemporaryPhotoContentView;
- (void)setCloudIconVisible:(bool)arg1;
- (void)setCurrentImageRequestID:(int)arg1;
- (void)setDragState:(long long)arg1;
- (void)setDraggable:(bool)arg1;
- (void)setFillerEdgeInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setPhotoContentView:(id)arg1;
- (void)setProgress:(id)arg1;
- (void)setProgress:(id)arg1 immediately:(bool)arg2;
- (void)setSelectionBadgeVisible:(bool)arg1;
- (void)setTemporaryPhotoContentView:(id)arg1;
- (void)setTemporaryPhotoImage:(id)arg1 with:(long long)arg2;
- (void)setTransitionFillerViewEnabled:(bool)arg1;
- (void)setTransitionIsAppearing:(bool)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)temporaryPhotoContentView;
- (id)transitionFillerView;
- (bool)transitionFillerViewEnabled;
- (bool)transitionIsAppearing;
- (void)updateConstraints;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
