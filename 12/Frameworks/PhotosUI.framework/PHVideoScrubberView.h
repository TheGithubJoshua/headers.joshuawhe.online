<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PHVideoScrubberView.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PHVideoScrubberView.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PHVideoScrubberView : UIView <PXVideoScrubberControllerDelegate, UIGestureRecognizerDelegate, UIScrollViewDelegate> {
    PUFilmstripView * __filmStripView;
    bool  __needsUpdateFilmStripView;
    bool  __needsUpdateVideoScrubberController;
    PUPlayheadView * __playheadView;
    UIScrollView * __scrollView;
    PXVideoScrubberController * __videoScrubberController;
    double  _estimatedDuration;
    UIImage * _placeholderThumbnail;
    AVPlayer * _player;
    unsigned long long  _previousPlayState;
}

@property (setter=_setFilmStripView:, nonatomic, retain) PUFilmstripView *_filmStripView;
@property (setter=_setNeedsUpdateFilmStripView:, nonatomic) bool _needsUpdateFilmStripView;
@property (setter=_setNeedsUpdateVideoScrubberController:, nonatomic) bool _needsUpdateVideoScrubberController;
@property (setter=_setPlayheadView:, nonatomic, retain) PUPlayheadView *_playheadView;
@property (setter=_setScrollView:, nonatomic, retain) UIScrollView *_scrollView;
@property (setter=_setVideoScrubberController:, nonatomic, retain) PXVideoScrubberController *_videoScrubberController;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic) double estimatedDuration;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) UIImage *placeholderThumbnail;
@property (nonatomic, retain) AVPlayer *player;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (id)_currentAVAsset;
- (id)_filmStripView;
- (void)_handleInteractionBegan;
- (void)_handleInteractionEndedAndTogglePlayState:(bool)arg1;
- (void)_handleLongPressGesture:(id)arg1;
- (void)_handleTapGesture:(id)arg1;
- (void)_handleTouchGesture:(id)arg1;
- (void)_invalidateFilmStripView;
- (void)_invalidateVideoScrubberController;
- (bool)_isUserInteractingWithScrollView;
- (double)_lengthForDuration:(double)arg1;
- (bool)_needsUpdate;
- (bool)_needsUpdateFilmStripView;
- (bool)_needsUpdateVideoScrubberController;
- (bool)_playerIsPlaying;
- (id)_playheadView;
- (id)_scrollView;
- (void)_setFilmStripView:(id)arg1;
- (void)_setNeedsUpdateFilmStripView:(bool)arg1;
- (void)_setNeedsUpdateVideoScrubberController:(bool)arg1;
- (void)_setPlayheadView:(id)arg1;
- (void)_setScrollView:(id)arg1;
- (void)_setVideoScrubberController:(id)arg1;
- (void)_updateFilmStripViewIfNeeded;
- (void)_updateIfNeeded;
- (void)_updatePlayheadFrame;
- (void)_updateScrollViewContentOffset;
- (void)_updateVideoscrubberControllerIfNeeded;
- (void)_updateVisibleRectOfFilmStripView;
- (id)_videoScrubberController;
- (void)dealloc;
- (double)estimatedDuration;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)layoutSubviews;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (id)placeholderThumbnail;
- (id)player;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidScroll:(id)arg1;
- (void)setEstimatedDuration:(double)arg1;
- (void)setPlaceholderThumbnail:(id)arg1;
- (void)setPlayer:(id)arg1;
- (double)videoScrubberController:(id)arg1 lengthForDuration:(double)arg2;
- (void)videoScrubberControllerDidUpdate:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
