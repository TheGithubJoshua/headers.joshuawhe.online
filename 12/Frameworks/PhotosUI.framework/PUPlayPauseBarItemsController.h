<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUPlayPauseBarItemsController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUPlayPauseBarItemsController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUPlayPauseBarItemsController : NSObject <PUBrowsingVideoPlayerChangeObserver, PUBrowsingViewModelChangeObserver> {
    ISWrappedAVPlayer * __avPlayer;
    NSHashTable * __changeObservers;
    PUPlayPauseBarItemsControllerChange * __currentChange;
    bool  __isPerformingChanges;
    bool  __isUpdating;
    bool  __needsUpdateAVPlayer;
    bool  __needsUpdateCurrentPlaybackTimeAndDuration;
    bool  __needsUpdatePlayPauseState;
    bool  __needsUpdateVideoPlayer;
    NSObject<OS_dispatch_queue> * __observerQueue;
    id  __timeObservationToken;
    PUBrowsingVideoPlayer * __videoPlayer;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentPlaybackTime;
    long long  _playPauseState;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _playbackDuration;
    PUBrowsingViewModel * _viewModel;
}

@property (setter=_setAVPlayer:, nonatomic, retain) ISWrappedAVPlayer *_avPlayer;
@property (nonatomic, readonly) NSHashTable *_changeObservers;
@property (nonatomic, readonly) PUPlayPauseBarItemsControllerChange *_currentChange;
@property (setter=_setPerformingChanges:, nonatomic) bool _isPerformingChanges;
@property (setter=_setUpdating:, nonatomic) bool _isUpdating;
@property (setter=_setNeedsUpdateAVPlayer:, nonatomic) bool _needsUpdateAVPlayer;
@property (setter=_setNeedsUpdateCurrentPlaybackTimeAndDuration:, nonatomic) bool _needsUpdateCurrentPlaybackTimeAndDuration;
@property (setter=_setNeedsUpdatePlayPauseState:, nonatomic) bool _needsUpdatePlayPauseState;
@property (setter=_setNeedsUpdateVideoPlayer:, nonatomic) bool _needsUpdateVideoPlayer;
@property (nonatomic, readonly) NSObject<OS_dispatch_queue> *_observerQueue;
@property (setter=_setTimeObservationToken:, nonatomic, retain) id _timeObservationToken;
@property (setter=_setVideoPlayer:, nonatomic, retain) PUBrowsingVideoPlayer *_videoPlayer;
@property (setter=_setCurrentPlaybackTime:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } currentPlaybackTime;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (setter=_setPlayPauseState:, nonatomic) long long playPauseState;
@property (setter=_setPlaybackDuration:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } playbackDuration;
@property (readonly) Class superclass;
@property (nonatomic, retain) PUBrowsingViewModel *viewModel;

- (void).cxx_destruct;
- (void)_assertInsideChangeBlock;
- (void)_assertInsideUpdate;
- (id)_avPlayer;
- (id)_changeObservers;
- (id)_currentChange;
- (void)_handleVideoPlayer:(id)arg1 didChange:(id)arg2;
- (void)_handleViewModel:(id)arg1 didChange:(id)arg2;
- (void)_invalidateAVPlayer;
- (void)_invalidateCurrentPlaybackTimeAndDuration;
- (void)_invalidatePlayPauseState;
- (void)_invalidateVideoPlayer;
- (bool)_isPerformingChanges;
- (bool)_isUpdating;
- (bool)_needsUpdate;
- (bool)_needsUpdateAVPlayer;
- (bool)_needsUpdateCurrentPlaybackTimeAndDuration;
- (bool)_needsUpdatePlayPauseState;
- (bool)_needsUpdateVideoPlayer;
- (id)_observerQueue;
- (void)_performChanges:(id /* block */)arg1;
- (void)_publishChanges;
- (void)_setAVPlayer:(id)arg1;
- (void)_setCurrentPlaybackTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setNeedsUpdate;
- (void)_setNeedsUpdateAVPlayer:(bool)arg1;
- (void)_setNeedsUpdateCurrentPlaybackTimeAndDuration:(bool)arg1;
- (void)_setNeedsUpdatePlayPauseState:(bool)arg1;
- (void)_setNeedsUpdateVideoPlayer:(bool)arg1;
- (void)_setPerformingChanges:(bool)arg1;
- (void)_setPlayPauseState:(long long)arg1;
- (void)_setPlaybackDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_setTimeObservationToken:(id)arg1;
- (void)_setUpdating:(bool)arg1;
- (void)_setVideoPlayer:(id)arg1;
- (void)_startObservingAVPlayer;
- (void)_stopObservingAVPlayer;
- (id)_timeObservationToken;
- (void)_updateAVPlayerIfNeeded;
- (void)_updateCurrentPlaybackTimeAndDurationIfNeeded;
- (void)_updateIfNeeded;
- (void)_updatePlayPauseStateIfNeeded;
- (void)_updateVideoPlayerIfNeeded;
- (id)_videoPlayer;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentPlaybackTime;
- (id)init;
- (long long)playPauseState;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })playbackDuration;
- (void)registerChangeObserver:(id)arg1;
- (void)setViewModel:(id)arg1;
- (void)unregisterChangeObserver:(id)arg1;
- (id)viewModel;
- (void)viewModel:(id)arg1 didChange:(id)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
