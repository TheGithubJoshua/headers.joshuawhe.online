<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PULivePhotoTrimScrubber.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PULivePhotoTrimScrubber.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PULivePhotoTrimScrubber : UIView <UIGestureRecognizerDelegate> {
    double  __contentAspectRatio;
    bool  __photoLoupeHidden;
    long long  __trackingElement;
    bool  __trimControlsHidden;
    AVAsset * _asset;
    bool  _canEditKeyTime;
    long long  _changeDepth;
    <PULivePhotoTrimScrubberDelegate> * _delegate;
    struct { 
        bool respondsToDidBeginInteractivelyEditingElement; 
        bool respondsToCanBeginInteractivelyEditingElement; 
        bool respondsToDidEndInteractivelyEditingElement; 
        bool respondsToDidChangeTimeForElement; 
        bool respondsToAssetDurationDidChange; 
        bool respondsToDidChangeLoupeRect; 
    }  _delegateFlags;
    PUFilmstripView * _filmstripView;
    bool  _hasPresentedControls;
    double  _horizontalInset;
    UIImpactFeedbackGenerator * _impactGenerator;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _keyTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _minimumTrimLength;
    UIPanGestureRecognizer * _panGesture;
    PULivePhotoTrimScrubberLoupeView * _photoLoupe;
    long long  _photoLoupeHideRequestCounter;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _photoTrimBuffer;
    UIView * _postTrimOverlayView;
    UIView * _preTrimOverlayView;
    NSArray * _snapKeyTimes;
    NSArray * _snappingControllers;
    UITapGestureRecognizer * _tapGesture;
    long long  _trimControlsHideRequestCounter;
    UIImageView * _trimEndHandle;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _trimEndTime;
    UIImageView * _trimStartHandle;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _trimStartTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _untrimmedDuration;
    AVVideoComposition * _videoComposition;
}

@property (setter=_setContentAspectRatio:, nonatomic) double _contentAspectRatio;
@property (getter=_isPhotoLoupeHidden, setter=_setPhotoLoupeHidden:, nonatomic) bool _photoLoupeHidden;
@property (setter=_setTrackingElement:, nonatomic) long long _trackingElement;
@property (getter=_areTrimControlsHidden, setter=_setTrimControlsHidden:, nonatomic) bool _trimControlsHidden;
@property (nonatomic, copy) AVAsset *asset;
@property (getter=isAssetDurationLoaded, nonatomic, readonly) bool assetDurationLoaded;
@property (nonatomic) bool canEditKeyTime;
@property (nonatomic, readonly) long long currentlyInteractingElement;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <PULivePhotoTrimScrubberDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) double horizontalInset;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } keyTime;
@property (nonatomic, readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } loupeRect;
@property (nonatomic, retain) UIImage *placeholderImage;
@property (nonatomic, copy) NSArray *snapKeyTimes;
@property (readonly) Class superclass;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } trimEndTime;
@property (nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } trimStartTime;
@property (nonatomic, readonly) long long trimStatus;
@property (setter=_setUntrimmedDuration:, nonatomic) struct { long long x1; int x2; unsigned int x3; long long x4; } untrimmedDuration;
@property (nonatomic, copy) AVVideoComposition *videoComposition;
@property (nonatomic, retain) ISWrappedAVPlayer *videoPlayer;

- (void).cxx_destruct;
- (void)_PULivePhotoTrimScrubber_commonInit;
- (bool)_areTrimControlsHidden;
- (void)_assetDidLoadValues;
- (double)_contentAspectRatio;
- (void)_handleBeginPanGesture:(id)arg1;
- (void)_handleChangePanGesture:(id)arg1;
- (void)_handleEndPanGesture:(bool)arg1;
- (void)_handlePan:(id)arg1;
- (void)_handleTap:(id)arg1;
- (bool)_isPhotoLoupeHidden;
- (double)_offsetForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)_presentControlsIfNeeded;
- (void)_setContentAspectRatio:(double)arg1;
- (void)_setPhotoLoupeHidden:(bool)arg1;
- (void)_setPhotoLoupeHidden:(bool)arg1 animated:(bool)arg2;
- (void)_setPhotoLoupeHidden:(bool)arg1 animated:(bool)arg2 afterDelay:(double)arg3;
- (void)_setPhotoLoupeHidden:(bool)arg1 animated:(bool)arg2 withRequstID:(long long)arg3;
- (void)_setTrackingElement:(long long)arg1;
- (void)_setTrimControlsHidden:(bool)arg1;
- (void)_setTrimControlsHidden:(bool)arg1 animated:(bool)arg2;
- (void)_setTrimControlsHidden:(bool)arg1 animated:(bool)arg2 afterDelay:(double)arg3;
- (void)_setTrimControlsHidden:(bool)arg1 animated:(bool)arg2 withRequstID:(long long)arg3;
- (void)_setUntrimmedDuration:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })_timeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)_trackingElement;
- (void)_trimHandleDidReachBounds;
- (void)_updateContentAspectRatio;
- (void)_updateSnappingControllers;
- (id)asset;
- (bool)canEditKeyTime;
- (long long)currentlyInteractingElement;
- (id)delegate;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (double)horizontalInset;
- (double)horizontalOffsetForTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAssetDurationLoaded;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })keyTime;
- (void)layoutSubviews;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })loupeRect;
- (void)performAnimatedChanges:(id /* block */)arg1;
- (id)placeholderImage;
- (void)reloadThumbnails;
- (void)setAsset:(id)arg1;
- (void)setCanEditKeyTime:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHorizontalInset:(double)arg1;
- (void)setKeyTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setPlaceholderImage:(id)arg1;
- (void)setSnapKeyTimes:(id)arg1;
- (void)setTrimEndTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setTrimStartTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setVideoComposition:(id)arg1;
- (void)setVideoPlayer:(id)arg1;
- (id)snapKeyTimes;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })timeForElement:(long long)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trimEndTime;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })trimStartTime;
- (long long)trimStatus;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })untrimmedDuration;
- (id)videoComposition;
- (id)videoPlayer;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
