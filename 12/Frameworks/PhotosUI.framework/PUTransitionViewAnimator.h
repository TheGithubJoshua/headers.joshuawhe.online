<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>PUTransitionViewAnimator.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/PhotosUI.framework/PUTransitionViewAnimator.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI (1)
 */

@interface PUTransitionViewAnimator : NSObject {
    CADisplayLink * __autoUpdateDisplayLink;
    double  __currentRotation;
    double  __currentScale;
    double  __currentSizeMixFactor;
    double  __desiredRotation;
    double  __desiredScale;
    double  __desiredSizeMixFactor;
    struct CGPoint { 
        double x; 
        double y; 
    }  __desiredTranslation;
    bool  __isAutoUpdating;
    bool  __isEnding;
    PUValueFilter * __progressFilter;
    PUValueFilter * __rampUpFilter;
    PUValueFilter * __shouldFinishFilter;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  __targetAspectRatioSourceFrame;
    double  __targetScale;
    struct CGPoint { 
        double x; 
        double y; 
    }  _anchorPoint;
    bool  _appliesScaleViaTransform;
    bool  _autoUpdates;
    struct CGPoint { 
        double x; 
        double y; 
    }  _currentTranslation;
    <PUTransitionViewAnimatorDelegate> * _delegate;
    struct { 
        unsigned int respondsToDidUpdate : 1; 
        unsigned int respondsToWillEnd : 1; 
        unsigned int respondsToDidEnd : 1; 
    }  _delegateFlags;
    unsigned long long  _direction;
    double  _progress;
    double  _rampUpDuration;
    bool  _shouldFinish;
    bool  _shouldUseTargetAspectRatio;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _sourceFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    }  _targetFrame;
    double  _unfilteredProgress;
    UIView * _view;
}

@property (setter=_setAutoUpdateDisplayLink:, nonatomic, retain) CADisplayLink *_autoUpdateDisplayLink;
@property (setter=_setCurrentRotation:, nonatomic) double _currentRotation;
@property (setter=_setCurrentScale:, nonatomic) double _currentScale;
@property (setter=_setCurrentSizeMixFactor:, nonatomic) double _currentSizeMixFactor;
@property (setter=_setDesiredRotation:, nonatomic) double _desiredRotation;
@property (setter=_setDesiredScale:, nonatomic) double _desiredScale;
@property (setter=_setDesiredSizeMixFactor:, nonatomic) double _desiredSizeMixFactor;
@property (setter=_setDesiredTranslation:, nonatomic) struct CGPoint { double x1; double x2; } _desiredTranslation;
@property (setter=_setAutoUpdating:, nonatomic) bool _isAutoUpdating;
@property (setter=_setEnding:, nonatomic) bool _isEnding;
@property (setter=_setProgressFilter:, nonatomic, retain) PUValueFilter *_progressFilter;
@property (setter=_setRampUpFilter:, nonatomic, retain) PUValueFilter *_rampUpFilter;
@property (setter=_setShouldFinishFilter:, nonatomic, retain) PUValueFilter *_shouldFinishFilter;
@property (setter=_setTargetAspectRatioSourceFrame:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _targetAspectRatioSourceFrame;
@property (setter=_setTargetScale:, nonatomic) double _targetScale;
@property (setter=_setAnchorPoint:, nonatomic) struct CGPoint { double x1; double x2; } anchorPoint;
@property (nonatomic) bool appliesScaleViaTransform;
@property (nonatomic) bool autoUpdates;
@property (setter=_setCurrentTranslation:, nonatomic) struct CGPoint { double x1; double x2; } currentTranslation;
@property (nonatomic) <PUTransitionViewAnimatorDelegate> *delegate;
@property (setter=_setDirection:, nonatomic) unsigned long long direction;
@property (setter=_setProgress:, nonatomic) double progress;
@property (setter=_setRampUpDuration:, nonatomic) double rampUpDuration;
@property (setter=_setShouldFinish:, nonatomic) bool shouldFinish;
@property (setter=_setShouldUseTargetAspectRatio:, nonatomic) bool shouldUseTargetAspectRatio;
@property (setter=_setSourceFrame:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } sourceFrame;
@property (setter=_setTargetFrame:, nonatomic) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } targetFrame;
@property (setter=_setUnfilteredProgress:, nonatomic) double unfilteredProgress;
@property (setter=_setView:, nonatomic, retain) UIView *view;

- (void).cxx_destruct;
- (void)_autoUpdate:(id)arg1;
- (id)_autoUpdateDisplayLink;
- (double)_currentRotation;
- (double)_currentScale;
- (double)_currentSizeMixFactor;
- (double)_desiredRotation;
- (double)_desiredScale;
- (double)_desiredSizeMixFactor;
- (struct CGPoint { double x1; double x2; })_desiredTranslation;
- (void)_endWithTranslationVelocity:(struct CGPoint { double x1; double x2; })arg1 rotationVelocity:(double)arg2 scaleVelocity:(double)arg3 shouldBounce:(bool)arg4 finish:(bool)arg5 animated:(bool)arg6;
- (bool)_isAutoUpdating;
- (bool)_isEnding;
- (id)_progressFilter;
- (id)_rampUpFilter;
- (void)_setAnchorPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setAutoUpdateDisplayLink:(id)arg1;
- (void)_setAutoUpdating:(bool)arg1;
- (void)_setCurrentRotation:(double)arg1;
- (void)_setCurrentScale:(double)arg1;
- (void)_setCurrentSizeMixFactor:(double)arg1;
- (void)_setCurrentTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setDesiredRotation:(double)arg1;
- (void)_setDesiredScale:(double)arg1;
- (void)_setDesiredSizeMixFactor:(double)arg1;
- (void)_setDesiredTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setDirection:(unsigned long long)arg1;
- (void)_setEnding:(bool)arg1;
- (void)_setProgress:(double)arg1;
- (void)_setProgressFilter:(id)arg1;
- (void)_setRampUpDuration:(double)arg1;
- (void)_setRampUpFilter:(id)arg1;
- (void)_setShouldFinish:(bool)arg1;
- (void)_setShouldFinishFilter:(id)arg1;
- (void)_setShouldUseTargetAspectRatio:(bool)arg1;
- (void)_setSourceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setTargetAspectRatioSourceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setTargetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_setTargetScale:(double)arg1;
- (void)_setUnfilteredProgress:(double)arg1;
- (void)_setView:(id)arg1;
- (id)_shouldFinishFilter;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_targetAspectRatioSourceFrame;
- (double)_targetScale;
- (void)_update;
- (void)_updateAutoUpdateDisplayLink;
- (struct CGPoint { double x1; double x2; })anchorPoint;
- (bool)appliesScaleViaTransform;
- (bool)autoUpdates;
- (void)cancelWithTranslationVelocity:(struct CGPoint { double x1; double x2; })arg1 rotationVelocity:(double)arg2 scaleVelocity:(double)arg3 shouldBounce:(bool)arg4;
- (void)cancelWithoutAnimation;
- (struct CGPoint { double x1; double x2; })currentTranslation;
- (id)delegate;
- (unsigned long long)direction;
- (void)finishWithTranslationVelocity:(struct CGPoint { double x1; double x2; })arg1 rotationVelocity:(double)arg2 scaleVelocity:(double)arg3 shouldBounce:(bool)arg4;
- (id)initWithView:(id)arg1 sourceFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 targetFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 anchorPoint:(struct CGPoint { double x1; double x2; })arg4 shouldUseTargetAspectRatio:(bool)arg5 rampUpDuration:(double)arg6 direction:(unsigned long long)arg7;
- (double)progress;
- (double)rampUpDuration;
- (void)setAppliesScaleViaTransform:(bool)arg1;
- (void)setAutoUpdates:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (bool)shouldFinish;
- (bool)shouldUseTargetAspectRatio;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })sourceFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetFrame;
- (double)unfilteredProgress;
- (void)updateWithTranslation:(struct CGPoint { double x1; double x2; })arg1 rotation:(double)arg2 scale:(double)arg3;
- (id)view;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
