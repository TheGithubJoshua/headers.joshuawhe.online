<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>GCMotion.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/GameController.framework/GCMotion.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/GameController.framework/GameController (1)
 */

@interface GCMotion : NSObject {
    struct GCQuaternion { 
        double x; 
        double y; 
        double z; 
        double w; 
    }  _attitude;
    bool  _compassEnabled;
    GCController * _controller;
    bool  _emulatedMotionEnabled;
    struct { 
        double pitch; 
        double yaw; 
        double roll; 
    }  _eulerAngles;
    struct { 
        double x; 
        double y; 
        double z; 
    }  _gravity;
    id /* block */  _internalValueChangedHandler;
    bool  _linkedOnOrAfterCompassFeature;
    bool  _motionLite;
    CMMotionManager * _motionMgr;
    bool  _motionUpdatedEnabled;
    bool  _paused;
    struct GCQuaternion { 
        double x; 
        double y; 
        double z; 
        double w; 
    }  _prevAttitude;
    struct { 
        double pitch; 
        double yaw; 
        double roll; 
    }  _prevEulerAngles;
    struct { 
        double x; 
        double y; 
        double z; 
    }  _prevGravity;
    struct { 
        double x; 
        double y; 
        double z; 
    }  _rotationRate;
    float  _tilt;
    float  _tip;
    struct { 
        double x; 
        double y; 
        double z; 
    }  _userAcceleration;
    id /* block */  _valueChangedHandler;
}

@property (nonatomic, readonly) struct GCQuaternion { double x1; double x2; double x3; double x4; } attitude;
@property (nonatomic, readonly) GCController *controller;
@property (nonatomic, readonly) struct { double x1; double x2; double x3; } gravity;
@property (nonatomic, readonly) bool hasAttitudeAndRotationRate;
@property (nonatomic, readonly) struct { double x1; double x2; double x3; } rotationRate;
@property (nonatomic, readonly) struct { double x1; double x2; double x3; } userAcceleration;
@property (nonatomic, copy) id /* block */ valueChangedHandler;

- (void).cxx_destruct;
- (bool)_isUpdatingDeviceMotion;
- (void)_pauseMotionUpdates:(bool)arg1;
- (void)_setAttitude:(struct GCQuaternion { double x1; double x2; double x3; double x4; })arg1;
- (void)_setCompassEnabled:(bool)arg1;
- (void)_setGravity:(struct { double x1; double x2; double x3; })arg1;
- (void)_setMotionLite:(bool)arg1;
- (void)_setRotationRate:(struct { double x1; double x2; double x3; })arg1;
- (void)_setUserAcceleration:(struct { double x1; double x2; double x3; })arg1;
- (void)_startDeviceMotionUpdates;
- (void)_stopDeviceMotionUpdates;
- (float)_tilt;
- (float)_tip;
- (struct GCQuaternion { double x1; double x2; double x3; double x4; })attitude;
- (id)controller;
- (struct { double x1; double x2; double x3; })gravity;
- (bool)hasAttitudeAndRotationRate;
- (id)initWithController:(id)arg1;
- (id /* block */)internalValueChangedHandler;
- (bool)isEmulatedMicroGamepad;
- (struct { double x1; double x2; double x3; })rotationRate;
- (void)setInternalValueChangedHandler:(id /* block */)arg1;
- (void)setValueChangedHandler:(id /* block */)arg1;
- (struct { double x1; double x2; double x3; })userAcceleration;
- (id /* block */)valueChangedHandler;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
