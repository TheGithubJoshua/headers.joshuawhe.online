<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>_GCControllerManager.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/GameController.framework/_GCControllerManager.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/GameController.framework/GameController (1)
 */

@interface _GCControllerManager : NSObject <GameControllerClientProtocol> {
    NSXPCConnection * _connection;
    NSMutableDictionary * _controllersByRegistryID;
    NSMutableDictionary * _controllersByUDID;
    NSObject<OS_dispatch_queue> * _controllersQueue;
    long long  _currentMediaRemoteInputMode;
    NSThread * _hidInputThread;
    struct __CFRunLoop { } * _hidInputThreadRunLoop;
    struct __IOHIDManager { } * _hidManager;
    struct __IOHIDEventSystemClient { } * _hidSystemClient;
    NSObject<OS_dispatch_queue> * _hidSystemClientQueue;
    NSMutableArray * _hidThreadExecutionBlocks;
    struct __CFRunLoopSource { } * _hidThreadRunLoopSource;
    bool  _idleTimerNeedsReset;
    NSTimer * _idleWatchTimer;
    bool  _isAppInBackground;
    id /* block */  _logger;
    <GameControllerDaemon> * _remote;
    id /* block */  _requestConnectedHostsCallback;
    bool  _shouldKeepRunning;
    unsigned int  _usbAddedIterator;
    struct IONotificationPort { } * _usbNotify;
    unsigned int  _usbRemovedIterator;
}

@property (nonatomic, retain) NSXPCConnection *connection;
@property (nonatomic, readonly, retain) NSObject<OS_dispatch_queue> *controllersQueue;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly, retain) NSThread *hidInputThread;
@property (nonatomic, readonly) struct __CFRunLoop { }*hidInputThreadRunLoop;
@property (nonatomic) struct __IOHIDManager { }*hidManager;
@property (nonatomic, readonly) NSMutableArray *hidThreadExecutionBlocks;
@property (nonatomic, readonly) struct __CFRunLoopSource { }*hidThreadRunLoopSource;
@property (nonatomic) bool idleTimerNeedsReset;
@property (nonatomic, readonly) bool isAppInBackground;
@property (nonatomic, copy) id /* block */ logger;
@property (nonatomic, retain) <GameControllerDaemon> *remote;
@property (readonly) Class superclass;

- (void).cxx_destruct;
- (void)CBApplicationDidBecomeActive;
- (void)CBApplicationWillResignActive;
- (void)addConnectedDevices;
- (void)addController:(id)arg1;
- (void)addControllerWithServiceRef:(struct __IOHIDServiceClient { }*)arg1;
- (void)async_HIDBlock:(id /* block */)arg1;
- (id)connection;
- (void)controller:(id)arg1 setValue:(float)arg2 forElement:(int)arg3;
- (void)controllerWithUDID:(unsigned long long)arg1 setData:(id)arg2;
- (void)controllerWithUDID:(unsigned long long)arg1 setValue0:(float)arg2 setValue1:(float)arg3 setValue2:(float)arg4 setValue3:(float)arg5 forElement:(int)arg6;
- (void)controllerWithUDID:(unsigned long long)arg1 setValue:(float)arg2 forElement:(int)arg3;
- (id)controllers;
- (id)controllersQueue;
- (void)dealloc;
- (id)firstMicroGamepad;
- (id)hidInputThread;
- (struct __CFRunLoop { }*)hidInputThreadRunLoop;
- (struct __IOHIDManager { }*)hidManager;
- (id)hidThreadExecutionBlocks;
- (struct __CFRunLoopSource { }*)hidThreadRunLoopSource;
- (bool)idleTimerNeedsReset;
- (id)init;
- (bool)isAppInBackground;
- (bool)isExistingController:(id)arg1;
- (bool)isPhysicalB239:(id)arg1;
- (void)launchHIDInputThread;
- (id /* block */)logger;
- (void)microControllerWithDigitizerX:(float)arg1 withY:(float)arg2 withTimeStamp:(unsigned long long)arg3 touchDown:(bool)arg4;
- (void)microControllerWithUDID:(unsigned long long)arg1 setDigitizerX:(float)arg2 digitizerY:(float)arg3 withTimeStamp:(unsigned long long)arg4 touchDown:(bool)arg5;
- (void)open;
- (id)remote;
- (void)removeController:(id)arg1;
- (void)removeControllerWithServiceRef:(struct __IOHIDServiceClient { }*)arg1;
- (void)replyConnectedHosts:(id)arg1;
- (void)requestConnectedHostsWithHandler:(id /* block */)arg1;
- (void)setConnection:(id)arg1;
- (void)setHidManager:(struct __IOHIDManager { }*)arg1;
- (void)setIdleTimerNeedsReset:(bool)arg1;
- (void)setLogger:(id /* block */)arg1;
- (void)setRemote:(id)arg1;
- (void)startHIDDeviceMonitor;
- (void)startHIDEventMonitor;
- (void)startIdleWatchTimer;
- (void)stopHIDDeviceMonitor;
- (void)stopHIDEventMonitor;
- (void)threadHIDInputOffMain:(id)arg1;
- (void)threadHIDInputOnMain:(id)arg1;
- (void)updateControllerWithEvent:(struct __IOHIDEvent { struct __CFRuntimeBase { unsigned long long x_1_1_1; _Atomic unsigned long long x_1_1_2; } x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; unsigned int x5; char *x6; void *x7; void *x8; struct __CFArray {} *x9; struct __IOHIDEvent {} *x10; long long x11; long long x12; struct IOHIDEventData { unsigned int x_13_1_1; unsigned int x_13_1_2; unsigned int x_13_1_3; unsigned char x_13_1_4; unsigned char x_13_1_5[3]; } x13[0]; }*)arg1;
- (void)updateIdleTimer:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
