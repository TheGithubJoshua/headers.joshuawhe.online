<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSScanner.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSScanner.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSScanner : NSObject <NSCopying>

@property bool caseSensitive;
@property (copy) NSCharacterSet *charactersToBeSkipped;
@property (retain) id locale;
@property unsigned long long scanLocation;
@property (readonly, copy) NSString *string;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)localizedScannerWithString:(id)arg1;
+ (id)scannerWithString:(id)arg1;

- (id)_invertedSkipSet;
- (id)_remainingString;
- (bool)_scanDecimal:(unsigned long long)arg1 into:(long long*)arg2;
- (bool)caseSensitive;
- (id)charactersToBeSkipped;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)initWithString:(id)arg1;
- (bool)isAtEnd;
- (id)locale;
- (bool)scanCharactersFromSet:(id)arg1 intoString:(id*)arg2;
- (bool)scanDecimal:(struct { unsigned int x1 : 8; unsigned int x2 : 4; unsigned int x3 : 1; unsigned int x4 : 1; unsigned int x5 : 18; unsigned short x6[8]; }*)arg1;
- (bool)scanDouble:(double*)arg1;
- (bool)scanFloat:(float*)arg1;
- (bool)scanHexDouble:(double*)arg1;
- (bool)scanHexFloat:(float*)arg1;
- (bool)scanHexInt:(unsigned int*)arg1;
- (bool)scanHexLongLong:(unsigned long long*)arg1;
- (bool)scanInt:(int*)arg1;
- (bool)scanInteger:(long long*)arg1;
- (unsigned long long)scanLocation;
- (bool)scanLongLong:(long long*)arg1;
- (bool)scanString:(id)arg1 intoString:(id*)arg2;
- (bool)scanUnsignedInteger:(unsigned long long*)arg1;
- (bool)scanUnsignedLongLong:(unsigned long long*)arg1;
- (bool)scanUpToCharactersFromSet:(id)arg1 intoString:(id*)arg2;
- (bool)scanUpToString:(id)arg1 intoString:(id*)arg2;
- (void)setCaseSensitive:(bool)arg1;
- (void)setCharactersToBeSkipped:(id)arg1;
- (void)setLocale:(id)arg1;
- (void)setScanLocation:(unsigned long long)arg1;
- (id)string;

// Image: /System/Library/Frameworks/HealthKit.framework/HealthKit

- (bool)hk_scanCharactersFromSet:(id)arg1 length:(unsigned long long)arg2 intoString:(id*)arg3;

// Image: /System/Library/Frameworks/MessageUI.framework/MessageUI

- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_rangeOfFirstMatchWithRegularExpression:(id)arg1;
- (id)mf_remainingString;
- (bool)mf_scanUpToRegularExpression:(id)arg1;

// Image: /System/Library/PrivateFrameworks/AnnotationKit.framework/AnnotationKit

- (bool)scanCGFloat:(double*)arg1;

// Image: /System/Library/PrivateFrameworks/MIME.framework/MIME

- (id)mf_nextTokenWithPunctuation:(struct __CFCharacterSet { }*)arg1;
- (bool)mf_scanUpAndOverString:(id)arg1;

// Image: /System/Library/PrivateFrameworks/NeutrinoCore.framework/NeutrinoCore

- (bool)scanChoicePattern:(out id*)arg1 error:(out id*)arg2;
- (bool)scanGroupPattern:(out id*)arg1 error:(out id*)arg2;
- (bool)scanListPattern:(out id*)arg1 error:(out id*)arg2;
- (bool)scanPattern:(out id*)arg1 error:(out id*)arg2;
- (bool)scanPatterns:(out id*)arg1 from:(id)arg2 to:(id)arg3 delimiter:(id)arg4 error:(out id*)arg5;
- (bool)scanRepeatPattern:(inout id*)arg1 error:(out id*)arg2;
- (bool)scanTokenPattern:(out id*)arg1 error:(out id*)arg2;
- (id)substringFromScanLocation;

// Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport

- (bool)tsu_scanCGFloat:(double*)arg1;

// Image: /System/Library/PrivateFrameworks/TSUtility.framework/TSUtility

- (bool)tsu_scanCGFloat:(double*)arg1;

// Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport

- (bool)tsu_scanCGFloat:(double*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
