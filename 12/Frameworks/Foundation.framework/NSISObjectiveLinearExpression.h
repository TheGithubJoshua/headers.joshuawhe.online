<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSISObjectiveLinearExpression.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSISObjectiveLinearExpression.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSISObjectiveLinearExpression : NSObject {
    struct __CFData { } * _constant;
    NSISEngine * _engine;
    struct __CFDictionary { } * _priorityMap;
    struct __CFArray { } * _variablesSortedByPriorityVectors;
}

- (void)addExpression:(struct { unsigned short x1; unsigned int x2; double x3; union { struct { id x_1_2_1; struct { /* ? */ } *x_1_2_2; unsigned long long x_1_2_3; } x_4_1_1; struct { unsigned long long x_2_2_1; } x_4_1_2; unsigned char x_4_1_3[48]; } x4; }*)arg1 priority:(double)arg2 times:(double)arg3 processVarNewToReceiver:(id /* block */)arg4 processVarDroppedFromReceiver:(id /* block */)arg5;
- (void)addVar:(struct { unsigned int x1; })arg1 priority:(double)arg2 times:(double)arg3;
- (void)addVar:(struct { unsigned int x1; })arg1 priority:(double)arg2 times:(double)arg3 processVarNewToReceiver:(id /* block */)arg4 processVarDroppedFromReceiver:(id /* block */)arg5;
- (void)addVariable:(id)arg1 priority:(double)arg2 times:(double)arg3;
- (bool)constantTermIsZero;
- (void)dealloc;
- (id)description;
- (void)enumerateVars:(id /* block */)arg1;
- (void)incrementConstantWithPriority:(double)arg1 value:(double)arg2;
- (void)incrementConstantWithPriorityVector:(struct __CFData { }*)arg1 timesScalarCoefficient:(double)arg2;
- (id)init;
- (id)initWithEngine:(id)arg1;
- (id)initWithLinearExpression:(struct { unsigned short x1; unsigned int x2; double x3; union { struct { id x_1_2_1; struct { /* ? */ } *x_1_2_2; unsigned long long x_1_2_3; } x_4_1_1; struct { unsigned long long x_2_2_1; } x_4_1_2; unsigned char x_4_1_3[48]; } x4; }*)arg1 priority:(double)arg2 engine:(id)arg3;
- (void)leadingPriority:(double*)arg1 andValue:(double*)arg2 forVar:(struct { unsigned int x1; })arg3;
- (struct __CFData { }*)priorityVectorForVar:(struct { unsigned int x1; })arg1;
- (void)removeVar:(struct { unsigned int x1; })arg1;
- (void)removeVariable:(id)arg1;
- (void)replaceVar:(struct { unsigned int x1; })arg1 withExpression:(struct { unsigned short x1; unsigned int x2; double x3; union { struct { id x_1_2_1; struct { /* ? */ } *x_1_2_2; unsigned long long x_1_2_3; } x_4_1_1; struct { unsigned long long x_2_2_1; } x_4_1_2; unsigned char x_4_1_3[48]; } x4; }*)arg2 processVarNewToReceiver:(id /* block */)arg3 processVarDroppedFromReceiver:(id /* block */)arg4;
- (void)replaceVar:(struct { unsigned int x1; })arg1 withVarPlusDelta:(double)arg2;
- (void)replaceVar:(struct { unsigned int x1; })arg1 withVarPlusDelta:(double)arg2 timesVar:(struct { unsigned int x1; })arg3 processVarNewToReceiver:(id /* block */)arg4 processVarDroppedFromReceiver:(id /* block */)arg5;
- (void)replaceVariable:(id)arg1 withExpression:(id)arg2 processVariableNewToReceiver:(id /* block */)arg3 processVariableDroppedFromReceiver:(id /* block */)arg4;
- (bool)restrictedVarWithCoefficientOfLargestNegativeMagnitudeOutVar:(struct { unsigned int x1; }*)arg1;
- (id)restrictedVariableWithCoefficientOfLargestNegativeMagnitude;
- (void)setPriorityVector:(struct __CFData { }*)arg1 forKnownAbsentVar:(struct { unsigned int x1; })arg2;
- (int)valueRestrictionForVar:(struct { unsigned int x1; })arg1;
- (unsigned long long)variableCount;
- (void)verifyInternalIntegrity;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
