<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSExtensionContext.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSExtensionContext.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSExtensionContext : NSObject <NSCopying, NSSecureCoding, NSXPCListenerDelegate, _NSExtensionAuxHostingBase> {
    NSUUID * __UUID;
    NSXPCConnection * __auxiliaryConnection;
    NSXPCListener * __auxiliaryListener;
    bool  __dummyExtension;
    struct { 
        unsigned int val[8]; 
    }  __extensionHostAuditToken;
    <_NSExtensionContextHosting> * __extensionHostProxy;
    <_NSExtensionContextVending> * __extensionVendorProxy;
    id  __principalObject;
    id  __processAssertion;
    id /* block */  __requestCleanUpBlock;
    NSObject<OS_os_transaction> * __transaction;
    NSArray * _inputItems;
}

@property (nonatomic, copy) NSUUID *_UUID;
@property (setter=_setAuxiliaryConnection:, nonatomic, retain) NSXPCConnection *_auxiliaryConnection;
@property (setter=_setAuxiliaryListener:, nonatomic, retain) NSXPCListener *_auxiliaryListener;
@property (getter=_isDummyExtension, setter=_setDummyExtension:, nonatomic) bool _dummyExtension;
@property (setter=_setExtensionHostAuditToken:) struct { unsigned int x1[8]; } _extensionHostAuditToken;
@property (setter=_setExtensionHostProxy:, retain) <_NSExtensionContextHosting> *_extensionHostProxy;
@property (setter=_setExtensionVendorProxy:, nonatomic, retain) <_NSExtensionContextVending> *_extensionVendorProxy;
@property (setter=_setPrincipalObject:, nonatomic) id _principalObject;
@property (setter=_setProcessAssertion:, retain) id _processAssertion;
@property (setter=_setRequestCleanUpBlock:, nonatomic, copy) id /* block */ _requestCleanUpBlock;
@property (getter=_transaction, setter=_setTransaction:, retain) NSObject<OS_os_transaction> *_transaction;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } hostedViewMaximumAllowedSize;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } hostedViewMinimumAllowedSize;
@property (setter=_setInputItems:, nonatomic, copy) NSArray *inputItems;
@property (readonly) Class superclass;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)_allowedErrorClasses;
+ (id)_defaultExtensionContextProtocol;
+ (id)_defaultExtensionContextVendorProtocol;
+ (id)_extensionAuxiliaryHostProtocol;
+ (id)_extensionAuxiliaryVendorProtocol;
+ (id)_extensionContextForIdentifier:(id)arg1;
+ (id)_extensionContextHostProtocolAllowedClassesForItems;
+ (id)_extensionContextHostProtocolWithAllowedErrorClasses:(id)arg1;
+ (id)_extensionContextVendorProtocolWithAllowedErrorClasses:(id)arg1;
+ (bool)supportsSecureCoding;

- (id)_UUID;
- (void)___nsx_pingHost:(id /* block */)arg1;
- (id)_auxiliaryConnection;
- (id)_auxiliaryListener;
- (void)_completeRequestReturningItemsSecondHalf:(id /* block */)arg1;
- (id)_derivedExtensionAuxiliaryHostProtocol;
- (struct { unsigned int x1[8]; })_extensionHostAuditToken;
- (id)_extensionHostProxy;
- (id)_extensionVendorProxy;
- (bool)_isDummyExtension;
- (bool)_isHost;
- (void)_loadItemForPayload:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_loadPreviewImageForPayload:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)_openURL:(id)arg1 completion:(id /* block */)arg2;
- (id)_principalObject;
- (id)_processAssertion;
- (id /* block */)_requestCleanUpBlock;
- (void)_setAuxiliaryConnection:(id)arg1;
- (void)_setAuxiliaryListener:(id)arg1;
- (void)_setDummyExtension:(bool)arg1;
- (void)_setExtensionHostAuditToken:(struct { unsigned int x1[8]; })arg1;
- (void)_setExtensionHostProxy:(id)arg1;
- (void)_setExtensionVendorProxy:(id)arg1;
- (void)_setInputItems:(id)arg1;
- (void)_setPrincipalObject:(id)arg1;
- (void)_setProcessAssertion:(id)arg1;
- (void)_setRequestCleanUpBlock:(id /* block */)arg1;
- (void)_setTransaction:(id)arg1;
- (id)_transaction;
- (void)_willPerformHostCallback:(id /* block */)arg1;
- (void)cancelRequestWithError:(id)arg1;
- (void)completeRequestReturningItems:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (void)didConnectToVendor:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithInputItems:(id)arg1;
- (id)initWithInputItems:(id)arg1 contextUUID:(id)arg2;
- (id)initWithInputItems:(id)arg1 listenerEndpoint:(id)arg2 contextUUID:(id)arg3;
- (id)inputItems;
- (void)invalidate;
- (bool)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2;
- (void)openURL:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)set_UUID:(id)arg1;

// Image: /System/Library/Frameworks/IntentsUI.framework/IntentsUI

- (struct CGSize { double x1; double x2; })hostedViewMaximumAllowedSize;
- (struct CGSize { double x1; double x2; })hostedViewMinimumAllowedSize;
- (id)interfaceParametersDescription;

// Image: /System/Library/Frameworks/ReplayKit.framework/ReplayKit

- (void)completeRequestWithBroadcastURL:(id)arg1 broadcastConfiguration:(id)arg2 setupInfo:(id)arg3;
- (void)completeRequestWithBroadcastURL:(id)arg1 setupInfo:(id)arg2;
- (void)loadBroadcastingApplicationInfoWithCompletion:(id /* block */)arg1;

// Image: /System/Library/PrivateFrameworks/Widgets.framework/Widgets

- (void)setWidgetLargestAvailableDisplayMode:(long long)arg1;
- (long long)widgetActiveDisplayMode;
- (long long)widgetLargestAvailableDisplayMode;
- (struct CGSize { double x1; double x2; })widgetMaximumSizeForDisplayMode:(long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
