<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSTask.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSTask.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSTask : NSObject

@property (copy) NSArray *arguments;
@property (copy) NSURL *currentDirectoryURL;
@property (copy) NSDictionary *environment;
@property (copy) NSURL *executableURL;
@property (readonly) int processIdentifier;
@property long long qualityOfService;
@property (getter=isRunning, readonly) bool running;
@property (retain) id standardError;
@property (retain) id standardInput;
@property (retain) id standardOutput;
@property (copy) id /* block */ terminationHandler;
@property (readonly) long long terminationReason;
@property (readonly) int terminationStatus;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)currentTaskDictionary;
+ (id)launchedTaskWithDictionary:(id)arg1;
+ (id)launchedTaskWithExecutableURL:(id)arg1 arguments:(id)arg2 error:(out id*)arg3 terminationHandler:(id /* block */)arg4;
+ (id)launchedTaskWithLaunchPath:(id)arg1 arguments:(id)arg2;

- (id)arguments;
- (id)currentDirectoryPath;
- (id)currentDirectoryURL;
- (id)environment;
- (id)executableURL;
- (id)init;
- (void)interrupt;
- (bool)isRunning;
- (void)launch;
- (bool)launchAndReturnError:(id*)arg1;
- (id)launchPath;
- (int)processIdentifier;
- (long long)qualityOfService;
- (bool)resume;
- (void)setArguments:(id)arg1;
- (void)setCurrentDirectoryPath:(id)arg1;
- (void)setCurrentDirectoryURL:(id)arg1;
- (void)setEnvironment:(id)arg1;
- (void)setExecutableURL:(id)arg1;
- (void)setLaunchPath:(id)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setStandardError:(id)arg1;
- (void)setStandardInput:(id)arg1;
- (void)setStandardOutput:(id)arg1;
- (void)setTerminationHandler:(id /* block */)arg1;
- (id)standardError;
- (id)standardInput;
- (id)standardOutput;
- (bool)suspend;
- (long long)suspendCount;
- (void)terminate;
- (id /* block */)terminationHandler;
- (long long)terminationReason;
- (int)terminationStatus;

// Image: /System/Library/PrivateFrameworks/WiFiVelocity.framework/WiFiVelocity

+ (bool)__checkLaunchPath:(id)arg1;
+ (void)applebtDumpPacketLogWithFileName:(id)arg1 timeout:(double)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)arpWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)bluetoothReporterWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)cctoolWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)curlWithAddress:(id)arg1 interfaceName:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)darwinupListWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)dittoWithSource:(id)arg1 destination:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)fullSystemProfilerWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)ifconfigWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)ioregWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 updateBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)ipconfigWithInterfaceName:(id)arg1 timeout:(double)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)kextstatWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)killallWithProcessName:(id)arg1 timeout:(double)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)miniSystemProfilerWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)mobilewifitoolWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)monitorModeWithInterfaceName:(id)arg1 outputPath:(id)arg2 timeout:(double)arg3 queue:(id)arg4 startBlock:(id /* block */)arg5 endBlock:(id /* block */)arg6;
+ (void)ndpWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)netstatWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)nvramBootArgsWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)pingWithAddress:(id)arg1 count:(long long)arg2 trafficClass:(id)arg3 dataLength:(unsigned long long)arg4 interfaceName:(id)arg5 timeout:(double)arg6 wait:(double)arg7 interval:(double)arg8 queue:(id)arg9 errorBlock:(id /* block */)arg10 completeBlock:(id /* block */)arg11;
+ (void)pingWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)pmsetEverythingWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)runTaskWithLaunchPath:(id)arg1 arguments:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 updateBlock:(id /* block */)arg6 completeBlock:(id /* block */)arg7;
+ (void)runTaskWithLaunchPath:(id)arg1 arguments:(id)arg2 timeout:(double)arg3 queue:(id)arg4 startBlock:(id /* block */)arg5 updateBlock:(id /* block */)arg6 endBlock:(id /* block */)arg7;
+ (void)scutilWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)securityWithTimeout:(double)arg1 arguments:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)spindumpWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)swversWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)sysctlHWModelWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)sysdiagnoseWithTimeout:(double)arg1 outputPath:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)syslogWithTimeout:(double)arg1 outputURL:(id)arg2 queue:(id)arg3 errorBlock:(id /* block */)arg4 completeBlock:(id /* block */)arg5;
+ (void)tarWithSource:(id)arg1 destination:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)tcpdumpWithInterfaceName:(id)arg1 outputPath:(id)arg2 timeout:(double)arg3 queue:(id)arg4 startBlock:(id /* block */)arg5 endBlock:(id /* block */)arg6;
+ (void)topWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;
+ (void)tracerouteWithAddress:(id)arg1 maxTTL:(long long)arg2 waittime:(long long)arg3 queries:(long long)arg4 interfaceName:(id)arg5 timeout:(double)arg6 queue:(id)arg7 errorBlock:(id /* block */)arg8 completeBlock:(id /* block */)arg9;
+ (void)untarWithSource:(id)arg1 destination:(id)arg2 timeout:(double)arg3 queue:(id)arg4 errorBlock:(id /* block */)arg5 completeBlock:(id /* block */)arg6;
+ (void)wlCurpowerWithTimeout:(double)arg1 queue:(id)arg2 errorBlock:(id /* block */)arg3 completeBlock:(id /* block */)arg4;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
