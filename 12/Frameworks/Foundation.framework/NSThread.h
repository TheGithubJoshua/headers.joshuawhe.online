<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSThread.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSThread.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSThread : NSObject {
    unsigned char  _bytes;
    id  _private;
}

@property (getter=isCancelled, readonly) bool cancelled;
@property (getter=isExecuting, readonly) bool executing;
@property (getter=isFinished, readonly) bool finished;
@property (readonly) bool isMainThread;
@property (copy) NSString *name;
@property long long qualityOfService;
@property unsigned long long stackSize;
@property (readonly, retain) NSMutableDictionary *threadDictionary;
@property double threadPriority;
@property (readonly) unsigned int tsu_qualityOfServiceClass;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)callStackReturnAddresses;
+ (id)callStackSymbols;
+ (id)currentThread;
+ (void)detachNewThreadSelector:(SEL)arg1 toTarget:(id)arg2 withObject:(id)arg3;
+ (void)detachNewThreadWithBlock:(id /* block */)arg1;
+ (void)exit;
+ (bool)isDying;
+ (bool)isMainThread;
+ (bool)isMultiThreaded;
+ (id)mainThread;
+ (bool)setThreadPriority:(double)arg1;
+ (void)sleepForTimeInterval:(double)arg1;
+ (void)sleepUntilDate:(id)arg1;
+ (double)threadPriority;

- (struct pthread_override_s { }*)_beginQoSOverride:(unsigned int)arg1 relativePriority:(int)arg2;
- (void)_endQoSOverride:(struct pthread_override_s { }*)arg1;
- (void)_nq:(id)arg1;
- (bool)_setThreadPriority:(double)arg1;
- (void)cancel;
- (void)dealloc;
- (id)description;
- (id)init;
- (id)initWithBlock:(id /* block */)arg1;
- (id)initWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
- (bool)isCancelled;
- (bool)isDying;
- (bool)isExecuting;
- (bool)isFinished;
- (bool)isMainThread;
- (void)main;
- (id)name;
- (long long)qualityOfService;
- (id)runLoop;
- (void)setName:(id)arg1;
- (void)setQualityOfService:(long long)arg1;
- (void)setStackSize:(unsigned long long)arg1;
- (void)setThreadPriority:(double)arg1;
- (unsigned long long)stackSize;
- (void)start;
- (id)threadDictionary;
- (double)threadPriority;

// Image: /System/Library/Frameworks/MapKit.framework/MapKit

+ (id)_mapkit_networkIOThread;
+ (void)_mapkit_runThread:(id)arg1;

// Image: /System/Library/PrivateFrameworks/AppleMediaServices.framework/AppleMediaServices

+ (id)ams_symbolicatedCallStackSymbols;

// Image: /System/Library/PrivateFrameworks/IMFoundation.framework/IMFoundation

+ (void)_im_runBlock:(id /* block */)arg1;

- (void)__im_performBlock:(id /* block */)arg1;
- (void)__im_performBlock:(id /* block */)arg1 afterDelay:(double)arg2;
- (void)__im_performBlock:(id /* block */)arg1 afterDelay:(double)arg2 modes:(id)arg3;
- (void)__im_performBlock:(id /* block */)arg1 modes:(id)arg2;
- (void)__im_performBlock:(id /* block */)arg1 waitUntilDone:(bool)arg2;
- (void)__im_performBlock:(id /* block */)arg1 waitUntilDone:(bool)arg2 modes:(id)arg3;

// Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport

+ (id)tsu_currentThreadName;

// Image: /System/Library/PrivateFrameworks/ScreenReaderCore.framework/ScreenReaderCore

- (void)registerForStopNotification;
- (bool)shouldStop;
- (void)unregisterForStopNotification;

// Image: /System/Library/PrivateFrameworks/TSReading.framework/TSReading

+ (bool)tsp_hasReadFileAccess;
+ (bool)tsp_isArchiverThread;
+ (void)tsp_performSynchronousArchiverOperationUsingBlock:(id /* block */)arg1;
+ (void)tsp_performSynchronousOperationMarkingThreadWithKey:(id)arg1 usingBlock:(id /* block */)arg2;
+ (void)tsp_performSynchronousOperationWithReadFileAccessUsingBlock:(id /* block */)arg1;

// Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport

+ (id)tsp_currentReadCompletionInfo;
+ (bool)tsp_hasReadFileAccess;
+ (bool)tsp_isArchiverThread;
+ (bool)tsp_isRunningFinalizeHandlersForLegacyDocument;
+ (bool)tsp_isRunningFinalizeHandlersForUpgrade;
+ (bool)tsp_isUnarchiverThread;
+ (id)tsp_newUnarchiverQueueWithName:(const char *)arg1;
+ (void)tsp_performSynchronousArchiverOperationUsingBlock:(id /* block */)arg1;
+ (void)tsp_performSynchronousOperationWithReadFileAccessUsingBlock:(id /* block */)arg1;
+ (void)tsp_performSynchronousOperationWithThreadDictionaryObject:(id)arg1 forKey:(id)arg2 usingBlock:(id /* block */)arg3;
+ (void)tsp_runFinalizeHandlersForReadCompletionInfo:(id)arg1 usingBlock:(id /* block */)arg2;
+ (id)tsu_currentThreadName;

- (unsigned int)tsu_qualityOfServiceClass;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
