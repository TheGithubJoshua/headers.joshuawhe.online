<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSFileAccessClaim.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSFileAccessClaim.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSFileAccessClaim : NSObject <NSSecureCoding> {
    NSObject<OS_dispatch_queue> * _arbiterQueue;
    unsigned long long  _blockageCount;
    NSMutableSet * _blockingClaims;
    NSCountedSet * _blockingReactorIDs;
    bool  _cameFromSuperarbiter;
    NSString * _claimID;
    NSMutableArray * _claimerBlockageReasons;
    NSError * _claimerError;
    id  _claimerOrNil;
    NSObject<OS_dispatch_semaphore> * _claimerWaiter;
    NSXPCConnection * _client;
    NSMutableArray * _devaluationProcedures;
    bool  _didWait;
    NSMutableArray * _finishingProcedures;
    bool  _hasInvokedClaimer;
    bool  _isRevoked;
    id  _originatingReactorQueueID;
    NSMutableOrderedSet * _pendingClaims;
    NSFileAccessProcessManager * _processManager;
    NSMutableArray * _providerCancellationProcedures;
    NSString * _purposeIDOrNil;
    NSMutableDictionary * _reacquisitionProceduresByPresenterID;
    NSMutableArray * _revocationProcedures;
    NSMutableArray * _sandboxTokens;
    id /* block */  _serverClaimerOrNil;
}

@property (readonly, copy) NSArray *allURLs;
@property (readonly) NSObject<OS_dispatch_semaphore> *claimerWaiter;

+ (bool)canReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapWritingItemAtLocation:(id)arg3 options:(unsigned long long)arg4;
+ (bool)canWritingItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapWritingItemAtLocation:(id)arg3 options:(unsigned long long)arg4;
+ (bool)supportsSecureCoding;

- (void)_setupWithClaimID:(id)arg1 purposeID:(id)arg2 originatingReactorQueueID:(id)arg3;
- (bool)_writeArchiveOfDirectoryAtURL:(id)arg1 toURL:(id)arg2 error:(id*)arg3;
- (void)acceptClaimFromClient:(id)arg1 arbiterQueue:(id)arg2 grantHandler:(id /* block */)arg3;
- (void)addPendingClaim:(id)arg1;
- (id)allURLs;
- (void)block;
- (void)blockClaimerForReason:(id)arg1;
- (bool)cameFromSuperarbiter;
- (bool)canAccessLocations:(id)arg1 forReading:(bool)arg2 error:(id*)arg3;
- (void)cancelled;
- (bool)checkIfSymbolicLinkAtURL:(id)arg1 withResolutionCount:(long long*)arg2 andIfSoThenReevaluateSelf:(id /* block */)arg3;
- (id)claimID;
- (id)claimerError;
- (bool)claimerInvokingIsBlockedByReactorWithID:(id)arg1;
- (id)claimerWaiter;
- (id)client;
- (int)clientProcessIdentifier;
- (void)dealloc;
- (id)description;
- (id)descriptionWithIndenting:(id)arg1;
- (void)devalueOldClaim:(id)arg1;
- (void)devalueSelf;
- (bool)didWait;
- (void)disavowed;
- (void)encodeWithCoder:(id)arg1;
- (void)ensureProvidersOfItemsAtReadingLocations:(id)arg1 writingLocations:(id)arg2 thenContinue:(id /* block */)arg3;
- (void)evaluateNewClaim:(id)arg1;
- (bool)evaluateSelfWithRootNode:(id)arg1 checkSubarbitrability:(bool)arg2;
- (void)finished;
- (void)forwardUsingConnection:(id)arg1 crashHandler:(id /* block */)arg2;
- (void)givePriorityToClaim:(id)arg1;
- (void)granted;
- (id)initWithClient:(id)arg1 claimID:(id)arg2 purposeID:(id)arg3;
- (id)initWithCoder:(id)arg1;
- (void)invokeClaimer;
- (bool)isBlockedByClaimWithPurposeID:(id)arg1;
- (bool)isBlockedByReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;
- (bool)isBlockedByWritingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;
- (bool)isGranted;
- (bool)isRevoked;
- (void)itemAtLocation:(id)arg1 wasReplacedByItemAtLocation:(id)arg2;
- (void)makePresentersOfItemAtLocation:(id)arg1 orContainedItem:(bool)arg2 relinquishUsingProcedureGetter:(id /* block */)arg3;
- (void)makeProviderOfItemAtLocation:(id)arg1 provideIfNecessaryWithOptions:(unsigned long long)arg2 thenContinue:(id /* block */)arg3;
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 readingOptions:(unsigned long long)arg3 thenContinue:(id /* block */)arg4;
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 writingOptions:(unsigned long long)arg3 thenContinue:(id /* block */)arg4;
- (void)makeProviderOfItemAtLocation:(id)arg1 providePhysicalURLThenContinue:(id /* block */)arg2;
- (id)pendingClaims;
- (void)prepareClaimForGrantingWithArbiterQueue:(id)arg1;
- (void)prepareItemForUploadingFromURL:(id)arg1 thenContinue:(id /* block */)arg2;
- (id)purposeID;
- (id)purposeIDOfClaimOnItemAtLocation:(id)arg1 forMessagingPresenter:(id)arg2;
- (void)removePendingClaims:(id)arg1;
- (void)revoked;
- (void)scheduleBlockedClaim:(id)arg1;
- (void)setCameFromSuperarbiter;
- (void)setClaimerError:(id)arg1;
- (bool)shouldBeRevokedPriorToInvokingAccessor;
- (bool)shouldCancelInsteadOfWaiting;
- (bool)shouldInformProvidersAboutEndOfWriteWithOptions:(unsigned long long)arg1;
- (bool)shouldReadingWithOptions:(unsigned long long)arg1 causePresenterToRelinquish:(id)arg2;
- (void)startObservingClientState;
- (void)unblock;
- (void)unblockClaimerForReason:(id)arg1;
- (void)whenDevaluedPerformProcedure:(id /* block */)arg1;
- (void)whenFinishedPerformProcedure:(id /* block */)arg1;
- (void)whenRevokedPerformProcedure:(id /* block */)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
