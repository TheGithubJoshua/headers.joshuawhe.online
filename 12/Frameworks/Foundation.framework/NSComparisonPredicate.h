<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSComparisonPredicate.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSComparisonPredicate.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSComparisonPredicate : NSPredicate {
    NSExpression * _lhs;
    NSPredicateOperator * _predicateOperator;
    void * _reserved2;
    NSExpression * _rhs;
}

@property (readonly) unsigned long long comparisonPredicateModifier;
@property (readonly) SEL customSelector;
@property (readonly, retain) NSExpression *leftExpression;
@property (readonly) unsigned long long options;
@property (readonly) unsigned long long predicateOperatorType;
@property (readonly, retain) NSExpression *rightExpression;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)predicateWithLeftExpression:(id)arg1 rightExpression:(id)arg2 customSelector:(SEL)arg3;
+ (id)predicateWithLeftExpression:(id)arg1 rightExpression:(id)arg2 modifier:(unsigned long long)arg3 type:(unsigned long long)arg4 options:(unsigned long long)arg5;
+ (id)predicateWithPredicateOperator:(id)arg1 leftExpression:(id)arg2 rightExpression:(id)arg3;
+ (id)predicateWithPredicateOperator:(id)arg1 leftKeyPath:(id)arg2 rightKeyPath:(id)arg3;
+ (id)predicateWithPredicateOperator:(id)arg1 leftKeyPath:(id)arg2 rightValue:(id)arg3;
+ (bool)supportsSecureCoding;

- (void)_acceptExpressions:(id)arg1 flags:(unsigned long long)arg2;
- (void)_acceptOperator:(id)arg1 flags:(unsigned long long)arg2;
- (void)acceptVisitor:(id)arg1 flags:(unsigned long long)arg2;
- (void)allowEvaluation;
- (unsigned long long)comparisonPredicateModifier;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (SEL)customSelector;
- (void)dealloc;
- (void)encodeWithCoder:(id)arg1;
- (bool)evaluateWithObject:(id)arg1 substitutionVariables:(id)arg2;
- (id)generateMetadataDescription;
- (unsigned long long)hash;
- (id)initWithCoder:(id)arg1;
- (id)initWithLeftExpression:(id)arg1 rightExpression:(id)arg2 customSelector:(SEL)arg3;
- (id)initWithLeftExpression:(id)arg1 rightExpression:(id)arg2 modifier:(unsigned long long)arg3 type:(unsigned long long)arg4 options:(unsigned long long)arg5;
- (id)initWithPredicateOperator:(id)arg1 leftExpression:(id)arg2 rightExpression:(id)arg3;
- (id)initWithPredicateOperator:(id)arg1 leftKeyPath:(id)arg2 rightKeyPath:(id)arg3;
- (id)initWithPredicateOperator:(id)arg1 leftKeyPath:(id)arg2 rightValue:(id)arg3;
- (bool)isEqual:(id)arg1;
- (id)keyPathExpressionForString:(id)arg1;
- (id)leftExpression;
- (unsigned long long)options;
- (id)predicateFormat;
- (id)predicateOperator;
- (unsigned long long)predicateOperatorType;
- (id)predicateWithSubstitutionVariables:(id)arg1;
- (id)rightExpression;
- (void)setPredicateOperator:(id)arg1;

// Image: /System/Library/Frameworks/ClassKit.framework/ClassKit

+ (id)cls_allowedRightKeyPathArrays;

- (id)cls_normalizedPredicate:(id)arg1 error:(id*)arg2;
- (id)cls_validatedRightKeyPathExpression:(id)arg1 leftKeyPath:(id)arg2 forAllowedKeyPaths:(id)arg3 normalizer:(id)arg4 error:(id*)arg5;

// Image: /System/Library/Frameworks/CoreData.framework/CoreData

- (bool)_isForeignObjectExpression:(id)arg1 givenContext:(id)arg2;
- (id)minimalFormInContext:(id)arg1;

// Image: /System/Library/Frameworks/HealthKit.framework/HealthKit

- (id)_parseComparisonPredicateWithKeyPath:(id)arg1 predicateOperatorType:(unsigned long long)arg2 value:(id)arg3 dataTypes:(id)arg4 filterClasses:(id)arg5;
- (id)hk_filterRepresentationForDataTypes:(id)arg1 filterClasses:(id)arg2;

// Image: /System/Library/PrivateFrameworks/CloudDocs.framework/CloudDocs

- (id)br_fileObjectIDWithWatchedChildren;
- (id)br_urlWithWatchedChildren;
- (id)br_watchedFileObjectID;
- (id)br_watchedURL;

// Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon

- (id)CKDPQueryFiltersWithTranslator:(id)arg1 error:(id*)arg2;
- (unsigned long long)_comparisonOptionForString:(id)arg1;
- (id)_nearFilterWithKey:(id)arg1 location:(id)arg2 radius:(double)arg3 translator:(id)arg4;
- (id)_parseBasicOperatorFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseBeginsWithFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseBetweenFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseFullTextSearchFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseFullTextSearchUsingContainsTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseInFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseListContainsAllFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseListContainsAnyFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseListContainsFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseNearFiltersWithTranslator:(id)arg1 withError:(id*)arg2;

// Image: /System/Library/PrivateFrameworks/HealthDaemon.framework/HealthDaemon

- (id)_checkTypeForValue:(id)arg1 inKeyPath:(id)arg2;
- (id)_sqlPredicateForSelect;

// Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore

- (id)FCCKPQueryFiltersWithTranslator:(id)arg1 error:(id*)arg2;
- (unsigned long long)_comparisonOptionForString:(id)arg1;
- (id)_parseBasicOperatorFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseBeginsWithFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseBetweenFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseFullTextSearchFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseFullTextSearchUsingContainsTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseInFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseListContainsAllFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseListContainsAnyFiltersWithTranslator:(id)arg1 withError:(id*)arg2;
- (id)_parseListContainsFiltersWithTranslator:(id)arg1 withError:(id*)arg2;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
