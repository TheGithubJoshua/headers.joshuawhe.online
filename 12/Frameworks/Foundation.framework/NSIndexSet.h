<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>NSIndexSet.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/Foundation.framework/NSIndexSet.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/Foundation.framework/Foundation (1575.23)
 */

@interface NSIndexSet : NSObject <NSCopying, NSMutableCopying, NSSecureCoding> {
    struct { 
        unsigned int _isEmpty : 1; 
        unsigned int _hasSingleRange : 1; 
        unsigned int _cacheValid : 1; 
        unsigned int _reservedArrayBinderController : 29; 
    }  _indexSetFlags;
    union { 
        struct { 
            struct _NSRange { 
                unsigned long long location; 
                unsigned long long length; 
            } _range; 
        } _singleRange; 
        struct { 
            void *_data; 
            void *_reserved; 
        } _multipleRanges; 
    }  _internal;
}

@property (readonly) unsigned long long count;
@property (readonly) unsigned long long firstIndex;
@property (readonly) unsigned long long lastIndex;
@property (nonatomic, readonly) struct _NSRange { unsigned long long x1; unsigned long long x2; } px_coveringRange;
@property (nonatomic, readonly) NSString *px_shortDescription;
@property (nonatomic, readonly) bool tsu_isSingleContiguousRange;

// Image: /System/Library/Frameworks/Foundation.framework/Foundation

+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)indexSet;
+ (id)indexSetWithIndex:(unsigned long long)arg1;
+ (id)indexSetWithIndexes:(const unsigned long long*)arg1 count:(unsigned long long)arg2;
+ (id)indexSetWithIndexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
+ (bool)supportsSecureCoding;

- (void)__forwardEnumerateRanges:(id /* block */)arg1;
- (unsigned long long)__getContainmentVector:(out bool*)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (unsigned long long)_indexAtIndex:(unsigned long long)arg1;
- (unsigned long long)_indexClosestToIndex:(unsigned long long)arg1 equalAllowed:(bool)arg2 following:(bool)arg3;
- (unsigned long long)_indexOfRangeAfterOrContainingIndex:(unsigned long long)arg1;
- (unsigned long long)_indexOfRangeBeforeOrContainingIndex:(unsigned long long)arg1;
- (unsigned long long)_indexOfRangeContainingIndex:(unsigned long long)arg1;
- (id)_init;
- (id)_numberEnumerator;
- (void)_setContentToContentFromIndexSet:(id)arg1;
- (Class)classForCoder;
- (bool)containsIndex:(unsigned long long)arg1;
- (bool)containsIndexes:(id)arg1;
- (bool)containsIndexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (unsigned long long)count;
- (unsigned long long)countOfIndexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)dealloc;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (void)enumerateIndexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 options:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateIndexesUsingBlock:(id /* block */)arg1;
- (void)enumerateIndexesWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (void)enumerateRangesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 options:(unsigned long long)arg2 usingBlock:(id /* block */)arg3;
- (void)enumerateRangesUsingBlock:(id /* block */)arg1;
- (void)enumerateRangesWithOptions:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (unsigned long long)firstIndex;
- (unsigned long long)getIndexes:(unsigned long long*)arg1 maxCount:(unsigned long long)arg2 inIndexRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; }*)arg3;
- (unsigned long long)hash;
- (unsigned long long)indexGreaterThanIndex:(unsigned long long)arg1;
- (unsigned long long)indexGreaterThanOrEqualToIndex:(unsigned long long)arg1;
- (unsigned long long)indexInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 options:(unsigned long long)arg2 passingTest:(id /* block */)arg3;
- (unsigned long long)indexLessThanIndex:(unsigned long long)arg1;
- (unsigned long long)indexLessThanOrEqualToIndex:(unsigned long long)arg1;
- (unsigned long long)indexPassingTest:(id /* block */)arg1;
- (unsigned long long)indexWithOptions:(unsigned long long)arg1 passingTest:(id /* block */)arg2;
- (id)indexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 options:(unsigned long long)arg2 passingTest:(id /* block */)arg3;
- (id)indexesPassingTest:(id /* block */)arg1;
- (id)indexesWithOptions:(unsigned long long)arg1 passingTest:(id /* block */)arg2;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithIndex:(unsigned long long)arg1;
- (id)initWithIndexSet:(id)arg1;
- (id)initWithIndexes:(const unsigned long long*)arg1 count:(unsigned long long)arg2;
- (id)initWithIndexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)intersectsIndexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToIndexSet:(id)arg1;
- (unsigned long long)lastIndex;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeAtIndex:(unsigned long long)arg1;
- (unsigned long long)rangeCount;
- (id)replacementObjectForPortCoder:(id)arg1;

// Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI

- (unsigned long long)pu_indexAtIndex:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/AppPredictionClient.framework/AppPredictionClient

- (id)asArray;

// Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit

- (void)__ck_enumerateIndexesByProximityToIndex:(unsigned long long)arg1 usingBlock:(id /* block */)arg2;
- (id)__ck_indexPathItemsInSection:(long long)arg1;
- (id)__ck_indexPathRowsInSection:(long long)arg1;
- (id)__ck_indexSetShiftedForInsertedIndexes:(id)arg1 removedIndexes:(id)arg2;

// Image: /System/Library/PrivateFrameworks/ContactsFoundation.framework/ContactsFoundation

- (bool)_cn_all:(id /* block */)arg1;
- (bool)_cn_any:(id /* block */)arg1;
- (void)_cn_each:(id /* block */)arg1;
- (id)_cn_map:(id /* block */)arg1;

// Image: /System/Library/PrivateFrameworks/DCIMServices.framework/DCIMServices

- (unsigned long long)cam_indexNearestToIndex:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/GameCenterFoundation.framework/GameCenterFoundation

+ (id)_gkIndexSetWithArray:(id)arg1;

- (id)_gkIndexSetByAddingIndex:(long long)arg1;
- (id)_gkIndexSetByRemovingIndex:(long long)arg1;

// Image: /System/Library/PrivateFrameworks/ITMLKit.framework/ITMLKit

+ (id)indexSetWithIndexesInCyclicRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 itemCount:(unsigned long long)arg2;

- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_allInclusiveCyclicRangeForItemCount:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_filteredCyclicRangeForItemCount:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })cyclicRangeForItemCount:(unsigned long long)arg1 includeAllIndexes:(bool)arg2;

// Image: /System/Library/PrivateFrameworks/Memories.framework/Memories

+ (id)differenceOf:(id)arg1 with:(id)arg2;
+ (id)indexSetWithIndexesInRCRange:(struct { long long x1; long long x2; })arg1;
+ (id)intersectionOf:(id)arg1 with:(id)arg2;
+ (id)unionOf:(id)arg1 with:(id)arg2;

- (id)indexArray;
- (id)indexPathsWithSection:(unsigned long long)arg1;
- (id)indexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)intersectsIndexesInRCRange:(struct { long long x1; long long x2; })arg1;
- (long long)largestContiguousIndexGreaterThanOrEqualTo:(long long)arg1;
- (long long)lowestContiguousIndexLessThanOrEqualTo:(long long)arg1;
- (unsigned long long)nearestIndex:(unsigned long long)arg1;
- (unsigned long long)nextToLastIndex;

// Image: /System/Library/PrivateFrameworks/Message.framework/Message

- (id)mf_commaSeparatedString;

// Image: /System/Library/PrivateFrameworks/NewsCore.framework/NewsCore

- (unsigned long long)fc_countOfContiguousIndexesGreaterThanOrEqualToIndex:(unsigned long long)arg1;
- (unsigned long long)fc_countOfContiguousIndexesLessThanIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })fc_enclosingRange;
- (void)fc_enumerateGapsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 usingBlock:(id /* block */)arg2;
- (id)fc_indexSetWithGapsInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (bool)fc_isContiguous;

// Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport

+ (id)tsu_indexSetWithIndices:(unsigned long long*)arg1 count:(unsigned long long)arg2;

- (unsigned long long)tsu_indexAtPosition:(unsigned long long)arg1;
- (id)tsu_indexSetByAddingIndex:(unsigned long long)arg1;
- (id)tsu_indexSetByAddingIndexes:(id)arg1;
- (id)tsu_indexSetByInsertingIndexes:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)tsu_indexSetByIntersectingWithIndexes:(id)arg1;
- (id)tsu_indexSetByIntersectingWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)tsu_initWithIndices:(unsigned long long*)arg1 count:(unsigned long long)arg2;
- (bool)tsu_intersectsIndexesInIndexSet:(id)arg1;
- (bool)tsu_isSingleContiguousRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })tsu_leadingRangeInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (unsigned long long)tsu_positionOfIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })tsu_trailingRangeInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;

// Image: /System/Library/PrivateFrameworks/PhotoAnalysis.framework/Frameworks/PhotosGraph.framework/PhotosGraph

- (bool)pg_intersectsIndexSet:(id)arg1;

// Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices

- (id)_pl_indexSetByUpdatingWithChangedIndexes:(id)arg1 asInserts:(bool)arg2;
- (id)pl_indexSetAdjustedForDeletions:(id)arg1;
- (id)pl_indexSetAdjustedForInsertions:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })pl_rangeCoveringIndexSet;
- (id)pl_shortDescription;

// Image: /System/Library/PrivateFrameworks/PhotosUICore.framework/PhotosUICore

- (struct _NSRange { unsigned long long x1; unsigned long long x2; })px_coveringRange;
- (id)px_indexSetAdjustedForDeletions:(id)arg1;
- (id)px_indexSetAdjustedForInsertions:(id)arg1;
- (id)px_indexesInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)px_intersectionWithIndexSet:(id)arg1;
- (id)px_shortDescription;

// Image: /System/Library/PrivateFrameworks/ScreenReaderCore.framework/ScreenReaderCore

- (long long)firstIndexCommonWithIndexSet:(id)arg1;

// Image: /System/Library/PrivateFrameworks/Silex.framework/Silex

- (struct _NSRange { unsigned long long x1; unsigned long long x2; })firstRangeAfterIndex:(unsigned long long)arg1;

// Image: /System/Library/PrivateFrameworks/StoreServices.framework/StoreServices

- (id)copyXPCEncoding;
- (id)initWithXPCEncoding:(id)arg1;

// Image: /System/Library/PrivateFrameworks/TSUtility.framework/TSUtility

+ (id)tsu_indexSetWithIndices:(unsigned long long*)arg1 count:(unsigned long long)arg2;

- (id)initWithIndices:(unsigned long long*)arg1 count:(unsigned long long)arg2;
- (id)tsu_indexSetByAddingIndexes:(id)arg1;
- (id)tsu_indexSetByInsertingIndexes:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (bool)tsu_intersectsIndexesInIndexSet:(id)arg1;
- (bool)tsu_isSingleContiguousRange;

// Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport

+ (id)tsu_indexSetWithIndices:(unsigned long long*)arg1 count:(unsigned long long)arg2;

- (id)tsp_initWithMessage:(const struct IndexSet { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSP::Range> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; }*)arg1;
- (void)tsp_saveToMessage:(struct IndexSet { int (**x1)(); struct InternalMetadataWithArena { void *x_2_1_1; } x2; struct HasBits<1> { unsigned int x_3_1_1[1]; } x3; struct CachedSize { struct atomic<int> { _Atomic int x_1_2_1; } x_4_1_1; } x4; struct RepeatedPtrField<TSP::Range> { struct Arena {} *x_5_1_1; int x_5_1_2; int x_5_1_3; struct Rep {} *x_5_1_4; } x5; }*)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })tsu_boundingRange;
- (unsigned long long)tsu_firstCommonIndexWithIndexes:(id)arg1;
- (unsigned long long)tsu_indexAtPosition:(unsigned long long)arg1;
- (id)tsu_indexSetByAddingIndex:(unsigned long long)arg1;
- (id)tsu_indexSetByAddingIndexes:(id)arg1;
- (id)tsu_indexSetByExcludingIndex:(unsigned long long)arg1;
- (id)tsu_indexSetByExcludingIndexes:(id)arg1;
- (id)tsu_indexSetByInsertingIndexes:(id)arg1 inRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (id)tsu_indexSetByIntersectingWithIndexes:(id)arg1;
- (id)tsu_indexSetByIntersectingWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)tsu_initWithIndices:(unsigned long long*)arg1 count:(unsigned long long)arg2;
- (bool)tsu_intersectsIndexesInIndexSet:(id)arg1;
- (bool)tsu_isSingleContiguousRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })tsu_leadingRangeInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (id)tsu_localizedDescription;
- (unsigned long long)tsu_positionOfIndex:(unsigned long long)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })tsu_trailingRangeInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
