<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPRemoteCommandCenter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MediaPlayer.framework/MPRemoteCommandCenter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer (1.0)
 */

@interface MPRemoteCommandCenter : NSObject <MPRemoteCommandDelegate_Internal> {
    NSMutableArray * _activeCommands;
    MPFeedbackCommand * _addItemToLibraryCommand;
    MPFeedbackCommand * _addNowPlayingItemToLibraryCommand;
    MPAdvanceRepeatModeCommand * _advanceRepeatModeCommand;
    MPAdvanceShuffleModeCommand * _advanceShuffleModeCommand;
    MPFeedbackCommand * _bookmarkCommand;
    MPPurchaseCommand * _buyAlbumCommand;
    MPPurchaseCommand * _buyTrackCommand;
    bool  _canBeNowPlayingApplication;
    MPPurchaseCommand * _cancelDownloadCommand;
    MPChangePlaybackPositionCommand * _changePlaybackPositionCommand;
    MPChangePlaybackProgressCommand * _changePlaybackProgressCommand;
    MPChangePlaybackRateCommand * _changePlaybackRateCommand;
    MPChangeRepeatModeCommand * _changeRepeatModeCommand;
    MPChangeShuffleModeCommand * _changeShuffleModeCommand;
    MPRemoteCommand * _createRadioStationCommand;
    MPRemoteCommand * _disableLanguageOptionCommand;
    MPFeedbackCommand * _dislikeCommand;
    MPRemoteCommand * _enableLanguageOptionCommand;
    bool  _handlingPlaybackQueueCommands;
    MPInsertIntoPlaybackQueueCommand * _insertIntoPlaybackQueueCommand;
    MPFeedbackCommand * _likeCommand;
    void * _mediaRemoteCommandHandler;
    MPRemoteCommand * _nextTrackCommand;
    MPRemoteCommand * _pauseCommand;
    MPRemoteCommand * _playCommand;
    MPRemoteCommand * _playItemInQueueCommand;
    NSString * _playerID;
    void * _playerPath;
    MPPurchaseCommand * _preOrderAlbumCommand;
    MPRemoteCommand * _prepareForSetPlaybackQueueCommand;
    MPRemoteCommand * _previousTrackCommand;
    MPRatingCommand * _ratingCommand;
    MPRemoteCommand * _removeFromPlaybackQueueCommand;
    MPReorderQueueCommand * _reorderQueueCommand;
    bool  _scheduledSupportedCommandsChangedNotification;
    MPRemoteCommand * _seekBackwardCommand;
    MPRemoteCommand * _seekForwardCommand;
    NSObject<OS_dispatch_queue> * _serialQueue;
    MPSetPlaybackQueueCommand * _setPlaybackQueueCommand;
    MPSkipIntervalCommand * _skipBackwardCommand;
    MPSkipIntervalCommand * _skipForwardCommand;
    MPRemoteCommand * _specialSeekBackwardCommand;
    MPRemoteCommand * _specialSeekForwardCommand;
    MPRemoteCommand * _stopCommand;
    MPRemoteCommand * _togglePlayPauseCommand;
}

@property (getter=_activeCommands, nonatomic, readonly) NSArray *activeCommands;
@property (nonatomic, readonly) MPFeedbackCommand *addItemToLibraryCommand;
@property (nonatomic, readonly) MPFeedbackCommand *addNowPlayingItemToLibraryCommand;
@property (nonatomic, readonly) MPAdvanceRepeatModeCommand *advanceRepeatModeCommand;
@property (nonatomic, readonly) MPAdvanceShuffleModeCommand *advanceShuffleModeCommand;
@property (nonatomic, readonly) MPFeedbackCommand *bookmarkCommand;
@property (nonatomic, readonly) MPPurchaseCommand *buyAlbumCommand;
@property (nonatomic, readonly) MPPurchaseCommand *buyTrackCommand;
@property (nonatomic, readonly) MPPurchaseCommand *cancelDownloadCommand;
@property (nonatomic, readonly) MPChangePlaybackPositionCommand *changePlaybackPositionCommand;
@property (nonatomic, readonly) MPChangePlaybackProgressCommand *changePlaybackProgressCommand;
@property (nonatomic, readonly) MPChangePlaybackRateCommand *changePlaybackRateCommand;
@property (nonatomic, readonly) MPChangeRepeatModeCommand *changeRepeatModeCommand;
@property (nonatomic, readonly) MPChangeShuffleModeCommand *changeShuffleModeCommand;
@property (nonatomic, readonly) MPRemoteCommand *createRadioStationCommand;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) MPRemoteCommand *disableLanguageOptionCommand;
@property (nonatomic, readonly) MPRemoteCommand *disableQueueModificationsCommand;
@property (nonatomic, readonly) MPFeedbackCommand *dislikeCommand;
@property (nonatomic, readonly) MPRemoteCommand *enableLanguageOptionCommand;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) MPInsertIntoPlaybackQueueCommand *insertIntoPlaybackQueueCommand;
@property (nonatomic, readonly) MPFeedbackCommand *likeCommand;
@property (nonatomic, readonly) MPRemoteCommand *nextTrackCommand;
@property (nonatomic, readonly) MPRemoteCommand *pauseCommand;
@property (nonatomic, readonly) MPRemoteCommand *playCommand;
@property (nonatomic, readonly) MPRemoteCommand *playItemInQueueCommand;
@property (nonatomic, readonly, copy) NSString *playerID;
@property (nonatomic, readonly) MPPurchaseCommand *preOrderAlbumCommand;
@property (nonatomic, readonly) MPRemoteCommand *prepareForSetPlaybackQueueCommand;
@property (nonatomic, readonly) MPRemoteCommand *previousTrackCommand;
@property (nonatomic, readonly) MPRatingCommand *ratingCommand;
@property (nonatomic, readonly) MPRemoteCommand *removeFromPlaybackQueueCommand;
@property (nonatomic, readonly) MPReorderQueueCommand *reorderQueueCommand;
@property (nonatomic, readonly) MPRemoteCommand *seekBackwardCommand;
@property (nonatomic, readonly) MPRemoteCommand *seekForwardCommand;
@property (nonatomic, readonly) MPSetPlaybackQueueCommand *setPlaybackQueueCommand;
@property (nonatomic, readonly) MPSkipIntervalCommand *skipBackwardCommand;
@property (nonatomic, readonly) MPSkipIntervalCommand *skipForwardCommand;
@property (nonatomic, readonly) MPRemoteCommand *specialSeekBackwardCommand;
@property (nonatomic, readonly) MPRemoteCommand *specialSeekForwardCommand;
@property (nonatomic, readonly) MPRemoteCommand *startPictureInPictureCommand;
@property (nonatomic, readonly) MPRemoteCommand *stopCommand;
@property (readonly) Class superclass;
@property (nonatomic, readonly) MPRemoteCommand *togglePlayPauseCommand;

// Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer

+ (long long)_numberOfCommandCentersWithTargets;
+ (id)commandCenterForPlayerID:(id)arg1;
+ (id)sharedCommandCenter;

- (void).cxx_destruct;
- (id)_activeCommands;
- (void)_commandTargetsDidChangeNotification:(id)arg1;
- (const struct __CFArray { }*)_copySupportedCommands;
- (id)_createRemoteCommandWithConcreteClass:(Class)arg1 mediaRemoteType:(unsigned int)arg2;
- (id)_pushMediaRemoteCommand:(unsigned int)arg1 withOptions:(struct __CFDictionary { }*)arg2;
- (void)_pushMediaRemoteCommand:(unsigned int)arg1 withOptions:(struct __CFDictionary { }*)arg2 completion:(id /* block */)arg3;
- (void)_scheduleSupportedCommandsChanged;
- (void)_setupMediaRemoteCommandHandler;
- (void)_setupNotifications;
- (void)_teardownMediaRemoteCommandHandler;
- (void)_teardownNotifications;
- (id)addItemToLibraryCommand;
- (id)addNowPlayingItemToLibraryCommand;
- (id)advanceRepeatModeCommand;
- (id)advanceShuffleModeCommand;
- (id)bookmarkCommand;
- (id)buyAlbumCommand;
- (id)buyTrackCommand;
- (id)cancelDownloadCommand;
- (id)changePlaybackPositionCommand;
- (id)changePlaybackProgressCommand;
- (id)changePlaybackRateCommand;
- (id)changeRepeatModeCommand;
- (id)changeShuffleModeCommand;
- (id)createRadioStationCommand;
- (void)dealloc;
- (id)disableLanguageOptionCommand;
- (id)dislikeCommand;
- (void)dispatchCommandEvent:(id)arg1 completion:(id /* block */)arg2;
- (id)enableLanguageOptionCommand;
- (id)initWithPlayerID:(id)arg1;
- (id)insertIntoPlaybackQueueCommand;
- (id)likeCommand;
- (id)nextTrackCommand;
- (id)pauseCommand;
- (id)playCommand;
- (id)playItemInQueueCommand;
- (id)playerID;
- (id)preOrderAlbumCommand;
- (id)prepareForSetPlaybackQueueCommand;
- (id)previousTrackCommand;
- (id)ratingCommand;
- (void)remoteCommandDidMutatePropagatableProperty:(id)arg1;
- (id)removeFromPlaybackQueueCommand;
- (id)reorderQueueCommand;
- (id)seekBackwardCommand;
- (id)seekForwardCommand;
- (id)setPlaybackQueueCommand;
- (id)skipBackwardCommand;
- (id)skipForwardCommand;
- (id)specialSeekBackwardCommand;
- (id)specialSeekForwardCommand;
- (void)startMediaRemoteSync;
- (id)stopCommand;
- (void)stopMediaRemoteSync;
- (id)togglePlayPauseCommand;

// Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore

- (id)disableQueueModificationsCommand;
- (id)startPictureInPictureCommand;

// Image: /System/Library/PrivateFrameworks/NanoMediaRemote.framework/NanoMediaRemote

- (id)mpCommandForMRCommand:(unsigned int)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
