<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPAVRoutingViewController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MediaPlayer.framework/MPAVRoutingViewController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer (1.0)
 */

@interface MPAVRoutingViewController : UIViewController <MPAVRoutingControllerDelegate, MPAVRoutingTableViewCellDelegate, UITableViewDataSource, UITableViewDelegate> {
    int  _airPlayPasswordAlertDidAppearToken;
    bool  _airPlayPasswordAlertDidAppearTokenIsValid;
    int  _airPlayPasswordAlertDidCancelToken;
    long long  _avItemType;
    NSArray * _cachedDisplayAsPickedRoutes;
    NSArray * _cachedPendingPickedRoutes;
    NSArray * _cachedPickedRoutes;
    NSArray * _cachedRoutes;
    NSArray * _cachedVolumeCapableRoutes;
    <MPAVRoutingViewControllerDelegate> * _delegate;
    long long  _discoveryModeBeforeEnteringBackground;
    NSNumber * _discoveryModeOverride;
    MPAVRoute * _displayedEndpointRoute;
    MPAVEndpointRoute * _endpointRoute;
    MPVolumeGroupSliderCoordinator * _groupSliderCoordinator;
    bool  _hasUserSelections;
    unsigned long long  _iconStyle;
    bool  _isAnimatingUpdate;
    unsigned long long  _mirroringStyle;
    bool  _needsDisplayedRoutesUpdate;
    bool  _onScreen;
    NSMapTable * _outputDeviceVolumeSliders;
    MPAVRoutingViewControllerUpdate * _pendingUpdate;
    long long  _routeDiscoveryMode;
    MPAVRoutingController * _routingController;
    bool  _shouldAutomaticallyUpdateRoutesList;
    bool  _shouldPickRouteOnSelection;
    bool  _sortByIsVideoRoute;
    unsigned long long  _style;
    bool  _suspendedDiscoveryModeDueToApplicationState;
    UIView * _tableBackgroundView;
    UIColor * _tableCellsBackgroundColor;
    UIColor * _tableCellsContentColor;
    MPAVRoutingTableHeaderView * _tableHeaderView;
    UITableView * _tableView;
    <MPAVRoutingViewControllerThemeDelegate> * _themeDelegate;
    MPWeakTimer * _updateTimer;
    unsigned long long  _updatesSincePresentation;
}

@property (nonatomic, readonly) double _expandedCellHeight;
@property (nonatomic, readonly) double _normalCellHeight;
@property (nonatomic, readonly) MPAVRoutingController *_routingController;
@property (setter=_setShouldAutomaticallyUpdateRoutesList:, nonatomic) bool _shouldAutomaticallyUpdateRoutesList;
@property (setter=_setShouldPickRouteOnSelection:, nonatomic) bool _shouldPickRouteOnSelection;
@property (setter=_setTableCellsBackgroundColor:, nonatomic, retain) UIColor *_tableCellsBackgroundColor;
@property (setter=_setTableCellsContentColor:, nonatomic, retain) UIColor *_tableCellsContentColor;
@property (nonatomic, readonly) UITableView *_tableView;
@property (nonatomic) bool allowMirroring;
@property (setter=setAVItemType:, nonatomic) long long avItemType;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MPAVRoutingViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic, copy) NSNumber *discoveryModeOverride;
@property (nonatomic, retain) MPAVEndpointRoute *endpointRoute;
@property (nonatomic, retain) MPVolumeGroupSliderCoordinator *groupSliderCoordinator;
@property (readonly) unsigned long long hash;
@property (nonatomic) unsigned long long iconStyle;
@property (nonatomic) unsigned long long mirroringStyle;
@property (nonatomic, retain) NSMapTable *outputDeviceVolumeSliders;
@property (nonatomic) bool sortByIsVideoRoute;
@property (nonatomic, readonly) unsigned long long style;
@property (readonly) Class superclass;
@property (nonatomic) <MPAVRoutingViewControllerThemeDelegate> *themeDelegate;

- (void).cxx_destruct;
- (id)_alertControllerForUpdateDisplayedRoutesCrashWithLogFileURL:(id)arg1 exception:(id)arg2;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applyUpdate:(id)arg1;
- (void)_beginRouteDiscovery;
- (void)_configureCell:(id)arg1 forIndexPath:(id)arg2 withDisplayedRoutes:(id)arg3;
- (id)_crashLogDateFormatter;
- (id)_createReloadUpdate;
- (id)_createVolumeSlider;
- (id)_displayAsPickedRoutesInRoutes:(id)arg1;
- (id)_displayableRoutesInRoutes:(id)arg1;
- (id)_displayedRoutes;
- (void)_endRouteDiscovery;
- (void)_enqueueUpdate:(id)arg1;
- (double)_expandedCellHeight;
- (id)_generatePropertyListFromUpdateDisplayedRoutesState:(id)arg1 exception:(id)arg2;
- (void)_initWithStyle:(unsigned long long)arg1 routingController:(id)arg2;
- (double)_normalCellHeight;
- (void)_registerNotifications;
- (id)_routingController;
- (void)_setNeedsDisplayedRoutesUpdate;
- (void)_setNeedsRouteDiscoveryModeUpdate;
- (void)_setRouteDiscoveryMode:(long long)arg1;
- (void)_setShouldAutomaticallyUpdateRoutesList:(bool)arg1;
- (void)_setShouldPickRouteOnSelection:(bool)arg1;
- (void)_setTableCellsBackgroundColor:(id)arg1;
- (void)_setTableCellsContentColor:(id)arg1;
- (void)_setupUpdateTimerIfNecessary;
- (bool)_shouldAutomaticallyUpdateRoutesList;
- (bool)_shouldDisplayRouteAsPicked:(id)arg1;
- (bool)_shouldPickRouteOnSelection;
- (id)_tableCellsBackgroundColor;
- (id)_tableCellsContentColor;
- (id)_tableHeaderView;
- (id)_tableView;
- (double)_tableViewFooterViewHeight;
- (double)_tableViewHeaderViewHeight;
- (double)_tableViewHeightAccordingToDataSource;
- (unsigned long long)_tableViewNumberOfRows;
- (void)_unregisterNotifications;
- (void)_updateDisplayedRoutes;
- (id)_volumeCapableRoutesInRoutes:(id)arg1;
- (void)_volumeSliderVolumeControlAvailabilityDidChangeNotification:(id)arg1;
- (id)_writeToDiskWithUpdateDisplayedRoutesStatePropertyList:(id)arg1 error:(id*)arg2;
- (bool)allowMirroring;
- (long long)avItemType;
- (void)dealloc;
- (id)delegate;
- (id)discoveryModeOverride;
- (id)endpointRoute;
- (id)groupSliderCoordinator;
- (unsigned long long)iconStyle;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithStyle:(unsigned long long)arg1;
- (id)initWithStyle:(unsigned long long)arg1 routingController:(id)arg2;
- (unsigned long long)mirroringStyle;
- (long long)numberOfSectionsInTableView:(id)arg1;
- (id)outputDeviceVolumeSliders;
- (struct CGSize { double x1; double x2; })preferredContentSize;
- (void)resetDisplayedRoutes;
- (void)resetScrollPosition;
- (void)routingCell:(id)arg1 mirroringSwitchValueDidChange:(bool)arg2;
- (void)routingController:(id)arg1 didFailToPickRouteWithError:(id)arg2;
- (void)routingController:(id)arg1 pickedRoutesDidChange:(id)arg2;
- (void)routingController:(id)arg1 shouldHijackRoute:(id)arg2 alertStyle:(long long)arg3 busyRouteName:(id)arg4 presentingAppName:(id)arg5 completion:(id /* block */)arg6;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)setAVItemType:(long long)arg1;
- (void)setAllowMirroring:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDiscoveryModeOverride:(id)arg1;
- (void)setEndpointRoute:(id)arg1;
- (void)setGroupSliderCoordinator:(id)arg1;
- (void)setIconStyle:(unsigned long long)arg1;
- (void)setMirroringStyle:(unsigned long long)arg1;
- (void)setOutputDeviceVolumeSliders:(id)arg1;
- (void)setSortByIsVideoRoute:(bool)arg1;
- (void)setThemeDelegate:(id)arg1;
- (bool)sortByIsVideoRoute;
- (unsigned long long)style;
- (id)tableView:(id)arg1 cellForRowAtIndexPath:(id)arg2;
- (void)tableView:(id)arg1 didSelectRowAtIndexPath:(id)arg2;
- (double)tableView:(id)arg1 estimatedHeightForRowAtIndexPath:(id)arg2;
- (double)tableView:(id)arg1 heightForRowAtIndexPath:(id)arg2;
- (long long)tableView:(id)arg1 numberOfRowsInSection:(long long)arg2;
- (void)tableView:(id)arg1 willDisplayCell:(id)arg2 forRowAtIndexPath:(id)arg3;
- (id)themeDelegate;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewDidMoveToWindow:(id)arg1 shouldAppearOrDisappear:(bool)arg2;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillLayoutSubviews;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
