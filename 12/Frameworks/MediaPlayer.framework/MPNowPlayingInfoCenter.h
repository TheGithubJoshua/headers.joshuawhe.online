<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPNowPlayingInfoCenter.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MediaPlayer.framework/MPNowPlayingInfoCenter.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer (1.0)
 */

@interface MPNowPlayingInfoCenter : NSObject {
    NSObject<OS_dispatch_queue> * _accessQueue;
    MPArtworkResizeUtility * _artworkResizeUtility;
    struct { 
        void *createPlaybackQueue; 
        void *createChildItem; 
        void *metadata; 
        void *artwork; 
        void *info; 
        void *languageOptions; 
        void *lyrics; 
    }  _callbacks;
    NSObject<OS_dispatch_queue> * _calloutQueue;
    NSMutableArray * _contentItemIdentifiers;
    MSVTimer * _contentItemInvalidationTimer;
    MSVLRUDictionary * _contentItems;
    NSDictionary * _convertedNowPlayingInfo;
    NSObject<OS_dispatch_queue> * _dataSourceQueue;
    void * _fallbackActivity;
    struct _MSVSignedRange { 
        long long location; 
        long long length; 
    }  _loadedContentItemsRange;
    <MPNowPlayingInfoLyricsDelegate> * _lyricsDelegate;
    NSMutableDictionary * _mutatedContentItems;
    NSMutableDictionary * _mutatedPlaybackQueueRequests;
    MPNowPlayingContentItem * _nowPlayingContentItem;
    NSDictionary * _nowPlayingInfo;
    <MPNowPlayingPlaybackQueueDataSource> * _playbackQueueDataSource;
    <MPNowPlayingPlaybackQueueDelegate> * _playbackQueueDelegate;
    unsigned long long  _playbackState;
    NSString * _playerID;
    void * _playerPath;
    MPNowPlayingInfoCenterArtworkContext * _publishedContext;
    NSDate * _pushDate;
    NSDictionary * _queuedNowPlayingInfo;
    NSString * _representedApplicationBundleIdentifier;
    struct _MSVSignedRange { 
        long long location; 
        long long length; 
    }  _requestedContentItemsRange;
    NSObject<OS_dispatch_queue> * _utilityQueue;
}

@property (nonatomic, retain) NSObject<OS_dispatch_queue> *dataSourceQueue;
@property (nonatomic) <MPNowPlayingInfoLyricsDelegate> *lyricsDelegate;
@property (nonatomic, retain) MPNowPlayingContentItem *nowPlayingContentItem;
@property (nonatomic, copy) NSDictionary *nowPlayingInfo;
@property (nonatomic) MPCPlaybackEngine *playbackEngine;
@property (nonatomic) <MPNowPlayingPlaybackQueueDataSource> *playbackQueueDataSource;
@property (nonatomic) <MPNowPlayingPlaybackQueueDelegate> *playbackQueueDelegate;
@property (nonatomic) unsigned long long playbackState;
@property (nonatomic, readonly) NSString *playerID;
@property (nonatomic, readonly) void*playerPath;
@property (nonatomic, copy) NSString *representedApplicationBundleIdentifier;
@property (nonatomic, readonly) bool supportsArtworkCatalogLoading;

// Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer

+ (id)defaultCenter;
+ (id)infoCenterForPlayerID:(id)arg1;
+ (id)serviceQueue;

- (void).cxx_destruct;
- (id)_artworkCatalogForContentItem:(id)arg1;
- (void)_audioSessionRoutingContextDidChangeNotification:(id)arg1;
- (void)_becomeActiveWithCompletion:(id /* block */)arg1;
- (id)_childContentItemForContentItem:(id)arg1 index:(long long)arg2;
- (void)_contentItemChangedNotification:(id)arg1;
- (id)_contentItemForIdentifier:(id)arg1;
- (id)_contentItemForIdentifier:(id)arg1 alreadyOnDataSourceQueue:(bool)arg2;
- (id)_contentItemIDsInRange:(struct { long long x1; long long x2; })arg1 itemsRange:(struct { long long x1; long long x2; }*)arg2;
- (void*)_createPlaybackQueueForRequest:(void*)arg1;
- (void)_getMetadataForContentItem:(id)arg1 completion:(id /* block */)arg2;
- (void)_initializeNowPlayingInfo;
- (void)_invalidatePlaybackQueueImmediately;
- (id)_onDataSourceQueue_artworkCatalogForContentItem:(id)arg1;
- (void)_onDataSourceQueue_getContentItemIDsInRange:(struct _MSVSignedRange { long long x1; long long x2; })arg1 completion:(id /* block */)arg2;
- (void)_onQueue_clearPlaybackQueueDataSourceCallbacks;
- (void)_onQueue_pushContentItemsUpdate;
- (void)_onQueue_pushNowPlayingInfoAndRetry:(bool)arg1;
- (void)_onQueue_registerLyricsDelegateCallbacks:(id)arg1;
- (void)_onQueue_registerPlaybackQueueDataSourceCallbacks:(id)arg1;
- (void)_updatePlayerAudioSessionProperties;
- (void)becomeActive;
- (void)becomeActiveSystemFallback;
- (id)dataSourceQueue;
- (void)dealloc;
- (id)init;
- (id)initWithPlayerID:(id)arg1;
- (void)invalidatePlaybackQueue;
- (id)lyricsDelegate;
- (id)nowPlayingContentItem;
- (id)nowPlayingInfo;
- (id)playbackQueueDataSource;
- (id)playbackQueueDelegate;
- (unsigned long long)playbackState;
- (id)playerID;
- (void*)playerPath;
- (id)representedApplicationBundleIdentifier;
- (void)resignActiveSystemFallback;
- (void)setDataSourceQueue:(id)arg1;
- (void)setLyricsDelegate:(id)arg1;
- (void)setNowPlayingContentItem:(id)arg1;
- (void)setNowPlayingInfo:(id)arg1;
- (void)setPlaybackQueueDataSource:(id)arg1;
- (void)setPlaybackQueueDelegate:(id)arg1;
- (void)setPlaybackState:(unsigned long long)arg1;
- (void)setRepresentedApplicationBundleIdentifier:(id)arg1;
- (bool)supportsArtworkCatalogLoading;

// Image: /System/Library/PrivateFrameworks/MediaPlaybackCore.framework/MediaPlaybackCore

- (id)playbackEngine;
- (void)setPlaybackEngine:(id)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
