<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPQueuePlayer.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MediaPlayer.framework/MPQueuePlayer.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer (1.0)
 */

@interface MPQueuePlayer : NSObject <MPAVRoutingControllerDelegate> {
    NSObject<OS_dispatch_queue> * _accessQueue;
    unsigned long long  _allowsExternalPlaybackRevisionID;
    AVPlayerItem * _currentItem;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    }  _currentTime;
    long long  _defaultItemEQPresetType;
    bool  _isExternalPlaybackActive;
    MPAVRoute * _lastPickedRoute;
    bool  _outputObscuredDueToInsufficientExternalProtection;
    bool  _pausedForPlaybackQueueTransaction;
    id /* block */  _playbackQueueCommitHandler;
    long long  _playbackQueueTransactionCount;
    AVQueuePlayer * _player;
    NSMutableArray * _queuedOperations;
    float  _rate;
    float  _rateBeforePlaybackQueueTransaction;
    float  _rawRate;
    bool  _routeDidChangeDuringPlaybackQueueTransaction;
    MPAVRoutingController * _routingController;
    long long  _status;
    unsigned long long  _usesAudioOnlyModeForExternalPlaybackRevisionID;
    unsigned long long  _usesExternalPlaybackWhileExternalScreenIsActiveRevisionID;
}

@property (nonatomic, readonly) long long _externalProtectionStatus;
@property (nonatomic, readonly) AVPlayer *_player;
@property (nonatomic) long long actionAtItemEnd;
@property (nonatomic, readonly) bool allowsExternalPlayback;
@property (nonatomic, readonly) AVPlayerItem *currentItem;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) long long defaultItemEQPresetType;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) NSError *error;
@property (getter=isExternalPlaybackActive, nonatomic, readonly) bool externalPlaybackActive;
@property (nonatomic, readonly) long long externalPlaybackType;
@property (nonatomic, copy) NSString *externalPlaybackVideoGravity;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) bool isPlaybackQueueTransactionActive;
@property (nonatomic, readonly) NSArray *items;
@property (nonatomic) bool limitsBandwidthForCellularAccess;
@property (nonatomic, readonly) bool outputObscuredDueToInsufficientExternalProtection;
@property (nonatomic, copy) id /* block */ playbackQueueCommitHandler;
@property (nonatomic, readonly) id playerAVAudioSession;
@property (nonatomic) float rate;
@property (nonatomic, readonly) float rawRate;
@property (nonatomic, readonly) long long status;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool usesAudioOnlyModeForExternalPlayback;
@property (nonatomic, readonly) bool usesExternalPlaybackWhileExternalScreenIsActive;

- (void).cxx_destruct;
- (bool)_CALayerDestinationIsTVOut;
- (void)_currentItemDidChangeNotification:(id)arg1;
- (long long)_externalProtectionStatus;
- (id)_player;
- (bool)_resumePlayback:(double)arg1;
- (void)_setCALayerDestinationIsTVOut:(bool)arg1;
- (void)_setClientName:(id)arg1;
- (void)_setEQPreset:(int)arg1;
- (void)_setExpectedAssetTypes:(id)arg1;
- (void)_setPreferredLanguageList:(id)arg1;
- (void)_setPreparesItemsForPlaybackAsynchronously:(bool)arg1;
- (void)_setStoppingFadeOutDuration:(float)arg1;
- (void)_setUserVolume:(float)arg1;
- (void)_setWantsVolumeChangesWhenPausedOrInactive:(bool)arg1;
- (float)_userVolume;
- (long long)actionAtItemEnd;
- (id)addBoundaryTimeObserverForTimes:(id)arg1 queue:(id)arg2 usingBlock:(id /* block */)arg3;
- (id)addPeriodicTimeObserverForInterval:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 queue:(id)arg2 usingBlock:(id /* block */)arg3;
- (void)advanceToNextItem;
- (bool)allowsExternalPlayback;
- (void)beginPlaybackQueueTransactionAndPause:(bool)arg1;
- (void)commitPlaybackQueueTransaction;
- (id)currentItem;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })currentTime;
- (void)dealloc;
- (long long)defaultItemEQPresetType;
- (id)error;
- (long long)externalPlaybackType;
- (id)externalPlaybackVideoGravity;
- (id)init;
- (void)insertItem:(id)arg1 afterItem:(id)arg2;
- (bool)isExternalPlaybackActive;
- (bool)isPlaybackQueueTransactionActive;
- (id)items;
- (bool)limitsBandwidthForCellularAccess;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (bool)outputObscuredDueToInsufficientExternalProtection;
- (void)pause;
- (void)play;
- (id /* block */)playbackQueueCommitHandler;
- (id)playerAVAudioSession;
- (void)prepareItem:(id)arg1 withCompletionHandler:(id /* block */)arg2;
- (float)rate;
- (float)rawRate;
- (void)removeAllItems;
- (void)removeItem:(id)arg1;
- (void)removeTimeObserver:(id)arg1;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3;
- (void)seekToTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1 toleranceBefore:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg2 toleranceAfter:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg3 completionHandler:(id /* block */)arg4;
- (void)setActionAtItemEnd:(long long)arg1;
- (void)setAllowsExternalPlayback:(bool)arg1 shouldIgnorePlaybackQueueTransactions:(bool)arg2;
- (void)setCurrentPlaybackQueueTransactionDisplayTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (void)setDefaultItemEQPresetType:(long long)arg1;
- (void)setExternalPlaybackVideoGravity:(id)arg1;
- (void)setLimitsBandwidthForCellularAccess:(bool)arg1;
- (void)setMediaSelectionCriteria:(id)arg1 forMediaCharacteristic:(id)arg2;
- (void)setPlaybackQueueCommitHandler:(id /* block */)arg1;
- (void)setRate:(float)arg1;
- (void)setUsesAudioOnlyModeForExternalPlayback:(bool)arg1 shouldIgnorePlaybackQueueTransactions:(bool)arg2;
- (void)setUsesExternalPlaybackWhileExternalScreenIsActive:(bool)arg1 shouldIgnorePlaybackQueueTransactions:(bool)arg2;
- (long long)status;
- (bool)usesAudioOnlyModeForExternalPlayback;
- (bool)usesExternalPlaybackWhileExternalScreenIsActive;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
