<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>MPCloudController.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/MediaPlayer.framework/MPCloudController.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer (1.0)
 */

@interface MPCloudController : NSObject {
    MSVDistributedNotificationObserver * _addToPlaylistBehaviorChangedObserver;
    NSObject<HSCloudAvailability> * _cloudAvailabilityController;
    HSCloudClient * _cloudClient;
    bool  _isCloudEnabled;
    bool  _isCloudLibraryInitialImport;
    bool  _isCloudLibraryUpdateInProgress;
    bool  _isJaliscoInitialImport;
    bool  _isJaliscoUpdateInProgress;
    bool  _isUpdateInProgress;
    bool  _jaliscoGeniusEnabled;
    int  _preferencesChangedNotifyToken;
    bool  _preferencesChangedNotifyTokenIsValid;
    NSObject<OS_dispatch_queue> * _queue;
}

@property (nonatomic, readonly) bool canDefaultMediaLibraryShowCloudContent;
@property (nonatomic, readonly) bool canShowCloudDownloadButtons;
@property (nonatomic, readonly) bool canShowCloudMusic;
@property (nonatomic, readonly) bool canShowCloudVideo;
@property (nonatomic, readonly) HSCloudClient *cloudClient;
@property (nonatomic, readonly) bool enablingJaliscoGeniusRequiresTerms;
@property (nonatomic, readonly) bool hasCloudLockerAccount;
@property (nonatomic, readonly) bool hasPurchaseHistoryAccount;
@property (nonatomic, readonly) bool isCloudEnabled;
@property (nonatomic, readonly) bool isCloudLibraryInitialImport;
@property (nonatomic, readonly) bool isCloudLibraryUpdateInProgress;
@property (nonatomic, readonly) bool isGeniusEnabled;
@property (nonatomic, readonly) bool isInitialImport;
@property (nonatomic, readonly) bool isJaliscoInitialImport;
@property (nonatomic, readonly) bool isJaliscoUpdateInProgress;
@property (nonatomic, readonly) bool isUpdateInProgress;
@property (getter=isJaliscoGeniusEnabled, nonatomic, readonly) bool jaliscoGeniusEnabled;

+ (bool)isEnablingCloudLibraryDestructive;
+ (bool)isMediaApplication;
+ (void)migrateCellularDataPreferencesIfNeeded;
+ (id)sharedCloudController;

- (void).cxx_destruct;
- (void)_initializeUpdateInProgressState;
- (void)acceptJaliscGeniusTermsAndConditionsVersion:(long long)arg1 withCompletionHandler:(id /* block */)arg2;
- (void)addGeniusPlaylistWithPersistentID:(unsigned long long)arg1 name:(id)arg2 seedItemSagaIDs:(id)arg3 itemSagaIDs:(id)arg4 completionHandler:(id /* block */)arg5;
- (void)addItemWithSagaID:(unsigned long long)arg1 toPlaylistWithPersistentID:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (void)addStoreItemWithAdamID:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)addStoreItemWithAdamID:(long long)arg1 toPlaylistWithPersistentID:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (void)addStorePlaylistWithGlobalID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)becomeActive;
- (void)becomeActiveAndWaitUntilDone:(bool)arg1;
- (bool)canDefaultMediaLibraryShowCloudContent;
- (bool)canShowCloudDownloadButtons;
- (void)canShowCloudDownloadButtonsDidChangeNotification:(id)arg1;
- (bool)canShowCloudMusic;
- (void)canShowCloudTracksDidChangeNotification:(id)arg1;
- (bool)canShowCloudVideo;
- (long long)cloudAddToPlaylistBehavior;
- (id)cloudClient;
- (void)createPlaylistWithPersistentID:(unsigned long long)arg1 properties:(id)arg2 trackList:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)dealloc;
- (void)deprioritizeArtworkRequestForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4;
- (void)disableCloudLibraryWithCompletionHandler:(id /* block */)arg1;
- (void)enableCloudLibraryWithOptions:(id)arg1 completionHandler:(id /* block */)arg2;
- (bool)enablingJaliscoGeniusRequiresTerms;
- (void)fetchRecommendedContentWithSeedTrackID:(long long)arg1 seedTrackIDType:(long long)arg2 count:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (bool)hasCloudLockerAccount;
- (bool)hasProperNetworkConditionsToPlayMedia;
- (bool)hasProperNetworkConditionsToShowCloudMedia;
- (void)hasProperNetworkConditionsToShowCloudMediaDidChangeNotification:(id)arg1;
- (bool)hasPurchaseHistoryAccount;
- (void)hideItemsWithPurchaseHistoryIDs:(id)arg1 completionHandler:(id /* block */)arg2;
- (id)init;
- (bool)isCellularDataRestricted;
- (void)isCellularDataRestrictedDidChangeNotification:(id)arg1;
- (bool)isCellularDataRestrictedForMusic;
- (bool)isCellularDataRestrictedForStoreApps;
- (bool)isCellularDataRestrictedForVideos;
- (bool)isCloudEnabled;
- (bool)isCloudLibraryEnabled;
- (bool)isCloudLibraryInitialImport;
- (bool)isCloudLibraryUpdateInProgress;
- (bool)isGeniusEnabled;
- (bool)isInitialImport;
- (bool)isJaliscoGeniusEnabled;
- (bool)isJaliscoInitialImport;
- (bool)isJaliscoUpdateInProgress;
- (bool)isUpdateInProgress;
- (void)loadArtworkForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)loadArtworkInfoForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4 completionHandler:(id /* block */)arg5;
- (void)loadCloudMusicLibraryUpdateProgressWithCompletionHandler:(id /* block */)arg1;
- (void)loadGeniusItemsForSagaID:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (void)loadJaliscoGeniusTermsAndConditionsWithCompletionHandler:(id /* block */)arg1;
- (void)loadJaliscoLibraryUpdateProgressWithCompletionHandler:(id /* block */)arg1;
- (void)loadUpdateProgressWithCompletionHandler:(id /* block */)arg1;
- (void)publishPlaylistWithSagaID:(unsigned long long)arg1 completionHandler:(id /* block */)arg2;
- (void)removeItemsWithSagaIDs:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)removePlaylistsWithSagaIDs:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)resignActive;
- (void)sdk_addStoreItemWithOpaqueID:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)sdk_addStoreItemWithOpaqueID:(id)arg1 toPlaylistWithPersistentID:(unsigned long long)arg2 completionHandler:(id /* block */)arg3;
- (void)sdk_createPlaylistWithPersistenID:(unsigned long long)arg1 properties:(id)arg2 tracklist:(id)arg3 completionHandler:(id /* block */)arg4;
- (void)setCloudAddToPlaylistBehavior:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)setCollectionProperties:(id)arg1 forCollectionWithPersistentID:(long long)arg2 groupingType:(long long)arg3 completionHandler:(id /* block */)arg4;
- (void)setItemProperties:(id)arg1 forPurchaseHistoryID:(unsigned long long)arg2;
- (void)setItemProperties:(id)arg1 forSagaID:(unsigned long long)arg2;
- (void)setLikedState:(long long)arg1 forAlbumWithStoreID:(long long)arg2;
- (void)setLikedState:(long long)arg1 forAlbumWithStoreID:(long long)arg2 completion:(id /* block */)arg3;
- (void)setLikedState:(long long)arg1 forEntityWithStoreID:(long long)arg2 withMediaType:(unsigned long long)arg3;
- (void)setLikedState:(long long)arg1 forEntityWithStoreID:(long long)arg2 withMediaType:(unsigned long long)arg3 completion:(id /* block */)arg4;
- (void)setLikedState:(long long)arg1 forPlaylistWithGlobalID:(id)arg2;
- (void)setLikedState:(long long)arg1 forPlaylistWithGlobalID:(id)arg2 completion:(id /* block */)arg3;
- (void)setPlaylistProperties:(id)arg1 trackList:(id)arg2 forPlaylistWithPersistentID:(unsigned long long)arg3 completionHandler:(id /* block */)arg4;
- (bool)shouldProhibitActionsForCurrentNetworkConditions;
- (bool)shouldProhibitMusicActionForCurrentNetworkConditions;
- (bool)shouldProhibitStoreAppsActionForCurrentNetworkConditions;
- (bool)shouldProhibitVideosActionForCurrentNetworkConditions;
- (void)updateJaliscoMediaLibraryWithReason:(long long)arg1 completionHandler:(id /* block */)arg2;
- (void)updateSubscribedPlaylistWithSagaID:(unsigned long long)arg1 ignoreMinRefreshInterval:(bool)arg2 completionHandler:(id /* block */)arg3;
- (void)uploadArtworkForPlaylist:(id)arg1 completionHandler:(id /* block */)arg2;
- (void)uploadCloudItemProperties;
- (void)uploadCloudPlaylistProperties;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
