<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>CXCallDirectoryStore.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/Frameworks/CallKit.framework/CXCallDirectoryStore.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
   Image: /System/Library/Frameworks/CallKit.framework/CallKit (1)
 */

@interface CXCallDirectoryStore : NSObject {
    NSString * _addBlockingEntriesInsertPhoneNumberBlockingEntrySQL;
    NSString * _addIdentificationEntriesInsertLabelsSQL;
    NSString * _addIdentificationEntriesInsertPhoneNumberIdentificationEntrySQL;
    NSString * _addPhoneNumbersSQL;
    CXDatabase * _database;
    long long  _lastAddBlockingEntriesCount;
    long long  _lastAddIdentificationEntriesCount;
    long long  _lastAddPhoneNumbersCount;
    long long  _lastRemoveBlockingEntriesCount;
    long long  _lastRemoveIdentificationEntriesCount;
    NSString * _removeBlockingEntriesSQL;
    NSString * _removeIdentificationEntriesSQL;
    bool  _temporary;
}

@property (nonatomic, copy) NSString *addBlockingEntriesInsertPhoneNumberBlockingEntrySQL;
@property (nonatomic, copy) NSString *addIdentificationEntriesInsertLabelsSQL;
@property (nonatomic, copy) NSString *addIdentificationEntriesInsertPhoneNumberIdentificationEntrySQL;
@property (nonatomic, copy) NSString *addPhoneNumbersSQL;
@property (getter=isCorrupt, nonatomic, readonly) bool corrupt;
@property (nonatomic, retain) CXDatabase *database;
@property (nonatomic) long long lastAddBlockingEntriesCount;
@property (nonatomic) long long lastAddIdentificationEntriesCount;
@property (nonatomic) long long lastAddPhoneNumbersCount;
@property (nonatomic) long long lastRemoveBlockingEntriesCount;
@property (nonatomic) long long lastRemoveIdentificationEntriesCount;
@property (nonatomic, copy) NSString *removeBlockingEntriesSQL;
@property (nonatomic, copy) NSString *removeIdentificationEntriesSQL;
@property (nonatomic, readonly) long long schemaVersion;
@property (getter=isTemporary, nonatomic) bool temporary;
@property (nonatomic, readonly) NSURL *url;

+ (id)databaseTemplateURL;
+ (id)databaseURLUsingTemporaryDirectory:(bool)arg1 error:(id*)arg2;
+ (bool)initializeDatabaseIfNecessaryAtURL:(id)arg1 usingTemplateAtURL:(id)arg2 error:(id*)arg3;

- (void).cxx_destruct;
- (bool)_addBlockingEntriesWithData:(id)arg1 startIndex:(unsigned long long)arg2 count:(unsigned long long)arg3 extensionID:(long long)arg4 error:(id*)arg5;
- (bool)_addIdentificationEntriesWithData:(id)arg1 startIndex:(unsigned long long)arg2 count:(unsigned long long)arg3 extensionID:(long long)arg4 error:(id*)arg5;
- (bool)_addPhoneNumbersWithEntryData:(id)arg1 startIndex:(unsigned long long)arg2 count:(unsigned long long)arg3 error:(id*)arg4;
- (bool)_containsBlockingEntryWithSQL:(id)arg1 bindings:(id)arg2 error:(id*)arg3;
- (long long)_findOrCreateIDForPhoneNumber:(long long)arg1 error:(id*)arg2;
- (id)_firstIdentificationEntriesForSQL:(id)arg1 bindings:(id)arg2 error:(id*)arg3;
- (id)_firstIdentificationEntryForSQL:(id)arg1 bindings:(id)arg2 error:(id*)arg3;
- (bool)_parseFirstIdentificationEntriesForSQL:(id)arg1 bindings:(id)arg2 handler:(id /* block */)arg3 error:(id*)arg4;
- (bool)_parseIdentificationEntriesForSQL:(id)arg1 bindings:(id)arg2 handler:(id /* block */)arg3 error:(id*)arg4;
- (bool)_removeBlockingEntriesWithData:(id)arg1 startIndex:(unsigned long long)arg2 count:(unsigned long long)arg3 extensionID:(long long)arg4 error:(id*)arg5;
- (bool)_removeIdentificationEntriesWithData:(id)arg1 startIndex:(unsigned long long)arg2 count:(unsigned long long)arg3 extensionID:(long long)arg4 error:(id*)arg5;
- (bool)_removeUnreferencedLabelsWithError:(id*)arg1;
- (bool)_removeUnreferencedPhoneNumbersWithError:(id*)arg1;
- (id)_sqlBindingsForPrioritizedExtensionIdentifiers:(id)arg1 withPriorityOffset:(long long)arg2;
- (id)_sqlCaseMappingPlaceholderStringWithKeyColumnName:(id)arg1 defaultValue:(id)arg2 numberOfPairs:(unsigned long long)arg3;
- (id)_sqlStringListPlaceholderStringWithNumberOfEntries:(long long)arg1;
- (id)_sqlValuesListPlaceholderStringWithNumberOfEntries:(long long)arg1 entryString:(id)arg2;
- (id)_storeIdentificationEntryWithExtensionBundleID:(id)arg1 localizedLabel:(id)arg2;
- (id)addBlockingEntriesInsertPhoneNumberBlockingEntrySQL;
- (bool)addBlockingEntriesWithData:(id)arg1 extensionID:(long long)arg2 error:(id*)arg3;
- (bool)addBlockingEntryWithPhoneNumber:(long long)arg1 extensionID:(long long)arg2 error:(id*)arg3;
- (long long)addExtensionWithIdentifier:(id)arg1 error:(id*)arg2;
- (long long)addExtensionWithIdentifier:(id)arg1 priority:(long long)arg2 error:(id*)arg3;
- (id)addIdentificationEntriesInsertLabelsSQL;
- (id)addIdentificationEntriesInsertPhoneNumberIdentificationEntrySQL;
- (bool)addIdentificationEntriesWithData:(id)arg1 extensionID:(long long)arg2 error:(id*)arg3;
- (bool)addIdentificationEntryWithPhoneNumber:(long long)arg1 labelID:(long long)arg2 extensionID:(long long)arg3 error:(id*)arg4;
- (long long)addLabel:(id)arg1 error:(id*)arg2;
- (id)addPhoneNumbersSQL;
- (bool)containsBlockingEntryForEnabledExtensionWithPhoneNumber:(id)arg1 error:(id*)arg2;
- (bool)containsBlockingEntryForEnabledExtensionWithPhoneNumberInArray:(id)arg1 error:(id*)arg2;
- (bool)containsBlockingEntryWithPhoneNumber:(id)arg1 error:(id*)arg2;
- (bool)containsBlockingEntryWithPhoneNumberInArray:(id)arg1 error:(id*)arg2;
- (bool)containsExtensionWithIdentifier:(id)arg1 error:(id*)arg2;
- (id)database;
- (void)dealloc;
- (id)description;
- (id)extensionWithIdentifier:(id)arg1 error:(id*)arg2;
- (id)firstIdentificationEntriesForEnabledExtensionsWithPhoneNumbers:(id)arg1 error:(id*)arg2;
- (id)firstIdentificationEntriesForPhoneNumbers:(id)arg1 error:(id*)arg2;
- (id)firstIdentificationEntryForEnabledExtensionWithPhoneNumber:(id)arg1 error:(id*)arg2;
- (id)firstIdentificationEntryForPhoneNumber:(id)arg1 error:(id*)arg2;
- (long long)idForExtensionWithIdentifier:(id)arg1 error:(id*)arg2;
- (long long)idForLabel:(id)arg1 error:(id*)arg2;
- (long long)idForPhoneNumber:(long long)arg1 error:(id*)arg2;
- (id)init;
- (id)initForReadingAndWritingWithError:(id*)arg1;
- (id)initForReadingWithError:(id*)arg1;
- (id)initReadOnly:(bool)arg1 temporary:(bool)arg2 error:(id*)arg3;
- (id)initWithTemplateURL:(id)arg1 readOnly:(bool)arg2 temporary:(bool)arg3 error:(id*)arg4;
- (bool)isCorrupt;
- (bool)isTemporary;
- (long long)lastAddBlockingEntriesCount;
- (long long)lastAddIdentificationEntriesCount;
- (long long)lastAddPhoneNumbersCount;
- (long long)lastRemoveBlockingEntriesCount;
- (long long)lastRemoveIdentificationEntriesCount;
- (bool)performTransactionWithBlock:(id /* block */)arg1 error:(id*)arg2;
- (id)prioritizedExtensionIdentifiersWithError:(id*)arg1;
- (id)prioritizedExtensionsWithError:(id*)arg1;
- (bool)removeBlockingEntriesForExtensionWithID:(long long)arg1 error:(id*)arg2;
- (id)removeBlockingEntriesSQL;
- (bool)removeBlockingEntriesWithData:(id)arg1 extensionID:(long long)arg2 error:(id*)arg3;
- (bool)removeExtensionWithIdentifier:(id)arg1 error:(id*)arg2;
- (bool)removeIdentificationEntriesForExtensionWithID:(long long)arg1 error:(id*)arg2;
- (id)removeIdentificationEntriesSQL;
- (bool)removeIdentificationEntriesWithData:(id)arg1 extensionID:(long long)arg2 error:(id*)arg3;
- (bool)removeUnreferencedRecordsWithError:(id*)arg1;
- (long long)schemaVersion;
- (long long)schemaVersionWithError:(id*)arg1;
- (void)setAddBlockingEntriesInsertPhoneNumberBlockingEntrySQL:(id)arg1;
- (void)setAddIdentificationEntriesInsertLabelsSQL:(id)arg1;
- (void)setAddIdentificationEntriesInsertPhoneNumberIdentificationEntrySQL:(id)arg1;
- (void)setAddPhoneNumbersSQL:(id)arg1;
- (void)setDatabase:(id)arg1;
- (void)setLastAddBlockingEntriesCount:(long long)arg1;
- (void)setLastAddIdentificationEntriesCount:(long long)arg1;
- (void)setLastAddPhoneNumbersCount:(long long)arg1;
- (void)setLastRemoveBlockingEntriesCount:(long long)arg1;
- (void)setLastRemoveIdentificationEntriesCount:(long long)arg1;
- (bool)setPrioritizedExtensionIdentifiers:(id)arg1 error:(id*)arg2;
- (void)setRemoveBlockingEntriesSQL:(id)arg1;
- (void)setRemoveIdentificationEntriesSQL:(id)arg1;
- (bool)setState:(long long)arg1 forExtensionWithID:(long long)arg2 error:(id*)arg3;
- (bool)setState:(long long)arg1 forExtensionWithIdentifier:(id)arg2 error:(id*)arg3;
- (bool)setStateForAllExtensions:(long long)arg1 error:(id*)arg2;
- (bool)setStateLastModifiedDate:(id)arg1 forExtensionWithID:(long long)arg2 error:(id*)arg3;
- (void)setTemporary:(bool)arg1;
- (id)url;
- (bool)vacuumWithError:(id*)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
