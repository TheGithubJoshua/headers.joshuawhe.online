<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDTextInput.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/protocols/TSDTextInput.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
 */

@protocol TSDTextInput <TSDEditor, UIResponderStandardEditActions>

@required

- (unsigned long long)charIndexByMovingPosition:(TSDTextPosition *)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3 preferPosition:(double*)arg4;
- (void)clearMarkedRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })editRange;
- (void)endEditing;
- (void)extendSelectionLeft;
- (void)extendSelectionRight;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (UIView *)inputAccessoryView;
- (UIView *)inputView;
- (void)insertText:(NSString *)arg1;
- (bool)isCharIndex:(unsigned long long)arg1 withEolAffinity:(bool)arg2 atBoundary:(long long)arg3 inDirection:(long long)arg4;
- (bool)isCharIndex:(unsigned long long)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })markedRange;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })rangeOfWordEnclosingCharIndex:(unsigned long long)arg1 backward:(bool)arg2;
- (void)replaceRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 withText:(NSString *)arg2;
- (long long)returnKeyType;
- (NSArray *)selectionRectsForRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (TSKSelection<TSDTextSelection> *)selectionWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)setMarkedText:(NSString *)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setSelectionWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 endOfLine:(bool)arg2;
- (UIColor *)textColorAtCharIndex:(unsigned long long)arg1;
- (UIFont *)textFontAtCharIndex:(unsigned long long)arg1;
- (NSString *)textInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (TSKSelection<TSDTextSelection> *)textInputSelection;
- (bool)textIsVerticalAtCharIndex:(unsigned long long)arg1;
- (unsigned long long)textLength;
- (bool)wantsKeyboard;

@optional

- (bool)acceptsColumnBreaks;
- (bool)acceptsHyperlink;
- (bool)acceptsLineBreaks;
- (bool)acceptsPageBreaks;
- (bool)acceptsSectionBreaks;
- (bool)acceptsTabs;
- (void)arrowKeyReceivedInDirection:(int)arg1 withModifierKeys:(int)arg2;
- (long long)autocorrectionType;
- (bool)canResignFirstResponder;
- (unsigned long long)closestCharIndexToPoint:(struct CGPoint { double x1; double x2; })arg1 isAtEndOfLine:(bool*)arg2;
- (void)endEditingAndSelectParent:(id)arg1;
- (void)insertColumnBreak:(id)arg1;
- (void)insertDictationResult:(NSArray *)arg1;
- (void)insertHyperlink:(id)arg1;
- (void)insertLineBreak:(id)arg1;
- (void)insertNewlineIgnoringFieldEditor:(id)arg1;
- (void)insertPageBreak:(id)arg1;
- (void)insertSectionBreak:(id)arg1;
- (void)insertTab:(id)arg1;
- (void)insertTabIgnoringFieldEditor:(id)arg1;
- (bool)isSecureTextEntry;
- (NSArray *)keyCommands;
- (TSKSelection<TSDTextSelection> *)selectionForArrowKeys;
- (void)setBaseWritingDirection:(long long)arg1 forParagraphsWithRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setSelectionForArrowKeys:(TSKSelection<TSDTextSelection> *)arg1;
- (UIView *)textInputView;
- (NSString *)unfilteredText;
- (bool)wantsRawArrowKeyEvents;
- (long long)writingDirectionForCharIndex:(unsigned long long)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
