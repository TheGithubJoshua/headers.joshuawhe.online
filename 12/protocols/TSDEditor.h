<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>TSDEditor.h</title>
    <meta name="viewport" content="width=device-width">
    <style>
    body { margin: 1em; }
    pre { font: 11pt/1.25 ui-monospace, "SF Mono", Menlo, monospace; }
    a { color: #af52de; }
    pre { white-space: pre-wrap; }
    header, footer { color: #8e8e93; }
    header { white-space: pre; }
    footer { max-width: 700px; }
    hr { border: 0; border-top: 1px solid #c6c6c8; }
    .download { text-decoration: none; }
    @media (prefers-color-scheme: dark) {
        body { background: black; color: white; }
        a { color: #bf5af2; }
        hr { border-top-color: #333335; }
    }
    </style>
</head>
<body>
<pre><header>
 ___          _   _             ___
| _ \_  _ _ _| |_(_)_ __  ___  | _ )_ _ _____ __ _____ ___ _ _
|   / || | ' \  _| | '  \/ -_) | _ \ '_/ _ \ V  V (_-// -_) '_|
|_|_\\_,_|_||_\__|_|_|_|_\___| |___/_| \___/\_/\_//__/\___|_|


</header><hr>

/protocols/TSDEditor.h <a href="?download" download title="Download" class="download">&darr;</a>


/* Generated by RuntimeBrowser
   Platform: iOS 12.5.7 (16H81) arm64
 */

@protocol TSDEditor <NSObject>

@required

- (TSKDocumentRoot *)documentRoot;

@optional

- (void)addContextualMenuItemsToArray:(NSMutableArray *)arg1;
- (bool)canAddOrShowComment;
- (bool)canBeginEditingRepOnDoubleTap:(TSDRep *)arg1;
- (bool)canBeginPathEditing;
- (int)canPerformEditorAction:(SEL)arg1 withSender:(id)arg2;
- (NSSet *)canvasCoachingTips;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })coachingTipManager:(APDCoachingTipsManager *)arg1 coachingTipView:(APDCoachingTipView *)arg2 canvasRectForKey:(NSString *)arg3;
- (void)copy:(id)arg1;
- (void)customAction5:(id)arg1;
- (void)customAction6:(id)arg1;
- (void)customAction7:(id)arg1;
- (void)customAction8:(id)arg1;
- (void)cut:(id)arg1;
- (void)delete:(id)arg1;
- (void)didBecomeCurrentEditor;
- (void)didBecomeTextInputEditor;
- (void)didEnterBackground;
- (void)didResignTextInputEditor;
- (<TSKSearchReference> *)editingSearchReference;
- (NSArray *)extraMenuItems;
- (bool)ignoreSetSelection:(TSKSelection *)arg1 onInfo:(NSObject<TSDInfo> *)arg2;
- (NSString *)inspectorTabTipKey;
- (NSArray *)level2InspectorViewControllers;
- (<TSKModel> *)model;
- (void)paste:(id)arg1;
- (bool)readyToAcceptSelection:(TSKSelection *)arg1 onInfo:(NSObject<TSDInfo> *)arg2;
- (void)reverseDirection:(id)arg1;
- (void)select:(id)arg1;
- (void)selectAll:(id)arg1;
- (NSSet *)selectedObjectsSupportingConnectionLineAttributes;
- (NSSet *)selectedObjectsSupportingEndpoints;
- (NSSet *)selectedObjectsSupportingFill;
- (NSSet *)selectedObjectsSupportingOpacity;
- (NSSet *)selectedObjectsSupportingReflection;
- (NSSet *)selectedObjectsSupportingResize;
- (NSSet *)selectedObjectsSupportingShadow;
- (NSSet *)selectedObjectsSupportingShrinkTextToFit;
- (NSSet *)selectedObjectsSupportingSmartShapeAttributes;
- (NSSet *)selectedObjectsSupportingStroke;
- (NSSet *)selectedObjectsSupportingTextInset;
- (TSKSelection *)selection;
- (void)setSelection:(TSKSelection *)arg1;
- (void)setSelection:(TSKSelection *)arg1 withFlags:(unsigned long long)arg2;
- (void)setSelectionWithSearchReference:(id <TSKSearchReference>)arg1;
- (bool)shouldEndEditingToBeginEditingRep:(TSDRep *)arg1;
- (bool)shouldProhibitAction:(SEL)arg1;
- (bool)suppressAutozoom;
- (double)targetPointSizeForSelectionWithViewScale:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })targetRectForEditMenu;
- (void)teardown;
- (NSString *)topLevelInspectorAutosaveName;
- (struct CGSize { double x1; double x2; })topLevelInspectorPreferredPopoverSize;
- (NSArray *)topLevelInspectorViewControllers;
- (double)viewScaleForSelectionWithTargetPointSize:(double)arg1;
- (bool)wantsToBePushedBackOntoStackForSelection:(TSKSelection<TSDCanvasSelection> *)arg1;
- (void)willEnterForeground;
- (void)willResignCurrentEditor;
- (void)willResignTextInputEditor;
- (UIViewController *)wrapInspectorController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })zoomRectForSelection:(TSKSelection *)arg1;

@end


<hr><footer>
Source code: <a href="https://github.com/hbang/RuntimeBrowser">https://github.com/hbang/RuntimeBrowser</a>

Authors:
  Ezra Epstein (eepstein@prajna.com)
  Nicolas Seriot (nicolas@seriot.ch)
  HASHBANG Productions

Copyright &copy; 2002 by Prajna IT Consulting
Copyright &copy; 2015 by <a href="http://www.seriot.ch">Nicolas Seriot</a>
Copyright &copy; 2021 by <a href="https://hashbang.productions">HASHBANG Productions</a>

THIS PROGRAM AND THIS CODE COME WITH ABSOLUTELY NO WARRANTY. THIS CODE HAS BEEN PROVIDED "AS IS" AND THE RESPONSIBILITY FOR ITS OPERATIONS IS 100% YOURS.

RuntimeBrowser is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.

RuntimeBrowser is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with RuntimeBrowser (in a file called "COPYING.txt"); if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</footer></pre>
</body>
</html>
